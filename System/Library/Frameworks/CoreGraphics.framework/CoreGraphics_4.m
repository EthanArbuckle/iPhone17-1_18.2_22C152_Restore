uint64_t rgb555_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  unsigned int v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, int *, int, int, int, int);
  uint64_t (*v27)(uint64_t, int *, int, int, int, int);
  uint64_t (*v28)(uint64_t, int *, int, int, int, int);
  uint64_t v29;
  int v30;
  int v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  _OWORD v49[64];
  uint64_t v50;

  v50 = *MEMORY[0x1E4F143B8];
  v6 = *a1;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  memset(v49, 0, 512);
  if (*((void *)a2 + 12)) {
    v7 = 0;
  }
  else {
    v7 = *(float *)(a3 + 8) >= 1.0;
  }
  v8 = *(_DWORD *)(*(void *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((void *)a2 + 6) == 0));
  if (v8 > 28) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v32, (uint64_t)v49) < 1) {
    return 0xFFFFFFFFLL;
  }
  v18 = *(_DWORD *)a3;
  *((void *)&v32 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v18 != 67449684)
  {
    v19 = SAMPLEINDEX(v18, v10, v11, v12, v13, v14, v15, v16);
    if (!v19) {
      return 0xFFFFFFFFLL;
    }
    if (v19 > 0xB)
    {
LABEL_20:
      v21 = 255;
      v20 = 1;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      switch(v19)
      {
        case 2u:
          if (*((void *)a2 + 12)) {
            goto LABEL_20;
          }
          v20 = 0;
          v21 = 16;
          break;
        case 5u:
          v20 = 0;
          v21 = 24;
          break;
        case 6u:
          break;
        case 7u:
          v20 = 0;
          v21 = 32;
          break;
        case 8u:
          v20 = 0;
          v21 = 8;
          break;
        case 9u:
          v20 = 0;
          v21 = 40;
          break;
        default:
          goto LABEL_20;
      }
    }
    *(void *)&v32 = rgb555_image_sample[v19 + 1];
    if ((void)v32)
    {
      if (!*(unsigned char *)(a3 + 5) || (v22 = *(_DWORD *)a3, (HIWORD(*(_DWORD *)a3) & 0x3Fu) <= (*(_WORD *)(v6 + 2) & 0x3Fu)))
      {
        DWORD2(v32) = 67449684;
        goto LABEL_37;
      }
    }
    else
    {
      v22 = *(_DWORD *)a3;
    }
    if ((HIWORD(v22) & 0x3F) > 8u)
    {
      if ((v22 & 0x3F0000) >> 16 > 0x10)
      {
LABEL_32:
        v23 = RGBF_image_sample;
        *(void *)&v32 = *(void *)&RGBF_image_sample[2 * v19 + 2];
        if ((void)v32)
        {
          v24 = 16;
          goto LABEL_34;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v23 = RGB8_image_sample;
      *(void *)&v32 = *(void *)&RGB8_image_sample[2 * v19 + 2];
      if ((void)v32) {
        goto LABEL_35;
      }
    }
    v23 = RGB16_image_sample;
    *(void *)&v32 = *(void *)&RGB16_image_sample[2 * v19 + 2];
    if ((void)v32)
    {
      v24 = 8;
LABEL_34:
      LODWORD(v33) = v24;
LABEL_35:
      DWORD2(v32) = *v23;
      if (*(unsigned char *)(a3 + 5)) {
        *((void *)&v42 + 1) = pixel_dither_noise;
      }
LABEL_37:
      if ((v20 & 1) == 0
        && (v8 - 1) <= 1
        && (BYTE4(v33) & 7) == 3
        && (a2[2] == 5 || !a2[2])
        && v19 <= 0xB)
      {
        HIDWORD(v25) = v21;
        LODWORD(v25) = v21;
        switch((v25 >> 3))
        {
          case 0u:
            DWORD2(v32) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_RGB32;
            goto LABEL_59;
          case 1u:
            DWORD2(v32) = *(_DWORD *)a3;
            v27 = rgb555_image_mark_RGB32;
            goto LABEL_61;
          case 2u:
            DWORD2(v32) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_W8;
            goto LABEL_59;
          case 3u:
            DWORD2(v32) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_RGB24;
            goto LABEL_59;
          case 4u:
            DWORD2(v32) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_rgb32;
LABEL_59:
            v28 = v26;
            v29 = (uint64_t)a2;
            v30 = v8;
            v31 = 0;
            break;
          case 5u:
            DWORD2(v32) = *(_DWORD *)a3;
            v27 = rgb555_image_mark_rgb32;
LABEL_61:
            v28 = v27;
            v29 = (uint64_t)a2;
            v30 = v8;
            v31 = 8;
            break;
          default:
            goto LABEL_38;
        }
        rgb555_image_mark_image(v29, (uint64_t)&v32, v30, v31, (void (*)(void, void))v28);
        return 1;
      }
      goto LABEL_38;
    }
    goto LABEL_32;
  }
  if (!(void)v43 && (~DWORD1(v33) & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(void *)(a3 + 24))
    {
      if ((BYTE4(v33) & 4) != 0)
      {
        v17.n128_u64[0] = *(void *)(a3 + 32);
        *((void *)a2 + 8) = v17.n128_u64[0];
      }
      rgb555_mark((uint64_t)a1, v17);
      return 1;
    }
  }
  *(void *)&v32 = rgb555_sample_rgb555;
LABEL_38:
  rgb555_image_mark((uint64_t)a2, (uint64_t)&v32, v8, v17);
  return 1;
}

uint64_t rgb555_mark(uint64_t a1, __n128 a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v885 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)v3;
  v6 = *(unsigned __int8 **)(v3 + 96);
  uint64_t v7 = *(void *)(v3 + 48);
  int v8 = *(_DWORD *)(*(void *)(*(void *)v2 + 56)
                 + 16 * *(_DWORD *)v3
                 + 8 * (v6 == 0)
                 + 4 * (v7 == 0));
  if (v8 > 27) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = v3;
  unint64_t v11 = *(unsigned int *)(v3 + 4);
  unsigned int v12 = v11 - 1;
  if ((int)v11 < 1) {
    return 0;
  }
  int v13 = *(_DWORD *)(v3 + 8);
  uint64_t v14 = (v13 - 1);
  if (v13 < 1) {
    return 0;
  }
  v15 = *(uint16x4_t **)(v3 + 136);
  int v803 = *(_DWORD *)(*(void *)(*(void *)v2 + 56)
                   + 16 * *(_DWORD *)v3
                   + 8 * (v6 == 0)
                   + 4 * (v7 == 0));
  if ((v5 & 0xFF0000) == 0x50000 || !v15)
  {
    uint64_t v801 = v3;
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
    {
      v884[0] = *(_DWORD *)(v3 + 4);
      v874[0] = v13;
      if (v6) {
        unsigned int v17 = *v6;
      }
      else {
        unsigned int v17 = 255;
      }
      unsigned int v31 = **(unsigned __int16 **)(v3 + 88);
      uint64_t v33 = *(int *)(v3 + 12);
      uint64_t v32 = *(int *)(v3 + 16);
      unint64_t v34 = (unint64_t)*(int *)(v3 + 28) >> 1;
      if (v7)
      {
        uint64_t v845 = *(int *)(v3 + 32);
        v843 = (char *)(v7 + v33 + (int)v845 * (uint64_t)(int)v32);
        unsigned int v841 = 1;
      }
      else
      {
        v843 = 0;
        uint64_t v845 = 0;
        unsigned int v841 = 0;
      }
      char v43 = ~(_BYTE)v17;
      uint64_t v44 = *(void *)(v3 + 40) + 2 * (v33 + v32 * v34);
      uint64_t v839 = v44;
      if (v15)
      {
        shape_enum_clip_alloc(v2, v3, (int *)v15, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v11, v13);
        uint64_t v46 = v45;
        v47 = v843;
        uint64_t v871 = v845;
        if (v45) {
          goto LABEL_317;
        }
        return 1;
      }
      uint64_t v867 = 0;
      if (v7) {
        unint64_t v48 = v11;
      }
      else {
        unint64_t v48 = 0;
      }
      v47 = v843;
      uint64_t v871 = v845 - v48;
      v49 = (char *)v44;
      unint64_t v50 = v11;
LABEL_76:
      unint64_t v870 = v34 - v50;
      int v811 = v11;
      switch(v8)
      {
        case 0:
          uint64_t v80 = v870 + (int)v11;
          unsigned int v81 = v874[0];
          uint64_t v82 = v874[0] - 1;
          v83 = &v49[2 * ((v80 * v82) & (v80 >> 63))];
          if (v80 < 0) {
            uint64_t v80 = -v80;
          }
          int v84 = v11;
          CGBlt_fillBytes(2 * v11, v874[0], 0, v83, 2 * v80);
          if (v7)
          {
            uint64_t v85 = v871 + v84;
            v47 += (v85 * v82) & (v85 >> 63);
            if (v85 >= 0) {
              uint64_t v86 = v871 + v84;
            }
            else {
              uint64_t v86 = -v85;
            }
            uint64_t v871 = v86;
            CGBlt_fillBytes(v84, v81, 0, v47, v86);
          }
          goto LABEL_351;
        case 1:
          uint64_t v87 = v870 + (int)v11;
          uint64_t v835 = (int)v11;
          if (v87 < 0)
          {
            v49 += 2 * v87 * (v874[0] - 1);
            uint64_t v87 = -v87;
          }
          uint64_t v88 = v44;
          int v89 = 0;
          v90 = *(int **)(v801 + 88);
          if (v90) {
            int v89 = *v90;
          }
          signed int v91 = v874[0];
          v92 = v49;
          int v93 = v11;
          CGBlt_fillBytes(2 * v11, v874[0], v89, v92, 2 * v87);
          if (v7)
          {
            v94 = *(int **)(v801 + 96);
            if (!v94) {
              v94 = (int *)&PIXELALPHAPLANARCONSTANT_17534;
            }
            v47 += ((v871 + v835) * (v91 - 1)) & ((v871 + v835) >> 63);
            if (v871 + v835 >= 0) {
              uint64_t v95 = v871 + v835;
            }
            else {
              uint64_t v95 = -(v871 + v835);
            }
            uint64_t v871 = v95;
            CGBlt_fillBytes(v93, v91, *v94, v47, v95);
          }
          uint64_t v44 = v88;
          goto LABEL_315;
        case 2:
          unint64_t v838 = v34;
          if (v7)
          {
            do
            {
              int v96 = v884[0];
              if (v884[0] >= 4)
              {
                unsigned int v97 = (v884[0] >> 2) + 1;
                do
                {
                  uint64_t v98 = PDAplusDAM(v31, v17, *(unsigned __int16 *)v49, *v47, ~(_BYTE)v17);
                  *(_WORD *)v49 = v98;
                  char *v47 = BYTE3(v98);
                  uint64_t v99 = PDAplusDAM(v31, v17, *((unsigned __int16 *)v49 + 1), v47[1], ~(_BYTE)v17);
                  *((_WORD *)v49 + 1) = v99;
                  v47[1] = BYTE3(v99);
                  uint64_t v100 = PDAplusDAM(v31, v17, *((unsigned __int16 *)v49 + 2), v47[2], ~(_BYTE)v17);
                  *((_WORD *)v49 + 2) = v100;
                  v47[2] = BYTE3(v100);
                  int v101 = PDAplusDAM(v31, v17, *((unsigned __int16 *)v49 + 3), v47[3], ~(_BYTE)v17);
                  *((_WORD *)v49 + 3) = v101;
                  v47[3] = HIBYTE(v101);
                  v49 += 8;
                  v47 += 4 * v841;
                  --v97;
                }
                while (v97 > 1);
                int v96 = v884[0] & 3;
                unint64_t v34 = v838;
              }
              if (v96 >= 1)
              {
                unsigned int v102 = v96 + 1;
                do
                {
                  int v103 = PDAplusDAM(v31, v17, *(unsigned __int16 *)v49, *v47, ~(_BYTE)v17);
                  *(_WORD *)v49 = v103;
                  v49 += 2;
                  char *v47 = HIBYTE(v103);
                  v47 += v841;
                  --v102;
                }
                while (v102 > 1);
              }
              v49 += 2 * v870;
              v47 += v871;
              --v874[0];
            }
            while (v874[0]);
            int v8 = v803;
            goto LABEL_351;
          }
          int v176 = v874[0];
          int v836 = v11 & 3;
          unsigned int v832 = (v11 >> 2) + 1;
          do
          {
            if ((int)v11 < 4)
            {
              int v178 = v11;
            }
            else
            {
              unsigned int v177 = v832;
              do
              {
                *(_WORD *)v49 = PDplusDM(v31, *(unsigned __int16 *)v49, ~(_BYTE)v17);
                *((_WORD *)v49 + 1) = PDplusDM(v31, *((unsigned __int16 *)v49 + 1), ~(_BYTE)v17);
                *((_WORD *)v49 + 2) = PDplusDM(v31, *((unsigned __int16 *)v49 + 2), ~(_BYTE)v17);
                *((_WORD *)v49 + 3) = PDplusDM(v31, *((unsigned __int16 *)v49 + 3), ~(_BYTE)v17);
                v49 += 8;
                v47 += 4 * v841;
                --v177;
              }
              while (v177 > 1);
              int v178 = v836;
              uint64_t v44 = v839;
              LODWORD(v11) = v811;
            }
            if (v178 >= 1)
            {
              unsigned int v179 = v178 + 1;
              do
              {
                *(_WORD *)v49 = PDplusDM(v31, *(unsigned __int16 *)v49, ~(_BYTE)v17);
                v49 += 2;
                --v179;
              }
              while (v179 > 1);
              v47 += v178 * v841;
              uint64_t v44 = v839;
              LODWORD(v11) = v811;
            }
            v49 += 2 * v870;
            v47 += v871;
            --v176;
          }
          while (v176);
          v874[0] = 0;
          int v8 = v803;
          goto LABEL_315;
        case 3:
          do
          {
            int v104 = v884[0];
            do
            {
              unsigned int v105 = *v47;
              if (v105 > 7)
              {
                if (v105 < 0xF8)
                {
                  unsigned int v107 = PDAM(v31, v17, v105);
                  *(_WORD *)v49 = v107;
                  unsigned int v106 = HIBYTE(v107);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  LOBYTE(v106) = v17;
                }
              }
              else
              {
                LOBYTE(v106) = 0;
                *(_WORD *)v49 = 0;
              }
              char *v47 = v106;
              v49 += 2;
              v47 += v841;
              --v104;
            }
            while (v104);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 4:
          do
          {
            int v108 = v884[0];
            do
            {
              unsigned int v109 = *v47;
              if (v109 < 0xF8)
              {
                if (v109 > 7)
                {
                  unsigned int v111 = PDAM(v31, v17, ~(_BYTE)v109);
                  *(_WORD *)v49 = v111;
                  unsigned int v110 = HIBYTE(v111);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  LOBYTE(v110) = v17;
                }
              }
              else
              {
                LOBYTE(v110) = 0;
                *(_WORD *)v49 = 0;
              }
              char *v47 = v110;
              v49 += 2;
              v47 += v841;
              --v108;
            }
            while (v108);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 5:
          do
          {
            int v112 = v884[0];
            do
            {
              int v113 = PDAMplusDAM(v31, v17, *v47, *(unsigned __int16 *)v49, *v47, ~(_BYTE)v17);
              *(_WORD *)v49 = v113;
              v49 += 2;
              char *v47 = HIBYTE(v113);
              v47 += v841;
              --v112;
            }
            while (v112);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 6:
          goto LABEL_128;
        case 7:
          if (v7)
          {
            do
            {
              int v118 = v884[0];
              do
              {
                int v119 = PDAM(*(unsigned __int16 *)v49, *v47, v17);
                *(_WORD *)v49 = v119;
                v49 += 2;
                char *v47 = HIBYTE(v119);
                v47 += v841;
                --v118;
              }
              while (v118);
              v49 += 2 * v870;
              v47 += v871;
              --v874[0];
            }
            while (v874[0]);
            goto LABEL_314;
          }
          unint64_t v180 = v34;
          int v181 = v874[0];
          unint64_t v182 = v841 + v841 * (unint64_t)(v11 - 1);
          do
          {
            int v183 = v11;
            do
            {
              *(_WORD *)v49 = PDM(*(unsigned __int16 *)v49, v17);
              v49 += 2;
              --v183;
            }
            while (v183);
            v49 += 2 * v870;
            v47 += v182 + v871;
            --v181;
            LODWORD(v11) = v811;
          }
          while (v181);
          goto LABEL_350;
        case 8:
          if (v7)
          {
            do
            {
              int v120 = v884[0];
              do
              {
                int v121 = PDAM(*(unsigned __int16 *)v49, *v47, v43);
                *(_WORD *)v49 = v121;
                v49 += 2;
                char *v47 = HIBYTE(v121);
                v47 += v841;
                --v120;
              }
              while (v120);
              v49 += 2 * v870;
              v47 += v871;
              --v874[0];
            }
            while (v874[0]);
            goto LABEL_314;
          }
          unint64_t v180 = v34;
          int v184 = v874[0];
          unint64_t v185 = v841 + v841 * (unint64_t)(v11 - 1);
          do
          {
            int v186 = v11;
            do
            {
              *(_WORD *)v49 = PDM(*(unsigned __int16 *)v49, v43);
              v49 += 2;
              --v186;
            }
            while (v186);
            v49 += 2 * v870;
            v47 += v185 + v871;
            --v184;
            LODWORD(v11) = v811;
          }
          while (v184);
          goto LABEL_350;
        case 9:
          do
          {
            int v122 = v884[0];
            do
            {
              int v123 = PDAMplusDAM(v31, v17, *v47 ^ 0xFFu, *(unsigned __int16 *)v49, *v47, v17);
              *(_WORD *)v49 = v123;
              v49 += 2;
              char *v47 = HIBYTE(v123);
              v47 += v841;
              --v122;
            }
            while (v122);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 10:
          do
          {
            int v124 = v884[0];
            do
            {
              int v125 = PDAMplusDAM(v31, v17, *v47 ^ 0xFFu, *(unsigned __int16 *)v49, *v47, ~(_BYTE)v17);
              *(_WORD *)v49 = v125;
              v49 += 2;
              char *v47 = HIBYTE(v125);
              v47 += v841;
              --v124;
            }
            while (v124);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 11:
          if (v7)
          {
            do
            {
              int v126 = v884[0];
              do
              {
                int v127 = PDAplusdDA(*(_WORD *)v49, *v47, v31, v17);
                *(_WORD *)v49 = v127;
                v49 += 2;
                char *v47 = HIBYTE(v127);
                v47 += v841;
                --v126;
              }
              while (v126);
              v49 += 2 * v870;
              v47 += v871;
              --v874[0];
            }
            while (v874[0]);
            goto LABEL_314;
          }
          unint64_t v180 = v34;
          int v187 = v874[0];
          unint64_t v188 = v841 + v841 * (unint64_t)(v11 - 1);
          do
          {
            int v189 = v11;
            do
            {
              *(_WORD *)v49 = PDplusdDA(*(unsigned __int16 *)v49, v31, v17);
              v49 += 2;
              --v189;
            }
            while (v189);
            v49 += 2 * v870;
            v47 += v188 + v871;
            --v187;
            LODWORD(v11) = v811;
          }
          while (v187);
LABEL_350:
          v874[0] = 0;
          int v8 = v803;
          unint64_t v34 = v180;
LABEL_351:
          uint64_t v44 = v839;
          goto LABEL_315;
        case 12:
          if (v7)
          {
            do
            {
              int v128 = v884[0];
              do
              {
                int v129 = PDApluslDA(*(unsigned __int16 *)v49, *v47, v31, v17);
                *(_WORD *)v49 = v129;
                v49 += 2;
                char *v47 = HIBYTE(v129);
                v47 += v841;
                --v128;
              }
              while (v128);
              v49 += 2 * v870;
              v47 += v871;
              --v874[0];
            }
            while (v874[0]);
            goto LABEL_314;
          }
          int v190 = v874[0];
          do
          {
            int v191 = v11;
            do
            {
              unsigned int v192 = ((*(unsigned __int16 *)v49 | (*(unsigned __int16 *)v49 << 15)) & 0x1F07C1F)
                   + ((v31 | (v31 << 15)) & 0x1F07C1F);
              *(_WORD *)v49 = (((15 * ((v192 >> 5) & 0x100401)) | v192 | (30 * ((v192 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v192 >> 5) & 0x401)) | v192 | (30 * ((v192 >> 5) & 0x401))) & 0x7C1F;
              v49 += 2;
              --v191;
            }
            while (v191);
            v49 += 2 * v870;
            v47 += v841 + v841 * (unint64_t)(v11 - 1) + v871;
            --v190;
          }
          while (v190);
          v874[0] = 0;
          goto LABEL_315;
        case 13:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v130 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v131 = *v47;
                if (v131 > 7)
                {
                  int v132 = PDAmultiplyPDA(*(unsigned __int16 *)v49, v131, v31, v17, v4);
                  *(_WORD *)v49 = v132;
                  char *v47 = HIBYTE(v132);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAmultiplyPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17, v4);
              }
              v49 += 2;
              v47 += v841;
              --v130;
            }
            while (v130);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 14:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v133 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v134 = *v47;
                if (v134 > 7)
                {
                  int v135 = PDAscreenPDA(*(unsigned __int16 *)v49, v134, v31, v17);
                  *(_WORD *)v49 = v135;
                  char *v47 = HIBYTE(v135);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAscreenPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v133;
            }
            while (v133);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 15:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v136 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v137 = *v47;
                if (v137 > 7)
                {
                  int v138 = PDAoverlayPDA(*(unsigned __int16 *)v49, v137, v31, v17);
                  *(_WORD *)v49 = v138;
                  char *v47 = HIBYTE(v138);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAoverlayPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v136;
            }
            while (v136);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 16:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v139 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v140 = *v47;
                if (v140 > 7)
                {
                  int v141 = PDAdarkenPDA(*(unsigned __int16 *)v49, v140, v31, v17);
                  *(_WORD *)v49 = v141;
                  char *v47 = HIBYTE(v141);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAdarkenPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v139;
            }
            while (v139);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 17:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v142 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v143 = *v47;
                if (v143 > 7)
                {
                  int v144 = PDAlightenPDA(*(unsigned __int16 *)v49, v143, v31, v17);
                  *(_WORD *)v49 = v144;
                  char *v47 = HIBYTE(v144);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAlightenPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v142;
            }
            while (v142);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 18:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v145 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v146 = *v47;
                if (v146 > 7)
                {
                  int v147 = PDAcolordodgePDA(*(unsigned __int16 *)v49, v146, v31, v17);
                  *(_WORD *)v49 = v147;
                  char *v47 = HIBYTE(v147);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAcolordodgePDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v145;
            }
            while (v145);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 19:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v148 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v149 = *v47;
                if (v149 > 7)
                {
                  int v150 = PDAcolorburnPDA(*(unsigned __int16 *)v49, v149, v31, v17);
                  *(_WORD *)v49 = v150;
                  char *v47 = HIBYTE(v150);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAcolorburnPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v148;
            }
            while (v148);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 20:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v151 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v152 = *v47;
                if (v152 > 7)
                {
                  int v153 = PDAsoftlightPDA(*(unsigned __int16 *)v49, v152, v31, v17);
                  *(_WORD *)v49 = v153;
                  char *v47 = HIBYTE(v153);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAsoftlightPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v151;
            }
            while (v151);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 21:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v154 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v155 = *v47;
                if (v155 > 7)
                {
                  int v156 = PDAhardlightPDA(*(unsigned __int16 *)v49, v155, v31, v17);
                  *(_WORD *)v49 = v156;
                  char *v47 = HIBYTE(v156);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAhardlightPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v154;
            }
            while (v154);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 22:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v157 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v158 = *v47;
                if (v158 > 7)
                {
                  int v159 = PDAdifferencePDA(*(unsigned __int16 *)v49, v158, v31, v17);
                  *(_WORD *)v49 = v159;
                  char *v47 = HIBYTE(v159);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAdifferencePDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v157;
            }
            while (v157);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 23:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v160 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v161 = *v47;
                if (v161 > 7)
                {
                  int v162 = PDAexclusionPDA(*(unsigned __int16 *)v49, v161, v31, v17);
                  *(_WORD *)v49 = v162;
                  char *v47 = HIBYTE(v162);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAexclusionPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v160;
            }
            while (v160);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 24:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v163 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v164 = *v47;
                if (v164 > 7)
                {
                  int v165 = PDAhuePDA(*(unsigned __int16 *)v49, v164, v31, v17);
                  *(_WORD *)v49 = v165;
                  char *v47 = HIBYTE(v165);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAhuePDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v163;
            }
            while (v163);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 25:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v166 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v167 = *v47;
                if (v167 > 7)
                {
                  int v168 = PDAsaturationPDA(*(unsigned __int16 *)v49, v167, v31, v17);
                  *(_WORD *)v49 = v168;
                  char *v47 = HIBYTE(v168);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAsaturationPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v166;
            }
            while (v166);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 26:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v169 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v170 = *v47;
                if (v170 > 7)
                {
                  int v171 = PDAluminosityPDA(v31, v17, *(unsigned __int16 *)v49, v170);
                  *(_WORD *)v49 = v171;
                  char *v47 = HIBYTE(v171);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAluminosityPDA(v31, v17, *(unsigned __int16 *)v49, 0xFFu);
              }
              v49 += 2;
              v47 += v841;
              --v169;
            }
            while (v169);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        case 27:
          if (v17 < 8) {
            goto LABEL_315;
          }
          do
          {
            int v172 = v884[0];
            do
            {
              if (v7)
              {
                unsigned int v173 = *v47;
                if (v173 > 7)
                {
                  int v174 = PDAluminosityPDA(*(unsigned __int16 *)v49, v173, v31, v17);
                  *(_WORD *)v49 = v174;
                  char *v47 = HIBYTE(v174);
                }
                else
                {
                  *(_WORD *)v49 = v31;
                  char *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v49 = PDAluminosityPDA(*(unsigned __int16 *)v49, 0xFFu, v31, v17);
              }
              v49 += 2;
              v47 += v841;
              --v172;
            }
            while (v172);
            v49 += 2 * v870;
            v47 += v871;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_314;
        default:
          goto LABEL_315;
      }
      while (1)
      {
LABEL_128:
        int v114 = v884[0];
        do
        {
          unsigned int v115 = *v47;
          if (v115 > 7)
          {
            if (v115 > 0xF7) {
              goto LABEL_134;
            }
            unsigned int v117 = PDAplusDAM(*(unsigned __int16 *)v49, v115, v31, v17, ~(_BYTE)v115);
            *(_WORD *)v49 = v117;
            unsigned int v116 = HIBYTE(v117);
          }
          else
          {
            *(_WORD *)v49 = v31;
            LOBYTE(v116) = v17;
          }
          char *v47 = v116;
LABEL_134:
          v49 += 2;
          v47 += v841;
          --v114;
        }
        while (v114);
        v49 += 2 * v870;
        v47 += v871;
        if (!--v874[0])
        {
LABEL_314:
          int v8 = v803;
LABEL_315:
          uint64_t v46 = v867;
          if (v867)
          {
            uint64_t v873 = 0;
LABEL_317:
            if (shape_enum_clip_next(v46, (int *)&v873 + 1, &v873, v884, v874))
            {
              uint64_t v867 = v46;
              v49 = (char *)(v44 + 2 * v34 * (int)v873 + 2 * SHIDWORD(v873));
              unint64_t v50 = v884[0];
              if (v7) {
                v47 = &v843[(int)v845 * (uint64_t)(int)v873 + SHIDWORD(v873)];
              }
              uint64_t v175 = v871;
              if (v7) {
                uint64_t v175 = v845 - v884[0];
              }
              uint64_t v871 = v175;
              LODWORD(v11) = v884[0];
              goto LABEL_76;
            }
            v61 = (void *)v46;
LABEL_1048:
            free(v61);
          }
          return 1;
        }
      }
    }
    v884[0] = *(_DWORD *)(v3 + 4);
    v874[0] = v13;
    unint64_t v18 = *(int *)(v3 + 28);
    uint64_t v19 = *(void *)(v3 + 40);
    uint64_t v20 = *(void *)(v3 + 88);
    uint64_t v22 = *(int *)(v10 + 12);
    uint64_t v21 = *(int *)(v10 + 16);
    unint64_t v23 = v18 >> 1;
    if (v7)
    {
      uint64_t v799 = *(int *)(v10 + 32);
      v800 = (char *)(v7 + v22 + (int)v799 * (uint64_t)(int)v21);
      uint64_t v24 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v799 = 0;
      v800 = 0;
      uint64_t v24 = 0;
    }
    v798 = (__int16 *)(v19 + 2 * (v22 + v21 * v23));
    int v36 = *(_DWORD *)(v10 + 104);
    int v35 = *(_DWORD *)(v10 + 108);
    int v37 = *(_DWORD *)(v10 + 56);
    int v38 = BYTE1(v5);
    int v765 = v37;
    int v766 = *(_DWORD *)(v10 + 60);
    if (v38 == 3)
    {
      unint64_t v56 = v11;
      char v57 = v24;
      uint64_t v2 = rgb555_colorlookup(3, (unsigned __int16 *)v20, v6);
      uint64_t v20 = v2;
      if (v6)
      {
        char v58 = 0;
        v6 = (unsigned __int8 *)(v2 + 512);
        int v42 = 1;
        unint64_t v59 = 16;
        uint64_t v60 = 16;
        uint64_t v830 = 16;
      }
      else
      {
        uint64_t v830 = 0;
        int v42 = 0;
        unint64_t v59 = 16;
        char v58 = 1;
        uint64_t v60 = 16;
      }
      LODWORD(v809) = 16;
      LOBYTE(v24) = v57;
      unint64_t v39 = v23;
      unint64_t v11 = v56;
    }
    else
    {
      unint64_t v39 = v18 >> 1;
      if (v38 == 1)
      {
        uint64_t v40 = *(int *)(v10 + 60);
        unint64_t v809 = (unint64_t)*(int *)(v10 + 76) >> 1;
        if (v6)
        {
          uint64_t v41 = *(int *)(v10 + 80);
          v6 += v37 + (int)v41 * (uint64_t)(int)v40;
          int v42 = -1;
        }
        else
        {
          uint64_t v41 = 0;
          int v42 = 0;
        }
        v869 = (__int16 *)(v20 + 2 * (v37 + v40 * v809));
        if (v809 == v39 && (char *)v798 - (char *)v869 >= 1)
        {
          if (v11 >= (unint64_t)((char *)v798 - (char *)v869) >> 1)
          {
            v798 += v12;
            v800 += v24 & v12;
            v6 += v42 & v12;
            int v64 = -1;
            unint64_t v809 = v39;
            v869 += v12;
            goto LABEL_52;
          }
          unint64_t v62 = v39 * v14;
          v63 = &v869[v39 * v14];
          if (v798 <= &v63[v12])
          {
            unint64_t v39 = -(uint64_t)v39;
            v79 = &v800[v799 * v14];
            uint64_t v799 = -v799;
            v800 = v79;
            v24 &= 1u;
            v6 += v41 * v14;
            uint64_t v41 = -v41;
            v42 &= 1u;
            int v64 = 1;
            v869 = v63;
            unint64_t v809 = v39;
            v798 += v62;
            goto LABEL_52;
          }
        }
        v24 &= 1u;
        v42 &= 1u;
        int v64 = 1;
LABEL_52:
        if (v15)
        {
          int v868 = v42;
          uint64_t v844 = v24;
          v840 = 0;
          uint64_t v20 = -1;
          unint64_t v834 = 0;
          unint64_t v837 = v809;
          uint64_t v830 = v41;
          goto LABEL_60;
        }
        int v802 = v64;
        unint64_t v65 = v64 * (int)v11;
        uint64_t v829 = v799 - (int)v24 * (int)v11;
        unint64_t v66 = -1;
        uint64_t v67 = v41;
        unint64_t v68 = v809;
LABEL_73:
        v840 = 0;
        v842 = (char *)v6;
        unint64_t v834 = 0;
        unint64_t v837 = v68 - v65;
        int v810 = v11;
        uint64_t v74 = v41 - v42 * (int)v11;
        uint64_t v807 = 0;
        uint64_t v808 = (uint64_t)v869;
        v72 = (char *)v6;
        v73 = v800;
        v872 = v798;
        goto LABEL_358;
      }
      LODWORD(v809) = *(_DWORD *)(v10 + 64);
      uint64_t v60 = *(unsigned int *)(v10 + 68);
      unint64_t v59 = (unint64_t)*(int *)(v10 + 76) >> 1;
      if (v6)
      {
        char v58 = 0;
        uint64_t v830 = *(int *)(v10 + 80);
        int v42 = 1;
      }
      else
      {
        uint64_t v830 = 0;
        int v42 = 0;
        char v58 = 1;
      }
    }
    uint64_t v41 = v60;
    unint64_t v834 = v20 + 2 * v59 * (int)v60;
    unint64_t v837 = v59;
    v24 &= 1u;
    if (v15)
    {
      int v868 = v42;
      v869 = (__int16 *)v20;
      uint64_t v844 = v24;
      int v64 = 1;
      v840 = (__int16 *)v20;
LABEL_60:
      unint64_t v846 = v20;
      int v802 = v64;
      shape_enum_clip_alloc(v2, v20, (int *)v15, v64, v39, 1, v36, v35, v11, v13);
      uint64_t v70 = v69;
      uint64_t v71 = (uint64_t)v869;
      v72 = (char *)v6;
      v842 = (char *)v6;
      v73 = v800;
      uint64_t v829 = v799;
      uint64_t v67 = v41;
      uint64_t v74 = v830;
      if (!v69) {
        return 1;
      }
      goto LABEL_1024;
    }
    uint64_t v829 = v799 - (v24 * v11);
    if (!v20)
    {
      v869 = 0;
      unint64_t v66 = 0;
      int v802 = 1;
      unint64_t v65 = v11;
      uint64_t v67 = v60;
      uint64_t v41 = v830;
      unint64_t v68 = v59;
      goto LABEL_73;
    }
    uint64_t v67 = v60;
    int v75 = v766 % (int)v60;
    int v76 = v765 % (int)v809;
    unint64_t v77 = v20 + 2 * v59 * v75;
    unint64_t v66 = v77 + 2 * (int)v809;
    uint64_t v74 = v830;
    int v802 = 1;
    if ((v58 & 1) == 0) {
      int v42 = 1;
    }
    uint64_t v807 = 0;
    uint64_t v808 = v20;
    if (v58) {
      v72 = (char *)v6;
    }
    else {
      v72 = (char *)&v6[(int)v830 * (uint64_t)v75 + v76];
    }
    if (v58) {
      uint64_t v78 = (uint64_t)v6;
    }
    else {
      uint64_t v78 = (uint64_t)&v6[(int)v830 * (uint64_t)v75 + v76];
    }
    v840 = (__int16 *)(v77 + 2 * v76);
    v842 = (char *)v78;
    v73 = v800;
    v869 = v840;
    v872 = v798;
    int v810 = v11;
    unint64_t v65 = v11;
LABEL_357:
    int v765 = v76;
    int v766 = v75;
LABEL_358:
    uint64_t v844 = v24;
    int v868 = v42;
    uint64_t v831 = v74;
    unint64_t v833 = v39 - v65;
    unint64_t v804 = v39;
    v805 = v6;
    uint64_t v806 = v67;
    switch(v8)
    {
      case 0:
        unint64_t v846 = v66;
        uint64_t v193 = v833 - v810;
        v194 = &v872[-v810 + 1];
        if (v802 >= 0)
        {
          v194 = v872;
          uint64_t v193 = v833 + v810;
        }
        unsigned int v195 = v874[0];
        uint64_t v196 = v874[0] - 1;
        v197 = (char *)&v194[(v193 * v196) & (v193 >> 63)];
        if (v193 < 0) {
          uint64_t v193 = -v193;
        }
        int v198 = v24;
        CGBlt_fillBytes(2 * v810, v874[0], 0, v197, 2 * v193);
        if (v198)
        {
          uint64_t v199 = v829 - v810;
          v200 = &v73[-v810 + 1];
          if (v802 >= 0)
          {
            v200 = v73;
            uint64_t v199 = v829 + v810;
          }
          uint64_t v201 = (v199 * v196) & (v199 >> 63);
          if (v199 >= 0) {
            uint64_t v202 = v199;
          }
          else {
            uint64_t v202 = -v199;
          }
          v73 = &v200[v201];
          uint64_t v829 = v202;
          CGBlt_fillBytes(v810, v195, 0, &v200[v201], v202);
        }
        uint64_t v10 = v801;
        v6 = v805;
        goto LABEL_371;
      case 1:
        int v203 = *(unsigned __int8 *)(v10 + 1);
        if ((v203 - 2) >= 2)
        {
          if (v203 == 1)
          {
            unint64_t v846 = v66;
            unint64_t v621 = v39;
            v622 = v6;
            uint64_t v623 = v837 - v810;
            int v624 = v810 - 1;
            v625 = &v869[-v810 + 1];
            uint64_t v626 = v833 - v810;
            v627 = &v872[-v810 + 1];
            if (v802 >= 0)
            {
              v625 = v869;
              v627 = v872;
              uint64_t v623 = v837 + v810;
              uint64_t v626 = v833 + v810;
            }
            int v628 = v874[0];
            uint64_t v629 = v874[0] - 1;
            v630 = (char *)&v625[(v623 * v629) & (v623 >> 63)];
            if (v623 >= 0) {
              uint64_t v631 = v623;
            }
            else {
              uint64_t v631 = -v623;
            }
            if (v626 >= 0) {
              LODWORD(v632) = v626;
            }
            else {
              uint64_t v632 = -v626;
            }
            unint64_t v837 = v631;
            CGBlt_copyBytes(2 * v810, v874[0], v630, (char *)&v627[(v626 * v629) & (v626 >> 63)], 2 * v631, 2 * v632);
            if (v844)
            {
              if (v868)
              {
                uint64_t v633 = v831 - v810;
                v634 = &v72[-v624];
                uint64_t v635 = v829 - v810;
                v636 = &v73[-v624];
                if (v802 >= 0)
                {
                  v634 = v72;
                  v636 = v73;
                  uint64_t v633 = v831 + v810;
                  uint64_t v635 = v829 + v810;
                }
                uint64_t v637 = (v633 * v629) & (v633 >> 63);
                if (v633 >= 0) {
                  uint64_t v638 = v633;
                }
                else {
                  uint64_t v638 = -v633;
                }
                uint64_t v639 = (v635 * v629) & (v635 >> 63);
                if (v635 >= 0) {
                  uint64_t v640 = v635;
                }
                else {
                  uint64_t v640 = -v635;
                }
                v72 = &v634[v637];
                v73 = &v636[v639];
                uint64_t v829 = v640;
                CGBlt_copyBytes(v810, v628, &v634[v637], &v636[v639], v638, v640);
                uint64_t v10 = v801;
                v6 = v622;
                unint64_t v39 = v621;
                uint64_t v74 = v638;
                goto LABEL_1020;
              }
              uint64_t v760 = v829 - v810;
              v761 = &v73[-v624];
              if (v802 >= 0)
              {
                v761 = v73;
                uint64_t v760 = v829 + v810;
              }
              uint64_t v762 = (v760 * v629) & (v760 >> 63);
              if (v760 >= 0) {
                uint64_t v763 = v760;
              }
              else {
                uint64_t v763 = -v760;
              }
              v73 = &v761[v762];
              uint64_t v829 = v763;
              CGBlt_fillBytes(v810, v628, -1, &v761[v762], v763);
            }
            uint64_t v10 = v801;
            v6 = v622;
            unint64_t v39 = v621;
LABEL_371:
            uint64_t v67 = v806;
            uint64_t v71 = v808;
            uint64_t v74 = v831;
            goto LABEL_1022;
          }
        }
        else if (v810 >= 16 && (2 * v809) <= 0x40)
        {
          v4.i32[0] = 2 * v809;
          uint8x8_t v204 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v4.i8);
          v204.i16[0] = vaddlv_u8(v204);
          if (v204.i32[0] <= 1u)
          {
            unint64_t v846 = v66;
            int v205 = v874[0];
            uint64_t v71 = v808;
            CGSFillDRAM64((unint64_t)v872, 2 * (v810 + v833), 2 * v810, v874[0], v808, 2 * v837, 2 * v809, v67, 2 * v765, v766);
            if (!v844) {
              goto LABEL_1022;
            }
            unsigned int v206 = v205;
            uint64_t v70 = v807;
            if (v868)
            {
              CGSFillDRAM64((unint64_t)v73, v810 + v829, v810, v206, (uint64_t)v6, v74, v809, v67, v765, v766);
              if (!v807) {
                return 1;
              }
            }
            else
            {
              CGBlt_fillBytes(v810, v206, -1, v73, v810 + v829);
              if (!v807) {
                return 1;
              }
            }
            goto LABEL_1023;
          }
        }
        if (v24)
        {
          uint64_t v641 = (int)v24;
          if (v42)
          {
            do
            {
              int v642 = v884[0];
              do
              {
                __int16 *v872 = *v869;
                char *v73 = *v72;
                v73 += v641;
                v643 = &v869[v802];
                if ((unint64_t)v643 >= v66) {
                  uint64_t v644 = -(uint64_t)(int)v809;
                }
                else {
                  uint64_t v644 = 0;
                }
                v72 += v42 + v644;
                v869 = &v643[v644];
                v872 += v802;
                --v642;
              }
              while (v642);
              if (v834)
              {
                v645 = &v840[v837];
                BOOL v646 = (unint64_t)v645 >= v834;
                if ((unint64_t)v645 >= v834) {
                  uint64_t v647 = -(uint64_t)(v837 * (int)v67);
                }
                else {
                  uint64_t v647 = 0;
                }
                v648 = &v645[v647];
                unint64_t v649 = v66 + 2 * v647;
                if (v646) {
                  uint64_t v650 = -(v74 * (int)v67);
                }
                else {
                  uint64_t v650 = 0;
                }
                unint64_t v66 = v649 + 2 * v837;
                v869 = v648;
                v840 = v648;
                v842 += v74 + v650;
                v72 = v842;
              }
              else
              {
                v869 += v837;
                v72 += v74;
              }
              v872 += v833;
              v73 += v829;
              --v874[0];
            }
            while (v874[0]);
          }
          else
          {
            do
            {
              int v751 = v884[0];
              do
              {
                __int16 *v872 = *v869;
                char *v73 = -1;
                v73 += v641;
                v752 = &v869[v802];
                if ((unint64_t)v752 >= v66) {
                  uint64_t v753 = -(uint64_t)(int)v809;
                }
                else {
                  uint64_t v753 = 0;
                }
                v72 += v753;
                v869 = &v752[v753];
                v872 += v802;
                --v751;
              }
              while (v751);
              if (v834)
              {
                v754 = &v840[v837];
                BOOL v755 = (unint64_t)v754 >= v834;
                if ((unint64_t)v754 >= v834) {
                  uint64_t v756 = -(uint64_t)(v837 * (int)v67);
                }
                else {
                  uint64_t v756 = 0;
                }
                v757 = &v754[v756];
                unint64_t v758 = v66 + 2 * v756;
                if (v755) {
                  uint64_t v759 = -(v74 * (int)v67);
                }
                else {
                  uint64_t v759 = 0;
                }
                unint64_t v66 = v758 + 2 * v837;
                v869 = v757;
                v840 = v757;
                v842 += v74 + v759;
                v72 = v842;
              }
              else
              {
                v869 += v837;
                v72 += v74;
              }
              v872 += v833;
              v73 += v829;
              --v874[0];
            }
            while (v874[0]);
          }
LABEL_1159:
          unint64_t v846 = v66;
        }
        else
        {
          uint64_t v739 = v42;
          int v740 = v874[0];
          uint64_t v741 = (v874[0] - 1) + 1;
          do
          {
            int v742 = v810;
            do
            {
              __int16 *v872 = *v869;
              v743 = &v869[v802];
              if ((unint64_t)v743 >= v66) {
                uint64_t v744 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v744 = 0;
              }
              v72 += v739 + v744;
              v869 = &v743[v744];
              v872 += v802;
              --v742;
            }
            while (v742);
            if (v834)
            {
              v745 = &v840[v837];
              BOOL v746 = (unint64_t)v745 >= v834;
              if ((unint64_t)v745 >= v834) {
                uint64_t v747 = -(uint64_t)(v837 * (int)v67);
              }
              else {
                uint64_t v747 = 0;
              }
              v748 = &v745[v747];
              unint64_t v749 = v66 + 2 * v747;
              if (v746) {
                uint64_t v750 = -(v74 * (int)v67);
              }
              else {
                uint64_t v750 = 0;
              }
              unint64_t v66 = v749 + 2 * v837;
              v869 = v748;
              v840 = v748;
              v842 += v74 + v750;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              v72 += v74;
            }
            v872 += v833;
            --v740;
          }
          while (v740);
          unint64_t v846 = v66;
          v73 += v829 * v741;
LABEL_1143:
          v874[0] = 0;
        }
        goto LABEL_1021;
      case 2:
        uint64_t v207 = v802;
        uint64_t v771 = -(v74 * (int)v67);
        if (v24)
        {
          uint64_t v208 = (int)v24;
          uint64_t v209 = v42;
          while (1)
          {
            int v210 = v884[0];
            do
            {
              unsigned int v211 = *v72;
              if (v211 < 0xF8)
              {
                if (v211 < 8) {
                  goto LABEL_388;
                }
                unint64_t v213 = v66;
                unsigned int v214 = PDAplusDAM((unsigned __int16)*v869, v211, (unsigned __int16)*v872, *v73, v211 ^ 0xFF);
                uint64_t v207 = v802;
                unint64_t v66 = v213;
                __int16 *v872 = v214;
                unsigned int v212 = HIBYTE(v214);
              }
              else
              {
                __int16 *v872 = *v869;
                LOBYTE(v212) = *v72;
              }
              char *v73 = v212;
LABEL_388:
              v73 += v208;
              v215 = &v869[v207];
              if ((unint64_t)v215 >= v66) {
                uint64_t v216 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v216 = 0;
              }
              v72 += v209 + v216;
              v869 = &v215[v216];
              v872 += v802;
              --v210;
            }
            while (v210);
            if (v834)
            {
              v217 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v218 = (unint64_t)v217 >= v834;
              uint64_t v219 = -(uint64_t)(v837 * (int)v67);
              if ((unint64_t)v217 < v834) {
                uint64_t v219 = 0;
              }
              v220 = &v217[v219];
              unint64_t v221 = v66 + 2 * v219;
              uint64_t v222 = v771;
              if (!v218) {
                uint64_t v222 = 0;
              }
              unint64_t v66 = v221 + 2 * v837;
              v869 = v220;
              v840 = v220;
              v842 += v831 + v222;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            v73 += v829;
            if (!--v874[0]) {
              goto LABEL_1018;
            }
          }
        }
        uint64_t v651 = v42;
        int v652 = v874[0];
        uint64_t v770 = (v874[0] - 1) + 1;
LABEL_981:
        int v653 = v810;
        while (1)
        {
          unsigned int v654 = *v72;
          if (v654 >= 0xF8) {
            break;
          }
          if (v654 >= 8)
          {
            unint64_t v656 = v66;
            __int16 v655 = PDplusDM(*v869, (unsigned __int16)*v872, v654 ^ 0xFF);
            uint64_t v207 = v802;
            unint64_t v66 = v656;
            goto LABEL_986;
          }
LABEL_987:
          v657 = &v869[v207];
          if ((unint64_t)v657 >= v66) {
            uint64_t v658 = -(uint64_t)(int)v809;
          }
          else {
            uint64_t v658 = 0;
          }
          v72 += v651 + v658;
          v869 = &v657[v658];
          v872 += v802;
          if (!--v653)
          {
            if (v834)
            {
              v659 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v660 = (unint64_t)v659 >= v834;
              uint64_t v661 = -(uint64_t)(v837 * (int)v67);
              if ((unint64_t)v659 < v834) {
                uint64_t v661 = 0;
              }
              v662 = &v659[v661];
              unint64_t v663 = v66 + 2 * v661;
              uint64_t v664 = v771;
              if (!v660) {
                uint64_t v664 = 0;
              }
              unint64_t v66 = v663 + 2 * v837;
              v869 = v662;
              v840 = v662;
              v842 += v831 + v664;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            v874[0] = --v652;
            if (!v652)
            {
LABEL_1107:
              unint64_t v846 = v66;
              uint64_t v712 = v829;
              uint64_t v713 = v770;
LABEL_1108:
              v73 += v712 * v713;
LABEL_1019:
              int v8 = v803;
              unint64_t v39 = v804;
              uint64_t v10 = v801;
              v6 = v805;
LABEL_1020:
              uint64_t v67 = v806;
LABEL_1021:
              uint64_t v71 = v808;
LABEL_1022:
              uint64_t v70 = v807;
              if (!v807) {
                return 1;
              }
LABEL_1023:
              uint64_t v873 = 0;
LABEL_1024:
              if (!shape_enum_clip_next(v70, (int *)&v873 + 1, &v873, v884, v874))
              {
                v61 = (void *)v70;
                goto LABEL_1048;
              }
              uint64_t v807 = v70;
              uint64_t v808 = v71;
              if (v834)
              {
                v872 = &v798[v39 * (int)v873 + SHIDWORD(v873)];
                int v75 = ((int)v873 + *(_DWORD *)(v10 + 60)) % (int)v67;
                unint64_t v65 = v884[0];
                int v76 = (HIDWORD(v873) + *(_DWORD *)(v10 + 56)) % (int)v809;
                unint64_t v678 = v71 + 2 * v837 * v75;
                v679 = (__int16 *)(v678 + 2 * v76);
                unint64_t v66 = v678 + 2 * (int)v809;
                uint64_t v24 = v844;
                if (v844) {
                  v73 = &v800[v799 * (int)v873 + SHIDWORD(v873)];
                }
                uint64_t v680 = v829;
                if (v844) {
                  uint64_t v680 = v799 - v884[0];
                }
                uint64_t v829 = v680;
                if (v868) {
                  int v42 = v868;
                }
                else {
                  int v42 = 0;
                }
                if (v868) {
                  v72 = (char *)&v6[v74 * v75 + v76];
                }
                v681 = (unsigned __int8 *)v842;
                if (v868) {
                  v681 = &v6[v74 * v75 + v76];
                }
                v840 = v679;
                v842 = (char *)v681;
                int v810 = v884[0];
                v869 = v679;
                goto LABEL_357;
              }
              uint64_t v682 = SHIDWORD(v873) * (uint64_t)v802;
              int v810 = v884[0];
              v872 = &v798[v39 * (int)v873 + v682];
              unint64_t v65 = v884[0] * v802;
              v869 = (__int16 *)(v71 + 2 * (int)v873 * (int)v809 + 2 * v682);
              unint64_t v837 = (int)v809 - v884[0] * v802;
              uint64_t v24 = v844;
              unint64_t v66 = v846;
              if (v844) {
                v73 = &v800[v799 * (int)v873 + SHIDWORD(v873) * (uint64_t)v802];
              }
              uint64_t v683 = v829;
              if (v844) {
                uint64_t v683 = v799 - v884[0] * v802;
              }
              uint64_t v829 = v683;
              if (v868) {
                int v42 = v868;
              }
              else {
                int v42 = 0;
              }
              unint64_t v834 = 0;
              if (v868)
              {
                v72 = (char *)&v6[(int)v873 * (int)v67 + v682];
                uint64_t v74 = (int)v67 - (int)v65;
              }
              goto LABEL_358;
            }
            goto LABEL_981;
          }
        }
        __int16 v655 = *v869;
LABEL_986:
        __int16 *v872 = v655;
        goto LABEL_987;
      case 3:
        int v223 = v67;
        uint64_t v224 = v802;
        uint64_t v225 = (int)v24;
        uint64_t v767 = -(v74 * v223);
        uint64_t v772 = -(uint64_t)(v837 * v223);
        if (v42)
        {
          uint64_t v226 = v42;
          uint64_t v847 = (int)v24;
          do
          {
            int v227 = v884[0];
            do
            {
              unsigned int v228 = *v73;
              if (v228 > 7)
              {
                unsigned int v230 = (unsigned __int16)*v869;
                if (v228 < 0xF8)
                {
                  uint64_t v231 = v224;
                  unint64_t v232 = v66;
                  unsigned int v233 = PDAM(v230, *v72, v228);
                  unint64_t v66 = v232;
                  uint64_t v224 = v231;
                  uint64_t v225 = v847;
                  __int16 *v872 = v233;
                  unsigned int v229 = HIBYTE(v233);
                }
                else
                {
                  __int16 *v872 = v230;
                  LOBYTE(v229) = *v72;
                }
              }
              else
              {
                LOBYTE(v229) = 0;
                __int16 *v872 = 0;
              }
              char *v73 = v229;
              v73 += v225;
              v234 = &v869[v224];
              if ((unint64_t)v234 >= v66) {
                uint64_t v235 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v235 = 0;
              }
              v72 += v226 + v235;
              v869 = &v234[v235];
              v872 += v802;
              --v227;
            }
            while (v227);
            if (v834)
            {
              v236 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v237 = (unint64_t)v236 >= v834;
              uint64_t v238 = v772;
              if ((unint64_t)v236 < v834) {
                uint64_t v238 = 0;
              }
              v239 = &v236[v238];
              unint64_t v240 = v66 + 2 * v238;
              uint64_t v241 = v767;
              if (!v237) {
                uint64_t v241 = 0;
              }
              unint64_t v66 = v240 + 2 * v837;
              v869 = v239;
              v840 = v239;
              v842 += v831 + v241;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            v73 += v829;
            --v874[0];
          }
          while (v874[0]);
        }
        else
        {
          int v665 = v874[0];
          do
          {
            int v795 = v665;
            int v666 = v810;
            do
            {
              unsigned int v667 = *v73;
              if (v667 >= 8)
              {
                unsigned int v668 = (unsigned __int16)*v869;
                if (v667 <= 0xF7)
                {
                  unint64_t v669 = v66;
                  LOWORD(v668) = PDM(v668, v667);
                  unint64_t v66 = v669;
                }
              }
              else
              {
                LOWORD(v668) = 0;
              }
              __int16 *v872 = v668;
              v73 += v225;
              v670 = &v869[v802];
              if ((unint64_t)v670 >= v66) {
                uint64_t v671 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v671 = 0;
              }
              v72 += v671;
              v869 = &v670[v671];
              v872 += v802;
              --v666;
            }
            while (v666);
            if (v834)
            {
              v672 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v673 = (unint64_t)v672 >= v834;
              uint64_t v674 = v772;
              if ((unint64_t)v672 < v834) {
                uint64_t v674 = 0;
              }
              v675 = &v672[v674];
              unint64_t v676 = v66 + 2 * v674;
              uint64_t v677 = v767;
              if (!v673) {
                uint64_t v677 = 0;
              }
              unint64_t v66 = v676 + 2 * v837;
              v869 = v675;
              v840 = v675;
              v842 += v831 + v677;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            v73 += v829;
            int v665 = v795 - 1;
            v874[0] = v795 - 1;
          }
          while (v795 != 1);
        }
        goto LABEL_1018;
      case 4:
        int v242 = v67;
        uint64_t v243 = (int)v24;
        uint64_t v244 = v42;
        uint64_t v812 = -(uint64_t)(v837 * v242);
        uint64_t v774 = -(v74 * v242);
        do
        {
          int v245 = v884[0];
          unint64_t v848 = v66;
          do
          {
            unsigned int v246 = *v73;
            if (v246 < 0xF8)
            {
              if (v246 > 7)
              {
                if (v42) {
                  char v248 = *v72;
                }
                else {
                  char v248 = -1;
                }
                unsigned int v249 = PDAM((unsigned __int16)*v869, v248, ~(_BYTE)v246);
                __int16 *v872 = v249;
                unsigned int v247 = HIBYTE(v249);
                unint64_t v66 = v848;
                int v42 = v868;
              }
              else if (v42)
              {
                LOBYTE(v247) = *v72;
              }
              else
              {
                LOBYTE(v247) = -1;
              }
            }
            else
            {
              LOBYTE(v247) = 0;
              __int16 *v872 = 0;
            }
            char *v73 = v247;
            v73 += v243;
            v250 = &v869[v802];
            if ((unint64_t)v250 >= v66) {
              uint64_t v251 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v251 = 0;
            }
            v72 += v244 + v251;
            v869 = &v250[v251];
            v872 += v802;
            --v245;
          }
          while (v245);
          if (v834)
          {
            v252 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v253 = (unint64_t)v252 >= v834;
            uint64_t v254 = v812;
            if ((unint64_t)v252 < v834) {
              uint64_t v254 = 0;
            }
            v255 = &v252[v254];
            unint64_t v256 = v66 + 2 * v254;
            uint64_t v257 = v774;
            if (!v253) {
              uint64_t v257 = 0;
            }
            unint64_t v66 = v256 + 2 * v837;
            v869 = v255;
            v840 = v255;
            v842 += v831 + v257;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          --v874[0];
        }
        while (v874[0]);
        goto LABEL_1018;
      case 5:
        uint64_t v258 = (int)v24;
        uint64_t v259 = v42;
        uint64_t v775 = -(v74 * (int)v67);
        uint64_t v260 = -(uint64_t)(int)v809;
        do
        {
          int v261 = v884[0];
          do
          {
            v849 = v72;
            int v262 = *v72;
            unint64_t v263 = v66;
            uint64_t v264 = v260;
            uint64_t v265 = PDAMplusDAM((unsigned __int16)*v869, v262, *v73, (unsigned __int16)*v872, *v73, v262 ^ 0xFFu);
            uint64_t v260 = v264;
            unint64_t v66 = v263;
            __int16 *v872 = v265;
            char *v73 = BYTE3(v265);
            v266 = &v73[v258];
            v267 = &v869[v802];
            v73 += v258;
            if ((unint64_t)v267 >= v263) {
              uint64_t v268 = v264;
            }
            else {
              uint64_t v268 = 0;
            }
            v72 = &v849[v259 + v268];
            v869 = &v267[v268];
            v872 += v802;
            --v261;
          }
          while (v261);
          if (v834)
          {
            v269 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v270 = (unint64_t)v269 >= v834;
            uint64_t v271 = -(uint64_t)(v837 * (int)v67);
            if ((unint64_t)v269 < v834) {
              uint64_t v271 = 0;
            }
            v272 = &v269[v271];
            unint64_t v273 = v263 + 2 * v271;
            uint64_t v274 = v775;
            if (!v270) {
              uint64_t v274 = 0;
            }
            unint64_t v66 = v273 + 2 * v837;
            v869 = v272;
            v840 = v272;
            v842 += v831 + v274;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 = &v266[v829];
          --v874[0];
        }
        while (v874[0]);
        goto LABEL_1018;
      case 6:
        int v275 = v67;
        uint64_t v276 = (int)v24;
        uint64_t v277 = v42;
        uint64_t v813 = -(uint64_t)(v837 * v275);
        uint64_t v776 = -(v74 * v275);
        while (1)
        {
          int v278 = v884[0];
          unint64_t v850 = v66;
          do
          {
            unsigned int v279 = *v73;
            if (v279 > 7)
            {
              if (v279 > 0xF7) {
                goto LABEL_474;
              }
              if (v42) {
                char v281 = *v72;
              }
              else {
                char v281 = -1;
              }
              unsigned int v282 = PDAplusDAM((unsigned __int16)*v872, v279, (unsigned __int16)*v869, v281, ~(_BYTE)v279);
              __int16 *v872 = v282;
              unsigned int v280 = HIBYTE(v282);
              unint64_t v66 = v850;
              int v42 = v868;
            }
            else
            {
              __int16 *v872 = *v869;
              if (v42) {
                LOBYTE(v280) = *v72;
              }
              else {
                LOBYTE(v280) = -1;
              }
            }
            char *v73 = v280;
LABEL_474:
            v73 += v276;
            v283 = &v869[v802];
            if ((unint64_t)v283 >= v66) {
              uint64_t v284 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v284 = 0;
            }
            v72 += v277 + v284;
            v869 = &v283[v284];
            v872 += v802;
            --v278;
          }
          while (v278);
          if (v834)
          {
            v285 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v286 = (unint64_t)v285 >= v834;
            uint64_t v287 = v813;
            if ((unint64_t)v285 < v834) {
              uint64_t v287 = 0;
            }
            v288 = &v285[v287];
            unint64_t v289 = v66 + 2 * v287;
            uint64_t v290 = v776;
            if (!v286) {
              uint64_t v290 = 0;
            }
            unint64_t v66 = v289 + 2 * v837;
            v869 = v288;
            v840 = v288;
            v842 += v831 + v290;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0])
          {
LABEL_1018:
            unint64_t v846 = v66;
            goto LABEL_1019;
          }
        }
      case 7:
        uint64_t v291 = v802;
        uint64_t v768 = -(v74 * (int)v67);
        if (v24)
        {
          uint64_t v292 = (int)v24;
          uint64_t v293 = v42;
          while (1)
          {
            int v294 = v884[0];
            do
            {
              unsigned int v295 = *v72;
              if (v295 > 7)
              {
                if (v295 > 0xF7) {
                  goto LABEL_495;
                }
                unint64_t v297 = v66;
                unsigned int v298 = PDAM((unsigned __int16)*v872, *v73, v295);
                unint64_t v66 = v297;
                uint64_t v291 = v802;
                __int16 *v872 = v298;
                unsigned int v296 = HIBYTE(v298);
              }
              else
              {
                LOBYTE(v296) = 0;
                __int16 *v872 = 0;
              }
              char *v73 = v296;
LABEL_495:
              v73 += v292;
              v299 = &v869[v291];
              if ((unint64_t)v299 >= v66) {
                uint64_t v300 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v300 = 0;
              }
              v72 += v293 + v300;
              v869 = &v299[v300];
              v872 += v802;
              --v294;
            }
            while (v294);
            if (v834)
            {
              v301 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v302 = (unint64_t)v301 >= v834;
              uint64_t v303 = -(uint64_t)(v837 * (int)v67);
              if ((unint64_t)v301 < v834) {
                uint64_t v303 = 0;
              }
              v304 = &v301[v303];
              unint64_t v305 = v66 + 2 * v303;
              uint64_t v306 = v768;
              if (!v302) {
                uint64_t v306 = 0;
              }
              unint64_t v66 = v305 + 2 * v837;
              v869 = v304;
              v840 = v304;
              v842 += v831 + v306;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            v73 += v829;
            if (!--v874[0]) {
              goto LABEL_1018;
            }
          }
        }
        uint64_t v684 = v42;
        int v685 = v874[0];
        uint64_t v764 = (v874[0] - 1) + 1;
LABEL_1051:
        int v796 = v685;
        int v686 = v810;
        while (1)
        {
          unsigned int v687 = *v72;
          if (v687 < 8) {
            break;
          }
          if (v687 <= 0xF7)
          {
            unint64_t v689 = v66;
            __int16 v688 = PDM((unsigned __int16)*v872, v687);
            unint64_t v66 = v689;
            goto LABEL_1056;
          }
LABEL_1057:
          v690 = &v869[v802];
          if ((unint64_t)v690 >= v66) {
            uint64_t v691 = -(uint64_t)(int)v809;
          }
          else {
            uint64_t v691 = 0;
          }
          v72 += v684 + v691;
          v869 = &v690[v691];
          v872 += v802;
          if (!--v686)
          {
            if (v834)
            {
              v692 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v693 = (unint64_t)v692 >= v834;
              uint64_t v694 = -(uint64_t)(v837 * (int)v67);
              if ((unint64_t)v692 < v834) {
                uint64_t v694 = 0;
              }
              v695 = &v692[v694];
              unint64_t v696 = v66 + 2 * v694;
              uint64_t v697 = v768;
              if (!v693) {
                uint64_t v697 = 0;
              }
              unint64_t v66 = v696 + 2 * v837;
              v869 = v695;
              v840 = v695;
              v842 += v831 + v697;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            int v685 = v796 - 1;
            v874[0] = v796 - 1;
            if (v796 == 1)
            {
LABEL_1089:
              unint64_t v846 = v66;
              uint64_t v712 = v829;
              uint64_t v713 = v764;
              goto LABEL_1108;
            }
            goto LABEL_1051;
          }
        }
        __int16 v688 = 0;
LABEL_1056:
        __int16 *v872 = v688;
        goto LABEL_1057;
      case 8:
        uint64_t v307 = v802;
        uint64_t v769 = -(v74 * (int)v67);
        if (v24)
        {
          uint64_t v308 = (int)v24;
          uint64_t v309 = v42;
          while (1)
          {
            int v310 = v884[0];
            do
            {
              unsigned int v311 = *v72;
              if (v311 < 0xF8)
              {
                if (v311 < 8) {
                  goto LABEL_516;
                }
                unint64_t v313 = v66;
                unsigned int v314 = PDAM((unsigned __int16)*v872, *v73, ~(_BYTE)v311);
                unint64_t v66 = v313;
                uint64_t v307 = v802;
                __int16 *v872 = v314;
                unsigned int v312 = HIBYTE(v314);
              }
              else
              {
                LOBYTE(v312) = 0;
                __int16 *v872 = 0;
              }
              char *v73 = v312;
LABEL_516:
              v73 += v308;
              v315 = &v869[v307];
              if ((unint64_t)v315 >= v66) {
                uint64_t v316 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v316 = 0;
              }
              v72 += v309 + v316;
              v869 = &v315[v316];
              v872 += v802;
              --v310;
            }
            while (v310);
            if (v834)
            {
              v317 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v318 = (unint64_t)v317 >= v834;
              uint64_t v319 = -(uint64_t)(v837 * (int)v67);
              if ((unint64_t)v317 < v834) {
                uint64_t v319 = 0;
              }
              v320 = &v317[v319];
              unint64_t v321 = v66 + 2 * v319;
              uint64_t v322 = v769;
              if (!v318) {
                uint64_t v322 = 0;
              }
              unint64_t v66 = v321 + 2 * v837;
              v869 = v320;
              v840 = v320;
              v842 += v831 + v322;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            v73 += v829;
            if (!--v874[0]) {
              goto LABEL_1018;
            }
          }
        }
        uint64_t v698 = v42;
        int v699 = v874[0];
        uint64_t v764 = (v874[0] - 1) + 1;
LABEL_1071:
        int v797 = v699;
        int v700 = v810;
        while (1)
        {
          unsigned int v701 = *v72;
          if (v701 > 0xF7) {
            break;
          }
          if (v701 >= 8)
          {
            unint64_t v703 = v66;
            __int16 v702 = PDM((unsigned __int16)*v872, ~(_BYTE)v701);
            unint64_t v66 = v703;
            goto LABEL_1076;
          }
LABEL_1077:
          v704 = &v869[v802];
          if ((unint64_t)v704 >= v66) {
            uint64_t v705 = -(uint64_t)(int)v809;
          }
          else {
            uint64_t v705 = 0;
          }
          v72 += v698 + v705;
          v869 = &v704[v705];
          v872 += v802;
          if (!--v700)
          {
            if (v834)
            {
              v706 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v707 = (unint64_t)v706 >= v834;
              uint64_t v708 = -(uint64_t)(v837 * (int)v67);
              if ((unint64_t)v706 < v834) {
                uint64_t v708 = 0;
              }
              v709 = &v706[v708];
              unint64_t v710 = v66 + 2 * v708;
              uint64_t v711 = v769;
              if (!v707) {
                uint64_t v711 = 0;
              }
              unint64_t v66 = v710 + 2 * v837;
              v869 = v709;
              v840 = v709;
              v842 += v831 + v711;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            int v699 = v797 - 1;
            v874[0] = v797 - 1;
            if (v797 == 1) {
              goto LABEL_1089;
            }
            goto LABEL_1071;
          }
        }
        __int16 v702 = 0;
LABEL_1076:
        __int16 *v872 = v702;
        goto LABEL_1077;
      case 9:
        uint64_t v323 = (int)v24;
        uint64_t v324 = v42;
        uint64_t v777 = -(v74 * (int)v67);
        do
        {
          int v325 = v884[0];
          do
          {
            unint64_t v326 = v66;
            uint64_t v327 = PDAMplusDAM((unsigned __int16)*v869, *v72, *v73 ^ 0xFFu, (unsigned __int16)*v872, *v73, *v72);
            unint64_t v66 = v326;
            __int16 *v872 = v327;
            char *v73 = BYTE3(v327);
            v73 += v323;
            v328 = &v869[v802];
            if ((unint64_t)v328 >= v326) {
              uint64_t v329 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v329 = 0;
            }
            v72 += v324 + v329;
            v869 = &v328[v329];
            v872 += v802;
            --v325;
          }
          while (v325);
          if (v834)
          {
            v330 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v331 = (unint64_t)v330 >= v834;
            uint64_t v332 = -(uint64_t)(v837 * (int)v67);
            if ((unint64_t)v330 < v834) {
              uint64_t v332 = 0;
            }
            v333 = &v330[v332];
            unint64_t v334 = v326 + 2 * v332;
            uint64_t v335 = v777;
            if (!v331) {
              uint64_t v335 = 0;
            }
            unint64_t v66 = v334 + 2 * v837;
            v869 = v333;
            v840 = v333;
            v842 += v831 + v335;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          --v874[0];
        }
        while (v874[0]);
        goto LABEL_1018;
      case 10:
        uint64_t v336 = (int)v24;
        uint64_t v337 = v42;
        uint64_t v778 = -(v74 * (int)v67);
        uint64_t v338 = -(uint64_t)(int)v809;
        do
        {
          int v339 = v884[0];
          do
          {
            v851 = v72;
            int v340 = *v72;
            unint64_t v341 = v66;
            uint64_t v342 = v338;
            uint64_t v343 = PDAMplusDAM((unsigned __int16)*v869, v340, *v73 ^ 0xFFu, (unsigned __int16)*v872, *v73, v340 ^ 0xFFu);
            uint64_t v338 = v342;
            unint64_t v66 = v341;
            __int16 *v872 = v343;
            char *v73 = BYTE3(v343);
            v73 += v336;
            v344 = &v869[v802];
            if ((unint64_t)v344 >= v341) {
              uint64_t v345 = v342;
            }
            else {
              uint64_t v345 = 0;
            }
            v72 = &v851[v337 + v345];
            v869 = &v344[v345];
            v872 += v802;
            --v339;
          }
          while (v339);
          if (v834)
          {
            v346 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v347 = (unint64_t)v346 >= v834;
            uint64_t v348 = -(uint64_t)(v837 * (int)v67);
            if ((unint64_t)v346 < v834) {
              uint64_t v348 = 0;
            }
            v349 = &v346[v348];
            unint64_t v350 = v341 + 2 * v348;
            uint64_t v351 = v778;
            if (!v347) {
              uint64_t v351 = 0;
            }
            unint64_t v66 = v350 + 2 * v837;
            v869 = v349;
            v840 = v349;
            v842 += v831 + v351;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          --v874[0];
        }
        while (v874[0]);
        goto LABEL_1018;
      case 11:
        uint64_t v773 = -(v74 * (int)v67);
        if (v24)
        {
          uint64_t v352 = (int)v24;
          uint64_t v353 = v42;
          do
          {
            int v354 = v884[0];
            unint64_t v355 = v66;
            do
            {
              if (v42) {
                unsigned int v356 = *v72;
              }
              else {
                unsigned int v356 = 255;
              }
              uint64_t v357 = PDAplusdDA(*v872, *v73, *v869, v356);
              __int16 *v872 = v357;
              char *v73 = BYTE3(v357);
              v73 += v352;
              int v42 = v868;
              v358 = &v869[v802];
              if ((unint64_t)v358 >= v355) {
                uint64_t v359 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v359 = 0;
              }
              v72 += v353 + v359;
              v869 = &v358[v359];
              v872 += v802;
              --v354;
            }
            while (v354);
            unint64_t v66 = v355;
            if (v834)
            {
              v360 = &v840[v837];
              uint64_t v74 = v831;
              BOOL v361 = (unint64_t)v360 >= v834;
              uint64_t v362 = -(uint64_t)(v837 * (int)v67);
              if ((unint64_t)v360 < v834) {
                uint64_t v362 = 0;
              }
              v363 = &v360[v362];
              unint64_t v364 = v355 + 2 * v362;
              uint64_t v365 = v773;
              if (!v361) {
                uint64_t v365 = 0;
              }
              unint64_t v66 = v364 + 2 * v837;
              v869 = v363;
              v840 = v363;
              v842 += v831 + v365;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              uint64_t v74 = v831;
              v72 += v831;
            }
            v872 += v833;
            v73 += v829;
            --v874[0];
          }
          while (v874[0]);
          goto LABEL_1018;
        }
        uint64_t v714 = v42;
        int v715 = v874[0];
        uint64_t v770 = (v874[0] - 1) + 1;
        do
        {
          int v716 = v810;
          unint64_t v717 = v66;
          do
          {
            if (v42) {
              unsigned int v718 = *v72;
            }
            else {
              unsigned int v718 = 255;
            }
            __int16 *v872 = PDplusdDA((unsigned __int16)*v872, *v869, v718);
            int v42 = v868;
            v719 = &v869[v802];
            if ((unint64_t)v719 >= v717) {
              uint64_t v720 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v720 = 0;
            }
            v72 += v714 + v720;
            v869 = &v719[v720];
            v872 += v802;
            --v716;
          }
          while (v716);
          unint64_t v66 = v717;
          if (v834)
          {
            v721 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v722 = (unint64_t)v721 >= v834;
            uint64_t v723 = -(uint64_t)(v837 * (int)v67);
            if ((unint64_t)v721 < v834) {
              uint64_t v723 = 0;
            }
            v724 = &v721[v723];
            unint64_t v725 = v717 + 2 * v723;
            uint64_t v726 = v773;
            if (!v722) {
              uint64_t v726 = 0;
            }
            unint64_t v66 = v725 + 2 * v837;
            v869 = v724;
            v840 = v724;
            v842 += v831 + v726;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v874[0] = --v715;
        }
        while (v715);
        goto LABEL_1107;
      case 12:
        if (!v24)
        {
          int v727 = v874[0];
          uint64_t v728 = (v874[0] - 1) + 1;
          do
          {
            int v729 = v810;
            do
            {
              unsigned int v730 = (((unsigned __int16)*v869 | ((unsigned __int16)*v869 << 15)) & 0x1F07C1F)
                   + (((unsigned __int16)*v872 | ((unsigned __int16)*v872 << 15)) & 0x1F07C1F);
              __int16 *v872 = (((15 * ((v730 >> 5) & 0x100401)) | v730 | (30 * ((v730 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v730 >> 5) & 0x401)) | v730 | (30 * ((v730 >> 5) & 0x401))) & 0x7C1F;
              v731 = &v869[v802];
              if ((unint64_t)v731 >= v66) {
                uint64_t v732 = -(uint64_t)(int)v809;
              }
              else {
                uint64_t v732 = 0;
              }
              v72 += v42 + v732;
              v869 = &v731[v732];
              v872 += v802;
              --v729;
            }
            while (v729);
            if (v834)
            {
              v733 = &v840[v837];
              BOOL v734 = (unint64_t)v733 >= v834;
              if ((unint64_t)v733 >= v834) {
                uint64_t v735 = -(uint64_t)(v837 * (int)v67);
              }
              else {
                uint64_t v735 = 0;
              }
              v736 = &v733[v735];
              unint64_t v737 = v66 + 2 * v735;
              if (v734) {
                uint64_t v738 = -(v74 * (int)v67);
              }
              else {
                uint64_t v738 = 0;
              }
              unint64_t v66 = v737 + 2 * v837;
              v869 = v736;
              v840 = v736;
              v842 += v74 + v738;
              v72 = v842;
            }
            else
            {
              v869 += v837;
              v72 += v74;
            }
            v872 += v833;
            --v727;
          }
          while (v727);
          unint64_t v846 = v66;
          v73 += v829 * v728;
          goto LABEL_1143;
        }
        uint64_t v366 = (int)v24;
        uint64_t v367 = v42;
        uint64_t v779 = -(v74 * (int)v67);
        do
        {
          int v368 = v884[0];
          unint64_t v369 = v66;
          do
          {
            if (v42) {
              unsigned int v370 = *v72;
            }
            else {
              unsigned int v370 = 255;
            }
            uint64_t v371 = PDApluslDA((unsigned __int16)*v872, *v73, (unsigned __int16)*v869, v370);
            __int16 *v872 = v371;
            char *v73 = BYTE3(v371);
            v73 += v366;
            int v42 = v868;
            v372 = &v869[v802];
            if ((unint64_t)v372 >= v369) {
              uint64_t v373 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v373 = 0;
            }
            v72 += v367 + v373;
            v869 = &v372[v373];
            v872 += v802;
            --v368;
          }
          while (v368);
          unint64_t v66 = v369;
          if (v834)
          {
            v374 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v375 = (unint64_t)v374 >= v834;
            uint64_t v376 = -(uint64_t)(v837 * (int)v67);
            if ((unint64_t)v374 < v834) {
              uint64_t v376 = 0;
            }
            v377 = &v374[v376];
            unint64_t v378 = v369 + 2 * v376;
            uint64_t v379 = v779;
            if (!v375) {
              uint64_t v379 = 0;
            }
            unint64_t v66 = v378 + 2 * v837;
            v869 = v377;
            v840 = v377;
            v842 += v831 + v379;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          --v874[0];
        }
        while (v874[0]);
        goto LABEL_1018;
      case 13:
        int v380 = v67;
        uint64_t v381 = (int)v24;
        uint64_t v382 = v42;
        uint64_t v814 = -(uint64_t)(v837 * v380);
        uint64_t v780 = -(v74 * v380);
        while (1)
        {
          int v383 = v884[0];
          unint64_t v852 = v66;
          do
          {
            if (v42)
            {
              unsigned int v384 = *v72;
              if (v384 < 8) {
                goto LABEL_607;
              }
              if (v24) {
                goto LABEL_602;
              }
            }
            else
            {
              unsigned int v384 = 255;
              if (v24)
              {
LABEL_602:
                unsigned int v385 = *v73;
                if (v385 > 7)
                {
                  int v387 = PDAmultiplyPDA((unsigned __int16)*v872, v385, (unsigned __int16)*v869, v384, v4);
                  unint64_t v66 = v852;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v387;
                  char *v73 = HIBYTE(v387);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v384;
                }
                goto LABEL_607;
              }
            }
            __int16 v386 = PDAmultiplyPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v384, v4);
            unint64_t v66 = v852;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v386;
LABEL_607:
            v73 += v381;
            v388 = &v869[v802];
            if ((unint64_t)v388 >= v66) {
              uint64_t v389 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v389 = 0;
            }
            v72 += v382 + v389;
            v869 = &v388[v389];
            v872 += v802;
            --v383;
          }
          while (v383);
          if (v834)
          {
            v390 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v391 = (unint64_t)v390 >= v834;
            uint64_t v392 = v814;
            if ((unint64_t)v390 < v834) {
              uint64_t v392 = 0;
            }
            v393 = &v390[v392];
            unint64_t v394 = v66 + 2 * v392;
            uint64_t v395 = v780;
            if (!v391) {
              uint64_t v395 = 0;
            }
            unint64_t v66 = v394 + 2 * v837;
            v869 = v393;
            v840 = v393;
            v842 += v831 + v395;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 14:
        int v396 = v67;
        uint64_t v397 = (int)v24;
        uint64_t v398 = v42;
        uint64_t v815 = -(uint64_t)(v837 * v396);
        uint64_t v781 = -(v74 * v396);
        while (1)
        {
          int v399 = v884[0];
          unint64_t v853 = v66;
          do
          {
            if (v42)
            {
              unsigned int v400 = *v72;
              if (v400 < 8) {
                goto LABEL_630;
              }
              if (v24) {
                goto LABEL_625;
              }
            }
            else
            {
              unsigned int v400 = 255;
              if (v24)
              {
LABEL_625:
                unsigned int v401 = *v73;
                if (v401 > 7)
                {
                  int v403 = PDAscreenPDA((unsigned __int16)*v872, v401, (unsigned __int16)*v869, v400);
                  unint64_t v66 = v853;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v403;
                  char *v73 = HIBYTE(v403);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v400;
                }
                goto LABEL_630;
              }
            }
            __int16 v402 = PDAscreenPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v400);
            unint64_t v66 = v853;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v402;
LABEL_630:
            v73 += v397;
            v404 = &v869[v802];
            if ((unint64_t)v404 >= v66) {
              uint64_t v405 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v405 = 0;
            }
            v72 += v398 + v405;
            v869 = &v404[v405];
            v872 += v802;
            --v399;
          }
          while (v399);
          if (v834)
          {
            v406 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v407 = (unint64_t)v406 >= v834;
            uint64_t v408 = v815;
            if ((unint64_t)v406 < v834) {
              uint64_t v408 = 0;
            }
            v409 = &v406[v408];
            unint64_t v410 = v66 + 2 * v408;
            uint64_t v411 = v781;
            if (!v407) {
              uint64_t v411 = 0;
            }
            unint64_t v66 = v410 + 2 * v837;
            v869 = v409;
            v840 = v409;
            v842 += v831 + v411;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 15:
        int v412 = v67;
        uint64_t v413 = (int)v24;
        uint64_t v414 = v42;
        uint64_t v816 = -(uint64_t)(v837 * v412);
        uint64_t v782 = -(v74 * v412);
        while (1)
        {
          int v415 = v884[0];
          unint64_t v854 = v66;
          do
          {
            if (v42)
            {
              unsigned int v416 = *v72;
              if (v416 < 8) {
                goto LABEL_653;
              }
              if (v24) {
                goto LABEL_648;
              }
            }
            else
            {
              unsigned int v416 = 255;
              if (v24)
              {
LABEL_648:
                unsigned int v417 = *v73;
                if (v417 > 7)
                {
                  int v419 = PDAoverlayPDA((unsigned __int16)*v872, v417, (unsigned __int16)*v869, v416);
                  unint64_t v66 = v854;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v419;
                  char *v73 = HIBYTE(v419);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v416;
                }
                goto LABEL_653;
              }
            }
            __int16 v418 = PDAoverlayPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v416);
            unint64_t v66 = v854;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v418;
LABEL_653:
            v73 += v413;
            v420 = &v869[v802];
            if ((unint64_t)v420 >= v66) {
              uint64_t v421 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v421 = 0;
            }
            v72 += v414 + v421;
            v869 = &v420[v421];
            v872 += v802;
            --v415;
          }
          while (v415);
          if (v834)
          {
            v422 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v423 = (unint64_t)v422 >= v834;
            uint64_t v424 = v816;
            if ((unint64_t)v422 < v834) {
              uint64_t v424 = 0;
            }
            v425 = &v422[v424];
            unint64_t v426 = v66 + 2 * v424;
            uint64_t v427 = v782;
            if (!v423) {
              uint64_t v427 = 0;
            }
            unint64_t v66 = v426 + 2 * v837;
            v869 = v425;
            v840 = v425;
            v842 += v831 + v427;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 16:
        int v428 = v67;
        uint64_t v429 = (int)v24;
        uint64_t v430 = v42;
        uint64_t v817 = -(uint64_t)(v837 * v428);
        uint64_t v783 = -(v74 * v428);
        while (1)
        {
          int v431 = v884[0];
          unint64_t v855 = v66;
          do
          {
            if (v42)
            {
              unsigned int v432 = *v72;
              if (v432 < 8) {
                goto LABEL_676;
              }
              if (v24) {
                goto LABEL_671;
              }
            }
            else
            {
              unsigned int v432 = 255;
              if (v24)
              {
LABEL_671:
                unsigned int v433 = *v73;
                if (v433 > 7)
                {
                  int v435 = PDAdarkenPDA((unsigned __int16)*v872, v433, (unsigned __int16)*v869, v432);
                  unint64_t v66 = v855;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v435;
                  char *v73 = HIBYTE(v435);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v432;
                }
                goto LABEL_676;
              }
            }
            __int16 v434 = PDAdarkenPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v432);
            unint64_t v66 = v855;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v434;
LABEL_676:
            v73 += v429;
            v436 = &v869[v802];
            if ((unint64_t)v436 >= v66) {
              uint64_t v437 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v437 = 0;
            }
            v72 += v430 + v437;
            v869 = &v436[v437];
            v872 += v802;
            --v431;
          }
          while (v431);
          if (v834)
          {
            v438 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v439 = (unint64_t)v438 >= v834;
            uint64_t v440 = v817;
            if ((unint64_t)v438 < v834) {
              uint64_t v440 = 0;
            }
            v441 = &v438[v440];
            unint64_t v442 = v66 + 2 * v440;
            uint64_t v443 = v783;
            if (!v439) {
              uint64_t v443 = 0;
            }
            unint64_t v66 = v442 + 2 * v837;
            v869 = v441;
            v840 = v441;
            v842 += v831 + v443;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 17:
        int v444 = v67;
        uint64_t v445 = (int)v24;
        uint64_t v446 = v42;
        uint64_t v818 = -(uint64_t)(v837 * v444);
        uint64_t v784 = -(v74 * v444);
        while (1)
        {
          int v447 = v884[0];
          unint64_t v856 = v66;
          do
          {
            if (v42)
            {
              unsigned int v448 = *v72;
              if (v448 < 8) {
                goto LABEL_699;
              }
              if (v24) {
                goto LABEL_694;
              }
            }
            else
            {
              unsigned int v448 = 255;
              if (v24)
              {
LABEL_694:
                unsigned int v449 = *v73;
                if (v449 > 7)
                {
                  int v451 = PDAlightenPDA((unsigned __int16)*v872, v449, (unsigned __int16)*v869, v448);
                  unint64_t v66 = v856;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v451;
                  char *v73 = HIBYTE(v451);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v448;
                }
                goto LABEL_699;
              }
            }
            __int16 v450 = PDAlightenPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v448);
            unint64_t v66 = v856;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v450;
LABEL_699:
            v73 += v445;
            v452 = &v869[v802];
            if ((unint64_t)v452 >= v66) {
              uint64_t v453 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v453 = 0;
            }
            v72 += v446 + v453;
            v869 = &v452[v453];
            v872 += v802;
            --v447;
          }
          while (v447);
          if (v834)
          {
            v454 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v455 = (unint64_t)v454 >= v834;
            uint64_t v456 = v818;
            if ((unint64_t)v454 < v834) {
              uint64_t v456 = 0;
            }
            v457 = &v454[v456];
            unint64_t v458 = v66 + 2 * v456;
            uint64_t v459 = v784;
            if (!v455) {
              uint64_t v459 = 0;
            }
            unint64_t v66 = v458 + 2 * v837;
            v869 = v457;
            v840 = v457;
            v842 += v831 + v459;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 18:
        int v460 = v67;
        uint64_t v461 = (int)v24;
        uint64_t v462 = v42;
        uint64_t v819 = -(uint64_t)(v837 * v460);
        uint64_t v785 = -(v74 * v460);
        while (1)
        {
          int v463 = v884[0];
          unint64_t v857 = v66;
          do
          {
            if (v42)
            {
              unsigned int v464 = *v72;
              if (v464 < 8) {
                goto LABEL_722;
              }
              if (v24) {
                goto LABEL_717;
              }
            }
            else
            {
              unsigned int v464 = 255;
              if (v24)
              {
LABEL_717:
                unsigned int v465 = *v73;
                if (v465 > 7)
                {
                  int v467 = PDAcolordodgePDA((unsigned __int16)*v872, v465, (unsigned __int16)*v869, v464);
                  unint64_t v66 = v857;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v467;
                  char *v73 = HIBYTE(v467);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v464;
                }
                goto LABEL_722;
              }
            }
            __int16 v466 = PDAcolordodgePDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v464);
            unint64_t v66 = v857;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v466;
LABEL_722:
            v73 += v461;
            v468 = &v869[v802];
            if ((unint64_t)v468 >= v66) {
              uint64_t v469 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v469 = 0;
            }
            v72 += v462 + v469;
            v869 = &v468[v469];
            v872 += v802;
            --v463;
          }
          while (v463);
          if (v834)
          {
            v470 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v471 = (unint64_t)v470 >= v834;
            uint64_t v472 = v819;
            if ((unint64_t)v470 < v834) {
              uint64_t v472 = 0;
            }
            v473 = &v470[v472];
            unint64_t v474 = v66 + 2 * v472;
            uint64_t v475 = v785;
            if (!v471) {
              uint64_t v475 = 0;
            }
            unint64_t v66 = v474 + 2 * v837;
            v869 = v473;
            v840 = v473;
            v842 += v831 + v475;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 19:
        int v476 = v67;
        uint64_t v477 = (int)v24;
        uint64_t v478 = v42;
        uint64_t v820 = -(uint64_t)(v837 * v476);
        uint64_t v786 = -(v74 * v476);
        while (1)
        {
          int v479 = v884[0];
          unint64_t v858 = v66;
          do
          {
            if (v42)
            {
              unsigned int v480 = *v72;
              if (v480 < 8) {
                goto LABEL_745;
              }
              if (v24) {
                goto LABEL_740;
              }
            }
            else
            {
              unsigned int v480 = 255;
              if (v24)
              {
LABEL_740:
                unsigned int v481 = *v73;
                if (v481 > 7)
                {
                  int v483 = PDAcolorburnPDA((unsigned __int16)*v872, v481, (unsigned __int16)*v869, v480);
                  unint64_t v66 = v858;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v483;
                  char *v73 = HIBYTE(v483);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v480;
                }
                goto LABEL_745;
              }
            }
            __int16 v482 = PDAcolorburnPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v480);
            unint64_t v66 = v858;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v482;
LABEL_745:
            v73 += v477;
            v484 = &v869[v802];
            if ((unint64_t)v484 >= v66) {
              uint64_t v485 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v485 = 0;
            }
            v72 += v478 + v485;
            v869 = &v484[v485];
            v872 += v802;
            --v479;
          }
          while (v479);
          if (v834)
          {
            v486 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v487 = (unint64_t)v486 >= v834;
            uint64_t v488 = v820;
            if ((unint64_t)v486 < v834) {
              uint64_t v488 = 0;
            }
            v489 = &v486[v488];
            unint64_t v490 = v66 + 2 * v488;
            uint64_t v491 = v786;
            if (!v487) {
              uint64_t v491 = 0;
            }
            unint64_t v66 = v490 + 2 * v837;
            v869 = v489;
            v840 = v489;
            v842 += v831 + v491;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 20:
        int v492 = v67;
        uint64_t v493 = (int)v24;
        uint64_t v494 = v42;
        uint64_t v821 = -(uint64_t)(v837 * v492);
        uint64_t v787 = -(v74 * v492);
        while (1)
        {
          int v495 = v884[0];
          unint64_t v859 = v66;
          do
          {
            if (v42)
            {
              unsigned int v496 = *v72;
              if (v496 < 8) {
                goto LABEL_768;
              }
              if (v24) {
                goto LABEL_763;
              }
            }
            else
            {
              unsigned int v496 = 255;
              if (v24)
              {
LABEL_763:
                unsigned int v497 = *v73;
                if (v497 > 7)
                {
                  int v499 = PDAsoftlightPDA((unsigned __int16)*v872, v497, (unsigned __int16)*v869, v496);
                  unint64_t v66 = v859;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v499;
                  char *v73 = HIBYTE(v499);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v496;
                }
                goto LABEL_768;
              }
            }
            __int16 v498 = PDAsoftlightPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v496);
            unint64_t v66 = v859;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v498;
LABEL_768:
            v73 += v493;
            v500 = &v869[v802];
            if ((unint64_t)v500 >= v66) {
              uint64_t v501 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v501 = 0;
            }
            v72 += v494 + v501;
            v869 = &v500[v501];
            v872 += v802;
            --v495;
          }
          while (v495);
          if (v834)
          {
            v502 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v503 = (unint64_t)v502 >= v834;
            uint64_t v504 = v821;
            if ((unint64_t)v502 < v834) {
              uint64_t v504 = 0;
            }
            v505 = &v502[v504];
            unint64_t v506 = v66 + 2 * v504;
            uint64_t v507 = v787;
            if (!v503) {
              uint64_t v507 = 0;
            }
            unint64_t v66 = v506 + 2 * v837;
            v869 = v505;
            v840 = v505;
            v842 += v831 + v507;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 21:
        int v508 = v67;
        uint64_t v509 = (int)v24;
        uint64_t v510 = v42;
        uint64_t v822 = -(uint64_t)(v837 * v508);
        uint64_t v788 = -(v74 * v508);
        while (1)
        {
          int v511 = v884[0];
          unint64_t v860 = v66;
          do
          {
            if (v42)
            {
              unsigned int v512 = *v72;
              if (v512 < 8) {
                goto LABEL_791;
              }
              if (v24) {
                goto LABEL_786;
              }
            }
            else
            {
              unsigned int v512 = 255;
              if (v24)
              {
LABEL_786:
                unsigned int v513 = *v73;
                if (v513 > 7)
                {
                  int v515 = PDAhardlightPDA((unsigned __int16)*v872, v513, (unsigned __int16)*v869, v512);
                  unint64_t v66 = v860;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v515;
                  char *v73 = HIBYTE(v515);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v512;
                }
                goto LABEL_791;
              }
            }
            __int16 v514 = PDAhardlightPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v512);
            unint64_t v66 = v860;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v514;
LABEL_791:
            v73 += v509;
            v516 = &v869[v802];
            if ((unint64_t)v516 >= v66) {
              uint64_t v517 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v517 = 0;
            }
            v72 += v510 + v517;
            v869 = &v516[v517];
            v872 += v802;
            --v511;
          }
          while (v511);
          if (v834)
          {
            v518 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v519 = (unint64_t)v518 >= v834;
            uint64_t v520 = v822;
            if ((unint64_t)v518 < v834) {
              uint64_t v520 = 0;
            }
            v521 = &v518[v520];
            unint64_t v522 = v66 + 2 * v520;
            uint64_t v523 = v788;
            if (!v519) {
              uint64_t v523 = 0;
            }
            unint64_t v66 = v522 + 2 * v837;
            v869 = v521;
            v840 = v521;
            v842 += v831 + v523;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 22:
        int v524 = v67;
        uint64_t v525 = (int)v24;
        uint64_t v526 = v42;
        uint64_t v823 = -(uint64_t)(v837 * v524);
        uint64_t v789 = -(v74 * v524);
        while (1)
        {
          int v527 = v884[0];
          unint64_t v861 = v66;
          do
          {
            if (v42)
            {
              unsigned int v528 = *v72;
              if (v528 < 8) {
                goto LABEL_814;
              }
              if (v24) {
                goto LABEL_809;
              }
            }
            else
            {
              unsigned int v528 = 255;
              if (v24)
              {
LABEL_809:
                unsigned int v529 = *v73;
                if (v529 > 7)
                {
                  int v531 = PDAdifferencePDA((unsigned __int16)*v872, v529, (unsigned __int16)*v869, v528);
                  unint64_t v66 = v861;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v531;
                  char *v73 = HIBYTE(v531);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v528;
                }
                goto LABEL_814;
              }
            }
            __int16 v530 = PDAdifferencePDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v528);
            unint64_t v66 = v861;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v530;
LABEL_814:
            v73 += v525;
            v532 = &v869[v802];
            if ((unint64_t)v532 >= v66) {
              uint64_t v533 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v533 = 0;
            }
            v72 += v526 + v533;
            v869 = &v532[v533];
            v872 += v802;
            --v527;
          }
          while (v527);
          if (v834)
          {
            v534 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v535 = (unint64_t)v534 >= v834;
            uint64_t v536 = v823;
            if ((unint64_t)v534 < v834) {
              uint64_t v536 = 0;
            }
            v537 = &v534[v536];
            unint64_t v538 = v66 + 2 * v536;
            uint64_t v539 = v789;
            if (!v535) {
              uint64_t v539 = 0;
            }
            unint64_t v66 = v538 + 2 * v837;
            v869 = v537;
            v840 = v537;
            v842 += v831 + v539;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 23:
        int v540 = v67;
        uint64_t v541 = (int)v24;
        uint64_t v542 = v42;
        uint64_t v824 = -(uint64_t)(v837 * v540);
        uint64_t v790 = -(v74 * v540);
        while (1)
        {
          int v543 = v884[0];
          unint64_t v862 = v66;
          do
          {
            if (v42)
            {
              unsigned int v544 = *v72;
              if (v544 < 8) {
                goto LABEL_837;
              }
              if (v24) {
                goto LABEL_832;
              }
            }
            else
            {
              unsigned int v544 = 255;
              if (v24)
              {
LABEL_832:
                unsigned int v545 = *v73;
                if (v545 > 7)
                {
                  int v547 = PDAexclusionPDA((unsigned __int16)*v872, v545, (unsigned __int16)*v869, v544);
                  unint64_t v66 = v862;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v547;
                  char *v73 = HIBYTE(v547);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v544;
                }
                goto LABEL_837;
              }
            }
            __int16 v546 = PDAexclusionPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v544);
            unint64_t v66 = v862;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v546;
LABEL_837:
            v73 += v541;
            v548 = &v869[v802];
            if ((unint64_t)v548 >= v66) {
              uint64_t v549 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v549 = 0;
            }
            v72 += v542 + v549;
            v869 = &v548[v549];
            v872 += v802;
            --v543;
          }
          while (v543);
          if (v834)
          {
            v550 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v551 = (unint64_t)v550 >= v834;
            uint64_t v552 = v824;
            if ((unint64_t)v550 < v834) {
              uint64_t v552 = 0;
            }
            v553 = &v550[v552];
            unint64_t v554 = v66 + 2 * v552;
            uint64_t v555 = v790;
            if (!v551) {
              uint64_t v555 = 0;
            }
            unint64_t v66 = v554 + 2 * v837;
            v869 = v553;
            v840 = v553;
            v842 += v831 + v555;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 24:
        int v556 = v67;
        uint64_t v557 = (int)v24;
        uint64_t v558 = v42;
        uint64_t v825 = -(uint64_t)(v837 * v556);
        uint64_t v791 = -(v74 * v556);
        while (1)
        {
          int v559 = v884[0];
          unint64_t v863 = v66;
          do
          {
            if (v42)
            {
              unsigned int v560 = *v72;
              if (v560 < 8) {
                goto LABEL_860;
              }
              if (v24) {
                goto LABEL_855;
              }
            }
            else
            {
              unsigned int v560 = 255;
              if (v24)
              {
LABEL_855:
                unsigned int v561 = *v73;
                if (v561 > 7)
                {
                  int v563 = PDAhuePDA((unsigned __int16)*v872, v561, (unsigned __int16)*v869, v560);
                  unint64_t v66 = v863;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v563;
                  char *v73 = HIBYTE(v563);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v560;
                }
                goto LABEL_860;
              }
            }
            __int16 v562 = PDAhuePDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v560);
            unint64_t v66 = v863;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v562;
LABEL_860:
            v73 += v557;
            v564 = &v869[v802];
            if ((unint64_t)v564 >= v66) {
              uint64_t v565 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v565 = 0;
            }
            v72 += v558 + v565;
            v869 = &v564[v565];
            v872 += v802;
            --v559;
          }
          while (v559);
          if (v834)
          {
            v566 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v567 = (unint64_t)v566 >= v834;
            uint64_t v568 = v825;
            if ((unint64_t)v566 < v834) {
              uint64_t v568 = 0;
            }
            v569 = &v566[v568];
            unint64_t v570 = v66 + 2 * v568;
            uint64_t v571 = v791;
            if (!v567) {
              uint64_t v571 = 0;
            }
            unint64_t v66 = v570 + 2 * v837;
            v869 = v569;
            v840 = v569;
            v842 += v831 + v571;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 25:
        int v572 = v67;
        uint64_t v573 = (int)v24;
        uint64_t v574 = v42;
        uint64_t v826 = -(uint64_t)(v837 * v572);
        uint64_t v792 = -(v74 * v572);
        while (1)
        {
          int v575 = v884[0];
          unint64_t v864 = v66;
          do
          {
            if (v42)
            {
              unsigned int v576 = *v72;
              if (v576 < 8) {
                goto LABEL_883;
              }
              if (v24) {
                goto LABEL_878;
              }
            }
            else
            {
              unsigned int v576 = 255;
              if (v24)
              {
LABEL_878:
                unsigned int v577 = *v73;
                if (v577 > 7)
                {
                  int v579 = PDAsaturationPDA((unsigned __int16)*v872, v577, (unsigned __int16)*v869, v576);
                  unint64_t v66 = v864;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v579;
                  char *v73 = HIBYTE(v579);
                }
                else
                {
                  __int16 *v872 = *v869;
                  char *v73 = v576;
                }
                goto LABEL_883;
              }
            }
            __int16 v578 = PDAsaturationPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v576);
            unint64_t v66 = v864;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v578;
LABEL_883:
            v73 += v573;
            v580 = &v869[v802];
            if ((unint64_t)v580 >= v66) {
              uint64_t v581 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v581 = 0;
            }
            v72 += v574 + v581;
            v869 = &v580[v581];
            v872 += v802;
            --v575;
          }
          while (v575);
          if (v834)
          {
            v582 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v583 = (unint64_t)v582 >= v834;
            uint64_t v584 = v826;
            if ((unint64_t)v582 < v834) {
              uint64_t v584 = 0;
            }
            v585 = &v582[v584];
            unint64_t v586 = v66 + 2 * v584;
            uint64_t v587 = v792;
            if (!v583) {
              uint64_t v587 = 0;
            }
            unint64_t v66 = v586 + 2 * v837;
            v869 = v585;
            v840 = v585;
            v842 += v831 + v587;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 26:
        uint64_t v588 = (int)v24;
        int v589 = v67;
        uint64_t v590 = v42;
        uint64_t v827 = -(uint64_t)(v837 * v589);
        uint64_t v793 = -(v74 * v589);
        while (1)
        {
          int v591 = v884[0];
          unint64_t v865 = v66;
          do
          {
            if (v42)
            {
              unsigned int v592 = *v72;
              if (v592 < 8) {
                goto LABEL_906;
              }
              if (v24) {
                goto LABEL_901;
              }
            }
            else
            {
              unsigned int v592 = 255;
              if (v24)
              {
LABEL_901:
                unsigned int v593 = *v73;
                unsigned int v594 = (unsigned __int16)*v869;
                if (v593 > 7)
                {
                  int v596 = PDAluminosityPDA(v594, v592, (unsigned __int16)*v872, v593);
                  unint64_t v66 = v865;
                  int v42 = v868;
                  LODWORD(v24) = v844;
                  __int16 *v872 = v596;
                  char *v73 = HIBYTE(v596);
                }
                else
                {
                  __int16 *v872 = v594;
                  char *v73 = v592;
                }
                goto LABEL_906;
              }
            }
            __int16 v595 = PDAluminosityPDA((unsigned __int16)*v869, v592, (unsigned __int16)*v872, 0xFFu);
            unint64_t v66 = v865;
            int v42 = v868;
            LODWORD(v24) = v844;
            __int16 *v872 = v595;
LABEL_906:
            v73 += v588;
            v597 = &v869[v802];
            if ((unint64_t)v597 >= v66) {
              uint64_t v598 = -(uint64_t)(int)v809;
            }
            else {
              uint64_t v598 = 0;
            }
            v72 += v590 + v598;
            v869 = &v597[v598];
            v872 += v802;
            --v591;
          }
          while (v591);
          if (v834)
          {
            v599 = &v840[v837];
            uint64_t v74 = v831;
            BOOL v600 = (unint64_t)v599 >= v834;
            uint64_t v601 = v827;
            if ((unint64_t)v599 < v834) {
              uint64_t v601 = 0;
            }
            v602 = &v599[v601];
            unint64_t v603 = v66 + 2 * v601;
            uint64_t v604 = v793;
            if (!v600) {
              uint64_t v604 = 0;
            }
            unint64_t v66 = v603 + 2 * v837;
            v869 = v602;
            v840 = v602;
            v842 += v831 + v604;
            v72 = v842;
          }
          else
          {
            v869 += v837;
            uint64_t v74 = v831;
            v72 += v831;
          }
          v872 += v833;
          v73 += v829;
          if (!--v874[0]) {
            goto LABEL_1018;
          }
        }
      case 27:
        int v605 = v67;
        uint64_t v606 = (int)v24;
        uint64_t v607 = v42;
        uint64_t v828 = -(uint64_t)(v837 * v605);
        uint64_t v794 = -(v74 * v605);
        break;
      default:
        goto LABEL_1159;
    }
LABEL_920:
    int v608 = v884[0];
    unint64_t v866 = v66;
    while (1)
    {
      if (v42)
      {
        unsigned int v609 = *v72;
        if (v609 < 8) {
          goto LABEL_929;
        }
        if (!v24) {
          goto LABEL_927;
        }
      }
      else
      {
        unsigned int v609 = 255;
        if (!v24)
        {
LABEL_927:
          __int16 v611 = PDAluminosityPDA((unsigned __int16)*v872, 0xFFu, (unsigned __int16)*v869, v609);
          unint64_t v66 = v866;
          int v42 = v868;
          LODWORD(v24) = v844;
          __int16 *v872 = v611;
          goto LABEL_929;
        }
      }
      unsigned int v610 = *v73;
      if (v610 > 7)
      {
        int v612 = PDAluminosityPDA((unsigned __int16)*v872, v610, (unsigned __int16)*v869, v609);
        unint64_t v66 = v866;
        int v42 = v868;
        LODWORD(v24) = v844;
        __int16 *v872 = v612;
        char *v73 = HIBYTE(v612);
      }
      else
      {
        __int16 *v872 = *v869;
        char *v73 = v609;
      }
LABEL_929:
      v73 += v606;
      v613 = &v869[v802];
      if ((unint64_t)v613 >= v66) {
        uint64_t v614 = -(uint64_t)(int)v809;
      }
      else {
        uint64_t v614 = 0;
      }
      v72 += v607 + v614;
      v869 = &v613[v614];
      v872 += v802;
      if (!--v608)
      {
        if (v834)
        {
          v615 = &v840[v837];
          uint64_t v74 = v831;
          BOOL v616 = (unint64_t)v615 >= v834;
          uint64_t v617 = v828;
          if ((unint64_t)v615 < v834) {
            uint64_t v617 = 0;
          }
          v618 = &v615[v617];
          unint64_t v619 = v66 + 2 * v617;
          uint64_t v620 = v794;
          if (!v616) {
            uint64_t v620 = 0;
          }
          unint64_t v66 = v619 + 2 * v837;
          v869 = v618;
          v840 = v618;
          v842 += v831 + v620;
          v72 = v842;
        }
        else
        {
          v869 += v837;
          uint64_t v74 = v831;
          v72 += v831;
        }
        v872 += v833;
        v73 += v829;
        if (!--v874[0]) {
          goto LABEL_1018;
        }
        goto LABEL_920;
      }
    }
  }
  int v16 = *(_DWORD *)(v3 + 128);
  if ((v16 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400) {
      rgb555_mark_constmask(v3, v8);
    }
    else {
      rgb555_mark_pixelmask(v3, v8);
    }
  }
  else
  {
    int v25 = *(_DWORD *)(v3 + 112);
    int v26 = *(_DWORD *)(v3 + 116);
    unsigned int v27 = (v25 + 15) & 0xFFFFFFF0;
    size_t v28 = v27 * v26;
    if ((int)v28 <= 4096)
    {
      v30 = v884;
    }
    else
    {
      v29 = malloc_type_malloc(v28, 0x8303D2FuLL);
      if (!v29) {
        return 1;
      }
      v30 = v29;
      v15 = *(uint16x4_t **)(v10 + 136);
      int v16 = *(_DWORD *)(v10 + 128);
    }
    CGSConvertBitsToMask(v15, *(_DWORD *)(v10 + 124), v30, v27, v25, v26, v16);
    long long v51 = *(_OWORD *)(v10 + 112);
    long long v880 = *(_OWORD *)(v10 + 96);
    long long v881 = v51;
    long long v52 = *(_OWORD *)(v10 + 144);
    long long v882 = *(_OWORD *)(v10 + 128);
    long long v883 = v52;
    long long v53 = *(_OWORD *)(v10 + 48);
    long long v876 = *(_OWORD *)(v10 + 32);
    long long v877 = v53;
    long long v54 = *(_OWORD *)(v10 + 80);
    long long v878 = *(_OWORD *)(v10 + 64);
    long long v879 = v54;
    long long v55 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v874 = *(_OWORD *)v10;
    long long v875 = v55;
    HIDWORD(v881) = (v25 + 15) & 0xFFFFFFF0;
    *((void *)&v882 + 1) = v30;
    if (BYTE1(v874[0]) << 8 == 1024) {
      rgb555_mark_constmask((uint64_t)v874, v803);
    }
    else {
      rgb555_mark_pixelmask((uint64_t)v874, v803);
    }
    if (v30 != (unsigned char *)v884)
    {
      v61 = v30;
      goto LABEL_1048;
    }
  }
  return 1;
}

void rgb555_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(void, void))
{
  v84[1] = *MEMORY[0x1E4F143B8];
  v8.n128_u64[1] = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v75 = 0u;
  v8.n128_u64[0] = *(unsigned int *)(a2 + 184);
  v8.n128_f32[0] = (float)(v8.n128_f32[0] * 255.0) + 0.5;
  v71[0] = a3;
  v71[1] = a4;
  LOBYTE(v72) = (int)v8.n128_f32[0];
  unint64_t v9 = (unint64_t)*(int *)(a1 + 28) >> 1;
  *(void *)&long long v73 = v9;
  if (*(void *)(a1 + 48)) {
    unint64_t v10 = *(int *)(a1 + 32);
  }
  else {
    unint64_t v10 = 0;
  }
  *(void *)&long long v75 = 0;
  long long v74 = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  unsigned int v12 = *(_DWORD *)(a2 + 20);
  unsigned int v13 = HIBYTE(v12);
  unsigned int v14 = BYTE2(v12);
  if (v11)
  {
    unint64_t v15 = *(int *)(a2 + 24);
    int v16 = (uint64_t *)(a2 + 104);
    unsigned int v17 = (uint64_t *)(a2 + 72);
    unint64_t v18 = (uint64_t *)(a2 + 88);
    unsigned int v19 = v13;
  }
  else
  {
    unint64_t v15 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    int v16 = (uint64_t *)(a2 + 96);
    unsigned int v17 = (uint64_t *)(a2 + 64);
    unint64_t v18 = (uint64_t *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 112);
    unsigned int v19 = v14;
  }
  uint64_t v20 = *v18;
  uint64_t v21 = *v17;
  uint64_t v22 = *v16;
  char v23 = v19;
  *((void *)&v76 + 1) = v19;
  *((void *)&v75 + 1) = v22;
  *((void *)&v80 + 1) = v15;
  *((void *)&v79 + 1) = v20;
  *((void *)&v78 + 1) = v21;
  *((void *)&v77 + 1) = v11;
  uint64_t v24 = *(void *)(a2 + 128);
  if (v24)
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    int v26 = (uint64_t *)(a2 + 96);
    unsigned int v27 = (uint64_t *)(a2 + 64);
    size_t v28 = (uint64_t *)(a2 + 80);
    unsigned int v13 = v14;
  }
  else
  {
    unint64_t v25 = *(int *)(a2 + 24);
    int v26 = (uint64_t *)(a2 + 104);
    unsigned int v27 = (uint64_t *)(a2 + 72);
    size_t v28 = (uint64_t *)(a2 + 88);
    uint64_t v24 = *(void *)(a2 + 136);
  }
  uint64_t v70 = &v66;
  uint64_t v29 = *v28;
  uint64_t v30 = *v27;
  uint64_t v31 = *v26;
  *(void *)&long long v77 = v13;
  *(void *)&long long v76 = v31;
  *(void *)&long long v81 = v25;
  *(void *)&long long v80 = v29;
  *(void *)&long long v79 = v30;
  *(void *)&long long v78 = v24;
  uint64_t v32 = *(int *)(a1 + 4);
  MEMORY[0x1F4188790](a1, v8);
  uint64_t v69 = (char *)&v66 - v34 - 15;
  if (v35 <= 0xFFFFFFFFFFFFFFELL) {
    int v37 = (char *)&v66 - v34 - 15;
  }
  else {
    int v37 = 0;
  }
  if (v35 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000402)
  {
    uint64_t v67 = v33;
    unint64_t v68 = a5;
    uint64_t v38 = v36;
    int v37 = (char *)malloc_type_malloc(16 * v32, 0x1B1F656EuLL);
    uint64_t v33 = v67;
    uint64_t v36 = v38;
    a5 = v68;
  }
  *((void *)&v81 + 1) = v37;
  if (v37)
  {
    uint64_t v39 = v32;
    if (*(void *)(a2 + 176))
    {
      if ((int)v32 >= 1)
      {
        uint64_t v40 = (uint64_t *)(v37 + 8);
        uint64_t v41 = -v33;
        uint64_t v42 = v36 - v22;
        do
        {
          if (((v41 + v22) | v42) < 0)
          {
            unint64_t v45 = 0;
            uint64_t v46 = 0;
          }
          else
          {
            unint64_t v43 = ((v22 & (unint64_t)~(-1 << v23)) >> (v23 - 4)) & 0xF;
            char v44 = weights_21383[v43];
            if (v43 - 7 >= 9) {
              unint64_t v45 = -(uint64_t)v15;
            }
            else {
              unint64_t v45 = v15;
            }
            uint64_t v46 = v44 & 0xF;
          }
          uint64_t v33 = v15 * (v22 >> v23);
          *(v40 - 1) = v33;
          *uint64_t v40 = v46 | (16 * v45);
          v40 += 2;
          v22 += v11;
          v42 -= v11;
          --v39;
        }
        while (v39);
      }
    }
    else if ((int)v32 >= 1)
    {
      v47 = v37 + 8;
      do
      {
        *(v47 - 1) = v15 * (v22 >> v23);
        void *v47 = 0;
        v47 += 2;
        v22 += v11;
        --v39;
      }
      while (v39);
    }
    unint64_t v48 = v37;
    int v49 = *(_DWORD *)(a1 + 4);
    int v50 = *(_DWORD *)(a1 + 8);
    int v82 = v50;
    int v83 = v49;
    long long v51 = *(int **)(a1 + 136);
    if (v51)
    {
      int v52 = *(_DWORD *)(a1 + 104);
      LODWORD(v84[0]) = *(_DWORD *)(a1 + 108);
      HIDWORD(v84[0]) = v52;
      shape_enum_clip_alloc((uint64_t)v37, v33, v51, 1, 1, 1, v52, v84[0], v49, v50);
      long long v54 = v53;
      if (v53) {
        goto LABEL_42;
      }
    }
    int v55 = 0;
    int v56 = 0;
    long long v54 = 0;
    v84[0] = 0;
    while (1)
    {
      uint64_t v57 = *(int *)(a1 + 16) + (uint64_t)v56;
      uint64_t v58 = *(void *)(a1 + 48);
      uint64_t v59 = *(int *)(a1 + 12) + (uint64_t)v55;
      uint64_t v60 = v58 + v10 * v57 + v59;
      if (!v58) {
        uint64_t v60 = 0;
      }
      *((void *)&v72 + 1) = *(void *)(a1 + 40) + 2 * v9 * v57 + 2 * v59;
      *((void *)&v73 + 1) = v60;
      if (*(void *)(a2 + 168))
      {
        BOOL v61 = -(int)v59 < 0;
        int v62 = -(int)v59 & 0xF;
        int v63 = v59 & 0xF;
        if (!v61) {
          int v63 = -v62;
        }
        BOOL v61 = -(int)v57 < 0;
        int v64 = -(int)v57 & 0xF;
        int v65 = v57 & 0xF;
        if (!v61) {
          int v65 = -v64;
        }
        *((void *)&v74 + 1) = v63;
        *(void *)&long long v75 = v65;
      }
      a5(a2, v71);
      if (!v54) {
        break;
      }
LABEL_42:
      if (!shape_enum_clip_next((uint64_t)v54, (int *)v84 + 1, v84, &v83, &v82))
      {
        free(v54);
        break;
      }
      int v56 = v84[0];
      int v55 = HIDWORD(v84[0]);
      unint64_t v9 = v73;
      unint64_t v10 = v74;
    }
    if (v48 != v69) {
      free(v48);
    }
  }
}

uint64_t rgb555_image_mark_rgb32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  if (*(void *)(a1 + 40)) {
    int v7 = 0;
  }
  else {
    int v7 = 255;
  }
  int v151 = v7;
  __n128 v8 = (_WORD *)*((void *)a2 + 2);
  unint64_t v9 = (char *)*((void *)a2 + 4);
  if (v9) {
    uint64_t v137 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v137 = 0;
  }
  int v10 = a2[1];
  int v136 = *a2;
  uint64_t v135 = *((void *)a2 + 3) - a5;
  uint64_t v150 = v9 != 0;
  uint64_t v12 = *((void *)a2 + 19);
  uint64_t v11 = *((void *)a2 + 20);
  uint64_t v13 = *((void *)a2 + 11);
  uint64_t v132 = *((void *)a2 + 13);
  uint64_t result = *((void *)a2 + 9) + v132 * a4;
  uint64_t v129 = *((void *)a2 + 6);
  uint64_t v138 = *((void *)a2 + 7);
  unint64_t v15 = *(unsigned int **)(a1 + 32);
  int v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  uint64_t v17 = *(void *)(a1 + 168);
  char v149 = v10;
  char v133 = v13;
  uint64_t v134 = v12;
  uint64_t v131 = v17;
  if (*(void *)(a1 + 176))
  {
    unint64_t v145 = 0;
    unint64_t v18 = 0;
    uint64_t v128 = *((void *)a2 + 15);
    uint64_t v127 = *((void *)a2 + 17);
    uint64_t v126 = ~(-1 << v13);
    char v125 = v13 - 4;
    uint64_t v124 = -v12;
    unsigned int v19 = (unsigned int *)(v16 - 4);
    char v148 = 32 - v10;
    int32x2_t v20 = vdup_n_s32(v6);
    uint64_t v122 = v11 + 16 * a3 + 8;
    uint64_t v123 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v127 - result) | (result - v128)) < 0)
      {
        int v26 = 0;
        uint64_t v146 = 0;
      }
      else
      {
        uint64_t v22 = ((result & (unint64_t)v126) >> v125) & 0xF;
        char v23 = weights_21383[v22];
        BOOL v24 = (unint64_t)(v22 - 7) >= 9;
        uint64_t v25 = v124;
        if (!v24) {
          uint64_t v25 = v12;
        }
        uint64_t v146 = v25;
        int v26 = v23 & 0xF;
      }
      if (v17)
      {
        uint64_t v27 = v17 + 16 * v138;
        unint64_t v145 = v27 + 16;
        unint64_t v18 = (unsigned __int8 *)(v27 + v129);
        uint64_t v28 = (v138 + 1) & 0xF;
        if (v138 + 1 <= 0) {
          uint64_t v28 = -(-(v138 + 1) & 0xF);
        }
        uint64_t v138 = v28;
      }
      uint64_t v29 = *(void *)(a1 + 32) + (result >> v13) * v12;
      int v141 = a6;
      uint64_t v139 = result;
      if (v136 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v31 = (uint64_t *)v122;
        uint64_t v30 = v123;
        while (1)
        {
          uint64_t v32 = *(v31 - 1);
          uint64_t v33 = *v31;
          uint64_t v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32) {
            unint64_t v35 = (unsigned int *)(v29 + v32);
          }
          else {
            unint64_t v35 = v19;
          }
          if (v35 < v15) {
            unint64_t v35 = v15;
          }
          unsigned int v36 = *v35;
          char v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0) {
            break;
          }
          if (v26)
          {
            unint64_t v48 = (unsigned int *)(v34 + v146);
            if ((unint64_t)v19 < v34 + v146) {
              unint64_t v48 = v19;
            }
            if (v48 < v15) {
              unint64_t v48 = v15;
            }
            int v49 = BLEND8_21385[v26];
            unsigned int v46 = v36 - ((v49 & v36) >> v26);
            unsigned int v47 = (v49 & *v48) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          unsigned int v50 = (v36 << v149) | (v36 >> v148);
          unsigned int v51 = v50 | v151;
          if (v18)
          {
            int v52 = *v18;
            if ((unint64_t)(v18 + 1) < v145) {
              ++v18;
            }
            else {
              v18 -= 15;
            }
            if (v6 == 255) {
              int v53 = DITHERRGBA32(v51, v52);
            }
            else {
              int v53 = DITHERRGBA32M(v51, v52, v6);
            }
          }
          else
          {
            unint64_t v18 = 0;
            if (v6 == 255)
            {
              int v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              int v55 = (unsigned __int16)v21.i16[0] >> 11;
              uint32x4_t v56 = vshlq_u32(v54, (uint32x4_t)xmmword_1850CD9F0);
              int8x16_t v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_1850CDA00);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              int32x4_t v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_1850CDA10);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              int v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *__n128 v8 = v53;
          if (v9) {
            *unint64_t v9 = HIBYTE(v53);
          }
          v31 += 2;
          ++v8;
          v9 += v150;
          if (!--v30) {
            goto LABEL_117;
          }
        }
        uint64_t v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38) {
          uint64_t v38 = v19;
        }
        if (v38 < v15) {
          uint64_t v38 = v15;
        }
        unsigned int v39 = *v38;
        if (v26)
        {
          uint64_t v40 = (unsigned int *)(v34 + v146);
          if (v19 >= v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = v19;
          }
          if (v41 < v15) {
            uint64_t v41 = v15;
          }
          unsigned int v42 = *v41;
          unint64_t v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43) {
            unint64_t v43 = v19;
          }
          if (v43 < v15) {
            unint64_t v43 = v15;
          }
          int v44 = BLEND8_21385[v26];
          unsigned int v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          unsigned int v39 = v39 - ((v44 & v39) >> v26) + ((v44 & *v43) >> v26);
        }
        int v45 = BLEND8_21385[*v31 & 0xF];
        unsigned int v46 = v36 - ((v45 & v36) >> v37);
        unsigned int v47 = (v45 & v39) >> v37;
LABEL_49:
        unsigned int v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      uint64_t v12 = v134;
      v8 += v135;
      v9 += v137;
      LOBYTE(v13) = v133;
      uint64_t result = v139 + v132;
      a6 = v141 - 1;
      uint64_t v17 = v131;
      if (v141 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_117;
    }
    uint64_t v59 = (uint64_t *)v122;
    uint64_t v58 = v123;
    while (1)
    {
      uint64_t v60 = *(v59 - 1);
      uint64_t v61 = *v59;
      uint64_t v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60) {
        int v63 = (unsigned int *)(v29 + v60);
      }
      else {
        int v63 = v19;
      }
      if (v63 < v15) {
        int v63 = v15;
      }
      unsigned int v64 = *v63;
      char v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        uint64_t v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66) {
          uint64_t v66 = v19;
        }
        if (v66 < v15) {
          uint64_t v66 = v15;
        }
        unsigned int v67 = *v66;
        if (v26)
        {
          unint64_t v68 = (unsigned int *)(v62 + v146);
          if (v19 >= v68) {
            uint64_t v69 = v68;
          }
          else {
            uint64_t v69 = v19;
          }
          if (v69 < v15) {
            uint64_t v69 = v15;
          }
          unsigned int v70 = *v69;
          uint64_t v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71) {
            uint64_t v71 = v19;
          }
          if (v71 < v15) {
            uint64_t v71 = v15;
          }
          int v72 = BLEND8_21385[v26];
          unsigned int v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          unsigned int v67 = v67 - ((v72 & v67) >> v26) + ((v72 & *v71) >> v26);
        }
        int v73 = BLEND8_21385[*v59 & 0xF];
        unsigned int v74 = v64 - ((v73 & v64) >> v65);
        unsigned int v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26) {
          goto LABEL_95;
        }
        long long v76 = (unsigned int *)(v62 + v146);
        if ((unint64_t)v19 < v62 + v146) {
          long long v76 = v19;
        }
        if (v76 < v15) {
          long long v76 = v15;
        }
        int v77 = BLEND8_21385[v26];
        unsigned int v74 = v64 - ((v77 & v64) >> v26);
        unsigned int v75 = (v77 & *v76) >> v26;
      }
      unsigned int v64 = v74 + v75;
LABEL_95:
      unsigned int v78 = (v64 << v149) | (v64 >> v148);
      unsigned int v79 = v78 | v151;
      if (v18)
      {
        int v80 = *v18;
        if ((unint64_t)(v18 + 1) < v145) {
          ++v18;
        }
        else {
          v18 -= 15;
        }
        if (v6 == 255)
        {
          unsigned int v81 = DITHERRGBA32(v79, v80);
          if (!v9) {
            goto LABEL_105;
          }
        }
        else
        {
          unsigned int v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9) {
            goto LABEL_105;
          }
        }
      }
      else if (v6 == 255)
      {
        unint64_t v18 = 0;
        unsigned int v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u) {
              *__n128 v8 = PDplusDM(v81, (unsigned __int16)*v8, ~v81 >> 24);
            }
          }
          else
          {
            *__n128 v8 = v81;
          }
          goto LABEL_113;
        }
      }
      else
      {
        unint64_t v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        uint32x4_t v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        int v83 = (unsigned __int16)v21.i16[0] >> 11;
        uint32x4_t v84 = vshlq_u32(v82, (uint32x4_t)xmmword_1850CD9F0);
        int8x16_t v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_1850CDA00);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        int32x4_t v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_1850CDA10);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        unsigned int v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9) {
          goto LABEL_105;
        }
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          int v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), (unsigned __int16)*v8, *v9, HIBYTE(v81) ^ 0xFF);
          *__n128 v8 = v86;
          *unint64_t v9 = HIBYTE(v86);
        }
      }
      else
      {
        *__n128 v8 = v81;
        *unint64_t v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v150;
      if (!--v58) {
        goto LABEL_117;
      }
    }
  }
  unint64_t v87 = 0;
  uint64_t v88 = 0;
  int v89 = v16 - 4;
  int32x2_t v90 = vdup_n_s32(v6);
  int v144 = (uint64_t *)(v11 + 16 * a3);
  char v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  uint64_t v143 = a5;
  char v93 = v10;
  do
  {
    if (v17)
    {
      uint64_t v94 = v17 + 16 * v138;
      unint64_t v87 = v94 + 16;
      uint64_t v88 = (unsigned __int8 *)(v94 + v129);
      uint64_t v95 = (v138 + 1) & 0xF;
      if (v138 + 1 <= 0) {
        uint64_t v95 = -(-(v138 + 1) & 0xF);
      }
      uint64_t v138 = v95;
    }
    uint64_t v96 = *(void *)(a1 + 32) + (result >> v13) * v12;
    int v142 = a6;
    uint64_t v140 = result;
    if (v136 != 1)
    {
      unsigned int v109 = v144;
      uint64_t v110 = v143;
      if (a5 < 1) {
        goto LABEL_173;
      }
      while (1)
      {
        uint64_t v111 = *v109;
        v109 += 2;
        int v112 = (char *)(v96 + v111);
        if ((unint64_t)v89 < v96 + v111) {
          int v112 = v89;
        }
        if ((unint64_t)v112 < *(void *)(a1 + 32)) {
          int v112 = *(char **)(a1 + 32);
        }
        unsigned int v113 = (*(_DWORD *)v112 << v93) | (*(_DWORD *)v112 >> v91);
        unsigned int v114 = v113 | v151;
        if (v88)
        {
          int v115 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255)
          {
            unsigned int v116 = DITHERRGBA32(v114, v115);
            if (v9) {
              goto LABEL_157;
            }
          }
          else
          {
            unsigned int v116 = DITHERRGBA32M(v114, v115, v6);
            if (v9) {
              goto LABEL_157;
            }
          }
        }
        else if (v6 == 255)
        {
          uint64_t v88 = 0;
          unsigned int v116 = (v113 >> 17) & 0x7C00 | (v113 >> 14) & 0x3E0 | ((unsigned __int16)v113 >> 11) & 0xFFFFFF | ((v114 >> 3) << 27) | (v114 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v116) < 0xF8u)
            {
              if (HIBYTE(v116) >= 8u)
              {
                int v121 = PDAplusDAM((unsigned __int16)v116, SHIBYTE(v116), (unsigned __int16)*v8, *v9, HIBYTE(v116) ^ 0xFF);
                *__n128 v8 = v121;
                *unint64_t v9 = HIBYTE(v121);
              }
            }
            else
            {
              *__n128 v8 = v116;
              *unint64_t v9 = HIBYTE(v116);
            }
            goto LABEL_167;
          }
        }
        else
        {
          uint64_t v88 = 0;
          v92.i16[0] = BYTE1(v113);
          v92.i16[1] = v113 >> 8 >> 16;
          v92.i32[1] = v114 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v117 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          int v118 = (unsigned __int16)v92.i16[0] >> 11;
          uint32x4_t v119 = vshlq_u32(v117, (uint32x4_t)xmmword_1850CD9F0);
          int8x16_t v120 = (int8x16_t)vshlq_u32(v117, (uint32x4_t)xmmword_1850CDA00);
          v120.i32[0] = v119.i32[0];
          v120.i32[3] = v119.i32[3];
          int32x4_t v92 = (int32x4_t)vandq_s8(v120, (int8x16_t)xmmword_1850CDA10);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          unsigned int v116 = v92.i32[0] | v118 | v92.i32[1];
          if (v9) {
            goto LABEL_157;
          }
        }
        if (HIBYTE(v116) >= 0xF8u) {
          goto LABEL_164;
        }
        if (HIBYTE(v116) >= 8u) {
          break;
        }
LABEL_167:
        ++v8;
        v9 += v150;
        --v110;
        char v93 = v149;
        if (!v110) {
          goto LABEL_173;
        }
      }
      LOWORD(v116) = PDplusDM(v116, (unsigned __int16)*v8, ~v116 >> 24);
LABEL_164:
      *__n128 v8 = v116;
      goto LABEL_167;
    }
    if (a5 >= 1)
    {
      unsigned int v97 = v144;
      uint64_t v98 = v143;
      do
      {
        uint64_t v99 = *v97;
        v97 += 2;
        uint64_t v100 = (char *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99) {
          uint64_t v100 = v89;
        }
        if ((unint64_t)v100 < *(void *)(a1 + 32)) {
          uint64_t v100 = *(char **)(a1 + 32);
        }
        unsigned int v101 = (*(_DWORD *)v100 << v93) | (*(_DWORD *)v100 >> v91);
        unsigned int v102 = v101 | v151;
        if (v88)
        {
          int v103 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255) {
            int v104 = DITHERRGBA32(v102, v103);
          }
          else {
            int v104 = DITHERRGBA32M(v102, v103, v6);
          }
          char v93 = v149;
        }
        else
        {
          uint64_t v88 = 0;
          if (v6 == 255)
          {
            int v104 = (v101 >> 17) & 0x7C00 | (v101 >> 14) & 0x3E0 | ((unsigned __int16)v101 >> 11) & 0xFFFFFF | ((v102 >> 3) << 27) | (v102 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v101);
            v92.i16[1] = v101 >> 8 >> 16;
            v92.i32[1] = v102 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v105 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            int v106 = (unsigned __int16)v92.i16[0] >> 11;
            uint32x4_t v107 = vshlq_u32(v105, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v108 = (int8x16_t)vshlq_u32(v105, (uint32x4_t)xmmword_1850CDA00);
            v108.i32[0] = v107.i32[0];
            v108.i32[3] = v107.i32[3];
            int32x4_t v92 = (int32x4_t)vandq_s8(v108, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            int v104 = v92.i32[0] | v106 | v92.i32[1];
          }
        }
        *__n128 v8 = v104;
        if (v9) {
          *unint64_t v9 = HIBYTE(v104);
        }
        ++v8;
        v9 += v150;
        --v98;
      }
      while (v98);
    }
LABEL_173:
    uint64_t v12 = v134;
    v8 += v135;
    v9 += v137;
    LOBYTE(v13) = v133;
    uint64_t result = v140 + v132;
    a6 = v142 - 1;
    uint64_t v17 = v131;
  }
  while (v142 != 1);
  return result;
}

uint64_t rgb555_image_mark_RGB32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  if (*(void *)(a1 + 40)) {
    int v7 = 0;
  }
  else {
    int v7 = 255;
  }
  int v153 = v7;
  __n128 v8 = (_WORD *)*((void *)a2 + 2);
  unint64_t v9 = (char *)*((void *)a2 + 4);
  if (v9) {
    uint64_t v139 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v139 = 0;
  }
  int v10 = a2[1];
  int v138 = *a2;
  uint64_t v137 = *((void *)a2 + 3) - a5;
  uint64_t v152 = v9 != 0;
  uint64_t v12 = *((void *)a2 + 19);
  uint64_t v11 = *((void *)a2 + 20);
  uint64_t v13 = *((void *)a2 + 11);
  uint64_t v134 = *((void *)a2 + 13);
  uint64_t result = *((void *)a2 + 9) + v134 * a4;
  uint64_t v131 = *((void *)a2 + 6);
  uint64_t v140 = *((void *)a2 + 7);
  unint64_t v15 = *(unsigned int **)(a1 + 32);
  int v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  uint64_t v17 = *(void *)(a1 + 168);
  char v151 = v10;
  char v135 = v13;
  uint64_t v136 = v12;
  uint64_t v133 = v17;
  if (*(void *)(a1 + 176))
  {
    unint64_t v147 = 0;
    unint64_t v18 = 0;
    uint64_t v130 = *((void *)a2 + 15);
    uint64_t v129 = *((void *)a2 + 17);
    uint64_t v128 = ~(-1 << v13);
    char v127 = v13 - 4;
    uint64_t v126 = -v12;
    unsigned int v19 = (unsigned int *)(v16 - 4);
    char v150 = 32 - v10;
    int32x2_t v20 = vdup_n_s32(v6);
    uint64_t v124 = v11 + 16 * a3 + 8;
    uint64_t v125 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v129 - result) | (result - v130)) < 0)
      {
        int v26 = 0;
        uint64_t v148 = 0;
      }
      else
      {
        uint64_t v22 = ((result & (unint64_t)v128) >> v127) & 0xF;
        char v23 = weights_21383[v22];
        BOOL v24 = (unint64_t)(v22 - 7) >= 9;
        uint64_t v25 = v126;
        if (!v24) {
          uint64_t v25 = v12;
        }
        uint64_t v148 = v25;
        int v26 = v23 & 0xF;
      }
      if (v17)
      {
        uint64_t v27 = v17 + 16 * v140;
        unint64_t v147 = v27 + 16;
        unint64_t v18 = (unsigned __int8 *)(v27 + v131);
        uint64_t v28 = (v140 + 1) & 0xF;
        if (v140 + 1 <= 0) {
          uint64_t v28 = -(-(v140 + 1) & 0xF);
        }
        uint64_t v140 = v28;
      }
      uint64_t v29 = *(void *)(a1 + 32) + (result >> v13) * v12;
      int v143 = a6;
      uint64_t v141 = result;
      if (v138 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v31 = (uint64_t *)v124;
        uint64_t v30 = v125;
        while (1)
        {
          uint64_t v32 = *(v31 - 1);
          uint64_t v33 = *v31;
          uint64_t v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32) {
            unint64_t v35 = (unsigned int *)(v29 + v32);
          }
          else {
            unint64_t v35 = v19;
          }
          if (v35 < v15) {
            unint64_t v35 = v15;
          }
          unsigned int v36 = bswap32(*v35);
          char v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0) {
            break;
          }
          if (v26)
          {
            unint64_t v48 = (unsigned int *)(v34 + v148);
            if ((unint64_t)v19 < v34 + v148) {
              unint64_t v48 = v19;
            }
            if (v48 < v15) {
              unint64_t v48 = v15;
            }
            int v49 = BLEND8_21385[v26];
            unsigned int v46 = v36 - ((v49 & v36) >> v26);
            unsigned int v47 = (bswap32(*v48) & v49) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          unsigned int v50 = (v36 << v151) | (v36 >> v150);
          unsigned int v51 = v50 | v153;
          if (v18)
          {
            int v52 = *v18;
            if ((unint64_t)(v18 + 1) < v147) {
              ++v18;
            }
            else {
              v18 -= 15;
            }
            if (v6 == 255) {
              int v53 = DITHERRGBA32(v51, v52);
            }
            else {
              int v53 = DITHERRGBA32M(v51, v52, v6);
            }
          }
          else
          {
            unint64_t v18 = 0;
            if (v6 == 255)
            {
              int v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              int v55 = (unsigned __int16)v21.i16[0] >> 11;
              uint32x4_t v56 = vshlq_u32(v54, (uint32x4_t)xmmword_1850CD9F0);
              int8x16_t v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_1850CDA00);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              int32x4_t v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_1850CDA10);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              int v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *__n128 v8 = v53;
          if (v9) {
            *unint64_t v9 = HIBYTE(v53);
          }
          v31 += 2;
          ++v8;
          v9 += v152;
          if (!--v30) {
            goto LABEL_117;
          }
        }
        uint64_t v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38) {
          uint64_t v38 = v19;
        }
        if (v38 < v15) {
          uint64_t v38 = v15;
        }
        unsigned int v39 = bswap32(*v38);
        if (v26)
        {
          uint64_t v40 = (unsigned int *)(v34 + v148);
          if (v19 >= v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = v19;
          }
          if (v41 < v15) {
            uint64_t v41 = v15;
          }
          unsigned int v42 = bswap32(*v41);
          unint64_t v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43) {
            unint64_t v43 = v19;
          }
          if (v43 < v15) {
            unint64_t v43 = v15;
          }
          int v44 = BLEND8_21385[v26];
          unsigned int v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          unsigned int v39 = v39 - ((v44 & v39) >> v26) + ((bswap32(*v43) & v44) >> v26);
        }
        int v45 = BLEND8_21385[*v31 & 0xF];
        unsigned int v46 = v36 - ((v45 & v36) >> v37);
        unsigned int v47 = (v45 & v39) >> v37;
LABEL_49:
        unsigned int v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      uint64_t v12 = v136;
      v8 += v137;
      v9 += v139;
      LOBYTE(v13) = v135;
      uint64_t result = v141 + v134;
      a6 = v143 - 1;
      uint64_t v17 = v133;
      if (v143 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_117;
    }
    uint64_t v59 = (uint64_t *)v124;
    uint64_t v58 = v125;
    while (1)
    {
      uint64_t v60 = *(v59 - 1);
      uint64_t v61 = *v59;
      uint64_t v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60) {
        int v63 = (unsigned int *)(v29 + v60);
      }
      else {
        int v63 = v19;
      }
      if (v63 < v15) {
        int v63 = v15;
      }
      unsigned int v64 = bswap32(*v63);
      char v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        uint64_t v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66) {
          uint64_t v66 = v19;
        }
        if (v66 < v15) {
          uint64_t v66 = v15;
        }
        unsigned int v67 = bswap32(*v66);
        if (v26)
        {
          unint64_t v68 = (unsigned int *)(v62 + v148);
          if (v19 >= v68) {
            uint64_t v69 = v68;
          }
          else {
            uint64_t v69 = v19;
          }
          if (v69 < v15) {
            uint64_t v69 = v15;
          }
          unsigned int v70 = bswap32(*v69);
          uint64_t v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71) {
            uint64_t v71 = v19;
          }
          if (v71 < v15) {
            uint64_t v71 = v15;
          }
          int v72 = BLEND8_21385[v26];
          unsigned int v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          unsigned int v67 = v67 - ((v72 & v67) >> v26) + ((bswap32(*v71) & v72) >> v26);
        }
        int v73 = BLEND8_21385[*v59 & 0xF];
        unsigned int v74 = v64 - ((v73 & v64) >> v65);
        unsigned int v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26) {
          goto LABEL_95;
        }
        long long v76 = (unsigned int *)(v62 + v148);
        if ((unint64_t)v19 < v62 + v148) {
          long long v76 = v19;
        }
        if (v76 < v15) {
          long long v76 = v15;
        }
        int v77 = BLEND8_21385[v26];
        unsigned int v74 = v64 - ((v77 & v64) >> v26);
        unsigned int v75 = (bswap32(*v76) & v77) >> v26;
      }
      unsigned int v64 = v74 + v75;
LABEL_95:
      unsigned int v78 = (v64 << v151) | (v64 >> v150);
      unsigned int v79 = v78 | v153;
      if (v18)
      {
        int v80 = *v18;
        if ((unint64_t)(v18 + 1) < v147) {
          ++v18;
        }
        else {
          v18 -= 15;
        }
        if (v6 == 255)
        {
          unsigned int v81 = DITHERRGBA32(v79, v80);
          if (!v9) {
            goto LABEL_105;
          }
        }
        else
        {
          unsigned int v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9) {
            goto LABEL_105;
          }
        }
      }
      else if (v6 == 255)
      {
        unint64_t v18 = 0;
        unsigned int v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u) {
              *__n128 v8 = PDplusDM(v81, (unsigned __int16)*v8, ~v81 >> 24);
            }
          }
          else
          {
            *__n128 v8 = v81;
          }
          goto LABEL_113;
        }
      }
      else
      {
        unint64_t v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        uint32x4_t v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        int v83 = (unsigned __int16)v21.i16[0] >> 11;
        uint32x4_t v84 = vshlq_u32(v82, (uint32x4_t)xmmword_1850CD9F0);
        int8x16_t v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_1850CDA00);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        int32x4_t v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_1850CDA10);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        unsigned int v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9) {
          goto LABEL_105;
        }
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          int v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), (unsigned __int16)*v8, *v9, HIBYTE(v81) ^ 0xFF);
          *__n128 v8 = v86;
          *unint64_t v9 = HIBYTE(v86);
        }
      }
      else
      {
        *__n128 v8 = v81;
        *unint64_t v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v152;
      if (!--v58) {
        goto LABEL_117;
      }
    }
  }
  unint64_t v87 = 0;
  uint64_t v88 = 0;
  int v89 = (unsigned int *)(v16 - 4);
  int32x2_t v90 = vdup_n_s32(v6);
  uint64_t v146 = (uint64_t *)(v11 + 16 * a3);
  char v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  uint64_t v145 = a5;
  char v93 = v10;
  do
  {
    if (v17)
    {
      uint64_t v94 = v17 + 16 * v140;
      unint64_t v87 = v94 + 16;
      uint64_t v88 = (unsigned __int8 *)(v94 + v131);
      uint64_t v95 = (v140 + 1) & 0xF;
      if (v140 + 1 <= 0) {
        uint64_t v95 = -(-(v140 + 1) & 0xF);
      }
      uint64_t v140 = v95;
    }
    uint64_t v96 = *(void *)(a1 + 32) + (result >> v13) * v12;
    int v144 = a6;
    uint64_t v142 = result;
    if (v138 != 1)
    {
      uint64_t v110 = v146;
      uint64_t v111 = v145;
      if (a5 < 1) {
        goto LABEL_173;
      }
      while (1)
      {
        uint64_t v112 = *v110;
        v110 += 2;
        unsigned int v113 = (unsigned int *)(v96 + v112);
        if ((unint64_t)v89 < v96 + v112) {
          unsigned int v113 = v89;
        }
        if ((unint64_t)v113 < *(void *)(a1 + 32)) {
          unsigned int v113 = *(unsigned int **)(a1 + 32);
        }
        unsigned int v114 = bswap32(*v113);
        unsigned int v115 = (v114 << v93) | (v114 >> v91);
        unsigned int v116 = v115 | v153;
        if (v88)
        {
          int v117 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255)
          {
            unsigned int v118 = DITHERRGBA32(v116, v117);
            if (v9) {
              goto LABEL_157;
            }
          }
          else
          {
            unsigned int v118 = DITHERRGBA32M(v116, v117, v6);
            if (v9) {
              goto LABEL_157;
            }
          }
        }
        else if (v6 == 255)
        {
          uint64_t v88 = 0;
          unsigned int v118 = (v115 >> 17) & 0x7C00 | (v115 >> 14) & 0x3E0 | ((unsigned __int16)v115 >> 11) & 0xFFFFFF | ((v116 >> 3) << 27) | (v116 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v118) < 0xF8u)
            {
              if (HIBYTE(v118) >= 8u)
              {
                int v123 = PDAplusDAM((unsigned __int16)v118, SHIBYTE(v118), (unsigned __int16)*v8, *v9, HIBYTE(v118) ^ 0xFF);
                *__n128 v8 = v123;
                *unint64_t v9 = HIBYTE(v123);
              }
            }
            else
            {
              *__n128 v8 = v118;
              *unint64_t v9 = HIBYTE(v118);
            }
            goto LABEL_167;
          }
        }
        else
        {
          uint64_t v88 = 0;
          v92.i16[0] = BYTE1(v115);
          v92.i16[1] = v115 >> 8 >> 16;
          v92.i32[1] = v116 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v119 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          int v120 = (unsigned __int16)v92.i16[0] >> 11;
          uint32x4_t v121 = vshlq_u32(v119, (uint32x4_t)xmmword_1850CD9F0);
          int8x16_t v122 = (int8x16_t)vshlq_u32(v119, (uint32x4_t)xmmword_1850CDA00);
          v122.i32[0] = v121.i32[0];
          v122.i32[3] = v121.i32[3];
          int32x4_t v92 = (int32x4_t)vandq_s8(v122, (int8x16_t)xmmword_1850CDA10);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          unsigned int v118 = v92.i32[0] | v120 | v92.i32[1];
          if (v9) {
            goto LABEL_157;
          }
        }
        if (HIBYTE(v118) >= 0xF8u) {
          goto LABEL_164;
        }
        if (HIBYTE(v118) >= 8u) {
          break;
        }
LABEL_167:
        ++v8;
        v9 += v152;
        --v111;
        char v93 = v151;
        if (!v111) {
          goto LABEL_173;
        }
      }
      LOWORD(v118) = PDplusDM(v118, (unsigned __int16)*v8, ~v118 >> 24);
LABEL_164:
      *__n128 v8 = v118;
      goto LABEL_167;
    }
    if (a5 >= 1)
    {
      unsigned int v97 = v146;
      uint64_t v98 = v145;
      do
      {
        uint64_t v99 = *v97;
        v97 += 2;
        uint64_t v100 = (unsigned int *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99) {
          uint64_t v100 = v89;
        }
        if ((unint64_t)v100 < *(void *)(a1 + 32)) {
          uint64_t v100 = *(unsigned int **)(a1 + 32);
        }
        unsigned int v101 = bswap32(*v100);
        unsigned int v102 = (v101 << v93) | (v101 >> v91);
        unsigned int v103 = v102 | v153;
        if (v88)
        {
          int v104 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255) {
            int v105 = DITHERRGBA32(v103, v104);
          }
          else {
            int v105 = DITHERRGBA32M(v103, v104, v6);
          }
          char v93 = v151;
        }
        else
        {
          uint64_t v88 = 0;
          if (v6 == 255)
          {
            int v105 = (v102 >> 17) & 0x7C00 | (v102 >> 14) & 0x3E0 | ((unsigned __int16)v102 >> 11) & 0xFFFFFF | ((v103 >> 3) << 27) | (v103 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v102);
            v92.i16[1] = v102 >> 8 >> 16;
            v92.i32[1] = v103 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v106 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            int v107 = (unsigned __int16)v92.i16[0] >> 11;
            uint32x4_t v108 = vshlq_u32(v106, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v109 = (int8x16_t)vshlq_u32(v106, (uint32x4_t)xmmword_1850CDA00);
            v109.i32[0] = v108.i32[0];
            v109.i32[3] = v108.i32[3];
            int32x4_t v92 = (int32x4_t)vandq_s8(v109, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            int v105 = v92.i32[0] | v107 | v92.i32[1];
          }
        }
        *__n128 v8 = v105;
        if (v9) {
          *unint64_t v9 = HIBYTE(v105);
        }
        ++v8;
        v9 += v152;
        --v98;
      }
      while (v98);
    }
LABEL_173:
    uint64_t v12 = v136;
    v8 += v137;
    v9 += v139;
    LOBYTE(v13) = v135;
    uint64_t result = v142 + v134;
    a6 = v144 - 1;
    uint64_t v17 = v133;
  }
  while (v144 != 1);
  return result;
}

uint64_t rgb555_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  int v7 = (_WORD *)*((void *)a2 + 2);
  __n128 v8 = (char *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v138 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v138 = 0;
  }
  int v137 = *a2;
  uint64_t v136 = *((void *)a2 + 3) - a5;
  uint64_t v147 = v8 != 0;
  uint64_t v10 = *((void *)a2 + 19);
  uint64_t v9 = *((void *)a2 + 20);
  uint64_t v11 = *((void *)a2 + 11);
  uint64_t v133 = *((void *)a2 + 13);
  uint64_t v12 = *((void *)a2 + 9) + v133 * a4;
  uint64_t v129 = *((void *)a2 + 6);
  uint64_t v140 = *((void *)a2 + 7);
  uint64_t v13 = *(unsigned __int8 **)(a1 + 32);
  unsigned int v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t result = *(void *)(a1 + 168);
  uint64_t v130 = a5;
  char v134 = v11;
  uint64_t v135 = v10;
  uint64_t v132 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 176))
  {
    unint64_t v144 = 0;
    int v16 = 0;
    uint64_t v128 = *((void *)a2 + 15);
    uint64_t v127 = *((void *)a2 + 17);
    uint64_t v126 = ~(-1 << v11);
    uint64_t v124 = -v10;
    char v125 = v11 - 4;
    uint64_t v17 = v14 - 3;
    int32x2_t v18 = vdup_n_s32(v6);
    uint64_t v123 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x3E007000000;
    while ((((v127 - v12) | (v12 - v128)) & 0x8000000000000000) == 0)
    {
      uint64_t v20 = ((v12 & (unint64_t)v126) >> v125) & 0xF;
      char v21 = weights_21383[v20];
      BOOL v22 = (unint64_t)(v20 - 7) >= 9;
      uint64_t v23 = v124;
      if (!v22) {
        uint64_t v23 = v10;
      }
      uint64_t v145 = v23;
      int v24 = v21 & 0xF;
      if (result) {
        goto LABEL_10;
      }
LABEL_13:
      uint64_t v27 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
      int v141 = a6;
      uint64_t v139 = v12;
      if (v137 != 1)
      {
        if (a5 < 1) {
          goto LABEL_111;
        }
        int v55 = (uint64_t *)v123;
        uint64_t v56 = v130;
        while (2)
        {
          uint64_t v57 = *(v55 - 1);
          uint64_t v58 = *v55;
          uint64_t v59 = v27 + v57;
          if ((unint64_t)v17 >= v27 + v57) {
            uint64_t v60 = (unsigned __int8 *)(v27 + v57);
          }
          else {
            uint64_t v60 = v17;
          }
          if (v60 < v13) {
            uint64_t v60 = v13;
          }
          unsigned int v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
          char v62 = v58 & 0xF;
          if ((v58 & 0xF) != 0)
          {
            int v63 = (unsigned __int8 *)(v59 + (v58 >> 4));
            if (v17 < v63) {
              int v63 = v17;
            }
            if (v63 < v13) {
              int v63 = v13;
            }
            int v64 = (*v63 << 24) | (v63[1] << 16) | (v63[2] << 8);
            if (v24)
            {
              char v65 = (unsigned __int8 *)(v59 + v145);
              if (v17 >= v65) {
                uint64_t v66 = v65;
              }
              else {
                uint64_t v66 = v17;
              }
              if (v66 < v13) {
                uint64_t v66 = v13;
              }
              int v67 = (*v66 << 24) | (v66[1] << 16) | (v66[2] << 8);
              unint64_t v68 = &v65[v58 >> 4];
              if (v17 < v68) {
                unint64_t v68 = v17;
              }
              if (v68 < v13) {
                unint64_t v68 = v13;
              }
              unsigned int v69 = BLEND8_21385[v24];
              unsigned int v61 = v61 - ((v69 & v61) >> v24) + ((v69 & v67) >> v24);
              int v64 = v64 - ((v69 & v64) >> v24) + ((((*v68 << 24) | (v68[1] << 16) | (v68[2] << 8)) & v69) >> v24);
            }
            int v74 = BLEND8_21385[*v55 & 0xF];
            unsigned int v72 = v61 - ((v74 & v61) >> v62);
            unsigned int v73 = (v74 & v64) >> v62;
            goto LABEL_89;
          }
          if (v24)
          {
            unsigned int v70 = (unsigned __int8 *)(v59 + v145);
            if ((unint64_t)v17 < v59 + v145) {
              unsigned int v70 = v17;
            }
            if (v70 < v13) {
              unsigned int v70 = v13;
            }
            unsigned int v71 = BLEND8_21385[v24];
            unsigned int v72 = v61 - ((v71 & v61) >> v24);
            unsigned int v73 = (((*v70 << 24) | (v70[1] << 16) | (v70[2] << 8)) & v71) >> v24;
LABEL_89:
            unsigned int v61 = v72 + v73;
          }
          unsigned int v75 = v61 | 0xFF;
          if (v16)
          {
            int v76 = *v16;
            if ((unint64_t)(v16 + 1) < v144) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            if (v6 == 255)
            {
              unsigned int v77 = DITHERRGBA32(v75, v76);
              if (!v8) {
                goto LABEL_106;
              }
            }
            else
            {
              unsigned int v77 = DITHERRGBA32M(v75, v76, v6);
              if (!v8) {
                goto LABEL_106;
              }
            }
LABEL_101:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) >= 8u)
              {
                int v82 = PDAplusDAM((unsigned __int16)v77, SHIBYTE(v77), (unsigned __int16)*v7, *v8, HIBYTE(v77) ^ 0xFF);
                *int v7 = v82;
                *__n128 v8 = HIBYTE(v82);
              }
            }
            else
            {
              *int v7 = v77;
              *__n128 v8 = HIBYTE(v77);
            }
          }
          else
          {
            if (v6 == 255)
            {
              int v16 = 0;
              unsigned int v77 = (v61 >> 17) & 0x7C00 | (v61 >> 14) & 0x3E0 | ((unsigned __int16)v61 >> 11) | 0xFF000000;
              if (!v8) {
                goto LABEL_106;
              }
              goto LABEL_101;
            }
            int v16 = 0;
            v19.i16[0] = BYTE1(v61);
            v19.i16[1] = v61 >> 8 >> 16;
            v19.i32[1] = v61 & 0xFF0000 | 0xFF;
            *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v78 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
            int v79 = (unsigned __int16)v19.i16[0] >> 11;
            uint32x4_t v80 = vshlq_u32(v78, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v81 = (int8x16_t)vshlq_u32(v78, (uint32x4_t)xmmword_1850CDA00);
            v81.i32[0] = v80.i32[0];
            v81.i32[3] = v80.i32[3];
            int32x4_t v19 = (int32x4_t)vandq_s8(v81, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
            unsigned int v77 = v19.i32[0] | v79 | v19.i32[1];
            if (v8) {
              goto LABEL_101;
            }
LABEL_106:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) < 8u) {
                goto LABEL_110;
              }
              LOWORD(v77) = PDplusDM(v77, (unsigned __int16)*v7, ~v77 >> 24);
            }
            *int v7 = v77;
          }
LABEL_110:
          v55 += 2;
          ++v7;
          v8 += v147;
          if (!--v56) {
            goto LABEL_111;
          }
          continue;
        }
      }
      if (a5 >= 1)
      {
        uint64_t v28 = (uint64_t *)v123;
        uint64_t v29 = v130;
        while (1)
        {
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30) {
            uint64_t v33 = (unsigned __int8 *)(v27 + v30);
          }
          else {
            uint64_t v33 = v17;
          }
          if (v33 < v13) {
            uint64_t v33 = v13;
          }
          unsigned int v34 = (*v33 << 24) | (v33[1] << 16) | (v33[2] << 8);
          char v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0) {
            break;
          }
          if (v24)
          {
            unint64_t v43 = (unsigned __int8 *)(v32 + v145);
            if ((unint64_t)v17 < v32 + v145) {
              unint64_t v43 = v17;
            }
            if (v43 < v13) {
              unint64_t v43 = v13;
            }
            unsigned int v44 = BLEND8_21385[v24];
            unsigned int v45 = v34 - ((v44 & v34) >> v24);
            unsigned int v46 = (((*v43 << 24) | (v43[1] << 16) | (v43[2] << 8)) & v44) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          unsigned int v48 = v34 | 0xFF;
          if (v16)
          {
            int v49 = *v16;
            if ((unint64_t)(v16 + 1) < v144) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            if (v6 == 255) {
              int v50 = DITHERRGBA32(v48, v49);
            }
            else {
              int v50 = DITHERRGBA32M(v48, v49, v6);
            }
          }
          else
          {
            int v16 = 0;
            if (v6 == 255)
            {
              int v50 = (v34 >> 17) & 0x7C00 | (v34 >> 14) & 0x3E0 | ((unsigned __int16)v34 >> 11) | 0xFF000000;
            }
            else
            {
              v19.i16[0] = BYTE1(v34);
              v19.i16[1] = v34 >> 8 >> 16;
              v19.i32[1] = v34 & 0xFF0000 | 0xFF;
              *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v51 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
              int v52 = (unsigned __int16)v19.i16[0] >> 11;
              uint32x4_t v53 = vshlq_u32(v51, (uint32x4_t)xmmword_1850CD9F0);
              int8x16_t v54 = (int8x16_t)vshlq_u32(v51, (uint32x4_t)xmmword_1850CDA00);
              v54.i32[0] = v53.i32[0];
              v54.i32[3] = v53.i32[3];
              int32x4_t v19 = (int32x4_t)vandq_s8(v54, (int8x16_t)xmmword_1850CDA10);
              *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
              int v50 = v19.i32[0] | v52 | v19.i32[1];
            }
          }
          *int v7 = v50;
          if (v8) {
            *__n128 v8 = HIBYTE(v50);
          }
          v28 += 2;
          ++v7;
          v8 += v147;
          if (!--v29) {
            goto LABEL_111;
          }
        }
        unsigned int v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36) {
          unsigned int v36 = v17;
        }
        if (v36 < v13) {
          unsigned int v36 = v13;
        }
        int v37 = (*v36 << 24) | (v36[1] << 16) | (v36[2] << 8);
        if (v24)
        {
          uint64_t v38 = (unsigned __int8 *)(v32 + v145);
          if (v17 >= v38) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v17;
          }
          if (v39 < v13) {
            unsigned int v39 = v13;
          }
          int v40 = (*v39 << 24) | (v39[1] << 16) | (v39[2] << 8);
          uint64_t v41 = &v38[v31 >> 4];
          if (v17 < v41) {
            uint64_t v41 = v17;
          }
          if (v41 < v13) {
            uint64_t v41 = v13;
          }
          unsigned int v42 = BLEND8_21385[v24];
          unsigned int v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          int v37 = v37 - ((v42 & v37) >> v24) + ((((*v41 << 24) | (v41[1] << 16) | (v41[2] << 8)) & v42) >> v24);
        }
        int v47 = BLEND8_21385[*v28 & 0xF];
        unsigned int v45 = v34 - ((v47 & v34) >> v35);
        unsigned int v46 = (v47 & v37) >> v35;
LABEL_44:
        unsigned int v34 = v45 + v46;
        goto LABEL_45;
      }
LABEL_111:
      uint64_t v10 = v135;
      v7 += v136;
      v8 += v138;
      LOBYTE(v11) = v134;
      uint64_t v12 = v139 + v133;
      a6 = v141 - 1;
      uint64_t result = v132;
      if (v141 == 1) {
        return result;
      }
    }
    int v24 = 0;
    uint64_t v145 = 0;
    if (!result) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v25 = result + 16 * v140;
    unint64_t v144 = v25 + 16;
    int v16 = (unsigned __int8 *)(v25 + v129);
    uint64_t v26 = (v140 + 1) & 0xF;
    if (v140 + 1 <= 0) {
      uint64_t v26 = -(-(v140 + 1) & 0xF);
    }
    uint64_t v140 = v26;
    goto LABEL_13;
  }
  unint64_t v83 = 0;
  uint32x4_t v84 = 0;
  int32x2_t v85 = vdup_n_s32(v6);
  int v86 = v14 - 3;
  int v143 = (uint64_t *)(v9 + 16 * a3);
  v87.i64[1] = 0x3E007000000;
  do
  {
    if (result)
    {
      uint64_t v88 = result + 16 * v140;
      unint64_t v83 = v88 + 16;
      uint32x4_t v84 = (unsigned __int8 *)(v88 + v129);
      uint64_t v89 = (v140 + 1) & 0xF;
      if (v140 + 1 <= 0) {
        uint64_t v89 = -(-(v140 + 1) & 0xF);
      }
      uint64_t v140 = v89;
    }
    uint64_t v90 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
    int v142 = a6;
    if (v137 != 1)
    {
      uint64_t v91 = v12;
      int v107 = v143;
      uint64_t v108 = v130;
      if (a5 < 1) {
        goto LABEL_167;
      }
      while (1)
      {
        uint64_t v109 = *v107;
        v107 += 2;
        uint64_t v110 = (unsigned __int8 *)(v90 + v109);
        if ((unint64_t)v86 < v90 + v109) {
          uint64_t v110 = v86;
        }
        if ((unint64_t)v110 < *(void *)(a1 + 32)) {
          uint64_t v110 = *(unsigned __int8 **)(a1 + 32);
        }
        int v111 = *v110;
        int v112 = v110[1];
        unsigned int v113 = v110[2];
        unsigned int v114 = (v111 << 24) | (v112 << 16) | (v113 << 8);
        unsigned int v115 = v114 | 0xFF;
        if (v84)
        {
          int v116 = *v84;
          if ((unint64_t)(v84 + 1) < v83) {
            ++v84;
          }
          else {
            v84 -= 15;
          }
          if (v6 == 255)
          {
            unsigned int v117 = DITHERRGBA32(v115, v116);
            if (v8) {
              goto LABEL_157;
            }
          }
          else
          {
            unsigned int v117 = DITHERRGBA32M(v115, v116, v6);
            if (v8) {
              goto LABEL_157;
            }
          }
        }
        else if (v6 == 255)
        {
          uint32x4_t v84 = 0;
          unsigned int v117 = (4 * v112) & 0x3E0 | (v111 >> 3 << 10) | (v113 >> 3) | 0xFF000000;
          if (v8)
          {
LABEL_157:
            if (HIBYTE(v117) < 0xF8u)
            {
              if (HIBYTE(v117) >= 8u)
              {
                int v122 = PDAplusDAM((unsigned __int16)v117, SHIBYTE(v117), (unsigned __int16)*v7, *v8, HIBYTE(v117) ^ 0xFF);
                *int v7 = v122;
                *__n128 v8 = HIBYTE(v122);
              }
            }
            else
            {
              *int v7 = v117;
              *__n128 v8 = HIBYTE(v117);
            }
            goto LABEL_166;
          }
        }
        else
        {
          uint32x4_t v84 = 0;
          v87.i16[0] = v113;
          v87.i16[1] = v114 >> 8 >> 16;
          v87.i32[1] = (v112 << 16) & 0xFF0000 | (v113 << 8) & 0xFF0000 | 0xFF;
          *(int32x2_t *)v87.i8 = vmul_s32(*(int32x2_t *)v87.i8, v85);
          *(int32x2_t *)v87.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v87.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v87.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v118 = (uint32x4_t)vzip1q_s32(v87, vdupq_lane_s32(*(int32x2_t *)v87.i8, 1));
          int v119 = (unsigned __int16)v87.i16[0] >> 11;
          uint32x4_t v120 = vshlq_u32(v118, (uint32x4_t)xmmword_1850CD9F0);
          int8x16_t v121 = (int8x16_t)vshlq_u32(v118, (uint32x4_t)xmmword_1850CDA00);
          v121.i32[0] = v120.i32[0];
          v121.i32[3] = v120.i32[3];
          int32x4_t v87 = (int32x4_t)vandq_s8(v121, (int8x16_t)xmmword_1850CDA10);
          *(int8x8_t *)v87.i8 = vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
          unsigned int v117 = v87.i32[0] | v119 | v87.i32[1];
          if (v8) {
            goto LABEL_157;
          }
        }
        if (HIBYTE(v117) >= 0xF8u) {
          goto LABEL_165;
        }
        if (HIBYTE(v117) >= 8u) {
          break;
        }
LABEL_166:
        ++v7;
        v8 += v147;
        if (!--v108) {
          goto LABEL_167;
        }
      }
      LOWORD(v117) = PDplusDM(v117, (unsigned __int16)*v7, ~v117 >> 24);
LABEL_165:
      *int v7 = v117;
      goto LABEL_166;
    }
    uint64_t v91 = v12;
    if (a5 >= 1)
    {
      int32x4_t v92 = v143;
      uint64_t v93 = v130;
      do
      {
        uint64_t v94 = *v92;
        v92 += 2;
        uint64_t v95 = (unsigned __int8 *)(v90 + v94);
        if ((unint64_t)v86 < v90 + v94) {
          uint64_t v95 = v86;
        }
        if ((unint64_t)v95 < *(void *)(a1 + 32)) {
          uint64_t v95 = *(unsigned __int8 **)(a1 + 32);
        }
        int v96 = *v95;
        int v97 = v95[1];
        unsigned int v98 = v95[2];
        unsigned int v99 = (v96 << 24) | (v97 << 16) | (v98 << 8);
        unsigned int v100 = v99 | 0xFF;
        if (v84)
        {
          int v101 = *v84;
          if ((unint64_t)(v84 + 1) < v83) {
            ++v84;
          }
          else {
            v84 -= 15;
          }
          if (v6 == 255) {
            int v102 = DITHERRGBA32(v100, v101);
          }
          else {
            int v102 = DITHERRGBA32M(v100, v101, v6);
          }
        }
        else
        {
          uint32x4_t v84 = 0;
          if (v6 == 255)
          {
            int v102 = (4 * v97) & 0x3E0 | (v96 >> 3 << 10) | (v98 >> 3) | 0xFF000000;
          }
          else
          {
            v87.i16[0] = v98;
            v87.i16[1] = v99 >> 8 >> 16;
            v87.i32[1] = (v97 << 16) & 0xFF0000 | (v98 << 8) & 0xFF0000 | 0xFF;
            *(int32x2_t *)v87.i8 = vmul_s32(*(int32x2_t *)v87.i8, v85);
            *(int32x2_t *)v87.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v87.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v87.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v103 = (uint32x4_t)vzip1q_s32(v87, vdupq_lane_s32(*(int32x2_t *)v87.i8, 1));
            int v104 = (unsigned __int16)v87.i16[0] >> 11;
            uint32x4_t v105 = vshlq_u32(v103, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v106 = (int8x16_t)vshlq_u32(v103, (uint32x4_t)xmmword_1850CDA00);
            v106.i32[0] = v105.i32[0];
            v106.i32[3] = v105.i32[3];
            int32x4_t v87 = (int32x4_t)vandq_s8(v106, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v87.i8 = vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            int v102 = v87.i32[0] | v104 | v87.i32[1];
          }
        }
        *int v7 = v102;
        if (v8) {
          *__n128 v8 = HIBYTE(v102);
        }
        ++v7;
        v8 += v147;
        --v93;
      }
      while (v93);
    }
LABEL_167:
    uint64_t v10 = v135;
    v7 += v136;
    v8 += v138;
    LOBYTE(v11) = v134;
    uint64_t v12 = v91 + v133;
    a6 = v142 - 1;
    uint64_t result = v132;
  }
  while (v142 != 1);
  return result;
}

uint64_t rgb555_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  int v7 = (_WORD *)*((void *)a2 + 2);
  __n128 v8 = (char *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v126 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v126 = 0;
  }
  int v125 = *a2;
  uint64_t v124 = *((void *)a2 + 3) - a5;
  uint64_t v135 = v8 != 0;
  uint64_t v10 = *((void *)a2 + 19);
  uint64_t v9 = *((void *)a2 + 20);
  uint64_t v11 = *((void *)a2 + 11);
  uint64_t v121 = *((void *)a2 + 13);
  uint64_t v12 = *((void *)a2 + 9) + v121 * a4;
  uint64_t v117 = *((void *)a2 + 6);
  uint64_t v128 = *((void *)a2 + 7);
  uint64_t v13 = *(unsigned __int8 **)(a1 + 32);
  unsigned int v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t result = *(void *)(a1 + 168);
  uint64_t v118 = a5;
  char v122 = v11;
  uint64_t v123 = v10;
  uint64_t v120 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 176))
  {
    unint64_t v132 = 0;
    int v16 = 0;
    uint64_t v116 = *((void *)a2 + 15);
    uint64_t v115 = *((void *)a2 + 17);
    uint64_t v114 = ~(-1 << v11);
    uint64_t v112 = -v10;
    char v113 = v11 - 4;
    uint64_t v17 = v14 - 4;
    int32x2_t v18 = vdup_n_s32(v6);
    uint64_t v111 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x7000000F8000000;
    while ((((v115 - v12) | (v12 - v116)) & 0x8000000000000000) == 0)
    {
      uint64_t v20 = ((v12 & (unint64_t)v114) >> v113) & 0xF;
      char v21 = weights_21383[v20];
      BOOL v22 = (unint64_t)(v20 - 7) >= 9;
      uint64_t v23 = v112;
      if (!v22) {
        uint64_t v23 = v10;
      }
      uint64_t v133 = v23;
      int v24 = v21 & 0xF;
      if (result) {
        goto LABEL_10;
      }
LABEL_13:
      uint64_t v27 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
      int v129 = a6;
      uint64_t v127 = v12;
      if (v125 != 1)
      {
        if (a5 < 1) {
          goto LABEL_112;
        }
        uint32x4_t v53 = (uint64_t *)v111;
        uint64_t v54 = v118;
        while (2)
        {
          uint64_t v55 = *(v53 - 1);
          uint64_t v56 = *v53;
          uint64_t v57 = v27 + v55;
          if ((unint64_t)v17 >= v27 + v55) {
            uint64_t v58 = (unsigned __int8 *)(v27 + v55);
          }
          else {
            uint64_t v58 = v17;
          }
          if (v58 < v13) {
            uint64_t v58 = v13;
          }
          unsigned int v59 = *v58;
          char v60 = v56 & 0xF;
          if ((v56 & 0xF) != 0)
          {
            unsigned int v61 = (unsigned __int8 *)(v57 + (v56 >> 4));
            if (v17 < v61) {
              unsigned int v61 = v17;
            }
            if (v61 < v13) {
              unsigned int v61 = v13;
            }
            unsigned int v62 = *v61;
            if (v24)
            {
              int v63 = (unsigned __int8 *)(v57 + v133);
              if (v17 >= v63) {
                int v64 = v63;
              }
              else {
                int v64 = v17;
              }
              if (v64 < v13) {
                int v64 = v13;
              }
              unsigned int v65 = *v64;
              uint64_t v66 = &v63[v56 >> 4];
              if (v17 < v66) {
                uint64_t v66 = v17;
              }
              if (v66 < v13) {
                uint64_t v66 = v13;
              }
              int v67 = BLEND8_21385[v24];
              unsigned int v59 = v59 - ((v67 & v59) >> v24) + ((v67 & v65) >> v24);
              unsigned int v62 = v62 - ((v67 & v62) >> v24) + ((v67 & *v66) >> v24);
            }
            int v68 = BLEND8_21385[*v53 & 0xF];
            v59 -= (v68 & v59) >> v60;
            unsigned int v69 = (v68 & v62) >> v60;
            goto LABEL_89;
          }
          if (v24)
          {
            unsigned int v70 = (unsigned __int8 *)(v57 + v133);
            if ((unint64_t)v17 < v57 + v133) {
              unsigned int v70 = v17;
            }
            if (v70 < v13) {
              unsigned int v70 = v13;
            }
            int v71 = BLEND8_21385[v24];
            v59 -= (v71 & v59) >> v24;
            unsigned int v69 = (v71 & *v70) >> v24;
LABEL_89:
            LOBYTE(v59) = v59 + v69;
          }
          if (v16)
          {
            int v72 = *v16;
            if ((unint64_t)(v16 + 1) < v132) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            unsigned int v73 = (16843008 * v59) | 0xFF;
            if (v6 == 255)
            {
              unsigned int v74 = DITHERRGBA32(v73, v72);
              if (v8) {
                goto LABEL_96;
              }
            }
            else
            {
              unsigned int v74 = DITHERRGBA32M(v73, v72, v6);
              if (v8)
              {
LABEL_96:
                if (HIBYTE(v74) < 0xF8u)
                {
                  if (HIBYTE(v74) >= 8u)
                  {
                    int v78 = PDAplusDAM((unsigned __int16)v74, SHIBYTE(v74), (unsigned __int16)*v7, *v8, HIBYTE(v74) ^ 0xFF);
                    *int v7 = v78;
                    *__n128 v8 = HIBYTE(v78);
                  }
                }
                else
                {
                  *int v7 = v74;
                  *__n128 v8 = HIBYTE(v74);
                }
                goto LABEL_108;
              }
            }
          }
          else if (v6 == 255)
          {
            int v16 = 0;
            unsigned int v74 = (v59 >> 3) & 0xFFFF801F | (32 * (v59 >> 3)) & 0x83FF | (v59 >> 3 << 10) | 0xFF000000;
            if (v8) {
              goto LABEL_96;
            }
          }
          else
          {
            int v16 = 0;
            *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v59 << 16), (int8x8_t)(v59 | 0xFF00000000)), v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v75 = (uint32x4_t)vzip1q_s32(v19, v19);
            v76.i64[0] = vshlq_u32(v75, (uint32x4_t)xmmword_1850CDA20).u64[0];
            v76.i64[1] = vshlq_u32(v75, (uint32x4_t)xmmword_1850CDA30).i64[1];
            int8x16_t v77 = vandq_s8(v76, (int8x16_t)xmmword_1850CDA40);
            *(int8x8_t *)v77.i8 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
            unsigned int v74 = v77.i32[0] | v77.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            if (v8) {
              goto LABEL_96;
            }
          }
          if (HIBYTE(v74) < 0xF8u)
          {
            if (HIBYTE(v74) >= 8u) {
              *int v7 = PDplusDM(v74, (unsigned __int16)*v7, ~v74 >> 24);
            }
          }
          else
          {
            *int v7 = v74;
          }
LABEL_108:
          v53 += 2;
          ++v7;
          v8 += v135;
          if (!--v54) {
            goto LABEL_112;
          }
          continue;
        }
      }
      if (a5 >= 1)
      {
        uint64_t v28 = (uint64_t *)v111;
        uint64_t v29 = v118;
        while (1)
        {
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30) {
            uint64_t v33 = (unsigned __int8 *)(v27 + v30);
          }
          else {
            uint64_t v33 = v17;
          }
          if (v33 < v13) {
            uint64_t v33 = v13;
          }
          unsigned int v34 = *v33;
          char v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0) {
            break;
          }
          if (v24)
          {
            unsigned int v45 = (unsigned __int8 *)(v32 + v133);
            if ((unint64_t)v17 < v32 + v133) {
              unsigned int v45 = v17;
            }
            if (v45 < v13) {
              unsigned int v45 = v13;
            }
            int v46 = BLEND8_21385[v24];
            v34 -= (v46 & v34) >> v24;
            unsigned int v44 = (v46 & *v45) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          if (v16)
          {
            int v47 = *v16;
            if ((unint64_t)(v16 + 1) < v132) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            unsigned int v48 = (16843008 * v34) | 0xFF;
            if (v6 == 255) {
              int v49 = DITHERRGBA32(v48, v47);
            }
            else {
              int v49 = DITHERRGBA32M(v48, v47, v6);
            }
          }
          else
          {
            int v16 = 0;
            if (v6 == 255)
            {
              int v49 = (v34 >> 3) & 0xFFFF801F | (32 * (v34 >> 3)) & 0x83FF | (v34 >> 3 << 10) | 0xFF000000;
            }
            else
            {
              *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v34 << 16), (int8x8_t)(v34 | 0xFF00000000)), v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v50 = (uint32x4_t)vzip1q_s32(v19, v19);
              v51.i64[0] = vshlq_u32(v50, (uint32x4_t)xmmword_1850CDA20).u64[0];
              v51.i64[1] = vshlq_u32(v50, (uint32x4_t)xmmword_1850CDA30).i64[1];
              int8x16_t v52 = vandq_s8(v51, (int8x16_t)xmmword_1850CDA40);
              *(int8x8_t *)v52.i8 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
              int v49 = v52.i32[0] | v52.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            }
          }
          *int v7 = v49;
          if (v8) {
            *__n128 v8 = HIBYTE(v49);
          }
          v28 += 2;
          ++v7;
          v8 += v135;
          if (!--v29) {
            goto LABEL_112;
          }
        }
        unsigned int v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36) {
          unsigned int v36 = v17;
        }
        if (v36 < v13) {
          unsigned int v36 = v13;
        }
        unsigned int v37 = *v36;
        if (v24)
        {
          uint64_t v38 = (unsigned __int8 *)(v32 + v133);
          if (v17 >= v38) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v17;
          }
          if (v39 < v13) {
            unsigned int v39 = v13;
          }
          unsigned int v40 = *v39;
          uint64_t v41 = &v38[v31 >> 4];
          if (v17 < v41) {
            uint64_t v41 = v17;
          }
          if (v41 < v13) {
            uint64_t v41 = v13;
          }
          int v42 = BLEND8_21385[v24];
          unsigned int v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          unsigned int v37 = v37 - ((v42 & v37) >> v24) + ((v42 & *v41) >> v24);
        }
        int v43 = BLEND8_21385[*v28 & 0xF];
        v34 -= (v43 & v34) >> v35;
        unsigned int v44 = (v43 & v37) >> v35;
LABEL_44:
        LOBYTE(v34) = v34 + v44;
        goto LABEL_45;
      }
LABEL_112:
      uint64_t v10 = v123;
      v7 += v124;
      v8 += v126;
      LOBYTE(v11) = v122;
      uint64_t v12 = v127 + v121;
      a6 = v129 - 1;
      uint64_t result = v120;
      if (v129 == 1) {
        return result;
      }
    }
    int v24 = 0;
    uint64_t v133 = 0;
    if (!result) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v25 = result + 16 * v128;
    unint64_t v132 = v25 + 16;
    int v16 = (unsigned __int8 *)(v25 + v117);
    uint64_t v26 = (v128 + 1) & 0xF;
    if (v128 + 1 <= 0) {
      uint64_t v26 = -(-(v128 + 1) & 0xF);
    }
    uint64_t v128 = v26;
    goto LABEL_13;
  }
  unint64_t v79 = 0;
  uint32x4_t v80 = 0;
  int32x2_t v81 = vdup_n_s32(v6);
  int v82 = v14 - 4;
  uint64_t v131 = (uint64_t *)(v9 + 16 * a3);
  v83.i64[1] = 0x7000000F8000000;
  do
  {
    if (result)
    {
      uint64_t v84 = result + 16 * v128;
      unint64_t v79 = v84 + 16;
      uint32x4_t v80 = (unsigned __int8 *)(v84 + v117);
      uint64_t v85 = (v128 + 1) & 0xF;
      if (v128 + 1 <= 0) {
        uint64_t v85 = -(-(v128 + 1) & 0xF);
      }
      uint64_t v128 = v85;
    }
    uint64_t v86 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
    int v130 = a6;
    if (v125 != 1)
    {
      uint64_t v87 = v12;
      unsigned int v99 = v131;
      uint64_t v100 = v118;
      if (a5 < 1) {
        goto LABEL_169;
      }
      while (1)
      {
        uint64_t v101 = *v99;
        v99 += 2;
        int v102 = (unsigned __int8 *)(v86 + v101);
        if ((unint64_t)v82 < v86 + v101) {
          int v102 = v82;
        }
        if ((unint64_t)v102 < *(void *)(a1 + 32)) {
          int v102 = *(unsigned __int8 **)(a1 + 32);
        }
        unsigned int v103 = *v102;
        if (v80)
        {
          int v104 = *v80;
          if ((unint64_t)(v80 + 1) < v79) {
            ++v80;
          }
          else {
            v80 -= 15;
          }
          unsigned int v105 = (16843008 * v103) | 0xFF;
          if (v6 == 255)
          {
            unsigned int v106 = DITHERRGBA32(v105, v104);
            if (v8) {
              goto LABEL_153;
            }
          }
          else
          {
            unsigned int v106 = DITHERRGBA32M(v105, v104, v6);
            if (v8) {
              goto LABEL_153;
            }
          }
        }
        else if (v6 == 255)
        {
          uint32x4_t v80 = 0;
          unsigned int v106 = (v103 >> 3) & 0xFFFF801F | (32 * (v103 >> 3)) & 0x83FF | (v103 >> 3 << 10) | 0xFF000000;
          if (v8)
          {
LABEL_153:
            if (HIBYTE(v106) < 0xF8u)
            {
              if (HIBYTE(v106) >= 8u)
              {
                int v110 = PDAplusDAM((unsigned __int16)v106, SHIBYTE(v106), (unsigned __int16)*v7, *v8, HIBYTE(v106) ^ 0xFF);
                *int v7 = v110;
                *__n128 v8 = HIBYTE(v110);
              }
            }
            else
            {
              *int v7 = v106;
              *__n128 v8 = HIBYTE(v106);
            }
            goto LABEL_163;
          }
        }
        else
        {
          uint32x4_t v80 = 0;
          *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v103 << 16), (int8x8_t)(v103 | 0xFF00000000)), v81);
          *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v107 = (uint32x4_t)vzip1q_s32(v83, v83);
          v108.i64[0] = vshlq_u32(v107, (uint32x4_t)xmmword_1850CDA20).u64[0];
          v108.i64[1] = vshlq_u32(v107, (uint32x4_t)xmmword_1850CDA30).i64[1];
          int8x16_t v109 = vandq_s8(v108, (int8x16_t)xmmword_1850CDA40);
          *(int8x8_t *)v109.i8 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
          unsigned int v106 = v109.i32[0] | v109.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          if (v8) {
            goto LABEL_153;
          }
        }
        if (HIBYTE(v106) >= 0xF8u) {
          goto LABEL_160;
        }
        if (HIBYTE(v106) >= 8u) {
          break;
        }
LABEL_163:
        ++v7;
        v8 += v135;
        if (!--v100) {
          goto LABEL_169;
        }
      }
      LOWORD(v106) = PDplusDM(v106, (unsigned __int16)*v7, ~v106 >> 24);
LABEL_160:
      *int v7 = v106;
      goto LABEL_163;
    }
    uint64_t v87 = v12;
    if (a5 >= 1)
    {
      uint64_t v88 = v131;
      uint64_t v89 = v118;
      do
      {
        uint64_t v90 = *v88;
        v88 += 2;
        uint64_t v91 = (unsigned __int8 *)(v86 + v90);
        if ((unint64_t)v82 < v86 + v90) {
          uint64_t v91 = v82;
        }
        if ((unint64_t)v91 < *(void *)(a1 + 32)) {
          uint64_t v91 = *(unsigned __int8 **)(a1 + 32);
        }
        unsigned int v92 = *v91;
        if (v80)
        {
          int v93 = *v80;
          if ((unint64_t)(v80 + 1) < v79) {
            ++v80;
          }
          else {
            v80 -= 15;
          }
          unsigned int v94 = (16843008 * v92) | 0xFF;
          if (v6 == 255) {
            int v95 = DITHERRGBA32(v94, v93);
          }
          else {
            int v95 = DITHERRGBA32M(v94, v93, v6);
          }
        }
        else
        {
          uint32x4_t v80 = 0;
          if (v6 == 255)
          {
            int v95 = (v92 >> 3) & 0xFFFF801F | (32 * (v92 >> 3)) & 0x83FF | (v92 >> 3 << 10) | 0xFF000000;
          }
          else
          {
            *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v92 << 16), (int8x8_t)(v92 | 0xFF00000000)), v81);
            *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v96 = (uint32x4_t)vzip1q_s32(v83, v83);
            v97.i64[0] = vshlq_u32(v96, (uint32x4_t)xmmword_1850CDA20).u64[0];
            v97.i64[1] = vshlq_u32(v96, (uint32x4_t)xmmword_1850CDA30).i64[1];
            int8x16_t v98 = vandq_s8(v97, (int8x16_t)xmmword_1850CDA40);
            *(int8x8_t *)v98.i8 = vorr_s8(*(int8x8_t *)v98.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
            int v95 = v98.i32[0] | v98.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          }
        }
        *int v7 = v95;
        if (v8) {
          *__n128 v8 = HIBYTE(v95);
        }
        ++v7;
        v8 += v135;
        --v89;
      }
      while (v89);
    }
LABEL_169:
    uint64_t v10 = v123;
    v7 += v124;
    v8 += v126;
    LOBYTE(v11) = v122;
    uint64_t v12 = v87 + v121;
    a6 = v130 - 1;
    uint64_t result = v120;
  }
  while (v130 != 1);
  return result;
}

uint64_t rgb555_colorlookup(int a1, unsigned __int16 *a2, unsigned __int8 *a3)
{
  if (a1 == 3)
  {
    unint64_t v4 = *(void *)a2;
  }
  else
  {
    if (a3) {
      unint64_t v5 = (unint64_t)*a3 << 24;
    }
    else {
      unint64_t v5 = 4278190080;
    }
    unint64_t v4 = v5 | *a2;
  }
  pthread_mutex_lock(&rgb555_cacheColorLock);
  unsigned int v6 = (char *)rgb555_cacheColor;
  if (rgb555_cacheColor && *(void *)(rgb555_cacheColor + 16) == v4)
  {
    int v7 = (char *)rgb555_cacheColor;
  }
  else
  {
    int v7 = 0;
    while (1)
    {
      if (!v6) {
        goto LABEL_15;
      }
      __n128 v8 = v7;
      int v7 = v6;
      if (*((void *)v6 + 2) == v4) {
        break;
      }
      unsigned int v6 = *(char **)v6;
      if (!*(void *)v7)
      {
        if (rgb555_cacheColorCount > 6)
        {
          *(void *)__n128 v8 = 0;
        }
        else
        {
LABEL_15:
          uint64_t v9 = (char *)rgb555_cacheColorBase;
          if (rgb555_cacheColorBase)
          {
            unsigned int v10 = rgb555_cacheColorCount;
          }
          else
          {
            uint64_t v9 = (char *)malloc_type_calloc(1uLL, 0x1CA8uLL, 0x1020040A1C41DBCuLL);
            unsigned int v10 = 0;
            rgb555_cacheColorBase = (uint64_t)v9;
          }
          int v7 = &v9[24 * v10];
          *((void *)v7 + 1) = &v9[1024 * (unint64_t)v10 + 168];
          rgb555_cacheColorCount = v10 + 1;
        }
        *(void *)int v7 = rgb555_cacheColor;
        rgb555_cacheColor = (uint64_t)v7;
        *((void *)v7 + 2) = v4;
        uint64_t v11 = *((void *)v7 + 1);
        if (a1 == 3)
        {
          uint64_t v12 = 0;
          int v13 = 244;
          int v14 = 188;
          do
          {
            unsigned int v15 = pixel_dither_noise[v12 + 1];
            *(_DWORD *)(v11 + 4 * v12) = (4 * (v14 + HIDWORD(v4))) & 0x7C00 | ((v14 + WORD1(v4)) >> 3) & 0x3E0 | ((v14 + v4) >> 8) & 0x1F | ((((v13 + WORD1(v4)) >> 8) & 0x1F) << 21) & 0x83E0FFFF | ((((v13 + HIDWORD(v4)) >> 8) & 0x1F) << 26) | ((((v13 + v4) >> 8) & 0x1F) << 16);
            *(_WORD *)(v11 + 2 * v12 + 512) = ((v14 + HIWORD(v4)) >> 5) & 0xF8 | ((v14 + HIWORD(v4)) >> 10) & 7 | ((v13 + HIWORD(v4)) >> 2) & 0x700 | ((((v13 + HIWORD(v4)) >> 8) & 0x1F) << 11);
            int v13 = v15;
            int v14 = v15 >> 8;
            ++v12;
          }
          while (v12 != 128);
        }
        else
        {
          uint64_t v16 = 0;
          do
          {
            *(_DWORD *)(v11 + 4 * v16) = PDAM((unsigned __int16)v4, SBYTE3(v4), v16);
            ++v16;
          }
          while (v16 != 256);
        }
        goto LABEL_28;
      }
    }
    if (v8)
    {
      *(void *)__n128 v8 = *(void *)v6;
      *(void *)unsigned int v6 = rgb555_cacheColor;
      rgb555_cacheColor = (uint64_t)v6;
    }
  }
LABEL_28:
  pthread_mutex_unlock(&rgb555_cacheColorLock);
  return *((void *)v7 + 1);
}

uint64_t rgb555_mark_constmask(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v225 = *(_DWORD *)(a1 + 4);
  unint64_t v5 = *(int *)(a1 + 28);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t result = rgb555_colorlookup(4, *(unsigned __int16 **)(a1 + 88), *(unsigned __int8 **)(a1 + 96));
  uint64_t v11 = result;
  uint64_t v12 = *(unsigned int *)(result + 1020);
  uint64_t v14 = *(int *)(a1 + 12);
  uint64_t v13 = *(int *)(a1 + 16);
  int v230 = v4;
  if (v6)
  {
    uint64_t v15 = *(int *)(a1 + 32);
    uint64_t v16 = (char *)(v6 + v14 + (int)v15 * (uint64_t)(int)v13);
    uint64_t v17 = 1;
    if (!v8) {
      return result;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    if (!v8) {
      return result;
    }
  }
  uint64_t v18 = v15 - v225;
  if (v6) {
    v15 -= v225;
  }
  uint64_t v222 = v15;
  unint64_t v19 = v5 >> 1;
  unsigned int v20 = BYTE3(v12);
  char v21 = (__int16 *)(v7 + 2 * (v14 + v19 * v13));
  uint64_t v22 = *(int *)(a1 + 124);
  unint64_t v23 = v8 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v22;
  uint64_t v24 = v22 - v225;
  unint64_t v218 = v19 - v225;
  switch(a2)
  {
    case 0:
      if (v6)
      {
        while (1)
        {
          int v25 = v225;
          do
          {
            unsigned int v26 = *(unsigned __int8 *)v23;
            if (v26 < 0xF8)
            {
              if (v26 < 8) {
                goto LABEL_15;
              }
              uint64_t result = PDAM((unsigned __int16)*v21, *v16, ~(_BYTE)v26);
              *char v21 = result;
              unsigned int v27 = BYTE3(result);
            }
            else
            {
              LOBYTE(v27) = 0;
              *char v21 = 0;
            }
            *uint64_t v16 = v27;
LABEL_15:
            ++v23;
            ++v21;
            v16 += v17;
            --v25;
          }
          while (v25);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          if (!--v230) {
            return result;
          }
        }
      }
LABEL_312:
      int v139 = v225;
      int v140 = v230;
      while (1)
      {
        unsigned int v141 = *(unsigned __int8 *)v23;
        if (v141 > 0xF7) {
          break;
        }
        if (v141 >= 8)
        {
          uint64_t result = PDM((unsigned __int16)*v21, ~(_BYTE)v141);
          goto LABEL_317;
        }
LABEL_318:
        ++v23;
        ++v21;
        if (!--v139)
        {
          v23 += v24;
          v21 += v218;
          --v230;
          if (v140 == 1) {
            return result;
          }
          goto LABEL_312;
        }
      }
      uint64_t result = 0;
LABEL_317:
      *char v21 = result;
      goto LABEL_318;
    case 1:
      unsigned int v28 = v23 & 3;
      if (v6)
      {
        int v29 = v28 + v225;
        if ((v23 & 3) != 0) {
          char v30 = v23 & 0xFC;
        }
        else {
          char v30 = v23;
        }
        if ((v23 & 3) != 0) {
          uint64_t result = (-1 << (8 * v28));
        }
        else {
          uint64_t result = 0xFFFFFFFFLL;
        }
        if ((v23 & 3) != 0) {
          uint64_t v31 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else {
          uint64_t v31 = (unsigned int *)v23;
        }
        if ((v23 & 3) != 0) {
          uint64_t v32 = &v16[-(v23 & 3)];
        }
        else {
          uint64_t v32 = v16;
        }
        if ((v23 & 3) != 0) {
          v21 -= v23 & 3;
        }
        else {
          int v29 = v225;
        }
        if ((((_BYTE)v29 + v30) & 3) != 0)
        {
          int v33 = 4 - (((_BYTE)v29 + v30) & 3);
          v28 += v33;
          unsigned int v34 = 0xFFFFFFFF >> (8 * v33);
          if (v29 >= 4) {
            unsigned int v35 = 0xFFFFFFFF >> (8 * v33);
          }
          else {
            unsigned int v35 = 0;
          }
          if (v29 >= 4) {
            unsigned int v34 = -1;
          }
          uint64_t result = v34 & result;
          int v226 = result;
        }
        else
        {
          int v226 = result;
          unsigned int v35 = 0;
        }
        uint64_t v223 = v24 - v28;
        unint64_t v219 = v218 - v28;
        int v215 = v29 >> 2;
        uint64_t v212 = v18 - v28;
LABEL_384:
        unsigned int v170 = *v31 & v226;
        int v171 = v215;
        unsigned int v172 = v35;
        if (!v170) {
          goto LABEL_406;
        }
LABEL_385:
        if (v170 == -1)
        {
          *char v21 = v12;
          *uint64_t v32 = BYTE3(v12);
          v21[1] = v12;
          v32[1] = BYTE3(v12);
          v21[2] = v12;
          v32[2] = BYTE3(v12);
LABEL_403:
          v21[3] = v12;
          v32[3] = BYTE3(v12);
          goto LABEL_406;
        }
        while (1)
        {
          if (v170 < 0xF8u)
          {
            if (v170 < 8u) {
              goto LABEL_392;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v170), HIBYTE(*(_DWORD *)(v11 + 4 * v170)), (unsigned __int16)*v21, *v32, ~(_BYTE)v170);
            *char v21 = result;
            unsigned int v173 = BYTE3(result);
          }
          else
          {
            *char v21 = v12;
            unsigned int v173 = BYTE3(v12);
          }
          *uint64_t v32 = v173;
LABEL_392:
          if (BYTE1(v170) < 0xF8u)
          {
            if (BYTE1(v170) < 8u) {
              goto LABEL_397;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v170)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v170))), (unsigned __int16)v21[1], v32[1], ~(v170 >> 8));
            v21[1] = result;
            unsigned int v174 = BYTE3(result);
          }
          else
          {
            v21[1] = v12;
            unsigned int v174 = BYTE3(v12);
          }
          v32[1] = v174;
LABEL_397:
          if (BYTE2(v170) < 0xF8u)
          {
            if (BYTE2(v170) < 8u) {
              goto LABEL_402;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v170)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v170))), (unsigned __int16)v21[2], v32[2], ~HIWORD(v170));
            v21[2] = result;
            unsigned int v175 = BYTE3(result);
          }
          else
          {
            v21[2] = v12;
            unsigned int v175 = BYTE3(v12);
          }
          v32[2] = v175;
LABEL_402:
          if (v170 >> 27 == 31) {
            goto LABEL_403;
          }
          if (v170 >> 27)
          {
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v170)), HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v170))), (unsigned __int16)v21[3], v32[3], ~v170 >> 24);
            v21[3] = result;
            v32[3] = BYTE3(result);
          }
LABEL_406:
          while (1)
          {
            int v176 = v171;
            v21 += 4;
            v32 += 4;
            --v171;
            ++v31;
            if (v176 < 2) {
              break;
            }
            unsigned int v170 = *v31;
            if (*v31) {
              goto LABEL_385;
            }
          }
          if (!v172)
          {
            uint64_t v31 = (unsigned int *)((char *)v31 + v223);
            v21 += v219;
            v32 += v212;
            if (!--v230) {
              return result;
            }
            goto LABEL_384;
          }
          unsigned int v172 = 0;
          unsigned int v170 = *v31 & v35;
        }
      }
      int v142 = v28 + v225;
      if ((v23 & 3) != 0) {
        char v143 = v23 & 0xFC;
      }
      else {
        char v143 = v23;
      }
      if ((v23 & 3) != 0) {
        int v144 = -1 << (8 * v28);
      }
      else {
        int v144 = -1;
      }
      if ((v23 & 3) != 0) {
        uint64_t v145 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else {
        uint64_t v145 = (unsigned int *)v23;
      }
      if ((v23 & 3) != 0) {
        uint64_t v146 = (int16x4_t *)&v21[-(v23 & 3)];
      }
      else {
        uint64_t v146 = (int16x4_t *)v21;
      }
      if ((v23 & 3) == 0) {
        int v142 = v225;
      }
      if ((((_BYTE)v142 + v143) & 3) != 0)
      {
        int v147 = 4 - (((_BYTE)v142 + v143) & 3);
        v28 += v147;
        unsigned int v148 = 0xFFFFFFFF >> (8 * v147);
        if (v142 >= 4) {
          unsigned int v149 = 0xFFFFFFFF >> (8 * v147);
        }
        else {
          unsigned int v149 = 0;
        }
        if (v142 >= 4) {
          unsigned int v148 = -1;
        }
        int v228 = v148 & v144;
      }
      else
      {
        int v228 = v144;
        unsigned int v149 = 0;
      }
      uint64_t v224 = v24 - v28;
      int v216 = v142 >> 2;
      int16x4_t v193 = vdup_n_s16(v12);
      unint64_t v194 = v218 - v28;
      do
      {
        unsigned int v195 = *v145 & v228;
        int v196 = v216;
        unsigned int v197 = v149;
        if (!v195) {
          goto LABEL_455;
        }
LABEL_437:
        if (v195 == -1)
        {
          *uint64_t v146 = v193;
          goto LABEL_455;
        }
        while (1)
        {
          __int16 v198 = v12;
          if (v195 <= 0xF7u)
          {
            if (v195 < 8u) {
              goto LABEL_443;
            }
            __int16 v198 = PDplusDM(*(_WORD *)(v11 + 4 * v195), v146->u16[0], ~(_BYTE)v195);
          }
          v146->i16[0] = v198;
LABEL_443:
          unsigned __int16 v199 = v12;
          if (BYTE1(v195) <= 0xF7u)
          {
            if (BYTE1(v195) < 8u) {
              goto LABEL_447;
            }
            unsigned __int16 v199 = PDplusDM(*(_WORD *)(v11 + 4 * BYTE1(v195)), v146->u16[1], ~(v195 >> 8));
          }
          v146->i16[1] = v199;
LABEL_447:
          uint64_t result = v12;
          if (BYTE2(v195) <= 0xF7u)
          {
            if (BYTE2(v195) < 8u) {
              goto LABEL_451;
            }
            uint64_t result = PDplusDM(*(_WORD *)(v11 + 4 * BYTE2(v195)), v146->u16[2], ~HIWORD(v195));
          }
          v146->i16[2] = result;
LABEL_451:
          if (v195 >> 27 == 31)
          {
            v146->i16[3] = v12;
          }
          else if (v195 >> 27)
          {
            uint64_t result = PDplusDM(*(_WORD *)(v11 + 4 * HIBYTE(v195)), v146->u16[3], ~v195 >> 24);
            v146->i16[3] = result;
          }
LABEL_455:
          while (1)
          {
            int v200 = v196;
            ++v146;
            --v196;
            ++v145;
            if (v200 < 2) {
              break;
            }
            unsigned int v195 = *v145;
            if (*v145) {
              goto LABEL_437;
            }
          }
          if (!v197) {
            break;
          }
          unsigned int v197 = 0;
          unsigned int v195 = *v145 & v149;
        }
        uint64_t v145 = (unsigned int *)((char *)v145 + v224);
        uint64_t v146 = (int16x4_t *)((char *)v146 + 2 * v194);
        --v230;
      }
      while (v230);
      return result;
    case 2:
      unsigned int v36 = v23 & 3;
      if (v6)
      {
        int v37 = v36 + v225;
        uint64_t v38 = &v21[-(v23 & 3)];
        unsigned int v39 = &v16[-(v23 & 3)];
        if ((v23 & 3) != 0) {
          char v40 = v23 & 0xFC;
        }
        else {
          char v40 = v23;
        }
        if ((v23 & 3) != 0) {
          uint64_t result = (-1 << (8 * v36));
        }
        else {
          uint64_t result = 0xFFFFFFFFLL;
        }
        if ((v23 & 3) != 0)
        {
          v23 &= 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v16 = v39;
          char v21 = v38;
        }
        else
        {
          int v37 = v225;
        }
        if ((((_BYTE)v37 + v40) & 3) != 0)
        {
          int v41 = 4 - (((_BYTE)v37 + v40) & 3);
          v36 += v41;
          unsigned int v42 = 0xFFFFFFFF >> (8 * v41);
          if (v37 >= 4) {
            unsigned int v43 = 0xFFFFFFFF >> (8 * v41);
          }
          else {
            unsigned int v43 = 0;
          }
          unsigned int v227 = v43;
          if (v37 >= 4) {
            unsigned int v42 = -1;
          }
          uint64_t result = v42 & result;
          int v214 = result;
        }
        else
        {
          int v214 = result;
          unsigned int v227 = 0;
        }
        uint64_t v213 = v24 - v36;
        unint64_t v220 = v218 - v36;
        int v211 = v37 >> 2;
        uint64_t v210 = v18 - v36;
        unsigned int v177 = v227;
        while (1)
        {
          unsigned int v178 = *(_DWORD *)v23 & v214;
          int v179 = v211;
          unsigned int v180 = v177;
          if (!v178) {
            goto LABEL_427;
          }
LABEL_416:
          if (v178 == -1) {
            break;
          }
          while (1)
          {
            if ((v178 & 0xF8) != 0)
            {
              int v189 = HIBYTE(*(_DWORD *)(v11 + 4 * v178));
              uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v178), v189, (unsigned __int16)*v21, *v16, v189 ^ 0xFFu);
              *char v21 = result;
              *uint64_t v16 = BYTE3(result);
            }
            if ((v178 & 0xF800) != 0)
            {
              int v190 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v178)));
              uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v178)), v190, (unsigned __int16)v21[1], v16[1], v190 ^ 0xFFu);
              v21[1] = result;
              v16[1] = BYTE3(result);
            }
            if ((v178 & 0xF80000) != 0)
            {
              int v191 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v178)));
              uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v178)), v191, (unsigned __int16)v21[2], v16[2], v191 ^ 0xFFu);
              v21[2] = result;
              v16[2] = BYTE3(result);
            }
            if (v178 >> 27)
            {
              int v187 = HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v178)));
              unsigned int v184 = (unsigned __int16)v21[3];
              char v185 = v16[3];
              int v186 = (unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v178));
              unsigned int v188 = v187 ^ 0xFF;
              goto LABEL_426;
            }
LABEL_427:
            while (1)
            {
              int v192 = v179;
              v21 += 4;
              v16 += 4;
              --v179;
              v23 += 4;
              if (v192 < 2) {
                break;
              }
              unsigned int v178 = *(_DWORD *)v23;
              if (*(_DWORD *)v23) {
                goto LABEL_416;
              }
            }
            if (!v180) {
              break;
            }
            unsigned int v180 = 0;
            unsigned int v178 = *(_DWORD *)v23 & v177;
          }
          v23 += v213;
          v21 += v220;
          v16 += v210;
          if (!--v230) {
            return result;
          }
        }
        uint64_t v181 = PDAplusDAM((unsigned __int16)v12, SBYTE3(v12), (unsigned __int16)*v21, *v16, ~BYTE3(v12));
        *char v21 = v181;
        *uint64_t v16 = BYTE3(v181);
        uint64_t v182 = PDAplusDAM((unsigned __int16)v12, SBYTE3(v12), (unsigned __int16)v21[1], v16[1], ~BYTE3(v12));
        v21[1] = v182;
        v16[1] = BYTE3(v182);
        int v183 = PDAplusDAM((unsigned __int16)v12, SBYTE3(v12), (unsigned __int16)v21[2], v16[2], ~BYTE3(v12));
        v21[2] = v183;
        v16[2] = HIBYTE(v183);
        unsigned int v184 = (unsigned __int16)v21[3];
        char v185 = v16[3];
        int v186 = (unsigned __int16)v12;
        int v187 = BYTE3(v12);
        unsigned int v188 = ~BYTE3(v12);
        unsigned int v177 = v227;
LABEL_426:
        uint64_t result = PDAplusDAM(v186, v187, v184, v185, v188);
        v21[3] = result;
        v16[3] = BYTE3(result);
        goto LABEL_427;
      }
      int v150 = v36 + v225;
      if ((v23 & 3) != 0) {
        char v151 = v23 & 0xFC;
      }
      else {
        char v151 = v23;
      }
      if ((v23 & 3) != 0) {
        int v152 = -1 << (8 * v36);
      }
      else {
        int v152 = -1;
      }
      if ((v23 & 3) != 0) {
        int v153 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else {
        int v153 = (unsigned int *)v23;
      }
      if ((v23 & 3) != 0) {
        v21 -= v23 & 3;
      }
      else {
        int v150 = v225;
      }
      if ((((_BYTE)v150 + v151) & 3) != 0)
      {
        int v154 = 4 - (((_BYTE)v150 + v151) & 3);
        v36 += v154;
        unsigned int v155 = 0xFFFFFFFF >> (8 * v154);
        if (v150 >= 4) {
          unsigned int v156 = -1;
        }
        else {
          unsigned int v156 = 0xFFFFFFFF >> (8 * v154);
        }
        int v229 = v156 & v152;
        if (v150 >= 4) {
          unsigned int v157 = v155;
        }
        else {
          unsigned int v157 = 0;
        }
      }
      else
      {
        int v229 = v152;
        unsigned int v157 = 0;
      }
      uint64_t v201 = v24 - v36;
      int v202 = v150 >> 2;
      uint64_t v217 = v201;
      unint64_t v221 = v218 - v36;
LABEL_464:
      unsigned int v203 = *v153 & v229;
      unsigned int v204 = v157;
      int v205 = v202;
      if (!v203) {
        goto LABEL_476;
      }
LABEL_465:
      if (v203 == -1)
      {
        *char v21 = PDplusDM(v12, (unsigned __int16)*v21, ~BYTE3(v12));
        v21[1] = PDplusDM(v12, (unsigned __int16)v21[1], ~BYTE3(v12));
        v21[2] = PDplusDM(v12, (unsigned __int16)v21[2], ~BYTE3(v12));
        unsigned int v206 = (unsigned __int16)v21[3];
        __int16 v207 = v12;
        unsigned int v208 = ~BYTE3(v12);
      }
      else
      {
        while (1)
        {
          if ((v203 & 0xF8) != 0)
          {
            uint64_t result = PDplusDM(*(_DWORD *)(v11 + 4 * v203), (unsigned __int16)*v21, ~*(_DWORD *)(v11 + 4 * v203) >> 24);
            *char v21 = result;
          }
          if ((v203 & 0xF800) != 0)
          {
            uint64_t result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE1(v203)), (unsigned __int16)v21[1], ~*(_DWORD *)(v11 + 4 * BYTE1(v203)) >> 24);
            v21[1] = result;
          }
          if ((v203 & 0xF80000) != 0)
          {
            uint64_t result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE2(v203)), (unsigned __int16)v21[2], ~*(_DWORD *)(v11 + 4 * BYTE2(v203)) >> 24);
            v21[2] = result;
          }
          if (v203 >> 27) {
            break;
          }
LABEL_476:
          while (1)
          {
            int v209 = v205;
            v21 += 4;
            --v205;
            ++v153;
            if (v209 < 2) {
              break;
            }
            unsigned int v203 = *v153;
            if (*v153) {
              goto LABEL_465;
            }
          }
          if (!v204)
          {
            int v153 = (unsigned int *)((char *)v153 + v217);
            v21 += v221;
            if (!--v230) {
              return result;
            }
            goto LABEL_464;
          }
          unsigned int v204 = 0;
          unsigned int v203 = *v153 & v157;
        }
        unsigned int v206 = (unsigned __int16)v21[3];
        __int16 v207 = *(_DWORD *)(v11 + 4 * HIBYTE(v203));
        unsigned int v208 = ~*(_DWORD *)(v11 + 4 * HIBYTE(v203)) >> 24;
      }
      uint64_t result = PDplusDM(v207, v206, v208);
      v21[3] = result;
      goto LABEL_476;
    case 3:
      while (1)
      {
        int v44 = v225;
        do
        {
          unsigned int v45 = *(unsigned __int8 *)v23;
          if (v45 < 0xF8)
          {
            if (v45 < 8) {
              goto LABEL_64;
            }
            int v46 = *v16;
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * ((v46 * v45 + ((v46 * v45) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * ((v46 * v45 + ((v46 * v45) >> 8) + 1) >> 8))), (unsigned __int16)*v21, v46, v45 ^ 0xFF);
          }
          else
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * *v16);
          }
          *char v21 = result;
          *uint64_t v16 = BYTE3(result);
LABEL_64:
          ++v23;
          ++v21;
          v16 += v17;
          --v44;
        }
        while (v44);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        if (!--v230) {
          return result;
        }
      }
    case 4:
      while (1)
      {
        int v47 = v225;
        do
        {
          unsigned int v48 = *(unsigned __int8 *)v23;
          if (v48 < 0xF8)
          {
            if (v48 < 8) {
              goto LABEL_73;
            }
            int v49 = *v16;
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11+ 4 * (((v49 ^ 0xFF) * v48 + (((v49 ^ 0xFF) * v48) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * (((v49 ^ 0xFF) * v48 + (((v49 ^ 0xFF) * v48) >> 8) + 1) >> 8))), (unsigned __int16)*v21, v49, v48 ^ 0xFF);
          }
          else
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * ~*v16);
          }
          *char v21 = result;
          *uint64_t v16 = BYTE3(result);
LABEL_73:
          ++v23;
          ++v21;
          v16 += v17;
          --v47;
        }
        while (v47);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        if (!--v230) {
          return result;
        }
      }
    case 5:
      do
      {
        int v50 = v225;
        do
        {
          unint64_t v51 = *(unsigned __int8 *)v23;
          if (v51 >= 8)
          {
            uint64_t result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v51), HIBYTE(*(_DWORD *)(v11 + 4 * v51)), *v16, (unsigned __int16)*v21, *v16, HIBYTE(*(_DWORD *)(v11 + 4 * v51)) ^ 0xFFu);
            *char v21 = result;
            *uint64_t v16 = BYTE3(result);
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v50;
        }
        while (v50);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 6:
      while (1)
      {
        int v52 = v225;
        do
        {
          unint64_t v53 = *(unsigned __int8 *)v23;
          if (v53 < 8) {
            goto LABEL_89;
          }
          unsigned int v54 = *v16;
          if (v54 > 7)
          {
            if (v54 > 0xF7) {
              goto LABEL_89;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*v21, v54, (unsigned __int16)*(_DWORD *)(v11 + 4 * v53), HIBYTE(*(_DWORD *)(v11 + 4 * v53)), ~(_BYTE)v54);
          }
          else
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v53);
          }
          *char v21 = result;
          *uint64_t v16 = BYTE3(result);
LABEL_89:
          ++v23;
          ++v21;
          v16 += v17;
          --v52;
        }
        while (v52);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        if (!--v230) {
          return result;
        }
      }
    case 7:
      if (v6)
      {
        while (1)
        {
          int v55 = v225;
          do
          {
            unsigned int v56 = *(unsigned __int8 *)v23;
            if (v56 < 0xF8)
            {
              if (v56 < 8) {
                goto LABEL_99;
              }
              unsigned int v57 = (unsigned __int16)*v21;
              char v58 = *v16;
              LOBYTE(v59) = ~(_BYTE)v56 + ((unsigned __int16)(v20 * v56 + ((v20 * v56) >> 8) + 1) >> 8);
            }
            else
            {
              unsigned int v57 = (unsigned __int16)*v21;
              char v58 = *v16;
              unsigned int v59 = BYTE3(v12);
            }
            uint64_t result = PDAM(v57, v58, v59);
            *char v21 = result;
            *uint64_t v16 = BYTE3(result);
LABEL_99:
            ++v23;
            ++v21;
            v16 += v17;
            --v55;
          }
          while (v55);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          if (!--v230) {
            return result;
          }
        }
      }
LABEL_361:
      int v158 = v225;
      int v159 = v230;
      while (1)
      {
        unsigned int v160 = *(unsigned __int8 *)v23;
        if (v160 >= 0xF8) {
          break;
        }
        if (v160 >= 8)
        {
          unsigned int v161 = (unsigned __int16)*v21;
          char v162 = ~(_BYTE)v160 + ((unsigned __int16)(v20 * v160 + ((v20 * v160) >> 8) + 1) >> 8);
          goto LABEL_366;
        }
LABEL_367:
        ++v23;
        ++v21;
        if (!--v158)
        {
          v23 += v24;
          v21 += v218;
          --v230;
          if (v159 == 1) {
            return result;
          }
          goto LABEL_361;
        }
      }
      unsigned int v161 = (unsigned __int16)*v21;
      char v162 = BYTE3(v12);
LABEL_366:
      uint64_t result = PDM(v161, v162);
      *char v21 = result;
      goto LABEL_367;
    case 8:
      unsigned int v60 = ~BYTE3(v12);
      if (v6)
      {
        while (1)
        {
          int v61 = v225;
          do
          {
            unsigned int v62 = *(unsigned __int8 *)v23;
            if (v62 < 0xF8)
            {
              if (v62 < 8) {
                goto LABEL_109;
              }
              unsigned int v63 = (unsigned __int16)*v21;
              char v64 = *v16;
              char v65 = ~((v20 * v62 + ((v20 * v62) >> 8) + 1) >> 8);
            }
            else
            {
              unsigned int v63 = (unsigned __int16)*v21;
              char v64 = *v16;
              char v65 = v60;
            }
            uint64_t result = PDAM(v63, v64, v65);
            *char v21 = result;
            *uint64_t v16 = BYTE3(result);
LABEL_109:
            ++v23;
            ++v21;
            v16 += v17;
            --v61;
          }
          while (v61);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          if (!--v230) {
            return result;
          }
        }
      }
      break;
    case 9:
      do
      {
        int v71 = v225;
        do
        {
          unint64_t v72 = *(unsigned __int8 *)v23;
          if (v72 >= 8)
          {
            uint64_t result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v72), HIBYTE(*(_DWORD *)(v11 + 4 * v72)), *v16 ^ 0xFFu, (unsigned __int16)*v21, *v16, (~(_BYTE)v72 + HIBYTE(*(_DWORD *)(v11 + 4 * v72))));
            *char v21 = result;
            *uint64_t v16 = BYTE3(result);
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v71;
        }
        while (v71);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 10:
      do
      {
        int v73 = v225;
        do
        {
          unint64_t v74 = *(unsigned __int8 *)v23;
          if (v74 >= 8)
          {
            uint64_t result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v74), HIBYTE(*(_DWORD *)(v11 + 4 * v74)), *v16 ^ 0xFFu, (unsigned __int16)*v21, *v16, HIBYTE(*(_DWORD *)(v11 + 4 * v74)) ^ 0xFFu);
            *char v21 = result;
            *uint64_t v16 = BYTE3(result);
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v73;
        }
        while (v73);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 11:
      if (v6)
      {
        do
        {
          int v75 = v225;
          do
          {
            unint64_t v76 = *(unsigned __int8 *)v23;
            if (v76 >= 8)
            {
              uint64_t result = PDAplusdDA(*v21, *v16, *(_DWORD *)(v11 + 4 * v76), HIBYTE(*(_DWORD *)(v11 + 4 * v76)));
              *char v21 = result;
              *uint64_t v16 = BYTE3(result);
            }
            ++v23;
            ++v21;
            v16 += v17;
            --v75;
          }
          while (v75);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          --v230;
        }
        while (v230);
      }
      else
      {
        do
        {
          int v163 = v225;
          int v164 = v230;
          do
          {
            unint64_t v165 = *(unsigned __int8 *)v23;
            if (v165 >= 8)
            {
              uint64_t result = PDplusdDA((unsigned __int16)*v21, *(_DWORD *)(v11 + 4 * v165), HIBYTE(*(_DWORD *)(v11 + 4 * v165)));
              *char v21 = result;
            }
            ++v23;
            ++v21;
            --v163;
          }
          while (v163);
          v23 += v24;
          v21 += v218;
          --v230;
        }
        while (v164 != 1);
      }
      return result;
    case 12:
      if (v6)
      {
        do
        {
          int v77 = v225;
          do
          {
            unint64_t v78 = *(unsigned __int8 *)v23;
            if (v78 >= 8)
            {
              uint64_t result = PDApluslDA((unsigned __int16)*v21, *v16, (unsigned __int16)*(_DWORD *)(v11 + 4 * v78), HIBYTE(*(_DWORD *)(v11 + 4 * v78)));
              *char v21 = result;
              *uint64_t v16 = BYTE3(result);
            }
            ++v23;
            ++v21;
            v16 += v17;
            --v77;
          }
          while (v77);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          --v230;
        }
        while (v230);
      }
      else
      {
        do
        {
          int v166 = v225;
          int v167 = v230;
          do
          {
            unint64_t v168 = *(unsigned __int8 *)v23;
            if (v168 >= 8)
            {
              unsigned int v169 = (((unsigned __int16)*v21 | ((unsigned __int16)*v21 << 15)) & 0x1F07C1F)
                   + (*(_DWORD *)(result + 4 * v168) & 0x7C1F | (((*(_DWORD *)(result + 4 * v168) >> 5) & 0x1F) << 20));
              *char v21 = (((30 * ((v169 >> 5) & 0x100401)) | (15 * ((v169 >> 5) & 0x100401)) | v169) >> 15) & 0x3E0 | ((30 * ((v169 >> 5) & 0x401)) | (15 * ((v169 >> 5) & 0x401)) | v169) & 0x7C1F;
            }
            ++v23;
            ++v21;
            --v166;
          }
          while (v166);
          v23 += v24;
          v21 += v218;
          --v230;
        }
        while (v167 != 1);
      }
      return result;
    case 13:
      do
      {
        int v79 = v225;
        do
        {
          unint64_t v80 = *(unsigned __int8 *)v23;
          if (v80 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v80);
            unsigned int v81 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v82 = *v16;
                if (v82 >= 8)
                {
                  uint64_t result = PDAmultiplyPDA((unsigned __int16)*v21, v82, (unsigned __int16)*(_DWORD *)(v11 + 4 * v80), v81, v10);
                  unsigned int v81 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v81;
              }
              else
              {
                uint64_t result = PDAmultiplyPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v80), v81, v10);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v79;
        }
        while (v79);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 14:
      do
      {
        int v83 = v225;
        do
        {
          unint64_t v84 = *(unsigned __int8 *)v23;
          if (v84 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v84);
            unsigned int v85 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v86 = *v16;
                if (v86 >= 8)
                {
                  uint64_t result = PDAscreenPDA((unsigned __int16)*v21, v86, (unsigned __int16)*(_DWORD *)(v11 + 4 * v84), v85);
                  unsigned int v85 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v85;
              }
              else
              {
                uint64_t result = PDAscreenPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v84), v85);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v83;
        }
        while (v83);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 15:
      do
      {
        int v87 = v225;
        do
        {
          unint64_t v88 = *(unsigned __int8 *)v23;
          if (v88 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v88);
            unsigned int v89 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v90 = *v16;
                if (v90 >= 8)
                {
                  uint64_t result = PDAoverlayPDA((unsigned __int16)*v21, v90, (unsigned __int16)*(_DWORD *)(v11 + 4 * v88), v89);
                  unsigned int v89 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v89;
              }
              else
              {
                uint64_t result = PDAoverlayPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v88), v89);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v87;
        }
        while (v87);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 16:
      do
      {
        int v91 = v225;
        do
        {
          unint64_t v92 = *(unsigned __int8 *)v23;
          if (v92 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v92);
            unsigned int v93 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v94 = *v16;
                if (v94 >= 8)
                {
                  uint64_t result = PDAdarkenPDA((unsigned __int16)*v21, v94, (unsigned __int16)*(_DWORD *)(v11 + 4 * v92), v93);
                  unsigned int v93 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v93;
              }
              else
              {
                uint64_t result = PDAdarkenPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v92), v93);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v91;
        }
        while (v91);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 17:
      do
      {
        int v95 = v225;
        do
        {
          unint64_t v96 = *(unsigned __int8 *)v23;
          if (v96 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v96);
            unsigned int v97 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v98 = *v16;
                if (v98 >= 8)
                {
                  uint64_t result = PDAlightenPDA((unsigned __int16)*v21, v98, (unsigned __int16)*(_DWORD *)(v11 + 4 * v96), v97);
                  unsigned int v97 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v97;
              }
              else
              {
                uint64_t result = PDAlightenPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v96), v97);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v95;
        }
        while (v95);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 18:
      do
      {
        int v99 = v225;
        do
        {
          unint64_t v100 = *(unsigned __int8 *)v23;
          if (v100 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v100);
            unsigned int v101 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v102 = *v16;
                if (v102 >= 8)
                {
                  uint64_t result = PDAcolordodgePDA((unsigned __int16)*v21, v102, (unsigned __int16)*(_DWORD *)(v11 + 4 * v100), v101);
                  unsigned int v101 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v101;
              }
              else
              {
                uint64_t result = PDAcolordodgePDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v100), v101);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v99;
        }
        while (v99);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 19:
      do
      {
        int v103 = v225;
        do
        {
          unint64_t v104 = *(unsigned __int8 *)v23;
          if (v104 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v104);
            unsigned int v105 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v106 = *v16;
                if (v106 >= 8)
                {
                  uint64_t result = PDAcolorburnPDA((unsigned __int16)*v21, v106, (unsigned __int16)*(_DWORD *)(v11 + 4 * v104), v105);
                  unsigned int v105 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v105;
              }
              else
              {
                uint64_t result = PDAcolorburnPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v104), v105);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v103;
        }
        while (v103);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 20:
      do
      {
        int v107 = v225;
        do
        {
          unint64_t v108 = *(unsigned __int8 *)v23;
          if (v108 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v108);
            unsigned int v109 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v110 = *v16;
                if (v110 >= 8)
                {
                  uint64_t result = PDAsoftlightPDA((unsigned __int16)*v21, v110, (unsigned __int16)*(_DWORD *)(v11 + 4 * v108), v109);
                  unsigned int v109 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v109;
              }
              else
              {
                uint64_t result = PDAsoftlightPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v108), v109);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v107;
        }
        while (v107);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 21:
      do
      {
        int v111 = v225;
        do
        {
          unint64_t v112 = *(unsigned __int8 *)v23;
          if (v112 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v112);
            unsigned int v113 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v114 = *v16;
                if (v114 >= 8)
                {
                  uint64_t result = PDAhardlightPDA((unsigned __int16)*v21, v114, (unsigned __int16)*(_DWORD *)(v11 + 4 * v112), v113);
                  unsigned int v113 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v113;
              }
              else
              {
                uint64_t result = PDAhardlightPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v112), v113);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v111;
        }
        while (v111);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 22:
      do
      {
        int v115 = v225;
        do
        {
          unint64_t v116 = *(unsigned __int8 *)v23;
          if (v116 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v116);
            unsigned int v117 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v118 = *v16;
                if (v118 >= 8)
                {
                  uint64_t result = PDAdifferencePDA((unsigned __int16)*v21, v118, (unsigned __int16)*(_DWORD *)(v11 + 4 * v116), v117);
                  unsigned int v117 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v117;
              }
              else
              {
                uint64_t result = PDAdifferencePDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v116), v117);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v115;
        }
        while (v115);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 23:
      do
      {
        int v119 = v225;
        do
        {
          unint64_t v120 = *(unsigned __int8 *)v23;
          if (v120 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v120);
            unsigned int v121 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v122 = *v16;
                if (v122 >= 8)
                {
                  uint64_t result = PDAexclusionPDA((unsigned __int16)*v21, v122, (unsigned __int16)*(_DWORD *)(v11 + 4 * v120), v121);
                  unsigned int v121 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v121;
              }
              else
              {
                uint64_t result = PDAexclusionPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v120), v121);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v119;
        }
        while (v119);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 24:
      do
      {
        int v123 = v225;
        do
        {
          unint64_t v124 = *(unsigned __int8 *)v23;
          if (v124 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v124);
            unsigned int v125 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v126 = *v16;
                if (v126 >= 8)
                {
                  uint64_t result = PDAhuePDA((unsigned __int16)*v21, v126, (unsigned __int16)*(_DWORD *)(v11 + 4 * v124), v125);
                  unsigned int v125 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v125;
              }
              else
              {
                uint64_t result = PDAhuePDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v124), v125);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v123;
        }
        while (v123);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 25:
      do
      {
        int v127 = v225;
        do
        {
          unint64_t v128 = *(unsigned __int8 *)v23;
          if (v128 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v128);
            unsigned int v129 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v130 = *v16;
                if (v130 >= 8)
                {
                  uint64_t result = PDAsaturationPDA((unsigned __int16)*v21, v130, (unsigned __int16)*(_DWORD *)(v11 + 4 * v128), v129);
                  unsigned int v129 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v129;
              }
              else
              {
                uint64_t result = PDAsaturationPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v128), v129);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v127;
        }
        while (v127);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 26:
      do
      {
        int v131 = v225;
        do
        {
          unint64_t v132 = *(unsigned __int8 *)v23;
          if (v132 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v132);
            unsigned int v133 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v134 = *v16;
                if (v134 >= 8)
                {
                  uint64_t result = PDAluminosityPDA((unsigned __int16)*(_DWORD *)(v11 + 4 * v132), v133, (unsigned __int16)*v21, v134);
                  unsigned int v133 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v133;
              }
              else
              {
                uint64_t result = PDAluminosityPDA((unsigned __int16)*(_DWORD *)(v11 + 4 * v132), v133, (unsigned __int16)*v21, 0xFFu);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v131;
        }
        while (v131);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 27:
      do
      {
        int v135 = v225;
        do
        {
          unint64_t v136 = *(unsigned __int8 *)v23;
          if (v136 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v136);
            unsigned int v137 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v138 = *v16;
                if (v138 >= 8)
                {
                  uint64_t result = PDAluminosityPDA((unsigned __int16)*v21, v138, (unsigned __int16)*(_DWORD *)(v11 + 4 * v136), v137);
                  unsigned int v137 = BYTE3(result);
                }
                *char v21 = result;
                *uint64_t v16 = v137;
              }
              else
              {
                uint64_t result = PDAluminosityPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v136), v137);
                *char v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v135;
        }
        while (v135);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    default:
      return result;
  }
LABEL_112:
  int v66 = v225;
  int v67 = v230;
  while (1)
  {
    unsigned int v68 = *(unsigned __int8 *)v23;
    if (v68 >= 0xF8) {
      break;
    }
    if (v68 >= 8)
    {
      unsigned int v69 = (unsigned __int16)*v21;
      char v70 = ~((v20 * v68 + ((v20 * v68) >> 8) + 1) >> 8);
      goto LABEL_117;
    }
LABEL_118:
    ++v23;
    ++v21;
    if (!--v66)
    {
      v23 += v24;
      v21 += v218;
      --v230;
      if (v67 == 1) {
        return result;
      }
      goto LABEL_112;
    }
  }
  unsigned int v69 = (unsigned __int16)*v21;
  char v70 = v60;
LABEL_117:
  uint64_t result = PDM(v69, v70);
  *char v21 = result;
  goto LABEL_118;
}

uint64_t rgb555_mark_pixelmask(uint64_t result, int a2)
{
  uint64_t v3 = *(void *)(result + 48);
  uint64_t v4 = *(void *)(result + 136);
  uint64_t v6 = *(int *)(result + 12);
  uint64_t v5 = *(int *)(result + 16);
  if (v3)
  {
    uint64_t v7 = *(int *)(result + 32);
    uint64_t v8 = (char *)(v3 + v6 + (int)v7 * (uint64_t)(int)v5);
    int v602 = -1;
    if (!v4) {
      return result;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    int v602 = 0;
    if (!v4) {
      return result;
    }
  }
  int v9 = *(_DWORD *)(result + 4);
  unint64_t v11 = *(void *)(result + 88);
  int8x16_t v10 = *(unsigned __int8 **)(result + 96);
  unint64_t v12 = (unint64_t)*(int *)(result + 28) >> 1;
  uint64_t v13 = (__int16 *)(*(void *)(result + 40) + 2 * (v6 + v12 * v5));
  uint64_t v14 = *(int *)(result + 124);
  uint64_t v15 = (char *)(v4 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v14);
  uint64_t v16 = *(int *)(result + 56);
  uint64_t v17 = *(int *)(result + 60);
  int v18 = BYTE1(*(_DWORD *)result);
  int v601 = *(_DWORD *)(result + 8);
  if (v18 == 3)
  {
    uint64_t v21 = *(int *)(result + 124);
    uint64_t v598 = *(void *)(result + 96);
    uint64_t v22 = rgb555_colorlookup(3, (unsigned __int16 *)v11, v10);
    uint64_t v14 = v21;
    unint64_t v11 = v22;
    unint64_t v23 = (unsigned __int8 *)(v22 + 512);
    uint64_t result = v598;
    if (v598) {
      int8x16_t v10 = v23;
    }
    else {
      int8x16_t v10 = 0;
    }
    if (v598) {
      uint64_t v24 = 16;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v575 = v24;
    unint64_t v19 = 16;
    int v20 = v598 != 0;
    int v25 = 16;
    int v26 = 16;
    goto LABEL_26;
  }
  if (v18 != 1)
  {
    int v26 = *(_DWORD *)(result + 64);
    int v25 = *(_DWORD *)(result + 68);
    unint64_t v19 = (unint64_t)*(int *)(result + 76) >> 1;
    if (v10)
    {
      uint64_t v575 = *(int *)(result + 80);
      int v20 = 1;
    }
    else
    {
      uint64_t v575 = 0;
      int v20 = 0;
    }
LABEL_26:
    unint64_t v31 = v11 + 2 * v19 * v25;
    v602 &= 1u;
    int v30 = 1;
    BOOL v600 = (char *)v11;
    uint64_t v623 = (char *)v11;
    goto LABEL_27;
  }
  unint64_t v19 = (unint64_t)*(int *)(result + 76) >> 1;
  if (v10)
  {
    uint64_t v575 = *(int *)(result + 80);
    v10 += v16 + (int)v575 * (uint64_t)(int)v17;
    int v20 = -1;
  }
  else
  {
    uint64_t v575 = 0;
    int v20 = 0;
  }
  uint64_t v623 = (char *)(v11 + 2 * (v16 + v19 * v17));
  if (v19 == v12 && (char *)v13 - v623 >= 1)
  {
    if (v9 >= (uint64_t)((unint64_t)((char *)v13 - v623) >> 1))
    {
      v13 += v9 - 1;
      v623 += 2 * v9 - 2;
      v15 += v9 - 1;
      v8 += v602 & (v9 - 1);
      int v30 = -1;
      unint64_t v19 = (unint64_t)*(int *)(result + 28) >> 1;
      v10 += v20 & (v9 - 1);
      goto LABEL_24;
    }
    uint64_t v27 = *(int *)(result + 8) - 1;
    unint64_t v28 = v12 * v27;
    int v29 = &v623[2 * v12 * v27];
    if (v13 <= (__int16 *)&v29[2 * v9 - 2])
    {
      unint64_t v19 = -(uint64_t)v12;
      v15 += v14 * v27;
      uint64_t v14 = -v14;
      v8 += v7 * v27;
      uint64_t v7 = -v7;
      v602 &= 1u;
      v10 += v575 * v27;
      uint64_t v575 = -v575;
      v20 &= 1u;
      int v30 = 1;
      uint64_t v623 = v29;
      unint64_t v12 = -(uint64_t)v12;
      v13 += v28;
      goto LABEL_24;
    }
  }
  v602 &= 1u;
  v20 &= 1u;
  int v30 = 1;
LABEL_24:
  unint64_t v31 = 0;
  BOOL v600 = 0;
  unint64_t v11 = -1;
  int v25 = v575;
  int v26 = v19;
LABEL_27:
  int v32 = v30 * v9;
  int v576 = v9;
  unint64_t v577 = v31;
  int v612 = v20;
  if (v31)
  {
    uint64_t v33 = (int)v17 % v25;
    unint64_t v572 = v19;
    unsigned int v34 = &v623[2 * v19 * v33];
    uint64_t v35 = (int)v16 % v26;
    unint64_t v11 = (unint64_t)&v34[2 * v26];
    unsigned int v36 = &v10[v575 * v33 + v35];
    if (v20) {
      int8x16_t v10 = v36;
    }
    v599 = v10;
    BOOL v600 = &v34[2 * v35];
    uint64_t v623 = v600;
  }
  else
  {
    v599 = v10;
    unint64_t v572 = v19 - v32;
    v575 -= v20 * v9;
  }
  uint64_t v574 = v14 - v32;
  unint64_t v573 = v12 - v32;
  uint64_t v571 = v7 - v602 * v9;
  switch(a2)
  {
    case 0:
      uint64_t v37 = v30;
      if (v602)
      {
        while (1)
        {
          int v38 = v576;
          do
          {
            unsigned int v39 = *v15;
            if (v39 < 0xF8)
            {
              if (v39 < 8) {
                goto LABEL_40;
              }
              uint64_t result = PDAM((unsigned __int16)*v13, *v8, ~(_BYTE)v39);
              *uint64_t v13 = result;
              unsigned int v40 = BYTE3(result);
            }
            else
            {
              LOBYTE(v40) = 0;
              *uint64_t v13 = 0;
            }
            *uint64_t v8 = v40;
LABEL_40:
            v15 += v37;
            v8 += v602;
            v13 += v37;
            --v38;
          }
          while (v38);
          v15 += v574;
          v13 += v573;
          v8 += v571;
          if (!--v601) {
            return result;
          }
        }
      }
LABEL_682:
      int v444 = v9;
      while (1)
      {
        unsigned int v445 = *v15;
        if (v445 > 0xF7) {
          break;
        }
        if (v445 >= 8)
        {
          uint64_t result = PDM((unsigned __int16)*v13, ~(_BYTE)v445);
          goto LABEL_687;
        }
LABEL_688:
        v15 += v37;
        v13 += v37;
        if (!--v444)
        {
          v15 += v574;
          v13 += v573;
          if (!--v601) {
            return result;
          }
          goto LABEL_682;
        }
      }
      uint64_t result = 0;
LABEL_687:
      *uint64_t v13 = result;
      goto LABEL_688;
    case 1:
      if (v602)
      {
        uint64_t v41 = v30;
        uint64_t v42 = v602;
        if (v20)
        {
          uint64_t v43 = v20;
          uint64_t v44 = -(uint64_t)v26;
          uint64_t v613 = -(uint64_t)(v572 * v25);
          uint64_t v589 = -(v575 * v25);
          unsigned int v45 = (char *)v599;
          while (1)
          {
            unint64_t v46 = v577;
            int v47 = v576;
            do
            {
              unsigned int v48 = *v15;
              if (v48 < 0xF8)
              {
                if (v48 < 8) {
                  goto LABEL_53;
                }
                unint64_t v50 = v11;
                uint64_t result = PDAMplusDAM(*(unsigned __int16 *)v623, *v45, v48, (unsigned __int16)*v13, *v8, v48 ^ 0xFF);
                uint64_t v42 = v602;
                unint64_t v11 = v50;
                unint64_t v46 = v577;
                *uint64_t v13 = result;
                unsigned int v49 = BYTE3(result);
              }
              else
              {
                *uint64_t v13 = *(_WORD *)v623;
                LOBYTE(v49) = *v45;
              }
              *uint64_t v8 = v49;
LABEL_53:
              v15 += v41;
              v8 += v42;
              unint64_t v51 = &v623[2 * v41];
              if ((unint64_t)v51 >= v11) {
                uint64_t v52 = v44;
              }
              else {
                uint64_t v52 = 0;
              }
              v45 += v43 + v52;
              uint64_t v623 = &v51[2 * v52];
              v13 += v41;
              --v47;
            }
            while (v47);
            if (v46)
            {
              unint64_t v53 = &v600[2 * v572];
              uint64_t v54 = v589;
              if ((unint64_t)v53 < v46) {
                uint64_t v54 = 0;
              }
              unsigned int v45 = (char *)&v599[v575 + v54];
              uint64_t v55 = v613;
              if ((unint64_t)v53 < v46) {
                uint64_t v55 = 0;
              }
              v11 += 2 * v55 + 2 * v572;
              v599 += v575 + v54;
              BOOL v600 = &v53[2 * v55];
              uint64_t v623 = v600;
            }
            else
            {
              v623 += 2 * v572;
              v45 += v575;
            }
            v15 += v574;
            v13 += v573;
            v8 += v571;
            if (!--v601) {
              return result;
            }
          }
        }
        uint64_t v522 = -(uint64_t)v26;
        uint64_t v523 = -(uint64_t)(v572 * v25);
LABEL_814:
        int v524 = v576;
        while (1)
        {
          unsigned int v525 = *v15;
          if (v525 >= 0xF8) {
            break;
          }
          if (v525 >= 8)
          {
            unint64_t v527 = v11;
            uint64_t result = PDAMplusDAM(*(unsigned __int16 *)v623, 255, v525, (unsigned __int16)*v13, *v8, v525 ^ 0xFF);
            uint64_t v42 = v602;
            unint64_t v11 = v527;
            *uint64_t v13 = result;
            unsigned int v526 = BYTE3(result);
            goto LABEL_819;
          }
LABEL_820:
          v15 += v41;
          v8 += v42;
          unsigned int v528 = &v623[2 * v41];
          if ((unint64_t)v528 >= v11) {
            uint64_t v529 = v522;
          }
          else {
            uint64_t v529 = 0;
          }
          uint64_t v623 = &v528[2 * v529];
          v13 += v41;
          if (!--v524)
          {
            v15 += v574;
            v13 += v573;
            v8 += v571;
            __int16 v530 = v600;
            int v531 = &v600[2 * v572];
            if ((unint64_t)v531 >= v577) {
              uint64_t v532 = v523;
            }
            else {
              uint64_t v532 = 0;
            }
            uint64_t v533 = &v531[2 * v532];
            uint64_t v534 = v11 + 2 * v532 + 2 * v572;
            if (v577)
            {
              unint64_t v11 = v534;
              __int16 v530 = v533;
            }
            BOOL v600 = v530;
            if (!v577) {
              uint64_t v533 = &v623[2 * v572];
            }
            uint64_t v623 = v533;
            if (!--v601) {
              return result;
            }
            goto LABEL_814;
          }
        }
        *uint64_t v13 = *(_WORD *)v623;
        LOBYTE(v526) = -1;
LABEL_819:
        *uint64_t v8 = v526;
        goto LABEL_820;
      }
      uint64_t v446 = v30;
      uint64_t v447 = -(uint64_t)v26;
      uint64_t v448 = -(uint64_t)(v572 * v25);
      uint64_t v449 = 2 * v30;
LABEL_692:
      int v450 = v576;
      while (1)
      {
        unsigned int v451 = *v15;
        if (v451 >= 0xF8) {
          break;
        }
        if (v451 >= 8)
        {
          unint64_t v452 = v11;
          uint64_t result = PDMplusDM(*(unsigned __int16 *)v623, v451, (unsigned __int16)*v13, v451 ^ 0xFF);
          unint64_t v11 = v452;
          goto LABEL_697;
        }
LABEL_698:
        v15 += v446;
        uint64_t v453 = &v623[2 * v446];
        if ((unint64_t)v453 >= v11) {
          uint64_t v454 = v447;
        }
        else {
          uint64_t v454 = 0;
        }
        uint64_t v623 = &v453[2 * v454];
        uint64_t v13 = (__int16 *)((char *)v13 + v449);
        if (!--v450)
        {
          v15 += v574;
          v13 += v573;
          BOOL v455 = v600;
          uint64_t v456 = &v600[2 * v572];
          if ((unint64_t)v456 >= v577) {
            uint64_t v457 = v448;
          }
          else {
            uint64_t v457 = 0;
          }
          unint64_t v458 = &v456[2 * v457];
          uint64_t v459 = v11 + 2 * v457 + 2 * v572;
          if (v577)
          {
            unint64_t v11 = v459;
            BOOL v455 = v458;
          }
          BOOL v600 = v455;
          if (!v577) {
            unint64_t v458 = &v623[2 * v572];
          }
          uint64_t v623 = v458;
          if (!--v601) {
            return result;
          }
          goto LABEL_692;
        }
      }
      uint64_t result = *(unsigned __int16 *)v623;
LABEL_697:
      *uint64_t v13 = result;
      goto LABEL_698;
    case 2:
      uint64_t v56 = v30;
      if (v602)
      {
        uint64_t v57 = v602;
        uint64_t v58 = v20;
        uint64_t v590 = -(uint64_t)(v572 * v25);
        uint64_t v578 = -(v575 * v25);
        unsigned int v59 = (char *)v599;
        uint64_t v60 = -(uint64_t)v26;
        uint64_t v614 = v602;
        while (1)
        {
          int v61 = v576;
          unint64_t v603 = v11;
          do
          {
            unsigned int v62 = *v15;
            if (v62 < 0xF8)
            {
              if (v62 < 8) {
                goto LABEL_79;
              }
              uint64_t result = PDAM(*(unsigned __int16 *)v623, *v59, v62);
              unint64_t v11 = v603;
              uint64_t v57 = v614;
              unsigned int v63 = BYTE3(result);
              if (BYTE3(result) < 8u) {
                goto LABEL_79;
              }
              unsigned int v64 = (unsigned __int16)*v13;
              char v65 = *v8;
              LODWORD(result) = (unsigned __int16)result;
LABEL_77:
              uint64_t result = PDAplusDAM(result, v63, v64, v65, v63 ^ 0xFF);
              unint64_t v11 = v603;
              uint64_t v57 = v614;
              *uint64_t v13 = result;
              unsigned int v63 = BYTE3(result);
              goto LABEL_78;
            }
            unsigned int v63 = *v59;
            if (v63 < 0xF8)
            {
              if (v63 < 8) {
                goto LABEL_79;
              }
              LODWORD(result) = *(unsigned __int16 *)v623;
              unsigned int v64 = (unsigned __int16)*v13;
              char v65 = *v8;
              goto LABEL_77;
            }
            *uint64_t v13 = *(_WORD *)v623;
LABEL_78:
            *uint64_t v8 = v63;
LABEL_79:
            v15 += v56;
            v8 += v57;
            int v66 = &v623[2 * v56];
            if ((unint64_t)v66 >= v11) {
              uint64_t v67 = v60;
            }
            else {
              uint64_t v67 = 0;
            }
            v59 += v58 + v67;
            uint64_t v623 = &v66[2 * v67];
            v13 += v56;
            --v61;
          }
          while (v61);
          if (v577)
          {
            unsigned int v68 = &v600[2 * v572];
            uint64_t v69 = v578;
            if ((unint64_t)v68 < v577) {
              uint64_t v69 = 0;
            }
            unsigned int v59 = (char *)&v599[v575 + v69];
            uint64_t v70 = v590;
            if ((unint64_t)v68 < v577) {
              uint64_t v70 = 0;
            }
            v11 += 2 * v70 + 2 * v572;
            v599 += v575 + v69;
            BOOL v600 = &v68[2 * v70];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v59 += v575;
          }
          v15 += v574;
          v13 += v573;
          v8 += v571;
          if (!--v601) {
            return result;
          }
        }
      }
      uint64_t v460 = v20;
      uint64_t v461 = -(uint64_t)v26;
      uint64_t v620 = -(uint64_t)(v572 * v25);
      uint64_t v608 = -(v575 * v25);
      uint64_t v462 = (char *)v599;
LABEL_712:
      int v463 = v576;
      unint64_t v464 = v11;
      while (1)
      {
        unsigned int v465 = *v15;
        if (v465 < 0xF8)
        {
          if (v465 >= 8)
          {
            uint64_t result = PDAM(*(unsigned __int16 *)v623, *v462, v465);
            unint64_t v11 = v464;
            if (BYTE3(result) >= 8u)
            {
              unsigned int v467 = (unsigned __int16)*v13;
              unsigned int v468 = ~result >> 24;
              goto LABEL_721;
            }
          }
        }
        else
        {
          unsigned int v466 = *v462;
          if (v466 >= 0xF8)
          {
            uint64_t result = *(unsigned __int16 *)v623;
            goto LABEL_722;
          }
          if (v466 >= 8)
          {
            LOWORD(result) = *(_WORD *)v623;
            unsigned int v467 = (unsigned __int16)*v13;
            unsigned int v468 = v466 ^ 0xFF;
LABEL_721:
            uint64_t result = PDplusDM(result, v467, v468);
            unint64_t v11 = v464;
LABEL_722:
            *uint64_t v13 = result;
          }
        }
        v15 += v56;
        uint64_t v469 = &v623[2 * v56];
        if ((unint64_t)v469 >= v11) {
          uint64_t v470 = v461;
        }
        else {
          uint64_t v470 = 0;
        }
        v462 += v460 + v470;
        uint64_t v623 = &v469[2 * v470];
        v13 += v56;
        if (!--v463)
        {
          if (v577)
          {
            BOOL v471 = &v600[2 * v572];
            uint64_t v472 = v608;
            if ((unint64_t)v471 < v577) {
              uint64_t v472 = 0;
            }
            uint64_t v462 = (char *)&v599[v575 + v472];
            uint64_t v473 = v620;
            if ((unint64_t)v471 < v577) {
              uint64_t v473 = 0;
            }
            v11 += 2 * v473 + 2 * v572;
            v599 += v575 + v472;
            BOOL v600 = &v471[2 * v473];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v462 += v575;
          }
          v15 += v574;
          v13 += v573;
          if (!--v601) {
            return result;
          }
          goto LABEL_712;
        }
      }
    case 3:
      uint64_t v71 = v30;
      uint64_t v579 = -(uint64_t)(v572 * v25);
      uint64_t v550 = -(v575 * v25);
      uint64_t v72 = 2 * v30;
      int v73 = (char *)v599;
      uint64_t v74 = -(uint64_t)v26;
      while (1)
      {
        int v75 = v576;
        unint64_t v76 = v11;
        do
        {
          unsigned int v77 = *v15;
          if (v77 < 0xF8)
          {
            if (v77 < 8) {
              goto LABEL_105;
            }
            if (v612) {
              char v79 = *v73;
            }
            else {
              char v79 = -1;
            }
            uint64_t result = PDAMplusDAM(*(unsigned __int16 *)v623, v79, ((unsigned __int16)(*v8 * (_WORD)v77+ ((*v8 * v77) >> 8)+ 1) >> 8), (unsigned __int16)*v13, *v8, v77 ^ 0xFF);
          }
          else
          {
            if (v612) {
              char v78 = *v73;
            }
            else {
              char v78 = -1;
            }
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v78, *v8);
          }
          *uint64_t v13 = result;
          *uint64_t v8 = BYTE3(result);
          unint64_t v11 = v76;
LABEL_105:
          v15 += v71;
          v8 += v602;
          unint64_t v80 = &v623[2 * v71];
          if ((unint64_t)v80 >= v11) {
            uint64_t v81 = v74;
          }
          else {
            uint64_t v81 = 0;
          }
          v73 += v612 + v81;
          uint64_t v623 = &v80[2 * v81];
          uint64_t v13 = (__int16 *)((char *)v13 + v72);
          --v75;
        }
        while (v75);
        if (v577)
        {
          unsigned int v82 = &v600[2 * v572];
          uint64_t v83 = v550;
          if ((unint64_t)v82 < v577) {
            uint64_t v83 = 0;
          }
          int v73 = (char *)&v599[v575 + v83];
          uint64_t v84 = v579;
          if ((unint64_t)v82 < v577) {
            uint64_t v84 = 0;
          }
          v11 += 2 * v84 + 2 * v572;
          v599 += v575 + v83;
          BOOL v600 = &v82[2 * v84];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v73 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        if (!--v601) {
          return result;
        }
      }
    case 4:
      uint64_t v85 = v30;
      uint64_t v580 = -(uint64_t)(v572 * v25);
      uint64_t v551 = -(v575 * v25);
      uint64_t v86 = 2 * v30;
      int v87 = (char *)v599;
      uint64_t v88 = -(uint64_t)v26;
      while (1)
      {
        int v89 = v576;
        unint64_t v90 = v11;
        do
        {
          unsigned int v91 = *v15;
          if (v91 < 0xF8)
          {
            if (v91 < 8) {
              goto LABEL_131;
            }
            if (v612) {
              char v93 = *v87;
            }
            else {
              char v93 = -1;
            }
            uint64_t result = PDAMplusDAM(*(unsigned __int16 *)v623, v93, ((unsigned __int16)((*v8 ^ 0xFF) * v91+ (((*v8 ^ 0xFF) * v91) >> 8)+ 1) >> 8), (unsigned __int16)*v13, *v8, v91 ^ 0xFF);
          }
          else
          {
            if (v612) {
              char v92 = *v87;
            }
            else {
              char v92 = -1;
            }
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v92, ~*v8);
          }
          *uint64_t v13 = result;
          *uint64_t v8 = BYTE3(result);
          unint64_t v11 = v90;
LABEL_131:
          v15 += v85;
          v8 += v602;
          unsigned int v94 = &v623[2 * v85];
          if ((unint64_t)v94 >= v11) {
            uint64_t v95 = v88;
          }
          else {
            uint64_t v95 = 0;
          }
          v87 += v612 + v95;
          uint64_t v623 = &v94[2 * v95];
          uint64_t v13 = (__int16 *)((char *)v13 + v86);
          --v89;
        }
        while (v89);
        if (v577)
        {
          unint64_t v96 = &v600[2 * v572];
          uint64_t v97 = v551;
          if ((unint64_t)v96 < v577) {
            uint64_t v97 = 0;
          }
          int v87 = (char *)&v599[v575 + v97];
          uint64_t v98 = v580;
          if ((unint64_t)v96 < v577) {
            uint64_t v98 = 0;
          }
          v11 += 2 * v98 + 2 * v572;
          v599 += v575 + v97;
          BOOL v600 = &v96[2 * v98];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v87 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        if (!--v601) {
          return result;
        }
      }
    case 5:
      uint64_t v99 = v30;
      uint64_t v100 = v602;
      int v615 = v20;
      uint64_t v581 = -(v575 * v25);
      uint64_t v591 = -(uint64_t)(v572 * v25);
      uint64_t v101 = 2 * v30;
      unsigned int v102 = (char *)v599;
      uint64_t v103 = -(uint64_t)v26;
      do
      {
        int v104 = v576;
        unint64_t v604 = v11;
        do
        {
          unsigned int v105 = *v15;
          if (v105 >= 8)
          {
            unsigned int v106 = *v8;
            uint64_t v107 = v101;
            unsigned int v108 = PDAM(*(unsigned __int16 *)v623, *v102, v105);
            uint64_t result = PDAMplusDAM((unsigned __int16)v108, SHIBYTE(v108), v106, (unsigned __int16)*v13, v106, HIBYTE(v108) ^ 0xFF);
            uint64_t v101 = v107;
            unint64_t v11 = v604;
            *uint64_t v13 = result;
            *uint64_t v8 = BYTE3(result);
          }
          v15 += v99;
          v8 += v100;
          unsigned int v109 = &v623[2 * v99];
          if ((unint64_t)v109 >= v11) {
            uint64_t v110 = v103;
          }
          else {
            uint64_t v110 = 0;
          }
          v102 += v615 + v110;
          uint64_t v623 = &v109[2 * v110];
          uint64_t v13 = (__int16 *)((char *)v13 + v101);
          --v104;
        }
        while (v104);
        if (v577)
        {
          int v111 = &v600[2 * v572];
          uint64_t v112 = v581;
          if ((unint64_t)v111 < v577) {
            uint64_t v112 = 0;
          }
          unsigned int v102 = (char *)&v599[v575 + v112];
          uint64_t v113 = v591;
          if ((unint64_t)v111 < v577) {
            uint64_t v113 = 0;
          }
          v11 += 2 * v113 + 2 * v572;
          v599 += v575 + v112;
          BOOL v600 = &v111[2 * v113];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v102 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 6:
      uint64_t v114 = v30;
      uint64_t v115 = v602;
      uint64_t v582 = -(uint64_t)(v572 * v25);
      uint64_t v592 = v602;
      uint64_t v552 = -(v575 * v25);
      uint64_t v116 = 2 * v30;
      unsigned int v117 = (char *)v599;
      uint64_t v118 = -(uint64_t)v26;
      while (1)
      {
        int v119 = v576;
        unint64_t v605 = v11;
        do
        {
          unsigned int v120 = *v15;
          if (v120 < 8) {
            goto LABEL_175;
          }
          unsigned int v121 = *v8;
          if (v121 > 7)
          {
            if (v121 > 0xF7) {
              goto LABEL_175;
            }
            if (v612) {
              char v123 = *v117;
            }
            else {
              char v123 = -1;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*v13, v121, *(unsigned __int16 *)v623, v123, ((unsigned __int16)(~(_BYTE)v121 * (_WORD)v120+ ((~(_BYTE)v121 * v120) >> 8)+ 1) >> 8));
          }
          else
          {
            if (v612) {
              char v122 = *v117;
            }
            else {
              char v122 = -1;
            }
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v122, v120);
          }
          *uint64_t v13 = result;
          *uint64_t v8 = BYTE3(result);
          unint64_t v11 = v605;
          uint64_t v115 = v592;
LABEL_175:
          v15 += v114;
          v8 += v115;
          unint64_t v124 = &v623[2 * v114];
          if ((unint64_t)v124 >= v11) {
            uint64_t v125 = v118;
          }
          else {
            uint64_t v125 = 0;
          }
          v117 += v612 + v125;
          uint64_t v623 = &v124[2 * v125];
          uint64_t v13 = (__int16 *)((char *)v13 + v116);
          --v119;
        }
        while (v119);
        if (v577)
        {
          unsigned int v126 = &v600[2 * v572];
          uint64_t v127 = v552;
          if ((unint64_t)v126 < v577) {
            uint64_t v127 = 0;
          }
          unsigned int v117 = (char *)&v599[v575 + v127];
          uint64_t v128 = v582;
          if ((unint64_t)v126 < v577) {
            uint64_t v128 = 0;
          }
          v11 += 2 * v128 + 2 * v572;
          v599 += v575 + v127;
          BOOL v600 = &v126[2 * v128];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v117 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        if (!--v601) {
          return result;
        }
      }
    case 7:
      uint64_t v129 = v30;
      if (v602)
      {
        int v616 = v20;
        uint64_t v593 = -(uint64_t)(v572 * v25);
        uint64_t v583 = -(v575 * v25);
        unsigned int v130 = (char *)v599;
        uint64_t v131 = -(uint64_t)v26;
        while (1)
        {
          int v132 = v576;
          unint64_t v133 = v11;
          do
          {
            unsigned int v134 = *v15;
            if (v134 < 0xF8)
            {
              if (v134 < 8) {
                goto LABEL_196;
              }
              uint64_t result = PDAMplusDAM((unsigned __int16)*v13, *v8, ((unsigned __int16)(*v130 * (_WORD)v134+ ((*v130 * v134) >> 8)+ 1) >> 8), (unsigned __int16)*v13, *v8, v134 ^ 0xFF);
            }
            else
            {
              uint64_t result = PDAM((unsigned __int16)*v13, *v8, *v130);
            }
            unint64_t v11 = v133;
            *uint64_t v13 = result;
            *uint64_t v8 = BYTE3(result);
LABEL_196:
            v15 += v129;
            v8 += v602;
            int v135 = &v623[2 * v129];
            if ((unint64_t)v135 >= v11) {
              uint64_t v136 = v131;
            }
            else {
              uint64_t v136 = 0;
            }
            v130 += v616 + v136;
            uint64_t v623 = &v135[2 * v136];
            v13 += v129;
            --v132;
          }
          while (v132);
          if (v577)
          {
            unsigned int v137 = &v600[2 * v572];
            uint64_t v138 = v583;
            if ((unint64_t)v137 < v577) {
              uint64_t v138 = 0;
            }
            unsigned int v130 = (char *)&v599[v575 + v138];
            uint64_t v139 = v593;
            if ((unint64_t)v137 < v577) {
              uint64_t v139 = 0;
            }
            v11 += 2 * v139 + 2 * v572;
            v599 += v575 + v138;
            BOOL v600 = &v137[2 * v139];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v130 += v575;
          }
          v15 += v574;
          v13 += v573;
          v8 += v571;
          if (!--v601) {
            return result;
          }
        }
      }
      uint64_t v474 = v20;
      uint64_t v475 = -(uint64_t)v26;
      uint64_t v621 = -(uint64_t)(v572 * v25);
      uint64_t v609 = -(v575 * v25);
      int v476 = (char *)v599;
LABEL_737:
      int v477 = v576;
      unint64_t v478 = v11;
      while (1)
      {
        unsigned int v479 = *v15;
        if (v479 == 248) {
          break;
        }
        if (v479 >= 8)
        {
          uint64_t result = PDMplusDM((unsigned __int16)*v13, ((unsigned __int16)(*v476 * (_WORD)v479+ ((*v476 * v479) >> 8)+ 1) >> 8), (unsigned __int16)*v13, v479 ^ 0xFF);
          goto LABEL_742;
        }
LABEL_743:
        v15 += v129;
        unsigned int v480 = &v623[2 * v129];
        if ((unint64_t)v480 >= v11) {
          uint64_t v481 = v475;
        }
        else {
          uint64_t v481 = 0;
        }
        v476 += v474 + v481;
        uint64_t v623 = &v480[2 * v481];
        v13 += v129;
        if (!--v477)
        {
          if (v577)
          {
            __int16 v482 = &v600[2 * v572];
            uint64_t v483 = v609;
            if ((unint64_t)v482 < v577) {
              uint64_t v483 = 0;
            }
            int v476 = (char *)&v599[v575 + v483];
            uint64_t v484 = v621;
            if ((unint64_t)v482 < v577) {
              uint64_t v484 = 0;
            }
            v11 += 2 * v484 + 2 * v572;
            v599 += v575 + v483;
            BOOL v600 = &v482[2 * v484];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v476 += v575;
          }
          v15 += v574;
          v13 += v573;
          if (!--v601) {
            return result;
          }
          goto LABEL_737;
        }
      }
      uint64_t result = PDM((unsigned __int16)*v13, *v476);
LABEL_742:
      unint64_t v11 = v478;
      *uint64_t v13 = result;
      goto LABEL_743;
    case 8:
      uint64_t v140 = v30;
      if (v602)
      {
        int v617 = v20;
        uint64_t v594 = -(uint64_t)(v572 * v25);
        uint64_t v584 = -(v575 * v25);
        unsigned int v141 = v599;
        uint64_t v142 = -(uint64_t)v26;
        while (1)
        {
          int v143 = v576;
          unint64_t v144 = v11;
          do
          {
            unsigned int v145 = *v15;
            if (v145 < 0xF8)
            {
              if (v145 < 8) {
                goto LABEL_217;
              }
              unsigned int v146 = (unsigned __int16)*v13;
              char v147 = *v8;
              char v148 = ~((*v141 * v145 + ((*v141 * v145) >> 8) + 1) >> 8);
            }
            else
            {
              unsigned int v146 = (unsigned __int16)*v13;
              char v147 = *v8;
              char v148 = ~*v141;
            }
            uint64_t result = PDAM(v146, v147, v148);
            *uint64_t v13 = result;
            *uint64_t v8 = BYTE3(result);
            unint64_t v11 = v144;
LABEL_217:
            v15 += v140;
            v8 += v602;
            unsigned int v149 = &v623[2 * v140];
            if ((unint64_t)v149 >= v11) {
              uint64_t v150 = v142;
            }
            else {
              uint64_t v150 = 0;
            }
            v141 += v617 + v150;
            uint64_t v623 = &v149[2 * v150];
            v13 += v140;
            --v143;
          }
          while (v143);
          if (v577)
          {
            char v151 = &v600[2 * v572];
            uint64_t v152 = v584;
            if ((unint64_t)v151 < v577) {
              uint64_t v152 = 0;
            }
            unsigned int v141 = &v599[v575 + v152];
            uint64_t v153 = v594;
            if ((unint64_t)v151 < v577) {
              uint64_t v153 = 0;
            }
            v11 += 2 * v153 + 2 * v572;
            v599 += v575 + v152;
            BOOL v600 = &v151[2 * v153];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v141 += v575;
          }
          v15 += v574;
          v13 += v573;
          v8 += v571;
          if (!--v601) {
            return result;
          }
        }
      }
      uint64_t v485 = v20;
      uint64_t v486 = -(uint64_t)v26;
      uint64_t v622 = -(uint64_t)(v572 * v25);
      uint64_t v610 = -(v575 * v25);
      BOOL v487 = v599;
      break;
    case 9:
      uint64_t v154 = v30;
      uint64_t v155 = v602;
      uint64_t v156 = v20;
      uint64_t v585 = -(uint64_t)(v572 * v25);
      uint64_t v595 = v602;
      uint64_t v553 = -(v575 * v25);
      uint64_t v157 = 2 * v30;
      int v158 = (char *)v599;
      uint64_t result = -(uint64_t)v26;
      uint64_t v618 = result;
      do
      {
        int v159 = v576;
        unint64_t v606 = v11;
        do
        {
          unsigned int v160 = *v15;
          if (v160 >= 8)
          {
            int v161 = *v8;
            uint64_t v162 = v154;
            uint64_t v163 = PDAM(*(unsigned __int16 *)v623, *v158, *v15);
            unsigned int v164 = PDAMplusDAM((unsigned __int16)v163, SBYTE3(v163), v161 ^ 0xFFu, (unsigned __int16)*v13, v161, (~(_BYTE)v160 + BYTE3(v163)));
            uint64_t v154 = v162;
            uint64_t v155 = v595;
            *uint64_t v13 = v164;
            unsigned int v165 = HIBYTE(v164);
            unint64_t v11 = v606;
            uint64_t result = v618;
            *uint64_t v8 = v165;
          }
          v15 += v154;
          v8 += v155;
          int v166 = &v623[2 * v154];
          if ((unint64_t)v166 >= v11) {
            uint64_t v167 = result;
          }
          else {
            uint64_t v167 = 0;
          }
          v158 += v156 + v167;
          uint64_t v623 = &v166[2 * v167];
          uint64_t v13 = (__int16 *)((char *)v13 + v157);
          --v159;
        }
        while (v159);
        if (v577)
        {
          unint64_t v168 = &v600[2 * v572];
          uint64_t v169 = v553;
          if ((unint64_t)v168 < v577) {
            uint64_t v169 = 0;
          }
          int v158 = (char *)&v599[v575 + v169];
          uint64_t v170 = v585;
          if ((unint64_t)v168 < v577) {
            uint64_t v170 = 0;
          }
          v11 += 2 * v170 + 2 * v572;
          v599 += v575 + v169;
          BOOL v600 = &v168[2 * v170];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v158 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 10:
      uint64_t v171 = v30;
      uint64_t v172 = v602;
      uint64_t v173 = v612;
      uint64_t v586 = -(v575 * v25);
      uint64_t v596 = -(uint64_t)(v572 * v25);
      uint64_t v174 = 2 * v30;
      unsigned int v175 = (char *)v599;
      uint64_t result = -(uint64_t)v26;
      uint64_t v619 = result;
      do
      {
        int v176 = v576;
        unint64_t v607 = v11;
        do
        {
          unsigned int v177 = *v15;
          if (v177 >= 8)
          {
            int v178 = *v8;
            uint64_t v179 = v171;
            unsigned int v180 = PDAM(*(unsigned __int16 *)v623, *v175, v177);
            unsigned int v181 = PDAMplusDAM((unsigned __int16)v180, SHIBYTE(v180), v178 ^ 0xFFu, (unsigned __int16)*v13, v178, HIBYTE(v180) ^ 0xFF);
            uint64_t v171 = v179;
            *uint64_t v13 = v181;
            unsigned int v182 = HIBYTE(v181);
            unint64_t v11 = v607;
            uint64_t result = v619;
            *uint64_t v8 = v182;
          }
          v15 += v171;
          v8 += v172;
          int v183 = &v623[2 * v171];
          if ((unint64_t)v183 >= v11) {
            uint64_t v184 = result;
          }
          else {
            uint64_t v184 = 0;
          }
          v175 += v173 + v184;
          uint64_t v623 = &v183[2 * v184];
          uint64_t v13 = (__int16 *)((char *)v13 + v174);
          --v176;
        }
        while (v176);
        if (v577)
        {
          char v185 = &v600[2 * v572];
          uint64_t v186 = v586;
          if ((unint64_t)v185 < v577) {
            uint64_t v186 = 0;
          }
          unsigned int v175 = (char *)&v599[v575 + v186];
          uint64_t v187 = v596;
          if ((unint64_t)v185 < v577) {
            uint64_t v187 = 0;
          }
          v11 += 2 * v187 + 2 * v572;
          v599 += v575 + v186;
          BOOL v600 = &v185[2 * v187];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v175 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 11:
      uint64_t v188 = v30;
      if (v602)
      {
        uint64_t v189 = v602;
        uint64_t v190 = v20;
        uint64_t v587 = -(uint64_t)(v572 * v25);
        uint64_t v554 = -(v575 * v25);
        int v191 = (char *)v599;
        uint64_t v192 = -(uint64_t)v26;
        do
        {
          int v193 = v576;
          unint64_t v194 = v11;
          do
          {
            unsigned int v195 = *v15;
            if (v195 >= 8)
            {
              if (v612) {
                char v196 = *v191;
              }
              else {
                char v196 = -1;
              }
              unsigned int v197 = PDAM(*(unsigned __int16 *)v623, v196, v195);
              uint64_t result = PDAplusdDA(*v13, *v8, v197, HIBYTE(v197));
              *uint64_t v13 = result;
              *uint64_t v8 = BYTE3(result);
              unint64_t v11 = v194;
              uint64_t v189 = v602;
              uint64_t v190 = v612;
            }
            v15 += v188;
            v8 += v189;
            __int16 v198 = &v623[2 * v188];
            if ((unint64_t)v198 >= v11) {
              uint64_t v199 = v192;
            }
            else {
              uint64_t v199 = 0;
            }
            v191 += v190 + v199;
            uint64_t v623 = &v198[2 * v199];
            v13 += v188;
            --v193;
          }
          while (v193);
          if (v577)
          {
            int v200 = &v600[2 * v572];
            uint64_t v201 = v554;
            if ((unint64_t)v200 < v577) {
              uint64_t v201 = 0;
            }
            int v191 = (char *)&v599[v575 + v201];
            uint64_t v202 = v587;
            if ((unint64_t)v200 < v577) {
              uint64_t v202 = 0;
            }
            v11 += 2 * v202 + 2 * v572;
            v599 += v575 + v201;
            BOOL v600 = &v200[2 * v202];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v191 += v575;
          }
          v15 += v574;
          v13 += v573;
          v8 += v571;
          --v601;
        }
        while (v601);
      }
      else
      {
        uint64_t v497 = -(uint64_t)v26;
        uint64_t v611 = -(uint64_t)(v572 * v25);
        uint64_t v597 = -(v575 * v25);
        __int16 v498 = (char *)v599;
        do
        {
          int v499 = v576;
          unint64_t v500 = v11;
          do
          {
            unsigned int v501 = *v15;
            if (v501 >= 8)
            {
              if (v612) {
                char v502 = *v498;
              }
              else {
                char v502 = -1;
              }
              unsigned int v503 = PDAM(*(unsigned __int16 *)v623, v502, v501);
              uint64_t result = PDplusdDA((unsigned __int16)*v13, v503, HIBYTE(v503));
              *uint64_t v13 = result;
              unint64_t v11 = v500;
            }
            v15 += v188;
            uint64_t v504 = &v623[2 * v188];
            if ((unint64_t)v504 >= v11) {
              uint64_t v505 = v497;
            }
            else {
              uint64_t v505 = 0;
            }
            v498 += v612 + v505;
            uint64_t v623 = &v504[2 * v505];
            v13 += v188;
            --v499;
          }
          while (v499);
          if (v577)
          {
            unint64_t v506 = &v600[2 * v572];
            uint64_t v507 = v597;
            if ((unint64_t)v506 < v577) {
              uint64_t v507 = 0;
            }
            __int16 v498 = (char *)&v599[v575 + v507];
            uint64_t v508 = v611;
            if ((unint64_t)v506 < v577) {
              uint64_t v508 = 0;
            }
            v11 += 2 * v508 + 2 * v572;
            v599 += v575 + v507;
            BOOL v600 = &v506[2 * v508];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v498 += v575;
          }
          v15 += v574;
          v13 += v573;
          --v601;
        }
        while (v601);
      }
      return result;
    case 12:
      uint64_t v203 = v30;
      if (v602)
      {
        uint64_t v204 = v602;
        uint64_t v205 = v20;
        uint64_t v588 = -(uint64_t)(v572 * v25);
        uint64_t v555 = -(v575 * v25);
        unsigned int v206 = (char *)v599;
        uint64_t v207 = -(uint64_t)v26;
        do
        {
          int v208 = v576;
          unint64_t v209 = v11;
          do
          {
            unsigned int v210 = *v15;
            if (v210 >= 8)
            {
              if (v612) {
                char v211 = *v206;
              }
              else {
                char v211 = -1;
              }
              unsigned int v212 = PDAM(*(unsigned __int16 *)v623, v211, v210);
              uint64_t result = PDApluslDA((unsigned __int16)*v13, *v8, (unsigned __int16)v212, HIBYTE(v212));
              *uint64_t v13 = result;
              *uint64_t v8 = BYTE3(result);
              unint64_t v11 = v209;
              uint64_t v204 = v602;
              uint64_t v205 = v612;
            }
            v15 += v203;
            v8 += v204;
            uint64_t v213 = &v623[2 * v203];
            if ((unint64_t)v213 >= v11) {
              uint64_t v214 = v207;
            }
            else {
              uint64_t v214 = 0;
            }
            v206 += v205 + v214;
            uint64_t v623 = &v213[2 * v214];
            v13 += v203;
            --v208;
          }
          while (v208);
          if (v577)
          {
            int v215 = &v600[2 * v572];
            uint64_t v216 = v555;
            if ((unint64_t)v215 < v577) {
              uint64_t v216 = 0;
            }
            unsigned int v206 = (char *)&v599[v575 + v216];
            uint64_t v217 = v588;
            if ((unint64_t)v215 < v577) {
              uint64_t v217 = 0;
            }
            v11 += 2 * v217 + 2 * v572;
            v599 += v575 + v216;
            BOOL v600 = &v215[2 * v217];
            uint64_t v623 = v600;
          }
          else
          {
            v623 += 2 * v572;
            v206 += v575;
          }
          v15 += v574;
          v13 += v573;
          v8 += v571;
          --v601;
        }
        while (v601);
      }
      else
      {
        uint64_t v509 = -(uint64_t)v26;
        uint64_t v510 = -(uint64_t)(v572 * v25);
        do
        {
          int v511 = v9;
          do
          {
            unsigned int v512 = *v15;
            if (v512 >= 8)
            {
              unint64_t v513 = v11;
              uint64_t result = PDM(*(unsigned __int16 *)v623, v512);
              unint64_t v11 = v513;
              unsigned int v514 = (((unsigned __int16)*v13 | ((unsigned __int16)*v13 << 15)) & 0x1F07C1F)
                   + ((result | (result << 15)) & 0x1F07C1F);
              *uint64_t v13 = (((30 * ((v514 >> 5) & 0x100401)) | (15 * ((v514 >> 5) & 0x100401)) | v514) >> 15) & 0x3E0 | ((30 * ((v514 >> 5) & 0x401)) | (15 * ((v514 >> 5) & 0x401)) | v514) & 0x7C1F;
            }
            v15 += v203;
            int v515 = &v623[2 * v203];
            if ((unint64_t)v515 >= v11) {
              uint64_t v516 = v509;
            }
            else {
              uint64_t v516 = 0;
            }
            uint64_t v623 = &v515[2 * v516];
            v13 += v203;
            --v511;
          }
          while (v511);
          v15 += v574;
          v13 += v573;
          uint64_t v517 = v600;
          v518 = &v600[2 * v572];
          if ((unint64_t)v518 >= v577) {
            uint64_t v519 = v510;
          }
          else {
            uint64_t v519 = 0;
          }
          uint64_t v520 = &v518[2 * v519];
          uint64_t v521 = v11 + 2 * v519 + 2 * v572;
          if (v577)
          {
            unint64_t v11 = v521;
            uint64_t v517 = v520;
          }
          BOOL v600 = v517;
          if (!v577) {
            uint64_t v520 = &v623[2 * v572];
          }
          uint64_t v623 = v520;
          --v601;
        }
        while (v601);
      }
      return result;
    case 13:
      uint64_t v218 = v30;
      uint64_t v535 = -(v575 * v25);
      uint64_t v556 = -(uint64_t)(v572 * v25);
      uint64_t v219 = 2 * v30;
      unint64_t v220 = v599;
      uint64_t v221 = -(uint64_t)v26;
      do
      {
        int v222 = v576;
        unint64_t v223 = v11;
        do
        {
          unsigned int v224 = *v15;
          if (v224 >= 8)
          {
            char v225 = v612 ? *v220 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v225, v224);
            unsigned int v227 = BYTE3(result);
            unint64_t v11 = v223;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v228 = *v8;
                if (v228 >= 8)
                {
                  uint64_t result = PDAmultiplyPDA((unsigned __int16)*v13, v228, (unsigned __int16)result, v227, v226);
                  unint64_t v11 = v223;
                  unsigned int v227 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v227;
              }
              else
              {
                uint64_t result = PDAmultiplyPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v227, v226);
                unint64_t v11 = v223;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v218;
          v8 += v602;
          int v229 = &v623[2 * v218];
          if ((unint64_t)v229 >= v11) {
            uint64_t v230 = v221;
          }
          else {
            uint64_t v230 = 0;
          }
          v220 += v612 + v230;
          uint64_t v623 = &v229[2 * v230];
          uint64_t v13 = (__int16 *)((char *)v13 + v219);
          --v222;
        }
        while (v222);
        if (v577)
        {
          uint64_t v231 = &v600[2 * v572];
          uint64_t v232 = v535;
          if ((unint64_t)v231 < v577) {
            uint64_t v232 = 0;
          }
          unint64_t v220 = &v599[v575 + v232];
          uint64_t v233 = v556;
          if ((unint64_t)v231 < v577) {
            uint64_t v233 = 0;
          }
          v11 += 2 * v233 + 2 * v572;
          v599 += v575 + v232;
          BOOL v600 = &v231[2 * v233];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v220 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 14:
      uint64_t v234 = v30;
      uint64_t v536 = -(v575 * v25);
      uint64_t v557 = -(uint64_t)(v572 * v25);
      uint64_t v235 = 2 * v30;
      v236 = v599;
      uint64_t v237 = -(uint64_t)v26;
      do
      {
        int v238 = v576;
        unint64_t v239 = v11;
        do
        {
          unsigned int v240 = *v15;
          if (v240 >= 8)
          {
            char v241 = v612 ? *v236 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v241, v240);
            unsigned int v242 = BYTE3(result);
            unint64_t v11 = v239;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v243 = *v8;
                if (v243 >= 8)
                {
                  uint64_t result = PDAscreenPDA((unsigned __int16)*v13, v243, (unsigned __int16)result, v242);
                  unint64_t v11 = v239;
                  unsigned int v242 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v242;
              }
              else
              {
                uint64_t result = PDAscreenPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v242);
                unint64_t v11 = v239;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v234;
          v8 += v602;
          uint64_t v244 = &v623[2 * v234];
          if ((unint64_t)v244 >= v11) {
            uint64_t v245 = v237;
          }
          else {
            uint64_t v245 = 0;
          }
          v236 += v612 + v245;
          uint64_t v623 = &v244[2 * v245];
          uint64_t v13 = (__int16 *)((char *)v13 + v235);
          --v238;
        }
        while (v238);
        if (v577)
        {
          unsigned int v246 = &v600[2 * v572];
          uint64_t v247 = v536;
          if ((unint64_t)v246 < v577) {
            uint64_t v247 = 0;
          }
          v236 = &v599[v575 + v247];
          uint64_t v248 = v557;
          if ((unint64_t)v246 < v577) {
            uint64_t v248 = 0;
          }
          v11 += 2 * v248 + 2 * v572;
          v599 += v575 + v247;
          BOOL v600 = &v246[2 * v248];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v236 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 15:
      uint64_t v249 = v30;
      uint64_t v537 = -(v575 * v25);
      uint64_t v558 = -(uint64_t)(v572 * v25);
      uint64_t v250 = 2 * v30;
      uint64_t v251 = v599;
      uint64_t v252 = -(uint64_t)v26;
      do
      {
        int v253 = v576;
        unint64_t v254 = v11;
        do
        {
          unsigned int v255 = *v15;
          if (v255 >= 8)
          {
            char v256 = v612 ? *v251 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v256, v255);
            unsigned int v257 = BYTE3(result);
            unint64_t v11 = v254;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v258 = *v8;
                if (v258 >= 8)
                {
                  uint64_t result = PDAoverlayPDA((unsigned __int16)*v13, v258, (unsigned __int16)result, v257);
                  unint64_t v11 = v254;
                  unsigned int v257 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v257;
              }
              else
              {
                uint64_t result = PDAoverlayPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v257);
                unint64_t v11 = v254;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v249;
          v8 += v602;
          uint64_t v259 = &v623[2 * v249];
          if ((unint64_t)v259 >= v11) {
            uint64_t v260 = v252;
          }
          else {
            uint64_t v260 = 0;
          }
          v251 += v612 + v260;
          uint64_t v623 = &v259[2 * v260];
          uint64_t v13 = (__int16 *)((char *)v13 + v250);
          --v253;
        }
        while (v253);
        if (v577)
        {
          int v261 = &v600[2 * v572];
          uint64_t v262 = v537;
          if ((unint64_t)v261 < v577) {
            uint64_t v262 = 0;
          }
          uint64_t v251 = &v599[v575 + v262];
          uint64_t v263 = v558;
          if ((unint64_t)v261 < v577) {
            uint64_t v263 = 0;
          }
          v11 += 2 * v263 + 2 * v572;
          v599 += v575 + v262;
          BOOL v600 = &v261[2 * v263];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v251 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 16:
      uint64_t v264 = v30;
      uint64_t v538 = -(v575 * v25);
      uint64_t v559 = -(uint64_t)(v572 * v25);
      uint64_t v265 = 2 * v30;
      v266 = v599;
      uint64_t v267 = -(uint64_t)v26;
      do
      {
        int v268 = v576;
        unint64_t v269 = v11;
        do
        {
          unsigned int v270 = *v15;
          if (v270 >= 8)
          {
            char v271 = v612 ? *v266 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v271, v270);
            unsigned int v272 = BYTE3(result);
            unint64_t v11 = v269;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v273 = *v8;
                if (v273 >= 8)
                {
                  uint64_t result = PDAdarkenPDA((unsigned __int16)*v13, v273, (unsigned __int16)result, v272);
                  unint64_t v11 = v269;
                  unsigned int v272 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v272;
              }
              else
              {
                uint64_t result = PDAdarkenPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v272);
                unint64_t v11 = v269;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v264;
          v8 += v602;
          uint64_t v274 = &v623[2 * v264];
          if ((unint64_t)v274 >= v11) {
            uint64_t v275 = v267;
          }
          else {
            uint64_t v275 = 0;
          }
          v266 += v612 + v275;
          uint64_t v623 = &v274[2 * v275];
          uint64_t v13 = (__int16 *)((char *)v13 + v265);
          --v268;
        }
        while (v268);
        if (v577)
        {
          uint64_t v276 = &v600[2 * v572];
          uint64_t v277 = v538;
          if ((unint64_t)v276 < v577) {
            uint64_t v277 = 0;
          }
          v266 = &v599[v575 + v277];
          uint64_t v278 = v559;
          if ((unint64_t)v276 < v577) {
            uint64_t v278 = 0;
          }
          v11 += 2 * v278 + 2 * v572;
          v599 += v575 + v277;
          BOOL v600 = &v276[2 * v278];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v266 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 17:
      uint64_t v279 = v30;
      uint64_t v539 = -(v575 * v25);
      uint64_t v560 = -(uint64_t)(v572 * v25);
      uint64_t v280 = 2 * v30;
      char v281 = v599;
      uint64_t v282 = -(uint64_t)v26;
      do
      {
        int v283 = v576;
        unint64_t v284 = v11;
        do
        {
          unsigned int v285 = *v15;
          if (v285 >= 8)
          {
            char v286 = v612 ? *v281 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v286, v285);
            unsigned int v287 = BYTE3(result);
            unint64_t v11 = v284;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v288 = *v8;
                if (v288 >= 8)
                {
                  uint64_t result = PDAlightenPDA((unsigned __int16)*v13, v288, (unsigned __int16)result, v287);
                  unint64_t v11 = v284;
                  unsigned int v287 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v287;
              }
              else
              {
                uint64_t result = PDAlightenPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v287);
                unint64_t v11 = v284;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v279;
          v8 += v602;
          unint64_t v289 = &v623[2 * v279];
          if ((unint64_t)v289 >= v11) {
            uint64_t v290 = v282;
          }
          else {
            uint64_t v290 = 0;
          }
          v281 += v612 + v290;
          uint64_t v623 = &v289[2 * v290];
          uint64_t v13 = (__int16 *)((char *)v13 + v280);
          --v283;
        }
        while (v283);
        if (v577)
        {
          uint64_t v291 = &v600[2 * v572];
          uint64_t v292 = v539;
          if ((unint64_t)v291 < v577) {
            uint64_t v292 = 0;
          }
          char v281 = &v599[v575 + v292];
          uint64_t v293 = v560;
          if ((unint64_t)v291 < v577) {
            uint64_t v293 = 0;
          }
          v11 += 2 * v293 + 2 * v572;
          v599 += v575 + v292;
          BOOL v600 = &v291[2 * v293];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v281 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 18:
      uint64_t v294 = v30;
      uint64_t v540 = -(v575 * v25);
      uint64_t v561 = -(uint64_t)(v572 * v25);
      uint64_t v295 = 2 * v30;
      unsigned int v296 = v599;
      uint64_t v297 = -(uint64_t)v26;
      do
      {
        int v298 = v576;
        unint64_t v299 = v11;
        do
        {
          unsigned int v300 = *v15;
          if (v300 >= 8)
          {
            char v301 = v612 ? *v296 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v301, v300);
            unsigned int v302 = BYTE3(result);
            unint64_t v11 = v299;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v303 = *v8;
                if (v303 >= 8)
                {
                  uint64_t result = PDAcolordodgePDA((unsigned __int16)*v13, v303, (unsigned __int16)result, v302);
                  unint64_t v11 = v299;
                  unsigned int v302 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v302;
              }
              else
              {
                uint64_t result = PDAcolordodgePDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v302);
                unint64_t v11 = v299;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v294;
          v8 += v602;
          v304 = &v623[2 * v294];
          if ((unint64_t)v304 >= v11) {
            uint64_t v305 = v297;
          }
          else {
            uint64_t v305 = 0;
          }
          v296 += v612 + v305;
          uint64_t v623 = &v304[2 * v305];
          uint64_t v13 = (__int16 *)((char *)v13 + v295);
          --v298;
        }
        while (v298);
        if (v577)
        {
          uint64_t v306 = &v600[2 * v572];
          uint64_t v307 = v540;
          if ((unint64_t)v306 < v577) {
            uint64_t v307 = 0;
          }
          unsigned int v296 = &v599[v575 + v307];
          uint64_t v308 = v561;
          if ((unint64_t)v306 < v577) {
            uint64_t v308 = 0;
          }
          v11 += 2 * v308 + 2 * v572;
          v599 += v575 + v307;
          BOOL v600 = &v306[2 * v308];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v296 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 19:
      uint64_t v309 = v30;
      uint64_t v541 = -(v575 * v25);
      uint64_t v562 = -(uint64_t)(v572 * v25);
      uint64_t v310 = 2 * v30;
      unsigned int v311 = v599;
      uint64_t v312 = -(uint64_t)v26;
      do
      {
        int v313 = v576;
        unint64_t v314 = v11;
        do
        {
          unsigned int v315 = *v15;
          if (v315 >= 8)
          {
            char v316 = v612 ? *v311 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v316, v315);
            unsigned int v317 = BYTE3(result);
            unint64_t v11 = v314;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v318 = *v8;
                if (v318 >= 8)
                {
                  uint64_t result = PDAcolorburnPDA((unsigned __int16)*v13, v318, (unsigned __int16)result, v317);
                  unint64_t v11 = v314;
                  unsigned int v317 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v317;
              }
              else
              {
                uint64_t result = PDAcolorburnPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v317);
                unint64_t v11 = v314;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v309;
          v8 += v602;
          uint64_t v319 = &v623[2 * v309];
          if ((unint64_t)v319 >= v11) {
            uint64_t v320 = v312;
          }
          else {
            uint64_t v320 = 0;
          }
          v311 += v612 + v320;
          uint64_t v623 = &v319[2 * v320];
          uint64_t v13 = (__int16 *)((char *)v13 + v310);
          --v313;
        }
        while (v313);
        if (v577)
        {
          unint64_t v321 = &v600[2 * v572];
          uint64_t v322 = v541;
          if ((unint64_t)v321 < v577) {
            uint64_t v322 = 0;
          }
          unsigned int v311 = &v599[v575 + v322];
          uint64_t v323 = v562;
          if ((unint64_t)v321 < v577) {
            uint64_t v323 = 0;
          }
          v11 += 2 * v323 + 2 * v572;
          v599 += v575 + v322;
          BOOL v600 = &v321[2 * v323];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v311 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 20:
      uint64_t v324 = v30;
      uint64_t v542 = -(v575 * v25);
      uint64_t v563 = -(uint64_t)(v572 * v25);
      uint64_t v325 = 2 * v30;
      unint64_t v326 = v599;
      uint64_t v327 = -(uint64_t)v26;
      do
      {
        int v328 = v576;
        unint64_t v329 = v11;
        do
        {
          unsigned int v330 = *v15;
          if (v330 >= 8)
          {
            char v331 = v612 ? *v326 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v331, v330);
            unsigned int v332 = BYTE3(result);
            unint64_t v11 = v329;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v333 = *v8;
                if (v333 >= 8)
                {
                  uint64_t result = PDAsoftlightPDA((unsigned __int16)*v13, v333, (unsigned __int16)result, v332);
                  unint64_t v11 = v329;
                  unsigned int v332 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v332;
              }
              else
              {
                uint64_t result = PDAsoftlightPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v332);
                unint64_t v11 = v329;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v324;
          v8 += v602;
          unint64_t v334 = &v623[2 * v324];
          if ((unint64_t)v334 >= v11) {
            uint64_t v335 = v327;
          }
          else {
            uint64_t v335 = 0;
          }
          v326 += v612 + v335;
          uint64_t v623 = &v334[2 * v335];
          uint64_t v13 = (__int16 *)((char *)v13 + v325);
          --v328;
        }
        while (v328);
        if (v577)
        {
          uint64_t v336 = &v600[2 * v572];
          uint64_t v337 = v542;
          if ((unint64_t)v336 < v577) {
            uint64_t v337 = 0;
          }
          unint64_t v326 = &v599[v575 + v337];
          uint64_t v338 = v563;
          if ((unint64_t)v336 < v577) {
            uint64_t v338 = 0;
          }
          v11 += 2 * v338 + 2 * v572;
          v599 += v575 + v337;
          BOOL v600 = &v336[2 * v338];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v326 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 21:
      uint64_t v339 = v30;
      uint64_t v543 = -(v575 * v25);
      uint64_t v564 = -(uint64_t)(v572 * v25);
      uint64_t v340 = 2 * v30;
      unint64_t v341 = v599;
      uint64_t v342 = -(uint64_t)v26;
      do
      {
        int v343 = v576;
        unint64_t v344 = v11;
        do
        {
          unsigned int v345 = *v15;
          if (v345 >= 8)
          {
            char v346 = v612 ? *v341 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v346, v345);
            unsigned int v347 = BYTE3(result);
            unint64_t v11 = v344;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v348 = *v8;
                if (v348 >= 8)
                {
                  uint64_t result = PDAhardlightPDA((unsigned __int16)*v13, v348, (unsigned __int16)result, v347);
                  unint64_t v11 = v344;
                  unsigned int v347 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v347;
              }
              else
              {
                uint64_t result = PDAhardlightPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v347);
                unint64_t v11 = v344;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v339;
          v8 += v602;
          v349 = &v623[2 * v339];
          if ((unint64_t)v349 >= v11) {
            uint64_t v350 = v342;
          }
          else {
            uint64_t v350 = 0;
          }
          v341 += v612 + v350;
          uint64_t v623 = &v349[2 * v350];
          uint64_t v13 = (__int16 *)((char *)v13 + v340);
          --v343;
        }
        while (v343);
        if (v577)
        {
          uint64_t v351 = &v600[2 * v572];
          uint64_t v352 = v543;
          if ((unint64_t)v351 < v577) {
            uint64_t v352 = 0;
          }
          unint64_t v341 = &v599[v575 + v352];
          uint64_t v353 = v564;
          if ((unint64_t)v351 < v577) {
            uint64_t v353 = 0;
          }
          v11 += 2 * v353 + 2 * v572;
          v599 += v575 + v352;
          BOOL v600 = &v351[2 * v353];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v341 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 22:
      uint64_t v354 = v30;
      uint64_t v544 = -(v575 * v25);
      uint64_t v565 = -(uint64_t)(v572 * v25);
      uint64_t v355 = 2 * v30;
      unsigned int v356 = v599;
      uint64_t v357 = -(uint64_t)v26;
      do
      {
        int v358 = v576;
        unint64_t v359 = v11;
        do
        {
          unsigned int v360 = *v15;
          if (v360 >= 8)
          {
            char v361 = v612 ? *v356 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v361, v360);
            unsigned int v362 = BYTE3(result);
            unint64_t v11 = v359;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v363 = *v8;
                if (v363 >= 8)
                {
                  uint64_t result = PDAdifferencePDA((unsigned __int16)*v13, v363, (unsigned __int16)result, v362);
                  unint64_t v11 = v359;
                  unsigned int v362 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v362;
              }
              else
              {
                uint64_t result = PDAdifferencePDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v362);
                unint64_t v11 = v359;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v354;
          v8 += v602;
          unint64_t v364 = &v623[2 * v354];
          if ((unint64_t)v364 >= v11) {
            uint64_t v365 = v357;
          }
          else {
            uint64_t v365 = 0;
          }
          v356 += v612 + v365;
          uint64_t v623 = &v364[2 * v365];
          uint64_t v13 = (__int16 *)((char *)v13 + v355);
          --v358;
        }
        while (v358);
        if (v577)
        {
          uint64_t v366 = &v600[2 * v572];
          uint64_t v367 = v544;
          if ((unint64_t)v366 < v577) {
            uint64_t v367 = 0;
          }
          unsigned int v356 = &v599[v575 + v367];
          uint64_t v368 = v565;
          if ((unint64_t)v366 < v577) {
            uint64_t v368 = 0;
          }
          v11 += 2 * v368 + 2 * v572;
          v599 += v575 + v367;
          BOOL v600 = &v366[2 * v368];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v356 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 23:
      uint64_t v369 = v30;
      uint64_t v545 = -(v575 * v25);
      uint64_t v566 = -(uint64_t)(v572 * v25);
      uint64_t v370 = 2 * v30;
      uint64_t v371 = v599;
      uint64_t v372 = -(uint64_t)v26;
      do
      {
        int v373 = v576;
        unint64_t v374 = v11;
        do
        {
          unsigned int v375 = *v15;
          if (v375 >= 8)
          {
            char v376 = v612 ? *v371 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v376, v375);
            unsigned int v377 = BYTE3(result);
            unint64_t v11 = v374;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v378 = *v8;
                if (v378 >= 8)
                {
                  uint64_t result = PDAexclusionPDA((unsigned __int16)*v13, v378, (unsigned __int16)result, v377);
                  unint64_t v11 = v374;
                  unsigned int v377 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v377;
              }
              else
              {
                uint64_t result = PDAexclusionPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v377);
                unint64_t v11 = v374;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v369;
          v8 += v602;
          uint64_t v379 = &v623[2 * v369];
          if ((unint64_t)v379 >= v11) {
            uint64_t v380 = v372;
          }
          else {
            uint64_t v380 = 0;
          }
          v371 += v612 + v380;
          uint64_t v623 = &v379[2 * v380];
          uint64_t v13 = (__int16 *)((char *)v13 + v370);
          --v373;
        }
        while (v373);
        if (v577)
        {
          uint64_t v381 = &v600[2 * v572];
          uint64_t v382 = v545;
          if ((unint64_t)v381 < v577) {
            uint64_t v382 = 0;
          }
          uint64_t v371 = &v599[v575 + v382];
          uint64_t v383 = v566;
          if ((unint64_t)v381 < v577) {
            uint64_t v383 = 0;
          }
          v11 += 2 * v383 + 2 * v572;
          v599 += v575 + v382;
          BOOL v600 = &v381[2 * v383];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v371 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 24:
      uint64_t v384 = v30;
      uint64_t v546 = -(v575 * v25);
      uint64_t v567 = -(uint64_t)(v572 * v25);
      uint64_t v385 = 2 * v30;
      __int16 v386 = v599;
      uint64_t v387 = -(uint64_t)v26;
      do
      {
        int v388 = v576;
        unint64_t v389 = v11;
        do
        {
          unsigned int v390 = *v15;
          if (v390 >= 8)
          {
            char v391 = v612 ? *v386 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v391, v390);
            unsigned int v392 = BYTE3(result);
            unint64_t v11 = v389;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v393 = *v8;
                if (v393 >= 8)
                {
                  uint64_t result = PDAhuePDA((unsigned __int16)*v13, v393, (unsigned __int16)result, v392);
                  unint64_t v11 = v389;
                  unsigned int v392 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v392;
              }
              else
              {
                uint64_t result = PDAhuePDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v392);
                unint64_t v11 = v389;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v384;
          v8 += v602;
          unint64_t v394 = &v623[2 * v384];
          if ((unint64_t)v394 >= v11) {
            uint64_t v395 = v387;
          }
          else {
            uint64_t v395 = 0;
          }
          v386 += v612 + v395;
          uint64_t v623 = &v394[2 * v395];
          uint64_t v13 = (__int16 *)((char *)v13 + v385);
          --v388;
        }
        while (v388);
        if (v577)
        {
          int v396 = &v600[2 * v572];
          uint64_t v397 = v546;
          if ((unint64_t)v396 < v577) {
            uint64_t v397 = 0;
          }
          __int16 v386 = &v599[v575 + v397];
          uint64_t v398 = v567;
          if ((unint64_t)v396 < v577) {
            uint64_t v398 = 0;
          }
          v11 += 2 * v398 + 2 * v572;
          v599 += v575 + v397;
          BOOL v600 = &v396[2 * v398];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v386 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 25:
      uint64_t v399 = v30;
      uint64_t v547 = -(v575 * v25);
      uint64_t v568 = -(uint64_t)(v572 * v25);
      uint64_t v400 = 2 * v30;
      unsigned int v401 = v599;
      uint64_t v402 = -(uint64_t)v26;
      do
      {
        int v403 = v576;
        unint64_t v404 = v11;
        do
        {
          unsigned int v405 = *v15;
          if (v405 >= 8)
          {
            char v406 = v612 ? *v401 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v406, v405);
            unsigned int v407 = BYTE3(result);
            unint64_t v11 = v404;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v408 = *v8;
                if (v408 >= 8)
                {
                  uint64_t result = PDAsaturationPDA((unsigned __int16)*v13, v408, (unsigned __int16)result, v407);
                  unint64_t v11 = v404;
                  unsigned int v407 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v407;
              }
              else
              {
                uint64_t result = PDAsaturationPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v407);
                unint64_t v11 = v404;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v399;
          v8 += v602;
          v409 = &v623[2 * v399];
          if ((unint64_t)v409 >= v11) {
            uint64_t v410 = v402;
          }
          else {
            uint64_t v410 = 0;
          }
          v401 += v612 + v410;
          uint64_t v623 = &v409[2 * v410];
          uint64_t v13 = (__int16 *)((char *)v13 + v400);
          --v403;
        }
        while (v403);
        if (v577)
        {
          uint64_t v411 = &v600[2 * v572];
          uint64_t v412 = v547;
          if ((unint64_t)v411 < v577) {
            uint64_t v412 = 0;
          }
          unsigned int v401 = &v599[v575 + v412];
          uint64_t v413 = v568;
          if ((unint64_t)v411 < v577) {
            uint64_t v413 = 0;
          }
          v11 += 2 * v413 + 2 * v572;
          v599 += v575 + v412;
          BOOL v600 = &v411[2 * v413];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v401 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 26:
      uint64_t v414 = v30;
      uint64_t v548 = -(v575 * v25);
      uint64_t v569 = -(uint64_t)(v572 * v25);
      uint64_t v415 = 2 * v30;
      unsigned int v416 = v599;
      uint64_t v417 = -(uint64_t)v26;
      do
      {
        int v418 = v576;
        unint64_t v419 = v11;
        do
        {
          unsigned int v420 = *v15;
          if (v420 >= 8)
          {
            char v421 = v612 ? *v416 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v421, v420);
            unsigned int v422 = BYTE3(result);
            unint64_t v11 = v419;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v423 = *v8;
                if (v423 >= 8)
                {
                  uint64_t result = PDAluminosityPDA((unsigned __int16)result, v422, (unsigned __int16)*v13, v423);
                  unint64_t v11 = v419;
                  unsigned int v422 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v422;
              }
              else
              {
                uint64_t result = PDAluminosityPDA((unsigned __int16)result, v422, (unsigned __int16)*v13, 0xFFu);
                unint64_t v11 = v419;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v414;
          v8 += v602;
          uint64_t v424 = &v623[2 * v414];
          if ((unint64_t)v424 >= v11) {
            uint64_t v425 = v417;
          }
          else {
            uint64_t v425 = 0;
          }
          v416 += v612 + v425;
          uint64_t v623 = &v424[2 * v425];
          uint64_t v13 = (__int16 *)((char *)v13 + v415);
          --v418;
        }
        while (v418);
        if (v577)
        {
          unint64_t v426 = &v600[2 * v572];
          uint64_t v427 = v548;
          if ((unint64_t)v426 < v577) {
            uint64_t v427 = 0;
          }
          unsigned int v416 = &v599[v575 + v427];
          uint64_t v428 = v569;
          if ((unint64_t)v426 < v577) {
            uint64_t v428 = 0;
          }
          v11 += 2 * v428 + 2 * v572;
          v599 += v575 + v427;
          BOOL v600 = &v426[2 * v428];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v416 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 27:
      uint64_t v429 = v30;
      uint64_t v549 = -(v575 * v25);
      uint64_t v570 = -(uint64_t)(v572 * v25);
      uint64_t v430 = 2 * v30;
      int v431 = v599;
      uint64_t v432 = -(uint64_t)v26;
      do
      {
        int v433 = v576;
        unint64_t v434 = v11;
        do
        {
          unsigned int v435 = *v15;
          if (v435 >= 8)
          {
            char v436 = v612 ? *v431 : -1;
            uint64_t result = PDAM(*(unsigned __int16 *)v623, v436, v435);
            unsigned int v437 = BYTE3(result);
            unint64_t v11 = v434;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                unsigned int v438 = *v8;
                if (v438 >= 8)
                {
                  uint64_t result = PDAluminosityPDA((unsigned __int16)*v13, v438, (unsigned __int16)result, v437);
                  unint64_t v11 = v434;
                  unsigned int v437 = BYTE3(result);
                }
                *uint64_t v13 = result;
                *uint64_t v8 = v437;
              }
              else
              {
                uint64_t result = PDAluminosityPDA((unsigned __int16)*v13, 0xFFu, (unsigned __int16)result, v437);
                unint64_t v11 = v434;
                *uint64_t v13 = result;
              }
            }
          }
          v15 += v429;
          v8 += v602;
          BOOL v439 = &v623[2 * v429];
          if ((unint64_t)v439 >= v11) {
            uint64_t v440 = v432;
          }
          else {
            uint64_t v440 = 0;
          }
          v431 += v612 + v440;
          uint64_t v623 = &v439[2 * v440];
          uint64_t v13 = (__int16 *)((char *)v13 + v430);
          --v433;
        }
        while (v433);
        if (v577)
        {
          v441 = &v600[2 * v572];
          uint64_t v442 = v549;
          if ((unint64_t)v441 < v577) {
            uint64_t v442 = 0;
          }
          int v431 = &v599[v575 + v442];
          uint64_t v443 = v570;
          if ((unint64_t)v441 < v577) {
            uint64_t v443 = 0;
          }
          v11 += 2 * v443 + 2 * v572;
          v599 += v575 + v442;
          BOOL v600 = &v441[2 * v443];
          uint64_t v623 = v600;
        }
        else
        {
          v623 += 2 * v572;
          v431 += v575;
        }
        v15 += v574;
        v13 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    default:
      return result;
  }
  do
  {
    int v488 = v576;
    unint64_t v489 = v11;
    do
    {
      unsigned int v490 = *v15;
      if (v490 < 0xF8)
      {
        if (v490 < 8) {
          goto LABEL_763;
        }
        unsigned int v491 = (*v487 * v490 + ((*v487 * v490) >> 8) + 1) >> 8;
      }
      else
      {
        LOBYTE(v491) = *v487;
      }
      uint64_t result = PDM((unsigned __int16)*v13, ~(_BYTE)v491);
      *uint64_t v13 = result;
      unint64_t v11 = v489;
LABEL_763:
      v15 += v140;
      int v492 = &v623[2 * v140];
      if ((unint64_t)v492 >= v11) {
        uint64_t v493 = v486;
      }
      else {
        uint64_t v493 = 0;
      }
      v487 += v485 + v493;
      uint64_t v623 = &v492[2 * v493];
      v13 += v140;
      --v488;
    }
    while (v488);
    if (v577)
    {
      uint64_t v494 = &v600[2 * v572];
      uint64_t v495 = v610;
      if ((unint64_t)v494 < v577) {
        uint64_t v495 = 0;
      }
      BOOL v487 = &v599[v575 + v495];
      uint64_t v496 = v622;
      if ((unint64_t)v494 < v577) {
        uint64_t v496 = 0;
      }
      v11 += 2 * v496 + 2 * v572;
      v599 += v575 + v495;
      BOOL v600 = &v494[2 * v496];
      uint64_t v623 = v600;
    }
    else
    {
      v623 += 2 * v572;
      v487 += v575;
    }
    v15 += v574;
    v13 += v573;
    --v601;
  }
  while (v601);
  return result;
}

void *rgb555_pattern(uint64_t a1, void *a2, unsigned int a3, int a4, float *a5, int a6, float a7)
{
  unint64_t v11 = *(float **)(*(void *)a1 + 64);
  float v12 = *v11;
  float v13 = v11[1];
  float v14 = v11[3];
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    float v15 = v13;
    if (v13 >= a7)
    {
      float v15 = a7;
      if (v12 > a7) {
        float v15 = v12;
      }
    }
    float v16 = v15 * v11[2];
    if (a5) {
      int v17 = a4;
    }
    else {
      int v17 = 0;
    }
    if (v17 == 1)
    {
      if (*a5 < v12) {
        float v30 = v12;
      }
      else {
        float v30 = *a5;
      }
      if (*a5 <= v13) {
        float v31 = v30;
      }
      else {
        float v31 = v13;
      }
      uint64_t v18 = (int)(float)(v14 + (float)(v31 * v16));
      int v19 = (int)(float)(v14 + (float)(v31 * v16));
      int v20 = v19;
      goto LABEL_74;
    }
    if (v17 == 4)
    {
      float v32 = a5[4];
      float v33 = *a5;
      float v34 = a5[1];
      float v35 = a5[2];
      if (v32 < v12) {
        float v36 = v12;
      }
      else {
        float v36 = a5[4];
      }
      if (v32 <= v13) {
        float v37 = v36;
      }
      else {
        float v37 = v13;
      }
      if (v33 < v12) {
        float v38 = v12;
      }
      else {
        float v38 = *a5;
      }
      if (v33 <= v13) {
        float v39 = v38;
      }
      else {
        float v39 = v13;
      }
      if (v34 < v12) {
        float v40 = v12;
      }
      else {
        float v40 = a5[1];
      }
      if (v34 <= v13) {
        float v41 = v40;
      }
      else {
        float v41 = v13;
      }
      if (v35 < v12) {
        float v42 = v12;
      }
      else {
        float v42 = a5[2];
      }
      if (v35 <= v13) {
        float v43 = v42;
      }
      else {
        float v43 = v13;
      }
      float v44 = (float)(v13 - v39) - v37;
      float v45 = (float)(v13 - v41) - v37;
      float v46 = (float)(v13 - v43) - v37;
      if (v44 >= v12) {
        float v47 = v14 + (float)(v44 * v16);
      }
      else {
        float v47 = v12;
      }
      if (v45 >= v12) {
        float v48 = v14 + (float)(v45 * v16);
      }
      else {
        float v48 = v12;
      }
      if (v46 >= v12) {
        float v29 = v14 + (float)(v46 * v16);
      }
      else {
        float v29 = v12;
      }
      uint64_t v18 = (int)v47;
      int v19 = (int)v48;
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 0;
      int v20 = 0;
      if (v17 != 3)
      {
LABEL_74:
        uint64_t v49 = (int)(float)(v14 + v16);
        if (a6 && (v18 | v49) | (v19 | v20))
        {
          *(_OWORD *)a2 = xmmword_1850CDA50;
          a2[2] = 0x2000000010;
          a2[6] = (v18 << 32) | (v49 << 48) | ((uint64_t)v19 << 16) | v20;
          *((_DWORD *)a2 + 6) = 16 * ((int)v49 < 7936);
          if ((int)v49 >= 7936) {
            unint64_t v50 = 0;
          }
          else {
            unint64_t v50 = (char *)(a2 + 6);
          }
          a2[4] = a2 + 6;
          a2[5] = v50;
        }
        else
        {
          unsigned int v51 = (4 * (_WORD)v18 + 512) & 0x7C00 | ((v19 + 128) >> 3) & 0x3E0 | ((v20 + 128) >> 8) & 0x1F;
          *(_OWORD *)a2 = xmmword_1850CDA60;
          *((_DWORD *)a2 + 6) = 0;
          a2[2] = 1;
          *((_DWORD *)a2 + 12) = v51 | (v51 << 16);
          a2[4] = a2 + 6;
          if ((int)v49 > 7807)
          {
            a2[5] = 0;
          }
          else
          {
            *((_DWORD *)a2 + 13) = 16843009
                                 * (((v49 + 128) >> 5) & 0xF8 | ((v49 + 128) >> 10) & 7);
            a2[5] = (char *)a2 + 52;
          }
        }
        return a2;
      }
      float v21 = a5[1];
      float v22 = a5[2];
      if (*a5 < v12) {
        float v23 = v12;
      }
      else {
        float v23 = *a5;
      }
      if (*a5 <= v13) {
        float v24 = v23;
      }
      else {
        float v24 = v13;
      }
      if (v21 < v12) {
        float v25 = v12;
      }
      else {
        float v25 = a5[1];
      }
      if (v21 <= v13) {
        float v26 = v25;
      }
      else {
        float v26 = v13;
      }
      if (v22 < v12) {
        float v27 = v12;
      }
      else {
        float v27 = a5[2];
      }
      if (v22 <= v13) {
        float v28 = v27;
      }
      else {
        float v28 = v13;
      }
      uint64_t v18 = (int)(float)(v14 + (float)(v24 * v16));
      int v19 = (int)(float)(v14 + (float)(v26 * v16));
      float v29 = v14 + (float)(v28 * v16);
    }
    int v20 = (int)v29;
    goto LABEL_74;
  }
  return a2;
}

uint64_t RGB555_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2 = (uint64_t *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t)v3;
  BOOL v7 = 0;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *v2;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  *(_OWORD *)float v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *v3;
  if (!*((void *)v3 + 12))
  {
    if (*(void *)(v4 + 72)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(float *)(v4 + 4) >= 1.0;
    }
  }
  int v43 = 0;
  memset(v42, 0, sizeof(v42));
  int v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((void *)v3 + 6) == 0));
  if (v11 > 27) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(void *)(v5 + 16))
    {
      float v14 = rgb555_shade_radial_RGB;
    }
    else if (*(void *)(v5 + 24))
    {
      float v14 = rgb555_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      float v14 = rgb555_shade_axial_RGB;
    }
    else
    {
      float v14 = rgb555_shade_custom_RGB;
    }
    *(void *)&v17[0] = v14;
    if ((void)v40)
    {
      *((void *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 1, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    unint64_t v15 = *((void *)&v19 + 1) * v19;
    if ((uint64_t)(*((void *)&v19 + 1) * v19) <= 480)
    {
      float v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 1, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(unsigned char *)(v5 + 1)) {
        *(void *)&long long v39 = &_blt_shade_samples_noise;
      }
      goto LABEL_29;
    }
    float v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      unint64_t v15 = *((void *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)&v17[0]) {
    return 0xFFFFFFFFLL;
  }
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  RGB555_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1])) {
    free(v38[1]);
  }
  return 1;
}

void RGB555_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v378 = a3;
  uint64_t v396 = *MEMORY[0x1E4F143B8];
  uint64_t v394 = *(unsigned int *)(a1 + 4);
  uint64_t v377 = (int)v394;
  unint64_t v4 = ((int)v394 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    float v8 = *(float *)(a2 + 184);
    char v391 = *(int **)(a1 + 136);
    uint64_t v392 = v6;
    uint64_t v9 = *(void *)(a2 + 104);
    uint64_t v388 = *(void *)(a2 + 96);
    uint64_t v389 = v9;
    uint64_t v11 = *(int *)(a1 + 24);
    unint64_t v10 = *(int *)(a1 + 28);
    uint64_t v12 = *(int *)(a1 + 16);
    uint64_t v13 = *(int *)(a1 + 20);
    uint64_t v14 = *(int *)(a1 + 12);
    int v387 = *(_DWORD *)(a1 + 8);
    __int16 v386 = (void *)a2;
    uint64_t v15 = *(int *)(a2 + 16);
    uint64_t v16 = (v15 + 6) * v4;
    if (v16 > 65439)
    {
      long long v19 = (char *)malloc_type_calloc(1uLL, v16 + 96, 0x3023562EuLL);
      long long v18 = v19;
      long long v21 = v19;
      long long v22 = v386;
      if (!v19) {
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](a1, a4);
      long long v18 = (char *)&v371 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v18, v17);
      long long v21 = 0;
      long long v22 = v386;
    }
    uint64_t v23 = v13;
    int v373 = v21;
    unsigned int v393 = (int)(float)((float)(v8 * 255.0) + 0.5);
    unint64_t v24 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v25 = v24 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22[20] = v25;
    if (v15) {
      uint64_t v26 = 4 * v4;
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = v25 + v26;
    uint64_t v28 = v7 + (v11 - 1) * v10;
    unint64_t v29 = v10 >> 1;
    v22[18] = v24;
    v22[19] = v27;
    if (v392)
    {
      uint64_t v30 = *(int *)(a1 + 32);
      uint64_t v31 = a1;
      long long v32 = (char *)(v392 + v14 + (int)v30 * (uint64_t)(int)v12);
      uint64_t v385 = v30 - v377;
      uint64_t v33 = v377;
      uint64_t v395 = 1;
    }
    else
    {
      uint64_t v31 = a1;
      long long v32 = 0;
      uint64_t v385 = 0;
      uint64_t v395 = 0;
      uint64_t v33 = v377;
    }
    uint64_t v34 = v28 + 2 * v23;
    long long v35 = (_WORD *)(v7 + 2 * (v14 + v29 * v12));
    uint64_t v384 = v29 - v33;
    uint64_t v36 = *(int *)(v31 + 104);
    int v37 = *(_DWORD *)(v31 + 108);
    uint64_t v382 = v31;
    int v38 = *(unsigned __int8 *)(v31 + 2);
    int v39 = v378;
    if (v38 == 6 || v38 == 1)
    {
      long long v40 = v386;
      uint64_t v41 = v388;
      uint64_t v42 = v389;
      if (!v391) {
        goto LABEL_717;
      }
      unint64_t v371 = v29;
      int v43 = 0;
      int v44 = 0;
      uint64_t v45 = *(int *)(v382 + 124);
      float v46 = (unsigned __int8 *)v391 + v36 + (int)v45 * (uint64_t)v37;
      uint64_t v33 = v377;
      uint64_t v383 = v45 - v377;
      goto LABEL_21;
    }
    uint64_t v41 = v388;
    uint64_t v42 = v389;
    if (!v391)
    {
      unint64_t v371 = v29;
      float v46 = 0;
      int v43 = 0;
      uint64_t v383 = 0;
      int v44 = 0;
      long long v40 = v386;
LABEL_21:
      uint64_t v51 = v394;
LABEL_32:
      int32x2_t v56 = vdup_n_s32(v393);
      uint64_t v375 = (v51 - 1) + 1;
      uint64_t v374 = -v33;
      uint64_t v372 = v34;
      unint64_t v376 = v34 - 2;
      uint32x4_t v381 = (uint32x4_t)xmmword_1850CD930;
      uint32x4_t v380 = (uint32x4_t)xmmword_1850CD940;
      int8x16_t v379 = (int8x16_t)xmmword_1850CD950;
      uint64_t v57 = v43;
      while (2)
      {
        int v43 = v57;
        uint64_t v58 = (void (*)(void *, uint64_t, uint64_t, uint64_t))*v40;
        uint64_t v388 = v41;
        uint64_t v389 = v42;
        v58(v40, v41, v42, v51);
        uint64_t v60 = (unsigned __int16 *)v40[20];
        int v61 = (unsigned __int8 *)v40[18];
        unsigned int v63 = *((_DWORD *)v40 + 2);
        int v62 = *((_DWORD *)v40 + 3);
        unsigned int v390 = v43;
        LODWORD(v391) = v44;
        if (v63 == v62)
        {
          if (v393 > 0xF7) {
            goto LABEL_165;
          }
          int v64 = v51;
          char v65 = v61;
          do
          {
            if (*v65 >= 8u) {
              *(_DWORD *)uint64_t v60 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v393);
            }
            ++v65;
            v60 += 2;
            --v64;
          }
          while (v64);
          v60 += 2 * v374;
          v61 += v375 + v374;
          goto LABEL_40;
        }
        int v66 = v44;
        uint64_t v67 = v40[19];
        int v68 = *(_DWORD *)(v382 + 12);
        int v69 = *(_DWORD *)(v382 + 16) + v66;
        int v70 = HIWORD(v63) & 0x3F;
        if (v70 == 16)
        {
          uint64_t v88 = v40[21];
          if (!v88)
          {
            if (v393 >= 0xF8)
            {
              uint64_t v310 = 0;
              do
              {
                if (v61[v310] >= 8u)
                {
                  unint64_t v311 = *(void *)(v67 + 8 * v310);
                  *(_DWORD *)&v60[2 * v310] = (v311 >> 1) & 0x7C00 | (32 * (v311 >> 27)) & 0xFFFFFF | (v311 >> 43) & 0x1F | (HIBYTE(v311) >> 3 << 27) | (((HIBYTE(v311) >> 5) & 7) << 24);
                }
                ++v310;
              }
              while (v51 != v310);
            }
            else
            {
              uint64_t v111 = 0;
              do
              {
                if (v61[v111] >= 8u) {
                  *(_DWORD *)&v60[2 * v111] = PDAM((*(void *)(v67 + 8 * v111) >> 1) & 0x7C00 | (32 * (*(void *)(v67 + 8 * v111) >> 27)) | (*(void *)(v67 + 8 * v111) >> 43) & 0x1F, HIBYTE(*(void *)(v67 + 8 * v111)), v393);
                }
                ++v111;
              }
              while (v51 != v111);
              long long v40 = v386;
            }
            goto LABEL_164;
          }
          if (v68 <= 0) {
            unsigned int v89 = -(-v68 & 0xF);
          }
          else {
            unsigned int v89 = *(_DWORD *)(v382 + 12) & 0xF;
          }
          BOOL v73 = -v69 < 0;
          int v90 = -v69 & 0xF;
          int v91 = v69 & 0xF;
          if (!v73) {
            int v91 = -v90;
          }
          uint64_t v92 = v88 + 16 * v91;
          if (v393 >= 0xF8)
          {
            uint64_t v127 = 0;
            do
            {
              if (v61[v127] >= 8u) {
                *(_DWORD *)&v60[2 * v127] = DITHERRGBA32((HIBYTE(*(void *)(v67 + 8 * v127)) | (BYTE3(*(void *)(v67 + 8 * v127)) << 16)) & 0xFFFFFF | (BYTE1(*(void *)(v67 + 8 * v127)) << 24) | HIDWORD(*(void *)(v67 + 8 * v127)) & 0xFF00, *(unsigned __int8 *)(v92 + v89));
              }
              unsigned int v89 = ((_BYTE)v89 + 1) & 0xF;
              ++v127;
            }
            while (v394 != v127);
          }
          else
          {
            uint64_t v93 = 0;
            do
            {
              if (v61[v93] >= 8u) {
                *(_DWORD *)&v60[2 * v93] = DITHERRGBA32M((HIBYTE(*(void *)(v67 + 8 * v93)) | (BYTE3(*(void *)(v67 + 8 * v93)) << 16)) & 0xFFFFFF | (BYTE1(*(void *)(v67 + 8 * v93)) << 24) | HIDWORD(*(void *)(v67 + 8 * v93)) & 0xFF00, *(unsigned __int8 *)(v92 + v89), v393);
              }
              unsigned int v89 = ((_BYTE)v89 + 1) & 0xF;
              ++v93;
            }
            while (v394 != v93);
          }
        }
        else
        {
          if (v70 != 32)
          {
            uint64_t v94 = v40[21];
            if (!v94)
            {
              if (v393 >= 0xF8)
              {
                uint64_t v312 = 0;
                do
                {
                  if (v61[v312] >= 8u)
                  {
                    unsigned int v313 = *(_DWORD *)(v67 + 4 * v312);
                    *(_DWORD *)&v60[2 * v312] = (v313 >> 17) & 0x7C00 | (v313 >> 14) & 0x3E0 | ((unsigned __int16)v313 >> 11) & 0xFFFFFF | ((v313 >> 3) << 27) | (v313 >> 5 << 24);
                  }
                  ++v312;
                }
                while (v51 != v312);
              }
              else
              {
                uint64_t v112 = 0;
                do
                {
                  if (v61[v112] >= 8u)
                  {
                    v59.i16[0] = *(_DWORD *)(v67 + 4 * v112);
                    v59.i16[1] = BYTE2(*(_DWORD *)(v67 + 4 * v112));
                    v59.i16[2] = BYTE1(*(_DWORD *)(v67 + 4 * v112));
                    v59.i16[3] = (*(_DWORD *)(v67 + 4 * v112) >> 8 >> 16);
                    *(int32x2_t *)v59.i8 = vmul_s32(*(int32x2_t *)v59.i8, v56);
                    *(int32x2_t *)v59.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v59.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v59.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
                    unsigned __int32 v113 = vshlq_u32((uint32x4_t)v59, v381).u32[0];
                    unsigned int v114 = (unsigned __int32)v59.i32[0] >> 11;
                    int8x16_t v115 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v59, v59), v380);
                    v115.i32[0] = v113;
                    int32x4_t v59 = (int32x4_t)vandq_s8(v115, v379);
                    *(int8x8_t *)v59.i8 = vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL));
                    *(_DWORD *)&v60[2 * v112] = v59.i32[0] | v59.i32[1] | (v114 << 27);
                  }
                  ++v112;
                }
                while (v51 != v112);
              }
              goto LABEL_164;
            }
            if (v68 <= 0) {
              unsigned int v95 = -(-v68 & 0xF);
            }
            else {
              unsigned int v95 = *(_DWORD *)(v382 + 12) & 0xF;
            }
            BOOL v73 = -v69 < 0;
            int v96 = -v69 & 0xF;
            int v97 = v69 & 0xF;
            if (!v73) {
              int v97 = -v96;
            }
            uint64_t v98 = v94 + 16 * v97;
            if (v393 >= 0xF8)
            {
              uint64_t v128 = 0;
              do
              {
                if (v61[v128] >= 8u) {
                  *(_DWORD *)&v60[2 * v128] = DITHERRGBA32(*(_DWORD *)(v67 + 4 * v128), *(unsigned __int8 *)(v98 + v95));
                }
                unsigned int v95 = (v95 + 1) & 0xF;
                ++v128;
              }
              while (v51 != v128);
            }
            else
            {
              uint64_t v99 = 0;
              do
              {
                if (v61[v99] >= 8u) {
                  *(_DWORD *)&v60[2 * v99] = DITHERRGBA32M(*(_DWORD *)(v67 + 4 * v99), *(unsigned __int8 *)(v98 + v95), v393);
                }
                unsigned int v95 = (v95 + 1) & 0xF;
                ++v99;
              }
              while (v51 != v99);
            }
            int v39 = v378;
            long long v40 = v386;
LABEL_163:
            int v43 = v390;
LABEL_164:
            int v44 = (int)v391;
            goto LABEL_165;
          }
          uint64_t v71 = v40[21];
          if (!v71)
          {
            if (v393 < 0xF8)
            {
              uint64_t v100 = 0;
              uint64_t v101 = (float *)(v67 + 8);
              int v44 = (int)v391;
              do
              {
                if (v61[v100] >= 8u)
                {
                  float v102 = v101[1];
                  if (v102 <= 0.0)
                  {
                    int v110 = 0;
                  }
                  else
                  {
                    float v103 = *(v101 - 2);
                    float v104 = *(v101 - 1);
                    int v105 = (int)(float)((float)(v102 * 255.0) + 0.5);
                    float v106 = *v101;
                    if (v102 > 1.0)
                    {
                      int v105 = 255;
                      float v102 = 1.0;
                    }
                    int v107 = (int)(float)((float)(v103 * 255.0) + 0.5);
                    if (v103 < 0.0) {
                      int v107 = 0;
                    }
                    if (v103 > v102) {
                      int v107 = v105;
                    }
                    int v108 = (int)(float)((float)(v104 * 255.0) + 0.5);
                    if (v104 < 0.0) {
                      LOWORD(v108) = 0;
                    }
                    if (v104 > v102) {
                      LOWORD(v108) = v105;
                    }
                    int v109 = (int)(float)((float)(v106 * 255.0) + 0.5);
                    if (v106 < 0.0) {
                      LOBYTE(v109) = 0;
                    }
                    if (v106 > v102) {
                      LOBYTE(v109) = v105;
                    }
                    int v110 = PDAM((v107 << 7) & 0x7C00 | (4 * (_WORD)v108) & 0x3E0 | (v109 >> 3), v105, v393);
                  }
                  *(_DWORD *)&v60[2 * v100] = v110;
                }
                ++v100;
                v101 += 4;
              }
              while (v51 != v100);
LABEL_40:
              long long v40 = v386;
              int v43 = v390;
              goto LABEL_165;
            }
            uint64_t v299 = 0;
            unsigned int v300 = (float *)(v67 + 8);
            int v44 = (int)v391;
            do
            {
              if (v61[v299] >= 8u)
              {
                float v301 = v300[1];
                if (v301 <= 0.0)
                {
                  unsigned int v309 = 0;
                }
                else
                {
                  float v302 = *(v300 - 2);
                  float v303 = *(v300 - 1);
                  float v304 = *v300;
                  int v305 = (int)(float)((float)(v301 * 255.0) + 0.5);
                  if (v301 > 1.0)
                  {
                    float v301 = 1.0;
                    int v305 = 255;
                  }
                  int v306 = (int)(float)((float)(v302 * 255.0) + 0.5);
                  if (v302 < 0.0) {
                    int v306 = 0;
                  }
                  if (v302 > v301) {
                    int v306 = v305;
                  }
                  int v307 = (int)(float)((float)(v303 * 255.0) + 0.5);
                  if (v303 < 0.0) {
                    int v307 = 0;
                  }
                  if (v303 > v301) {
                    int v307 = v305;
                  }
                  int v308 = (int)(float)((float)(v304 * 255.0) + 0.5);
                  if (v304 < 0.0) {
                    LOBYTE(v308) = 0;
                  }
                  if (v304 > v301) {
                    LOBYTE(v308) = v305;
                  }
                  unsigned int v309 = (v305 << 24) & 0xF8000000 | (v305 >> 5 << 24) | (v306 << 7) & 0x7C00 | (4 * v307) & 0x3E0 | (v308 >> 3);
                }
                *(_DWORD *)&v60[2 * v299] = v309;
              }
              ++v299;
              v300 += 4;
            }
            while (v51 != v299);
LABEL_165:
            switch(v39)
            {
              case 0:
                uint64_t v129 = v46 != 0;
                if (v392)
                {
                  int v130 = v51;
                  uint64_t v131 = v46;
                  while (1)
                  {
                    unsigned int v132 = *v61;
                    if (*v61)
                    {
                      if (v46) {
                        unsigned int v132 = (*v131 * v132 + ((*v131 * v132) >> 8) + 1) >> 8;
                      }
                      if (v132 >= 0xF8u)
                      {
                        LOBYTE(v133) = 0;
                        *long long v35 = 0;
LABEL_175:
                        *long long v32 = v133;
                        goto LABEL_176;
                      }
                      if (v132 >= 8u)
                      {
                        unsigned int v134 = PDAM(bswap32((unsigned __int16)*v35) >> 16, *v32, ~(_BYTE)v132);
                        *long long v35 = bswap32(v134) >> 16;
                        unsigned int v133 = HIBYTE(v134);
                        goto LABEL_175;
                      }
                    }
LABEL_176:
                    ++v61;
                    v131 += v129;
                    ++v35;
                    ++v32;
                    if (!--v130) {
                      goto LABEL_588;
                    }
                  }
                }
                int v314 = v51;
                uint64_t v131 = v46;
                while (1)
                {
                  unsigned int v315 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v315 = (*v131 * v315 + ((*v131 * v315) >> 8) + 1) >> 8;
                    }
                    if (v315 > 0xF7u)
                    {
                      __int16 v316 = 0;
LABEL_586:
                      *long long v35 = v316;
                      goto LABEL_587;
                    }
                    if (v315 >= 8u)
                    {
                      __int16 v316 = __rev16(PDM(bswap32((unsigned __int16)*v35) >> 16, ~(_BYTE)v315));
                      goto LABEL_586;
                    }
                  }
LABEL_587:
                  ++v61;
                  v131 += v129;
                  ++v35;
                  if (!--v314)
                  {
LABEL_588:
                    float v46 = &v131[v383];
                    v35 += v384;
                    goto LABEL_696;
                  }
                }
              case 1:
                unsigned int v137 = *v61;
                if (v392)
                {
                  if (v46)
                  {
                    uint64_t v138 = 0;
                    uint64_t v139 = v61 + 1;
                    uint64_t v140 = v35 - 1;
                    while (1)
                    {
                      if (v137)
                      {
                        unsigned int v141 = v137 * v46[v138] + ((v137 * v46[v138]) >> 8) + 1;
                        if (BYTE1(v141) >= 0xF8u)
                        {
                          unsigned int v142 = *(_DWORD *)&v60[2 * v138];
LABEL_187:
                          v35[v138] = bswap32(v142) >> 16;
                          v32[v138] = HIBYTE(v142);
                          goto LABEL_188;
                        }
                        if (BYTE1(v141) >= 8u)
                        {
                          unsigned int v142 = PDAMplusDAM((unsigned __int16)*(_DWORD *)&v60[2 * v138], HIBYTE(*(_DWORD *)&v60[2 * v138]), BYTE1(v141), bswap32((unsigned __int16)v35[v138]) >> 16, v32[v138], ~(v141 >> 8));
                          goto LABEL_187;
                        }
                      }
LABEL_188:
                      unsigned int v137 = v139[v138++];
                      ++v140;
                      if (v51 == v138)
                      {
                        uint64_t v143 = (uint64_t)&v32[v138 - 1];
                        v46 += v138 + v383;
                        uint64_t v136 = v389;
LABEL_667:
                        long long v35 = &v140[v384 + 1];
                        long long v32 = (char *)(v143 + v385 + 1);
                        long long v40 = v386;
                        goto LABEL_714;
                      }
                    }
                  }
                  unsigned int v348 = v61 + 1;
                  uint64_t v143 = (uint64_t)(v32 - 1);
                  uint64_t v140 = v35 - 1;
                  int v349 = v51;
                  uint64_t v136 = v389;
                  while (v137 < 0xF8)
                  {
                    if (v137 >= 8)
                    {
                      unsigned int v350 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v137, bswap32((unsigned __int16)v140[1]) >> 16, *(unsigned char *)(v143 + 1), ~(_BYTE)v137);
                      goto LABEL_664;
                    }
LABEL_665:
                    unsigned int v351 = *v348++;
                    unsigned int v137 = v351;
                    v60 += 2;
                    ++v143;
                    ++v140;
                    if (!--v349)
                    {
                      float v46 = 0;
                      goto LABEL_667;
                    }
                  }
                  unsigned int v350 = *(_DWORD *)v60;
LABEL_664:
                  v140[1] = bswap32(v350) >> 16;
                  *(unsigned char *)(v143 + 1) = HIBYTE(v350);
                  goto LABEL_665;
                }
                if (v46)
                {
                  unsigned int v317 = v61 + 1;
                  int v318 = v51;
                  while (1)
                  {
                    if (v137)
                    {
                      unsigned int v319 = v137 * *v46 + ((v137 * *v46) >> 8) + 1;
                      uint64_t v320 = (_WORD *)v376;
                      if (v376 >= (unint64_t)v35) {
                        uint64_t v320 = v35;
                      }
                      if ((unint64_t)v320 >= *(void *)(v382 + 40)) {
                        unint64_t v321 = v320;
                      }
                      else {
                        unint64_t v321 = *(_WORD **)(v382 + 40);
                      }
                      if (BYTE1(v319) >= 0xF8u)
                      {
                        unsigned int v322 = *(_DWORD *)v60;
LABEL_602:
                        *unint64_t v321 = bswap32(v322) >> 16;
                        goto LABEL_603;
                      }
                      if (BYTE1(v319) >= 8u)
                      {
                        unsigned int v322 = PDMplusDM(*v60, BYTE1(v319), bswap32((unsigned __int16)*v321) >> 16, ~(v319 >> 8));
                        goto LABEL_602;
                      }
                    }
                    else
                    {
                      unint64_t v321 = v35;
                    }
LABEL_603:
                    unsigned int v323 = *v317++;
                    unsigned int v137 = v323;
                    v60 += 2;
                    ++v46;
                    long long v35 = v321 + 1;
                    if (!--v318)
                    {
                      v46 += v383;
                      goto LABEL_695;
                    }
                  }
                }
                unsigned int v360 = *(_WORD **)(v382 + 40);
                char v361 = v61 + 1;
                int v362 = v51;
                do
                {
                  unsigned int v363 = (_WORD *)v376;
                  if (v376 >= (unint64_t)v35) {
                    unsigned int v363 = v35;
                  }
                  if (v363 >= v360) {
                    unint64_t v321 = v363;
                  }
                  else {
                    unint64_t v321 = v360;
                  }
                  if (v137 < 0xF8)
                  {
                    if (v137 < 8) {
                      goto LABEL_693;
                    }
                    unsigned int v364 = PDMplusDM(*v60, v137, bswap32((unsigned __int16)*v321) >> 16, ~(_BYTE)v137);
                  }
                  else
                  {
                    unsigned int v364 = *(_DWORD *)v60;
                  }
                  *unint64_t v321 = bswap32(v364) >> 16;
LABEL_693:
                  unsigned int v365 = *v361++;
                  unsigned int v137 = v365;
                  v60 += 2;
                  long long v35 = v321 + 1;
                  --v362;
                }
                while (v362);
                float v46 = 0;
LABEL_695:
                long long v35 = &v321[v384 + 1];
LABEL_696:
                long long v40 = v386;
                v32 += v385;
LABEL_697:
                uint64_t v135 = v388;
                uint64_t v136 = v389;
LABEL_698:
                int v43 = v390;
LABEL_699:
                if (!--v387)
                {
LABEL_715:
                  if (v43) {
                    free(v43);
                  }
                  goto LABEL_717;
                }
                uint64_t v57 = 0;
                ++v44;
                uint64_t v41 = v40[16] + v135;
                uint64_t v42 = v40[17] + v136;
                if (!v43) {
                  continue;
                }
                int v48 = v44;
                uint64_t v50 = v377;
LABEL_22:
                uint64_t v52 = v385 + v50;
                while (1)
                {
                  while (1)
                  {
                    int v53 = *((_DWORD *)v46 - 4);
                    int v54 = v53 - v48;
                    if (v53 <= v48) {
                      break;
                    }
                    v387 -= v54;
                    if (v387 < 1) {
                      goto LABEL_715;
                    }
                    v41 += v386[16] * v54;
                    v42 += v386[17] * v54;
                    v35 += v371 * v54;
                    uint64_t v55 = v52 * v54;
                    if (!v392) {
                      uint64_t v55 = 0;
                    }
                    v32 += v55;
                    int v48 = v53;
                  }
                  if (v48 < *((_DWORD *)v46 - 3) + v53) {
                    break;
                  }
                  if (!shape_enum_clip_scan((uint64_t)v43, (_DWORD *)v46 - 4)) {
                    goto LABEL_715;
                  }
                }
                long long v40 = v386;
                uint64_t v33 = v377;
                uint64_t v34 = v372;
                int v44 = v48;
                int v39 = v378;
                goto LABEL_32;
              case 2:
                unsigned int v144 = *v61;
                if (v392)
                {
                  if (v46)
                  {
                    uint64_t v145 = 0;
                    unsigned int v146 = v61 + 1;
                    char v147 = v35 - 1;
                    while (1)
                    {
                      if (v144)
                      {
                        unsigned int v148 = ((unsigned __int16)(v144 * v46[v145] + ((v144 * v46[v145]) >> 8) + 1) >> 8);
                        if (v148 < 0xF8)
                        {
                          if (v148 < 8) {
                            goto LABEL_204;
                          }
                          unsigned int v151 = PDAM((unsigned __int16)*(_DWORD *)&v60[2 * v145], HIBYTE(*(_DWORD *)&v60[2 * v145]), v148);
                          unsigned int v150 = HIBYTE(v151);
                          if (HIBYTE(v151) < 8u) {
                            goto LABEL_204;
                          }
                          unsigned int v152 = bswap32((unsigned __int16)v35[v145]) >> 16;
                          char v153 = v32[v145];
                          unsigned int v151 = (unsigned __int16)v151;
LABEL_202:
                          unsigned int v154 = PDAplusDAM(v151, v150, v152, v153, v150 ^ 0xFF);
                          v35[v145] = bswap32(v154) >> 16;
                          unsigned int v150 = HIBYTE(v154);
LABEL_203:
                          v32[v145] = v150;
                          goto LABEL_204;
                        }
                        unsigned int v149 = *(_DWORD *)&v60[2 * v145];
                        unsigned int v150 = HIBYTE(v149);
                        if (HIBYTE(v149) >= 0xF8u)
                        {
                          v35[v145] = bswap32(v149) >> 16;
                          goto LABEL_203;
                        }
                        if (v150 >= 8)
                        {
                          unsigned int v152 = bswap32((unsigned __int16)v35[v145]) >> 16;
                          char v153 = v32[v145];
                          unsigned int v151 = (unsigned __int16)*(_DWORD *)&v60[2 * v145];
                          goto LABEL_202;
                        }
                      }
LABEL_204:
                      unsigned int v144 = v146[v145++];
                      ++v147;
                      if (v394 == v145)
                      {
                        uint64_t v155 = (uint64_t)&v32[v145 - 1];
                        v46 += v145 + v383;
                        uint64_t v51 = v394;
LABEL_681:
                        long long v35 = &v147[v384 + 1];
                        long long v32 = (char *)(v155 + v385 + 1);
                        goto LABEL_697;
                      }
                    }
                  }
                  uint64_t v352 = v61 + 1;
                  uint64_t v155 = (uint64_t)(v32 - 1);
                  char v147 = v35 - 1;
                  int v353 = v51;
                  while (v144 >= 0xF8)
                  {
                    unsigned int v354 = HIBYTE(*(_DWORD *)v60);
                    if (v354 >= 0xF8)
                    {
                      v147[1] = bswap32(*(_DWORD *)v60) >> 16;
                      goto LABEL_678;
                    }
                    if (v354 >= 8)
                    {
                      unsigned int v356 = bswap32((unsigned __int16)v147[1]) >> 16;
                      char v357 = *(unsigned char *)(v155 + 1);
                      unsigned int v355 = (unsigned __int16)*(_DWORD *)v60;
                      goto LABEL_677;
                    }
LABEL_679:
                    unsigned int v359 = *v352++;
                    unsigned int v144 = v359;
                    v60 += 2;
                    ++v155;
                    ++v147;
                    if (!--v353)
                    {
                      float v46 = 0;
                      long long v40 = v386;
                      goto LABEL_681;
                    }
                  }
                  if (v144 < 8) {
                    goto LABEL_679;
                  }
                  unsigned int v355 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v144);
                  unsigned int v354 = HIBYTE(v355);
                  if (HIBYTE(v355) < 8u) {
                    goto LABEL_679;
                  }
                  unsigned int v356 = bswap32((unsigned __int16)v147[1]) >> 16;
                  char v357 = *(unsigned char *)(v155 + 1);
                  unsigned int v355 = (unsigned __int16)v355;
LABEL_677:
                  unsigned int v358 = PDAplusDAM(v355, v354, v356, v357, v354 ^ 0xFF);
                  v147[1] = bswap32(v358) >> 16;
                  unsigned int v354 = HIBYTE(v358);
LABEL_678:
                  *(unsigned char *)(v155 + 1) = v354;
                  goto LABEL_679;
                }
                if (v46)
                {
                  uint64_t v324 = v61 + 1;
                  uint64_t v325 = v35 - 1;
                  int v326 = v51;
                  while (1)
                  {
                    if (v144)
                    {
                      unsigned int v327 = ((unsigned __int16)(v144 * *v46 + ((v144 * *v46) >> 8) + 1) >> 8);
                      if (v327 < 0xF8)
                      {
                        if (v327 < 8) {
                          goto LABEL_616;
                        }
                        unsigned int v328 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v327);
                        unsigned int v329 = HIBYTE(v328);
                      }
                      else
                      {
                        unsigned int v328 = *(_DWORD *)v60;
                        unsigned int v329 = HIBYTE(*(_DWORD *)v60);
                        if (v329 >= 0xF8) {
                          goto LABEL_615;
                        }
                      }
                      if (v329 >= 8)
                      {
                        unsigned int v328 = PDplusDM(v328, bswap32((unsigned __int16)v325[1]) >> 16, ~v328 >> 24);
LABEL_615:
                        v325[1] = bswap32(v328) >> 16;
                      }
                    }
LABEL_616:
                    unsigned int v330 = *v324++;
                    unsigned int v144 = v330;
                    v60 += 2;
                    ++v46;
                    ++v325;
                    if (!--v326)
                    {
                      v46 += v383;
                      uint64_t v136 = v389;
                      goto LABEL_713;
                    }
                  }
                }
                uint64_t v366 = v61 + 1;
                uint64_t v325 = v35 - 1;
                int v367 = v51;
                uint64_t v136 = v389;
                while (1)
                {
                  if (v144 < 0xF8)
                  {
                    if (v144 < 8) {
                      goto LABEL_711;
                    }
                    unsigned int v368 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v144);
                    unsigned int v369 = HIBYTE(v368);
                  }
                  else
                  {
                    unsigned int v368 = *(_DWORD *)v60;
                    unsigned int v369 = HIBYTE(*(_DWORD *)v60);
                    if (v369 >= 0xF8) {
                      goto LABEL_710;
                    }
                  }
                  if (v369 >= 8)
                  {
                    unsigned int v368 = PDplusDM(v368, bswap32((unsigned __int16)v325[1]) >> 16, ~v368 >> 24);
LABEL_710:
                    v325[1] = bswap32(v368) >> 16;
                  }
LABEL_711:
                  unsigned int v370 = *v366++;
                  unsigned int v144 = v370;
                  v60 += 2;
                  ++v325;
                  if (!--v367)
                  {
                    float v46 = 0;
                    long long v40 = v386;
LABEL_713:
                    long long v35 = &v325[v384 + 1];
                    v32 += v385;
LABEL_714:
                    uint64_t v135 = v388;
                    goto LABEL_698;
                  }
                }
              case 3:
                uint64_t v156 = v46;
                while (1)
                {
                  unsigned int v157 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v157 = (*v156 * v157 + ((*v156 * v157) >> 8) + 1) >> 8;
                    }
                    if (v157 >= 0xF8u)
                    {
                      unsigned int v158 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), *v32);
LABEL_214:
                      *long long v35 = bswap32(v158) >> 16;
                      *long long v32 = HIBYTE(v158);
                      goto LABEL_215;
                    }
                    if (v157 >= 8u)
                    {
                      unsigned int v158 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ((unsigned __int16)(*v32 * v157+ ((*v32* v157) >> 8)+ 1) >> 8), bswap32((unsigned __int16)*v35) >> 16, *v32, ~(_BYTE)v157);
                      goto LABEL_214;
                    }
                  }
LABEL_215:
                  ++v61;
                  v60 += 2;
                  v156 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                  if (!v51) {
                    goto LABEL_247;
                  }
                }
              case 4:
                uint64_t v156 = v46;
                while (1)
                {
                  unsigned int v159 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v159 = (*v156 * v159 + ((*v156 * v159) >> 8) + 1) >> 8;
                    }
                    if (v159 >= 0xF8u)
                    {
                      unsigned int v160 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ~*v32);
LABEL_225:
                      *long long v35 = bswap32(v160) >> 16;
                      *long long v32 = HIBYTE(v160);
                      goto LABEL_226;
                    }
                    if (v159 >= 8u)
                    {
                      unsigned int v160 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ((unsigned __int16)((*v32 ^ 0xFF)* v159+ (((*v32 ^ 0xFF)* v159) >> 8)+ 1) >> 8), bswap32((unsigned __int16)*v35) >> 16, *v32, ~(_BYTE)v159);
                      goto LABEL_225;
                    }
                  }
LABEL_226:
                  ++v61;
                  v60 += 2;
                  v156 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                  if (!v51) {
                    goto LABEL_247;
                  }
                }
              case 5:
                int v161 = v51;
                uint64_t v162 = v46;
                do
                {
                  unsigned int v163 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v163 = (*v162 * v163 + ((*v162 * v163) >> 8) + 1) >> 8;
                    }
                    if (v163 >= 8u)
                    {
                      unsigned int v164 = *v32;
                      unsigned int v165 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v163);
                      unsigned int v166 = v164;
                      char v167 = v164;
                      int v44 = (int)v391;
                      unsigned int v168 = PDAMplusDAM((unsigned __int16)v165, SHIBYTE(v165), v166, bswap32((unsigned __int16)*v35) >> 16, v167, HIBYTE(v165) ^ 0xFF);
                      *long long v35 = bswap32(v168) >> 16;
                      *long long v32 = HIBYTE(v168);
                    }
                  }
                  ++v61;
                  v60 += 2;
                  v162 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  --v161;
                }
                while (v161);
                float v46 = &v162[v383];
                goto LABEL_657;
              case 6:
                uint64_t v156 = v46;
                while (1)
                {
                  unsigned int v169 = *v61;
                  if (!*v61) {
                    goto LABEL_246;
                  }
                  if (v46) {
                    unsigned int v169 = (*v156 * v169 + ((*v156 * v169) >> 8) + 1) >> 8;
                  }
                  if (v169 < 8u) {
                    goto LABEL_246;
                  }
                  unsigned int v170 = *v32;
                  if (v170 <= 7) {
                    break;
                  }
                  if (v170 <= 0xF7)
                  {
                    unsigned int v171 = PDAplusDAM(bswap32((unsigned __int16)*v35) >> 16, v170, (unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ((unsigned __int16)(~(_BYTE)v170 * v169+ ((~(_BYTE)v170* v169) >> 8)+ 1) >> 8));
                    goto LABEL_245;
                  }
LABEL_246:
                  ++v61;
                  v60 += 2;
                  v156 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                  if (!v51)
                  {
LABEL_247:
                    float v46 = &v156[v383];
LABEL_640:
                    v35 += v384;
                    v32 += v385;
                    uint64_t v51 = v394;
                    uint64_t v135 = v388;
                    uint64_t v136 = v389;
                    int v43 = v390;
                    int v44 = (int)v391;
                    goto LABEL_699;
                  }
                }
                unsigned int v171 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v169);
LABEL_245:
                *long long v35 = bswap32(v171) >> 16;
                *long long v32 = HIBYTE(v171);
                goto LABEL_246;
              case 7:
                uint64_t v172 = v46 != 0;
                if (v392)
                {
                  int v173 = v51;
                  uint64_t v174 = v46;
                  while (1)
                  {
                    unsigned int v175 = *v61;
                    if (*v61)
                    {
                      if (v46) {
                        unsigned int v175 = (*v174 * v175 + ((*v174 * v175) >> 8) + 1) >> 8;
                      }
                      if (v175 >= 0xF8u)
                      {
                        unsigned int v176 = PDAM(bswap32((unsigned __int16)*v35) >> 16, *v32, *((unsigned char *)v60 + 3));
LABEL_257:
                        *long long v35 = bswap32(v176) >> 16;
                        *long long v32 = HIBYTE(v176);
                        goto LABEL_258;
                      }
                      if (v175 >= 8u)
                      {
                        unsigned int v177 = *((unsigned __int8 *)v60 + 3) * v175;
                        unsigned int v178 = bswap32((unsigned __int16)*v35) >> 16;
                        unsigned int v176 = PDAMplusDAM(v178, *v32, ((unsigned __int16)(v177 + (v177 >> 8) + 1) >> 8), v178, *v32, ~(_BYTE)v175);
                        goto LABEL_257;
                      }
                    }
LABEL_258:
                    ++v61;
                    v60 += 2;
                    v174 += v172;
                    ++v35;
                    ++v32;
                    if (!--v173) {
                      goto LABEL_639;
                    }
                  }
                }
                int v331 = v51;
                uint64_t v174 = v46;
                while (1)
                {
                  unsigned int v332 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v332 = (*v174 * v332 + ((*v174 * v332) >> 8) + 1) >> 8;
                    }
                    if (v332 >= 0xF8u)
                    {
                      unsigned int v333 = PDM(bswap32((unsigned __int16)*v35) >> 16, *((unsigned char *)v60 + 3));
LABEL_626:
                      *long long v35 = __rev16(v333);
                      goto LABEL_627;
                    }
                    if (v332 >= 8u)
                    {
                      unsigned int v334 = *((unsigned __int8 *)v60 + 3) * v332;
                      unsigned int v335 = bswap32((unsigned __int16)*v35) >> 16;
                      unsigned int v333 = PDMplusDM(v335, ((unsigned __int16)(v334 + (v334 >> 8) + 1) >> 8), v335, ~(_BYTE)v332);
                      goto LABEL_626;
                    }
                  }
LABEL_627:
                  ++v61;
                  v60 += 2;
                  v174 += v172;
                  ++v35;
                  if (!--v331) {
                    goto LABEL_639;
                  }
                }
              case 8:
                uint64_t v179 = v46 != 0;
                if (v392)
                {
                  int v180 = v51;
                  uint64_t v174 = v46;
                  while (1)
                  {
                    unsigned int v181 = *v61;
                    if (*v61)
                    {
                      if (v46) {
                        unsigned int v181 = (*v174 * v181 + ((*v174 * v181) >> 8) + 1) >> 8;
                      }
                      if (v181 >= 0xF8u)
                      {
                        unsigned int v182 = PDAM(bswap32((unsigned __int16)*v35) >> 16, *v32, ~*((unsigned char *)v60 + 3));
LABEL_269:
                        *long long v35 = bswap32(v182) >> 16;
                        *long long v32 = HIBYTE(v182);
                        goto LABEL_270;
                      }
                      if (v181 >= 8u)
                      {
                        unsigned int v183 = (~*(_DWORD *)v60 >> 24) * v181;
                        unsigned int v184 = bswap32((unsigned __int16)*v35) >> 16;
                        unsigned int v182 = PDAMplusDAM(v184, *v32, ((unsigned __int16)(v183 + (v183 >> 8) + 1) >> 8), v184, *v32, ~(_BYTE)v181);
                        goto LABEL_269;
                      }
                    }
LABEL_270:
                    ++v61;
                    v60 += 2;
                    v174 += v179;
                    ++v35;
                    ++v32;
                    if (!--v180) {
                      goto LABEL_639;
                    }
                  }
                }
                int v336 = v51;
                uint64_t v174 = v46;
                while (1)
                {
                  unsigned int v337 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v337 = (*v174 * v337 + ((*v174 * v337) >> 8) + 1) >> 8;
                    }
                    if (v337 >= 0xF8u)
                    {
                      unsigned int v338 = PDM(bswap32((unsigned __int16)*v35) >> 16, ~*((unsigned char *)v60 + 3));
LABEL_637:
                      *long long v35 = __rev16(v338);
                      goto LABEL_638;
                    }
                    if (v337 >= 8u)
                    {
                      unsigned int v339 = (~*(_DWORD *)v60 >> 24) * v337;
                      unsigned int v340 = bswap32((unsigned __int16)*v35) >> 16;
                      unsigned int v338 = PDMplusDM(v340, ((unsigned __int16)(v339 + (v339 >> 8) + 1) >> 8), v340, ~(_BYTE)v337);
                      goto LABEL_637;
                    }
                  }
LABEL_638:
                  ++v61;
                  v60 += 2;
                  v174 += v179;
                  ++v35;
                  if (!--v336) {
                    goto LABEL_639;
                  }
                }
              case 9:
                char v185 = v46;
                do
                {
                  unsigned int v186 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v186 = (*v185 * v186 + ((*v185 * v186) >> 8) + 1) >> 8;
                    }
                    if (v186 >= 8u)
                    {
                      int v187 = *v32;
                      uint64_t v188 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v186);
                      unsigned int v189 = v187 ^ 0xFF;
                      char v190 = v187;
                      int v44 = (int)v391;
                      unsigned int v191 = PDAMplusDAM((unsigned __int16)v188, SBYTE3(v188), v189, bswap32((unsigned __int16)*v35) >> 16, v190, (~(_BYTE)v186 + BYTE3(v188)));
                      *long long v35 = bswap32(v191) >> 16;
                      *long long v32 = HIBYTE(v191);
                    }
                  }
                  ++v61;
                  v60 += 2;
                  v185 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                }
                while (v51);
                float v46 = &v185[v383];
                v35 += v384;
                v32 += v385;
                int v39 = v378;
                goto LABEL_658;
              case 10:
                uint64_t v192 = v46;
                do
                {
                  unsigned int v193 = *v61;
                  if (*v61)
                  {
                    if (v46) {
                      unsigned int v193 = (*v192 * v193 + ((*v192 * v193) >> 8) + 1) >> 8;
                    }
                    if (v193 >= 8u)
                    {
                      int v194 = *v32;
                      unsigned int v195 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v193);
                      unsigned int v196 = v194 ^ 0xFF;
                      char v197 = v194;
                      int v44 = (int)v391;
                      unsigned int v198 = PDAMplusDAM((unsigned __int16)v195, SHIBYTE(v195), v196, bswap32((unsigned __int16)*v35) >> 16, v197, HIBYTE(v195) ^ 0xFF);
                      *long long v35 = bswap32(v198) >> 16;
                      *long long v32 = HIBYTE(v198);
                    }
                  }
                  ++v61;
                  v60 += 2;
                  v192 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                }
                while (v51);
                goto LABEL_656;
              case 11:
                uint64_t v199 = v46 != 0;
                if (v392)
                {
                  uint64_t v192 = v46;
                  do
                  {
                    unsigned int v200 = *v61;
                    if (*v61)
                    {
                      if (v46) {
                        unsigned int v200 = (*v192 * v200 + ((*v192 * v200) >> 8) + 1) >> 8;
                      }
                      if (v200 >= 8u)
                      {
                        unsigned int v201 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v200);
                        unsigned int v202 = PDAplusdDA(bswap32((unsigned __int16)*v35) >> 16, *v32, v201, HIBYTE(v201));
                        *long long v35 = bswap32(v202) >> 16;
                        *long long v32 = HIBYTE(v202);
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v199;
                    ++v35;
                    ++v32;
                    LODWORD(v51) = v51 - 1;
                  }
                  while (v51);
                }
                else
                {
                  uint64_t v192 = v46;
                  do
                  {
                    unsigned int v341 = *v61;
                    if (*v61)
                    {
                      if (v46) {
                        unsigned int v341 = (*v192 * v341 + ((*v192 * v341) >> 8) + 1) >> 8;
                      }
                      if (v341 >= 8u)
                      {
                        unsigned int v342 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v341);
                        *long long v35 = __rev16(PDplusdDA(bswap32((unsigned __int16)*v35) >> 16, v342, HIBYTE(v342)));
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v199;
                    ++v35;
                    LODWORD(v51) = v51 - 1;
                  }
                  while (v51);
                }
                goto LABEL_656;
              case 12:
                uint64_t v203 = v46 != 0;
                if (v392)
                {
                  uint64_t v192 = v46;
                  int v204 = v394;
                  do
                  {
                    unsigned int v205 = *v61;
                    if (*v61)
                    {
                      if (v46) {
                        unsigned int v205 = (*v192 * v205 + ((*v192 * v205) >> 8) + 1) >> 8;
                      }
                      if (v205 >= 8u)
                      {
                        unsigned int v206 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v205);
                        unsigned int v207 = PDApluslDA(bswap32((unsigned __int16)*v35) >> 16, *v32, (unsigned __int16)v206, HIBYTE(v206));
                        *long long v35 = bswap32(v207) >> 16;
                        *long long v32 = HIBYTE(v207);
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v203;
                    ++v35;
                    ++v32;
                    --v204;
                  }
                  while (v204);
                }
                else
                {
                  uint64_t v192 = v46;
                  int v343 = v394;
                  do
                  {
                    unsigned int v344 = *v61;
                    if (*v61)
                    {
                      if (v46) {
                        unsigned int v344 = (*v192 * v344 + ((*v192 * v344) >> 8) + 1) >> 8;
                      }
                      if (v344 >= 8u)
                      {
                        int v345 = PDM(*v60, v344);
                        unsigned int v346 = bswap32((unsigned __int16)*v35);
                        unsigned int v347 = (((HIWORD(v346) << 15) | HIWORD(v346)) & 0x1F07C1F) + ((v345 | (v345 << 15)) & 0x1F07C1F);
                        *long long v35 = __rev16((((30 * ((v347 >> 5) & 0x100401)) | (15 * ((v347 >> 5) & 0x100401)) | v347) >> 15) & 0x3E0 | ((30 * ((v347 >> 5) & 0x100401)) | (15 * ((v347 >> 5) & 0x100401)) | v347) & 0x7C1F);
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v203;
                    ++v35;
                    --v343;
                  }
                  while (v343);
                }
LABEL_656:
                float v46 = &v192[v383];
LABEL_657:
                v35 += v384;
                v32 += v385;
LABEL_658:
                long long v40 = v386;
                uint64_t v51 = v394;
                goto LABEL_697;
              case 13:
                int v208 = v51;
                uint64_t v174 = v46;
                int v209 = v208;
                while (1)
                {
                  unsigned int v210 = *v61;
                  if (!*v61) {
                    goto LABEL_320;
                  }
                  if (v46) {
                    unsigned int v210 = (*v174 * v210 + ((*v174 * v210) >> 8) + 1) >> 8;
                  }
                  if (v210 < 8u) {
                    goto LABEL_320;
                  }
                  unsigned int v211 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v210);
                  unsigned int v213 = HIBYTE(v211);
                  if (HIBYTE(v211) < 8u) {
                    goto LABEL_320;
                  }
                  if (v392)
                  {
                    unsigned int v214 = *v32;
                    if (v214 < 8) {
                      goto LABEL_318;
                    }
                  }
                  else
                  {
                    unsigned int v214 = 255;
                  }
                  unsigned int v211 = PDAmultiplyPDA(bswap32((unsigned __int16)*v35) >> 16, v214, (unsigned __int16)v211, v213, v212);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v211) >> 16;
                    goto LABEL_320;
                  }
                  unsigned int v213 = HIBYTE(v211);
LABEL_318:
                  *long long v35 = bswap32(v211) >> 16;
                  *long long v32 = v213;
LABEL_320:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v209) {
                    goto LABEL_639;
                  }
                }
              case 14:
                int v215 = v51;
                uint64_t v174 = v46;
                int v216 = v215;
                while (1)
                {
                  unsigned int v217 = *v61;
                  if (!*v61) {
                    goto LABEL_336;
                  }
                  if (v46) {
                    unsigned int v217 = (*v174 * v217 + ((*v174 * v217) >> 8) + 1) >> 8;
                  }
                  if (v217 < 8u) {
                    goto LABEL_336;
                  }
                  unsigned int v218 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v217);
                  unsigned int v219 = HIBYTE(v218);
                  if (HIBYTE(v218) < 8u) {
                    goto LABEL_336;
                  }
                  if (v392)
                  {
                    unsigned int v220 = *v32;
                    if (v220 < 8) {
                      goto LABEL_334;
                    }
                  }
                  else
                  {
                    unsigned int v220 = 255;
                  }
                  unsigned int v218 = PDAscreenPDA(bswap32((unsigned __int16)*v35) >> 16, v220, (unsigned __int16)v218, v219);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v218) >> 16;
                    goto LABEL_336;
                  }
                  unsigned int v219 = HIBYTE(v218);
LABEL_334:
                  *long long v35 = bswap32(v218) >> 16;
                  *long long v32 = v219;
LABEL_336:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v216) {
                    goto LABEL_639;
                  }
                }
              case 15:
                int v221 = v51;
                uint64_t v174 = v46;
                int v222 = v221;
                while (1)
                {
                  unsigned int v223 = *v61;
                  if (!*v61) {
                    goto LABEL_352;
                  }
                  if (v46) {
                    unsigned int v223 = (*v174 * v223 + ((*v174 * v223) >> 8) + 1) >> 8;
                  }
                  if (v223 < 8u) {
                    goto LABEL_352;
                  }
                  unsigned int v224 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v223);
                  unsigned int v225 = HIBYTE(v224);
                  if (HIBYTE(v224) < 8u) {
                    goto LABEL_352;
                  }
                  if (v392)
                  {
                    unsigned int v226 = *v32;
                    if (v226 < 8) {
                      goto LABEL_350;
                    }
                  }
                  else
                  {
                    unsigned int v226 = 255;
                  }
                  unsigned int v224 = PDAoverlayPDA(bswap32((unsigned __int16)*v35) >> 16, v226, (unsigned __int16)v224, v225);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v224) >> 16;
                    goto LABEL_352;
                  }
                  unsigned int v225 = HIBYTE(v224);
LABEL_350:
                  *long long v35 = bswap32(v224) >> 16;
                  *long long v32 = v225;
LABEL_352:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v222) {
                    goto LABEL_639;
                  }
                }
              case 16:
                int v227 = v51;
                uint64_t v174 = v46;
                int v228 = v227;
                while (1)
                {
                  unsigned int v229 = *v61;
                  if (!*v61) {
                    goto LABEL_368;
                  }
                  if (v46) {
                    unsigned int v229 = (*v174 * v229 + ((*v174 * v229) >> 8) + 1) >> 8;
                  }
                  if (v229 < 8u) {
                    goto LABEL_368;
                  }
                  unsigned int v230 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v229);
                  unsigned int v231 = HIBYTE(v230);
                  if (HIBYTE(v230) < 8u) {
                    goto LABEL_368;
                  }
                  if (v392)
                  {
                    unsigned int v232 = *v32;
                    if (v232 < 8) {
                      goto LABEL_366;
                    }
                  }
                  else
                  {
                    unsigned int v232 = 255;
                  }
                  unsigned int v230 = PDAdarkenPDA(bswap32((unsigned __int16)*v35) >> 16, v232, (unsigned __int16)v230, v231);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v230) >> 16;
                    goto LABEL_368;
                  }
                  unsigned int v231 = HIBYTE(v230);
LABEL_366:
                  *long long v35 = bswap32(v230) >> 16;
                  *long long v32 = v231;
LABEL_368:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v228) {
                    goto LABEL_639;
                  }
                }
              case 17:
                int v233 = v51;
                uint64_t v174 = v46;
                int v234 = v233;
                while (1)
                {
                  unsigned int v235 = *v61;
                  if (!*v61) {
                    goto LABEL_384;
                  }
                  if (v46) {
                    unsigned int v235 = (*v174 * v235 + ((*v174 * v235) >> 8) + 1) >> 8;
                  }
                  if (v235 < 8u) {
                    goto LABEL_384;
                  }
                  unsigned int v236 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v235);
                  unsigned int v237 = HIBYTE(v236);
                  if (HIBYTE(v236) < 8u) {
                    goto LABEL_384;
                  }
                  if (v392)
                  {
                    unsigned int v238 = *v32;
                    if (v238 < 8) {
                      goto LABEL_382;
                    }
                  }
                  else
                  {
                    unsigned int v238 = 255;
                  }
                  unsigned int v236 = PDAlightenPDA(bswap32((unsigned __int16)*v35) >> 16, v238, (unsigned __int16)v236, v237);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v236) >> 16;
                    goto LABEL_384;
                  }
                  unsigned int v237 = HIBYTE(v236);
LABEL_382:
                  *long long v35 = bswap32(v236) >> 16;
                  *long long v32 = v237;
LABEL_384:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v234) {
                    goto LABEL_639;
                  }
                }
              case 18:
                int v239 = v51;
                uint64_t v174 = v46;
                int v240 = v239;
                while (1)
                {
                  unsigned int v241 = *v61;
                  if (!*v61) {
                    goto LABEL_400;
                  }
                  if (v46) {
                    unsigned int v241 = (*v174 * v241 + ((*v174 * v241) >> 8) + 1) >> 8;
                  }
                  if (v241 < 8u) {
                    goto LABEL_400;
                  }
                  unsigned int v242 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v241);
                  unsigned int v243 = HIBYTE(v242);
                  if (HIBYTE(v242) < 8u) {
                    goto LABEL_400;
                  }
                  if (v392)
                  {
                    unsigned int v244 = *v32;
                    if (v244 < 8) {
                      goto LABEL_398;
                    }
                  }
                  else
                  {
                    unsigned int v244 = 255;
                  }
                  unsigned int v242 = PDAcolordodgePDA(bswap32((unsigned __int16)*v35) >> 16, v244, (unsigned __int16)v242, v243);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v242) >> 16;
                    goto LABEL_400;
                  }
                  unsigned int v243 = HIBYTE(v242);
LABEL_398:
                  *long long v35 = bswap32(v242) >> 16;
                  *long long v32 = v243;
LABEL_400:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v240) {
                    goto LABEL_639;
                  }
                }
              case 19:
                int v245 = v51;
                uint64_t v174 = v46;
                int v246 = v245;
                while (1)
                {
                  unsigned int v247 = *v61;
                  if (!*v61) {
                    goto LABEL_416;
                  }
                  if (v46) {
                    unsigned int v247 = (*v174 * v247 + ((*v174 * v247) >> 8) + 1) >> 8;
                  }
                  if (v247 < 8u) {
                    goto LABEL_416;
                  }
                  unsigned int v248 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v247);
                  unsigned int v249 = HIBYTE(v248);
                  if (HIBYTE(v248) < 8u) {
                    goto LABEL_416;
                  }
                  if (v392)
                  {
                    unsigned int v250 = *v32;
                    if (v250 < 8) {
                      goto LABEL_414;
                    }
                  }
                  else
                  {
                    unsigned int v250 = 255;
                  }
                  unsigned int v248 = PDAcolorburnPDA(bswap32((unsigned __int16)*v35) >> 16, v250, (unsigned __int16)v248, v249);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v248) >> 16;
                    goto LABEL_416;
                  }
                  unsigned int v249 = HIBYTE(v248);
LABEL_414:
                  *long long v35 = bswap32(v248) >> 16;
                  *long long v32 = v249;
LABEL_416:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v246) {
                    goto LABEL_639;
                  }
                }
              case 20:
                int v251 = v51;
                uint64_t v174 = v46;
                int v252 = v251;
                while (1)
                {
                  unsigned int v253 = *v61;
                  if (!*v61) {
                    goto LABEL_432;
                  }
                  if (v46) {
                    unsigned int v253 = (*v174 * v253 + ((*v174 * v253) >> 8) + 1) >> 8;
                  }
                  if (v253 < 8u) {
                    goto LABEL_432;
                  }
                  unsigned int v254 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v253);
                  unsigned int v255 = HIBYTE(v254);
                  if (HIBYTE(v254) < 8u) {
                    goto LABEL_432;
                  }
                  if (v392)
                  {
                    unsigned int v256 = *v32;
                    if (v256 < 8) {
                      goto LABEL_430;
                    }
                  }
                  else
                  {
                    unsigned int v256 = 255;
                  }
                  unsigned int v254 = PDAsoftlightPDA(bswap32((unsigned __int16)*v35) >> 16, v256, (unsigned __int16)v254, v255);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v254) >> 16;
                    goto LABEL_432;
                  }
                  unsigned int v255 = HIBYTE(v254);
LABEL_430:
                  *long long v35 = bswap32(v254) >> 16;
                  *long long v32 = v255;
LABEL_432:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v252) {
                    goto LABEL_639;
                  }
                }
              case 21:
                int v257 = v51;
                uint64_t v174 = v46;
                int v258 = v257;
                while (1)
                {
                  unsigned int v259 = *v61;
                  if (!*v61) {
                    goto LABEL_448;
                  }
                  if (v46) {
                    unsigned int v259 = (*v174 * v259 + ((*v174 * v259) >> 8) + 1) >> 8;
                  }
                  if (v259 < 8u) {
                    goto LABEL_448;
                  }
                  unsigned int v260 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v259);
                  unsigned int v261 = HIBYTE(v260);
                  if (HIBYTE(v260) < 8u) {
                    goto LABEL_448;
                  }
                  if (v392)
                  {
                    unsigned int v262 = *v32;
                    if (v262 < 8) {
                      goto LABEL_446;
                    }
                  }
                  else
                  {
                    unsigned int v262 = 255;
                  }
                  unsigned int v260 = PDAhardlightPDA(bswap32((unsigned __int16)*v35) >> 16, v262, (unsigned __int16)v260, v261);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v260) >> 16;
                    goto LABEL_448;
                  }
                  unsigned int v261 = HIBYTE(v260);
LABEL_446:
                  *long long v35 = bswap32(v260) >> 16;
                  *long long v32 = v261;
LABEL_448:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v258) {
                    goto LABEL_639;
                  }
                }
              case 22:
                int v263 = v51;
                uint64_t v174 = v46;
                int v264 = v263;
                while (1)
                {
                  unsigned int v265 = *v61;
                  if (!*v61) {
                    goto LABEL_464;
                  }
                  if (v46) {
                    unsigned int v265 = (*v174 * v265 + ((*v174 * v265) >> 8) + 1) >> 8;
                  }
                  if (v265 < 8u) {
                    goto LABEL_464;
                  }
                  unsigned int v266 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v265);
                  unsigned int v267 = HIBYTE(v266);
                  if (HIBYTE(v266) < 8u) {
                    goto LABEL_464;
                  }
                  if (v392)
                  {
                    unsigned int v268 = *v32;
                    if (v268 < 8) {
                      goto LABEL_462;
                    }
                  }
                  else
                  {
                    unsigned int v268 = 255;
                  }
                  unsigned int v266 = PDAdifferencePDA(bswap32((unsigned __int16)*v35) >> 16, v268, (unsigned __int16)v266, v267);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v266) >> 16;
                    goto LABEL_464;
                  }
                  unsigned int v267 = HIBYTE(v266);
LABEL_462:
                  *long long v35 = bswap32(v266) >> 16;
                  *long long v32 = v267;
LABEL_464:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v264) {
                    goto LABEL_639;
                  }
                }
              case 23:
                int v269 = v51;
                uint64_t v174 = v46;
                int v270 = v269;
                while (1)
                {
                  unsigned int v271 = *v61;
                  if (!*v61) {
                    goto LABEL_480;
                  }
                  if (v46) {
                    unsigned int v271 = (*v174 * v271 + ((*v174 * v271) >> 8) + 1) >> 8;
                  }
                  if (v271 < 8u) {
                    goto LABEL_480;
                  }
                  unsigned int v272 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v271);
                  unsigned int v273 = HIBYTE(v272);
                  if (HIBYTE(v272) < 8u) {
                    goto LABEL_480;
                  }
                  if (v392)
                  {
                    unsigned int v274 = *v32;
                    if (v274 < 8) {
                      goto LABEL_478;
                    }
                  }
                  else
                  {
                    unsigned int v274 = 255;
                  }
                  unsigned int v272 = PDAexclusionPDA(bswap32((unsigned __int16)*v35) >> 16, v274, (unsigned __int16)v272, v273);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v272) >> 16;
                    goto LABEL_480;
                  }
                  unsigned int v273 = HIBYTE(v272);
LABEL_478:
                  *long long v35 = bswap32(v272) >> 16;
                  *long long v32 = v273;
LABEL_480:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v270) {
                    goto LABEL_639;
                  }
                }
              case 24:
                int v275 = v51;
                uint64_t v174 = v46;
                int v276 = v275;
                while (1)
                {
                  unsigned int v277 = *v61;
                  if (!*v61) {
                    goto LABEL_496;
                  }
                  if (v46) {
                    unsigned int v277 = (*v174 * v277 + ((*v174 * v277) >> 8) + 1) >> 8;
                  }
                  if (v277 < 8u) {
                    goto LABEL_496;
                  }
                  unsigned int v278 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v277);
                  unsigned int v279 = HIBYTE(v278);
                  if (HIBYTE(v278) < 8u) {
                    goto LABEL_496;
                  }
                  if (v392)
                  {
                    unsigned int v280 = *v32;
                    if (v280 < 8) {
                      goto LABEL_494;
                    }
                  }
                  else
                  {
                    unsigned int v280 = 255;
                  }
                  unsigned int v278 = PDAhuePDA(bswap32((unsigned __int16)*v35) >> 16, v280, (unsigned __int16)v278, v279);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v278) >> 16;
                    goto LABEL_496;
                  }
                  unsigned int v279 = HIBYTE(v278);
LABEL_494:
                  *long long v35 = bswap32(v278) >> 16;
                  *long long v32 = v279;
LABEL_496:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v276) {
                    goto LABEL_639;
                  }
                }
              case 25:
                int v281 = v51;
                uint64_t v174 = v46;
                int v282 = v281;
                while (1)
                {
                  unsigned int v283 = *v61;
                  if (!*v61) {
                    goto LABEL_512;
                  }
                  if (v46) {
                    unsigned int v283 = (*v174 * v283 + ((*v174 * v283) >> 8) + 1) >> 8;
                  }
                  if (v283 < 8u) {
                    goto LABEL_512;
                  }
                  unsigned int v284 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v283);
                  unsigned int v285 = HIBYTE(v284);
                  if (HIBYTE(v284) < 8u) {
                    goto LABEL_512;
                  }
                  if (v392)
                  {
                    unsigned int v286 = *v32;
                    if (v286 < 8) {
                      goto LABEL_510;
                    }
                  }
                  else
                  {
                    unsigned int v286 = 255;
                  }
                  unsigned int v284 = PDAsaturationPDA(bswap32((unsigned __int16)*v35) >> 16, v286, (unsigned __int16)v284, v285);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v284) >> 16;
                    goto LABEL_512;
                  }
                  unsigned int v285 = HIBYTE(v284);
LABEL_510:
                  *long long v35 = bswap32(v284) >> 16;
                  *long long v32 = v285;
LABEL_512:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v282) {
                    goto LABEL_639;
                  }
                }
              case 26:
                int v287 = v51;
                uint64_t v174 = v46;
                int v288 = v287;
                while (1)
                {
                  unsigned int v289 = *v61;
                  if (!*v61) {
                    goto LABEL_528;
                  }
                  if (v46) {
                    unsigned int v289 = (*v174 * v289 + ((*v174 * v289) >> 8) + 1) >> 8;
                  }
                  if (v289 < 8u) {
                    goto LABEL_528;
                  }
                  unsigned int v290 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v289);
                  unsigned int v291 = HIBYTE(v290);
                  if (HIBYTE(v290) < 8u) {
                    goto LABEL_528;
                  }
                  if (v392)
                  {
                    unsigned int v292 = *v32;
                    if (v292 < 8) {
                      goto LABEL_526;
                    }
                  }
                  else
                  {
                    unsigned int v292 = 255;
                  }
                  unsigned int v290 = PDAluminosityPDA((unsigned __int16)v290, v291, bswap32((unsigned __int16)*v35) >> 16, v292);
                  if (!v392)
                  {
                    *long long v35 = bswap32(v290) >> 16;
                    goto LABEL_528;
                  }
                  unsigned int v291 = HIBYTE(v290);
LABEL_526:
                  *long long v35 = bswap32(v290) >> 16;
                  *long long v32 = v291;
LABEL_528:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v288) {
                    goto LABEL_639;
                  }
                }
              case 27:
                int v293 = v51;
                uint64_t v174 = v46;
                int v294 = v293;
                break;
              default:
                uint64_t v135 = v388;
                uint64_t v136 = v389;
                goto LABEL_699;
            }
            while (1)
            {
              unsigned int v295 = *v61;
              if (!*v61) {
                goto LABEL_544;
              }
              if (v46) {
                unsigned int v295 = (*v174 * v295 + ((*v174 * v295) >> 8) + 1) >> 8;
              }
              if (v295 < 8u) {
                goto LABEL_544;
              }
              unsigned int v296 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v295);
              unsigned int v297 = HIBYTE(v296);
              if (HIBYTE(v296) < 8u) {
                goto LABEL_544;
              }
              if (v392)
              {
                unsigned int v298 = *v32;
                if (v298 < 8) {
                  goto LABEL_542;
                }
              }
              else
              {
                unsigned int v298 = 255;
              }
              unsigned int v296 = PDAluminosityPDA(bswap32((unsigned __int16)*v35) >> 16, v298, (unsigned __int16)v296, v297);
              if (!v392)
              {
                *long long v35 = bswap32(v296) >> 16;
                goto LABEL_544;
              }
              unsigned int v297 = HIBYTE(v296);
LABEL_542:
              *long long v35 = bswap32(v296) >> 16;
              *long long v32 = v297;
LABEL_544:
              ++v61;
              v60 += 2;
              v174 += v46 != 0;
              ++v35;
              v32 += v395;
              if (!--v294)
              {
LABEL_639:
                float v46 = &v174[v383];
                goto LABEL_640;
              }
            }
          }
          if (v68 <= 0) {
            unsigned int v72 = -(-v68 & 0xF);
          }
          else {
            unsigned int v72 = *(_DWORD *)(v382 + 12) & 0xF;
          }
          BOOL v73 = -v69 < 0;
          int v74 = -v69 & 0xF;
          int v75 = v69 & 0xF;
          if (!v73) {
            int v75 = -v74;
          }
          uint64_t v76 = v71 + 16 * v75;
          if (v393 >= 0xF8)
          {
            uint64_t v116 = 0;
            unsigned int v117 = (float *)(v67 + 8);
            do
            {
              if (v61[v116] >= 8u)
              {
                float v118 = v117[1];
                if (v118 <= 0.0)
                {
                  int v126 = 0;
                }
                else
                {
                  float v119 = *(v117 - 2);
                  float v120 = *(v117 - 1);
                  float v121 = *v117;
                  int v122 = (int)(float)((float)(v118 * 255.0) + 0.5);
                  if (v118 > 1.0)
                  {
                    int v122 = 255;
                    float v118 = 1.0;
                  }
                  int v123 = (int)(float)((float)(v119 * 255.0) + 0.5);
                  if (v119 < 0.0) {
                    int v123 = 0;
                  }
                  if (v119 > v118) {
                    int v123 = v122;
                  }
                  int v124 = (int)(float)((float)(v120 * 255.0) + 0.5);
                  if (v120 < 0.0) {
                    int v124 = 0;
                  }
                  if (v120 > v118) {
                    int v124 = v122;
                  }
                  int v125 = (int)(float)((float)(v121 * 255.0) + 0.5);
                  if (v121 < 0.0) {
                    int v125 = 0;
                  }
                  if (v121 > v118) {
                    int v125 = v122;
                  }
                  int v126 = DITHERRGBA32((v123 << 24) | (v124 << 16) | (v125 << 8) | v122, *(unsigned __int8 *)(v76 + v72));
                }
                *(_DWORD *)&v60[2 * v116] = v126;
              }
              unsigned int v72 = ((_BYTE)v72 + 1) & 0xF;
              ++v116;
              v117 += 4;
            }
            while (v394 != v116);
          }
          else
          {
            uint64_t v77 = 0;
            char v78 = (float *)(v67 + 8);
            do
            {
              if (v61[v77] >= 8u)
              {
                float v79 = v78[1];
                if (v79 <= 0.0)
                {
                  int v87 = 0;
                }
                else
                {
                  float v80 = *(v78 - 2);
                  float v81 = *(v78 - 1);
                  float v82 = *v78;
                  int v83 = (int)(float)((float)(v79 * 255.0) + 0.5);
                  if (v79 > 1.0)
                  {
                    int v83 = 255;
                    float v79 = 1.0;
                  }
                  int v84 = (int)(float)((float)(v80 * 255.0) + 0.5);
                  if (v80 < 0.0) {
                    int v84 = 0;
                  }
                  if (v80 > v79) {
                    int v84 = v83;
                  }
                  int v85 = (int)(float)((float)(v81 * 255.0) + 0.5);
                  if (v81 < 0.0) {
                    int v85 = 0;
                  }
                  if (v81 > v79) {
                    int v85 = v83;
                  }
                  int v86 = (int)(float)((float)(v82 * 255.0) + 0.5);
                  if (v82 < 0.0) {
                    int v86 = 0;
                  }
                  if (v82 > v79) {
                    int v86 = v83;
                  }
                  int v87 = DITHERRGBA32M((v84 << 24) | (v85 << 16) | (v86 << 8) | v83, *(unsigned __int8 *)(v76 + v72), v393);
                }
                *(_DWORD *)&v60[2 * v77] = v87;
              }
              unsigned int v72 = ((_BYTE)v72 + 1) & 0xF;
              ++v77;
              v78 += 4;
            }
            while (v394 != v77);
          }
        }
        break;
      }
      long long v40 = v386;
      uint64_t v51 = v394;
      goto LABEL_163;
    }
    uint64_t v372 = v34;
    shape_enum_clip_alloc((uint64_t)v19, v20, v391, 1, 1, 1, v36, v37, v394, v387);
    if (v47)
    {
      unint64_t v371 = v29;
      int v48 = 0;
      uint64_t v49 = (int)((v15 * v4 + 15) & 0xFFFFFFF0);
      if (!v15) {
        uint64_t v49 = 4 * v4;
      }
      uint64_t v50 = v377;
      uint64_t v383 = -v377;
      float v46 = (unsigned __int8 *)(v27 + v49 + 16);
      uint64_t v51 = v394;
      int v43 = v47;
      goto LABEL_22;
    }
LABEL_717:
    if (v373) {
      free(v373);
    }
  }
}

uint64_t RGB555_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v32 = 0u;
  memset(v49, 0, 512);
  if (*((void *)a2 + 12)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(float *)(a3 + 8) >= 1.0;
  }
  int v8 = *(_DWORD *)(*(void *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((void *)a2 + 6) == 0));
  if (v8 > 28) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v32, (uint64_t)v49) < 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v18 = *(_DWORD *)a3;
  *((void *)&v32 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v18 != 67449668)
  {
    unsigned int v19 = SAMPLEINDEX(v18, v10, v11, v12, v13, v14, v15, v16);
    if (!v19) {
      return 0xFFFFFFFFLL;
    }
    if (v19 > 0xB)
    {
LABEL_20:
      int v21 = 255;
      char v20 = 1;
    }
    else
    {
      char v20 = 0;
      int v21 = 0;
      switch(v19)
      {
        case 2u:
          if (*((void *)a2 + 12)) {
            goto LABEL_20;
          }
          char v20 = 0;
          int v21 = 16;
          break;
        case 5u:
          char v20 = 0;
          int v21 = 24;
          break;
        case 6u:
          break;
        case 7u:
          char v20 = 0;
          int v21 = 32;
          break;
        case 8u:
          char v20 = 0;
          int v21 = 8;
          break;
        case 9u:
          char v20 = 0;
          int v21 = 40;
          break;
        default:
          goto LABEL_20;
      }
    }
    *(void *)&long long v32 = rgb555_image_sample[v19 + 1];
    if ((void)v32)
    {
      if (!*(unsigned char *)(a3 + 5) || (unsigned int v22 = *(_DWORD *)a3, (HIWORD(*(_DWORD *)a3) & 0x3Fu) <= (*(_WORD *)(v6 + 2) & 0x3Fu)))
      {
        DWORD2(v32) = 67449684;
        goto LABEL_37;
      }
    }
    else
    {
      unsigned int v22 = *(_DWORD *)a3;
    }
    if ((HIWORD(v22) & 0x3F) > 8u)
    {
      if ((v22 & 0x3F0000) >> 16 > 0x10)
      {
LABEL_32:
        uint64_t v23 = RGBF_image_sample;
        *(void *)&long long v32 = *(void *)&RGBF_image_sample[2 * v19 + 2];
        if ((void)v32)
        {
          int v24 = 16;
          goto LABEL_34;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v23 = RGB8_image_sample;
      *(void *)&long long v32 = *(void *)&RGB8_image_sample[2 * v19 + 2];
      if ((void)v32) {
        goto LABEL_35;
      }
    }
    uint64_t v23 = RGB16_image_sample;
    *(void *)&long long v32 = *(void *)&RGB16_image_sample[2 * v19 + 2];
    if ((void)v32)
    {
      int v24 = 8;
LABEL_34:
      LODWORD(v33) = v24;
LABEL_35:
      DWORD2(v32) = *v23;
      if (*(unsigned char *)(a3 + 5)) {
        *((void *)&v42 + 1) = pixel_dither_noise;
      }
LABEL_37:
      if ((v20 & 1) == 0
        && (v8 - 1) <= 1
        && (BYTE4(v33) & 7) == 3
        && (a2[2] == 5 || !a2[2])
        && v19 <= 0xB)
      {
        HIDWORD(v25) = v21;
        LODWORD(v25) = v21;
        switch((v25 >> 3))
        {
          case 0u:
            DWORD2(v32) = *(_DWORD *)a3;
            uint64_t v26 = RGB555_image_mark_RGB32;
            goto LABEL_59;
          case 1u:
            DWORD2(v32) = *(_DWORD *)a3;
            unint64_t v27 = RGB555_image_mark_RGB32;
            goto LABEL_61;
          case 2u:
            DWORD2(v32) = *(_DWORD *)a3;
            uint64_t v26 = RGB555_image_mark_W8;
            goto LABEL_59;
          case 3u:
            DWORD2(v32) = *(_DWORD *)a3;
            uint64_t v26 = RGB555_image_mark_RGB24;
            goto LABEL_59;
          case 4u:
            DWORD2(v32) = *(_DWORD *)a3;
            uint64_t v26 = RGB555_image_mark_rgb32;
LABEL_59:
            uint64_t v28 = v26;
            uint64_t v29 = (uint64_t)a2;
            int v30 = v8;
            int v31 = 0;
            break;
          case 5u:
            DWORD2(v32) = *(_DWORD *)a3;
            unint64_t v27 = RGB555_image_mark_rgb32;
LABEL_61:
            uint64_t v28 = v27;
            uint64_t v29 = (uint64_t)a2;
            int v30 = v8;
            int v31 = 8;
            break;
          default:
            goto LABEL_38;
        }
        rgb555_image_mark_image(v29, (uint64_t)&v32, v30, v31, (void (*)(void, void))v28);
        return 1;
      }
      goto LABEL_38;
    }
    goto LABEL_32;
  }
  if (!(void)v43 && (~DWORD1(v33) & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(void *)(a3 + 24))
    {
      if ((BYTE4(v33) & 4) != 0)
      {
        v17.n128_u64[0] = *(void *)(a3 + 32);
        *((void *)a2 + 8) = v17.n128_u64[0];
      }
      RGB555_mark((uint64_t)a1, v17);
      return 1;
    }
  }
  *(void *)&long long v32 = rgb555_sample_RGB555;
LABEL_38:
  RGB555_image_mark((uint64_t)a2, (uint64_t)&v32, v8, v17);
  return 1;
}

uint64_t RGB555_mark(uint64_t a1, __n128 a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v952 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)v3;
  uint64_t v6 = *(unsigned __int8 **)(v3 + 96);
  uint64_t v7 = *(void *)(v3 + 48);
  int v8 = *(_DWORD *)(*(void *)(*(void *)v2 + 56)
                 + 16 * *(_DWORD *)v3
                 + 8 * (v6 == 0)
                 + 4 * (v7 == 0));
  if (v8 > 27) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v865 = *(unsigned int *)(v3 + 4);
  unsigned int v10 = v865 - 1;
  if ((int)v865 < 1) {
    return 0;
  }
  int v11 = *(_DWORD *)(v3 + 8);
  uint64_t v12 = (v11 - 1);
  if (v11 < 1) {
    return 0;
  }
  uint64_t v13 = *(uint16x4_t **)(v3 + 136);
  int v858 = *(_DWORD *)(*(void *)(*(void *)v2 + 56)
                   + 16 * *(_DWORD *)v3
                   + 8 * (v6 == 0)
                   + 4 * (v7 == 0));
  uint64_t v856 = v3;
  if ((v5 & 0xFF0000) != 0x50000 && v13)
  {
    int v14 = *(_DWORD *)(v3 + 128);
    if ((v14 | 8) == 8)
    {
      if ((*(_DWORD *)v3 & 0xFF00) == 0x400) {
        RGB555_mark_constmask(v3, v8);
      }
      else {
        RGB555_mark_pixelmask(v3, v8);
      }
    }
    else
    {
      int v21 = *(_DWORD *)(v3 + 112);
      int v22 = *(_DWORD *)(v3 + 116);
      unsigned int v23 = (v21 + 15) & 0xFFFFFFF0;
      size_t v24 = v23 * v22;
      if ((int)v24 <= 4096)
      {
        uint64_t v26 = v951;
        uint64_t v27 = v3;
      }
      else
      {
        unint64_t v25 = malloc_type_malloc(v24, 0x8303D2FuLL);
        if (!v25) {
          return 1;
        }
        uint64_t v26 = v25;
        uint64_t v27 = v856;
        uint64_t v13 = *(uint16x4_t **)(v856 + 136);
        int v14 = *(_DWORD *)(v856 + 128);
      }
      CGSConvertBitsToMask(v13, *(_DWORD *)(v27 + 124), v26, v23, v21, v22, v14);
      long long v49 = *(_OWORD *)(v27 + 112);
      long long v947 = *(_OWORD *)(v27 + 96);
      long long v948 = v49;
      long long v50 = *(_OWORD *)(v27 + 144);
      long long v949 = *(_OWORD *)(v27 + 128);
      long long v950 = v50;
      long long v51 = *(_OWORD *)(v27 + 48);
      long long v943 = *(_OWORD *)(v27 + 32);
      long long v944 = v51;
      long long v52 = *(_OWORD *)(v27 + 80);
      long long v945 = *(_OWORD *)(v27 + 64);
      long long v946 = v52;
      long long v53 = *(_OWORD *)(v27 + 16);
      *(_OWORD *)v941 = *(_OWORD *)v27;
      long long v942 = v53;
      HIDWORD(v948) = (v21 + 15) & 0xFFFFFFF0;
      *((void *)&v949 + 1) = v26;
      if (BYTE1(v941[0]) << 8 == 1024) {
        RGB555_mark_constmask((uint64_t)v941, v858);
      }
      else {
        RGB555_mark_pixelmask((uint64_t)v941, v858);
      }
      if (v26 != (unsigned char *)v951)
      {
        uint64_t v58 = v26;
        goto LABEL_1119;
      }
    }
    return 1;
  }
  if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
  {
    v951[0] = *(_DWORD *)(v3 + 4);
    v941[0] = v11;
    if (v6) {
      unsigned int v15 = *v6;
    }
    else {
      unsigned int v15 = 255;
    }
    unsigned int v28 = **(unsigned __int16 **)(v3 + 88);
    unsigned int v29 = __rev16(v28);
    uint64_t v31 = *(int *)(v3 + 12);
    uint64_t v30 = *(int *)(v3 + 16);
    unint64_t v32 = (unint64_t)*(int *)(v3 + 28) >> 1;
    int v33 = v865;
    if (v7)
    {
      uint64_t v927 = *(int *)(v3 + 32);
      v901 = (char *)(v7 + v31 + (int)v927 * (uint64_t)(int)v30);
      unsigned int v895 = 1;
    }
    else
    {
      v901 = 0;
      uint64_t v927 = 0;
      unsigned int v895 = 0;
    }
    char v41 = ~(_BYTE)v15;
    uint64_t v42 = *(void *)(v3 + 40) + 2 * (v31 + v30 * v32);
    uint64_t v897 = v42;
    unint64_t v899 = (unint64_t)*(int *)(v3 + 28) >> 1;
    if (v13)
    {
      shape_enum_clip_alloc(v2, v3, (int *)v13, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v865, v11);
      uint64_t v44 = v43;
      long long v45 = v901;
      *(void *)v937 = v927;
      if (v43) {
        goto LABEL_347;
      }
      return 1;
    }
    uint64_t v929 = 0;
    if (v7) {
      unint64_t v46 = v865;
    }
    else {
      unint64_t v46 = 0;
    }
    long long v45 = v901;
    *(void *)v937 = v927 - v46;
    long long v47 = (char *)v42;
    unint64_t v48 = v865;
LABEL_76:
    unint64_t v77 = v32 - v48;
    switch(v8)
    {
      case 0:
        uint64_t v78 = v77 + v33;
        int v79 = v941[0];
        uint64_t v932 = v941[0] - 1;
        float v80 = &v47[2 * ((v78 * v932) & (v78 >> 63))];
        if (v78 < 0) {
          uint64_t v78 = -v78;
        }
        CGBlt_fillBytes(2 * v33, v941[0], 0, v80, 2 * v78);
        if (v7)
        {
          uint64_t v81 = *(void *)v937 + v33;
          v45 += (v81 * v932) & (v81 >> 63);
          if (v81 >= 0) {
            uint64_t v82 = *(void *)v937 + v33;
          }
          else {
            uint64_t v82 = -v81;
          }
          int v83 = v33;
          unsigned int v84 = v79;
          int v85 = 0;
          goto LABEL_95;
        }
        goto LABEL_345;
      case 1:
        uint64_t v86 = v77 + v33;
        if (v86 < 0)
        {
          v47 += 2 * v86 * (v941[0] - 1);
          uint64_t v86 = -v86;
        }
        int v87 = 0;
        uint64_t v88 = *(int **)(v856 + 88);
        if (v88) {
          int v87 = *v88;
        }
        int v89 = v941[0];
        CGBlt_fillBytes(2 * v33, v941[0], v87, v47, 2 * v86);
        if (v7)
        {
          unsigned int v84 = v89;
          int v90 = *(int **)(v856 + 96);
          if (!v90) {
            int v90 = (int *)&PIXELALPHAPLANARCONSTANT_17534;
          }
          v45 += ((*(void *)v937 + v33) * (v89 - 1)) & ((*(void *)v937 + v33) >> 63);
          if (*(void *)v937 + v33 >= 0) {
            uint64_t v82 = *(void *)v937 + v33;
          }
          else {
            uint64_t v82 = -(*(void *)v937 + v33);
          }
          int v85 = *v90;
          int v83 = v33;
LABEL_95:
          *(void *)v937 = v82;
          CGBlt_fillBytes(v83, v84, v85, v45, v82);
        }
        goto LABEL_345;
      case 2:
        unsigned int v894 = v28;
        unint64_t v933 = v32 - v48;
        if (v7)
        {
          do
          {
            int v91 = v951[0];
            if (v951[0] >= 4)
            {
              unsigned int v92 = (v951[0] >> 2) + 1;
              do
              {
                unsigned int v93 = PDAplusDAM(v29, v15, bswap32(*(unsigned __int16 *)v47) >> 16, *v45, ~(_BYTE)v15);
                *(_WORD *)long long v47 = bswap32(v93) >> 16;
                *long long v45 = HIBYTE(v93);
                unsigned int v94 = PDAplusDAM(v29, v15, bswap32(*((unsigned __int16 *)v47 + 1)) >> 16, v45[1], ~(_BYTE)v15);
                *((_WORD *)v47 + 1) = bswap32(v94) >> 16;
                v45[1] = HIBYTE(v94);
                unsigned int v95 = PDAplusDAM(v29, v15, bswap32(*((unsigned __int16 *)v47 + 2)) >> 16, v45[2], ~(_BYTE)v15);
                *((_WORD *)v47 + 2) = bswap32(v95) >> 16;
                v45[2] = HIBYTE(v95);
                unsigned int v96 = PDAplusDAM(v29, v15, bswap32(*((unsigned __int16 *)v47 + 3)) >> 16, v45[3], ~(_BYTE)v15);
                *((_WORD *)v47 + 3) = bswap32(v96) >> 16;
                v45[3] = HIBYTE(v96);
                v47 += 8;
                v45 += 4 * v895;
                --v92;
              }
              while (v92 > 1);
              int v91 = v951[0] & 3;
              unsigned int v28 = v894;
            }
            if (v91 >= 1)
            {
              unsigned int v97 = v91 + 1;
              do
              {
                unsigned int v98 = PDAplusDAM(v29, v15, bswap32(*(unsigned __int16 *)v47) >> 16, *v45, ~(_BYTE)v15);
                *(_WORD *)long long v47 = bswap32(v98) >> 16;
                v47 += 2;
                *long long v45 = HIBYTE(v98);
                v45 += v895;
                --v97;
              }
              while (v97 > 1);
            }
            v47 += 2 * v933;
            v45 += *(void *)v937;
            --v941[0];
          }
          while (v941[0]);
          goto LABEL_344;
        }
        int v186 = v941[0];
        int v891 = v33 & 3;
        int v889 = (v33 >> 2) + 1;
        int v866 = v33;
        do
        {
          if (v33 >= 4)
          {
            unsigned int v187 = v889;
            do
            {
              *(_WORD *)long long v47 = __rev16(PDplusDM(v29, bswap32(*(unsigned __int16 *)v47) >> 16, ~(_BYTE)v15));
              *((_WORD *)v47 + 1) = __rev16(PDplusDM(v29, bswap32(*((unsigned __int16 *)v47 + 1)) >> 16, ~(_BYTE)v15));
              *((_WORD *)v47 + 2) = __rev16(PDplusDM(v29, bswap32(*((unsigned __int16 *)v47 + 2)) >> 16, ~(_BYTE)v15));
              *((_WORD *)v47 + 3) = __rev16(PDplusDM(v29, bswap32(*((unsigned __int16 *)v47 + 3)) >> 16, ~(_BYTE)v15));
              v47 += 8;
              v45 += 4 * v895;
              --v187;
            }
            while (v187 > 1);
            int v33 = v891;
          }
          if (v33 >= 1)
          {
            unsigned int v188 = v33 + 1;
            do
            {
              *(_WORD *)long long v47 = __rev16(PDplusDM(v29, bswap32(*(unsigned __int16 *)v47) >> 16, ~(_BYTE)v15));
              v47 += 2;
              --v188;
            }
            while (v188 > 1);
            v45 += v33 * v895;
          }
          v47 += 2 * v933;
          v45 += *(void *)v937;
          --v186;
          int v33 = v866;
        }
        while (v186);
        goto LABEL_379;
      case 3:
        do
        {
          int v99 = v951[0];
          do
          {
            unsigned int v100 = *v45;
            if (v100 > 7)
            {
              if (v100 < 0xF8)
              {
                unsigned int v102 = PDAM(v29, v15, v100);
                *(_WORD *)long long v47 = bswap32(v102) >> 16;
                unsigned int v101 = HIBYTE(v102);
              }
              else
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v101) = v15;
              }
            }
            else
            {
              LOBYTE(v101) = 0;
              *(_WORD *)long long v47 = 0;
            }
            *long long v45 = v101;
            v47 += 2;
            v45 += v895;
            --v99;
          }
          while (v99);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          --v941[0];
        }
        while (v941[0]);
        goto LABEL_344;
      case 4:
        do
        {
          int v103 = v951[0];
          do
          {
            unsigned int v104 = *v45;
            if (v104 < 0xF8)
            {
              if (v104 > 7)
              {
                unsigned int v106 = PDAM(v29, v15, ~(_BYTE)v104);
                *(_WORD *)long long v47 = bswap32(v106) >> 16;
                unsigned int v105 = HIBYTE(v106);
              }
              else
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v105) = v15;
              }
            }
            else
            {
              LOBYTE(v105) = 0;
              *(_WORD *)long long v47 = 0;
            }
            *long long v45 = v105;
            v47 += 2;
            v45 += v895;
            --v103;
          }
          while (v103);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          --v941[0];
        }
        while (v941[0]);
        goto LABEL_344;
      case 5:
        do
        {
          int v107 = v951[0];
          do
          {
            unsigned int v108 = PDAMplusDAM(v29, v15, *v45, bswap32(*(unsigned __int16 *)v47) >> 16, *v45, ~(_BYTE)v15);
            *(_WORD *)long long v47 = bswap32(v108) >> 16;
            v47 += 2;
            *long long v45 = HIBYTE(v108);
            v45 += v895;
            --v107;
          }
          while (v107);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          --v941[0];
        }
        while (v941[0]);
        goto LABEL_344;
      case 6:
        while (1)
        {
          int v109 = v951[0];
          do
          {
            unsigned int v110 = *v45;
            if (v110 > 7)
            {
              if (v110 > 0xF7) {
                goto LABEL_134;
              }
              unsigned int v112 = PDAplusDAM(bswap32(*(unsigned __int16 *)v47) >> 16, v110, v29, v15, ~(_BYTE)v110);
              *(_WORD *)long long v47 = bswap32(v112) >> 16;
              unsigned int v111 = HIBYTE(v112);
            }
            else
            {
              *(_WORD *)long long v47 = v28;
              LOBYTE(v111) = v15;
            }
            *long long v45 = v111;
LABEL_134:
            v47 += 2;
            v45 += v895;
            --v109;
          }
          while (v109);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 7:
        unint64_t v934 = v32 - v48;
        if (v7)
        {
          do
          {
            int v113 = v951[0];
            do
            {
              unsigned int v114 = PDAM(bswap32(*(unsigned __int16 *)v47) >> 16, *v45, v15);
              *(_WORD *)long long v47 = bswap32(v114) >> 16;
              v47 += 2;
              *long long v45 = HIBYTE(v114);
              v45 += v895;
              --v113;
            }
            while (v113);
            v47 += 2 * v934;
            v45 += *(void *)v937;
            --v941[0];
          }
          while (v941[0]);
          goto LABEL_344;
        }
        unsigned int v894 = v28;
        int v189 = v941[0];
        do
        {
          int v190 = v33;
          do
          {
            *(_WORD *)long long v47 = __rev16(PDM(bswap32(*(unsigned __int16 *)v47) >> 16, v15));
            v47 += 2;
            --v190;
          }
          while (v190);
          v47 += 2 * v934;
          v45 += v895 + v895 * (unint64_t)(v33 - 1) + *(void *)v937;
          --v189;
        }
        while (v189);
        goto LABEL_379;
      case 8:
        unint64_t v935 = v32 - v48;
        if (v7)
        {
          do
          {
            int v115 = v951[0];
            do
            {
              unsigned int v116 = PDAM(bswap32(*(unsigned __int16 *)v47) >> 16, *v45, v41);
              *(_WORD *)long long v47 = bswap32(v116) >> 16;
              v47 += 2;
              *long long v45 = HIBYTE(v116);
              v45 += v895;
              --v115;
            }
            while (v115);
            v47 += 2 * v935;
            v45 += *(void *)v937;
            --v941[0];
          }
          while (v941[0]);
          goto LABEL_344;
        }
        unsigned int v894 = v28;
        int v191 = v941[0];
        do
        {
          int v192 = v33;
          do
          {
            *(_WORD *)long long v47 = __rev16(PDM(bswap32(*(unsigned __int16 *)v47) >> 16, v41));
            v47 += 2;
            --v192;
          }
          while (v192);
          v47 += 2 * v935;
          v45 += v895 + v895 * (unint64_t)(v33 - 1) + *(void *)v937;
          --v191;
        }
        while (v191);
        goto LABEL_379;
      case 9:
        do
        {
          int v117 = v951[0];
          do
          {
            unsigned int v118 = PDAMplusDAM(v29, v15, *v45 ^ 0xFFu, bswap32(*(unsigned __int16 *)v47) >> 16, *v45, v15);
            *(_WORD *)long long v47 = bswap32(v118) >> 16;
            v47 += 2;
            *long long v45 = HIBYTE(v118);
            v45 += v895;
            --v117;
          }
          while (v117);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          --v941[0];
        }
        while (v941[0]);
        goto LABEL_344;
      case 10:
        do
        {
          int v119 = v951[0];
          do
          {
            unsigned int v120 = PDAMplusDAM(v29, v15, *v45 ^ 0xFFu, bswap32(*(unsigned __int16 *)v47) >> 16, *v45, ~(_BYTE)v15);
            *(_WORD *)long long v47 = bswap32(v120) >> 16;
            v47 += 2;
            *long long v45 = HIBYTE(v120);
            v45 += v895;
            --v119;
          }
          while (v119);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          --v941[0];
        }
        while (v941[0]);
        goto LABEL_344;
      case 11:
        unint64_t v936 = v32 - v48;
        if (v7)
        {
          do
          {
            int v121 = v951[0];
            do
            {
              unsigned int v122 = PDAplusdDA(bswap32(*(unsigned __int16 *)v47) >> 16, *v45, v29, v15);
              *(_WORD *)long long v47 = bswap32(v122) >> 16;
              v47 += 2;
              *long long v45 = HIBYTE(v122);
              v45 += v895;
              --v121;
            }
            while (v121);
            v47 += 2 * v936;
            v45 += *(void *)v937;
            --v941[0];
          }
          while (v941[0]);
          goto LABEL_344;
        }
        unsigned int v894 = v28;
        int v193 = v941[0];
        do
        {
          int v194 = v33;
          do
          {
            *(_WORD *)long long v47 = __rev16(PDplusdDA(bswap32(*(unsigned __int16 *)v47) >> 16, v29, v15));
            v47 += 2;
            --v194;
          }
          while (v194);
          v47 += 2 * v936;
          v45 += v895 + v895 * (unint64_t)(v33 - 1) + *(void *)v937;
          --v193;
        }
        while (v193);
LABEL_379:
        v941[0] = 0;
        int v8 = v858;
        unsigned int v28 = v894;
        goto LABEL_345;
      case 12:
        if (v7)
        {
          do
          {
            int v123 = v951[0];
            do
            {
              unsigned int v124 = PDApluslDA(bswap32(*(unsigned __int16 *)v47) >> 16, *v45, v29, v15);
              *(_WORD *)long long v47 = bswap32(v124) >> 16;
              v47 += 2;
              *long long v45 = HIBYTE(v124);
              v45 += v895;
              --v123;
            }
            while (v123);
            v47 += 2 * v77;
            v45 += *(void *)v937;
            --v941[0];
          }
          while (v941[0]);
          goto LABEL_344;
        }
        int v195 = v941[0];
        do
        {
          int v196 = v33;
          do
          {
            unsigned int v197 = bswap32(*(unsigned __int16 *)v47);
            unsigned int v198 = (((HIWORD(v197) << 15) | HIWORD(v197)) & 0x1F07C1F) + ((v29 | (v29 << 15)) & 0x1F07C1F);
            *(_WORD *)long long v47 = __rev16((((15 * ((v198 >> 5) & 0x100401)) | v198 | (30 * ((v198 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v198 >> 5) & 0x100401)) | v198 | (30 * ((v198 >> 5) & 0x100401))) & 0x7C1F);
            v47 += 2;
            --v196;
          }
          while (v196);
          v47 += 2 * v77;
          v45 += v895 + v895 * (unint64_t)(v33 - 1) + *(void *)v937;
          --v195;
        }
        while (v195);
        v941[0] = 0;
        goto LABEL_345;
      case 13:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v125 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v126 = *v45;
              if (v126 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v127) = v15;
                goto LABEL_173;
              }
            }
            else
            {
              unsigned int v126 = 255;
            }
            unsigned int v128 = PDAmultiplyPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v126, v29, v15, v4);
            *(_WORD *)long long v47 = bswap32(v128) >> 16;
            if (!v7) {
              goto LABEL_174;
            }
            unsigned int v127 = HIBYTE(v128);
LABEL_173:
            *long long v45 = v127;
LABEL_174:
            v47 += 2;
            v45 += v895;
            --v125;
          }
          while (v125);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 14:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v129 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v130 = *v45;
              if (v130 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v131) = v15;
                goto LABEL_185;
              }
            }
            else
            {
              unsigned int v130 = 255;
            }
            unsigned int v132 = PDAscreenPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v130, v29, v15);
            *(_WORD *)long long v47 = bswap32(v132) >> 16;
            if (!v7) {
              goto LABEL_186;
            }
            unsigned int v131 = HIBYTE(v132);
LABEL_185:
            *long long v45 = v131;
LABEL_186:
            v47 += 2;
            v45 += v895;
            --v129;
          }
          while (v129);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 15:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v133 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v134 = *v45;
              if (v134 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v135) = v15;
                goto LABEL_197;
              }
            }
            else
            {
              unsigned int v134 = 255;
            }
            unsigned int v136 = PDAoverlayPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v134, v29, v15);
            *(_WORD *)long long v47 = bswap32(v136) >> 16;
            if (!v7) {
              goto LABEL_198;
            }
            unsigned int v135 = HIBYTE(v136);
LABEL_197:
            *long long v45 = v135;
LABEL_198:
            v47 += 2;
            v45 += v895;
            --v133;
          }
          while (v133);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 16:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v137 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v138 = *v45;
              if (v138 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v139) = v15;
                goto LABEL_209;
              }
            }
            else
            {
              unsigned int v138 = 255;
            }
            unsigned int v140 = PDAdarkenPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v138, v29, v15);
            *(_WORD *)long long v47 = bswap32(v140) >> 16;
            if (!v7) {
              goto LABEL_210;
            }
            unsigned int v139 = HIBYTE(v140);
LABEL_209:
            *long long v45 = v139;
LABEL_210:
            v47 += 2;
            v45 += v895;
            --v137;
          }
          while (v137);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 17:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v141 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v142 = *v45;
              if (v142 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v143) = v15;
                goto LABEL_221;
              }
            }
            else
            {
              unsigned int v142 = 255;
            }
            unsigned int v144 = PDAlightenPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v142, v29, v15);
            *(_WORD *)long long v47 = bswap32(v144) >> 16;
            if (!v7) {
              goto LABEL_222;
            }
            unsigned int v143 = HIBYTE(v144);
LABEL_221:
            *long long v45 = v143;
LABEL_222:
            v47 += 2;
            v45 += v895;
            --v141;
          }
          while (v141);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 18:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v145 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v146 = *v45;
              if (v146 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v147) = v15;
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v146 = 255;
            }
            unsigned int v148 = PDAcolordodgePDA(bswap32(*(unsigned __int16 *)v47) >> 16, v146, v29, v15);
            *(_WORD *)long long v47 = bswap32(v148) >> 16;
            if (!v7) {
              goto LABEL_234;
            }
            unsigned int v147 = HIBYTE(v148);
LABEL_233:
            *long long v45 = v147;
LABEL_234:
            v47 += 2;
            v45 += v895;
            --v145;
          }
          while (v145);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 19:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v149 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v150 = *v45;
              if (v150 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v151) = v15;
                goto LABEL_245;
              }
            }
            else
            {
              unsigned int v150 = 255;
            }
            unsigned int v152 = PDAcolorburnPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v150, v29, v15);
            *(_WORD *)long long v47 = bswap32(v152) >> 16;
            if (!v7) {
              goto LABEL_246;
            }
            unsigned int v151 = HIBYTE(v152);
LABEL_245:
            *long long v45 = v151;
LABEL_246:
            v47 += 2;
            v45 += v895;
            --v149;
          }
          while (v149);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 20:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v153 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v154 = *v45;
              if (v154 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v155) = v15;
                goto LABEL_257;
              }
            }
            else
            {
              unsigned int v154 = 255;
            }
            unsigned int v156 = PDAsoftlightPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v154, v29, v15);
            *(_WORD *)long long v47 = bswap32(v156) >> 16;
            if (!v7) {
              goto LABEL_258;
            }
            unsigned int v155 = HIBYTE(v156);
LABEL_257:
            *long long v45 = v155;
LABEL_258:
            v47 += 2;
            v45 += v895;
            --v153;
          }
          while (v153);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 21:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v157 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v158 = *v45;
              if (v158 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v159) = v15;
                goto LABEL_269;
              }
            }
            else
            {
              unsigned int v158 = 255;
            }
            unsigned int v160 = PDAhardlightPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v158, v29, v15);
            *(_WORD *)long long v47 = bswap32(v160) >> 16;
            if (!v7) {
              goto LABEL_270;
            }
            unsigned int v159 = HIBYTE(v160);
LABEL_269:
            *long long v45 = v159;
LABEL_270:
            v47 += 2;
            v45 += v895;
            --v157;
          }
          while (v157);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 22:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v161 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v162 = *v45;
              if (v162 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v163) = v15;
                goto LABEL_281;
              }
            }
            else
            {
              unsigned int v162 = 255;
            }
            unsigned int v164 = PDAdifferencePDA(bswap32(*(unsigned __int16 *)v47) >> 16, v162, v29, v15);
            *(_WORD *)long long v47 = bswap32(v164) >> 16;
            if (!v7) {
              goto LABEL_282;
            }
            unsigned int v163 = HIBYTE(v164);
LABEL_281:
            *long long v45 = v163;
LABEL_282:
            v47 += 2;
            v45 += v895;
            --v161;
          }
          while (v161);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 23:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v165 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v166 = *v45;
              if (v166 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v167) = v15;
                goto LABEL_293;
              }
            }
            else
            {
              unsigned int v166 = 255;
            }
            unsigned int v168 = PDAexclusionPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v166, v29, v15);
            *(_WORD *)long long v47 = bswap32(v168) >> 16;
            if (!v7) {
              goto LABEL_294;
            }
            unsigned int v167 = HIBYTE(v168);
LABEL_293:
            *long long v45 = v167;
LABEL_294:
            v47 += 2;
            v45 += v895;
            --v165;
          }
          while (v165);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 24:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v169 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v170 = *v45;
              if (v170 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v171) = v15;
                goto LABEL_305;
              }
            }
            else
            {
              unsigned int v170 = 255;
            }
            unsigned int v172 = PDAhuePDA(bswap32(*(unsigned __int16 *)v47) >> 16, v170, v29, v15);
            *(_WORD *)long long v47 = bswap32(v172) >> 16;
            if (!v7) {
              goto LABEL_306;
            }
            unsigned int v171 = HIBYTE(v172);
LABEL_305:
            *long long v45 = v171;
LABEL_306:
            v47 += 2;
            v45 += v895;
            --v169;
          }
          while (v169);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 25:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v173 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v174 = *v45;
              if (v174 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v175) = v15;
                goto LABEL_317;
              }
            }
            else
            {
              unsigned int v174 = 255;
            }
            unsigned int v176 = PDAsaturationPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v174, v29, v15);
            *(_WORD *)long long v47 = bswap32(v176) >> 16;
            if (!v7) {
              goto LABEL_318;
            }
            unsigned int v175 = HIBYTE(v176);
LABEL_317:
            *long long v45 = v175;
LABEL_318:
            v47 += 2;
            v45 += v895;
            --v173;
          }
          while (v173);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 26:
        if (v15 < 8) {
          goto LABEL_345;
        }
        while (1)
        {
          int v177 = v951[0];
          do
          {
            if (v7)
            {
              unsigned int v178 = *v45;
              if (v178 <= 7)
              {
                *(_WORD *)long long v47 = v28;
                LOBYTE(v179) = v15;
                goto LABEL_329;
              }
            }
            else
            {
              unsigned int v178 = 255;
            }
            unsigned int v180 = PDAluminosityPDA(v29, v15, bswap32(*(unsigned __int16 *)v47) >> 16, v178);
            *(_WORD *)long long v47 = bswap32(v180) >> 16;
            if (!v7) {
              goto LABEL_330;
            }
            unsigned int v179 = HIBYTE(v180);
LABEL_329:
            *long long v45 = v179;
LABEL_330:
            v47 += 2;
            v45 += v895;
            --v177;
          }
          while (v177);
          v47 += 2 * v77;
          v45 += *(void *)v937;
          if (!--v941[0]) {
            goto LABEL_344;
          }
        }
      case 27:
        if (v15 < 8) {
          goto LABEL_345;
        }
        break;
      default:
        goto LABEL_345;
    }
LABEL_334:
    int v181 = v951[0];
    while (1)
    {
      if (v7)
      {
        unsigned int v182 = *v45;
        if (v182 <= 7)
        {
          *(_WORD *)long long v47 = v28;
          LOBYTE(v183) = v15;
LABEL_341:
          *long long v45 = v183;
          goto LABEL_342;
        }
      }
      else
      {
        unsigned int v182 = 255;
      }
      unsigned int v184 = PDAluminosityPDA(bswap32(*(unsigned __int16 *)v47) >> 16, v182, v29, v15);
      *(_WORD *)long long v47 = bswap32(v184) >> 16;
      if (v7)
      {
        unsigned int v183 = HIBYTE(v184);
        goto LABEL_341;
      }
LABEL_342:
      v47 += 2;
      v45 += v895;
      if (!--v181)
      {
        v47 += 2 * v77;
        v45 += *(void *)v937;
        if (!--v941[0])
        {
LABEL_344:
          int v8 = v858;
LABEL_345:
          uint64_t v44 = v929;
          if (!v929) {
            return 1;
          }
          uint64_t v940 = 0;
LABEL_347:
          if (!shape_enum_clip_next(v44, (int *)&v940 + 1, &v940, v951, v941))
          {
            uint64_t v58 = (void *)v44;
            goto LABEL_1119;
          }
          uint64_t v929 = v44;
          unint64_t v32 = v899;
          long long v47 = (char *)(v897 + 2 * v899 * (int)v940 + 2 * SHIDWORD(v940));
          unint64_t v48 = v951[0];
          if (v7) {
            long long v45 = &v901[(int)v927 * (uint64_t)(int)v940 + SHIDWORD(v940)];
          }
          uint64_t v185 = *(void *)v937;
          if (v7) {
            uint64_t v185 = v927 - v951[0];
          }
          *(void *)v937 = v185;
          int v33 = v951[0];
          goto LABEL_76;
        }
        goto LABEL_334;
      }
    }
  }
  v951[0] = *(_DWORD *)(v3 + 4);
  v941[0] = v11;
  uint64_t v16 = *(void *)(v3 + 88);
  uint64_t v18 = *(int *)(v3 + 12);
  uint64_t v17 = *(int *)(v3 + 16);
  unint64_t v19 = (unint64_t)*(int *)(v3 + 28) >> 1;
  if (v7)
  {
    uint64_t v854 = *(int *)(v3 + 32);
    unint64_t v855 = (char *)(v7 + v18 + (int)v854 * (uint64_t)(int)v17);
    uint64_t v20 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v854 = 0;
    unint64_t v855 = 0;
    uint64_t v20 = 0;
  }
  unint64_t v853 = *(void *)(v3 + 40) + 2 * (v18 + v17 * v19);
  int v35 = *(_DWORD *)(v3 + 104);
  int v34 = *(_DWORD *)(v3 + 108);
  int v36 = *(_DWORD *)(v3 + 56);
  int v37 = BYTE1(v5);
  int v818 = v36;
  int v819 = *(_DWORD *)(v3 + 60);
  if (v37 == 3)
  {
    char v54 = v20;
    uint64_t v2 = RGB555_colorlookup(3, (unsigned __int16 *)v16, v6);
    uint64_t v16 = v2;
    if (v6)
    {
      char v55 = 0;
      uint64_t v6 = (unsigned __int8 *)(v2 + 512);
      uint64_t v56 = 16;
      int v40 = 1;
      unint64_t v57 = 16;
    }
    else
    {
      uint64_t v56 = 0;
      int v40 = 0;
      unint64_t v57 = 16;
      char v55 = 1;
    }
    LODWORD(v864) = 16;
    LOBYTE(v20) = v54;
    uint64_t v39 = 16;
  }
  else
  {
    if (v37 == 1)
    {
      uint64_t v38 = *(int *)(v3 + 60);
      unint64_t v864 = (unint64_t)*(int *)(v3 + 76) >> 1;
      if (v6)
      {
        uint64_t v39 = *(int *)(v3 + 80);
        v6 += v36 + (int)v39 * (uint64_t)(int)v38;
        int v40 = -1;
      }
      else
      {
        uint64_t v39 = 0;
        int v40 = 0;
      }
      v931 = (_WORD *)(v16 + 2 * (v36 + v38 * v864));
      if (v864 == v19 && (uint64_t)(v853 - (void)v931) >= 1)
      {
        if (v865 >= (v853 - (unint64_t)v931) >> 1)
        {
          v853 += 2 * v10;
          v855 += v20 & v10;
          v6 += v40 & v10;
          uint64_t v61 = 0xFFFFFFFFLL;
          unint64_t v864 = (unint64_t)*(int *)(v3 + 28) >> 1;
          v931 += v10;
          goto LABEL_52;
        }
        unint64_t v59 = v19 * v12;
        uint64_t v60 = &v931[v19 * v12];
        if (v853 <= (unint64_t)&v60[v10])
        {
          unint64_t v19 = -(uint64_t)v19;
          uint64_t v76 = &v855[v854 * v12];
          uint64_t v854 = -v854;
          unint64_t v855 = v76;
          v20 &= 1u;
          v6 += v39 * v12;
          uint64_t v39 = -v39;
          v40 &= 1u;
          uint64_t v61 = 1;
          v931 = v60;
          unint64_t v864 = v19;
          v853 += 2 * v59;
          goto LABEL_52;
        }
      }
      v20 &= 1u;
      v40 &= 1u;
      uint64_t v61 = 1;
LABEL_52:
      if (v13)
      {
        uint64_t v928 = v20;
        int v930 = v40;
        v898 = 0;
        uint64_t v16 = -1;
        unint64_t v893 = 0;
        unint64_t v896 = v864;
        uint64_t v56 = v39;
        goto LABEL_60;
      }
      uint64_t v62 = v61;
      int v63 = v865;
      unint64_t v64 = (int)v61 * (int)v865;
      uint64_t v888 = v854 - (int)v20 * (int)v865;
      unint64_t v65 = -1;
      uint64_t v56 = v39;
      unint64_t v66 = v864;
LABEL_73:
      v898 = 0;
      v900 = (char *)v6;
      unint64_t v893 = 0;
      unint64_t v896 = v66 - v64;
      v56 -= v40 * v63;
      uint64_t v862 = 0;
      uint64_t v863 = (uint64_t)v931;
      int v70 = (char *)v6;
      uint64_t v71 = v855;
      v938 = (_WORD *)v853;
      goto LABEL_386;
    }
    uint64_t v39 = *(unsigned int *)(v3 + 68);
    LODWORD(v864) = *(_DWORD *)(v3 + 64);
    unint64_t v57 = (unint64_t)*(int *)(v3 + 76) >> 1;
    if (v6)
    {
      char v55 = 0;
      uint64_t v56 = *(int *)(v3 + 80);
      int v40 = 1;
    }
    else
    {
      uint64_t v56 = 0;
      int v40 = 0;
      char v55 = 1;
    }
  }
  unint64_t v893 = v16 + 2 * v57 * (int)v39;
  unint64_t v896 = v57;
  v20 &= 1u;
  if (v13)
  {
    uint64_t v928 = v20;
    int v930 = v40;
    uint64_t v61 = 1;
    v898 = (_WORD *)v16;
    v931 = (_WORD *)v16;
LABEL_60:
    unint64_t v902 = v16;
    int v817 = v11;
    uint64_t v62 = v61;
    shape_enum_clip_alloc(v2, v3, (int *)v13, v61, v19, 1, v35, v34, v865, v817);
    uint64_t v68 = v67;
    int v69 = v931;
    int v70 = (char *)v6;
    v900 = (char *)v6;
    uint64_t v71 = v855;
    uint64_t v888 = v854;
    if (v67) {
      goto LABEL_1094;
    }
    return 1;
  }
  int v63 = v865;
  uint64_t v888 = v854 - (v20 * v865);
  if (!v16)
  {
    v931 = 0;
    unint64_t v65 = 0;
    uint64_t v62 = 1;
    unint64_t v64 = v865;
    unint64_t v66 = v57;
    goto LABEL_73;
  }
  int v72 = v819 % (int)v39;
  int v73 = v818 % (int)v864;
  uint64_t v863 = v16;
  unint64_t v74 = v16 + 2 * v57 * (v819 % (int)v39);
  unint64_t v65 = v74 + 2 * (int)v864;
  uint64_t v62 = 1;
  if ((v55 & 1) == 0) {
    int v40 = 1;
  }
  uint64_t v862 = 0;
  if (v55) {
    int v70 = (char *)v6;
  }
  else {
    int v70 = (char *)&v6[(int)v56 * (uint64_t)v72 + v73];
  }
  if (v55) {
    uint64_t v75 = (uint64_t)v6;
  }
  else {
    uint64_t v75 = (uint64_t)&v6[(int)v56 * (uint64_t)v72 + v73];
  }
  v898 = (_WORD *)(v74 + 2 * v73);
  v900 = (char *)v75;
  uint64_t v71 = v855;
  v931 = v898;
  v938 = (_WORD *)v853;
  unint64_t v64 = v865;
LABEL_385:
  int v818 = v73;
  int v819 = v72;
LABEL_386:
  uint64_t v928 = v20;
  int v930 = v40;
  uint64_t v890 = v56;
  unint64_t v892 = v19 - v64;
  unint64_t v859 = v6;
  uint64_t v860 = v39;
  unint64_t v861 = v19;
  uint64_t v857 = v62;
  switch(v8)
  {
    case 0:
      unint64_t v902 = v65;
      uint64_t v199 = v892 - (int)v865;
      unsigned int v200 = &v938[-(int)v865 + 1];
      if ((int)v62 >= 0)
      {
        unsigned int v200 = v938;
        uint64_t v199 = v892 + (int)v865;
      }
      unsigned int v201 = v941[0];
      uint64_t v202 = v941[0] - 1;
      uint64_t v203 = (char *)&v200[(v199 * v202) & (v199 >> 63)];
      if (v199 < 0) {
        uint64_t v199 = -v199;
      }
      int v204 = v20;
      CGBlt_fillBytes(2 * v865, v941[0], 0, v203, 2 * v199);
      if (v204)
      {
        uint64_t v205 = v888 - (int)v865;
        unsigned int v206 = &v71[-(int)v865 + 1];
        if ((int)v62 >= 0)
        {
          unsigned int v206 = v71;
          uint64_t v205 = v888 + (int)v865;
        }
        uint64_t v207 = (v205 * v202) & (v205 >> 63);
        if (v205 >= 0) {
          uint64_t v208 = v205;
        }
        else {
          uint64_t v208 = -v205;
        }
        uint64_t v71 = &v206[v207];
        uint64_t v888 = v208;
        CGBlt_fillBytes(v865, v201, 0, &v206[v207], v208);
      }
      goto LABEL_398;
    case 1:
      int v209 = *(unsigned __int8 *)(v856 + 1);
      if ((v209 - 2) >= 2)
      {
        if (v209 == 1)
        {
          unint64_t v902 = v65;
          uint64_t v667 = v896 - (int)v865;
          int v668 = v865 - 1;
          unint64_t v669 = &v931[-(int)v865 + 1];
          uint64_t v670 = v892 - (int)v865;
          uint64_t v671 = &v938[-(int)v865 + 1];
          if ((int)v62 >= 0)
          {
            unint64_t v669 = v931;
            uint64_t v671 = v938;
            uint64_t v667 = v896 + (int)v865;
            uint64_t v670 = v892 + (int)v865;
          }
          int v672 = v941[0];
          uint64_t v673 = v941[0] - 1;
          uint64_t v674 = (char *)&v669[(v667 * v673) & (v667 >> 63)];
          if (v667 >= 0) {
            uint64_t v675 = v667;
          }
          else {
            uint64_t v675 = -v667;
          }
          if (v670 >= 0) {
            LODWORD(v676) = v670;
          }
          else {
            uint64_t v676 = -v670;
          }
          unint64_t v896 = v675;
          CGBlt_copyBytes(2 * v865, v941[0], v674, (char *)&v671[(v670 * v673) & (v670 >> 63)], 2 * v675, 2 * v676);
          if (v928)
          {
            if (v930)
            {
              uint64_t v677 = v56 - (int)v865;
              unint64_t v678 = &v70[-v668];
              uint64_t v679 = v888 - (int)v865;
              uint64_t v680 = &v71[-v668];
              if ((int)v62 >= 0)
              {
                unint64_t v678 = v70;
                uint64_t v680 = v71;
                uint64_t v677 = v56 + (int)v865;
                uint64_t v679 = v888 + (int)v865;
              }
              uint64_t v681 = (v677 * v673) & (v677 >> 63);
              if (v677 >= 0) {
                uint64_t v682 = v677;
              }
              else {
                uint64_t v682 = -v677;
              }
              uint64_t v683 = (v679 * v673) & (v679 >> 63);
              if (v679 >= 0) {
                uint64_t v684 = v679;
              }
              else {
                uint64_t v684 = -v679;
              }
              int v70 = &v678[v681];
              uint64_t v71 = &v680[v683];
              uint64_t v888 = v684;
              CGBlt_copyBytes(v865, v672, &v678[v681], &v680[v683], v682, v684);
              uint64_t v39 = v860;
              unint64_t v19 = v861;
              uint64_t v56 = v682;
LABEL_1230:
              int v69 = (_WORD *)v863;
              goto LABEL_1092;
            }
            uint64_t v813 = v888 - (int)v865;
            uint64_t v814 = &v71[-v668];
            if ((int)v62 >= 0)
            {
              uint64_t v814 = v71;
              uint64_t v813 = v888 + (int)v865;
            }
            uint64_t v815 = (v813 * v673) & (v813 >> 63);
            if (v813 >= 0) {
              uint64_t v816 = v813;
            }
            else {
              uint64_t v816 = -v813;
            }
            uint64_t v71 = &v814[v815];
            uint64_t v888 = v816;
            CGBlt_fillBytes(v865, v672, -1, &v814[v815], v816);
          }
LABEL_398:
          uint64_t v39 = v860;
          unint64_t v19 = v861;
          int v69 = (_WORD *)v863;
          uint64_t v56 = v890;
          goto LABEL_1092;
        }
LABEL_1034:
        if (v20)
        {
          uint64_t v685 = (int)v20;
          if (v40)
          {
            do
            {
              int v686 = v951[0];
              do
              {
                _WORD *v938 = *v931;
                *uint64_t v71 = *v70;
                v71 += v685;
                unsigned int v687 = &v931[(int)v62];
                if ((unint64_t)v687 >= v65) {
                  uint64_t v688 = -(uint64_t)(int)v864;
                }
                else {
                  uint64_t v688 = 0;
                }
                v70 += v40 + v688;
                v931 = &v687[v688];
                v938 += (int)v62;
                --v686;
              }
              while (v686);
              if (v893)
              {
                unint64_t v689 = &v898[v896];
                BOOL v690 = (unint64_t)v689 >= v893;
                if ((unint64_t)v689 >= v893) {
                  uint64_t v691 = -(uint64_t)(v896 * (int)v39);
                }
                else {
                  uint64_t v691 = 0;
                }
                v692 = &v689[v691];
                unint64_t v693 = v65 + 2 * v691;
                if (v690) {
                  uint64_t v694 = -(v56 * (int)v39);
                }
                else {
                  uint64_t v694 = 0;
                }
                unint64_t v65 = v693 + 2 * v896;
                v931 = v692;
                v898 = v692;
                v900 += v56 + v694;
                int v70 = v900;
              }
              else
              {
                v931 += v896;
                v70 += v56;
              }
              v938 += v892;
              v71 += v888;
              --v941[0];
            }
            while (v941[0]);
          }
          else
          {
            do
            {
              int v804 = v951[0];
              do
              {
                _WORD *v938 = *v931;
                *uint64_t v71 = -1;
                v71 += v685;
                v805 = &v931[(int)v62];
                if ((unint64_t)v805 >= v65) {
                  uint64_t v806 = -(uint64_t)(int)v864;
                }
                else {
                  uint64_t v806 = 0;
                }
                v70 += v806;
                v931 = &v805[v806];
                v938 += (int)v62;
                --v804;
              }
              while (v804);
              if (v893)
              {
                uint64_t v807 = &v898[v896];
                BOOL v808 = (unint64_t)v807 >= v893;
                if ((unint64_t)v807 >= v893) {
                  uint64_t v809 = -(uint64_t)(v896 * (int)v39);
                }
                else {
                  uint64_t v809 = 0;
                }
                int v810 = &v807[v809];
                unint64_t v811 = v65 + 2 * v809;
                if (v808) {
                  uint64_t v812 = -(v56 * (int)v39);
                }
                else {
                  uint64_t v812 = 0;
                }
                unint64_t v65 = v811 + 2 * v896;
                v931 = v810;
                v898 = v810;
                v900 += v56 + v812;
                int v70 = v900;
              }
              else
              {
                v931 += v896;
                v70 += v56;
              }
              v938 += v892;
              v71 += v888;
              --v941[0];
            }
            while (v941[0]);
          }
LABEL_1229:
          unint64_t v902 = v65;
        }
        else
        {
          uint64_t v792 = v40;
          int v793 = v941[0];
          uint64_t v794 = (v941[0] - 1) + 1;
          do
          {
            int v795 = v865;
            do
            {
              _WORD *v938 = *v931;
              int v796 = &v931[(int)v62];
              if ((unint64_t)v796 >= v65) {
                uint64_t v797 = -(uint64_t)(int)v864;
              }
              else {
                uint64_t v797 = 0;
              }
              v70 += v792 + v797;
              v931 = &v796[v797];
              v938 += (int)v62;
              --v795;
            }
            while (v795);
            if (v893)
            {
              v798 = &v898[v896];
              BOOL v799 = (unint64_t)v798 >= v893;
              if ((unint64_t)v798 >= v893) {
                uint64_t v800 = -(uint64_t)(v896 * (int)v39);
              }
              else {
                uint64_t v800 = 0;
              }
              uint64_t v801 = &v798[v800];
              unint64_t v802 = v65 + 2 * v800;
              if (v799) {
                uint64_t v803 = -(v56 * (int)v39);
              }
              else {
                uint64_t v803 = 0;
              }
              unint64_t v65 = v802 + 2 * v896;
              v931 = v801;
              v898 = v801;
              v900 += v56 + v803;
              int v70 = v900;
            }
            else
            {
              v931 += v896;
              v70 += v56;
            }
            v938 += v892;
            --v793;
          }
          while (v793);
          unint64_t v902 = v65;
          v71 += v888 * v794;
LABEL_1213:
          v941[0] = 0;
        }
        goto LABEL_1230;
      }
      if ((int)v865 < 16) {
        goto LABEL_1034;
      }
      if ((2 * v864) > 0x40) {
        goto LABEL_1034;
      }
      v4.i32[0] = 2 * v864;
      uint8x8_t v210 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v4.i8);
      v210.i16[0] = vaddlv_u8(v210);
      if (v210.i32[0] > 1u) {
        goto LABEL_1034;
      }
      unint64_t v902 = v65;
      unint64_t v211 = (unint64_t)v938;
      int v939 = v941[0];
      int v69 = (_WORD *)v863;
      CGSFillDRAM64(v211, 2 * (v865 + v892), 2 * v865, v941[0], v863, 2 * v896, 2 * v864, v39, 2 * v818, v819);
      if (!v928) {
        goto LABEL_1092;
      }
      int v212 = v865 + v888;
      uint64_t v68 = v862;
      if (v930)
      {
        CGSFillDRAM64((unint64_t)v71, v212, v865, v939, (uint64_t)v6, v56, v864, v39, v818, v819);
        if (v862) {
          goto LABEL_1093;
        }
      }
      else
      {
        CGBlt_fillBytes(v865, v939, -1, v71, v212);
        if (v862) {
          goto LABEL_1093;
        }
      }
      return 1;
    case 2:
      uint64_t v213 = (int)v62;
      uint64_t v822 = -(v56 * (int)v39);
      uint64_t v827 = -(uint64_t)(v896 * (int)v39);
      uint64_t v903 = (int)v62;
      if (v20)
      {
        uint64_t v214 = (int)v20;
        uint64_t v215 = v40;
        uint64_t v216 = 2 * (int)v62;
        while (1)
        {
          int v217 = v951[0];
          do
          {
            unsigned int v218 = *v70;
            if (v218 < 0xF8)
            {
              if (v218 < 8) {
                goto LABEL_415;
              }
              unint64_t v220 = v65;
              unsigned int v221 = PDAplusDAM(bswap32((unsigned __int16)*v931) >> 16, v218, bswap32((unsigned __int16)*v938) >> 16, *v71, v218 ^ 0xFF);
              uint64_t v213 = v903;
              unint64_t v65 = v220;
              _WORD *v938 = bswap32(v221) >> 16;
              unsigned int v219 = HIBYTE(v221);
            }
            else
            {
              _WORD *v938 = *v931;
              LOBYTE(v219) = *v70;
            }
            *uint64_t v71 = v219;
LABEL_415:
            v71 += v214;
            int v222 = &v931[v213];
            if ((unint64_t)v222 >= v65) {
              uint64_t v223 = -(uint64_t)(int)v864;
            }
            else {
              uint64_t v223 = 0;
            }
            v70 += v215 + v223;
            v931 = &v222[v223];
            v938 = (_WORD *)((char *)v938 + v216);
            --v217;
          }
          while (v217);
          if (v893)
          {
            unsigned int v224 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v225 = (unint64_t)v224 >= v893;
            uint64_t v226 = v827;
            if ((unint64_t)v224 < v893) {
              uint64_t v226 = 0;
            }
            int v227 = &v224[v226];
            unint64_t v228 = v65 + 2 * v226;
            uint64_t v229 = v822;
            if (!v225) {
              uint64_t v229 = 0;
            }
            unint64_t v65 = v228 + 2 * v896;
            v931 = v227;
            v898 = v227;
            v900 += v890 + v229;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v71 += v888;
          if (!--v941[0]) {
            goto LABEL_1090;
          }
        }
      }
      uint64_t v695 = v40;
      int v696 = v941[0];
      uint64_t v821 = (v941[0] - 1) + 1;
      uint64_t v697 = 2 * (int)v62;
LABEL_1053:
      int v698 = v865;
      while (1)
      {
        unsigned int v699 = *v70;
        if (v699 >= 0xF8) {
          break;
        }
        if (v699 >= 8)
        {
          unint64_t v701 = v65;
          unsigned int v702 = PDplusDM(bswap32((unsigned __int16)*v931) >> 16, bswap32((unsigned __int16)*v938) >> 16, v699 ^ 0xFF);
          uint64_t v213 = v903;
          unint64_t v65 = v701;
          __int16 v700 = __rev16(v702);
          goto LABEL_1058;
        }
LABEL_1059:
        unint64_t v703 = &v931[v213];
        if ((unint64_t)v703 >= v65) {
          uint64_t v704 = -(uint64_t)(int)v864;
        }
        else {
          uint64_t v704 = 0;
        }
        v70 += v695 + v704;
        v931 = &v703[v704];
        v938 = (_WORD *)((char *)v938 + v697);
        if (!--v698)
        {
          if (v893)
          {
            uint64_t v705 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v706 = (unint64_t)v705 >= v893;
            uint64_t v707 = v827;
            if ((unint64_t)v705 < v893) {
              uint64_t v707 = 0;
            }
            uint64_t v708 = &v705[v707];
            unint64_t v709 = v65 + 2 * v707;
            uint64_t v710 = v822;
            if (!v706) {
              uint64_t v710 = 0;
            }
            unint64_t v65 = v709 + 2 * v896;
            v931 = v708;
            v898 = v708;
            v900 += v890 + v710;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v941[0] = --v696;
          if (!v696) {
            goto LABEL_1178;
          }
          goto LABEL_1053;
        }
      }
      __int16 v700 = *v931;
LABEL_1058:
      _WORD *v938 = v700;
      goto LABEL_1059;
    case 3:
      uint64_t v62 = (int)v62;
      uint64_t v230 = (int)v20;
      uint64_t v820 = -(v56 * (int)v39);
      uint64_t v823 = -(uint64_t)(v896 * (int)v39);
      if (v40)
      {
        uint64_t v231 = v40;
        uint64_t v232 = 2 * (int)v62;
        uint64_t v904 = (int)v20;
        do
        {
          int v233 = v951[0];
          do
          {
            unsigned int v234 = *v71;
            if (v234 > 7)
            {
              unsigned int v235 = (unsigned __int16)*v931;
              if (v234 < 0xF8)
              {
                uint64_t v236 = v62;
                unint64_t v237 = v65;
                unsigned int v238 = PDAM(__rev16(v235), *v70, v234);
                unint64_t v65 = v237;
                uint64_t v62 = v236;
                uint64_t v230 = v904;
                _WORD *v938 = bswap32(v238) >> 16;
                unsigned int v235 = HIBYTE(v238);
              }
              else
              {
                _WORD *v938 = v235;
                LOBYTE(v235) = *v70;
              }
            }
            else
            {
              LOBYTE(v235) = 0;
              _WORD *v938 = 0;
            }
            *uint64_t v71 = v235;
            v71 += v230;
            int v239 = &v931[v62];
            if ((unint64_t)v239 >= v65) {
              uint64_t v240 = -(uint64_t)(int)v864;
            }
            else {
              uint64_t v240 = 0;
            }
            v70 += v231 + v240;
            v931 = &v239[v240];
            v938 = (_WORD *)((char *)v938 + v232);
            --v233;
          }
          while (v233);
          if (v893)
          {
            unsigned int v241 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v242 = (unint64_t)v241 >= v893;
            uint64_t v243 = v823;
            if ((unint64_t)v241 < v893) {
              uint64_t v243 = 0;
            }
            unsigned int v244 = &v241[v243];
            unint64_t v245 = v65 + 2 * v243;
            uint64_t v246 = v820;
            if (!v242) {
              uint64_t v246 = 0;
            }
            unint64_t v65 = v245 + 2 * v896;
            v931 = v244;
            v898 = v244;
            v900 += v890 + v246;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v71 += v888;
          --v941[0];
        }
        while (v941[0]);
      }
      else
      {
        int v711 = v941[0];
        do
        {
          int v852 = v711;
          int v712 = v865;
          do
          {
            unsigned int v713 = *v71;
            if (v713 >= 8)
            {
              unsigned int v714 = (unsigned __int16)*v931;
              if (v713 <= 0xF7)
              {
                unint64_t v715 = v65;
                unsigned int v716 = PDM(__rev16(v714), v713);
                unint64_t v65 = v715;
                LOWORD(v714) = __rev16(v716);
              }
            }
            else
            {
              LOWORD(v714) = 0;
            }
            _WORD *v938 = v714;
            v71 += v230;
            unint64_t v717 = &v931[(int)v62];
            if ((unint64_t)v717 >= v65) {
              uint64_t v718 = -(uint64_t)(int)v864;
            }
            else {
              uint64_t v718 = 0;
            }
            v70 += v718;
            v931 = &v717[v718];
            v938 += (int)v62;
            --v712;
          }
          while (v712);
          if (v893)
          {
            v719 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v720 = (unint64_t)v719 >= v893;
            uint64_t v721 = -(uint64_t)(v896 * (int)v39);
            if ((unint64_t)v719 < v893) {
              uint64_t v721 = 0;
            }
            BOOL v722 = &v719[v721];
            unint64_t v723 = v65 + 2 * v721;
            uint64_t v724 = v820;
            if (!v720) {
              uint64_t v724 = 0;
            }
            unint64_t v65 = v723 + 2 * v896;
            v931 = v722;
            v898 = v722;
            v900 += v890 + v724;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v71 += v888;
          int v711 = v852 - 1;
          v941[0] = v852 - 1;
        }
        while (v852 != 1);
      }
      goto LABEL_1090;
    case 4:
      int v247 = v62;
      uint64_t v248 = (int)v62;
      int v249 = v39;
      uint64_t v250 = (int)v20;
      uint64_t v251 = v40;
      uint64_t v867 = -(uint64_t)(v896 * v249);
      uint64_t v828 = -(v56 * v249);
      uint64_t v252 = 2 * v247;
      do
      {
        int v253 = v951[0];
        unint64_t v905 = v65;
        do
        {
          unsigned int v254 = *v71;
          if (v254 < 0xF8)
          {
            if (v254 > 7)
            {
              if (v40) {
                char v256 = *v70;
              }
              else {
                char v256 = -1;
              }
              unsigned int v257 = PDAM(bswap32((unsigned __int16)*v931) >> 16, v256, ~(_BYTE)v254);
              _WORD *v938 = bswap32(v257) >> 16;
              unsigned int v255 = HIBYTE(v257);
              int v40 = v930;
              unint64_t v65 = v905;
            }
            else if (v40)
            {
              LOBYTE(v255) = *v70;
            }
            else
            {
              LOBYTE(v255) = -1;
            }
          }
          else
          {
            LOBYTE(v255) = 0;
            _WORD *v938 = 0;
          }
          *uint64_t v71 = v255;
          v71 += v250;
          int v258 = &v931[v248];
          if ((unint64_t)v258 >= v65) {
            uint64_t v259 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v259 = 0;
          }
          v70 += v251 + v259;
          v931 = &v258[v259];
          v938 = (_WORD *)((char *)v938 + v252);
          --v253;
        }
        while (v253);
        if (v893)
        {
          unsigned int v260 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v261 = (unint64_t)v260 >= v893;
          uint64_t v262 = v867;
          if ((unint64_t)v260 < v893) {
            uint64_t v262 = 0;
          }
          int v263 = &v260[v262];
          unint64_t v264 = v65 + 2 * v262;
          uint64_t v265 = v828;
          if (!v261) {
            uint64_t v265 = 0;
          }
          unint64_t v65 = v264 + 2 * v896;
          v931 = v263;
          v898 = v263;
          v900 += v890 + v265;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        --v941[0];
      }
      while (v941[0]);
      goto LABEL_1090;
    case 5:
      uint64_t v266 = (int)v62;
      uint64_t v267 = (int)v20;
      uint64_t v268 = v40;
      uint64_t v868 = -(uint64_t)(v896 * (int)v39);
      uint64_t v829 = -(v56 * (int)v39);
      uint64_t v269 = 2 * (int)v62;
      uint64_t v270 = -(uint64_t)(int)v864;
      do
      {
        int v271 = v951[0];
        do
        {
          v906 = v70;
          int v272 = *v70;
          unint64_t v273 = v65;
          uint64_t v274 = v270;
          unsigned int v275 = PDAMplusDAM(bswap32((unsigned __int16)*v931) >> 16, v272, *v71, bswap32((unsigned __int16)*v938) >> 16, *v71, v272 ^ 0xFFu);
          uint64_t v270 = v274;
          unint64_t v65 = v273;
          _WORD *v938 = bswap32(v275) >> 16;
          *uint64_t v71 = HIBYTE(v275);
          int v276 = &v71[v267];
          unsigned int v277 = &v931[v266];
          v71 += v267;
          if ((unint64_t)v277 >= v273) {
            uint64_t v278 = v274;
          }
          else {
            uint64_t v278 = 0;
          }
          int v70 = &v906[v268 + v278];
          v931 = &v277[v278];
          v938 = (_WORD *)((char *)v938 + v269);
          --v271;
        }
        while (v271);
        if (v893)
        {
          unsigned int v279 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v280 = (unint64_t)v279 >= v893;
          uint64_t v281 = v868;
          if ((unint64_t)v279 < v893) {
            uint64_t v281 = 0;
          }
          int v282 = &v279[v281];
          unint64_t v283 = v273 + 2 * v281;
          uint64_t v284 = v829;
          if (!v280) {
            uint64_t v284 = 0;
          }
          unint64_t v65 = v283 + 2 * v896;
          v931 = v282;
          v898 = v282;
          v900 += v890 + v284;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        uint64_t v71 = &v276[v888];
        --v941[0];
      }
      while (v941[0]);
      goto LABEL_1090;
    case 6:
      int v285 = v62;
      uint64_t v286 = (int)v62;
      uint64_t v287 = (int)v20;
      int v288 = v39;
      uint64_t v289 = v40;
      uint64_t v869 = -(uint64_t)(v896 * v288);
      uint64_t v830 = -(v56 * v288);
      uint64_t v290 = 2 * v285;
      while (1)
      {
        int v291 = v951[0];
        unint64_t v907 = v65;
        do
        {
          unsigned int v292 = *v71;
          if (v292 > 7)
          {
            if (v292 > 0xF7) {
              goto LABEL_501;
            }
            if (v40) {
              char v294 = *v70;
            }
            else {
              char v294 = -1;
            }
            unsigned int v295 = PDAplusDAM(bswap32((unsigned __int16)*v938) >> 16, v292, bswap32((unsigned __int16)*v931) >> 16, v294, ~(_BYTE)v292);
            _WORD *v938 = bswap32(v295) >> 16;
            unsigned int v293 = HIBYTE(v295);
            int v40 = v930;
            unint64_t v65 = v907;
          }
          else
          {
            _WORD *v938 = *v931;
            if (v40) {
              LOBYTE(v293) = *v70;
            }
            else {
              LOBYTE(v293) = -1;
            }
          }
          *uint64_t v71 = v293;
LABEL_501:
          v71 += v287;
          unsigned int v296 = &v931[v286];
          if ((unint64_t)v296 >= v65) {
            uint64_t v297 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v297 = 0;
          }
          v70 += v289 + v297;
          v931 = &v296[v297];
          v938 = (_WORD *)((char *)v938 + v290);
          --v291;
        }
        while (v291);
        if (v893)
        {
          unsigned int v298 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v299 = (unint64_t)v298 >= v893;
          uint64_t v300 = v869;
          if ((unint64_t)v298 < v893) {
            uint64_t v300 = 0;
          }
          float v301 = &v298[v300];
          unint64_t v302 = v65 + 2 * v300;
          uint64_t v303 = v830;
          if (!v299) {
            uint64_t v303 = 0;
          }
          unint64_t v65 = v302 + 2 * v896;
          v931 = v301;
          v898 = v301;
          v900 += v890 + v303;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 7:
      uint64_t v304 = (int)v62;
      uint64_t v824 = -(v56 * (int)v39);
      uint64_t v831 = -(uint64_t)(v896 * (int)v39);
      uint64_t v908 = (int)v62;
      if (v20)
      {
        uint64_t v305 = (int)v20;
        uint64_t v306 = v40;
        while (1)
        {
          int v307 = v951[0];
          do
          {
            unsigned int v308 = *v70;
            if (v308 > 7)
            {
              if (v308 > 0xF7) {
                goto LABEL_522;
              }
              unint64_t v310 = v65;
              unsigned int v311 = PDAM(bswap32((unsigned __int16)*v938) >> 16, *v71, v308);
              uint64_t v304 = (int)v62;
              unint64_t v65 = v310;
              _WORD *v938 = bswap32(v311) >> 16;
              unsigned int v309 = HIBYTE(v311);
            }
            else
            {
              LOBYTE(v309) = 0;
              _WORD *v938 = 0;
            }
            *uint64_t v71 = v309;
LABEL_522:
            v71 += v305;
            uint64_t v312 = &v931[v304];
            if ((unint64_t)v312 >= v65) {
              uint64_t v313 = -(uint64_t)(int)v864;
            }
            else {
              uint64_t v313 = 0;
            }
            v70 += v306 + v313;
            v931 = &v312[v313];
            v938 += (int)v62;
            --v307;
          }
          while (v307);
          if (v893)
          {
            int v314 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v315 = (unint64_t)v314 >= v893;
            uint64_t v316 = v831;
            if ((unint64_t)v314 < v893) {
              uint64_t v316 = 0;
            }
            unsigned int v317 = &v314[v316];
            unint64_t v318 = v65 + 2 * v316;
            uint64_t v319 = v824;
            if (!v315) {
              uint64_t v319 = 0;
            }
            unint64_t v65 = v318 + 2 * v896;
            v931 = v317;
            v898 = v317;
            v900 += v890 + v319;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v71 += v888;
          if (!--v941[0]) {
            goto LABEL_1090;
          }
        }
      }
      uint64_t v731 = v40;
      int v732 = v941[0];
      uint64_t v821 = (v941[0] - 1) + 1;
      uint64_t v733 = 2 * (int)v62;
LABEL_1122:
      int v734 = v865;
      while (1)
      {
        unsigned int v735 = *v70;
        if (v735 < 8) {
          break;
        }
        if (v735 <= 0xF7)
        {
          unint64_t v737 = v65;
          unsigned int v738 = PDM(bswap32((unsigned __int16)*v938) >> 16, v735);
          uint64_t v304 = v908;
          unint64_t v65 = v737;
          __int16 v736 = __rev16(v738);
          goto LABEL_1127;
        }
LABEL_1128:
        uint64_t v739 = &v931[v304];
        if ((unint64_t)v739 >= v65) {
          uint64_t v740 = -(uint64_t)(int)v864;
        }
        else {
          uint64_t v740 = 0;
        }
        v70 += v731 + v740;
        v931 = &v739[v740];
        v938 = (_WORD *)((char *)v938 + v733);
        if (!--v734)
        {
          if (v893)
          {
            uint64_t v741 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v742 = (unint64_t)v741 >= v893;
            uint64_t v743 = v831;
            if ((unint64_t)v741 < v893) {
              uint64_t v743 = 0;
            }
            uint64_t v744 = &v741[v743];
            unint64_t v745 = v65 + 2 * v743;
            uint64_t v746 = v824;
            if (!v742) {
              uint64_t v746 = 0;
            }
            unint64_t v65 = v745 + 2 * v896;
            v931 = v744;
            v898 = v744;
            v900 += v890 + v746;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v941[0] = --v732;
          if (!v732) {
            goto LABEL_1178;
          }
          goto LABEL_1122;
        }
      }
      __int16 v736 = 0;
LABEL_1127:
      _WORD *v938 = v736;
      goto LABEL_1128;
    case 8:
      uint64_t v320 = (int)v62;
      uint64_t v825 = -(v56 * (int)v39);
      uint64_t v832 = -(uint64_t)(v896 * (int)v39);
      uint64_t v909 = (int)v62;
      if (v20)
      {
        uint64_t v321 = (int)v20;
        uint64_t v322 = v40;
        while (1)
        {
          int v323 = v951[0];
          do
          {
            unsigned int v324 = *v70;
            if (v324 < 0xF8)
            {
              if (v324 < 8) {
                goto LABEL_543;
              }
              unint64_t v326 = v65;
              unsigned int v327 = PDAM(bswap32((unsigned __int16)*v938) >> 16, *v71, ~(_BYTE)v324);
              uint64_t v320 = (int)v62;
              unint64_t v65 = v326;
              _WORD *v938 = bswap32(v327) >> 16;
              unsigned int v325 = HIBYTE(v327);
            }
            else
            {
              LOBYTE(v325) = 0;
              _WORD *v938 = 0;
            }
            *uint64_t v71 = v325;
LABEL_543:
            v71 += v321;
            unsigned int v328 = &v931[v320];
            if ((unint64_t)v328 >= v65) {
              uint64_t v329 = -(uint64_t)(int)v864;
            }
            else {
              uint64_t v329 = 0;
            }
            v70 += v322 + v329;
            v931 = &v328[v329];
            v938 += (int)v62;
            --v323;
          }
          while (v323);
          if (v893)
          {
            unsigned int v330 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v331 = (unint64_t)v330 >= v893;
            uint64_t v332 = v832;
            if ((unint64_t)v330 < v893) {
              uint64_t v332 = 0;
            }
            unsigned int v333 = &v330[v332];
            unint64_t v334 = v65 + 2 * v332;
            uint64_t v335 = v825;
            if (!v331) {
              uint64_t v335 = 0;
            }
            unint64_t v65 = v334 + 2 * v896;
            v931 = v333;
            v898 = v333;
            v900 += v890 + v335;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v71 += v888;
          if (!--v941[0]) {
            goto LABEL_1090;
          }
        }
      }
      uint64_t v747 = v40;
      int v748 = v941[0];
      uint64_t v821 = (v941[0] - 1) + 1;
      uint64_t v749 = 2 * (int)v62;
LABEL_1142:
      int v750 = v865;
      while (1)
      {
        unsigned int v751 = *v70;
        if (v751 > 0xF7) {
          break;
        }
        if (v751 >= 8)
        {
          unint64_t v753 = v65;
          unsigned int v754 = PDM(bswap32((unsigned __int16)*v938) >> 16, ~(_BYTE)v751);
          uint64_t v320 = v909;
          unint64_t v65 = v753;
          __int16 v752 = __rev16(v754);
          goto LABEL_1147;
        }
LABEL_1148:
        BOOL v755 = &v931[v320];
        if ((unint64_t)v755 >= v65) {
          uint64_t v756 = -(uint64_t)(int)v864;
        }
        else {
          uint64_t v756 = 0;
        }
        v70 += v747 + v756;
        v931 = &v755[v756];
        v938 = (_WORD *)((char *)v938 + v749);
        if (!--v750)
        {
          if (v893)
          {
            v757 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v758 = (unint64_t)v757 >= v893;
            uint64_t v759 = v832;
            if ((unint64_t)v757 < v893) {
              uint64_t v759 = 0;
            }
            uint64_t v760 = &v757[v759];
            unint64_t v761 = v65 + 2 * v759;
            uint64_t v762 = v825;
            if (!v758) {
              uint64_t v762 = 0;
            }
            unint64_t v65 = v761 + 2 * v896;
            v931 = v760;
            v898 = v760;
            v900 += v890 + v762;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v941[0] = --v748;
          if (!v748)
          {
LABEL_1178:
            unint64_t v902 = v65;
            v71 += v888 * v821;
LABEL_1091:
            int v8 = v858;
            uint64_t v6 = v859;
            uint64_t v39 = v860;
            unint64_t v19 = v861;
            int v69 = (_WORD *)v863;
            uint64_t v62 = v857;
LABEL_1092:
            uint64_t v68 = v862;
            if (!v862) {
              return 1;
            }
LABEL_1093:
            uint64_t v940 = 0;
LABEL_1094:
            if (!shape_enum_clip_next(v68, (int *)&v940 + 1, &v940, v951, v941))
            {
              uint64_t v58 = (void *)v68;
LABEL_1119:
              free(v58);
              return 1;
            }
            uint64_t v862 = v68;
            uint64_t v863 = (uint64_t)v69;
            if (v893)
            {
              v938 = (_WORD *)(v853 + 2 * v19 * (int)v940 + 2 * SHIDWORD(v940));
              int v72 = ((int)v940 + *(_DWORD *)(v856 + 60)) % (int)v39;
              unint64_t v64 = v951[0];
              int v73 = (HIDWORD(v940) + *(_DWORD *)(v856 + 56)) % (int)v864;
              unint64_t v725 = &v69[v896 * v72];
              uint64_t v726 = &v725[v73];
              unint64_t v65 = (unint64_t)&v725[(int)v864];
              uint64_t v20 = v928;
              if (v928) {
                uint64_t v71 = &v855[v854 * (int)v940 + SHIDWORD(v940)];
              }
              uint64_t v727 = v888;
              if (v928) {
                uint64_t v727 = v854 - v951[0];
              }
              uint64_t v888 = v727;
              if (v930) {
                int v40 = v930;
              }
              else {
                int v40 = 0;
              }
              if (v930) {
                int v70 = (char *)&v6[v56 * v72 + v73];
              }
              uint64_t v728 = (unsigned __int8 *)v900;
              if (v930) {
                uint64_t v728 = &v6[v56 * v72 + v73];
              }
              v898 = v726;
              v900 = (char *)v728;
              LODWORD(v865) = v951[0];
              v931 = v726;
              goto LABEL_385;
            }
            uint64_t v729 = SHIDWORD(v940) * (uint64_t)(int)v62;
            LODWORD(v865) = v951[0];
            v938 = (_WORD *)(v853 + 2 * v19 * (int)v940 + 2 * v729);
            unint64_t v64 = v951[0] * (int)v62;
            v931 = &v69[(int)v940 * (int)v864 + v729];
            unint64_t v896 = (int)v864 - v951[0] * (int)v62;
            uint64_t v20 = v928;
            if (v928) {
              uint64_t v71 = &v855[v854 * (int)v940 + v729];
            }
            uint64_t v730 = v888;
            if (v928) {
              uint64_t v730 = v854 - v951[0] * (int)v62;
            }
            uint64_t v888 = v730;
            if (v930) {
              int v40 = v930;
            }
            else {
              int v40 = 0;
            }
            unint64_t v893 = 0;
            if (v930)
            {
              int v70 = (char *)&v6[(int)v940 * (int)v39 + v729];
              uint64_t v56 = (int)v39 - (int)v64;
            }
            unint64_t v65 = v902;
            goto LABEL_386;
          }
          goto LABEL_1142;
        }
      }
      __int16 v752 = 0;
LABEL_1147:
      _WORD *v938 = v752;
      goto LABEL_1148;
    case 9:
      uint64_t v336 = (int)v62;
      uint64_t v337 = (int)v20;
      uint64_t v338 = v40;
      uint64_t v870 = -(uint64_t)(v896 * (int)v39);
      uint64_t v833 = -(v56 * (int)v39);
      uint64_t v339 = 2 * (int)v62;
      do
      {
        int v340 = v951[0];
        do
        {
          unint64_t v341 = v65;
          unsigned int v342 = PDAMplusDAM(bswap32((unsigned __int16)*v931) >> 16, *v70, *v71 ^ 0xFFu, bswap32((unsigned __int16)*v938) >> 16, *v71, *v70);
          unint64_t v65 = v341;
          _WORD *v938 = bswap32(v342) >> 16;
          *uint64_t v71 = HIBYTE(v342);
          v71 += v337;
          int v343 = &v931[v336];
          if ((unint64_t)v343 >= v341) {
            uint64_t v344 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v344 = 0;
          }
          v70 += v338 + v344;
          v931 = &v343[v344];
          v938 = (_WORD *)((char *)v938 + v339);
          --v340;
        }
        while (v340);
        if (v893)
        {
          int v345 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v346 = (unint64_t)v345 >= v893;
          uint64_t v347 = v870;
          if ((unint64_t)v345 < v893) {
            uint64_t v347 = 0;
          }
          unsigned int v348 = &v345[v347];
          unint64_t v349 = v341 + 2 * v347;
          uint64_t v350 = v833;
          if (!v346) {
            uint64_t v350 = 0;
          }
          unint64_t v65 = v349 + 2 * v896;
          v931 = v348;
          v898 = v348;
          v900 += v890 + v350;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        --v941[0];
      }
      while (v941[0]);
      goto LABEL_1090;
    case 10:
      uint64_t v351 = (int)v62;
      uint64_t v352 = (int)v20;
      uint64_t v353 = v40;
      uint64_t v871 = -(uint64_t)(v896 * (int)v39);
      uint64_t v834 = -(v56 * (int)v39);
      uint64_t v354 = 2 * (int)v62;
      uint64_t v355 = -(uint64_t)(int)v864;
      do
      {
        int v356 = v951[0];
        do
        {
          v910 = v70;
          int v357 = *v70;
          unint64_t v358 = v65;
          uint64_t v359 = v355;
          unsigned int v360 = PDAMplusDAM(bswap32((unsigned __int16)*v931) >> 16, v357, *v71 ^ 0xFFu, bswap32((unsigned __int16)*v938) >> 16, *v71, v357 ^ 0xFFu);
          uint64_t v355 = v359;
          unint64_t v65 = v358;
          _WORD *v938 = bswap32(v360) >> 16;
          *uint64_t v71 = HIBYTE(v360);
          v71 += v352;
          char v361 = &v931[v351];
          if ((unint64_t)v361 >= v358) {
            uint64_t v362 = v359;
          }
          else {
            uint64_t v362 = 0;
          }
          int v70 = &v910[v353 + v362];
          v931 = &v361[v362];
          v938 = (_WORD *)((char *)v938 + v354);
          --v356;
        }
        while (v356);
        if (v893)
        {
          unsigned int v363 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v364 = (unint64_t)v363 >= v893;
          uint64_t v365 = v871;
          if ((unint64_t)v363 < v893) {
            uint64_t v365 = 0;
          }
          uint64_t v366 = &v363[v365];
          unint64_t v367 = v358 + 2 * v365;
          uint64_t v368 = v834;
          if (!v364) {
            uint64_t v368 = 0;
          }
          unint64_t v65 = v367 + 2 * v896;
          v931 = v366;
          v898 = v366;
          v900 += v890 + v368;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        --v941[0];
      }
      while (v941[0]);
      goto LABEL_1090;
    case 11:
      uint64_t v826 = -(v56 * (int)v39);
      uint64_t v835 = -(uint64_t)(v896 * (int)v39);
      uint64_t v911 = (int)v62;
      if (v20)
      {
        uint64_t v369 = (int)v20;
        uint64_t v370 = v40;
        do
        {
          int v371 = v951[0];
          unint64_t v372 = v65;
          do
          {
            if (v40) {
              unsigned int v373 = *v70;
            }
            else {
              unsigned int v373 = 255;
            }
            unsigned int v374 = PDAplusdDA(bswap32((unsigned __int16)*v938) >> 16, *v71, bswap32((unsigned __int16)*v931) >> 16, v373);
            _WORD *v938 = bswap32(v374) >> 16;
            *uint64_t v71 = HIBYTE(v374);
            v71 += v369;
            uint64_t v375 = &v931[(int)v62];
            if ((unint64_t)v375 >= v372) {
              uint64_t v376 = -(uint64_t)(int)v864;
            }
            else {
              uint64_t v376 = 0;
            }
            v70 += v370 + v376;
            v931 = &v375[v376];
            v938 += (int)v62;
            --v371;
            int v40 = v930;
          }
          while (v371);
          unint64_t v65 = v372;
          if (v893)
          {
            uint64_t v377 = &v898[v896];
            uint64_t v56 = v890;
            BOOL v378 = (unint64_t)v377 >= v893;
            uint64_t v379 = v835;
            if ((unint64_t)v377 < v893) {
              uint64_t v379 = 0;
            }
            uint32x4_t v380 = &v377[v379];
            unint64_t v381 = v372 + 2 * v379;
            uint64_t v382 = v826;
            if (!v378) {
              uint64_t v382 = 0;
            }
            unint64_t v65 = v381 + 2 * v896;
            v931 = v380;
            v898 = v380;
            v900 += v890 + v382;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            uint64_t v56 = v890;
            v70 += v890;
          }
          v938 += v892;
          v71 += v888;
          --v941[0];
        }
        while (v941[0]);
        goto LABEL_1090;
      }
      uint64_t v763 = v40;
      int v764 = v941[0];
      uint64_t v821 = (v941[0] - 1) + 1;
      uint64_t v765 = 2 * (int)v62;
      int v766 = v865;
      do
      {
        int v767 = v766;
        unint64_t v768 = v65;
        do
        {
          if (v40) {
            unsigned int v769 = *v70;
          }
          else {
            unsigned int v769 = 255;
          }
          _WORD *v938 = __rev16(PDplusdDA(bswap32((unsigned __int16)*v938) >> 16, bswap32((unsigned __int16)*v931) >> 16, v769));
          uint64_t v770 = &v931[v911];
          if ((unint64_t)v770 >= v768) {
            uint64_t v771 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v771 = 0;
          }
          v70 += v763 + v771;
          v931 = &v770[v771];
          v938 = (_WORD *)((char *)v938 + v765);
          --v767;
          int v40 = v930;
        }
        while (v767);
        unint64_t v65 = v768;
        if (v893)
        {
          uint64_t v772 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v773 = (unint64_t)v772 >= v893;
          uint64_t v774 = v835;
          if ((unint64_t)v772 < v893) {
            uint64_t v774 = 0;
          }
          uint64_t v775 = &v772[v774];
          unint64_t v776 = v768 + 2 * v774;
          uint64_t v777 = v826;
          if (!v773) {
            uint64_t v777 = 0;
          }
          unint64_t v65 = v776 + 2 * v896;
          v931 = v775;
          v898 = v775;
          v900 += v890 + v777;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        int v766 = v865;
        v938 += v892;
        v941[0] = --v764;
      }
      while (v764);
      goto LABEL_1178;
    case 12:
      if (!v20)
      {
        int v778 = v941[0];
        uint64_t v779 = (v941[0] - 1) + 1;
        do
        {
          int v780 = v865;
          do
          {
            unsigned int v781 = bswap32((unsigned __int16)*v938);
            unsigned int v782 = bswap32((unsigned __int16)*v931);
            unsigned int v783 = (((HIWORD(v782) << 15) | HIWORD(v782)) & 0x1F07C1F)
                 + (((HIWORD(v781) << 15) | HIWORD(v781)) & 0x1F07C1F);
            _WORD *v938 = __rev16((((15 * ((v783 >> 5) & 0x100401)) | v783 | (30 * ((v783 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v783 >> 5) & 0x100401)) | v783 | (30 * ((v783 >> 5) & 0x100401))) & 0x7C1F);
            uint64_t v784 = &v931[(int)v62];
            if ((unint64_t)v784 >= v65) {
              uint64_t v785 = -(uint64_t)(int)v864;
            }
            else {
              uint64_t v785 = 0;
            }
            v70 += v40 + v785;
            v931 = &v784[v785];
            v938 += (int)v62;
            --v780;
          }
          while (v780);
          if (v893)
          {
            uint64_t v786 = &v898[v896];
            BOOL v787 = (unint64_t)v786 >= v893;
            if ((unint64_t)v786 >= v893) {
              uint64_t v788 = -(uint64_t)(v896 * (int)v39);
            }
            else {
              uint64_t v788 = 0;
            }
            uint64_t v789 = &v786[v788];
            unint64_t v790 = v65 + 2 * v788;
            if (v787) {
              uint64_t v791 = -(v56 * (int)v39);
            }
            else {
              uint64_t v791 = 0;
            }
            unint64_t v65 = v790 + 2 * v896;
            v931 = v789;
            v898 = v789;
            v900 += v56 + v791;
            int v70 = v900;
          }
          else
          {
            v931 += v896;
            v70 += v56;
          }
          v938 += v892;
          --v778;
        }
        while (v778);
        unint64_t v902 = v65;
        v71 += v888 * v779;
        goto LABEL_1213;
      }
      uint64_t v383 = (int)v20;
      uint64_t v384 = v40;
      uint64_t v872 = -(uint64_t)(v896 * (int)v39);
      uint64_t v836 = -(v56 * (int)v39);
      do
      {
        int v385 = v951[0];
        unint64_t v386 = v65;
        do
        {
          if (v40) {
            unsigned int v387 = *v70;
          }
          else {
            unsigned int v387 = 255;
          }
          unsigned int v388 = PDApluslDA(bswap32((unsigned __int16)*v938) >> 16, *v71, bswap32((unsigned __int16)*v931) >> 16, v387);
          _WORD *v938 = bswap32(v388) >> 16;
          *uint64_t v71 = HIBYTE(v388);
          v71 += v383;
          uint64_t v389 = &v931[(int)v62];
          if ((unint64_t)v389 >= v386) {
            uint64_t v390 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v390 = 0;
          }
          v70 += v384 + v390;
          v931 = &v389[v390];
          v938 += (int)v62;
          --v385;
          int v40 = v930;
        }
        while (v385);
        unint64_t v65 = v386;
        if (v893)
        {
          char v391 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v392 = (unint64_t)v391 >= v893;
          uint64_t v393 = v872;
          if ((unint64_t)v391 < v893) {
            uint64_t v393 = 0;
          }
          uint64_t v394 = &v391[v393];
          unint64_t v395 = v386 + 2 * v393;
          uint64_t v396 = v836;
          if (!v392) {
            uint64_t v396 = 0;
          }
          unint64_t v65 = v395 + 2 * v896;
          v931 = v394;
          v898 = v394;
          v900 += v890 + v396;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        --v941[0];
      }
      while (v941[0]);
      goto LABEL_1090;
    case 13:
      int v397 = v62;
      uint64_t v912 = (int)v62;
      int v398 = v39;
      uint64_t v399 = (int)v20;
      uint64_t v400 = v40;
      uint64_t v873 = -(uint64_t)(v896 * v398);
      uint64_t v837 = -(v56 * v398);
      uint64_t v401 = 2 * v397;
      while (1)
      {
        int v402 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v403 = 255;
LABEL_630:
            unint64_t v404 = v65;
            if (v20)
            {
              unsigned int v405 = *v71;
              if (v405 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_636:
                *uint64_t v71 = v403;
                goto LABEL_637;
              }
            }
            else
            {
              unsigned int v405 = 255;
            }
            unsigned int v406 = PDAmultiplyPDA(bswap32((unsigned __int16)*v938) >> 16, v405, bswap32((unsigned __int16)*v931) >> 16, v403, v4);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v406) >> 16;
            unint64_t v65 = v404;
            if (!v928) {
              goto LABEL_637;
            }
            unsigned int v403 = HIBYTE(v406);
            goto LABEL_636;
          }
          unsigned int v403 = *v70;
          if (v403 >= 8) {
            goto LABEL_630;
          }
LABEL_637:
          v71 += v399;
          unsigned int v407 = &v931[v912];
          if ((unint64_t)v407 >= v65) {
            uint64_t v408 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v408 = 0;
          }
          v70 += v400 + v408;
          v931 = &v407[v408];
          v938 = (_WORD *)((char *)v938 + v401);
          --v402;
        }
        while (v402);
        if (v893)
        {
          v409 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v410 = (unint64_t)v409 >= v893;
          uint64_t v411 = v873;
          if ((unint64_t)v409 < v893) {
            uint64_t v411 = 0;
          }
          uint64_t v412 = &v409[v411];
          unint64_t v413 = v65 + 2 * v411;
          uint64_t v414 = v837;
          if (!v410) {
            uint64_t v414 = 0;
          }
          unint64_t v65 = v413 + 2 * v896;
          v931 = v412;
          v898 = v412;
          v900 += v890 + v414;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0])
        {
LABEL_1090:
          unint64_t v902 = v65;
          goto LABEL_1091;
        }
      }
    case 14:
      int v415 = v62;
      uint64_t v913 = (int)v62;
      int v416 = v39;
      uint64_t v417 = (int)v20;
      uint64_t v418 = v40;
      uint64_t v874 = -(uint64_t)(v896 * v416);
      uint64_t v838 = -(v56 * v416);
      uint64_t v419 = 2 * v415;
      while (1)
      {
        int v420 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v421 = 255;
LABEL_656:
            unint64_t v422 = v65;
            if (v20)
            {
              unsigned int v423 = *v71;
              if (v423 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_662:
                *uint64_t v71 = v421;
                goto LABEL_663;
              }
            }
            else
            {
              unsigned int v423 = 255;
            }
            unsigned int v424 = PDAscreenPDA(bswap32((unsigned __int16)*v938) >> 16, v423, bswap32((unsigned __int16)*v931) >> 16, v421);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v424) >> 16;
            unint64_t v65 = v422;
            if (!v928) {
              goto LABEL_663;
            }
            unsigned int v421 = HIBYTE(v424);
            goto LABEL_662;
          }
          unsigned int v421 = *v70;
          if (v421 >= 8) {
            goto LABEL_656;
          }
LABEL_663:
          v71 += v417;
          uint64_t v425 = &v931[v913];
          if ((unint64_t)v425 >= v65) {
            uint64_t v426 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v426 = 0;
          }
          v70 += v418 + v426;
          v931 = &v425[v426];
          v938 = (_WORD *)((char *)v938 + v419);
          --v420;
        }
        while (v420);
        if (v893)
        {
          uint64_t v427 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v428 = (unint64_t)v427 >= v893;
          uint64_t v429 = v874;
          if ((unint64_t)v427 < v893) {
            uint64_t v429 = 0;
          }
          uint64_t v430 = &v427[v429];
          unint64_t v431 = v65 + 2 * v429;
          uint64_t v432 = v838;
          if (!v428) {
            uint64_t v432 = 0;
          }
          unint64_t v65 = v431 + 2 * v896;
          v931 = v430;
          v898 = v430;
          v900 += v890 + v432;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 15:
      int v433 = v62;
      uint64_t v914 = (int)v62;
      int v434 = v39;
      uint64_t v435 = (int)v20;
      uint64_t v436 = v40;
      uint64_t v875 = -(uint64_t)(v896 * v434);
      uint64_t v839 = -(v56 * v434);
      uint64_t v437 = 2 * v433;
      while (1)
      {
        int v438 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v439 = 255;
LABEL_682:
            unint64_t v440 = v65;
            if (v20)
            {
              unsigned int v441 = *v71;
              if (v441 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_688:
                *uint64_t v71 = v439;
                goto LABEL_689;
              }
            }
            else
            {
              unsigned int v441 = 255;
            }
            unsigned int v442 = PDAoverlayPDA(bswap32((unsigned __int16)*v938) >> 16, v441, bswap32((unsigned __int16)*v931) >> 16, v439);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v442) >> 16;
            unint64_t v65 = v440;
            if (!v928) {
              goto LABEL_689;
            }
            unsigned int v439 = HIBYTE(v442);
            goto LABEL_688;
          }
          unsigned int v439 = *v70;
          if (v439 >= 8) {
            goto LABEL_682;
          }
LABEL_689:
          v71 += v435;
          uint64_t v443 = &v931[v914];
          if ((unint64_t)v443 >= v65) {
            uint64_t v444 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v444 = 0;
          }
          v70 += v436 + v444;
          v931 = &v443[v444];
          v938 = (_WORD *)((char *)v938 + v437);
          --v438;
        }
        while (v438);
        if (v893)
        {
          unsigned int v445 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v446 = (unint64_t)v445 >= v893;
          uint64_t v447 = v875;
          if ((unint64_t)v445 < v893) {
            uint64_t v447 = 0;
          }
          uint64_t v448 = &v445[v447];
          unint64_t v449 = v65 + 2 * v447;
          uint64_t v450 = v839;
          if (!v446) {
            uint64_t v450 = 0;
          }
          unint64_t v65 = v449 + 2 * v896;
          v931 = v448;
          v898 = v448;
          v900 += v890 + v450;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 16:
      int v451 = v62;
      uint64_t v915 = (int)v62;
      int v452 = v39;
      uint64_t v453 = (int)v20;
      uint64_t v454 = v40;
      uint64_t v876 = -(uint64_t)(v896 * v452);
      uint64_t v840 = -(v56 * v452);
      uint64_t v455 = 2 * v451;
      while (1)
      {
        int v456 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v457 = 255;
LABEL_708:
            unint64_t v458 = v65;
            if (v20)
            {
              unsigned int v459 = *v71;
              if (v459 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_714:
                *uint64_t v71 = v457;
                goto LABEL_715;
              }
            }
            else
            {
              unsigned int v459 = 255;
            }
            unsigned int v460 = PDAdarkenPDA(bswap32((unsigned __int16)*v938) >> 16, v459, bswap32((unsigned __int16)*v931) >> 16, v457);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v460) >> 16;
            unint64_t v65 = v458;
            if (!v928) {
              goto LABEL_715;
            }
            unsigned int v457 = HIBYTE(v460);
            goto LABEL_714;
          }
          unsigned int v457 = *v70;
          if (v457 >= 8) {
            goto LABEL_708;
          }
LABEL_715:
          v71 += v453;
          uint64_t v461 = &v931[v915];
          if ((unint64_t)v461 >= v65) {
            uint64_t v462 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v462 = 0;
          }
          v70 += v454 + v462;
          v931 = &v461[v462];
          v938 = (_WORD *)((char *)v938 + v455);
          --v456;
        }
        while (v456);
        if (v893)
        {
          int v463 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v464 = (unint64_t)v463 >= v893;
          uint64_t v465 = v876;
          if ((unint64_t)v463 < v893) {
            uint64_t v465 = 0;
          }
          unsigned int v466 = &v463[v465];
          unint64_t v467 = v65 + 2 * v465;
          uint64_t v468 = v840;
          if (!v464) {
            uint64_t v468 = 0;
          }
          unint64_t v65 = v467 + 2 * v896;
          v931 = v466;
          v898 = v466;
          v900 += v890 + v468;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 17:
      int v469 = v62;
      uint64_t v916 = (int)v62;
      int v470 = v39;
      uint64_t v471 = (int)v20;
      uint64_t v472 = v40;
      uint64_t v877 = -(uint64_t)(v896 * v470);
      uint64_t v841 = -(v56 * v470);
      uint64_t v473 = 2 * v469;
      while (1)
      {
        int v474 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v475 = 255;
LABEL_734:
            unint64_t v476 = v65;
            if (v20)
            {
              unsigned int v477 = *v71;
              if (v477 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_740:
                *uint64_t v71 = v475;
                goto LABEL_741;
              }
            }
            else
            {
              unsigned int v477 = 255;
            }
            unsigned int v478 = PDAlightenPDA(bswap32((unsigned __int16)*v938) >> 16, v477, bswap32((unsigned __int16)*v931) >> 16, v475);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v478) >> 16;
            unint64_t v65 = v476;
            if (!v928) {
              goto LABEL_741;
            }
            unsigned int v475 = HIBYTE(v478);
            goto LABEL_740;
          }
          unsigned int v475 = *v70;
          if (v475 >= 8) {
            goto LABEL_734;
          }
LABEL_741:
          v71 += v471;
          unsigned int v479 = &v931[v916];
          if ((unint64_t)v479 >= v65) {
            uint64_t v480 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v480 = 0;
          }
          v70 += v472 + v480;
          v931 = &v479[v480];
          v938 = (_WORD *)((char *)v938 + v473);
          --v474;
        }
        while (v474);
        if (v893)
        {
          uint64_t v481 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v482 = (unint64_t)v481 >= v893;
          uint64_t v483 = v877;
          if ((unint64_t)v481 < v893) {
            uint64_t v483 = 0;
          }
          uint64_t v484 = &v481[v483];
          unint64_t v485 = v65 + 2 * v483;
          uint64_t v486 = v841;
          if (!v482) {
            uint64_t v486 = 0;
          }
          unint64_t v65 = v485 + 2 * v896;
          v931 = v484;
          v898 = v484;
          v900 += v890 + v486;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 18:
      int v487 = v62;
      uint64_t v917 = (int)v62;
      int v488 = v39;
      uint64_t v489 = (int)v20;
      uint64_t v490 = v40;
      uint64_t v878 = -(uint64_t)(v896 * v488);
      uint64_t v842 = -(v56 * v488);
      uint64_t v491 = 2 * v487;
      while (1)
      {
        int v492 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v493 = 255;
LABEL_760:
            unint64_t v494 = v65;
            if (v20)
            {
              unsigned int v495 = *v71;
              if (v495 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_766:
                *uint64_t v71 = v493;
                goto LABEL_767;
              }
            }
            else
            {
              unsigned int v495 = 255;
            }
            unsigned int v496 = PDAcolordodgePDA(bswap32((unsigned __int16)*v938) >> 16, v495, bswap32((unsigned __int16)*v931) >> 16, v493);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v496) >> 16;
            unint64_t v65 = v494;
            if (!v928) {
              goto LABEL_767;
            }
            unsigned int v493 = HIBYTE(v496);
            goto LABEL_766;
          }
          unsigned int v493 = *v70;
          if (v493 >= 8) {
            goto LABEL_760;
          }
LABEL_767:
          v71 += v489;
          uint64_t v497 = &v931[v917];
          if ((unint64_t)v497 >= v65) {
            uint64_t v498 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v498 = 0;
          }
          v70 += v490 + v498;
          v931 = &v497[v498];
          v938 = (_WORD *)((char *)v938 + v491);
          --v492;
        }
        while (v492);
        if (v893)
        {
          int v499 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v500 = (unint64_t)v499 >= v893;
          uint64_t v501 = v878;
          if ((unint64_t)v499 < v893) {
            uint64_t v501 = 0;
          }
          char v502 = &v499[v501];
          unint64_t v503 = v65 + 2 * v501;
          uint64_t v504 = v842;
          if (!v500) {
            uint64_t v504 = 0;
          }
          unint64_t v65 = v503 + 2 * v896;
          v931 = v502;
          v898 = v502;
          v900 += v890 + v504;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 19:
      int v505 = v62;
      uint64_t v918 = (int)v62;
      int v506 = v39;
      uint64_t v507 = (int)v20;
      uint64_t v508 = v40;
      uint64_t v879 = -(uint64_t)(v896 * v506);
      uint64_t v843 = -(v56 * v506);
      uint64_t v509 = 2 * v505;
      while (1)
      {
        int v510 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v511 = 255;
LABEL_786:
            unint64_t v512 = v65;
            if (v20)
            {
              unsigned int v513 = *v71;
              if (v513 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_792:
                *uint64_t v71 = v511;
                goto LABEL_793;
              }
            }
            else
            {
              unsigned int v513 = 255;
            }
            unsigned int v514 = PDAcolorburnPDA(bswap32((unsigned __int16)*v938) >> 16, v513, bswap32((unsigned __int16)*v931) >> 16, v511);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v514) >> 16;
            unint64_t v65 = v512;
            if (!v928) {
              goto LABEL_793;
            }
            unsigned int v511 = HIBYTE(v514);
            goto LABEL_792;
          }
          unsigned int v511 = *v70;
          if (v511 >= 8) {
            goto LABEL_786;
          }
LABEL_793:
          v71 += v507;
          int v515 = &v931[v918];
          if ((unint64_t)v515 >= v65) {
            uint64_t v516 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v516 = 0;
          }
          v70 += v508 + v516;
          v931 = &v515[v516];
          v938 = (_WORD *)((char *)v938 + v509);
          --v510;
        }
        while (v510);
        if (v893)
        {
          uint64_t v517 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v518 = (unint64_t)v517 >= v893;
          uint64_t v519 = v879;
          if ((unint64_t)v517 < v893) {
            uint64_t v519 = 0;
          }
          uint64_t v520 = &v517[v519];
          unint64_t v521 = v65 + 2 * v519;
          uint64_t v522 = v843;
          if (!v518) {
            uint64_t v522 = 0;
          }
          unint64_t v65 = v521 + 2 * v896;
          v931 = v520;
          v898 = v520;
          v900 += v890 + v522;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 20:
      int v523 = v62;
      uint64_t v919 = (int)v62;
      int v524 = v39;
      uint64_t v525 = (int)v20;
      uint64_t v526 = v40;
      uint64_t v880 = -(uint64_t)(v896 * v524);
      uint64_t v844 = -(v56 * v524);
      uint64_t v527 = 2 * v523;
      while (1)
      {
        int v528 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v529 = 255;
LABEL_812:
            unint64_t v530 = v65;
            if (v20)
            {
              unsigned int v531 = *v71;
              if (v531 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_818:
                *uint64_t v71 = v529;
                goto LABEL_819;
              }
            }
            else
            {
              unsigned int v531 = 255;
            }
            unsigned int v532 = PDAsoftlightPDA(bswap32((unsigned __int16)*v938) >> 16, v531, bswap32((unsigned __int16)*v931) >> 16, v529);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v532) >> 16;
            unint64_t v65 = v530;
            if (!v928) {
              goto LABEL_819;
            }
            unsigned int v529 = HIBYTE(v532);
            goto LABEL_818;
          }
          unsigned int v529 = *v70;
          if (v529 >= 8) {
            goto LABEL_812;
          }
LABEL_819:
          v71 += v525;
          uint64_t v533 = &v931[v919];
          if ((unint64_t)v533 >= v65) {
            uint64_t v534 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v534 = 0;
          }
          v70 += v526 + v534;
          v931 = &v533[v534];
          v938 = (_WORD *)((char *)v938 + v527);
          --v528;
        }
        while (v528);
        if (v893)
        {
          uint64_t v535 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v536 = (unint64_t)v535 >= v893;
          uint64_t v537 = v880;
          if ((unint64_t)v535 < v893) {
            uint64_t v537 = 0;
          }
          uint64_t v538 = &v535[v537];
          unint64_t v539 = v65 + 2 * v537;
          uint64_t v540 = v844;
          if (!v536) {
            uint64_t v540 = 0;
          }
          unint64_t v65 = v539 + 2 * v896;
          v931 = v538;
          v898 = v538;
          v900 += v890 + v540;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 21:
      int v541 = v62;
      uint64_t v920 = (int)v62;
      int v542 = v39;
      uint64_t v543 = (int)v20;
      uint64_t v544 = v40;
      uint64_t v881 = -(uint64_t)(v896 * v542);
      uint64_t v845 = -(v56 * v542);
      uint64_t v545 = 2 * v541;
      while (1)
      {
        int v546 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v547 = 255;
LABEL_838:
            unint64_t v548 = v65;
            if (v20)
            {
              unsigned int v549 = *v71;
              if (v549 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_844:
                *uint64_t v71 = v547;
                goto LABEL_845;
              }
            }
            else
            {
              unsigned int v549 = 255;
            }
            unsigned int v550 = PDAhardlightPDA(bswap32((unsigned __int16)*v938) >> 16, v549, bswap32((unsigned __int16)*v931) >> 16, v547);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v550) >> 16;
            unint64_t v65 = v548;
            if (!v928) {
              goto LABEL_845;
            }
            unsigned int v547 = HIBYTE(v550);
            goto LABEL_844;
          }
          unsigned int v547 = *v70;
          if (v547 >= 8) {
            goto LABEL_838;
          }
LABEL_845:
          v71 += v543;
          uint64_t v551 = &v931[v920];
          if ((unint64_t)v551 >= v65) {
            uint64_t v552 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v552 = 0;
          }
          v70 += v544 + v552;
          v931 = &v551[v552];
          v938 = (_WORD *)((char *)v938 + v545);
          --v546;
        }
        while (v546);
        if (v893)
        {
          uint64_t v553 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v554 = (unint64_t)v553 >= v893;
          uint64_t v555 = v881;
          if ((unint64_t)v553 < v893) {
            uint64_t v555 = 0;
          }
          uint64_t v556 = &v553[v555];
          unint64_t v557 = v65 + 2 * v555;
          uint64_t v558 = v845;
          if (!v554) {
            uint64_t v558 = 0;
          }
          unint64_t v65 = v557 + 2 * v896;
          v931 = v556;
          v898 = v556;
          v900 += v890 + v558;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 22:
      int v559 = v62;
      uint64_t v921 = (int)v62;
      int v560 = v39;
      uint64_t v561 = (int)v20;
      uint64_t v562 = v40;
      uint64_t v882 = -(uint64_t)(v896 * v560);
      uint64_t v846 = -(v56 * v560);
      uint64_t v563 = 2 * v559;
      while (1)
      {
        int v564 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v565 = 255;
LABEL_864:
            unint64_t v566 = v65;
            if (v20)
            {
              unsigned int v567 = *v71;
              if (v567 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_870:
                *uint64_t v71 = v565;
                goto LABEL_871;
              }
            }
            else
            {
              unsigned int v567 = 255;
            }
            unsigned int v568 = PDAdifferencePDA(bswap32((unsigned __int16)*v938) >> 16, v567, bswap32((unsigned __int16)*v931) >> 16, v565);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v568) >> 16;
            unint64_t v65 = v566;
            if (!v928) {
              goto LABEL_871;
            }
            unsigned int v565 = HIBYTE(v568);
            goto LABEL_870;
          }
          unsigned int v565 = *v70;
          if (v565 >= 8) {
            goto LABEL_864;
          }
LABEL_871:
          v71 += v561;
          uint64_t v569 = &v931[v921];
          if ((unint64_t)v569 >= v65) {
            uint64_t v570 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v570 = 0;
          }
          v70 += v562 + v570;
          v931 = &v569[v570];
          v938 = (_WORD *)((char *)v938 + v563);
          --v564;
        }
        while (v564);
        if (v893)
        {
          uint64_t v571 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v572 = (unint64_t)v571 >= v893;
          uint64_t v573 = v882;
          if ((unint64_t)v571 < v893) {
            uint64_t v573 = 0;
          }
          uint64_t v574 = &v571[v573];
          unint64_t v575 = v65 + 2 * v573;
          uint64_t v576 = v846;
          if (!v572) {
            uint64_t v576 = 0;
          }
          unint64_t v65 = v575 + 2 * v896;
          v931 = v574;
          v898 = v574;
          v900 += v890 + v576;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 23:
      int v577 = v62;
      uint64_t v922 = (int)v62;
      int v578 = v39;
      uint64_t v579 = (int)v20;
      uint64_t v580 = v40;
      uint64_t v883 = -(uint64_t)(v896 * v578);
      uint64_t v847 = -(v56 * v578);
      uint64_t v581 = 2 * v577;
      while (1)
      {
        int v582 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v583 = 255;
LABEL_890:
            unint64_t v584 = v65;
            if (v20)
            {
              unsigned int v585 = *v71;
              if (v585 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_896:
                *uint64_t v71 = v583;
                goto LABEL_897;
              }
            }
            else
            {
              unsigned int v585 = 255;
            }
            unsigned int v586 = PDAexclusionPDA(bswap32((unsigned __int16)*v938) >> 16, v585, bswap32((unsigned __int16)*v931) >> 16, v583);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v586) >> 16;
            unint64_t v65 = v584;
            if (!v928) {
              goto LABEL_897;
            }
            unsigned int v583 = HIBYTE(v586);
            goto LABEL_896;
          }
          unsigned int v583 = *v70;
          if (v583 >= 8) {
            goto LABEL_890;
          }
LABEL_897:
          v71 += v579;
          uint64_t v587 = &v931[v922];
          if ((unint64_t)v587 >= v65) {
            uint64_t v588 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v588 = 0;
          }
          v70 += v580 + v588;
          v931 = &v587[v588];
          v938 = (_WORD *)((char *)v938 + v581);
          --v582;
        }
        while (v582);
        if (v893)
        {
          uint64_t v589 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v590 = (unint64_t)v589 >= v893;
          uint64_t v591 = v883;
          if ((unint64_t)v589 < v893) {
            uint64_t v591 = 0;
          }
          uint64_t v592 = &v589[v591];
          unint64_t v593 = v65 + 2 * v591;
          uint64_t v594 = v847;
          if (!v590) {
            uint64_t v594 = 0;
          }
          unint64_t v65 = v593 + 2 * v896;
          v931 = v592;
          v898 = v592;
          v900 += v890 + v594;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 24:
      int v595 = v62;
      uint64_t v923 = (int)v62;
      int v596 = v39;
      uint64_t v597 = (int)v20;
      uint64_t v598 = v40;
      uint64_t v884 = -(uint64_t)(v896 * v596);
      uint64_t v848 = -(v56 * v596);
      uint64_t v599 = 2 * v595;
      while (1)
      {
        int v600 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v601 = 255;
LABEL_916:
            unint64_t v602 = v65;
            if (v20)
            {
              unsigned int v603 = *v71;
              if (v603 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_922:
                *uint64_t v71 = v601;
                goto LABEL_923;
              }
            }
            else
            {
              unsigned int v603 = 255;
            }
            unsigned int v604 = PDAhuePDA(bswap32((unsigned __int16)*v938) >> 16, v603, bswap32((unsigned __int16)*v931) >> 16, v601);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v604) >> 16;
            unint64_t v65 = v602;
            if (!v928) {
              goto LABEL_923;
            }
            unsigned int v601 = HIBYTE(v604);
            goto LABEL_922;
          }
          unsigned int v601 = *v70;
          if (v601 >= 8) {
            goto LABEL_916;
          }
LABEL_923:
          v71 += v597;
          unint64_t v605 = &v931[v923];
          if ((unint64_t)v605 >= v65) {
            uint64_t v606 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v606 = 0;
          }
          v70 += v598 + v606;
          v931 = &v605[v606];
          v938 = (_WORD *)((char *)v938 + v599);
          --v600;
        }
        while (v600);
        if (v893)
        {
          unint64_t v607 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v608 = (unint64_t)v607 >= v893;
          uint64_t v609 = v884;
          if ((unint64_t)v607 < v893) {
            uint64_t v609 = 0;
          }
          uint64_t v610 = &v607[v609];
          unint64_t v611 = v65 + 2 * v609;
          uint64_t v612 = v848;
          if (!v608) {
            uint64_t v612 = 0;
          }
          unint64_t v65 = v611 + 2 * v896;
          v931 = v610;
          v898 = v610;
          v900 += v890 + v612;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 25:
      int v613 = v62;
      uint64_t v924 = (int)v62;
      int v614 = v39;
      uint64_t v615 = (int)v20;
      uint64_t v616 = v40;
      uint64_t v885 = -(uint64_t)(v896 * v614);
      uint64_t v849 = -(v56 * v614);
      uint64_t v617 = 2 * v613;
      while (1)
      {
        int v618 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v619 = 255;
LABEL_942:
            unint64_t v620 = v65;
            if (v20)
            {
              unsigned int v621 = *v71;
              if (v621 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_948:
                *uint64_t v71 = v619;
                goto LABEL_949;
              }
            }
            else
            {
              unsigned int v621 = 255;
            }
            unsigned int v622 = PDAsaturationPDA(bswap32((unsigned __int16)*v938) >> 16, v621, bswap32((unsigned __int16)*v931) >> 16, v619);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v622) >> 16;
            unint64_t v65 = v620;
            if (!v928) {
              goto LABEL_949;
            }
            unsigned int v619 = HIBYTE(v622);
            goto LABEL_948;
          }
          unsigned int v619 = *v70;
          if (v619 >= 8) {
            goto LABEL_942;
          }
LABEL_949:
          v71 += v615;
          uint64_t v623 = &v931[v924];
          if ((unint64_t)v623 >= v65) {
            uint64_t v624 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v624 = 0;
          }
          v70 += v616 + v624;
          v931 = &v623[v624];
          v938 = (_WORD *)((char *)v938 + v617);
          --v618;
        }
        while (v618);
        if (v893)
        {
          v625 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v626 = (unint64_t)v625 >= v893;
          uint64_t v627 = v885;
          if ((unint64_t)v625 < v893) {
            uint64_t v627 = 0;
          }
          int v628 = &v625[v627];
          unint64_t v629 = v65 + 2 * v627;
          uint64_t v630 = v849;
          if (!v626) {
            uint64_t v630 = 0;
          }
          unint64_t v65 = v629 + 2 * v896;
          v931 = v628;
          v898 = v628;
          v900 += v890 + v630;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 26:
      int v631 = v62;
      uint64_t v925 = (int)v62;
      int v632 = v39;
      uint64_t v633 = (int)v20;
      uint64_t v634 = v40;
      uint64_t v886 = -(uint64_t)(v896 * v632);
      uint64_t v850 = -(v56 * v632);
      uint64_t v635 = 2 * v631;
      while (1)
      {
        int v636 = v951[0];
        do
        {
          if (!v40)
          {
            unsigned int v637 = 255;
LABEL_968:
            unint64_t v638 = v65;
            if (v20)
            {
              unsigned int v639 = *v71;
              if (v639 <= 7)
              {
                _WORD *v938 = *v931;
                int v40 = v930;
LABEL_974:
                *uint64_t v71 = v637;
                goto LABEL_975;
              }
            }
            else
            {
              unsigned int v639 = 255;
            }
            unsigned int v640 = PDAluminosityPDA(bswap32((unsigned __int16)*v931) >> 16, v637, bswap32((unsigned __int16)*v938) >> 16, v639);
            LODWORD(v20) = v928;
            int v40 = v930;
            _WORD *v938 = bswap32(v640) >> 16;
            unint64_t v65 = v638;
            if (!v928) {
              goto LABEL_975;
            }
            unsigned int v637 = HIBYTE(v640);
            goto LABEL_974;
          }
          unsigned int v637 = *v70;
          if (v637 >= 8) {
            goto LABEL_968;
          }
LABEL_975:
          v71 += v633;
          uint64_t v641 = &v931[v925];
          if ((unint64_t)v641 >= v65) {
            uint64_t v642 = -(uint64_t)(int)v864;
          }
          else {
            uint64_t v642 = 0;
          }
          v70 += v634 + v642;
          v931 = &v641[v642];
          v938 = (_WORD *)((char *)v938 + v635);
          --v636;
        }
        while (v636);
        if (v893)
        {
          v643 = &v898[v896];
          uint64_t v56 = v890;
          BOOL v644 = (unint64_t)v643 >= v893;
          uint64_t v645 = v886;
          if ((unint64_t)v643 < v893) {
            uint64_t v645 = 0;
          }
          BOOL v646 = &v643[v645];
          unint64_t v647 = v65 + 2 * v645;
          uint64_t v648 = v850;
          if (!v644) {
            uint64_t v648 = 0;
          }
          unint64_t v65 = v647 + 2 * v896;
          v931 = v646;
          v898 = v646;
          v900 += v890 + v648;
          int v70 = v900;
        }
        else
        {
          v931 += v896;
          uint64_t v56 = v890;
          v70 += v890;
        }
        v938 += v892;
        v71 += v888;
        if (!--v941[0]) {
          goto LABEL_1090;
        }
      }
    case 27:
      int v649 = v62;
      uint64_t v926 = (int)v62;
      int v650 = v39;
      uint64_t v651 = (int)v20;
      uint64_t v652 = v40;
      uint64_t v887 = -(uint64_t)(v896 * v650);
      uint64_t v851 = -(v56 * v650);
      uint64_t v653 = 2 * v649;
      break;
    default:
      goto LABEL_1229;
  }
LABEL_989:
  int v654 = v951[0];
  while (1)
  {
    if (v40)
    {
      unsigned int v655 = *v70;
      if (v655 < 8) {
        goto LABEL_1001;
      }
    }
    else
    {
      unsigned int v655 = 255;
    }
    unint64_t v656 = v65;
    if (v20)
    {
      unsigned int v657 = *v71;
      if (v657 <= 7)
      {
        _WORD *v938 = *v931;
        int v40 = v930;
LABEL_1000:
        *uint64_t v71 = v655;
        goto LABEL_1001;
      }
    }
    else
    {
      unsigned int v657 = 255;
    }
    unsigned int v658 = PDAluminosityPDA(bswap32((unsigned __int16)*v938) >> 16, v657, bswap32((unsigned __int16)*v931) >> 16, v655);
    LODWORD(v20) = v928;
    int v40 = v930;
    _WORD *v938 = bswap32(v658) >> 16;
    unint64_t v65 = v656;
    if (v928)
    {
      unsigned int v655 = HIBYTE(v658);
      goto LABEL_1000;
    }
LABEL_1001:
    v71 += v651;
    v659 = &v931[v926];
    if ((unint64_t)v659 >= v65) {
      uint64_t v660 = -(uint64_t)(int)v864;
    }
    else {
      uint64_t v660 = 0;
    }
    v70 += v652 + v660;
    v931 = &v659[v660];
    v938 = (_WORD *)((char *)v938 + v653);
    if (!--v654)
    {
      if (v893)
      {
        uint64_t v661 = &v898[v896];
        uint64_t v56 = v890;
        BOOL v662 = (unint64_t)v661 >= v893;
        uint64_t v663 = v887;
        if ((unint64_t)v661 < v893) {
          uint64_t v663 = 0;
        }
        uint64_t v664 = &v661[v663];
        unint64_t v665 = v65 + 2 * v663;
        uint64_t v666 = v851;
        if (!v662) {
          uint64_t v666 = 0;
        }
        unint64_t v65 = v665 + 2 * v896;
        v931 = v664;
        v898 = v664;
        v900 += v890 + v666;
        int v70 = v900;
      }
      else
      {
        v931 += v896;
        uint64_t v56 = v890;
        v70 += v890;
      }
      v938 += v892;
      v71 += v888;
      if (!--v941[0]) {
        goto LABEL_1090;
      }
      goto LABEL_989;
    }
  }
}

uint64_t RGB555_image_mark_rgb32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  if (*(void *)(a1 + 40)) {
    int v7 = 0;
  }
  else {
    int v7 = 255;
  }
  int v152 = v7;
  int v8 = (_WORD *)*((void *)a2 + 2);
  uint64_t v9 = (char *)*((void *)a2 + 4);
  if (v9) {
    uint64_t v138 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v138 = 0;
  }
  int v10 = a2[1];
  int v137 = *a2;
  uint64_t v136 = *((void *)a2 + 3) - a5;
  uint64_t v151 = v9 != 0;
  uint64_t v12 = *((void *)a2 + 19);
  uint64_t v11 = *((void *)a2 + 20);
  uint64_t v13 = *((void *)a2 + 11);
  uint64_t v133 = *((void *)a2 + 13);
  uint64_t result = *((void *)a2 + 9) + v133 * a4;
  uint64_t v130 = *((void *)a2 + 6);
  uint64_t v139 = *((void *)a2 + 7);
  unsigned int v15 = *(unsigned int **)(a1 + 32);
  uint64_t v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  uint64_t v17 = *(void *)(a1 + 168);
  char v150 = v10;
  char v134 = v13;
  uint64_t v135 = v12;
  uint64_t v132 = v17;
  if (*(void *)(a1 + 176))
  {
    unint64_t v146 = 0;
    uint64_t v18 = 0;
    uint64_t v129 = *((void *)a2 + 15);
    uint64_t v128 = *((void *)a2 + 17);
    uint64_t v127 = ~(-1 << v13);
    char v126 = v13 - 4;
    uint64_t v125 = -v12;
    unint64_t v19 = (unsigned int *)(v16 - 4);
    char v149 = 32 - v10;
    int32x2_t v20 = vdup_n_s32(v6);
    uint64_t v123 = v11 + 16 * a3 + 8;
    uint64_t v124 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v128 - result) | (result - v129)) < 0)
      {
        int v26 = 0;
        uint64_t v147 = 0;
      }
      else
      {
        uint64_t v22 = ((result & (unint64_t)v127) >> v126) & 0xF;
        char v23 = weights_21383[v22];
        BOOL v24 = (unint64_t)(v22 - 7) >= 9;
        uint64_t v25 = v125;
        if (!v24) {
          uint64_t v25 = v12;
        }
        uint64_t v147 = v25;
        int v26 = v23 & 0xF;
      }
      if (v17)
      {
        uint64_t v27 = v17 + 16 * v139;
        unint64_t v146 = v27 + 16;
        uint64_t v18 = (unsigned __int8 *)(v27 + v130);
        uint64_t v28 = (v139 + 1) & 0xF;
        if (v139 + 1 <= 0) {
          uint64_t v28 = -(-(v139 + 1) & 0xF);
        }
        uint64_t v139 = v28;
      }
      uint64_t v29 = *(void *)(a1 + 32) + (result >> v13) * v12;
      int v142 = a6;
      uint64_t v140 = result;
      if (v137 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v31 = (uint64_t *)v123;
        uint64_t v30 = v124;
        while (1)
        {
          uint64_t v32 = *(v31 - 1);
          uint64_t v33 = *v31;
          uint64_t v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32) {
            int v35 = (unsigned int *)(v29 + v32);
          }
          else {
            int v35 = v19;
          }
          if (v35 < v15) {
            int v35 = v15;
          }
          unsigned int v36 = *v35;
          char v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0) {
            break;
          }
          if (v26)
          {
            unint64_t v48 = (unsigned int *)(v34 + v147);
            if ((unint64_t)v19 < v34 + v147) {
              unint64_t v48 = v19;
            }
            if (v48 < v15) {
              unint64_t v48 = v15;
            }
            int v49 = BLEND8_21385[v26];
            unsigned int v46 = v36 - ((v49 & v36) >> v26);
            unsigned int v47 = (v49 & *v48) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          unsigned int v50 = (v36 << v150) | (v36 >> v149);
          unsigned int v51 = v50 | v152;
          if (v18)
          {
            int v52 = *v18;
            if ((unint64_t)(v18 + 1) < v146) {
              ++v18;
            }
            else {
              v18 -= 15;
            }
            if (v6 == 255) {
              unsigned int v53 = DITHERRGBA32(v51, v52);
            }
            else {
              unsigned int v53 = DITHERRGBA32M(v51, v52, v6);
            }
          }
          else
          {
            uint64_t v18 = 0;
            if (v6 == 255)
            {
              unsigned int v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              int v55 = (unsigned __int16)v21.i16[0] >> 11;
              uint32x4_t v56 = vshlq_u32(v54, (uint32x4_t)xmmword_1850CD9F0);
              int8x16_t v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_1850CDA00);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              int32x4_t v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_1850CDA10);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              unsigned int v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *int v8 = bswap32(v53) >> 16;
          if (v9) {
            *uint64_t v9 = HIBYTE(v53);
          }
          v31 += 2;
          ++v8;
          v9 += v151;
          if (!--v30) {
            goto LABEL_117;
          }
        }
        uint64_t v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38) {
          uint64_t v38 = v19;
        }
        if (v38 < v15) {
          uint64_t v38 = v15;
        }
        unsigned int v39 = *v38;
        if (v26)
        {
          int v40 = (unsigned int *)(v34 + v147);
          if (v19 >= v40) {
            char v41 = v40;
          }
          else {
            char v41 = v19;
          }
          if (v41 < v15) {
            char v41 = v15;
          }
          unsigned int v42 = *v41;
          uint64_t v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43) {
            uint64_t v43 = v19;
          }
          if (v43 < v15) {
            uint64_t v43 = v15;
          }
          int v44 = BLEND8_21385[v26];
          unsigned int v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          unsigned int v39 = v39 - ((v44 & v39) >> v26) + ((v44 & *v43) >> v26);
        }
        int v45 = BLEND8_21385[*v31 & 0xF];
        unsigned int v46 = v36 - ((v45 & v36) >> v37);
        unsigned int v47 = (v45 & v39) >> v37;
LABEL_49:
        unsigned int v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      uint64_t v12 = v135;
      v8 += v136;
      v9 += v138;
      LOBYTE(v13) = v134;
      uint64_t result = v140 + v133;
      a6 = v142 - 1;
      uint64_t v17 = v132;
      if (v142 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_117;
    }
    unint64_t v59 = (uint64_t *)v123;
    uint64_t v58 = v124;
    while (1)
    {
      uint64_t v60 = *(v59 - 1);
      uint64_t v61 = *v59;
      uint64_t v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60) {
        int v63 = (unsigned int *)(v29 + v60);
      }
      else {
        int v63 = v19;
      }
      if (v63 < v15) {
        int v63 = v15;
      }
      unsigned int v64 = *v63;
      char v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        unint64_t v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66) {
          unint64_t v66 = v19;
        }
        if (v66 < v15) {
          unint64_t v66 = v15;
        }
        unsigned int v67 = *v66;
        if (v26)
        {
          uint64_t v68 = (unsigned int *)(v62 + v147);
          if (v19 >= v68) {
            int v69 = v68;
          }
          else {
            int v69 = v19;
          }
          if (v69 < v15) {
            int v69 = v15;
          }
          unsigned int v70 = *v69;
          uint64_t v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71) {
            uint64_t v71 = v19;
          }
          if (v71 < v15) {
            uint64_t v71 = v15;
          }
          int v72 = BLEND8_21385[v26];
          unsigned int v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          unsigned int v67 = v67 - ((v72 & v67) >> v26) + ((v72 & *v71) >> v26);
        }
        int v73 = BLEND8_21385[*v59 & 0xF];
        unsigned int v74 = v64 - ((v73 & v64) >> v65);
        unsigned int v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26) {
          goto LABEL_95;
        }
        uint64_t v76 = (unsigned int *)(v62 + v147);
        if ((unint64_t)v19 < v62 + v147) {
          uint64_t v76 = v19;
        }
        if (v76 < v15) {
          uint64_t v76 = v15;
        }
        int v77 = BLEND8_21385[v26];
        unsigned int v74 = v64 - ((v77 & v64) >> v26);
        unsigned int v75 = (v77 & *v76) >> v26;
      }
      unsigned int v64 = v74 + v75;
LABEL_95:
      unsigned int v78 = (v64 << v150) | (v64 >> v149);
      unsigned int v79 = v78 | v152;
      if (v18)
      {
        int v80 = *v18;
        if ((unint64_t)(v18 + 1) < v146) {
          ++v18;
        }
        else {
          v18 -= 15;
        }
        if (v6 == 255)
        {
          unsigned int v81 = DITHERRGBA32(v79, v80);
          if (!v9) {
            goto LABEL_105;
          }
        }
        else
        {
          unsigned int v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9) {
            goto LABEL_105;
          }
        }
      }
      else if (v6 == 255)
      {
        uint64_t v18 = 0;
        unsigned int v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u) {
              *int v8 = __rev16(PDplusDM(v81, bswap32((unsigned __int16)*v8) >> 16, ~v81 >> 24));
            }
          }
          else
          {
            *int v8 = bswap32(v81) >> 16;
          }
          goto LABEL_113;
        }
      }
      else
      {
        uint64_t v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        uint32x4_t v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        int v83 = (unsigned __int16)v21.i16[0] >> 11;
        uint32x4_t v84 = vshlq_u32(v82, (uint32x4_t)xmmword_1850CD9F0);
        int8x16_t v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_1850CDA00);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        int32x4_t v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_1850CDA10);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        unsigned int v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9) {
          goto LABEL_105;
        }
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          unsigned int v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v81) ^ 0xFF);
          *int v8 = bswap32(v86) >> 16;
          *uint64_t v9 = HIBYTE(v86);
        }
      }
      else
      {
        *int v8 = bswap32(v81) >> 16;
        *uint64_t v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v151;
      if (!--v58) {
        goto LABEL_117;
      }
    }
  }
  unint64_t v87 = 0;
  uint64_t v88 = 0;
  int v89 = v16 - 4;
  int32x2_t v90 = vdup_n_s32(v6);
  int v145 = (uint64_t *)(v11 + 16 * a3);
  char v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  uint64_t v144 = a5;
  char v93 = v10;
  do
  {
    if (v17)
    {
      uint64_t v94 = v17 + 16 * v139;
      unint64_t v87 = v94 + 16;
      uint64_t v88 = (unsigned __int8 *)(v94 + v130);
      uint64_t v95 = (v139 + 1) & 0xF;
      if (v139 + 1 <= 0) {
        uint64_t v95 = -(-(v139 + 1) & 0xF);
      }
      uint64_t v139 = v95;
    }
    uint64_t v96 = *(void *)(a1 + 32) + (result >> v13) * v12;
    int v143 = a6;
    uint64_t v141 = result;
    if (v137 != 1)
    {
      int v109 = v145;
      uint64_t v110 = v144;
      if (a5 < 1) {
        goto LABEL_174;
      }
      while (1)
      {
        uint64_t v111 = *v109;
        v109 += 2;
        unsigned int v112 = (char *)(v96 + v111);
        if ((unint64_t)v89 < v96 + v111) {
          unsigned int v112 = v89;
        }
        if ((unint64_t)v112 < *(void *)(a1 + 32)) {
          unsigned int v112 = *(char **)(a1 + 32);
        }
        unsigned int v113 = (*(_DWORD *)v112 << v93) | (*(_DWORD *)v112 >> v91);
        unsigned int v114 = v113 | v152;
        if (v88)
        {
          int v115 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255)
          {
            unsigned int v116 = DITHERRGBA32(v114, v115);
            if (v9) {
              goto LABEL_157;
            }
          }
          else
          {
            unsigned int v116 = DITHERRGBA32M(v114, v115, v6);
            if (v9) {
              goto LABEL_157;
            }
          }
        }
        else if (v6 == 255)
        {
          uint64_t v88 = 0;
          unsigned int v116 = (v113 >> 17) & 0x7C00 | (v113 >> 14) & 0x3E0 | ((unsigned __int16)v113 >> 11) & 0xFFFFFF | ((v114 >> 3) << 27) | (v114 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v116) < 0xF8u)
            {
              if (HIBYTE(v116) >= 8u)
              {
                unsigned int v122 = PDAplusDAM((unsigned __int16)v116, SHIBYTE(v116), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v116) ^ 0xFF);
                *int v8 = bswap32(v122) >> 16;
                *uint64_t v9 = HIBYTE(v122);
              }
            }
            else
            {
              *int v8 = bswap32(v116) >> 16;
              *uint64_t v9 = HIBYTE(v116);
            }
            goto LABEL_170;
          }
        }
        else
        {
          uint64_t v88 = 0;
          v92.i16[0] = BYTE1(v113);
          v92.i16[1] = v113 >> 8 >> 16;
          v92.i32[1] = v114 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v117 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          int v118 = (unsigned __int16)v92.i16[0] >> 11;
          uint32x4_t v119 = vshlq_u32(v117, (uint32x4_t)xmmword_1850CD9F0);
          int8x16_t v120 = (int8x16_t)vshlq_u32(v117, (uint32x4_t)xmmword_1850CDA00);
          v120.i32[0] = v119.i32[0];
          v120.i32[3] = v119.i32[3];
          int32x4_t v92 = (int32x4_t)vandq_s8(v120, (int8x16_t)xmmword_1850CDA10);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          unsigned int v116 = v92.i32[0] | v118 | v92.i32[1];
          if (v9) {
            goto LABEL_157;
          }
        }
        if (HIBYTE(v116) >= 0xF8u) {
          break;
        }
        if (HIBYTE(v116) >= 8u)
        {
          LOWORD(v121) = __rev16(PDplusDM(v116, bswap32((unsigned __int16)*v8) >> 16, ~v116 >> 24));
          goto LABEL_169;
        }
LABEL_170:
        ++v8;
        v9 += v151;
        --v110;
        char v93 = v150;
        if (!v110) {
          goto LABEL_174;
        }
      }
      unsigned int v121 = bswap32(v116) >> 16;
LABEL_169:
      *int v8 = v121;
      goto LABEL_170;
    }
    if (a5 >= 1)
    {
      unsigned int v97 = v145;
      uint64_t v98 = v144;
      do
      {
        uint64_t v99 = *v97;
        v97 += 2;
        unsigned int v100 = (char *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99) {
          unsigned int v100 = v89;
        }
        if ((unint64_t)v100 < *(void *)(a1 + 32)) {
          unsigned int v100 = *(char **)(a1 + 32);
        }
        unsigned int v101 = (*(_DWORD *)v100 << v93) | (*(_DWORD *)v100 >> v91);
        unsigned int v102 = v101 | v152;
        if (v88)
        {
          int v103 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255) {
            unsigned int v104 = DITHERRGBA32(v102, v103);
          }
          else {
            unsigned int v104 = DITHERRGBA32M(v102, v103, v6);
          }
          char v93 = v150;
        }
        else
        {
          uint64_t v88 = 0;
          if (v6 == 255)
          {
            unsigned int v104 = (v101 >> 17) & 0x7C00 | (v101 >> 14) & 0x3E0 | ((unsigned __int16)v101 >> 11) & 0xFFFFFF | ((v102 >> 3) << 27) | (v102 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v101);
            v92.i16[1] = v101 >> 8 >> 16;
            v92.i32[1] = v102 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v105 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            int v106 = (unsigned __int16)v92.i16[0] >> 11;
            uint32x4_t v107 = vshlq_u32(v105, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v108 = (int8x16_t)vshlq_u32(v105, (uint32x4_t)xmmword_1850CDA00);
            v108.i32[0] = v107.i32[0];
            v108.i32[3] = v107.i32[3];
            int32x4_t v92 = (int32x4_t)vandq_s8(v108, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            unsigned int v104 = v92.i32[0] | v106 | v92.i32[1];
          }
        }
        *int v8 = bswap32(v104) >> 16;
        if (v9) {
          *uint64_t v9 = HIBYTE(v104);
        }
        ++v8;
        v9 += v151;
        --v98;
      }
      while (v98);
    }
LABEL_174:
    uint64_t v12 = v135;
    v8 += v136;
    v9 += v138;
    LOBYTE(v13) = v134;
    uint64_t result = v141 + v133;
    a6 = v143 - 1;
    uint64_t v17 = v132;
  }
  while (v143 != 1);
  return result;
}

uint64_t RGB555_image_mark_RGB32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  if (*(void *)(a1 + 40)) {
    int v7 = 0;
  }
  else {
    int v7 = 255;
  }
  int v154 = v7;
  int v8 = (_WORD *)*((void *)a2 + 2);
  uint64_t v9 = (char *)*((void *)a2 + 4);
  if (v9) {
    uint64_t v140 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v140 = 0;
  }
  int v10 = a2[1];
  int v139 = *a2;
  uint64_t v138 = *((void *)a2 + 3) - a5;
  uint64_t v153 = v9 != 0;
  uint64_t v12 = *((void *)a2 + 19);
  uint64_t v11 = *((void *)a2 + 20);
  uint64_t v13 = *((void *)a2 + 11);
  uint64_t v135 = *((void *)a2 + 13);
  uint64_t result = *((void *)a2 + 9) + v135 * a4;
  uint64_t v132 = *((void *)a2 + 6);
  uint64_t v141 = *((void *)a2 + 7);
  unsigned int v15 = *(unsigned int **)(a1 + 32);
  uint64_t v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  uint64_t v17 = *(void *)(a1 + 168);
  char v152 = v10;
  char v136 = v13;
  uint64_t v137 = v12;
  uint64_t v134 = v17;
  if (*(void *)(a1 + 176))
  {
    unint64_t v148 = 0;
    uint64_t v18 = 0;
    uint64_t v131 = *((void *)a2 + 15);
    uint64_t v130 = *((void *)a2 + 17);
    uint64_t v129 = ~(-1 << v13);
    char v128 = v13 - 4;
    uint64_t v127 = -v12;
    unint64_t v19 = (unsigned int *)(v16 - 4);
    char v151 = 32 - v10;
    int32x2_t v20 = vdup_n_s32(v6);
    uint64_t v125 = v11 + 16 * a3 + 8;
    uint64_t v126 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v130 - result) | (result - v131)) < 0)
      {
        int v26 = 0;
        uint64_t v149 = 0;
      }
      else
      {
        uint64_t v22 = ((result & (unint64_t)v129) >> v128) & 0xF;
        char v23 = weights_21383[v22];
        BOOL v24 = (unint64_t)(v22 - 7) >= 9;
        uint64_t v25 = v127;
        if (!v24) {
          uint64_t v25 = v12;
        }
        uint64_t v149 = v25;
        int v26 = v23 & 0xF;
      }
      if (v17)
      {
        uint64_t v27 = v17 + 16 * v141;
        unint64_t v148 = v27 + 16;
        uint64_t v18 = (unsigned __int8 *)(v27 + v132);
        uint64_t v28 = (v141 + 1) & 0xF;
        if (v141 + 1 <= 0) {
          uint64_t v28 = -(-(v141 + 1) & 0xF);
        }
        uint64_t v141 = v28;
      }
      uint64_t v29 = *(void *)(a1 + 32) + (result >> v13) * v12;
      int v144 = a6;
      uint64_t v142 = result;
      if (v139 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v31 = (uint64_t *)v125;
        uint64_t v30 = v126;
        while (1)
        {
          uint64_t v32 = *(v31 - 1);
          uint64_t v33 = *v31;
          uint64_t v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32) {
            int v35 = (unsigned int *)(v29 + v32);
          }
          else {
            int v35 = v19;
          }
          if (v35 < v15) {
            int v35 = v15;
          }
          unsigned int v36 = bswap32(*v35);
          char v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0) {
            break;
          }
          if (v26)
          {
            unint64_t v48 = (unsigned int *)(v34 + v149);
            if ((unint64_t)v19 < v34 + v149) {
              unint64_t v48 = v19;
            }
            if (v48 < v15) {
              unint64_t v48 = v15;
            }
            int v49 = BLEND8_21385[v26];
            unsigned int v46 = v36 - ((v49 & v36) >> v26);
            unsigned int v47 = (bswap32(*v48) & v49) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          unsigned int v50 = (v36 << v152) | (v36 >> v151);
          unsigned int v51 = v50 | v154;
          if (v18)
          {
            int v52 = *v18;
            if ((unint64_t)(v18 + 1) < v148) {
              ++v18;
            }
            else {
              v18 -= 15;
            }
            if (v6 == 255) {
              unsigned int v53 = DITHERRGBA32(v51, v52);
            }
            else {
              unsigned int v53 = DITHERRGBA32M(v51, v52, v6);
            }
          }
          else
          {
            uint64_t v18 = 0;
            if (v6 == 255)
            {
              unsigned int v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              int v55 = (unsigned __int16)v21.i16[0] >> 11;
              uint32x4_t v56 = vshlq_u32(v54, (uint32x4_t)xmmword_1850CD9F0);
              int8x16_t v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_1850CDA00);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              int32x4_t v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_1850CDA10);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              unsigned int v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *int v8 = bswap32(v53) >> 16;
          if (v9) {
            *uint64_t v9 = HIBYTE(v53);
          }
          v31 += 2;
          ++v8;
          v9 += v153;
          if (!--v30) {
            goto LABEL_117;
          }
        }
        uint64_t v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38) {
          uint64_t v38 = v19;
        }
        if (v38 < v15) {
          uint64_t v38 = v15;
        }
        unsigned int v39 = bswap32(*v38);
        if (v26)
        {
          int v40 = (unsigned int *)(v34 + v149);
          if (v19 >= v40) {
            char v41 = v40;
          }
          else {
            char v41 = v19;
          }
          if (v41 < v15) {
            char v41 = v15;
          }
          unsigned int v42 = bswap32(*v41);
          uint64_t v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43) {
            uint64_t v43 = v19;
          }
          if (v43 < v15) {
            uint64_t v43 = v15;
          }
          int v44 = BLEND8_21385[v26];
          unsigned int v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          unsigned int v39 = v39 - ((v44 & v39) >> v26) + ((bswap32(*v43) & v44) >> v26);
        }
        int v45 = BLEND8_21385[*v31 & 0xF];
        unsigned int v46 = v36 - ((v45 & v36) >> v37);
        unsigned int v47 = (v45 & v39) >> v37;
LABEL_49:
        unsigned int v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      uint64_t v12 = v137;
      v8 += v138;
      v9 += v140;
      LOBYTE(v13) = v136;
      uint64_t result = v142 + v135;
      a6 = v144 - 1;
      uint64_t v17 = v134;
      if (v144 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_117;
    }
    unint64_t v59 = (uint64_t *)v125;
    uint64_t v58 = v126;
    while (1)
    {
      uint64_t v60 = *(v59 - 1);
      uint64_t v61 = *v59;
      uint64_t v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60) {
        int v63 = (unsigned int *)(v29 + v60);
      }
      else {
        int v63 = v19;
      }
      if (v63 < v15) {
        int v63 = v15;
      }
      unsigned int v64 = bswap32(*v63);
      char v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        unint64_t v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66) {
          unint64_t v66 = v19;
        }
        if (v66 < v15) {
          unint64_t v66 = v15;
        }
        unsigned int v67 = bswap32(*v66);
        if (v26)
        {
          uint64_t v68 = (unsigned int *)(v62 + v149);
          if (v19 >= v68) {
            int v69 = v68;
          }
          else {
            int v69 = v19;
          }
          if (v69 < v15) {
            int v69 = v15;
          }
          unsigned int v70 = bswap32(*v69);
          uint64_t v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71) {
            uint64_t v71 = v19;
          }
          if (v71 < v15) {
            uint64_t v71 = v15;
          }
          int v72 = BLEND8_21385[v26];
          unsigned int v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          unsigned int v67 = v67 - ((v72 & v67) >> v26) + ((bswap32(*v71) & v72) >> v26);
        }
        int v73 = BLEND8_21385[*v59 & 0xF];
        unsigned int v74 = v64 - ((v73 & v64) >> v65);
        unsigned int v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26) {
          goto LABEL_95;
        }
        uint64_t v76 = (unsigned int *)(v62 + v149);
        if ((unint64_t)v19 < v62 + v149) {
          uint64_t v76 = v19;
        }
        if (v76 < v15) {
          uint64_t v76 = v15;
        }
        int v77 = BLEND8_21385[v26];
        unsigned int v74 = v64 - ((v77 & v64) >> v26);
        unsigned int v75 = (bswap32(*v76) & v77) >> v26;
      }
      unsigned int v64 = v74 + v75;
LABEL_95:
      unsigned int v78 = (v64 << v152) | (v64 >> v151);
      unsigned int v79 = v78 | v154;
      if (v18)
      {
        int v80 = *v18;
        if ((unint64_t)(v18 + 1) < v148) {
          ++v18;
        }
        else {
          v18 -= 15;
        }
        if (v6 == 255)
        {
          unsigned int v81 = DITHERRGBA32(v79, v80);
          if (!v9) {
            goto LABEL_105;
          }
        }
        else
        {
          unsigned int v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9) {
            goto LABEL_105;
          }
        }
      }
      else if (v6 == 255)
      {
        uint64_t v18 = 0;
        unsigned int v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u) {
              *int v8 = __rev16(PDplusDM(v81, bswap32((unsigned __int16)*v8) >> 16, ~v81 >> 24));
            }
          }
          else
          {
            *int v8 = bswap32(v81) >> 16;
          }
          goto LABEL_113;
        }
      }
      else
      {
        uint64_t v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        uint32x4_t v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        int v83 = (unsigned __int16)v21.i16[0] >> 11;
        uint32x4_t v84 = vshlq_u32(v82, (uint32x4_t)xmmword_1850CD9F0);
        int8x16_t v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_1850CDA00);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        int32x4_t v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_1850CDA10);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        unsigned int v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9) {
          goto LABEL_105;
        }
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          unsigned int v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v81) ^ 0xFF);
          *int v8 = bswap32(v86) >> 16;
          *uint64_t v9 = HIBYTE(v86);
        }
      }
      else
      {
        *int v8 = bswap32(v81) >> 16;
        *uint64_t v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v153;
      if (!--v58) {
        goto LABEL_117;
      }
    }
  }
  unint64_t v87 = 0;
  uint64_t v88 = 0;
  int v89 = (unsigned int *)(v16 - 4);
  int32x2_t v90 = vdup_n_s32(v6);
  uint64_t v147 = (uint64_t *)(v11 + 16 * a3);
  char v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  uint64_t v146 = a5;
  char v93 = v10;
  do
  {
    if (v17)
    {
      uint64_t v94 = v17 + 16 * v141;
      unint64_t v87 = v94 + 16;
      uint64_t v88 = (unsigned __int8 *)(v94 + v132);
      uint64_t v95 = (v141 + 1) & 0xF;
      if (v141 + 1 <= 0) {
        uint64_t v95 = -(-(v141 + 1) & 0xF);
      }
      uint64_t v141 = v95;
    }
    uint64_t v96 = *(void *)(a1 + 32) + (result >> v13) * v12;
    int v145 = a6;
    uint64_t v143 = result;
    if (v139 != 1)
    {
      uint64_t v110 = v147;
      uint64_t v111 = v146;
      if (a5 < 1) {
        goto LABEL_174;
      }
      while (1)
      {
        uint64_t v112 = *v110;
        v110 += 2;
        unsigned int v113 = (unsigned int *)(v96 + v112);
        if ((unint64_t)v89 < v96 + v112) {
          unsigned int v113 = v89;
        }
        if ((unint64_t)v113 < *(void *)(a1 + 32)) {
          unsigned int v113 = *(unsigned int **)(a1 + 32);
        }
        unsigned int v114 = bswap32(*v113);
        unsigned int v115 = (v114 << v93) | (v114 >> v91);
        unsigned int v116 = v115 | v154;
        if (v88)
        {
          int v117 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255)
          {
            unsigned int v118 = DITHERRGBA32(v116, v117);
            if (v9) {
              goto LABEL_157;
            }
          }
          else
          {
            unsigned int v118 = DITHERRGBA32M(v116, v117, v6);
            if (v9) {
              goto LABEL_157;
            }
          }
        }
        else if (v6 == 255)
        {
          uint64_t v88 = 0;
          unsigned int v118 = (v115 >> 17) & 0x7C00 | (v115 >> 14) & 0x3E0 | ((unsigned __int16)v115 >> 11) & 0xFFFFFF | ((v116 >> 3) << 27) | (v116 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v118) < 0xF8u)
            {
              if (HIBYTE(v118) >= 8u)
              {
                unsigned int v124 = PDAplusDAM((unsigned __int16)v118, SHIBYTE(v118), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v118) ^ 0xFF);
                *int v8 = bswap32(v124) >> 16;
                *uint64_t v9 = HIBYTE(v124);
              }
            }
            else
            {
              *int v8 = bswap32(v118) >> 16;
              *uint64_t v9 = HIBYTE(v118);
            }
            goto LABEL_170;
          }
        }
        else
        {
          uint64_t v88 = 0;
          v92.i16[0] = BYTE1(v115);
          v92.i16[1] = v115 >> 8 >> 16;
          v92.i32[1] = v116 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v119 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          int v120 = (unsigned __int16)v92.i16[0] >> 11;
          uint32x4_t v121 = vshlq_u32(v119, (uint32x4_t)xmmword_1850CD9F0);
          int8x16_t v122 = (int8x16_t)vshlq_u32(v119, (uint32x4_t)xmmword_1850CDA00);
          v122.i32[0] = v121.i32[0];
          v122.i32[3] = v121.i32[3];
          int32x4_t v92 = (int32x4_t)vandq_s8(v122, (int8x16_t)xmmword_1850CDA10);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          unsigned int v118 = v92.i32[0] | v120 | v92.i32[1];
          if (v9) {
            goto LABEL_157;
          }
        }
        if (HIBYTE(v118) >= 0xF8u) {
          break;
        }
        if (HIBYTE(v118) >= 8u)
        {
          LOWORD(v123) = __rev16(PDplusDM(v118, bswap32((unsigned __int16)*v8) >> 16, ~v118 >> 24));
          goto LABEL_169;
        }
LABEL_170:
        ++v8;
        v9 += v153;
        --v111;
        char v93 = v152;
        if (!v111) {
          goto LABEL_174;
        }
      }
      unsigned int v123 = bswap32(v118) >> 16;
LABEL_169:
      *int v8 = v123;
      goto LABEL_170;
    }
    if (a5 >= 1)
    {
      unsigned int v97 = v147;
      uint64_t v98 = v146;
      do
      {
        uint64_t v99 = *v97;
        v97 += 2;
        unsigned int v100 = (unsigned int *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99) {
          unsigned int v100 = v89;
        }
        if ((unint64_t)v100 < *(void *)(a1 + 32)) {
          unsigned int v100 = *(unsigned int **)(a1 + 32);
        }
        unsigned int v101 = bswap32(*v100);
        unsigned int v102 = (v101 << v93) | (v101 >> v91);
        unsigned int v103 = v102 | v154;
        if (v88)
        {
          int v104 = *v88;
          if ((unint64_t)(v88 + 1) < v87) {
            ++v88;
          }
          else {
            v88 -= 15;
          }
          if (v6 == 255) {
            unsigned int v105 = DITHERRGBA32(v103, v104);
          }
          else {
            unsigned int v105 = DITHERRGBA32M(v103, v104, v6);
          }
          char v93 = v152;
        }
        else
        {
          uint64_t v88 = 0;
          if (v6 == 255)
          {
            unsigned int v105 = (v102 >> 17) & 0x7C00 | (v102 >> 14) & 0x3E0 | ((unsigned __int16)v102 >> 11) & 0xFFFFFF | ((v103 >> 3) << 27) | (v103 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v102);
            v92.i16[1] = v102 >> 8 >> 16;
            v92.i32[1] = v103 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v106 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            int v107 = (unsigned __int16)v92.i16[0] >> 11;
            uint32x4_t v108 = vshlq_u32(v106, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v109 = (int8x16_t)vshlq_u32(v106, (uint32x4_t)xmmword_1850CDA00);
            v109.i32[0] = v108.i32[0];
            v109.i32[3] = v108.i32[3];
            int32x4_t v92 = (int32x4_t)vandq_s8(v109, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            unsigned int v105 = v92.i32[0] | v107 | v92.i32[1];
          }
        }
        *int v8 = bswap32(v105) >> 16;
        if (v9) {
          *uint64_t v9 = HIBYTE(v105);
        }
        ++v8;
        v9 += v153;
        --v98;
      }
      while (v98);
    }
LABEL_174:
    uint64_t v12 = v137;
    v8 += v138;
    v9 += v140;
    LOBYTE(v13) = v136;
    uint64_t result = v143 + v135;
    a6 = v145 - 1;
    uint64_t v17 = v134;
  }
  while (v145 != 1);
  return result;
}

uint64_t RGB555_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  int v7 = (_WORD *)*((void *)a2 + 2);
  int v8 = (char *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v140 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v140 = 0;
  }
  int v139 = *a2;
  uint64_t v138 = *((void *)a2 + 3) - a5;
  uint64_t v149 = v8 != 0;
  uint64_t v10 = *((void *)a2 + 19);
  uint64_t v9 = *((void *)a2 + 20);
  uint64_t v11 = *((void *)a2 + 11);
  uint64_t v135 = *((void *)a2 + 13);
  uint64_t v12 = *((void *)a2 + 9) + v135 * a4;
  uint64_t v131 = *((void *)a2 + 6);
  uint64_t v142 = *((void *)a2 + 7);
  uint64_t v13 = *(unsigned __int8 **)(a1 + 32);
  int v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t result = *(void *)(a1 + 168);
  uint64_t v132 = a5;
  char v136 = v11;
  uint64_t v137 = v10;
  uint64_t v134 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 176))
  {
    unint64_t v146 = 0;
    uint64_t v16 = 0;
    uint64_t v130 = *((void *)a2 + 15);
    uint64_t v129 = *((void *)a2 + 17);
    uint64_t v128 = ~(-1 << v11);
    uint64_t v126 = -v10;
    char v127 = v11 - 4;
    uint64_t v17 = v14 - 3;
    int32x2_t v18 = vdup_n_s32(v6);
    uint64_t v125 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x3E007000000;
    while ((((v129 - v12) | (v12 - v130)) & 0x8000000000000000) == 0)
    {
      uint64_t v20 = ((v12 & (unint64_t)v128) >> v127) & 0xF;
      char v21 = weights_21383[v20];
      BOOL v22 = (unint64_t)(v20 - 7) >= 9;
      uint64_t v23 = v126;
      if (!v22) {
        uint64_t v23 = v10;
      }
      uint64_t v147 = v23;
      int v24 = v21 & 0xF;
      if (result) {
        goto LABEL_10;
      }
LABEL_13:
      uint64_t v27 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
      int v143 = a6;
      uint64_t v141 = v12;
      if (v139 != 1)
      {
        if (a5 < 1) {
          goto LABEL_112;
        }
        int v55 = (uint64_t *)v125;
        uint64_t v56 = v132;
        while (2)
        {
          uint64_t v57 = *(v55 - 1);
          uint64_t v58 = *v55;
          uint64_t v59 = v27 + v57;
          if ((unint64_t)v17 >= v27 + v57) {
            uint64_t v60 = (unsigned __int8 *)(v27 + v57);
          }
          else {
            uint64_t v60 = v17;
          }
          if (v60 < v13) {
            uint64_t v60 = v13;
          }
          unsigned int v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
          char v62 = v58 & 0xF;
          if ((v58 & 0xF) != 0)
          {
            int v63 = (unsigned __int8 *)(v59 + (v58 >> 4));
            if (v17 < v63) {
              int v63 = v17;
            }
            if (v63 < v13) {
              int v63 = v13;
            }
            int v64 = (*v63 << 24) | (v63[1] << 16) | (v63[2] << 8);
            if (v24)
            {
              char v65 = (unsigned __int8 *)(v59 + v147);
              if (v17 >= v65) {
                unint64_t v66 = v65;
              }
              else {
                unint64_t v66 = v17;
              }
              if (v66 < v13) {
                unint64_t v66 = v13;
              }
              int v67 = (*v66 << 24) | (v66[1] << 16) | (v66[2] << 8);
              uint64_t v68 = &v65[v58 >> 4];
              if (v17 < v68) {
                uint64_t v68 = v17;
              }
              if (v68 < v13) {
                uint64_t v68 = v13;
              }
              unsigned int v69 = BLEND8_21385[v24];
              unsigned int v61 = v61 - ((v69 & v61) >> v24) + ((v69 & v67) >> v24);
              int v64 = v64 - ((v69 & v64) >> v24) + ((((*v68 << 24) | (v68[1] << 16) | (v68[2] << 8)) & v69) >> v24);
            }
            int v74 = BLEND8_21385[*v55 & 0xF];
            unsigned int v72 = v61 - ((v74 & v61) >> v62);
            unsigned int v73 = (v74 & v64) >> v62;
            goto LABEL_89;
          }
          if (v24)
          {
            unsigned int v70 = (unsigned __int8 *)(v59 + v147);
            if ((unint64_t)v17 < v59 + v147) {
              unsigned int v70 = v17;
            }
            if (v70 < v13) {
              unsigned int v70 = v13;
            }
            unsigned int v71 = BLEND8_21385[v24];
            unsigned int v72 = v61 - ((v71 & v61) >> v24);
            unsigned int v73 = (((*v70 << 24) | (v70[1] << 16) | (v70[2] << 8)) & v71) >> v24;
LABEL_89:
            unsigned int v61 = v72 + v73;
          }
          unsigned int v75 = v61 | 0xFF;
          if (v16)
          {
            int v76 = *v16;
            if ((unint64_t)(v16 + 1) < v146) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            if (v6 == 255)
            {
              unsigned int v77 = DITHERRGBA32(v75, v76);
              if (!v8) {
                goto LABEL_106;
              }
            }
            else
            {
              unsigned int v77 = DITHERRGBA32M(v75, v76, v6);
              if (!v8) {
                goto LABEL_106;
              }
            }
LABEL_101:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) >= 8u)
              {
                unsigned int v82 = PDAplusDAM((unsigned __int16)v77, SHIBYTE(v77), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v77) ^ 0xFF);
                *int v7 = bswap32(v82) >> 16;
                *int v8 = HIBYTE(v82);
              }
            }
            else
            {
              *int v7 = bswap32(v77) >> 16;
              *int v8 = HIBYTE(v77);
            }
          }
          else
          {
            if (v6 == 255)
            {
              uint64_t v16 = 0;
              unsigned int v77 = (v61 >> 17) & 0x7C00 | (v61 >> 14) & 0x3E0 | ((unsigned __int16)v61 >> 11) | 0xFF000000;
              if (!v8) {
                goto LABEL_106;
              }
              goto LABEL_101;
            }
            uint64_t v16 = 0;
            v19.i16[0] = BYTE1(v61);
            v19.i16[1] = v61 >> 8 >> 16;
            v19.i32[1] = v61 & 0xFF0000 | 0xFF;
            *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v78 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
            int v79 = (unsigned __int16)v19.i16[0] >> 11;
            uint32x4_t v80 = vshlq_u32(v78, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v81 = (int8x16_t)vshlq_u32(v78, (uint32x4_t)xmmword_1850CDA00);
            v81.i32[0] = v80.i32[0];
            v81.i32[3] = v80.i32[3];
            int32x4_t v19 = (int32x4_t)vandq_s8(v81, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
            unsigned int v77 = v19.i32[0] | v79 | v19.i32[1];
            if (v8) {
              goto LABEL_101;
            }
LABEL_106:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) < 8u) {
                goto LABEL_111;
              }
              LOWORD(v83) = __rev16(PDplusDM(v77, bswap32((unsigned __int16)*v7) >> 16, ~v77 >> 24));
            }
            else
            {
              unsigned int v83 = bswap32(v77) >> 16;
            }
            *int v7 = v83;
          }
LABEL_111:
          v55 += 2;
          ++v7;
          v8 += v149;
          if (!--v56) {
            goto LABEL_112;
          }
          continue;
        }
      }
      if (a5 >= 1)
      {
        uint64_t v28 = (uint64_t *)v125;
        uint64_t v29 = v132;
        while (1)
        {
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30) {
            uint64_t v33 = (unsigned __int8 *)(v27 + v30);
          }
          else {
            uint64_t v33 = v17;
          }
          if (v33 < v13) {
            uint64_t v33 = v13;
          }
          unsigned int v34 = (*v33 << 24) | (v33[1] << 16) | (v33[2] << 8);
          char v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0) {
            break;
          }
          if (v24)
          {
            uint64_t v43 = (unsigned __int8 *)(v32 + v147);
            if ((unint64_t)v17 < v32 + v147) {
              uint64_t v43 = v17;
            }
            if (v43 < v13) {
              uint64_t v43 = v13;
            }
            unsigned int v44 = BLEND8_21385[v24];
            unsigned int v45 = v34 - ((v44 & v34) >> v24);
            unsigned int v46 = (((*v43 << 24) | (v43[1] << 16) | (v43[2] << 8)) & v44) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          unsigned int v48 = v34 | 0xFF;
          if (v16)
          {
            int v49 = *v16;
            if ((unint64_t)(v16 + 1) < v146) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            if (v6 == 255) {
              unsigned int v50 = DITHERRGBA32(v48, v49);
            }
            else {
              unsigned int v50 = DITHERRGBA32M(v48, v49, v6);
            }
          }
          else
          {
            uint64_t v16 = 0;
            if (v6 == 255)
            {
              unsigned int v50 = (v34 >> 17) & 0x7C00 | (v34 >> 14) & 0x3E0 | ((unsigned __int16)v34 >> 11) | 0xFF000000;
            }
            else
            {
              v19.i16[0] = BYTE1(v34);
              v19.i16[1] = v34 >> 8 >> 16;
              v19.i32[1] = v34 & 0xFF0000 | 0xFF;
              *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v51 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
              int v52 = (unsigned __int16)v19.i16[0] >> 11;
              uint32x4_t v53 = vshlq_u32(v51, (uint32x4_t)xmmword_1850CD9F0);
              int8x16_t v54 = (int8x16_t)vshlq_u32(v51, (uint32x4_t)xmmword_1850CDA00);
              v54.i32[0] = v53.i32[0];
              v54.i32[3] = v53.i32[3];
              int32x4_t v19 = (int32x4_t)vandq_s8(v54, (int8x16_t)xmmword_1850CDA10);
              *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
              unsigned int v50 = v19.i32[0] | v52 | v19.i32[1];
            }
          }
          *int v7 = bswap32(v50) >> 16;
          if (v8) {
            *int v8 = HIBYTE(v50);
          }
          v28 += 2;
          ++v7;
          v8 += v149;
          if (!--v29) {
            goto LABEL_112;
          }
        }
        unsigned int v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36) {
          unsigned int v36 = v17;
        }
        if (v36 < v13) {
          unsigned int v36 = v13;
        }
        int v37 = (*v36 << 24) | (v36[1] << 16) | (v36[2] << 8);
        if (v24)
        {
          uint64_t v38 = (unsigned __int8 *)(v32 + v147);
          if (v17 >= v38) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v17;
          }
          if (v39 < v13) {
            unsigned int v39 = v13;
          }
          int v40 = (*v39 << 24) | (v39[1] << 16) | (v39[2] << 8);
          char v41 = &v38[v31 >> 4];
          if (v17 < v41) {
            char v41 = v17;
          }
          if (v41 < v13) {
            char v41 = v13;
          }
          unsigned int v42 = BLEND8_21385[v24];
          unsigned int v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          int v37 = v37 - ((v42 & v37) >> v24) + ((((*v41 << 24) | (v41[1] << 16) | (v41[2] << 8)) & v42) >> v24);
        }
        int v47 = BLEND8_21385[*v28 & 0xF];
        unsigned int v45 = v34 - ((v47 & v34) >> v35);
        unsigned int v46 = (v47 & v37) >> v35;
LABEL_44:
        unsigned int v34 = v45 + v46;
        goto LABEL_45;
      }
LABEL_112:
      uint64_t v10 = v137;
      v7 += v138;
      v8 += v140;
      LOBYTE(v11) = v136;
      uint64_t v12 = v141 + v135;
      a6 = v143 - 1;
      uint64_t result = v134;
      if (v143 == 1) {
        return result;
      }
    }
    int v24 = 0;
    uint64_t v147 = 0;
    if (!result) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v25 = result + 16 * v142;
    unint64_t v146 = v25 + 16;
    uint64_t v16 = (unsigned __int8 *)(v25 + v131);
    uint64_t v26 = (v142 + 1) & 0xF;
    if (v142 + 1 <= 0) {
      uint64_t v26 = -(-(v142 + 1) & 0xF);
    }
    uint64_t v142 = v26;
    goto LABEL_13;
  }
  unint64_t v84 = 0;
  int8x16_t v85 = 0;
  int32x2_t v86 = vdup_n_s32(v6);
  unint64_t v87 = v14 - 3;
  int v145 = (uint64_t *)(v9 + 16 * a3);
  v88.i64[1] = 0x3E007000000;
  do
  {
    if (result)
    {
      uint64_t v89 = result + 16 * v142;
      unint64_t v84 = v89 + 16;
      int8x16_t v85 = (unsigned __int8 *)(v89 + v131);
      uint64_t v90 = (v142 + 1) & 0xF;
      if (v142 + 1 <= 0) {
        uint64_t v90 = -(-(v142 + 1) & 0xF);
      }
      uint64_t v142 = v90;
    }
    uint64_t v91 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
    int v144 = a6;
    if (v139 != 1)
    {
      uint64_t v92 = v12;
      uint32x4_t v108 = v145;
      uint64_t v109 = v132;
      if (a5 < 1) {
        goto LABEL_169;
      }
      while (1)
      {
        uint64_t v110 = *v108;
        v108 += 2;
        uint64_t v111 = (unsigned __int8 *)(v91 + v110);
        if ((unint64_t)v87 < v91 + v110) {
          uint64_t v111 = v87;
        }
        if ((unint64_t)v111 < *(void *)(a1 + 32)) {
          uint64_t v111 = *(unsigned __int8 **)(a1 + 32);
        }
        int v112 = *v111;
        int v113 = v111[1];
        unsigned int v114 = v111[2];
        unsigned int v115 = (v112 << 24) | (v113 << 16) | (v114 << 8);
        unsigned int v116 = v115 | 0xFF;
        if (v85)
        {
          int v117 = *v85;
          if ((unint64_t)(v85 + 1) < v84) {
            ++v85;
          }
          else {
            v85 -= 15;
          }
          if (v6 == 255)
          {
            unsigned int v118 = DITHERRGBA32(v116, v117);
            if (v8) {
              goto LABEL_158;
            }
          }
          else
          {
            unsigned int v118 = DITHERRGBA32M(v116, v117, v6);
            if (v8) {
              goto LABEL_158;
            }
          }
        }
        else if (v6 == 255)
        {
          int8x16_t v85 = 0;
          unsigned int v118 = (4 * v113) & 0x3E0 | (v112 >> 3 << 10) | (v114 >> 3) | 0xFF000000;
          if (v8)
          {
LABEL_158:
            if (HIBYTE(v118) < 0xF8u)
            {
              if (HIBYTE(v118) >= 8u)
              {
                unsigned int v123 = PDAplusDAM((unsigned __int16)v118, SHIBYTE(v118), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v118) ^ 0xFF);
                *int v7 = bswap32(v123) >> 16;
                *int v8 = HIBYTE(v123);
              }
            }
            else
            {
              *int v7 = bswap32(v118) >> 16;
              *int v8 = HIBYTE(v118);
            }
            goto LABEL_168;
          }
        }
        else
        {
          int8x16_t v85 = 0;
          v88.i16[0] = v114;
          v88.i16[1] = v115 >> 8 >> 16;
          v88.i32[1] = (v113 << 16) & 0xFF0000 | (v114 << 8) & 0xFF0000 | 0xFF;
          *(int32x2_t *)v88.i8 = vmul_s32(*(int32x2_t *)v88.i8, v86);
          *(int32x2_t *)v88.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v88.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v88.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v119 = (uint32x4_t)vzip1q_s32(v88, vdupq_lane_s32(*(int32x2_t *)v88.i8, 1));
          int v120 = (unsigned __int16)v88.i16[0] >> 11;
          uint32x4_t v121 = vshlq_u32(v119, (uint32x4_t)xmmword_1850CD9F0);
          int8x16_t v122 = (int8x16_t)vshlq_u32(v119, (uint32x4_t)xmmword_1850CDA00);
          v122.i32[0] = v121.i32[0];
          v122.i32[3] = v121.i32[3];
          int32x4_t v88 = (int32x4_t)vandq_s8(v122, (int8x16_t)xmmword_1850CDA10);
          *(int8x8_t *)v88.i8 = vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL));
          unsigned int v118 = v88.i32[0] | v120 | v88.i32[1];
          if (v8) {
            goto LABEL_158;
          }
        }
        if (HIBYTE(v118) >= 0xF8u) {
          break;
        }
        if (HIBYTE(v118) >= 8u)
        {
          LOWORD(v124) = __rev16(PDplusDM(v118, bswap32((unsigned __int16)*v7) >> 16, ~v118 >> 24));
          goto LABEL_167;
        }
LABEL_168:
        ++v7;
        v8 += v149;
        if (!--v109) {
          goto LABEL_169;
        }
      }
      unsigned int v124 = bswap32(v118) >> 16;
LABEL_167:
      *int v7 = v124;
      goto LABEL_168;
    }
    uint64_t v92 = v12;
    if (a5 >= 1)
    {
      char v93 = v145;
      uint64_t v94 = v132;
      do
      {
        uint64_t v95 = *v93;
        v93 += 2;
        uint64_t v96 = (unsigned __int8 *)(v91 + v95);
        if ((unint64_t)v87 < v91 + v95) {
          uint64_t v96 = v87;
        }
        if ((unint64_t)v96 < *(void *)(a1 + 32)) {
          uint64_t v96 = *(unsigned __int8 **)(a1 + 32);
        }
        int v97 = *v96;
        int v98 = v96[1];
        unsigned int v99 = v96[2];
        unsigned int v100 = (v97 << 24) | (v98 << 16) | (v99 << 8);
        unsigned int v101 = v100 | 0xFF;
        if (v85)
        {
          int v102 = *v85;
          if ((unint64_t)(v85 + 1) < v84) {
            ++v85;
          }
          else {
            v85 -= 15;
          }
          if (v6 == 255) {
            unsigned int v103 = DITHERRGBA32(v101, v102);
          }
          else {
            unsigned int v103 = DITHERRGBA32M(v101, v102, v6);
          }
        }
        else
        {
          int8x16_t v85 = 0;
          if (v6 == 255)
          {
            unsigned int v103 = (4 * v98) & 0x3E0 | (v97 >> 3 << 10) | (v99 >> 3) | 0xFF000000;
          }
          else
          {
            v88.i16[0] = v99;
            v88.i16[1] = v100 >> 8 >> 16;
            v88.i32[1] = (v98 << 16) & 0xFF0000 | (v99 << 8) & 0xFF0000 | 0xFF;
            *(int32x2_t *)v88.i8 = vmul_s32(*(int32x2_t *)v88.i8, v86);
            *(int32x2_t *)v88.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v88.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v88.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v104 = (uint32x4_t)vzip1q_s32(v88, vdupq_lane_s32(*(int32x2_t *)v88.i8, 1));
            int v105 = (unsigned __int16)v88.i16[0] >> 11;
            uint32x4_t v106 = vshlq_u32(v104, (uint32x4_t)xmmword_1850CD9F0);
            int8x16_t v107 = (int8x16_t)vshlq_u32(v104, (uint32x4_t)xmmword_1850CDA00);
            v107.i32[0] = v106.i32[0];
            v107.i32[3] = v106.i32[3];
            int32x4_t v88 = (int32x4_t)vandq_s8(v107, (int8x16_t)xmmword_1850CDA10);
            *(int8x8_t *)v88.i8 = vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL));
            unsigned int v103 = v88.i32[0] | v105 | v88.i32[1];
          }
        }
        *int v7 = bswap32(v103) >> 16;
        if (v8) {
          *int v8 = HIBYTE(v103);
        }
        ++v7;
        v8 += v149;
        --v94;
      }
      while (v94);
    }
LABEL_169:
    uint64_t v10 = v137;
    v7 += v138;
    v8 += v140;
    LOBYTE(v11) = v136;
    uint64_t v12 = v92 + v135;
    a6 = v144 - 1;
    uint64_t result = v134;
  }
  while (v144 != 1);
  return result;
}

uint64_t RGB555_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 8);
  int v7 = (_WORD *)*((void *)a2 + 2);
  int v8 = (char *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v127 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v127 = 0;
  }
  int v126 = *a2;
  uint64_t v125 = *((void *)a2 + 3) - a5;
  uint64_t v136 = v8 != 0;
  uint64_t v10 = *((void *)a2 + 19);
  uint64_t v9 = *((void *)a2 + 20);
  uint64_t v11 = *((void *)a2 + 11);
  uint64_t v122 = *((void *)a2 + 13);
  uint64_t v12 = *((void *)a2 + 9) + v122 * a4;
  uint64_t v118 = *((void *)a2 + 6);
  uint64_t v129 = *((void *)a2 + 7);
  uint64_t v13 = *(unsigned __int8 **)(a1 + 32);
  int v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t result = *(void *)(a1 + 168);
  uint64_t v119 = a5;
  char v123 = v11;
  uint64_t v124 = v10;
  uint64_t v121 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 176))
  {
    unint64_t v133 = 0;
    uint64_t v16 = 0;
    uint64_t v117 = *((void *)a2 + 15);
    uint64_t v116 = *((void *)a2 + 17);
    uint64_t v115 = ~(-1 << v11);
    uint64_t v113 = -v10;
    char v114 = v11 - 4;
    uint64_t v17 = v14 - 4;
    int32x2_t v18 = vdup_n_s32(v6);
    uint64_t v112 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x7000000F8000000;
    while ((((v116 - v12) | (v12 - v117)) & 0x8000000000000000) == 0)
    {
      uint64_t v20 = ((v12 & (unint64_t)v115) >> v114) & 0xF;
      char v21 = weights_21383[v20];
      BOOL v22 = (unint64_t)(v20 - 7) >= 9;
      uint64_t v23 = v113;
      if (!v22) {
        uint64_t v23 = v10;
      }
      uint64_t v134 = v23;
      int v24 = v21 & 0xF;
      if (result) {
        goto LABEL_10;
      }
LABEL_13:
      uint64_t v27 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
      int v130 = a6;
      uint64_t v128 = v12;
      if (v126 != 1)
      {
        if (a5 < 1) {
          goto LABEL_112;
        }
        uint32x4_t v53 = (uint64_t *)v112;
        uint64_t v54 = v119;
        while (2)
        {
          uint64_t v55 = *(v53 - 1);
          uint64_t v56 = *v53;
          uint64_t v57 = v27 + v55;
          if ((unint64_t)v17 >= v27 + v55) {
            uint64_t v58 = (unsigned __int8 *)(v27 + v55);
          }
          else {
            uint64_t v58 = v17;
          }
          if (v58 < v13) {
            uint64_t v58 = v13;
          }
          unsigned int v59 = *v58;
          char v60 = v56 & 0xF;
          if ((v56 & 0xF) != 0)
          {
            unsigned int v61 = (unsigned __int8 *)(v57 + (v56 >> 4));
            if (v17 < v61) {
              unsigned int v61 = v17;
            }
            if (v61 < v13) {
              unsigned int v61 = v13;
            }
            unsigned int v62 = *v61;
            if (v24)
            {
              int v63 = (unsigned __int8 *)(v57 + v134);
              if (v17 >= v63) {
                int v64 = v63;
              }
              else {
                int v64 = v17;
              }
              if (v64 < v13) {
                int v64 = v13;
              }
              unsigned int v65 = *v64;
              unint64_t v66 = &v63[v56 >> 4];
              if (v17 < v66) {
                unint64_t v66 = v17;
              }
              if (v66 < v13) {
                unint64_t v66 = v13;
              }
              int v67 = BLEND8_21385[v24];
              unsigned int v59 = v59 - ((v67 & v59) >> v24) + ((v67 & v65) >> v24);
              unsigned int v62 = v62 - ((v67 & v62) >> v24) + ((v67 & *v66) >> v24);
            }
            int v68 = BLEND8_21385[*v53 & 0xF];
            v59 -= (v68 & v59) >> v60;
            unsigned int v69 = (v68 & v62) >> v60;
            goto LABEL_89;
          }
          if (v24)
          {
            unsigned int v70 = (unsigned __int8 *)(v57 + v134);
            if ((unint64_t)v17 < v57 + v134) {
              unsigned int v70 = v17;
            }
            if (v70 < v13) {
              unsigned int v70 = v13;
            }
            int v71 = BLEND8_21385[v24];
            v59 -= (v71 & v59) >> v24;
            unsigned int v69 = (v71 & *v70) >> v24;
LABEL_89:
            LOBYTE(v59) = v59 + v69;
          }
          if (v16)
          {
            int v72 = *v16;
            if ((unint64_t)(v16 + 1) < v133) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            unsigned int v73 = (16843008 * v59) | 0xFF;
            if (v6 == 255)
            {
              unsigned int v74 = DITHERRGBA32(v73, v72);
              if (v8) {
                goto LABEL_96;
              }
            }
            else
            {
              unsigned int v74 = DITHERRGBA32M(v73, v72, v6);
              if (v8)
              {
LABEL_96:
                if (HIBYTE(v74) < 0xF8u)
                {
                  if (HIBYTE(v74) >= 8u)
                  {
                    unsigned int v78 = PDAplusDAM((unsigned __int16)v74, SHIBYTE(v74), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v74) ^ 0xFF);
                    *int v7 = bswap32(v78) >> 16;
                    *int v8 = HIBYTE(v78);
                  }
                }
                else
                {
                  *int v7 = bswap32(v74) >> 16;
                  *int v8 = HIBYTE(v74);
                }
                goto LABEL_108;
              }
            }
          }
          else if (v6 == 255)
          {
            uint64_t v16 = 0;
            unsigned int v74 = (v59 >> 3) & 0xFFFF801F | (32 * (v59 >> 3)) & 0x83FF | (v59 >> 3 << 10) | 0xFF000000;
            if (v8) {
              goto LABEL_96;
            }
          }
          else
          {
            uint64_t v16 = 0;
            *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v59 << 16), (int8x8_t)(v59 | 0xFF00000000)), v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v75 = (uint32x4_t)vzip1q_s32(v19, v19);
            v76.i64[0] = vshlq_u32(v75, (uint32x4_t)xmmword_1850CDA20).u64[0];
            v76.i64[1] = vshlq_u32(v75, (uint32x4_t)xmmword_1850CDA30).i64[1];
            int8x16_t v77 = vandq_s8(v76, (int8x16_t)xmmword_1850CDA40);
            *(int8x8_t *)v77.i8 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
            unsigned int v74 = v77.i32[0] | v77.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            if (v8) {
              goto LABEL_96;
            }
          }
          if (HIBYTE(v74) < 0xF8u)
          {
            if (HIBYTE(v74) >= 8u) {
              *int v7 = __rev16(PDplusDM(v74, bswap32((unsigned __int16)*v7) >> 16, ~v74 >> 24));
            }
          }
          else
          {
            *int v7 = bswap32(v74) >> 16;
          }
LABEL_108:
          v53 += 2;
          ++v7;
          v8 += v136;
          if (!--v54) {
            goto LABEL_112;
          }
          continue;
        }
      }
      if (a5 >= 1)
      {
        uint64_t v28 = (uint64_t *)v112;
        uint64_t v29 = v119;
        while (1)
        {
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30) {
            uint64_t v33 = (unsigned __int8 *)(v27 + v30);
          }
          else {
            uint64_t v33 = v17;
          }
          if (v33 < v13) {
            uint64_t v33 = v13;
          }
          unsigned int v34 = *v33;
          char v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0) {
            break;
          }
          if (v24)
          {
            unsigned int v45 = (unsigned __int8 *)(v32 + v134);
            if ((unint64_t)v17 < v32 + v134) {
              unsigned int v45 = v17;
            }
            if (v45 < v13) {
              unsigned int v45 = v13;
            }
            int v46 = BLEND8_21385[v24];
            v34 -= (v46 & v34) >> v24;
            unsigned int v44 = (v46 & *v45) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          if (v16)
          {
            int v47 = *v16;
            if ((unint64_t)(v16 + 1) < v133) {
              ++v16;
            }
            else {
              v16 -= 15;
            }
            unsigned int v48 = (16843008 * v34) | 0xFF;
            if (v6 == 255) {
              unsigned int v49 = DITHERRGBA32(v48, v47);
            }
            else {
              unsigned int v49 = DITHERRGBA32M(v48, v47, v6);
            }
          }
          else
          {
            uint64_t v16 = 0;
            if (v6 == 255)
            {
              unsigned int v49 = (v34 >> 3) & 0xFFFF801F | (32 * (v34 >> 3)) & 0x83FF | (v34 >> 3 << 10) | 0xFF000000;
            }
            else
            {
              *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v34 << 16), (int8x8_t)(v34 | 0xFF00000000)), v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              uint32x4_t v50 = (uint32x4_t)vzip1q_s32(v19, v19);
              v51.i64[0] = vshlq_u32(v50, (uint32x4_t)xmmword_1850CDA20).u64[0];
              v51.i64[1] = vshlq_u32(v50, (uint32x4_t)xmmword_1850CDA30).i64[1];
              int8x16_t v52 = vandq_s8(v51, (int8x16_t)xmmword_1850CDA40);
              *(int8x8_t *)v52.i8 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
              unsigned int v49 = v52.i32[0] | v52.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            }
          }
          *int v7 = bswap32(v49) >> 16;
          if (v8) {
            *int v8 = HIBYTE(v49);
          }
          v28 += 2;
          ++v7;
          v8 += v136;
          if (!--v29) {
            goto LABEL_112;
          }
        }
        unsigned int v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36) {
          unsigned int v36 = v17;
        }
        if (v36 < v13) {
          unsigned int v36 = v13;
        }
        unsigned int v37 = *v36;
        if (v24)
        {
          uint64_t v38 = (unsigned __int8 *)(v32 + v134);
          if (v17 >= v38) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v17;
          }
          if (v39 < v13) {
            unsigned int v39 = v13;
          }
          unsigned int v40 = *v39;
          char v41 = &v38[v31 >> 4];
          if (v17 < v41) {
            char v41 = v17;
          }
          if (v41 < v13) {
            char v41 = v13;
          }
          int v42 = BLEND8_21385[v24];
          unsigned int v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          unsigned int v37 = v37 - ((v42 & v37) >> v24) + ((v42 & *v41) >> v24);
        }
        int v43 = BLEND8_21385[*v28 & 0xF];
        v34 -= (v43 & v34) >> v35;
        unsigned int v44 = (v43 & v37) >> v35;
LABEL_44:
        LOBYTE(v34) = v34 + v44;
        goto LABEL_45;
      }
LABEL_112:
      uint64_t v10 = v124;
      v7 += v125;
      v8 += v127;
      LOBYTE(v11) = v123;
      uint64_t v12 = v128 + v122;
      a6 = v130 - 1;
      uint64_t result = v121;
      if (v130 == 1) {
        return result;
      }
    }
    int v24 = 0;
    uint64_t v134 = 0;
    if (!result) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v25 = result + 16 * v129;
    unint64_t v133 = v25 + 16;
    uint64_t v16 = (unsigned __int8 *)(v25 + v118);
    uint64_t v26 = (v129 + 1) & 0xF;
    if (v129 + 1 <= 0) {
      uint64_t v26 = -(-(v129 + 1) & 0xF);
    }
    uint64_t v129 = v26;
    goto LABEL_13;
  }
  unint64_t v79 = 0;
  uint32x4_t v80 = 0;
  int32x2_t v81 = vdup_n_s32(v6);
  unsigned int v82 = v14 - 4;
  uint64_t v132 = (uint64_t *)(v9 + 16 * a3);
  v83.i64[1] = 0x7000000F8000000;
  do
  {
    if (result)
    {
      uint64_t v84 = result + 16 * v129;
      unint64_t v79 = v84 + 16;
      uint32x4_t v80 = (unsigned __int8 *)(v84 + v118);
      uint64_t v85 = (v129 + 1) & 0xF;
      if (v129 + 1 <= 0) {
        uint64_t v85 = -(-(v129 + 1) & 0xF);
      }
      uint64_t v129 = v85;
    }
    uint64_t v86 = *(void *)(a1 + 32) + (v12 >> v11) * v10;
    int v131 = a6;
    if (v126 != 1)
    {
      uint64_t v87 = v12;
      unsigned int v99 = v132;
      uint64_t v100 = v119;
      if (a5 < 1) {
        goto LABEL_170;
      }
      while (1)
      {
        uint64_t v101 = *v99;
        v99 += 2;
        int v102 = (unsigned __int8 *)(v86 + v101);
        if ((unint64_t)v82 < v86 + v101) {
          int v102 = v82;
        }
        if ((unint64_t)v102 < *(void *)(a1 + 32)) {
          int v102 = *(unsigned __int8 **)(a1 + 32);
        }
        unsigned int v103 = *v102;
        if (v80)
        {
          int v104 = *v80;
          if ((unint64_t)(v80 + 1) < v79) {
            ++v80;
          }
          else {
            v80 -= 15;
          }
          unsigned int v105 = (16843008 * v103) | 0xFF;
          if (v6 == 255)
          {
            unsigned int v106 = DITHERRGBA32(v105, v104);
            if (v8) {
              goto LABEL_153;
            }
          }
          else
          {
            unsigned int v106 = DITHERRGBA32M(v105, v104, v6);
            if (v8) {
              goto LABEL_153;
            }
          }
        }
        else if (v6 == 255)
        {
          uint32x4_t v80 = 0;
          unsigned int v106 = (v103 >> 3) & 0xFFFF801F | (32 * (v103 >> 3)) & 0x83FF | (v103 >> 3 << 10) | 0xFF000000;
          if (v8)
          {
LABEL_153:
            if (HIBYTE(v106) < 0xF8u)
            {
              if (HIBYTE(v106) >= 8u)
              {
                unsigned int v111 = PDAplusDAM((unsigned __int16)v106, SHIBYTE(v106), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v106) ^ 0xFF);
                *int v7 = bswap32(v111) >> 16;
                *int v8 = HIBYTE(v111);
              }
            }
            else
            {
              *int v7 = bswap32(v106) >> 16;
              *int v8 = HIBYTE(v106);
            }
            goto LABEL_166;
          }
        }
        else
        {
          uint32x4_t v80 = 0;
          *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v103 << 16), (int8x8_t)(v103 | 0xFF00000000)), v81);
          *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          uint32x4_t v107 = (uint32x4_t)vzip1q_s32(v83, v83);
          v108.i64[0] = vshlq_u32(v107, (uint32x4_t)xmmword_1850CDA20).u64[0];
          v108.i64[1] = vshlq_u32(v107, (uint32x4_t)xmmword_1850CDA30).i64[1];
          int8x16_t v109 = vandq_s8(v108, (int8x16_t)xmmword_1850CDA40);
          *(int8x8_t *)v109.i8 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
          unsigned int v106 = v109.i32[0] | v109.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          if (v8) {
            goto LABEL_153;
          }
        }
        if (HIBYTE(v106) >= 0xF8u) {
          break;
        }
        if (HIBYTE(v106) >= 8u)
        {
          LOWORD(v110) = __rev16(PDplusDM(v106, bswap32((unsigned __int16)*v7) >> 16, ~v106 >> 24));
          goto LABEL_165;
        }
LABEL_166:
        ++v7;
        v8 += v136;
        if (!--v100) {
          goto LABEL_170;
        }
      }
      unsigned int v110 = bswap32(v106) >> 16;
LABEL_165:
      *int v7 = v110;
      goto LABEL_166;
    }
    uint64_t v87 = v12;
    if (a5 >= 1)
    {
      int32x4_t v88 = v132;
      uint64_t v89 = v119;
      do
      {
        uint64_t v90 = *v88;
        v88 += 2;
        uint64_t v91 = (unsigned __int8 *)(v86 + v90);
        if ((unint64_t)v82 < v86 + v90) {
          uint64_t v91 = v82;
        }
        if ((unint64_t)v91 < *(void *)(a1 + 32)) {
          uint64_t v91 = *(unsigned __int8 **)(a1 + 32);
        }
        unsigned int v92 = *v91;
        if (v80)
        {
          int v93 = *v80;
          if ((unint64_t)(v80 + 1) < v79) {
            ++v80;
          }
          else {
            v80 -= 15;
          }
          unsigned int v94 = (16843008 * v92) | 0xFF;
          if (v6 == 255) {
            unsigned int v95 = DITHERRGBA32(v94, v93);
          }
          else {
            unsigned int v95 = DITHERRGBA32M(v94, v93, v6);
          }
        }
        else
        {
          uint32x4_t v80 = 0;
          if (v6 == 255)
          {
            unsigned int v95 = (v92 >> 3) & 0xFFFF801F | (32 * (v92 >> 3)) & 0x83FF | (v92 >> 3 << 10) | 0xFF000000;
          }
          else
          {
            *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v92 << 16), (int8x8_t)(v92 | 0xFF00000000)), v81);
            *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            uint32x4_t v96 = (uint32x4_t)vzip1q_s32(v83, v83);
            v97.i64[0] = vshlq_u32(v96, (uint32x4_t)xmmword_1850CDA20).u64[0];
            v97.i64[1] = vshlq_u32(v96, (uint32x4_t)xmmword_1850CDA30).i64[1];
            int8x16_t v98 = vandq_s8(v97, (int8x16_t)xmmword_1850CDA40);
            *(int8x8_t *)v98.i8 = vorr_s8(*(int8x8_t *)v98.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
            unsigned int v95 = v98.i32[0] | v98.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          }
        }
        *int v7 = bswap32(v95) >> 16;
        if (v8) {
          *int v8 = HIBYTE(v95);
        }
        ++v7;
        v8 += v136;
        --v89;
      }
      while (v89);
    }
LABEL_170:
    uint64_t v10 = v124;
    v7 += v125;
    v8 += v127;
    LOBYTE(v11) = v123;
    uint64_t v12 = v87 + v122;
    a6 = v131 - 1;
    uint64_t result = v121;
  }
  while (v131 != 1);
  return result;
}

uint64_t RGB555_colorlookup(int a1, unsigned __int16 *a2, unsigned __int8 *a3)
{
  if (a1 == 3)
  {
    unint64_t v4 = *(void *)a2;
  }
  else
  {
    if (a3) {
      unint64_t v5 = (unint64_t)*a3 << 24;
    }
    else {
      unint64_t v5 = 4278190080;
    }
    unint64_t v4 = v5 | (bswap32(*a2) >> 16);
  }
  pthread_mutex_lock(&RGB555_cacheColorLock);
  unsigned int v6 = (char *)RGB555_cacheColor;
  if (RGB555_cacheColor && *(void *)(RGB555_cacheColor + 16) == v4)
  {
    int v7 = (char *)RGB555_cacheColor;
  }
  else
  {
    int v7 = 0;
    while (1)
    {
      if (!v6) {
        goto LABEL_15;
      }
      int v8 = v7;
      int v7 = v6;
      if (*((void *)v6 + 2) == v4) {
        break;
      }
      unsigned int v6 = *(char **)v6;
      if (!*(void *)v7)
      {
        if (RGB555_cacheColorCount > 6)
        {
          *(void *)int v8 = 0;
        }
        else
        {
LABEL_15:
          uint64_t v9 = (char *)RGB555_cacheColorBase;
          if (RGB555_cacheColorBase)
          {
            unsigned int v10 = RGB555_cacheColorCount;
          }
          else
          {
            uint64_t v9 = (char *)malloc_type_calloc(1uLL, 0x1CA8uLL, 0x1020040A1C41DBCuLL);
            unsigned int v10 = 0;
            RGB555_cacheColorBase = (uint64_t)v9;
          }
          int v7 = &v9[24 * v10];
          *((void *)v7 + 1) = &v9[1024 * (unint64_t)v10 + 168];
          RGB555_cacheColorCount = v10 + 1;
        }
        *(void *)int v7 = RGB555_cacheColor;
        RGB555_cacheColor = (uint64_t)v7;
        *((void *)v7 + 2) = v4;
        uint64_t v11 = *((void *)v7 + 1);
        if (a1 == 3)
        {
          uint64_t v12 = 0;
          int v14 = 244;
          int v15 = 188;
          do
          {
            unsigned int v16 = pixel_dither_noise[v12 + 1];
            unint64_t v13 = HIDWORD(v4);
            *(_DWORD *)(v11 + 4 * v12) = ((((v15 + WORD1(v4)) >> 3) & 0x3E0 | ((((v15 + v13) >> 8) & 0x1F) << 10) & 0xFC00FFFF | ((((v14 + WORD1(v4)) >> 8) & 0x1F) << 21) | ((((v14 + v4) >> 8) & 0x1F) << 16)) << 8) & 0xFF00FFFF | (v15 + v4) & 0x1F00 | ((((v15 + WORD1(v4)) >> 3) & 0x3E0 | ((((v15 + v13) >> 8) & 0x1F) << 10) & 0x801FFFFF | ((((v14 + WORD1(v4)) >> 8) & 0x1F) << 21) & 0x83FFFFFF | ((((v14 + v13) >> 8) & 0x1F) << 26)) >> 8) & 0x7F007F;
            *(_WORD *)(v11 + 2 * v12 + 512) = ((v15 + HIWORD(v4)) >> 5) & 0xF8 | ((v15 + HIWORD(v4)) >> 10) & 7 | ((v14 + HIWORD(v4)) >> 2) & 0x700 | ((((v14 + HIWORD(v4)) >> 8) & 0x1F) << 11);
            int v14 = v16;
            int v15 = v16 >> 8;
            ++v12;
          }
          while (v12 != 128);
        }
        else
        {
          uint64_t v17 = 0;
          do
          {
            *(_DWORD *)(v11 + 4 * v17) = PDAM((unsigned __int16)v4, SBYTE3(v4), v17);
            ++v17;
          }
          while (v17 != 256);
        }
        goto LABEL_28;
      }
    }
    if (v8)
    {
      *(void *)int v8 = *(void *)v6;
      *(void *)unsigned int v6 = RGB555_cacheColor;
      RGB555_cacheColor = (uint64_t)v6;
    }
  }
LABEL_28:
  pthread_mutex_unlock(&RGB555_cacheColorLock);
  return *((void *)v7 + 1);
}

uint64_t RGB555_mark_constmask(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v224 = *(_DWORD *)(a1 + 4);
  unint64_t v5 = *(int *)(a1 + 28);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t result = RGB555_colorlookup(4, *(unsigned __int16 **)(a1 + 88), *(unsigned __int8 **)(a1 + 96));
  uint64_t v11 = result;
  unsigned int v214 = *(_DWORD *)(result + 1020);
  uint64_t v13 = *(int *)(a1 + 12);
  uint64_t v12 = *(int *)(a1 + 16);
  if (v6)
  {
    uint64_t v14 = *(int *)(a1 + 32);
    int v15 = (char *)(v6 + v13 + (int)v14 * (uint64_t)(int)v12);
    uint64_t v16 = 1;
    if (!v8) {
      return result;
    }
  }
  else
  {
    int v15 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    if (!v8) {
      return result;
    }
  }
  uint64_t v17 = v14 - v224;
  if (v6) {
    v14 -= v224;
  }
  uint64_t v216 = v14;
  unint64_t v18 = v5 >> 1;
  unsigned int v19 = HIBYTE(v214);
  uint64_t v20 = (int16x4_t *)(v7 + 2 * (v13 + v18 * v12));
  uint64_t v21 = *(int *)(a1 + 124);
  unint64_t v22 = v8 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v21;
  uint64_t v23 = v21 - v224;
  unint64_t v219 = v18 - v224;
  switch(a2)
  {
    case 0:
      if (v6)
      {
        while (1)
        {
          int v24 = v224;
          do
          {
            unsigned int v25 = *(unsigned __int8 *)v22;
            if (v25 < 0xF8)
            {
              if (v25 < 8) {
                goto LABEL_15;
              }
              uint64_t result = PDAM(bswap32(v20->u16[0]) >> 16, *v15, ~(_BYTE)v25);
              v20->i16[0] = bswap32(result) >> 16;
              unsigned int v26 = BYTE3(result);
            }
            else
            {
              LOBYTE(v26) = 0;
              v20->i16[0] = 0;
            }
            char *v15 = v26;
LABEL_15:
            ++v22;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v24;
          }
          while (v24);
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          if (!--v4) {
            return result;
          }
        }
      }
LABEL_274:
      int v102 = v224;
      while (1)
      {
        unsigned int v103 = *(unsigned __int8 *)v22;
        if (v103 > 0xF7) {
          break;
        }
        if (v103 >= 8)
        {
          uint64_t result = PDM(bswap32(v20->u16[0]) >> 16, ~(_BYTE)v103);
          __int16 v104 = __rev16(result);
          goto LABEL_279;
        }
LABEL_280:
        ++v22;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
        if (!--v102)
        {
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          if (!--v4) {
            return result;
          }
          goto LABEL_274;
        }
      }
      __int16 v104 = 0;
LABEL_279:
      v20->i16[0] = v104;
      goto LABEL_280;
    case 1:
      unsigned int v105 = v22 & 3;
      if (v6)
      {
        int v106 = v105 + v224;
        if ((v22 & 3) != 0) {
          char v107 = v22 & 0xFC;
        }
        else {
          char v107 = v22;
        }
        if ((v22 & 3) != 0) {
          uint64_t result = (-1 << (8 * v105));
        }
        else {
          uint64_t result = 0xFFFFFFFFLL;
        }
        if ((v22 & 3) != 0) {
          int8x16_t v108 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else {
          int8x16_t v108 = (unsigned int *)v22;
        }
        if ((v22 & 3) != 0) {
          int8x16_t v109 = &v15[-(v22 & 3)];
        }
        else {
          int8x16_t v109 = v15;
        }
        if ((v22 & 3) != 0) {
          uint64_t v20 = (int16x4_t *)((char *)v20 - 2 * (v22 & 3));
        }
        else {
          int v106 = v224;
        }
        if ((((_BYTE)v106 + v107) & 3) != 0)
        {
          int v110 = 4 - (((_BYTE)v106 + v107) & 3);
          v105 += v110;
          unsigned int v111 = 0xFFFFFFFF >> (8 * v110);
          if (v106 >= 4) {
            unsigned int v112 = 0xFFFFFFFF >> (8 * v110);
          }
          else {
            unsigned int v112 = 0;
          }
          unsigned int v225 = v112;
          if (v106 >= 4) {
            unsigned int v111 = -1;
          }
          uint64_t result = v111 & result;
          int v217 = result;
        }
        else
        {
          int v217 = result;
          unsigned int v225 = 0;
        }
        uint64_t v211 = v23 - v105;
        unint64_t v220 = v219 - v105;
        int v208 = v106 >> 2;
        unsigned int v165 = bswap32(v214) >> 16;
        uint64_t v215 = v17 - v105;
LABEL_426:
        unsigned int v166 = *v108 & v217;
        int v167 = v208;
        unsigned int v168 = v225;
        if (!v166) {
          goto LABEL_448;
        }
LABEL_427:
        if (v166 == -1)
        {
          v20->i16[0] = v165;
          *int8x16_t v109 = v19;
          v20->i16[1] = v165;
          v109[1] = v19;
          v20->i16[2] = v165;
          v109[2] = v19;
LABEL_445:
          v20->i16[3] = v165;
          v109[3] = v19;
          goto LABEL_448;
        }
        while (1)
        {
          if (v166 < 0xF8u)
          {
            if (v166 < 8u) {
              goto LABEL_434;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v166), HIBYTE(*(_DWORD *)(v11 + 4 * v166)), bswap32(v20->u16[0]) >> 16, *v109, ~(_BYTE)v166);
            v20->i16[0] = bswap32(result) >> 16;
            unsigned int v169 = BYTE3(result);
          }
          else
          {
            v20->i16[0] = v165;
            LOBYTE(v169) = v19;
          }
          *int8x16_t v109 = v169;
LABEL_434:
          if (BYTE1(v166) < 0xF8u)
          {
            if (BYTE1(v166) < 8u) {
              goto LABEL_439;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v166)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v166))), bswap32(v20->u16[1]) >> 16, v109[1], ~(v166 >> 8));
            v20->i16[1] = bswap32(result) >> 16;
            unsigned int v170 = BYTE3(result);
          }
          else
          {
            v20->i16[1] = v165;
            LOBYTE(v170) = v19;
          }
          v109[1] = v170;
LABEL_439:
          if (BYTE2(v166) < 0xF8u)
          {
            if (BYTE2(v166) < 8u) {
              goto LABEL_444;
            }
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v166)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v166))), bswap32(v20->u16[2]) >> 16, v109[2], ~HIWORD(v166));
            v20->i16[2] = bswap32(result) >> 16;
            unsigned int v171 = BYTE3(result);
          }
          else
          {
            v20->i16[2] = v165;
            LOBYTE(v171) = v19;
          }
          v109[2] = v171;
LABEL_444:
          if (v166 >> 27 == 31) {
            goto LABEL_445;
          }
          if (v166 >> 27)
          {
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v166)), HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v166))), bswap32(v20->u16[3]) >> 16, v109[3], ~v166 >> 24);
            v20->i16[3] = bswap32(result) >> 16;
            v109[3] = BYTE3(result);
          }
LABEL_448:
          while (1)
          {
            int v172 = v167;
            ++v20;
            v109 += 4;
            --v167;
            ++v108;
            if (v172 < 2) {
              break;
            }
            unsigned int v166 = *v108;
            if (*v108) {
              goto LABEL_427;
            }
          }
          if (!v168)
          {
            int8x16_t v108 = (unsigned int *)((char *)v108 + v211);
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v220);
            v109 += v215;
            if (!--v4) {
              return result;
            }
            goto LABEL_426;
          }
          unsigned int v168 = 0;
          unsigned int v166 = *v108 & v225;
        }
      }
      int v145 = v105 + v224;
      if ((v22 & 3) != 0) {
        char v146 = v22 & 0xFC;
      }
      else {
        char v146 = v22;
      }
      if ((v22 & 3) != 0) {
        int v147 = -1 << (8 * v105);
      }
      else {
        int v147 = -1;
      }
      if ((v22 & 3) != 0) {
        unint64_t v148 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else {
        unint64_t v148 = (unsigned int *)v22;
      }
      if ((v22 & 3) != 0) {
        uint64_t v149 = (int16x4_t *)((char *)v20 - 2 * (v22 & 3));
      }
      else {
        uint64_t v149 = v20;
      }
      if ((v22 & 3) == 0) {
        int v145 = v224;
      }
      if ((((_BYTE)v145 + v146) & 3) != 0)
      {
        int v150 = 4 - (((_BYTE)v145 + v146) & 3);
        v105 += v150;
        unsigned int v151 = 0xFFFFFFFF >> (8 * v150);
        if (v145 >= 4) {
          unsigned int v152 = 0xFFFFFFFF >> (8 * v150);
        }
        else {
          unsigned int v152 = 0;
        }
        if (v145 >= 4) {
          unsigned int v151 = -1;
        }
        int v227 = v151 & v147;
      }
      else
      {
        int v227 = v147;
        unsigned int v152 = 0;
      }
      uint64_t v218 = v23 - v105;
      unint64_t v222 = v219 - v105;
      int v212 = v145 >> 2;
      unsigned int v189 = bswap32(v214) >> 16;
      int16x4_t v190 = vdup_n_s16(v189);
      do
      {
        unsigned int v191 = *v148 & v227;
        int v192 = v212;
        unsigned int v193 = v152;
        if (!v191) {
          goto LABEL_497;
        }
LABEL_479:
        if (v191 == -1)
        {
          *uint64_t v149 = v190;
          goto LABEL_497;
        }
        while (1)
        {
          __int16 v194 = v189;
          if (v191 <= 0xF7u)
          {
            if (v191 < 8u) {
              goto LABEL_485;
            }
            uint64_t result = PDplusDM(*(_WORD *)(v11 + 4 * v191), bswap32(v149->u16[0]) >> 16, ~(_BYTE)v191);
            __int16 v194 = __rev16(result);
          }
          v149->i16[0] = v194;
LABEL_485:
          unsigned __int16 v195 = v189;
          if (BYTE1(v191) <= 0xF7u)
          {
            if (BYTE1(v191) < 8u) {
              goto LABEL_489;
            }
            uint64_t result = PDplusDM(*(_WORD *)(v11 + 4 * BYTE1(v191)), bswap32(v149->u16[1]) >> 16, ~(v191 >> 8));
            unsigned __int16 v195 = __rev16(result);
          }
          v149->i16[1] = v195;
LABEL_489:
          unsigned __int16 v196 = v189;
          if (BYTE2(v191) <= 0xF7u)
          {
            if (BYTE2(v191) < 8u) {
              goto LABEL_493;
            }
            uint64_t result = PDplusDM(*(_WORD *)(v11 + 4 * BYTE2(v191)), bswap32(v149->u16[2]) >> 16, ~HIWORD(v191));
            unsigned __int16 v196 = __rev16(result);
          }
          v149->i16[2] = v196;
LABEL_493:
          if (v191 >> 27 == 31)
          {
            v149->i16[3] = v189;
          }
          else if (v191 >> 27)
          {
            uint64_t result = PDplusDM(*(_WORD *)(v11 + 4 * HIBYTE(v191)), bswap32(v149->u16[3]) >> 16, ~v191 >> 24);
            v149->i16[3] = __rev16(result);
          }
LABEL_497:
          while (1)
          {
            int v197 = v192;
            ++v149;
            --v192;
            ++v148;
            if (v197 < 2) {
              break;
            }
            unsigned int v191 = *v148;
            if (*v148) {
              goto LABEL_479;
            }
          }
          if (!v193) {
            break;
          }
          unsigned int v193 = 0;
          unsigned int v191 = *v148 & v152;
        }
        unint64_t v148 = (unsigned int *)((char *)v148 + v218);
        uint64_t v149 = (int16x4_t *)((char *)v149 + 2 * v222);
        --v4;
      }
      while (v4);
      return result;
    case 2:
      unsigned int v113 = v22 & 3;
      if (v6)
      {
        int v114 = v113 + v224;
        uint64_t v115 = (unsigned __int16 *)v20 - (v22 & 3);
        uint64_t v116 = &v15[-(v22 & 3)];
        if ((v22 & 3) != 0) {
          char v117 = v22 & 0xFC;
        }
        else {
          char v117 = v22;
        }
        if ((v22 & 3) != 0) {
          uint64_t result = (-1 << (8 * v113));
        }
        else {
          uint64_t result = 0xFFFFFFFFLL;
        }
        if ((v22 & 3) != 0)
        {
          v22 &= 0xFFFFFFFFFFFFFFFCLL;
          int v15 = v116;
          uint64_t v20 = (int16x4_t *)v115;
        }
        else
        {
          int v114 = v224;
        }
        if ((((_BYTE)v114 + v117) & 3) != 0)
        {
          int v118 = 4 - (((_BYTE)v114 + v117) & 3);
          v113 += v118;
          unsigned int v119 = 0xFFFFFFFF >> (8 * v118);
          if (v114 >= 4) {
            unsigned int v120 = 0xFFFFFFFF >> (8 * v118);
          }
          else {
            unsigned int v120 = 0;
          }
          unsigned int v226 = v120;
          if (v114 >= 4) {
            unsigned int v119 = -1;
          }
          uint64_t result = v119 & result;
          int v210 = result;
        }
        else
        {
          int v210 = result;
          unsigned int v226 = 0;
        }
        uint64_t v209 = v23 - v113;
        unint64_t v221 = v219 - v113;
        int v207 = v114 >> 2;
        uint64_t v206 = v17 - v113;
        unsigned int v173 = v226;
        while (1)
        {
          unsigned int v174 = *(_DWORD *)v22 & v210;
          int v175 = v207;
          unsigned int v176 = v173;
          if (!v174) {
            goto LABEL_469;
          }
LABEL_458:
          if (v174 == -1) {
            break;
          }
          while (1)
          {
            if ((v174 & 0xF8) != 0)
            {
              int v185 = HIBYTE(*(_DWORD *)(v11 + 4 * v174));
              uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v174), v185, bswap32(v20->u16[0]) >> 16, *v15, v185 ^ 0xFFu);
              v20->i16[0] = bswap32(result) >> 16;
              char *v15 = BYTE3(result);
            }
            if ((v174 & 0xF800) != 0)
            {
              int v186 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v174)));
              uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v174)), v186, bswap32(v20->u16[1]) >> 16, v15[1], v186 ^ 0xFFu);
              v20->i16[1] = bswap32(result) >> 16;
              v15[1] = BYTE3(result);
            }
            if ((v174 & 0xF80000) != 0)
            {
              int v187 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v174)));
              uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v174)), v187, bswap32(v20->u16[2]) >> 16, v15[2], v187 ^ 0xFFu);
              v20->i16[2] = bswap32(result) >> 16;
              v15[2] = BYTE3(result);
            }
            if (v174 >> 27)
            {
              int v183 = HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v174)));
              unsigned int v180 = bswap32(v20->u16[3]) >> 16;
              char v181 = v15[3];
              int v182 = (unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v174));
              unsigned int v184 = v183 ^ 0xFF;
              goto LABEL_468;
            }
LABEL_469:
            while (1)
            {
              int v188 = v175;
              ++v20;
              v15 += 4;
              --v175;
              v22 += 4;
              if (v188 < 2) {
                break;
              }
              unsigned int v174 = *(_DWORD *)v22;
              if (*(_DWORD *)v22) {
                goto LABEL_458;
              }
            }
            if (!v176) {
              break;
            }
            unsigned int v176 = 0;
            unsigned int v174 = *(_DWORD *)v22 & v173;
          }
          v22 += v209;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v221);
          v15 += v206;
          if (!--v4) {
            return result;
          }
        }
        unsigned int v177 = PDAplusDAM((unsigned __int16)v214, SHIBYTE(v214), bswap32(v20->u16[0]) >> 16, *v15, ~HIBYTE(v214));
        v20->i16[0] = bswap32(v177) >> 16;
        char *v15 = HIBYTE(v177);
        unsigned int v178 = PDAplusDAM((unsigned __int16)v214, SHIBYTE(v214), bswap32(v20->u16[1]) >> 16, v15[1], ~HIBYTE(v214));
        v20->i16[1] = bswap32(v178) >> 16;
        v15[1] = HIBYTE(v178);
        unsigned int v179 = PDAplusDAM((unsigned __int16)v214, SHIBYTE(v214), bswap32(v20->u16[2]) >> 16, v15[2], ~HIBYTE(v214));
        v20->i16[2] = bswap32(v179) >> 16;
        v15[2] = HIBYTE(v179);
        unsigned int v180 = bswap32(v20->u16[3]) >> 16;
        char v181 = v15[3];
        int v182 = (unsigned __int16)v214;
        unsigned int v173 = v226;
        LOBYTE(v183) = HIBYTE(v214);
        unsigned int v184 = ~HIBYTE(v214);
LABEL_468:
        uint64_t result = PDAplusDAM(v182, v183, v180, v181, v184);
        v20->i16[3] = bswap32(result) >> 16;
        v15[3] = BYTE3(result);
        goto LABEL_469;
      }
      int v153 = v113 + v224;
      int v154 = (unsigned __int16 *)v20 - (v22 & 3);
      if ((v22 & 3) != 0) {
        char v155 = v22 & 0xFC;
      }
      else {
        char v155 = v22;
      }
      if ((v22 & 3) != 0) {
        int v156 = -1 << (8 * v113);
      }
      else {
        int v156 = -1;
      }
      if ((v22 & 3) != 0)
      {
        v22 &= 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v20 = (int16x4_t *)v154;
      }
      else
      {
        int v153 = v224;
      }
      if ((((_BYTE)v153 + v155) & 3) != 0)
      {
        int v157 = 4 - (((_BYTE)v153 + v155) & 3);
        v113 += v157;
        unsigned int v158 = 0xFFFFFFFF >> (8 * v157);
        if (v153 >= 4) {
          unsigned int v159 = -1;
        }
        else {
          unsigned int v159 = 0xFFFFFFFF >> (8 * v157);
        }
        int v228 = v159 & v156;
        if (v153 >= 4) {
          unsigned int v160 = v158;
        }
        else {
          unsigned int v160 = 0;
        }
      }
      else
      {
        int v228 = v156;
        unsigned int v160 = 0;
      }
      uint64_t v213 = v23 - v113;
      int v198 = v153 >> 2;
      unint64_t v223 = v219 - v113;
LABEL_506:
      unsigned int v199 = *(_DWORD *)v22 & v228;
      unsigned int v200 = v160;
      int v201 = v198;
      if (!v199) {
        goto LABEL_518;
      }
LABEL_507:
      if (v199 == -1)
      {
        v20->i16[0] = __rev16(PDplusDM(v214, bswap32(v20->u16[0]) >> 16, ~HIBYTE(v214)));
        v20->i16[1] = __rev16(PDplusDM(v214, bswap32(v20->u16[1]) >> 16, ~HIBYTE(v214)));
        v20->i16[2] = __rev16(PDplusDM(v214, bswap32(v20->u16[2]) >> 16, ~HIBYTE(v214)));
        unsigned int v202 = bswap32(v20->u16[3]) >> 16;
        __int16 v203 = v214;
        unsigned int v204 = ~HIBYTE(v214);
      }
      else
      {
        while (1)
        {
          if ((v199 & 0xF8) != 0)
          {
            uint64_t result = PDplusDM(*(_DWORD *)(v11 + 4 * v199), bswap32(v20->u16[0]) >> 16, ~*(_DWORD *)(v11 + 4 * v199) >> 24);
            v20->i16[0] = __rev16(result);
          }
          if ((v199 & 0xF800) != 0)
          {
            uint64_t result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE1(v199)), bswap32(v20->u16[1]) >> 16, ~*(_DWORD *)(v11 + 4 * BYTE1(v199)) >> 24);
            v20->i16[1] = __rev16(result);
          }
          if ((v199 & 0xF80000) != 0)
          {
            uint64_t result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE2(v199)), bswap32(v20->u16[2]) >> 16, ~*(_DWORD *)(v11 + 4 * BYTE2(v199)) >> 24);
            v20->i16[2] = __rev16(result);
          }
          if (v199 >> 27) {
            break;
          }
LABEL_518:
          while (1)
          {
            int v205 = v201;
            ++v20;
            --v201;
            v22 += 4;
            if (v205 < 2) {
              break;
            }
            unsigned int v199 = *(_DWORD *)v22;
            if (*(_DWORD *)v22) {
              goto LABEL_507;
            }
          }
          if (!v200)
          {
            v22 += v213;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v223);
            if (!--v4) {
              return result;
            }
            goto LABEL_506;
          }
          unsigned int v200 = 0;
          unsigned int v199 = *(_DWORD *)v22 & v160;
        }
        unsigned int v202 = bswap32(v20->u16[3]) >> 16;
        __int16 v203 = *(_DWORD *)(v11 + 4 * HIBYTE(v199));
        unsigned int v204 = ~*(_DWORD *)(v11 + 4 * HIBYTE(v199)) >> 24;
      }
      uint64_t result = PDplusDM(v203, v202, v204);
      v20->i16[3] = __rev16(result);
      goto LABEL_518;
    case 3:
      while (1)
      {
        int v27 = v224;
        do
        {
          unsigned int v28 = *(unsigned __int8 *)v22;
          if (v28 < 0xF8)
          {
            if (v28 < 8) {
              goto LABEL_24;
            }
            int v29 = *v15;
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * ((v29 * v28 + ((v29 * v28) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * ((v29 * v28 + ((v29 * v28) >> 8) + 1) >> 8))), bswap32(v20->u16[0]) >> 16, v29, v28 ^ 0xFF);
          }
          else
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * *v15);
          }
          v20->i16[0] = bswap32(result) >> 16;
          char *v15 = BYTE3(result);
LABEL_24:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v27;
        }
        while (v27);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 4:
      while (1)
      {
        int v30 = v224;
        do
        {
          unsigned int v31 = *(unsigned __int8 *)v22;
          if (v31 < 0xF8)
          {
            if (v31 < 8) {
              goto LABEL_33;
            }
            int v32 = *v15;
            uint64_t result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11+ 4 * (((v32 ^ 0xFF) * v31 + (((v32 ^ 0xFF) * v31) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * (((v32 ^ 0xFF) * v31 + (((v32 ^ 0xFF) * v31) >> 8) + 1) >> 8))), bswap32(v20->u16[0]) >> 16, v32, v31 ^ 0xFF);
          }
          else
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * ~*v15);
          }
          v20->i16[0] = bswap32(result) >> 16;
          char *v15 = BYTE3(result);
LABEL_33:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v30;
        }
        while (v30);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 5:
      do
      {
        int v33 = v224;
        do
        {
          unint64_t v34 = *(unsigned __int8 *)v22;
          if (v34 >= 8)
          {
            uint64_t result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v34), HIBYTE(*(_DWORD *)(v11 + 4 * v34)), *v15, bswap32(v20->u16[0]) >> 16, *v15, HIBYTE(*(_DWORD *)(v11 + 4 * v34)) ^ 0xFFu);
            v20->i16[0] = bswap32(result) >> 16;
            char *v15 = BYTE3(result);
          }
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v33;
        }
        while (v33);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        --v4;
      }
      while (v4);
      return result;
    case 6:
      while (1)
      {
        int v35 = v224;
        do
        {
          unint64_t v36 = *(unsigned __int8 *)v22;
          if (v36 < 8) {
            goto LABEL_49;
          }
          unsigned int v37 = *v15;
          if (v37 > 7)
          {
            if (v37 > 0xF7) {
              goto LABEL_49;
            }
            uint64_t result = PDAplusDAM(bswap32(v20->u16[0]) >> 16, v37, (unsigned __int16)*(_DWORD *)(v11 + 4 * v36), HIBYTE(*(_DWORD *)(v11 + 4 * v36)), ~(_BYTE)v37);
          }
          else
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v36);
          }
          v20->i16[0] = bswap32(result) >> 16;
          char *v15 = BYTE3(result);
LABEL_49:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v35;
        }
        while (v35);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 7:
      if (v6)
      {
        while (1)
        {
          int v121 = v224;
          do
          {
            unsigned int v122 = *(unsigned __int8 *)v22;
            if (v122 < 0xF8)
            {
              if (v122 < 8) {
                goto LABEL_330;
              }
              unsigned int v123 = bswap32(v20->u16[0]) >> 16;
              char v124 = *v15;
              char v125 = ~(_BYTE)v122 + ((unsigned __int16)(v19 * v122 + ((v19 * v122) >> 8) + 1) >> 8);
            }
            else
            {
              unsigned int v123 = bswap32(v20->u16[0]) >> 16;
              char v124 = *v15;
              char v125 = HIBYTE(v214);
            }
            uint64_t result = PDAM(v123, v124, v125);
            v20->i16[0] = bswap32(result) >> 16;
            char *v15 = BYTE3(result);
LABEL_330:
            ++v22;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v121;
          }
          while (v121);
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          if (!--v4) {
            return result;
          }
        }
      }
LABEL_333:
      int v126 = v224;
      while (1)
      {
        unsigned int v127 = *(unsigned __int8 *)v22;
        if (v127 >= 0xF8) {
          break;
        }
        if (v127 >= 8)
        {
          unsigned int v128 = bswap32(v20->u16[0]) >> 16;
          char v129 = ~(_BYTE)v127 + ((unsigned __int16)(v19 * v127 + ((v19 * v127) >> 8) + 1) >> 8);
          goto LABEL_338;
        }
LABEL_339:
        ++v22;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
        if (!--v126)
        {
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          if (!--v4) {
            return result;
          }
          goto LABEL_333;
        }
      }
      unsigned int v128 = bswap32(v20->u16[0]) >> 16;
      char v129 = HIBYTE(v214);
LABEL_338:
      uint64_t result = PDM(v128, v129);
      v20->i16[0] = __rev16(result);
      goto LABEL_339;
    case 8:
      if (v6)
      {
        while (1)
        {
          int v130 = v224;
          do
          {
            unsigned int v131 = *(unsigned __int8 *)v22;
            if (v131 < 0xF8)
            {
              if (v131 < 8) {
                goto LABEL_349;
              }
              unsigned int v132 = bswap32(v20->u16[0]) >> 16;
              char v133 = *v15;
              char v134 = ~((v19 * v131 + ((v19 * v131) >> 8) + 1) >> 8);
            }
            else
            {
              unsigned int v132 = bswap32(v20->u16[0]) >> 16;
              char v133 = *v15;
              char v134 = ~HIBYTE(v214);
            }
            uint64_t result = PDAM(v132, v133, v134);
            v20->i16[0] = bswap32(result) >> 16;
            char *v15 = BYTE3(result);
LABEL_349:
            ++v22;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v130;
          }
          while (v130);
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          if (!--v4) {
            return result;
          }
        }
      }
LABEL_352:
      int v135 = v224;
      while (1)
      {
        unsigned int v136 = *(unsigned __int8 *)v22;
        if (v136 >= 0xF8) {
          break;
        }
        if (v136 >= 8)
        {
          unsigned int v137 = bswap32(v20->u16[0]) >> 16;
          char v138 = ~((v19 * v136 + ((v19 * v136) >> 8) + 1) >> 8);
          goto LABEL_357;
        }
LABEL_358:
        ++v22;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
        if (!--v135)
        {
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          if (!--v4) {
            return result;
          }
          goto LABEL_352;
        }
      }
      unsigned int v137 = bswap32(v20->u16[0]) >> 16;
      char v138 = ~HIBYTE(v214);
LABEL_357:
      uint64_t result = PDM(v137, v138);
      v20->i16[0] = __rev16(result);
      goto LABEL_358;
    case 9:
      do
      {
        int v38 = v224;
        do
        {
          unint64_t v39 = *(unsigned __int8 *)v22;
          if (v39 >= 8)
          {
            uint64_t result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v39), HIBYTE(*(_DWORD *)(v11 + 4 * v39)), *v15 ^ 0xFFu, bswap32(v20->u16[0]) >> 16, *v15, (~(_BYTE)v39 + HIBYTE(*(_DWORD *)(v11 + 4 * v39))));
            v20->i16[0] = bswap32(result) >> 16;
            char *v15 = BYTE3(result);
          }
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v38;
        }
        while (v38);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        --v4;
      }
      while (v4);
      return result;
    case 10:
      do
      {
        int v40 = v224;
        do
        {
          unint64_t v41 = *(unsigned __int8 *)v22;
          if (v41 >= 8)
          {
            uint64_t result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v41), HIBYTE(*(_DWORD *)(v11 + 4 * v41)), *v15 ^ 0xFFu, bswap32(v20->u16[0]) >> 16, *v15, HIBYTE(*(_DWORD *)(v11 + 4 * v41)) ^ 0xFFu);
            v20->i16[0] = bswap32(result) >> 16;
            char *v15 = BYTE3(result);
          }
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v40;
        }
        while (v40);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        --v4;
      }
      while (v4);
      return result;
    case 11:
      if (v6)
      {
        do
        {
          int v139 = v224;
          do
          {
            unint64_t v140 = *(unsigned __int8 *)v22;
            if (v140 >= 8)
            {
              uint64_t result = PDAplusdDA(bswap32(v20->u16[0]) >> 16, *v15, *(_DWORD *)(v11 + 4 * v140), HIBYTE(*(_DWORD *)(v11 + 4 * v140)));
              v20->i16[0] = bswap32(result) >> 16;
              char *v15 = BYTE3(result);
            }
            ++v22;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v139;
          }
          while (v139);
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          --v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v141 = v224;
          do
          {
            unint64_t v142 = *(unsigned __int8 *)v22;
            if (v142 >= 8)
            {
              uint64_t result = PDplusdDA(bswap32(v20->u16[0]) >> 16, *(_DWORD *)(v11 + 4 * v142), HIBYTE(*(_DWORD *)(v11 + 4 * v142)));
              v20->i16[0] = __rev16(result);
            }
            ++v22;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
            --v141;
          }
          while (v141);
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          --v4;
        }
        while (v4);
      }
      return result;
    case 12:
      if (v6)
      {
        do
        {
          int v143 = v224;
          do
          {
            unint64_t v144 = *(unsigned __int8 *)v22;
            if (v144 >= 8)
            {
              uint64_t result = PDApluslDA(bswap32(v20->u16[0]) >> 16, *v15, (unsigned __int16)*(_DWORD *)(v11 + 4 * v144), HIBYTE(*(_DWORD *)(v11 + 4 * v144)));
              v20->i16[0] = bswap32(result) >> 16;
              char *v15 = BYTE3(result);
            }
            ++v22;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v143;
          }
          while (v143);
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          --v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v161 = v224;
          do
          {
            unint64_t v162 = *(unsigned __int8 *)v22;
            if (v162 >= 8)
            {
              unsigned int v163 = bswap32(v20->u16[0]);
              unsigned int v164 = (((HIWORD(v163) << 15) | HIWORD(v163)) & 0x1F07C1F)
                   + (*(_DWORD *)(result + 4 * v162) & 0x7C1F | (((*(_DWORD *)(result + 4 * v162) >> 5) & 0x1F) << 20));
              v20->i16[0] = __rev16((((30 * ((v164 >> 5) & 0x100401)) | (15 * ((v164 >> 5) & 0x100401)) | v164) >> 15) & 0x3E0 | ((30 * ((v164 >> 5) & 0x100401)) | (15 * ((v164 >> 5) & 0x100401)) | v164) & 0x7C1F);
            }
            ++v22;
            uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
            --v161;
          }
          while (v161);
          v22 += v23;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          --v4;
        }
        while (v4);
      }
      return result;
    case 13:
      while (1)
      {
        int v42 = v224;
        do
        {
          unint64_t v43 = *(unsigned __int8 *)v22;
          if (v43 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v43);
            unsigned int v44 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v45 = *v15;
                if (v45 < 8) {
                  goto LABEL_73;
                }
              }
              else
              {
                unsigned int v45 = 255;
              }
              uint64_t result = PDAmultiplyPDA(bswap32(v20->u16[0]) >> 16, v45, (unsigned __int16)*(_DWORD *)(v11 + 4 * v43), v44, v10);
              if (v6)
              {
                unsigned int v44 = BYTE3(result);
LABEL_73:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v44;
                goto LABEL_75;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_75:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v42;
        }
        while (v42);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 14:
      while (1)
      {
        int v46 = v224;
        do
        {
          unint64_t v47 = *(unsigned __int8 *)v22;
          if (v47 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v47);
            unsigned int v48 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v49 = *v15;
                if (v49 < 8) {
                  goto LABEL_87;
                }
              }
              else
              {
                unsigned int v49 = 255;
              }
              uint64_t result = PDAscreenPDA(bswap32(v20->u16[0]) >> 16, v49, (unsigned __int16)*(_DWORD *)(v11 + 4 * v47), v48);
              if (v6)
              {
                unsigned int v48 = BYTE3(result);
LABEL_87:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v48;
                goto LABEL_89;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_89:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v46;
        }
        while (v46);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 15:
      while (1)
      {
        int v50 = v224;
        do
        {
          unint64_t v51 = *(unsigned __int8 *)v22;
          if (v51 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v51);
            unsigned int v52 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v53 = *v15;
                if (v53 < 8) {
                  goto LABEL_101;
                }
              }
              else
              {
                unsigned int v53 = 255;
              }
              uint64_t result = PDAoverlayPDA(bswap32(v20->u16[0]) >> 16, v53, (unsigned __int16)*(_DWORD *)(v11 + 4 * v51), v52);
              if (v6)
              {
                unsigned int v52 = BYTE3(result);
LABEL_101:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v52;
                goto LABEL_103;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_103:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v50;
        }
        while (v50);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 16:
      while (1)
      {
        int v54 = v224;
        do
        {
          unint64_t v55 = *(unsigned __int8 *)v22;
          if (v55 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v55);
            unsigned int v56 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v57 = *v15;
                if (v57 < 8) {
                  goto LABEL_115;
                }
              }
              else
              {
                unsigned int v57 = 255;
              }
              uint64_t result = PDAdarkenPDA(bswap32(v20->u16[0]) >> 16, v57, (unsigned __int16)*(_DWORD *)(v11 + 4 * v55), v56);
              if (v6)
              {
                unsigned int v56 = BYTE3(result);
LABEL_115:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v56;
                goto LABEL_117;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_117:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v54;
        }
        while (v54);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 17:
      while (1)
      {
        int v58 = v224;
        do
        {
          unint64_t v59 = *(unsigned __int8 *)v22;
          if (v59 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v59);
            unsigned int v60 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v61 = *v15;
                if (v61 < 8) {
                  goto LABEL_129;
                }
              }
              else
              {
                unsigned int v61 = 255;
              }
              uint64_t result = PDAlightenPDA(bswap32(v20->u16[0]) >> 16, v61, (unsigned __int16)*(_DWORD *)(v11 + 4 * v59), v60);
              if (v6)
              {
                unsigned int v60 = BYTE3(result);
LABEL_129:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v60;
                goto LABEL_131;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_131:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v58;
        }
        while (v58);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 18:
      while (1)
      {
        int v62 = v224;
        do
        {
          unint64_t v63 = *(unsigned __int8 *)v22;
          if (v63 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v63);
            unsigned int v64 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v65 = *v15;
                if (v65 < 8) {
                  goto LABEL_143;
                }
              }
              else
              {
                unsigned int v65 = 255;
              }
              uint64_t result = PDAcolordodgePDA(bswap32(v20->u16[0]) >> 16, v65, (unsigned __int16)*(_DWORD *)(v11 + 4 * v63), v64);
              if (v6)
              {
                unsigned int v64 = BYTE3(result);
LABEL_143:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v64;
                goto LABEL_145;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_145:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v62;
        }
        while (v62);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 19:
      while (1)
      {
        int v66 = v224;
        do
        {
          unint64_t v67 = *(unsigned __int8 *)v22;
          if (v67 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v67);
            unsigned int v68 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v69 = *v15;
                if (v69 < 8) {
                  goto LABEL_157;
                }
              }
              else
              {
                unsigned int v69 = 255;
              }
              uint64_t result = PDAcolorburnPDA(bswap32(v20->u16[0]) >> 16, v69, (unsigned __int16)*(_DWORD *)(v11 + 4 * v67), v68);
              if (v6)
              {
                unsigned int v68 = BYTE3(result);
LABEL_157:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v68;
                goto LABEL_159;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_159:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v66;
        }
        while (v66);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 20:
      while (1)
      {
        int v70 = v224;
        do
        {
          unint64_t v71 = *(unsigned __int8 *)v22;
          if (v71 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v71);
            unsigned int v72 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v73 = *v15;
                if (v73 < 8) {
                  goto LABEL_171;
                }
              }
              else
              {
                unsigned int v73 = 255;
              }
              uint64_t result = PDAsoftlightPDA(bswap32(v20->u16[0]) >> 16, v73, (unsigned __int16)*(_DWORD *)(v11 + 4 * v71), v72);
              if (v6)
              {
                unsigned int v72 = BYTE3(result);
LABEL_171:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v72;
                goto LABEL_173;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_173:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v70;
        }
        while (v70);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 21:
      while (1)
      {
        int v74 = v224;
        do
        {
          unint64_t v75 = *(unsigned __int8 *)v22;
          if (v75 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v75);
            unsigned int v76 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v77 = *v15;
                if (v77 < 8) {
                  goto LABEL_185;
                }
              }
              else
              {
                unsigned int v77 = 255;
              }
              uint64_t result = PDAhardlightPDA(bswap32(v20->u16[0]) >> 16, v77, (unsigned __int16)*(_DWORD *)(v11 + 4 * v75), v76);
              if (v6)
              {
                unsigned int v76 = BYTE3(result);
LABEL_185:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v76;
                goto LABEL_187;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_187:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v74;
        }
        while (v74);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 22:
      while (1)
      {
        int v78 = v224;
        do
        {
          unint64_t v79 = *(unsigned __int8 *)v22;
          if (v79 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v79);
            unsigned int v80 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v81 = *v15;
                if (v81 < 8) {
                  goto LABEL_199;
                }
              }
              else
              {
                unsigned int v81 = 255;
              }
              uint64_t result = PDAdifferencePDA(bswap32(v20->u16[0]) >> 16, v81, (unsigned __int16)*(_DWORD *)(v11 + 4 * v79), v80);
              if (v6)
              {
                unsigned int v80 = BYTE3(result);
LABEL_199:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v80;
                goto LABEL_201;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_201:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v78;
        }
        while (v78);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 23:
      while (1)
      {
        int v82 = v224;
        do
        {
          unint64_t v83 = *(unsigned __int8 *)v22;
          if (v83 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v83);
            unsigned int v84 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v85 = *v15;
                if (v85 < 8) {
                  goto LABEL_213;
                }
              }
              else
              {
                unsigned int v85 = 255;
              }
              uint64_t result = PDAexclusionPDA(bswap32(v20->u16[0]) >> 16, v85, (unsigned __int16)*(_DWORD *)(v11 + 4 * v83), v84);
              if (v6)
              {
                unsigned int v84 = BYTE3(result);
LABEL_213:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v84;
                goto LABEL_215;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_215:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v82;
        }
        while (v82);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 24:
      while (1)
      {
        int v86 = v224;
        do
        {
          unint64_t v87 = *(unsigned __int8 *)v22;
          if (v87 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v87);
            unsigned int v88 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v89 = *v15;
                if (v89 < 8) {
                  goto LABEL_227;
                }
              }
              else
              {
                unsigned int v89 = 255;
              }
              uint64_t result = PDAhuePDA(bswap32(v20->u16[0]) >> 16, v89, (unsigned __int16)*(_DWORD *)(v11 + 4 * v87), v88);
              if (v6)
              {
                unsigned int v88 = BYTE3(result);
LABEL_227:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v88;
                goto LABEL_229;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_229:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v86;
        }
        while (v86);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 25:
      while (1)
      {
        int v90 = v224;
        do
        {
          unint64_t v91 = *(unsigned __int8 *)v22;
          if (v91 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v91);
            unsigned int v92 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v93 = *v15;
                if (v93 < 8) {
                  goto LABEL_241;
                }
              }
              else
              {
                unsigned int v93 = 255;
              }
              uint64_t result = PDAsaturationPDA(bswap32(v20->u16[0]) >> 16, v93, (unsigned __int16)*(_DWORD *)(v11 + 4 * v91), v92);
              if (v6)
              {
                unsigned int v92 = BYTE3(result);
LABEL_241:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v92;
                goto LABEL_243;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_243:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v90;
        }
        while (v90);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 26:
      while (1)
      {
        int v94 = v224;
        do
        {
          unint64_t v95 = *(unsigned __int8 *)v22;
          if (v95 >= 8)
          {
            uint64_t result = *(unsigned int *)(v11 + 4 * v95);
            unsigned int v96 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                unsigned int v97 = *v15;
                if (v97 < 8) {
                  goto LABEL_255;
                }
              }
              else
              {
                unsigned int v97 = 255;
              }
              uint64_t result = PDAluminosityPDA((unsigned __int16)*(_DWORD *)(v11 + 4 * v95), v96, bswap32(v20->u16[0]) >> 16, v97);
              if (v6)
              {
                unsigned int v96 = BYTE3(result);
LABEL_255:
                v20->i16[0] = bswap32(result) >> 16;
                char *v15 = v96;
                goto LABEL_257;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_257:
          ++v22;
          uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v94;
        }
        while (v94);
        v22 += v23;
        uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4) {
          return result;
        }
      }
    case 27:
      break;
    default:
      return result;
  }
LABEL_260:
  int v98 = v224;
  while (1)
  {
    unint64_t v99 = *(unsigned __int8 *)v22;
    if (v99 < 8) {
      goto LABEL_271;
    }
    uint64_t result = *(unsigned int *)(v11 + 4 * v99);
    unsigned int v100 = BYTE3(result);
    if (BYTE3(result) < 8u) {
      goto LABEL_271;
    }
    if (v6)
    {
      unsigned int v101 = *v15;
      if (v101 < 8) {
        goto LABEL_269;
      }
    }
    else
    {
      unsigned int v101 = 255;
    }
    uint64_t result = PDAluminosityPDA(bswap32(v20->u16[0]) >> 16, v101, (unsigned __int16)*(_DWORD *)(v11 + 4 * v99), v100);
    if (!v6)
    {
      v20->i16[0] = bswap32(result) >> 16;
      goto LABEL_271;
    }
    unsigned int v100 = BYTE3(result);
LABEL_269:
    v20->i16[0] = bswap32(result) >> 16;
    char *v15 = v100;
LABEL_271:
    ++v22;
    uint64_t v20 = (int16x4_t *)((char *)v20 + 2);
    v15 += v16;
    if (!--v98)
    {
      v22 += v23;
      uint64_t v20 = (int16x4_t *)((char *)v20 + 2 * v219);
      v15 += v216;
      if (!--v4) {
        return result;
      }
      goto LABEL_260;
    }
  }
}

uint64_t RGB555_mark_pixelmask(uint64_t result, int a2)
{
  uint64_t v3 = *(void *)(result + 48);
  uint64_t v4 = *(void *)(result + 136);
  uint64_t v6 = *(int *)(result + 12);
  uint64_t v5 = *(int *)(result + 16);
  if (v3)
  {
    uint64_t v7 = *(int *)(result + 32);
    uint64_t v8 = (char *)(v3 + v6 + (int)v7 * (uint64_t)(int)v5);
    int v607 = -1;
    if (!v4) {
      return result;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    int v607 = 0;
    if (!v4) {
      return result;
    }
  }
  int v9 = *(_DWORD *)(result + 4);
  unint64_t v11 = *(void *)(result + 88);
  int8x16_t v10 = *(unsigned __int8 **)(result + 96);
  unint64_t v12 = (unint64_t)*(int *)(result + 28) >> 1;
  uint64_t v13 = (char *)(*(void *)(result + 40) + 2 * (v6 + v12 * v5));
  uint64_t v14 = *(int *)(result + 124);
  int v15 = (char *)(v4 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v14);
  uint64_t v16 = *(int *)(result + 56);
  uint64_t v17 = *(int *)(result + 60);
  int v18 = BYTE1(*(_DWORD *)result);
  int v606 = *(_DWORD *)(result + 8);
  if (v18 == 3)
  {
    uint64_t v21 = *(int *)(result + 124);
    uint64_t v603 = *(void *)(result + 96);
    uint64_t v22 = RGB555_colorlookup(3, (unsigned __int16 *)v11, v10);
    uint64_t v14 = v21;
    unint64_t v11 = v22;
    uint64_t v23 = (unsigned __int8 *)(v22 + 512);
    uint64_t result = v603;
    if (v603) {
      int8x16_t v10 = v23;
    }
    else {
      int8x16_t v10 = 0;
    }
    if (v603) {
      uint64_t v24 = 16;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v578 = v24;
    unint64_t v19 = 16;
    int v20 = v603 != 0;
    int v25 = 16;
    int v26 = 16;
    goto LABEL_26;
  }
  if (v18 != 1)
  {
    int v26 = *(_DWORD *)(result + 64);
    int v25 = *(_DWORD *)(result + 68);
    unint64_t v19 = (unint64_t)*(int *)(result + 76) >> 1;
    if (v10)
    {
      uint64_t v578 = *(int *)(result + 80);
      int v20 = 1;
    }
    else
    {
      uint64_t v578 = 0;
      int v20 = 0;
    }
LABEL_26:
    unint64_t v31 = v11 + 2 * v19 * v25;
    v607 &= 1u;
    int v30 = 1;
    unint64_t v605 = (char *)v11;
    uint64_t v630 = (char *)v11;
    goto LABEL_27;
  }
  unint64_t v19 = (unint64_t)*(int *)(result + 76) >> 1;
  if (v10)
  {
    uint64_t v578 = *(int *)(result + 80);
    v10 += v16 + (int)v578 * (uint64_t)(int)v17;
    int v20 = -1;
  }
  else
  {
    uint64_t v578 = 0;
    int v20 = 0;
  }
  uint64_t v630 = (char *)(v11 + 2 * (v16 + v19 * v17));
  if (v19 == v12 && v13 - v630 >= 1)
  {
    if (v9 >= (uint64_t)((unint64_t)(v13 - v630) >> 1))
    {
      v13 += 2 * v9 - 2;
      v630 += 2 * v9 - 2;
      v15 += v9 - 1;
      v8 += v607 & (v9 - 1);
      int v30 = -1;
      unint64_t v19 = (unint64_t)*(int *)(result + 28) >> 1;
      v10 += v20 & (v9 - 1);
      goto LABEL_24;
    }
    uint64_t v27 = *(int *)(result + 8) - 1;
    unint64_t v28 = v12 * v27;
    int v29 = &v630[2 * v12 * v27];
    if (v13 <= &v29[2 * v9 - 2])
    {
      unint64_t v19 = -(uint64_t)v12;
      v15 += v14 * v27;
      uint64_t v14 = -v14;
      v8 += v7 * v27;
      uint64_t v7 = -v7;
      v607 &= 1u;
      v10 += v578 * v27;
      uint64_t v578 = -v578;
      v20 &= 1u;
      int v30 = 1;
      uint64_t v630 = v29;
      unint64_t v12 = -(uint64_t)v12;
      v13 += 2 * v28;
      goto LABEL_24;
    }
  }
  v607 &= 1u;
  v20 &= 1u;
  int v30 = 1;
LABEL_24:
  unint64_t v31 = 0;
  unint64_t v605 = 0;
  unint64_t v11 = -1;
  int v25 = v578;
  int v26 = v19;
LABEL_27:
  int v32 = v30 * v9;
  int v579 = v9;
  unint64_t v580 = v31;
  int v619 = v20;
  if (v31)
  {
    uint64_t v33 = (int)v17 % v25;
    unint64_t v575 = v19;
    unint64_t v34 = &v630[2 * v19 * v33];
    uint64_t v35 = (int)v16 % v26;
    unint64_t v11 = (unint64_t)&v34[2 * v26];
    unint64_t v36 = &v10[v578 * v33 + v35];
    if (v20) {
      int8x16_t v10 = v36;
    }
    unsigned int v604 = v10;
    unint64_t v605 = &v34[2 * v35];
    uint64_t v630 = v605;
  }
  else
  {
    unsigned int v604 = v10;
    unint64_t v575 = v19 - v32;
    v578 -= v20 * v9;
  }
  uint64_t v577 = v14 - v32;
  unint64_t v576 = v12 - v32;
  uint64_t v574 = v7 - v607 * v9;
  switch(a2)
  {
    case 0:
      uint64_t v37 = v30;
      if (v607)
      {
        while (1)
        {
          int v38 = v579;
          do
          {
            unsigned int v39 = *v15;
            if (v39 < 0xF8)
            {
              if (v39 < 8) {
                goto LABEL_40;
              }
              uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v13) >> 16, *v8, ~(_BYTE)v39);
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unsigned int v40 = BYTE3(result);
            }
            else
            {
              LOBYTE(v40) = 0;
              *(_WORD *)uint64_t v13 = 0;
            }
            *uint64_t v8 = v40;
LABEL_40:
            v15 += v37;
            v8 += v607;
            v13 += 2 * v37;
            --v38;
          }
          while (v38);
          v15 += v577;
          v13 += 2 * v576;
          v8 += v574;
          if (!--v606) {
            return result;
          }
        }
      }
LABEL_727:
      int v441 = v9;
      while (1)
      {
        unsigned int v442 = *v15;
        if (v442 > 0xF7) {
          break;
        }
        if (v442 >= 8)
        {
          uint64_t result = PDM(bswap32(*(unsigned __int16 *)v13) >> 16, ~(_BYTE)v442);
          __int16 v443 = __rev16(result);
          goto LABEL_732;
        }
LABEL_733:
        v15 += v37;
        v13 += 2 * v37;
        if (!--v441)
        {
          v15 += v577;
          v13 += 2 * v576;
          if (!--v606) {
            return result;
          }
          goto LABEL_727;
        }
      }
      __int16 v443 = 0;
LABEL_732:
      *(_WORD *)uint64_t v13 = v443;
      goto LABEL_733;
    case 1:
      if (v607)
      {
        uint64_t v41 = v30;
        uint64_t v42 = v607;
        if (v20)
        {
          uint64_t v43 = v20;
          uint64_t v44 = -(uint64_t)v26;
          uint64_t v620 = -(uint64_t)(v575 * v25);
          uint64_t v592 = -(v578 * v25);
          unsigned int v45 = (char *)v604;
          while (1)
          {
            unint64_t v46 = v580;
            int v47 = v579;
            do
            {
              unsigned int v48 = *v15;
              if (v48 < 0xF8)
              {
                if (v48 < 8) {
                  goto LABEL_53;
                }
                unint64_t v50 = v11;
                uint64_t result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v630) >> 16, *v45, v48, bswap32(*(unsigned __int16 *)v13) >> 16, *v8, v48 ^ 0xFF);
                uint64_t v42 = v607;
                unint64_t v11 = v50;
                unint64_t v46 = v580;
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                unsigned int v49 = BYTE3(result);
              }
              else
              {
                *(_WORD *)uint64_t v13 = *(_WORD *)v630;
                LOBYTE(v49) = *v45;
              }
              *uint64_t v8 = v49;
LABEL_53:
              v15 += v41;
              v8 += v42;
              unint64_t v51 = &v630[2 * v41];
              if ((unint64_t)v51 >= v11) {
                uint64_t v52 = v44;
              }
              else {
                uint64_t v52 = 0;
              }
              v45 += v43 + v52;
              uint64_t v630 = &v51[2 * v52];
              v13 += 2 * v41;
              --v47;
            }
            while (v47);
            if (v46)
            {
              unsigned int v53 = &v605[2 * v575];
              uint64_t v54 = v592;
              if ((unint64_t)v53 < v46) {
                uint64_t v54 = 0;
              }
              unsigned int v45 = (char *)&v604[v578 + v54];
              uint64_t v55 = v620;
              if ((unint64_t)v53 < v46) {
                uint64_t v55 = 0;
              }
              v11 += 2 * v55 + 2 * v575;
              v604 += v578 + v54;
              unint64_t v605 = &v53[2 * v55];
              uint64_t v630 = v605;
            }
            else
            {
              v630 += 2 * v575;
              v45 += v578;
            }
            v15 += v577;
            v13 += 2 * v576;
            v8 += v574;
            if (!--v606) {
              return result;
            }
          }
        }
        uint64_t v525 = -(uint64_t)v26;
        uint64_t v526 = -(uint64_t)(v575 * v25);
LABEL_859:
        int v527 = v579;
        while (1)
        {
          unsigned int v528 = *v15;
          if (v528 >= 0xF8) {
            break;
          }
          if (v528 >= 8)
          {
            unint64_t v530 = v11;
            uint64_t result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v630) >> 16, 255, v528, bswap32(*(unsigned __int16 *)v13) >> 16, *v8, v528 ^ 0xFF);
            uint64_t v42 = v607;
            unint64_t v11 = v530;
            *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
            unsigned int v529 = BYTE3(result);
            goto LABEL_864;
          }
LABEL_865:
          v15 += v41;
          v8 += v42;
          unsigned int v531 = &v630[2 * v41];
          if ((unint64_t)v531 >= v11) {
            uint64_t v532 = v525;
          }
          else {
            uint64_t v532 = 0;
          }
          uint64_t v630 = &v531[2 * v532];
          v13 += 2 * v41;
          if (!--v527)
          {
            v15 += v577;
            v13 += 2 * v576;
            v8 += v574;
            uint64_t v533 = v605;
            uint64_t v534 = &v605[2 * v575];
            if ((unint64_t)v534 >= v580) {
              uint64_t v535 = v526;
            }
            else {
              uint64_t v535 = 0;
            }
            BOOL v536 = &v534[2 * v535];
            uint64_t v537 = v11 + 2 * v535 + 2 * v575;
            if (v580)
            {
              unint64_t v11 = v537;
              uint64_t v533 = v536;
            }
            unint64_t v605 = v533;
            if (!v580) {
              BOOL v536 = &v630[2 * v575];
            }
            uint64_t v630 = v536;
            if (!--v606) {
              return result;
            }
            goto LABEL_859;
          }
        }
        *(_WORD *)uint64_t v13 = *(_WORD *)v630;
        LOBYTE(v529) = -1;
LABEL_864:
        *uint64_t v8 = v529;
        goto LABEL_865;
      }
      uint64_t v444 = v30;
      uint64_t v445 = -(uint64_t)v26;
      uint64_t v446 = -(uint64_t)(v575 * v25);
      uint64_t v447 = 2 * v30;
LABEL_737:
      int v448 = v579;
      while (1)
      {
        unsigned int v449 = *v15;
        if (v449 >= 0xF8) {
          break;
        }
        if (v449 >= 8)
        {
          unint64_t v451 = v11;
          uint64_t result = PDMplusDM(bswap32(*(unsigned __int16 *)v630) >> 16, v449, bswap32(*(unsigned __int16 *)v13) >> 16, v449 ^ 0xFF);
          unint64_t v11 = v451;
          __int16 v450 = __rev16(result);
          goto LABEL_742;
        }
LABEL_743:
        v15 += v444;
        int v452 = &v630[2 * v444];
        if ((unint64_t)v452 >= v11) {
          uint64_t v453 = v445;
        }
        else {
          uint64_t v453 = 0;
        }
        uint64_t v630 = &v452[2 * v453];
        v13 += v447;
        if (!--v448)
        {
          v15 += v577;
          v13 += 2 * v576;
          uint64_t v454 = v605;
          uint64_t v455 = &v605[2 * v575];
          if ((unint64_t)v455 >= v580) {
            uint64_t v456 = v446;
          }
          else {
            uint64_t v456 = 0;
          }
          unsigned int v457 = &v455[2 * v456];
          uint64_t v458 = v11 + 2 * v456 + 2 * v575;
          if (v580)
          {
            unint64_t v11 = v458;
            uint64_t v454 = v457;
          }
          unint64_t v605 = v454;
          if (!v580) {
            unsigned int v457 = &v630[2 * v575];
          }
          uint64_t v630 = v457;
          if (!--v606) {
            return result;
          }
          goto LABEL_737;
        }
      }
      __int16 v450 = *(_WORD *)v630;
LABEL_742:
      *(_WORD *)uint64_t v13 = v450;
      goto LABEL_743;
    case 2:
      uint64_t v56 = v30;
      if (v607)
      {
        uint64_t v57 = v607;
        uint64_t v58 = v20;
        uint64_t v593 = -(uint64_t)(v575 * v25);
        uint64_t v581 = -(v578 * v25);
        unint64_t v59 = (char *)v604;
        uint64_t v60 = -(uint64_t)v26;
        uint64_t v621 = v607;
        while (1)
        {
          int v61 = v579;
          unint64_t v608 = v11;
          do
          {
            unsigned int v62 = *v15;
            if (v62 < 0xF8)
            {
              if (v62 < 8) {
                goto LABEL_79;
              }
              uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, *v59, v62);
              unint64_t v11 = v608;
              uint64_t v57 = v621;
              unsigned int v63 = BYTE3(result);
              if (BYTE3(result) < 8u) {
                goto LABEL_79;
              }
              unsigned int v64 = bswap32(*(unsigned __int16 *)v13) >> 16;
              char v65 = *v8;
              LODWORD(result) = (unsigned __int16)result;
LABEL_77:
              uint64_t result = PDAplusDAM(result, v63, v64, v65, v63 ^ 0xFF);
              unint64_t v11 = v608;
              uint64_t v57 = v621;
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unsigned int v63 = BYTE3(result);
              goto LABEL_78;
            }
            unsigned int v63 = *v59;
            if (v63 < 0xF8)
            {
              if (v63 < 8) {
                goto LABEL_79;
              }
              LODWORD(result) = bswap32(*(unsigned __int16 *)v630) >> 16;
              unsigned int v64 = bswap32(*(unsigned __int16 *)v13) >> 16;
              char v65 = *v8;
              goto LABEL_77;
            }
            *(_WORD *)uint64_t v13 = *(_WORD *)v630;
LABEL_78:
            *uint64_t v8 = v63;
LABEL_79:
            v15 += v56;
            v8 += v57;
            int v66 = &v630[2 * v56];
            if ((unint64_t)v66 >= v11) {
              uint64_t v67 = v60;
            }
            else {
              uint64_t v67 = 0;
            }
            v59 += v58 + v67;
            uint64_t v630 = &v66[2 * v67];
            v13 += 2 * v56;
            --v61;
          }
          while (v61);
          if (v580)
          {
            unsigned int v68 = &v605[2 * v575];
            uint64_t v69 = v581;
            if ((unint64_t)v68 < v580) {
              uint64_t v69 = 0;
            }
            unint64_t v59 = (char *)&v604[v578 + v69];
            uint64_t v70 = v593;
            if ((unint64_t)v68 < v580) {
              uint64_t v70 = 0;
            }
            v11 += 2 * v70 + 2 * v575;
            v604 += v578 + v69;
            unint64_t v605 = &v68[2 * v70];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v59 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          v8 += v574;
          if (!--v606) {
            return result;
          }
        }
      }
      uint64_t v459 = v20;
      uint64_t v460 = -(uint64_t)v26;
      uint64_t v627 = -(uint64_t)(v575 * v25);
      uint64_t v615 = -(v578 * v25);
      uint64_t v461 = (char *)v604;
LABEL_757:
      int v462 = v579;
      unint64_t v463 = v11;
      while (1)
      {
        unsigned int v464 = *v15;
        if (v464 < 0xF8)
        {
          if (v464 >= 8)
          {
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, *v461, v464);
            unint64_t v11 = v463;
            if (BYTE3(result) >= 8u)
            {
              unsigned int v467 = bswap32(*(unsigned __int16 *)v13) >> 16;
              unsigned int v468 = ~result >> 24;
              goto LABEL_766;
            }
          }
        }
        else
        {
          unsigned int v465 = *v461;
          if (v465 >= 0xF8)
          {
            __int16 v466 = *(_WORD *)v630;
            goto LABEL_767;
          }
          if (v465 >= 8)
          {
            LODWORD(result) = bswap32(*(unsigned __int16 *)v630) >> 16;
            unsigned int v467 = bswap32(*(unsigned __int16 *)v13) >> 16;
            unsigned int v468 = v465 ^ 0xFF;
LABEL_766:
            uint64_t result = PDplusDM(result, v467, v468);
            unint64_t v11 = v463;
            __int16 v466 = __rev16(result);
LABEL_767:
            *(_WORD *)uint64_t v13 = v466;
          }
        }
        v15 += v56;
        int v469 = &v630[2 * v56];
        if ((unint64_t)v469 >= v11) {
          uint64_t v470 = v460;
        }
        else {
          uint64_t v470 = 0;
        }
        v461 += v459 + v470;
        uint64_t v630 = &v469[2 * v470];
        v13 += 2 * v56;
        if (!--v462)
        {
          if (v580)
          {
            uint64_t v471 = &v605[2 * v575];
            uint64_t v472 = v615;
            if ((unint64_t)v471 < v580) {
              uint64_t v472 = 0;
            }
            uint64_t v461 = (char *)&v604[v578 + v472];
            uint64_t v473 = v627;
            if ((unint64_t)v471 < v580) {
              uint64_t v473 = 0;
            }
            v11 += 2 * v473 + 2 * v575;
            v604 += v578 + v472;
            unint64_t v605 = &v471[2 * v473];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v461 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          if (!--v606) {
            return result;
          }
          goto LABEL_757;
        }
      }
    case 3:
      uint64_t v71 = v30;
      uint64_t v582 = -(uint64_t)(v575 * v25);
      uint64_t v553 = -(v578 * v25);
      uint64_t v72 = 2 * v30;
      unsigned int v73 = (char *)v604;
      uint64_t v74 = -(uint64_t)v26;
      while (1)
      {
        int v75 = v579;
        unint64_t v76 = v11;
        do
        {
          unsigned int v77 = *v15;
          if (v77 < 0xF8)
          {
            if (v77 < 8) {
              goto LABEL_105;
            }
            if (v619) {
              char v79 = *v73;
            }
            else {
              char v79 = -1;
            }
            uint64_t result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v79, ((unsigned __int16)(*v8 * (_WORD)v77+ ((*v8 * v77) >> 8)+ 1) >> 8), bswap32(*(unsigned __int16 *)v13) >> 16, *v8, v77 ^ 0xFF);
          }
          else
          {
            if (v619) {
              char v78 = *v73;
            }
            else {
              char v78 = -1;
            }
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v78, *v8);
          }
          *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
          *uint64_t v8 = BYTE3(result);
          unint64_t v11 = v76;
LABEL_105:
          v15 += v71;
          v8 += v607;
          unsigned int v80 = &v630[2 * v71];
          if ((unint64_t)v80 >= v11) {
            uint64_t v81 = v74;
          }
          else {
            uint64_t v81 = 0;
          }
          v73 += v619 + v81;
          uint64_t v630 = &v80[2 * v81];
          v13 += v72;
          --v75;
        }
        while (v75);
        if (v580)
        {
          int v82 = &v605[2 * v575];
          uint64_t v83 = v553;
          if ((unint64_t)v82 < v580) {
            uint64_t v83 = 0;
          }
          unsigned int v73 = (char *)&v604[v578 + v83];
          uint64_t v84 = v582;
          if ((unint64_t)v82 < v580) {
            uint64_t v84 = 0;
          }
          v11 += 2 * v84 + 2 * v575;
          v604 += v578 + v83;
          unint64_t v605 = &v82[2 * v84];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v73 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 4:
      uint64_t v85 = v30;
      uint64_t v583 = -(uint64_t)(v575 * v25);
      uint64_t v554 = -(v578 * v25);
      uint64_t v86 = 2 * v30;
      unint64_t v87 = (char *)v604;
      uint64_t v88 = -(uint64_t)v26;
      while (1)
      {
        int v89 = v579;
        unint64_t v90 = v11;
        do
        {
          unsigned int v91 = *v15;
          if (v91 < 0xF8)
          {
            if (v91 < 8) {
              goto LABEL_131;
            }
            if (v619) {
              char v93 = *v87;
            }
            else {
              char v93 = -1;
            }
            uint64_t result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v93, ((unsigned __int16)((*v8 ^ 0xFF) * v91+ (((*v8 ^ 0xFF) * v91) >> 8)+ 1) >> 8), bswap32(*(unsigned __int16 *)v13) >> 16, *v8, v91 ^ 0xFF);
          }
          else
          {
            if (v619) {
              char v92 = *v87;
            }
            else {
              char v92 = -1;
            }
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v92, ~*v8);
          }
          *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
          *uint64_t v8 = BYTE3(result);
          unint64_t v11 = v90;
LABEL_131:
          v15 += v85;
          v8 += v607;
          int v94 = &v630[2 * v85];
          if ((unint64_t)v94 >= v11) {
            uint64_t v95 = v88;
          }
          else {
            uint64_t v95 = 0;
          }
          v87 += v619 + v95;
          uint64_t v630 = &v94[2 * v95];
          v13 += v86;
          --v89;
        }
        while (v89);
        if (v580)
        {
          unsigned int v96 = &v605[2 * v575];
          uint64_t v97 = v554;
          if ((unint64_t)v96 < v580) {
            uint64_t v97 = 0;
          }
          unint64_t v87 = (char *)&v604[v578 + v97];
          uint64_t v98 = v583;
          if ((unint64_t)v96 < v580) {
            uint64_t v98 = 0;
          }
          v11 += 2 * v98 + 2 * v575;
          v604 += v578 + v97;
          unint64_t v605 = &v96[2 * v98];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v87 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 5:
      uint64_t v99 = v30;
      uint64_t v100 = v607;
      int v622 = v20;
      uint64_t v584 = -(v578 * v25);
      uint64_t v594 = -(uint64_t)(v575 * v25);
      uint64_t v101 = 2 * v30;
      int v102 = (char *)v604;
      uint64_t v103 = -(uint64_t)v26;
      do
      {
        int v104 = v579;
        unint64_t v609 = v11;
        do
        {
          unsigned int v105 = *v15;
          if (v105 >= 8)
          {
            unsigned int v106 = *v8;
            uint64_t v107 = v101;
            unsigned int v108 = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, *v102, v105);
            uint64_t result = PDAMplusDAM((unsigned __int16)v108, SHIBYTE(v108), v106, bswap32(*(unsigned __int16 *)v13) >> 16, v106, HIBYTE(v108) ^ 0xFF);
            uint64_t v101 = v107;
            unint64_t v11 = v609;
            *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
            *uint64_t v8 = BYTE3(result);
          }
          v15 += v99;
          v8 += v100;
          int8x16_t v109 = &v630[2 * v99];
          if ((unint64_t)v109 >= v11) {
            uint64_t v110 = v103;
          }
          else {
            uint64_t v110 = 0;
          }
          v102 += v622 + v110;
          uint64_t v630 = &v109[2 * v110];
          v13 += v101;
          --v104;
        }
        while (v104);
        if (v580)
        {
          unsigned int v111 = &v605[2 * v575];
          uint64_t v112 = v584;
          if ((unint64_t)v111 < v580) {
            uint64_t v112 = 0;
          }
          int v102 = (char *)&v604[v578 + v112];
          uint64_t v113 = v594;
          if ((unint64_t)v111 < v580) {
            uint64_t v113 = 0;
          }
          v11 += 2 * v113 + 2 * v575;
          v604 += v578 + v112;
          unint64_t v605 = &v111[2 * v113];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v102 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        --v606;
      }
      while (v606);
      return result;
    case 6:
      uint64_t v114 = v30;
      uint64_t v115 = v607;
      uint64_t v585 = -(uint64_t)(v575 * v25);
      uint64_t v595 = v607;
      uint64_t v555 = -(v578 * v25);
      uint64_t v116 = 2 * v30;
      char v117 = (char *)v604;
      uint64_t v118 = -(uint64_t)v26;
      while (1)
      {
        int v119 = v579;
        unint64_t v610 = v11;
        do
        {
          unsigned int v120 = *v15;
          if (v120 < 8) {
            goto LABEL_175;
          }
          unsigned int v121 = *v8;
          if (v121 > 7)
          {
            if (v121 > 0xF7) {
              goto LABEL_175;
            }
            if (v619) {
              char v123 = *v117;
            }
            else {
              char v123 = -1;
            }
            uint64_t result = PDAplusDAM(bswap32(*(unsigned __int16 *)v13) >> 16, v121, bswap32(*(unsigned __int16 *)v630) >> 16, v123, ((unsigned __int16)(~(_BYTE)v121 * (_WORD)v120+ ((~(_BYTE)v121 * v120) >> 8)+ 1) >> 8));
          }
          else
          {
            if (v619) {
              char v122 = *v117;
            }
            else {
              char v122 = -1;
            }
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v122, v120);
          }
          *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
          *uint64_t v8 = BYTE3(result);
          unint64_t v11 = v610;
          uint64_t v115 = v595;
LABEL_175:
          v15 += v114;
          v8 += v115;
          char v124 = &v630[2 * v114];
          if ((unint64_t)v124 >= v11) {
            uint64_t v125 = v118;
          }
          else {
            uint64_t v125 = 0;
          }
          v117 += v619 + v125;
          uint64_t v630 = &v124[2 * v125];
          v13 += v116;
          --v119;
        }
        while (v119);
        if (v580)
        {
          int v126 = &v605[2 * v575];
          uint64_t v127 = v555;
          if ((unint64_t)v126 < v580) {
            uint64_t v127 = 0;
          }
          char v117 = (char *)&v604[v578 + v127];
          uint64_t v128 = v585;
          if ((unint64_t)v126 < v580) {
            uint64_t v128 = 0;
          }
          v11 += 2 * v128 + 2 * v575;
          v604 += v578 + v127;
          unint64_t v605 = &v126[2 * v128];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v117 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 7:
      uint64_t v129 = v30;
      if (v607)
      {
        int v623 = v20;
        uint64_t v596 = -(uint64_t)(v575 * v25);
        uint64_t v586 = -(v578 * v25);
        int v130 = (char *)v604;
        uint64_t v131 = -(uint64_t)v26;
        while (1)
        {
          int v132 = v579;
          unint64_t v133 = v11;
          do
          {
            unsigned int v134 = *v15;
            if (v134 < 0xF8)
            {
              if (v134 < 8) {
                goto LABEL_196;
              }
              unsigned int v135 = bswap32(*(unsigned __int16 *)v13) >> 16;
              uint64_t result = PDAMplusDAM(v135, *v8, ((unsigned __int16)(*v130 * (_WORD)v134+ ((*v130 * v134) >> 8)+ 1) >> 8), v135, *v8, v134 ^ 0xFF);
            }
            else
            {
              uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v13) >> 16, *v8, *v130);
            }
            unint64_t v11 = v133;
            *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
            *uint64_t v8 = BYTE3(result);
LABEL_196:
            v15 += v129;
            v8 += v607;
            unsigned int v136 = &v630[2 * v129];
            if ((unint64_t)v136 >= v11) {
              uint64_t v137 = v131;
            }
            else {
              uint64_t v137 = 0;
            }
            v130 += v623 + v137;
            uint64_t v630 = &v136[2 * v137];
            v13 += 2 * v129;
            --v132;
          }
          while (v132);
          if (v580)
          {
            char v138 = &v605[2 * v575];
            uint64_t v139 = v586;
            if ((unint64_t)v138 < v580) {
              uint64_t v139 = 0;
            }
            int v130 = (char *)&v604[v578 + v139];
            uint64_t v140 = v596;
            if ((unint64_t)v138 < v580) {
              uint64_t v140 = 0;
            }
            v11 += 2 * v140 + 2 * v575;
            v604 += v578 + v139;
            unint64_t v605 = &v138[2 * v140];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v130 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          v8 += v574;
          if (!--v606) {
            return result;
          }
        }
      }
      uint64_t v474 = v20;
      uint64_t v475 = -(uint64_t)v26;
      uint64_t v628 = -(uint64_t)(v575 * v25);
      uint64_t v616 = -(v578 * v25);
      unint64_t v476 = (char *)v604;
LABEL_782:
      int v477 = v579;
      unint64_t v478 = v11;
      while (1)
      {
        unsigned int v479 = *v15;
        if (v479 == 248) {
          break;
        }
        if (v479 >= 8)
        {
          unsigned int v480 = bswap32(*(unsigned __int16 *)v13) >> 16;
          uint64_t result = PDMplusDM(v480, ((unsigned __int16)(*v476 * (_WORD)v479+ ((*v476 * v479) >> 8)+ 1) >> 8), v480, v479 ^ 0xFF);
          goto LABEL_787;
        }
LABEL_788:
        v15 += v129;
        uint64_t v481 = &v630[2 * v129];
        if ((unint64_t)v481 >= v11) {
          uint64_t v482 = v475;
        }
        else {
          uint64_t v482 = 0;
        }
        v476 += v474 + v482;
        uint64_t v630 = &v481[2 * v482];
        v13 += 2 * v129;
        if (!--v477)
        {
          if (v580)
          {
            uint64_t v483 = &v605[2 * v575];
            uint64_t v484 = v616;
            if ((unint64_t)v483 < v580) {
              uint64_t v484 = 0;
            }
            unint64_t v476 = (char *)&v604[v578 + v484];
            uint64_t v485 = v628;
            if ((unint64_t)v483 < v580) {
              uint64_t v485 = 0;
            }
            v11 += 2 * v485 + 2 * v575;
            v604 += v578 + v484;
            unint64_t v605 = &v483[2 * v485];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v476 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          if (!--v606) {
            return result;
          }
          goto LABEL_782;
        }
      }
      uint64_t result = PDM(bswap32(*(unsigned __int16 *)v13) >> 16, *v476);
LABEL_787:
      unint64_t v11 = v478;
      *(_WORD *)uint64_t v13 = __rev16(result);
      goto LABEL_788;
    case 8:
      uint64_t v141 = v30;
      if (v607)
      {
        int v624 = v20;
        uint64_t v597 = -(uint64_t)(v575 * v25);
        uint64_t v587 = -(v578 * v25);
        unint64_t v142 = v604;
        uint64_t v143 = -(uint64_t)v26;
        while (1)
        {
          int v144 = v579;
          unint64_t v145 = v11;
          do
          {
            unsigned int v146 = *v15;
            if (v146 < 0xF8)
            {
              if (v146 < 8) {
                goto LABEL_217;
              }
              unsigned int v147 = bswap32(*(unsigned __int16 *)v13) >> 16;
              char v148 = *v8;
              char v149 = ~((*v142 * v146 + ((*v142 * v146) >> 8) + 1) >> 8);
            }
            else
            {
              unsigned int v147 = bswap32(*(unsigned __int16 *)v13) >> 16;
              char v148 = *v8;
              char v149 = ~*v142;
            }
            uint64_t result = PDAM(v147, v148, v149);
            *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
            *uint64_t v8 = BYTE3(result);
            unint64_t v11 = v145;
LABEL_217:
            v15 += v141;
            v8 += v607;
            int v150 = &v630[2 * v141];
            if ((unint64_t)v150 >= v11) {
              uint64_t v151 = v143;
            }
            else {
              uint64_t v151 = 0;
            }
            v142 += v624 + v151;
            uint64_t v630 = &v150[2 * v151];
            v13 += 2 * v141;
            --v144;
          }
          while (v144);
          if (v580)
          {
            unsigned int v152 = &v605[2 * v575];
            uint64_t v153 = v587;
            if ((unint64_t)v152 < v580) {
              uint64_t v153 = 0;
            }
            unint64_t v142 = &v604[v578 + v153];
            uint64_t v154 = v597;
            if ((unint64_t)v152 < v580) {
              uint64_t v154 = 0;
            }
            v11 += 2 * v154 + 2 * v575;
            v604 += v578 + v153;
            unint64_t v605 = &v152[2 * v154];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v142 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          v8 += v574;
          if (!--v606) {
            return result;
          }
        }
      }
      uint64_t v486 = v20;
      uint64_t v487 = -(uint64_t)v26;
      uint64_t v629 = -(uint64_t)(v575 * v25);
      uint64_t v617 = -(v578 * v25);
      int v488 = v604;
LABEL_802:
      int v489 = v579;
      unint64_t v490 = v11;
      while (1)
      {
        unsigned int v491 = *v15;
        if (v491 >= 0xF8) {
          break;
        }
        if (v491 >= 8)
        {
          unsigned int v492 = bswap32(*(unsigned __int16 *)v13) >> 16;
          unsigned int v493 = (*v488 * v491 + ((*v488 * v491) >> 8) + 1) >> 8;
          goto LABEL_807;
        }
LABEL_808:
        v15 += v141;
        unint64_t v494 = &v630[2 * v141];
        if ((unint64_t)v494 >= v11) {
          uint64_t v495 = v487;
        }
        else {
          uint64_t v495 = 0;
        }
        v488 += v486 + v495;
        uint64_t v630 = &v494[2 * v495];
        v13 += 2 * v141;
        if (!--v489)
        {
          if (v580)
          {
            unsigned int v496 = &v605[2 * v575];
            uint64_t v497 = v617;
            if ((unint64_t)v496 < v580) {
              uint64_t v497 = 0;
            }
            int v488 = &v604[v578 + v497];
            uint64_t v498 = v629;
            if ((unint64_t)v496 < v580) {
              uint64_t v498 = 0;
            }
            v11 += 2 * v498 + 2 * v575;
            v604 += v578 + v497;
            unint64_t v605 = &v496[2 * v498];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v488 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          if (!--v606) {
            return result;
          }
          goto LABEL_802;
        }
      }
      unsigned int v492 = bswap32(*(unsigned __int16 *)v13) >> 16;
      LOBYTE(v493) = *v488;
LABEL_807:
      uint64_t result = PDM(v492, ~(_BYTE)v493);
      *(_WORD *)uint64_t v13 = __rev16(result);
      unint64_t v11 = v490;
      goto LABEL_808;
    case 9:
      uint64_t v155 = v30;
      uint64_t v156 = v607;
      uint64_t v157 = v20;
      uint64_t v588 = -(uint64_t)(v575 * v25);
      uint64_t v598 = v607;
      uint64_t v556 = -(v578 * v25);
      uint64_t v158 = 2 * v30;
      unsigned int v159 = (char *)v604;
      uint64_t result = -(uint64_t)v26;
      uint64_t v625 = result;
      do
      {
        int v160 = v579;
        unint64_t v611 = v11;
        do
        {
          unsigned int v161 = *v15;
          if (v161 >= 8)
          {
            int v162 = *v8;
            uint64_t v163 = v155;
            uint64_t v164 = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, *v159, *v15);
            unsigned int v165 = PDAMplusDAM((unsigned __int16)v164, SBYTE3(v164), v162 ^ 0xFFu, bswap32(*(unsigned __int16 *)v13) >> 16, v162, (~(_BYTE)v161 + BYTE3(v164)));
            uint64_t v155 = v163;
            uint64_t v156 = v598;
            *(_WORD *)uint64_t v13 = bswap32(v165) >> 16;
            unsigned int v166 = HIBYTE(v165);
            unint64_t v11 = v611;
            uint64_t result = v625;
            *uint64_t v8 = v166;
          }
          v15 += v155;
          v8 += v156;
          int v167 = &v630[2 * v155];
          if ((unint64_t)v167 >= v11) {
            uint64_t v168 = result;
          }
          else {
            uint64_t v168 = 0;
          }
          v159 += v157 + v168;
          uint64_t v630 = &v167[2 * v168];
          v13 += v158;
          --v160;
        }
        while (v160);
        if (v580)
        {
          unsigned int v169 = &v605[2 * v575];
          uint64_t v170 = v556;
          if ((unint64_t)v169 < v580) {
            uint64_t v170 = 0;
          }
          unsigned int v159 = (char *)&v604[v578 + v170];
          uint64_t v171 = v588;
          if ((unint64_t)v169 < v580) {
            uint64_t v171 = 0;
          }
          v11 += 2 * v171 + 2 * v575;
          v604 += v578 + v170;
          unint64_t v605 = &v169[2 * v171];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v159 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        --v606;
      }
      while (v606);
      return result;
    case 10:
      uint64_t v172 = v30;
      uint64_t v173 = v607;
      uint64_t v174 = v619;
      uint64_t v589 = -(v578 * v25);
      uint64_t v599 = -(uint64_t)(v575 * v25);
      uint64_t v175 = 2 * v30;
      unsigned int v176 = (char *)v604;
      uint64_t result = -(uint64_t)v26;
      uint64_t v626 = result;
      do
      {
        int v177 = v579;
        unint64_t v612 = v11;
        do
        {
          unsigned int v178 = *v15;
          if (v178 >= 8)
          {
            int v179 = *v8;
            uint64_t v180 = v172;
            unsigned int v181 = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, *v176, v178);
            unsigned int v182 = PDAMplusDAM((unsigned __int16)v181, SHIBYTE(v181), v179 ^ 0xFFu, bswap32(*(unsigned __int16 *)v13) >> 16, v179, HIBYTE(v181) ^ 0xFF);
            uint64_t v172 = v180;
            *(_WORD *)uint64_t v13 = bswap32(v182) >> 16;
            unsigned int v183 = HIBYTE(v182);
            unint64_t v11 = v612;
            uint64_t result = v626;
            *uint64_t v8 = v183;
          }
          v15 += v172;
          v8 += v173;
          unsigned int v184 = &v630[2 * v172];
          if ((unint64_t)v184 >= v11) {
            uint64_t v185 = result;
          }
          else {
            uint64_t v185 = 0;
          }
          v176 += v174 + v185;
          uint64_t v630 = &v184[2 * v185];
          v13 += v175;
          --v177;
        }
        while (v177);
        if (v580)
        {
          int v186 = &v605[2 * v575];
          uint64_t v187 = v589;
          if ((unint64_t)v186 < v580) {
            uint64_t v187 = 0;
          }
          unsigned int v176 = (char *)&v604[v578 + v187];
          uint64_t v188 = v599;
          if ((unint64_t)v186 < v580) {
            uint64_t v188 = 0;
          }
          v11 += 2 * v188 + 2 * v575;
          v604 += v578 + v187;
          unint64_t v605 = &v186[2 * v188];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v176 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        --v606;
      }
      while (v606);
      return result;
    case 11:
      uint64_t v189 = v30;
      if (v607)
      {
        uint64_t v190 = v607;
        uint64_t v590 = -(uint64_t)(v575 * v25);
        uint64_t v600 = v607;
        uint64_t v557 = -(v578 * v25);
        unsigned int v191 = (char *)v604;
        uint64_t v192 = -(uint64_t)v26;
        do
        {
          int v193 = v579;
          unint64_t v613 = v11;
          do
          {
            unsigned int v194 = *v15;
            if (v194 >= 8)
            {
              if (v619) {
                char v195 = *v191;
              }
              else {
                char v195 = -1;
              }
              unsigned int v196 = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v195, v194);
              uint64_t result = PDAplusdDA(bswap32(*(unsigned __int16 *)v13) >> 16, *v8, v196, HIBYTE(v196));
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              *uint64_t v8 = BYTE3(result);
              unint64_t v11 = v613;
              uint64_t v190 = v600;
            }
            v15 += v189;
            v8 += v190;
            int v197 = &v630[2 * v189];
            if ((unint64_t)v197 >= v11) {
              uint64_t v198 = v192;
            }
            else {
              uint64_t v198 = 0;
            }
            v191 += v619 + v198;
            uint64_t v630 = &v197[2 * v198];
            v13 += 2 * v189;
            --v193;
          }
          while (v193);
          if (v580)
          {
            unsigned int v199 = &v605[2 * v575];
            uint64_t v200 = v557;
            if ((unint64_t)v199 < v580) {
              uint64_t v200 = 0;
            }
            unsigned int v191 = (char *)&v604[v578 + v200];
            uint64_t v201 = v590;
            if ((unint64_t)v199 < v580) {
              uint64_t v201 = 0;
            }
            v11 += 2 * v201 + 2 * v575;
            v604 += v578 + v200;
            unint64_t v605 = &v199[2 * v201];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v191 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          v8 += v574;
          --v606;
        }
        while (v606);
      }
      else
      {
        uint64_t v499 = -(uint64_t)v26;
        uint64_t v618 = -(uint64_t)(v575 * v25);
        uint64_t v602 = -(v578 * v25);
        BOOL v500 = (char *)v604;
        do
        {
          int v501 = v579;
          unint64_t v502 = v11;
          do
          {
            unsigned int v503 = *v15;
            if (v503 >= 8)
            {
              if (v619) {
                char v504 = *v500;
              }
              else {
                char v504 = -1;
              }
              unsigned int v505 = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v504, v503);
              uint64_t result = PDplusdDA(bswap32(*(unsigned __int16 *)v13) >> 16, v505, HIBYTE(v505));
              *(_WORD *)uint64_t v13 = __rev16(result);
              unint64_t v11 = v502;
            }
            v15 += v189;
            int v506 = &v630[2 * v189];
            if ((unint64_t)v506 >= v11) {
              uint64_t v507 = v499;
            }
            else {
              uint64_t v507 = 0;
            }
            v500 += v619 + v507;
            uint64_t v630 = &v506[2 * v507];
            v13 += 2 * v189;
            --v501;
          }
          while (v501);
          if (v580)
          {
            uint64_t v508 = &v605[2 * v575];
            uint64_t v509 = v602;
            if ((unint64_t)v508 < v580) {
              uint64_t v509 = 0;
            }
            BOOL v500 = (char *)&v604[v578 + v509];
            uint64_t v510 = v618;
            if ((unint64_t)v508 < v580) {
              uint64_t v510 = 0;
            }
            v11 += 2 * v510 + 2 * v575;
            v604 += v578 + v509;
            unint64_t v605 = &v508[2 * v510];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v500 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          --v606;
        }
        while (v606);
      }
      return result;
    case 12:
      uint64_t v202 = v30;
      if (v607)
      {
        uint64_t v203 = v607;
        uint64_t v591 = -(uint64_t)(v575 * v25);
        uint64_t v601 = v607;
        uint64_t v558 = -(v578 * v25);
        unsigned int v204 = (char *)v604;
        uint64_t v205 = -(uint64_t)v26;
        do
        {
          int v206 = v579;
          unint64_t v614 = v11;
          do
          {
            unsigned int v207 = *v15;
            if (v207 >= 8)
            {
              if (v619) {
                char v208 = *v204;
              }
              else {
                char v208 = -1;
              }
              unsigned int v209 = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v208, v207);
              uint64_t result = PDApluslDA(bswap32(*(unsigned __int16 *)v13) >> 16, *v8, (unsigned __int16)v209, HIBYTE(v209));
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              *uint64_t v8 = BYTE3(result);
              unint64_t v11 = v614;
              uint64_t v203 = v601;
            }
            v15 += v202;
            v8 += v203;
            int v210 = &v630[2 * v202];
            if ((unint64_t)v210 >= v11) {
              uint64_t v211 = v205;
            }
            else {
              uint64_t v211 = 0;
            }
            v204 += v619 + v211;
            uint64_t v630 = &v210[2 * v211];
            v13 += 2 * v202;
            --v206;
          }
          while (v206);
          if (v580)
          {
            int v212 = &v605[2 * v575];
            uint64_t v213 = v558;
            if ((unint64_t)v212 < v580) {
              uint64_t v213 = 0;
            }
            unsigned int v204 = (char *)&v604[v578 + v213];
            uint64_t v214 = v591;
            if ((unint64_t)v212 < v580) {
              uint64_t v214 = 0;
            }
            v11 += 2 * v214 + 2 * v575;
            v604 += v578 + v213;
            unint64_t v605 = &v212[2 * v214];
            uint64_t v630 = v605;
          }
          else
          {
            v630 += 2 * v575;
            v204 += v578;
          }
          v15 += v577;
          v13 += 2 * v576;
          v8 += v574;
          --v606;
        }
        while (v606);
      }
      else
      {
        uint64_t v511 = -(uint64_t)v26;
        uint64_t v512 = -(uint64_t)(v575 * v25);
        do
        {
          int v513 = v9;
          do
          {
            unsigned int v514 = *v15;
            if (v514 >= 8)
            {
              unint64_t v515 = v11;
              uint64_t result = PDM(bswap32(*(unsigned __int16 *)v630) >> 16, v514);
              unint64_t v11 = v515;
              unsigned int v516 = bswap32(*(unsigned __int16 *)v13);
              unsigned int v517 = (((HIWORD(v516) << 15) | HIWORD(v516)) & 0x1F07C1F)
                   + ((result | (result << 15)) & 0x1F07C1F);
              *(_WORD *)uint64_t v13 = __rev16((((30 * ((v517 >> 5) & 0x100401)) | (15 * ((v517 >> 5) & 0x100401)) | v517) >> 15) & 0x3E0 | ((30 * ((v517 >> 5) & 0x100401)) | (15 * ((v517 >> 5) & 0x100401)) | v517) & 0x7C1F);
            }
            v15 += v202;
            BOOL v518 = &v630[2 * v202];
            if ((unint64_t)v518 >= v11) {
              uint64_t v519 = v511;
            }
            else {
              uint64_t v519 = 0;
            }
            uint64_t v630 = &v518[2 * v519];
            v13 += 2 * v202;
            --v513;
          }
          while (v513);
          v15 += v577;
          v13 += 2 * v576;
          uint64_t v520 = v605;
          unint64_t v521 = &v605[2 * v575];
          if ((unint64_t)v521 >= v580) {
            uint64_t v522 = v512;
          }
          else {
            uint64_t v522 = 0;
          }
          int v523 = &v521[2 * v522];
          uint64_t v524 = v11 + 2 * v522 + 2 * v575;
          if (v580)
          {
            unint64_t v11 = v524;
            uint64_t v520 = v523;
          }
          unint64_t v605 = v520;
          if (!v580) {
            int v523 = &v630[2 * v575];
          }
          uint64_t v630 = v523;
          --v606;
        }
        while (v606);
      }
      return result;
    case 13:
      uint64_t v215 = v30;
      uint64_t v538 = -(v578 * v25);
      uint64_t v559 = -(uint64_t)(v575 * v25);
      uint64_t v216 = 2 * v30;
      int v217 = v604;
      uint64_t v218 = -(uint64_t)v26;
      while (1)
      {
        int v219 = v579;
        unint64_t v220 = v11;
        do
        {
          unsigned int v221 = *v15;
          if (v221 >= 8)
          {
            char v222 = v619 ? *v217 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v222, v221);
            unsigned int v224 = BYTE3(result);
            unint64_t v11 = v220;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v225 = *v8;
                if (v225 < 8) {
                  goto LABEL_319;
                }
              }
              else
              {
                unsigned int v225 = 255;
              }
              uint64_t result = PDAmultiplyPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v225, (unsigned __int16)result, v224, v223);
              if (v607)
              {
                unsigned int v224 = BYTE3(result);
                unint64_t v11 = v220;
LABEL_319:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v224;
                goto LABEL_321;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v220;
            }
          }
LABEL_321:
          v15 += v215;
          v8 += v607;
          unsigned int v226 = &v630[2 * v215];
          if ((unint64_t)v226 >= v11) {
            uint64_t v227 = v218;
          }
          else {
            uint64_t v227 = 0;
          }
          v217 += v619 + v227;
          uint64_t v630 = &v226[2 * v227];
          v13 += v216;
          --v219;
        }
        while (v219);
        if (v580)
        {
          int v228 = &v605[2 * v575];
          uint64_t v229 = v538;
          if ((unint64_t)v228 < v580) {
            uint64_t v229 = 0;
          }
          int v217 = &v604[v578 + v229];
          uint64_t v230 = v559;
          if ((unint64_t)v228 < v580) {
            uint64_t v230 = 0;
          }
          v11 += 2 * v230 + 2 * v575;
          v604 += v578 + v229;
          unint64_t v605 = &v228[2 * v230];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v217 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 14:
      uint64_t v231 = v30;
      uint64_t v539 = -(v578 * v25);
      uint64_t v560 = -(uint64_t)(v575 * v25);
      uint64_t v232 = 2 * v30;
      int v233 = v604;
      uint64_t v234 = -(uint64_t)v26;
      while (1)
      {
        int v235 = v579;
        unint64_t v236 = v11;
        do
        {
          unsigned int v237 = *v15;
          if (v237 >= 8)
          {
            char v238 = v619 ? *v233 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v238, v237);
            unsigned int v239 = BYTE3(result);
            unint64_t v11 = v236;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v240 = *v8;
                if (v240 < 8) {
                  goto LABEL_347;
                }
              }
              else
              {
                unsigned int v240 = 255;
              }
              uint64_t result = PDAscreenPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v240, (unsigned __int16)result, v239);
              if (v607)
              {
                unsigned int v239 = BYTE3(result);
                unint64_t v11 = v236;
LABEL_347:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v239;
                goto LABEL_349;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v236;
            }
          }
LABEL_349:
          v15 += v231;
          v8 += v607;
          unsigned int v241 = &v630[2 * v231];
          if ((unint64_t)v241 >= v11) {
            uint64_t v242 = v234;
          }
          else {
            uint64_t v242 = 0;
          }
          v233 += v619 + v242;
          uint64_t v630 = &v241[2 * v242];
          v13 += v232;
          --v235;
        }
        while (v235);
        if (v580)
        {
          uint64_t v243 = &v605[2 * v575];
          uint64_t v244 = v539;
          if ((unint64_t)v243 < v580) {
            uint64_t v244 = 0;
          }
          int v233 = &v604[v578 + v244];
          uint64_t v245 = v560;
          if ((unint64_t)v243 < v580) {
            uint64_t v245 = 0;
          }
          v11 += 2 * v245 + 2 * v575;
          v604 += v578 + v244;
          unint64_t v605 = &v243[2 * v245];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v233 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 15:
      uint64_t v246 = v30;
      uint64_t v540 = -(v578 * v25);
      uint64_t v561 = -(uint64_t)(v575 * v25);
      uint64_t v247 = 2 * v30;
      uint64_t v248 = v604;
      uint64_t v249 = -(uint64_t)v26;
      while (1)
      {
        int v250 = v579;
        unint64_t v251 = v11;
        do
        {
          unsigned int v252 = *v15;
          if (v252 >= 8)
          {
            char v253 = v619 ? *v248 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v253, v252);
            unsigned int v254 = BYTE3(result);
            unint64_t v11 = v251;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v255 = *v8;
                if (v255 < 8) {
                  goto LABEL_375;
                }
              }
              else
              {
                unsigned int v255 = 255;
              }
              uint64_t result = PDAoverlayPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v255, (unsigned __int16)result, v254);
              if (v607)
              {
                unsigned int v254 = BYTE3(result);
                unint64_t v11 = v251;
LABEL_375:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v254;
                goto LABEL_377;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v251;
            }
          }
LABEL_377:
          v15 += v246;
          v8 += v607;
          char v256 = &v630[2 * v246];
          if ((unint64_t)v256 >= v11) {
            uint64_t v257 = v249;
          }
          else {
            uint64_t v257 = 0;
          }
          v248 += v619 + v257;
          uint64_t v630 = &v256[2 * v257];
          v13 += v247;
          --v250;
        }
        while (v250);
        if (v580)
        {
          int v258 = &v605[2 * v575];
          uint64_t v259 = v540;
          if ((unint64_t)v258 < v580) {
            uint64_t v259 = 0;
          }
          uint64_t v248 = &v604[v578 + v259];
          uint64_t v260 = v561;
          if ((unint64_t)v258 < v580) {
            uint64_t v260 = 0;
          }
          v11 += 2 * v260 + 2 * v575;
          v604 += v578 + v259;
          unint64_t v605 = &v258[2 * v260];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v248 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 16:
      uint64_t v261 = v30;
      uint64_t v541 = -(v578 * v25);
      uint64_t v562 = -(uint64_t)(v575 * v25);
      uint64_t v262 = 2 * v30;
      int v263 = v604;
      uint64_t v264 = -(uint64_t)v26;
      while (1)
      {
        int v265 = v579;
        unint64_t v266 = v11;
        do
        {
          unsigned int v267 = *v15;
          if (v267 >= 8)
          {
            char v268 = v619 ? *v263 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v268, v267);
            unsigned int v269 = BYTE3(result);
            unint64_t v11 = v266;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v270 = *v8;
                if (v270 < 8) {
                  goto LABEL_403;
                }
              }
              else
              {
                unsigned int v270 = 255;
              }
              uint64_t result = PDAdarkenPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v270, (unsigned __int16)result, v269);
              if (v607)
              {
                unsigned int v269 = BYTE3(result);
                unint64_t v11 = v266;
LABEL_403:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v269;
                goto LABEL_405;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v266;
            }
          }
LABEL_405:
          v15 += v261;
          v8 += v607;
          int v271 = &v630[2 * v261];
          if ((unint64_t)v271 >= v11) {
            uint64_t v272 = v264;
          }
          else {
            uint64_t v272 = 0;
          }
          v263 += v619 + v272;
          uint64_t v630 = &v271[2 * v272];
          v13 += v262;
          --v265;
        }
        while (v265);
        if (v580)
        {
          unint64_t v273 = &v605[2 * v575];
          uint64_t v274 = v541;
          if ((unint64_t)v273 < v580) {
            uint64_t v274 = 0;
          }
          int v263 = &v604[v578 + v274];
          uint64_t v275 = v562;
          if ((unint64_t)v273 < v580) {
            uint64_t v275 = 0;
          }
          v11 += 2 * v275 + 2 * v575;
          v604 += v578 + v274;
          unint64_t v605 = &v273[2 * v275];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v263 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 17:
      uint64_t v276 = v30;
      uint64_t v542 = -(v578 * v25);
      uint64_t v563 = -(uint64_t)(v575 * v25);
      uint64_t v277 = 2 * v30;
      uint64_t v278 = v604;
      uint64_t v279 = -(uint64_t)v26;
      while (1)
      {
        int v280 = v579;
        unint64_t v281 = v11;
        do
        {
          unsigned int v282 = *v15;
          if (v282 >= 8)
          {
            char v283 = v619 ? *v278 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v283, v282);
            unsigned int v284 = BYTE3(result);
            unint64_t v11 = v281;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v285 = *v8;
                if (v285 < 8) {
                  goto LABEL_431;
                }
              }
              else
              {
                unsigned int v285 = 255;
              }
              uint64_t result = PDAlightenPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v285, (unsigned __int16)result, v284);
              if (v607)
              {
                unsigned int v284 = BYTE3(result);
                unint64_t v11 = v281;
LABEL_431:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v284;
                goto LABEL_433;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v281;
            }
          }
LABEL_433:
          v15 += v276;
          v8 += v607;
          uint64_t v286 = &v630[2 * v276];
          if ((unint64_t)v286 >= v11) {
            uint64_t v287 = v279;
          }
          else {
            uint64_t v287 = 0;
          }
          v278 += v619 + v287;
          uint64_t v630 = &v286[2 * v287];
          v13 += v277;
          --v280;
        }
        while (v280);
        if (v580)
        {
          int v288 = &v605[2 * v575];
          uint64_t v289 = v542;
          if ((unint64_t)v288 < v580) {
            uint64_t v289 = 0;
          }
          uint64_t v278 = &v604[v578 + v289];
          uint64_t v290 = v563;
          if ((unint64_t)v288 < v580) {
            uint64_t v290 = 0;
          }
          v11 += 2 * v290 + 2 * v575;
          v604 += v578 + v289;
          unint64_t v605 = &v288[2 * v290];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v278 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 18:
      uint64_t v291 = v30;
      uint64_t v543 = -(v578 * v25);
      uint64_t v564 = -(uint64_t)(v575 * v25);
      uint64_t v292 = 2 * v30;
      unsigned int v293 = v604;
      uint64_t v294 = -(uint64_t)v26;
      while (1)
      {
        int v295 = v579;
        unint64_t v296 = v11;
        do
        {
          unsigned int v297 = *v15;
          if (v297 >= 8)
          {
            char v298 = v619 ? *v293 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v298, v297);
            unsigned int v299 = BYTE3(result);
            unint64_t v11 = v296;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v300 = *v8;
                if (v300 < 8) {
                  goto LABEL_459;
                }
              }
              else
              {
                unsigned int v300 = 255;
              }
              uint64_t result = PDAcolordodgePDA(bswap32(*(unsigned __int16 *)v13) >> 16, v300, (unsigned __int16)result, v299);
              if (v607)
              {
                unsigned int v299 = BYTE3(result);
                unint64_t v11 = v296;
LABEL_459:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v299;
                goto LABEL_461;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v296;
            }
          }
LABEL_461:
          v15 += v291;
          v8 += v607;
          float v301 = &v630[2 * v291];
          if ((unint64_t)v301 >= v11) {
            uint64_t v302 = v294;
          }
          else {
            uint64_t v302 = 0;
          }
          v293 += v619 + v302;
          uint64_t v630 = &v301[2 * v302];
          v13 += v292;
          --v295;
        }
        while (v295);
        if (v580)
        {
          uint64_t v303 = &v605[2 * v575];
          uint64_t v304 = v543;
          if ((unint64_t)v303 < v580) {
            uint64_t v304 = 0;
          }
          unsigned int v293 = &v604[v578 + v304];
          uint64_t v305 = v564;
          if ((unint64_t)v303 < v580) {
            uint64_t v305 = 0;
          }
          v11 += 2 * v305 + 2 * v575;
          v604 += v578 + v304;
          unint64_t v605 = &v303[2 * v305];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v293 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 19:
      uint64_t v306 = v30;
      uint64_t v544 = -(v578 * v25);
      uint64_t v565 = -(uint64_t)(v575 * v25);
      uint64_t v307 = 2 * v30;
      unsigned int v308 = v604;
      uint64_t v309 = -(uint64_t)v26;
      while (1)
      {
        int v310 = v579;
        unint64_t v311 = v11;
        do
        {
          unsigned int v312 = *v15;
          if (v312 >= 8)
          {
            char v313 = v619 ? *v308 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v313, v312);
            unsigned int v314 = BYTE3(result);
            unint64_t v11 = v311;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v315 = *v8;
                if (v315 < 8) {
                  goto LABEL_487;
                }
              }
              else
              {
                unsigned int v315 = 255;
              }
              uint64_t result = PDAcolorburnPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v315, (unsigned __int16)result, v314);
              if (v607)
              {
                unsigned int v314 = BYTE3(result);
                unint64_t v11 = v311;
LABEL_487:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v314;
                goto LABEL_489;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v311;
            }
          }
LABEL_489:
          v15 += v306;
          v8 += v607;
          uint64_t v316 = &v630[2 * v306];
          if ((unint64_t)v316 >= v11) {
            uint64_t v317 = v309;
          }
          else {
            uint64_t v317 = 0;
          }
          v308 += v619 + v317;
          uint64_t v630 = &v316[2 * v317];
          v13 += v307;
          --v310;
        }
        while (v310);
        if (v580)
        {
          unint64_t v318 = &v605[2 * v575];
          uint64_t v319 = v544;
          if ((unint64_t)v318 < v580) {
            uint64_t v319 = 0;
          }
          unsigned int v308 = &v604[v578 + v319];
          uint64_t v320 = v565;
          if ((unint64_t)v318 < v580) {
            uint64_t v320 = 0;
          }
          v11 += 2 * v320 + 2 * v575;
          v604 += v578 + v319;
          unint64_t v605 = &v318[2 * v320];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v308 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 20:
      uint64_t v321 = v30;
      uint64_t v545 = -(v578 * v25);
      uint64_t v566 = -(uint64_t)(v575 * v25);
      uint64_t v322 = 2 * v30;
      int v323 = v604;
      uint64_t v324 = -(uint64_t)v26;
      while (1)
      {
        int v325 = v579;
        unint64_t v326 = v11;
        do
        {
          unsigned int v327 = *v15;
          if (v327 >= 8)
          {
            char v328 = v619 ? *v323 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v328, v327);
            unsigned int v329 = BYTE3(result);
            unint64_t v11 = v326;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v330 = *v8;
                if (v330 < 8) {
                  goto LABEL_515;
                }
              }
              else
              {
                unsigned int v330 = 255;
              }
              uint64_t result = PDAsoftlightPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v330, (unsigned __int16)result, v329);
              if (v607)
              {
                unsigned int v329 = BYTE3(result);
                unint64_t v11 = v326;
LABEL_515:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v329;
                goto LABEL_517;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v326;
            }
          }
LABEL_517:
          v15 += v321;
          v8 += v607;
          BOOL v331 = &v630[2 * v321];
          if ((unint64_t)v331 >= v11) {
            uint64_t v332 = v324;
          }
          else {
            uint64_t v332 = 0;
          }
          v323 += v619 + v332;
          uint64_t v630 = &v331[2 * v332];
          v13 += v322;
          --v325;
        }
        while (v325);
        if (v580)
        {
          unsigned int v333 = &v605[2 * v575];
          uint64_t v334 = v545;
          if ((unint64_t)v333 < v580) {
            uint64_t v334 = 0;
          }
          int v323 = &v604[v578 + v334];
          uint64_t v335 = v566;
          if ((unint64_t)v333 < v580) {
            uint64_t v335 = 0;
          }
          v11 += 2 * v335 + 2 * v575;
          v604 += v578 + v334;
          unint64_t v605 = &v333[2 * v335];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v323 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 21:
      uint64_t v336 = v30;
      uint64_t v546 = -(v578 * v25);
      uint64_t v567 = -(uint64_t)(v575 * v25);
      uint64_t v337 = 2 * v30;
      uint64_t v338 = v604;
      uint64_t v339 = -(uint64_t)v26;
      while (1)
      {
        int v340 = v579;
        unint64_t v341 = v11;
        do
        {
          unsigned int v342 = *v15;
          if (v342 >= 8)
          {
            char v343 = v619 ? *v338 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v343, v342);
            unsigned int v344 = BYTE3(result);
            unint64_t v11 = v341;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v345 = *v8;
                if (v345 < 8) {
                  goto LABEL_543;
                }
              }
              else
              {
                unsigned int v345 = 255;
              }
              uint64_t result = PDAhardlightPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v345, (unsigned __int16)result, v344);
              if (v607)
              {
                unsigned int v344 = BYTE3(result);
                unint64_t v11 = v341;
LABEL_543:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v344;
                goto LABEL_545;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v341;
            }
          }
LABEL_545:
          v15 += v336;
          v8 += v607;
          BOOL v346 = &v630[2 * v336];
          if ((unint64_t)v346 >= v11) {
            uint64_t v347 = v339;
          }
          else {
            uint64_t v347 = 0;
          }
          v338 += v619 + v347;
          uint64_t v630 = &v346[2 * v347];
          v13 += v337;
          --v340;
        }
        while (v340);
        if (v580)
        {
          unsigned int v348 = &v605[2 * v575];
          uint64_t v349 = v546;
          if ((unint64_t)v348 < v580) {
            uint64_t v349 = 0;
          }
          uint64_t v338 = &v604[v578 + v349];
          uint64_t v350 = v567;
          if ((unint64_t)v348 < v580) {
            uint64_t v350 = 0;
          }
          v11 += 2 * v350 + 2 * v575;
          v604 += v578 + v349;
          unint64_t v605 = &v348[2 * v350];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v338 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 22:
      uint64_t v351 = v30;
      uint64_t v547 = -(v578 * v25);
      uint64_t v568 = -(uint64_t)(v575 * v25);
      uint64_t v352 = 2 * v30;
      uint64_t v353 = v604;
      uint64_t v354 = -(uint64_t)v26;
      while (1)
      {
        int v355 = v579;
        unint64_t v356 = v11;
        do
        {
          unsigned int v357 = *v15;
          if (v357 >= 8)
          {
            char v358 = v619 ? *v353 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v358, v357);
            unsigned int v359 = BYTE3(result);
            unint64_t v11 = v356;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v360 = *v8;
                if (v360 < 8) {
                  goto LABEL_571;
                }
              }
              else
              {
                unsigned int v360 = 255;
              }
              uint64_t result = PDAdifferencePDA(bswap32(*(unsigned __int16 *)v13) >> 16, v360, (unsigned __int16)result, v359);
              if (v607)
              {
                unsigned int v359 = BYTE3(result);
                unint64_t v11 = v356;
LABEL_571:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v359;
                goto LABEL_573;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v356;
            }
          }
LABEL_573:
          v15 += v351;
          v8 += v607;
          char v361 = &v630[2 * v351];
          if ((unint64_t)v361 >= v11) {
            uint64_t v362 = v354;
          }
          else {
            uint64_t v362 = 0;
          }
          v353 += v619 + v362;
          uint64_t v630 = &v361[2 * v362];
          v13 += v352;
          --v355;
        }
        while (v355);
        if (v580)
        {
          unsigned int v363 = &v605[2 * v575];
          uint64_t v364 = v547;
          if ((unint64_t)v363 < v580) {
            uint64_t v364 = 0;
          }
          uint64_t v353 = &v604[v578 + v364];
          uint64_t v365 = v568;
          if ((unint64_t)v363 < v580) {
            uint64_t v365 = 0;
          }
          v11 += 2 * v365 + 2 * v575;
          v604 += v578 + v364;
          unint64_t v605 = &v363[2 * v365];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v353 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 23:
      uint64_t v366 = v30;
      uint64_t v548 = -(v578 * v25);
      uint64_t v569 = -(uint64_t)(v575 * v25);
      uint64_t v367 = 2 * v30;
      uint64_t v368 = v604;
      uint64_t v369 = -(uint64_t)v26;
      while (1)
      {
        int v370 = v579;
        unint64_t v371 = v11;
        do
        {
          unsigned int v372 = *v15;
          if (v372 >= 8)
          {
            char v373 = v619 ? *v368 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v373, v372);
            unsigned int v374 = BYTE3(result);
            unint64_t v11 = v371;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v375 = *v8;
                if (v375 < 8) {
                  goto LABEL_599;
                }
              }
              else
              {
                unsigned int v375 = 255;
              }
              uint64_t result = PDAexclusionPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v375, (unsigned __int16)result, v374);
              if (v607)
              {
                unsigned int v374 = BYTE3(result);
                unint64_t v11 = v371;
LABEL_599:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v374;
                goto LABEL_601;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v371;
            }
          }
LABEL_601:
          v15 += v366;
          v8 += v607;
          uint64_t v376 = &v630[2 * v366];
          if ((unint64_t)v376 >= v11) {
            uint64_t v377 = v369;
          }
          else {
            uint64_t v377 = 0;
          }
          v368 += v619 + v377;
          uint64_t v630 = &v376[2 * v377];
          v13 += v367;
          --v370;
        }
        while (v370);
        if (v580)
        {
          BOOL v378 = &v605[2 * v575];
          uint64_t v379 = v548;
          if ((unint64_t)v378 < v580) {
            uint64_t v379 = 0;
          }
          uint64_t v368 = &v604[v578 + v379];
          uint64_t v380 = v569;
          if ((unint64_t)v378 < v580) {
            uint64_t v380 = 0;
          }
          v11 += 2 * v380 + 2 * v575;
          v604 += v578 + v379;
          unint64_t v605 = &v378[2 * v380];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v368 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 24:
      uint64_t v381 = v30;
      uint64_t v549 = -(v578 * v25);
      uint64_t v570 = -(uint64_t)(v575 * v25);
      uint64_t v382 = 2 * v30;
      uint64_t v383 = v604;
      uint64_t v384 = -(uint64_t)v26;
      while (1)
      {
        int v385 = v579;
        unint64_t v386 = v11;
        do
        {
          unsigned int v387 = *v15;
          if (v387 >= 8)
          {
            char v388 = v619 ? *v383 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v388, v387);
            unsigned int v389 = BYTE3(result);
            unint64_t v11 = v386;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v390 = *v8;
                if (v390 < 8) {
                  goto LABEL_627;
                }
              }
              else
              {
                unsigned int v390 = 255;
              }
              uint64_t result = PDAhuePDA(bswap32(*(unsigned __int16 *)v13) >> 16, v390, (unsigned __int16)result, v389);
              if (v607)
              {
                unsigned int v389 = BYTE3(result);
                unint64_t v11 = v386;
LABEL_627:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v389;
                goto LABEL_629;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v386;
            }
          }
LABEL_629:
          v15 += v381;
          v8 += v607;
          char v391 = &v630[2 * v381];
          if ((unint64_t)v391 >= v11) {
            uint64_t v392 = v384;
          }
          else {
            uint64_t v392 = 0;
          }
          v383 += v619 + v392;
          uint64_t v630 = &v391[2 * v392];
          v13 += v382;
          --v385;
        }
        while (v385);
        if (v580)
        {
          uint64_t v393 = &v605[2 * v575];
          uint64_t v394 = v549;
          if ((unint64_t)v393 < v580) {
            uint64_t v394 = 0;
          }
          uint64_t v383 = &v604[v578 + v394];
          uint64_t v395 = v570;
          if ((unint64_t)v393 < v580) {
            uint64_t v395 = 0;
          }
          v11 += 2 * v395 + 2 * v575;
          v604 += v578 + v394;
          unint64_t v605 = &v393[2 * v395];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v383 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 25:
      uint64_t v396 = v30;
      uint64_t v550 = -(v578 * v25);
      uint64_t v571 = -(uint64_t)(v575 * v25);
      uint64_t v397 = 2 * v30;
      int v398 = v604;
      uint64_t v399 = -(uint64_t)v26;
      while (1)
      {
        int v400 = v579;
        unint64_t v401 = v11;
        do
        {
          unsigned int v402 = *v15;
          if (v402 >= 8)
          {
            char v403 = v619 ? *v398 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v403, v402);
            unsigned int v404 = BYTE3(result);
            unint64_t v11 = v401;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v405 = *v8;
                if (v405 < 8) {
                  goto LABEL_655;
                }
              }
              else
              {
                unsigned int v405 = 255;
              }
              uint64_t result = PDAsaturationPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v405, (unsigned __int16)result, v404);
              if (v607)
              {
                unsigned int v404 = BYTE3(result);
                unint64_t v11 = v401;
LABEL_655:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v404;
                goto LABEL_657;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v401;
            }
          }
LABEL_657:
          v15 += v396;
          v8 += v607;
          unsigned int v406 = &v630[2 * v396];
          if ((unint64_t)v406 >= v11) {
            uint64_t v407 = v399;
          }
          else {
            uint64_t v407 = 0;
          }
          v398 += v619 + v407;
          uint64_t v630 = &v406[2 * v407];
          v13 += v397;
          --v400;
        }
        while (v400);
        if (v580)
        {
          uint64_t v408 = &v605[2 * v575];
          uint64_t v409 = v550;
          if ((unint64_t)v408 < v580) {
            uint64_t v409 = 0;
          }
          int v398 = &v604[v578 + v409];
          uint64_t v410 = v571;
          if ((unint64_t)v408 < v580) {
            uint64_t v410 = 0;
          }
          v11 += 2 * v410 + 2 * v575;
          v604 += v578 + v409;
          unint64_t v605 = &v408[2 * v410];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v398 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 26:
      uint64_t v411 = v30;
      uint64_t v551 = -(v578 * v25);
      uint64_t v572 = -(uint64_t)(v575 * v25);
      uint64_t v412 = 2 * v30;
      unint64_t v413 = v604;
      uint64_t v414 = -(uint64_t)v26;
      while (1)
      {
        int v415 = v579;
        unint64_t v416 = v11;
        do
        {
          unsigned int v417 = *v15;
          if (v417 >= 8)
          {
            char v418 = v619 ? *v413 : -1;
            uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v418, v417);
            unsigned int v419 = BYTE3(result);
            unint64_t v11 = v416;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                unsigned int v420 = *v8;
                if (v420 < 8) {
                  goto LABEL_683;
                }
              }
              else
              {
                unsigned int v420 = 255;
              }
              uint64_t result = PDAluminosityPDA((unsigned __int16)result, v419, bswap32(*(unsigned __int16 *)v13) >> 16, v420);
              if (v607)
              {
                unsigned int v419 = BYTE3(result);
                unint64_t v11 = v416;
LABEL_683:
                *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
                *uint64_t v8 = v419;
                goto LABEL_685;
              }
              *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
              unint64_t v11 = v416;
            }
          }
LABEL_685:
          v15 += v411;
          v8 += v607;
          unsigned int v421 = &v630[2 * v411];
          if ((unint64_t)v421 >= v11) {
            uint64_t v422 = v414;
          }
          else {
            uint64_t v422 = 0;
          }
          v413 += v619 + v422;
          uint64_t v630 = &v421[2 * v422];
          v13 += v412;
          --v415;
        }
        while (v415);
        if (v580)
        {
          unsigned int v423 = &v605[2 * v575];
          uint64_t v424 = v551;
          if ((unint64_t)v423 < v580) {
            uint64_t v424 = 0;
          }
          unint64_t v413 = &v604[v578 + v424];
          uint64_t v425 = v572;
          if ((unint64_t)v423 < v580) {
            uint64_t v425 = 0;
          }
          v11 += 2 * v425 + 2 * v575;
          v604 += v578 + v424;
          unint64_t v605 = &v423[2 * v425];
          uint64_t v630 = v605;
        }
        else
        {
          v630 += 2 * v575;
          v413 += v578;
        }
        v15 += v577;
        v13 += 2 * v576;
        v8 += v574;
        if (!--v606) {
          return result;
        }
      }
    case 27:
      uint64_t v426 = v30;
      uint64_t v552 = -(v578 * v25);
      uint64_t v573 = -(uint64_t)(v575 * v25);
      uint64_t v427 = 2 * v30;
      BOOL v428 = v604;
      uint64_t v429 = -(uint64_t)v26;
      break;
    default:
      return result;
  }
  do
  {
    int v430 = v579;
    unint64_t v431 = v11;
    do
    {
      unsigned int v432 = *v15;
      if (v432 >= 8)
      {
        char v433 = v619 ? *v428 : -1;
        uint64_t result = PDAM(bswap32(*(unsigned __int16 *)v630) >> 16, v433, v432);
        unsigned int v434 = BYTE3(result);
        unint64_t v11 = v431;
        if (BYTE3(result) >= 8u)
        {
          if (v607)
          {
            unsigned int v435 = *v8;
            if (v435 < 8) {
              goto LABEL_711;
            }
          }
          else
          {
            unsigned int v435 = 255;
          }
          uint64_t result = PDAluminosityPDA(bswap32(*(unsigned __int16 *)v13) >> 16, v435, (unsigned __int16)result, v434);
          if (v607)
          {
            unsigned int v434 = BYTE3(result);
            unint64_t v11 = v431;
LABEL_711:
            *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
            *uint64_t v8 = v434;
            goto LABEL_713;
          }
          *(_WORD *)uint64_t v13 = bswap32(result) >> 16;
          unint64_t v11 = v431;
        }
      }
LABEL_713:
      v15 += v426;
      v8 += v607;
      uint64_t v436 = &v630[2 * v426];
      if ((unint64_t)v436 >= v11) {
        uint64_t v437 = v429;
      }
      else {
        uint64_t v437 = 0;
      }
      v428 += v619 + v437;
      uint64_t v630 = &v436[2 * v437];
      v13 += v427;
      --v430;
    }
    while (v430);
    if (v580)
    {
      int v438 = &v605[2 * v575];
      uint64_t v439 = v552;
      if ((unint64_t)v438 < v580) {
        uint64_t v439 = 0;
      }
      BOOL v428 = &v604[v578 + v439];
      uint64_t v440 = v573;
      if ((unint64_t)v438 < v580) {
        uint64_t v440 = 0;
      }
      v11 += 2 * v440 + 2 * v575;
      v604 += v578 + v439;
      unint64_t v605 = &v438[2 * v440];
      uint64_t v630 = v605;
    }
    else
    {
      v630 += 2 * v575;
      v428 += v578;
    }
    v15 += v577;
    v13 += 2 * v576;
    v8 += v574;
    --v606;
  }
  while (v606);
  return result;
}

void *RGB555_pattern(uint64_t a1, void *a2, unsigned int a3, int a4, float *a5, int a6, float a7)
{
  unint64_t v11 = *(float **)(*(void *)a1 + 64);
  float v12 = *v11;
  float v13 = v11[1];
  float v14 = v11[3];
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    float v15 = v13;
    if (v13 >= a7)
    {
      float v15 = a7;
      if (v12 > a7) {
        float v15 = v12;
      }
    }
    float v16 = v15 * v11[2];
    if (a5) {
      int v17 = a4;
    }
    else {
      int v17 = 0;
    }
    if (v17 == 1)
    {
      if (*a5 < v12) {
        float v30 = v12;
      }
      else {
        float v30 = *a5;
      }
      if (*a5 <= v13) {
        float v31 = v30;
      }
      else {
        float v31 = v13;
      }
      uint64_t v18 = (int)(float)(v14 + (float)(v31 * v16));
      int v19 = (int)(float)(v14 + (float)(v31 * v16));
      int v20 = v19;
      goto LABEL_74;
    }
    if (v17 == 4)
    {
      float v32 = a5[4];
      float v33 = *a5;
      float v34 = a5[1];
      float v35 = a5[2];
      if (v32 < v12) {
        float v36 = v12;
      }
      else {
        float v36 = a5[4];
      }
      if (v32 <= v13) {
        float v37 = v36;
      }
      else {
        float v37 = v13;
      }
      if (v33 < v12) {
        float v38 = v12;
      }
      else {
        float v38 = *a5;
      }
      if (v33 <= v13) {
        float v39 = v38;
      }
      else {
        float v39 = v13;
      }
      if (v34 < v12) {
        float v40 = v12;
      }
      else {
        float v40 = a5[1];
      }
      if (v34 <= v13) {
        float v41 = v40;
      }
      else {
        float v41 = v13;
      }
      if (v35 < v12) {
        float v42 = v12;
      }
      else {
        float v42 = a5[2];
      }
      if (v35 <= v13) {
        float v43 = v42;
      }
      else {
        float v43 = v13;
      }
      float v44 = (float)(v13 - v39) - v37;
      float v45 = (float)(v13 - v41) - v37;
      float v46 = (float)(v13 - v43) - v37;
      if (v44 >= v12) {
        float v47 = v14 + (float)(v44 * v16);
      }
      else {
        float v47 = v12;
      }
      if (v45 >= v12) {
        float v48 = v14 + (float)(v45 * v16);
      }
      else {
        float v48 = v12;
      }
      if (v46 >= v12) {
        float v29 = v14 + (float)(v46 * v16);
      }
      else {
        float v29 = v12;
      }
      uint64_t v18 = (int)v47;
      int v19 = (int)v48;
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 0;
      int v20 = 0;
      if (v17 != 3)
      {
LABEL_74:
        uint64_t v49 = (int)(float)(v14 + v16);
        if (a6 && (v18 | v49) | (v19 | v20))
        {
          *(_OWORD *)a2 = xmmword_1850CDA50;
          a2[2] = 0x2000000010;
          a2[6] = (v18 << 32) | (v49 << 48) | ((uint64_t)v19 << 16) | v20;
          *((_DWORD *)a2 + 6) = 16 * ((int)v49 < 7936);
          if ((int)v49 >= 7936) {
            unint64_t v50 = 0;
          }
          else {
            unint64_t v50 = (char *)(a2 + 6);
          }
          a2[4] = a2 + 6;
          a2[5] = v50;
        }
        else
        {
          unsigned int v51 = (4 * (_WORD)v18 + 512) & 0x7C00 | ((v19 + 128) >> 3) & 0x3FF;
          int v52 = ((_WORD)v20 + 128) & 0x1F00 | (((v51 >> 5) & 0x3FF) << 13);
          *(_OWORD *)a2 = xmmword_1850CDA60;
          *((_DWORD *)a2 + 6) = 0;
          a2[2] = 1;
          *((_DWORD *)a2 + 12) = v52 | (v51 >> 8) | ((v52 | (v51 >> 8)) << 16);
          a2[4] = a2 + 6;
          if ((int)v49 > 7807)
          {
            a2[5] = 0;
          }
          else
          {
            *((_DWORD *)a2 + 13) = 16843009
                                 * (((v49 + 128) >> 5) & 0xF8 | ((v49 + 128) >> 10) & 7);
            a2[5] = (char *)a2 + 52;
          }
        }
        return a2;
      }
      float v21 = a5[1];
      float v22 = a5[2];
      if (*a5 < v12) {
        float v23 = v12;
      }
      else {
        float v23 = *a5;
      }
      if (*a5 <= v13) {
        float v24 = v23;
      }
      else {
        float v24 = v13;
      }
      if (v21 < v12) {
        float v25 = v12;
      }
      else {
        float v25 = a5[1];
      }
      if (v21 <= v13) {
        float v26 = v25;
      }
      else {
        float v26 = v13;
      }
      if (v22 < v12) {
        float v27 = v12;
      }
      else {
        float v27 = a5[2];
      }
      if (v22 <= v13) {
        float v28 = v27;
      }
      else {
        float v28 = v13;
      }
      uint64_t v18 = (int)(float)(v14 + (float)(v24 * v16));
      int v19 = (int)(float)(v14 + (float)(v26 * v16));
      float v29 = v14 + (float)(v28 * v16);
    }
    int v20 = (int)v29;
    goto LABEL_74;
  }
  return a2;
}

CFStringRef image_provider_copy_debug_description(uint64_t a1)
{
  if (!os_variant_has_internal_content()) {
    return 0;
  }

  return create_debug_string(a1, v2, v3, v4, v5, v6, v7, v8);
}

CFStringRef image_provider_copy_format_description(uint64_t a1)
{
  if (!os_variant_has_internal_content()) {
    return 0;
  }

  return create_debug_string(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t CGImageProviderGetTypeID()
{
  if (kCGImageProviderContentHeadroom_block_invoke_once != -1) {
    dispatch_once(&kCGImageProviderContentHeadroom_block_invoke_once, &__block_literal_global_89_3449);
  }
  return CGImageProviderGetTypeID_image_provider_type_id;
}

CFTypeRef CGImageProviderRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void find_supported_options(void *key, void *value, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v6)
    {
      Property = 0;
      if (key)
      {
        uint64_t v8 = *(void *)(v6 + 120);
        if (v8) {
          Property = CGPropertiesGetProperty(v8, key);
        }
      }
    }
    else
    {
      Property = 0;
    }
    if (Property == (const void *)*MEMORY[0x1E4F1CFD0])
    {
      *(unsigned char *)a3 = 1;
      int v9 = *(__CFDictionary **)(a3 + 16);
      CFDictionarySetValue(v9, key, value);
    }
  }
}

uint64_t copy_with_options_copy_block_set_with_options(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (*(unsigned char *)(a1 + 152))
  {
    if (a3)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a3);
      if (MutableCopy)
      {
        CFMutableDictionaryRef v5 = MutableCopy;
        uint64_t v6 = *(void **)(a1 + 160);
        CFTypeID v7 = CFGetTypeID(MutableCopy);
        if (v7 == CFDictionaryGetTypeID())
        {
          int IsMutable = _CFDictionaryIsMutable();
          if (v6)
          {
            if (IsMutable)
            {
              CFTypeID v9 = CFGetTypeID(v5);
              if (v9 == CFDictionaryGetTypeID()) {
                CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)add_keys_and_values, v6);
              }
            }
          }
        }
        uint64_t v10 = CGImageProviderCopyImageBlockSetWithOptions(*(void *)(a1 + 144), (uint64_t)v5);
        CFRelease(v5);
        return v10;
      }
      uint64_t v12 = *(void *)(a1 + 144);
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 160);
      uint64_t v12 = *(void *)(a1 + 144);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 144);
    uint64_t v13 = (uint64_t)a3;
  }

  return CGImageProviderCopyImageBlockSetWithOptions(v12, v13);
}

void copy_with_options_release_info(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 144);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 160);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t copy_with_options_copy_block_set(uint64_t a1)
{
  return CGImageProviderCopyImageBlockSetWithOptions(*(void *)(a1 + 144), 0);
}

uint64_t CGImageProviderCopyImageBlockSet(uint64_t a1)
{
  return CGImageProviderCopyImageBlockSetWithOptions(a1, 0);
}

uint64_t CGImageProviderCopyIOSurfaceSet(uint64_t a1)
{
  if (a1 && *(_DWORD *)(a1 + 64) == 3 && (v1 = *(uint64_t (**)(void))(a1 + 88)) != 0) {
    return v1(*(void *)(a1 + 56));
  }
  else {
    return 0;
  }
}

uint64_t CGImageProviderSetContentHeadroom(uint64_t result, float a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 40);
    float v3 = 1.0;
    if (v2)
    {
      uint64_t v4 = *(unsigned char **)(v2 + 24);
      if (v4[16] || v4[17] || v4[13])
      {
        if (a2 >= 1.0) {
          float v3 = a2;
        }
        if (a2 == 0.0) {
          float v3 = 0.0;
        }
      }
    }
    *(float *)(result + 132) = v3;
  }
  return result;
}

uint64_t CPPDFStyleEqual(uint64_t a1, uint64_t a2, __int16 a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    if ((a3 & 0x800) != 0 && *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
    if ((a3 & 0x400) != 0)
    {
      CFTypeID v7 = *(void **)(a1 + 64);
      if (v7 != *(void **)(a2 + 64))
      {
        uint64_t result = objc_msgSend(v7, "isSameFontAs:");
        if (!result) {
          return result;
        }
      }
    }
    if (a3)
    {
      uint64_t result = CGColorEqualToColor(*(CGColorRef *)a1, *(CGColorRef *)a2);
      if (!result) {
        return result;
      }
    }
    if ((a3 & 2) != 0 && *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
    if ((a3 & 4) == 0
      || (uint64_t result = CGColorEqualToColor(*(CGColorRef *)(a1 + 16), *(CGColorRef *)(a2 + 16)), result))
    {
      if ((a3 & 8) != 0 && *(void *)(a1 + 24) != *(void *)(a2 + 24)
        || (a3 & 0x10) != 0 && *(double *)(a1 + 32) != *(double *)(a2 + 32)
        || (a3 & 0x20) != 0 && *(double *)(a1 + 40) != *(double *)(a2 + 40)
        || (a3 & 0x200) != 0 && *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
        || (a3 & 0x40) != 0 && *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)
        || (a3 & 0x100) != 0 && *(double *)(a1 + 56) != *(double *)(a2 + 56)
        || (a3 & 0x1000) != 0 && *(void *)(a1 + 80) != *(void *)(a2 + 80)
        || (a3 & 0x2000) != 0 && *(void *)(a1 + 88) != *(void *)(a2 + 88))
      {
        return 0;
      }
      if ((a3 & 0x4000) == 0) {
        return 1;
      }
      uint64_t result = CGColorEqualToColor(*(CGColorRef *)(a1 + 96), *(CGColorRef *)(a2 + 96));
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t hasConsistentSpacing(uint64_t a1, unsigned int *a2, void *a3, int *a4)
{
  int v4 = *a4 | a2[3];
  *a4 = v4;
  int v5 = v4 & 0x45;
  int v6 = v4 & 0x8A;
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 12) & 0xAA) == 0 && (a2[3] & 0x55) == 0) {
    return 1;
  }
  int v10 = *(_DWORD *)(a1 + 4);
  if (!v10) {
    return 1;
  }
  if (!a2[1]) {
    return 1;
  }
  uint64_t v11 = [a3 charAtIndex:(v10 + *(_DWORD *)a1 - 1)];
  uint64_t v12 = [a3 charAtIndex:*a2];
  uint64_t v13 = *(void *)(v11 + 160);
  uint64_t v14 = *(void *)(v12 + 160);
  if (v13 == v14) {
    return 1;
  }
  if (v13) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    return 0;
  }
  int v17 = *(void **)(v13 + 64);
  if (v17 == *(void **)(v14 + 64)) {
    return 1;
  }
  uint64_t result = objc_msgSend(v17, "isSameFontAs:");
  if (result) {
    return 1;
  }
  return result;
}

uint64_t markSplitByGuide(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(int *)(a2 + 8) >= 2
    && (isSplitByStripArray(a1, a2, *(void **)a4, 1)
     || isSplitByStripArray(a1, a2, *(void **)(a4 + 8), 0)
     || isSplitByStripArray(a1, a2, *(void **)(a4 + 16), 0)
     || (*(unsigned char *)(a1 + 12) & 0xA) != 0
     || (*(unsigned char *)(a2 + 12) & 5) != 0))
  {
    *(void *)(a4 + 24) = a2;
  }
  return 1;
}

BOOL isSplitByStripArray(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unint64_t v8 = [a3 count];
  if (v8)
  {
    uint64_t v9 = 0;
    BOOL v10 = 1;
    CGSize size = CGRectNull.size;
    CGPoint origin = CGRectNull.origin;
    while (1)
    {
      CGPoint v18 = origin;
      CGSize v19 = size;
      objc_msgSend((id)objc_msgSend(a3, "objectAtIndex:", v9, size, origin), "getValue:", &v18);
      if (v18.x + v19.width <= *(double *)(a2 + 16) && *(double *)(a1 + 16) + *(double *)(a1 + 32) <= v18.x)
      {
        double v11 = *(double *)(a1 + 24);
        double v12 = *(double *)(a2 + 24);
        if (v18.y <= fmax(v11 + *(double *)(a1 + 40), v12 + *(double *)(a2 + 40))
          && v18.y + v19.height >= fmin(v11, v12))
        {
          break;
        }
      }
      BOOL v10 = ++v9 < v8;
      if (v8 == v9) {
        return 0;
      }
    }
    if (a4) {
      int v14 = 128;
    }
    else {
      int v14 = 32;
    }
    if (a4) {
      int v15 = 64;
    }
    else {
      int v15 = 16;
    }
    *(_DWORD *)(a1 + 12) |= v14;
    *(_DWORD *)(a2 + 12) |= v15;
  }
  else
  {
    return 0;
  }
  return v10;
}

BOOL isSplitByGuide(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a2 + 8) < 2) {
    return 0;
  }
  BOOL v7 = (uint64_t *)(a3 + 24);
  BOOL result = canSplitWithoutNarrowColumn(a1, a2, (void *)(a3 + 24));
  if (result)
  {
    if (isSplitByStripArray(a1, a2, *(void **)a3, 1)
      || isSplitByStripArray(a1, a2, *(void **)(a3 + 8), 0)
      || (BOOL v8 = isSplitByStripArray(a1, a2, *(void **)(a3 + 16), 0), result = 0, v8))
    {
      *BOOL v7 = a2;
      return 1;
    }
  }
  return result;
}

BOOL canSplitWithoutNarrowColumn(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if ((v3 & 5) != 0 || *a3 == a1) {
    return 0;
  }
  int v5 = (v3 >> 3) & 1;
  if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a2 + 8)) {
    int v5 = 1;
  }
  return (v5 | ((*(_DWORD *)(a2 + 12) & 4u) >> 2)) == 1 && (*(_DWORD *)(a2 + 12) & 0xA) == 0 && a3[1] != a2;
}

BOOL isAlignedWithGuide(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(unsigned char *)(a1 + 12) & 0xA) == 0 && (*(unsigned char *)(a2 + 12) & 5) == 0) {
    return 0;
  }
  BOOL result = canSplitWithoutNarrowColumn(a1, a2, a3);
  if (result)
  {
    *a3 = a2;
    return 1;
  }
  return result;
}

uint64_t accumulateRightGuideIntersections(int a1, double *a2, double *a3, void *a4, void *a5, uint64_t a6)
{
  if (!a2) {
LABEL_19:
  }
    __assert_rtn("accumulateRightGuideIntersections", "CPGuideFinder.m", 178, "wordInfo1");
  BOOL v8 = a2;
  uint64_t v9 = (uint64_t *)(a6 + 8);
  int v10 = a1 + 1;
  while (1)
  {
    unsigned int v11 = *((_DWORD *)v8 + 1);
    if (!v11) {
      return 1;
    }
    double v12 = a3;
    uint64_t v13 = a5;
    uint64_t v14 = [a4 charAtIndex:*(unsigned int *)v8];
    uint64_t v15 = [a4 charAtIndex:v11 + *(_DWORD *)v8 - 1];
    double v16 = *(double *)(v14 + 80);
    double v17 = *(double *)(v15 + 80) + *(double *)(v15 + 144);
    double v18 = *(double *)(a6 + 32);
    if (v17 <= v18)
    {
      CGSize v19 = (uint64_t *)a6;
      if (v17 < *(double *)(a6 + 24)) {
        goto LABEL_17;
      }
    }
    else
    {
      CGSize v19 = v9;
      if (v16 > v18) {
        goto LABEL_17;
      }
    }
    uint64_t v20 = *v19;
    *v19 += 56;
    if (v20)
    {
      *(double *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v17;
      double v21 = v8[3];
      double v22 = v21 + v8[5];
      *(double *)(v20 + 16) = v21;
      *(double *)(v20 + 24) = v22;
      *(_DWORD *)(v20 + 32) = 0;
      uint64_t v23 = *(void *)(v15 + 160);
      *(void *)(v20 + 40) = (char *)v8 + 12;
      *(void *)(v20 + 48) = v23;
      int v24 = *((_DWORD *)v8 + 2);
      if (v24 == -1 || v24 >= 2)
      {
        *(_DWORD *)(v20 + 32) = 1;
        int v25 = 3;
        if (!v12)
        {
LABEL_16:
          *(_DWORD *)(v20 + 32) = v25;
          goto LABEL_17;
        }
      }
      else
      {
        int v25 = 2;
        if (!v12) {
          goto LABEL_16;
        }
      }
      int v26 = *((_DWORD *)v12 + 2);
      if (v26 != -1 && v26 < 2) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
LABEL_17:
    if (++v10 != *(_DWORD *)(a6 + 16)) {
      return 1;
    }
    a5 = 0;
    a3 = 0;
    a4 = v13;
    BOOL v8 = v12;
    if (!v12) {
      goto LABEL_19;
    }
  }
}

uint64_t accumulateLeftGuideIntersections(int a1, double *a2, double *a3, void *a4, void *a5, uint64_t a6)
{
  if (!a2) {
LABEL_19:
  }
    __assert_rtn("accumulateLeftGuideIntersections", "CPGuideFinder.m", 129, "wordInfo1");
  BOOL v8 = a2;
  uint64_t v9 = (uint64_t *)(a6 + 8);
  int v10 = a1 + 1;
  while (1)
  {
    unsigned int v11 = *((_DWORD *)v8 + 1);
    if (!v11) {
      return 1;
    }
    double v12 = a3;
    uint64_t v13 = a5;
    uint64_t v14 = [a4 charAtIndex:*(unsigned int *)v8];
    uint64_t v15 = [a4 charAtIndex:v11 + *(_DWORD *)v8 - 1];
    double v16 = *(double *)(v14 + 80);
    double v17 = *(double *)(v15 + 80) + *(double *)(v15 + 144);
    double v18 = *(double *)(a6 + 40);
    if (v16 >= v18)
    {
      CGSize v19 = (uint64_t *)a6;
      if (v16 > *(double *)(a6 + 48)) {
        goto LABEL_17;
      }
    }
    else
    {
      CGSize v19 = v9;
      if (v17 < v18) {
        goto LABEL_17;
      }
    }
    uint64_t v20 = *v19;
    *v19 += 56;
    if (v20)
    {
      *(double *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v17;
      double v21 = v8[3];
      double v22 = v21 + v8[5];
      *(double *)(v20 + 16) = v21;
      *(double *)(v20 + 24) = v22;
      *(_DWORD *)(v20 + 32) = 0;
      uint64_t v23 = *(void *)(v14 + 160);
      *(void *)(v20 + 40) = (char *)v8 + 12;
      *(void *)(v20 + 48) = v23;
      int v24 = *((_DWORD *)v8 + 2);
      if (v24 == -1 || v24 >= 2)
      {
        *(_DWORD *)(v20 + 32) = 1;
        int v25 = 3;
        if (!v12)
        {
LABEL_16:
          *(_DWORD *)(v20 + 32) = v25;
          goto LABEL_17;
        }
      }
      else
      {
        int v25 = 2;
        if (!v12) {
          goto LABEL_16;
        }
      }
      int v26 = *((_DWORD *)v12 + 2);
      if (v26 != -1 && v26 < 2) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
LABEL_17:
    if (++v10 != *(_DWORD *)(a6 + 16)) {
      return 1;
    }
    a5 = 0;
    a3 = 0;
    a4 = v13;
    BOOL v8 = v12;
    if (!v12) {
      goto LABEL_19;
    }
  }
}

uint64_t accumulateGutterIntersections(int a1, double *a2, double *a3, void *a4, void *a5, uint64_t a6)
{
  if (!a2) {
LABEL_23:
  }
    __assert_rtn("accumulateGutterIntersections", "CPGuideFinder.m", 64, "wordInfo1");
  BOOL v8 = a2;
  uint64_t v9 = (uint64_t *)(a6 + 8);
  int v10 = a1 + 1;
  while (1)
  {
    unsigned int v11 = *((_DWORD *)v8 + 1);
    if (!v11) {
      return 1;
    }
    double v12 = a3;
    uint64_t v13 = a5;
    uint64_t v14 = [a4 charAtIndex:*(unsigned int *)v8];
    uint64_t v15 = [a4 charAtIndex:v11 + *(_DWORD *)v8 - 1];
    double v16 = *(double *)(v14 + 80);
    double v17 = *(double *)(v15 + 80) + *(double *)(v15 + 144);
    double v18 = *(double *)(a6 + 32);
    if (v16 >= v18)
    {
      if (v16 < *(double *)(a6 + 40))
      {
        CGSize v19 = v9;
        goto LABEL_13;
      }
      CGSize v19 = (uint64_t *)a6;
      if (v16 <= *(double *)(a6 + 48)) {
        goto LABEL_13;
      }
    }
    else if (v17 >= *(double *)(a6 + 24))
    {
      if (v17 <= v18) {
        CGSize v19 = (uint64_t *)a6;
      }
      else {
        CGSize v19 = v9;
      }
      uint64_t v14 = v15;
LABEL_13:
      uint64_t v20 = *v19;
      *v19 += 56;
      uint64_t v21 = *(void *)(v14 + 160);
      *(double *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v17;
      double v22 = v8[3];
      double v23 = v22 + v8[5];
      *(double *)(v20 + 16) = v22;
      *(double *)(v20 + 24) = v23;
      *(_DWORD *)(v20 + 32) = 0;
      *(void *)(v20 + 40) = (char *)v8 + 12;
      *(void *)(v20 + 48) = v21;
      int v24 = *((_DWORD *)v8 + 2);
      if (v24 == -1 || v24 >= 2)
      {
        *(_DWORD *)(v20 + 32) = 1;
        int v25 = 3;
        if (!v12)
        {
LABEL_20:
          *(_DWORD *)(v20 + 32) = v25;
          goto LABEL_21;
        }
      }
      else
      {
        int v25 = 2;
        if (!v12) {
          goto LABEL_20;
        }
      }
      int v26 = *((_DWORD *)v12 + 2);
      if (v26 != -1 && v26 < 2) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_21:
    if (++v10 != *(_DWORD *)(a6 + 16)) {
      return 1;
    }
    a5 = 0;
    a3 = 0;
    a4 = v13;
    BOOL v8 = v12;
    if (!v12) {
      goto LABEL_23;
    }
  }
}

uint64_t compareWordExtentBottomAscendingLeftDescending(double *a1, double *a2)
{
  double v2 = a1[2];
  double v3 = a2[2];
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  if (v2 > v3) {
    return 1;
  }
  if (*a1 <= *a2) {
    return *a1 < *a2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t accumulateWordAlignmentData(unsigned int a1, unsigned int *a2, void *a3, void *a4)
{
  unsigned int v4 = a2[1];
  if (v4)
  {
    uint64_t v9 = [a3 charAtIndex:*a2];
    uint64_t v10 = [a3 charAtIndex:v4 + *a2 - 1];
    uint64_t v11 = a4[1];
    *(void *)(*a4 + 8 * a1) = *(void *)(v9 + 80);
    *(double *)(v11 + 8 * a1) = *(double *)(v10 + 80) + *(double *)(v10 + 144);
    uint64_t v12 = a4[3];
    *(void *)(a4[2] + 8 * a1) = *(void *)(*(void *)(v9 + 160) + 72);
    *(void *)(v12 + 8 * a1) = *(void *)(*(void *)(v10 + 160) + 72);
  }
  return 1;
}

CGDataProviderRef CGDataProviderCreateWithSwappedProvider(CGDataProviderRef provider, int a2)
{
  if (provider)
  {
    double v3 = provider;
    provider = 0;
    switch(a2)
    {
      case 1:
        provider = CGDataProviderRetain(v3);
        break;
      case 2:
      case 4:
      case 8:
        *(void *)&callbacks.version = 0;
        unsigned int v4 = malloc_type_malloc(0x18uLL, 0x2062DE7BuLL);
        *(_DWORD *)unsigned int v4 = a2;
        CGDataProviderRetain(v3);
        v4[1] = v3;
        v4[2] = 0;
        callbacks.getBytes = (CGDataProviderGetBytesCallback)get_swapped_bytes;
        callbacks.skipForward = (CGDataProviderSkipForwardCallback)skip_swapped_bytes;
        callbacks.rewind = (CGDataProviderRewindCallback)rewind_swapped_bytes;
        callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)release_swap_info;
        provider = CGDataProviderCreateSequential(v4, &callbacks);
        break;
      default:
        return provider;
    }
  }
  return provider;
}

void release_swap_info(uint64_t a1)
{
  double v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    CGAccessSessionRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 8));

  free((void *)a1);
}

void rewind_swapped_bytes(uint64_t a1)
{
  double v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    CGAccessSessionRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t skip_swapped_bytes(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 16);
  if (!v4)
  {
    unsigned int v4 = CGAccessSessionCreate(*(CGDataProvider **)(a1 + 8));
    *(void *)(a1 + 16) = v4;
  }

  return CGAccessSessionSkipForward((uint64_t)v4, a2);
}

unint64_t get_swapped_bytes(int *a1, int8x16_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (uint64_t *)*((void *)a1 + 2);
  if (!v11)
  {
    uint64_t v11 = CGAccessSessionCreate(*((CGDataProvider **)a1 + 1));
    *((void *)a1 + 2) = v11;
  }
  unint64_t result = CGAccessSessionGetBytes(v11, a2->i8, a3, a4, a5, a6, a7, a8);
  if (result < 8)
  {
    unint64_t v14 = result;
  }
  else
  {
    uint64_t v13 = *a1;
    unint64_t v14 = (result + v13 - 1) & -v13;
    v15.i64[1] = 0xF0E0D0C0B0A0908;
    int8x16_t v16 = veorq_s8(vdupq_n_s8((int)v13 - 1), (int8x16_t)xmmword_1850CDA70);
    if (v14 >= 0x20)
    {
      do
      {
        int8x16_t v15 = vqtbl1q_s8(a2[1], v16);
        *a2 = vqtbl1q_s8(*a2, v16);
        a2[1] = v15;
        a2 += 2;
        v14 -= 32;
      }
      while (v14 > 0x1F);
    }
    if (v14 >= 8)
    {
      do
      {
        v15.i64[0] = a2->i64[0];
        *(int8x8_t *)a2->i8 = vqtbl1_s8(v15, *(int8x8_t *)v16.i8);
        a2 = (int8x16_t *)((char *)a2 + 8);
        v14 -= 8;
      }
      while (v14 > 7);
    }
  }
  int v17 = *a1;
  if (*a1 == 2)
  {
    if (v14)
    {
      for (unint64_t i = 0; i < v14; i += 2)
        a2->i16[i / 2] = bswap32(a2->u16[i / 2]) >> 16;
    }
  }
  else if (v17 == 4)
  {
    if (v14)
    {
      for (unint64_t j = 0; j < v14; j += 4)
        a2->i32[j / 4] = bswap32(a2->u32[j / 4]);
    }
  }
  else
  {
    if (v17 != 8) {
      abort();
    }
    if (v14) {
      a2->i64[0] = bswap64(a2->i64[0]);
    }
  }
  return result;
}

BOOL CPOrdinalLexerTestUpperGreek(int a1)
{
  return (a1 - 913) < 0x19;
}

BOOL CPOrdinalLexerTestLowerGreek(int a1)
{
  return (a1 - 945) < 0x19;
}

BOOL CPOrdinalLexerTestUpperLatin(int a1)
{
  return (a1 - 65) < 0x1A;
}

BOOL CPOrdinalLexerTestLowerLatin(int a1)
{
  return (a1 - 97) < 0x1A;
}

uint64_t CPOrdinalLexerTestUpperRoman(int a1)
{
  return ((a1 - 67) < 0x16) & (0x280643u >> (a1 - 67));
}

uint64_t CPOrdinalLexerTestLowerRoman(int a1)
{
  return ((a1 - 99) < 0x16) & (0x280643u >> (a1 - 99));
}

BOOL CPOrdinalLexerTestLeadingZero(int a1)
{
  return a1 == 48;
}

BOOL CPOrdinalLexerTestDecimal(int a1)
{
  return (a1 - 48) < 0xA;
}

uint64_t CPOrdinalLexerTestNone()
{
  return 1;
}

uint64_t CPOrdinalStateDoneI()
{
  return 0;
}

BOOL CPOrdinalStateII(unsigned __int16 *a1)
{
  int v1 = *a1;
  if (v1 == 105)
  {
    ++*((_DWORD *)a1 + 1);
    *((void *)a1 + 1) = CPOrdinalStateDoneI;
  }
  return v1 == 105;
}

uint64_t CPOrdinalStateI(unsigned __int16 *a1)
{
  int v1 = *a1;
  double v2 = CPOrdinalStateII;
  switch(v1)
  {
    case 'i':
      int v3 = 1;
      goto LABEL_7;
    case 'x':
      double v2 = CPOrdinalStateDoneI;
      int v3 = 8;
      goto LABEL_7;
    case 'v':
      double v2 = CPOrdinalStateDoneI;
      int v3 = 3;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((void *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

BOOL CPOrdinalStateVI(unsigned __int16 *a1)
{
  int v1 = *a1;
  if (v1 == 105)
  {
    ++*((_DWORD *)a1 + 1);
    *((void *)a1 + 1) = CPOrdinalStateII;
  }
  return v1 == 105;
}

BOOL CPOrdinalStateV(unsigned __int16 *a1)
{
  int v1 = *a1;
  if (v1 == 105)
  {
    ++*((_DWORD *)a1 + 1);
    *((void *)a1 + 1) = CPOrdinalStateVI;
  }
  return v1 == 105;
}

uint64_t CPOrdinalStateDoneX(unsigned __int16 *a1)
{
  int v1 = *a1;
  double v2 = CPOrdinalStateI;
  if (v1 == 105)
  {
    int v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 118)
  {
    double v2 = CPOrdinalStateV;
    int v3 = 5;
LABEL_5:
    *((_DWORD *)a1 + 1) += v3;
    *((void *)a1 + 1) = v2;
    return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateXX(unsigned __int16 *a1)
{
  int v1 = *a1;
  double v2 = CPOrdinalStateI;
  switch(v1)
  {
    case 'i':
      int v3 = 1;
      goto LABEL_7;
    case 'x':
      double v2 = CPOrdinalStateDoneX;
      int v3 = 10;
      goto LABEL_7;
    case 'v':
      double v2 = CPOrdinalStateV;
      int v3 = 5;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((void *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateX(unsigned __int16 *a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = *a1;
  int v3 = CPOrdinalStateI;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      int v3 = CPOrdinalStateDoneX;
      int v4 = 80;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      int v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        int v3 = CPOrdinalStateDoneX;
        int v4 = 30;
        goto LABEL_12;
      case 'x':
        int v3 = CPOrdinalStateXX;
        int v4 = 10;
        goto LABEL_12;
      case 'v':
        int v3 = CPOrdinalStateV;
        int v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((void *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateLX(unsigned __int16 *a1)
{
  int v1 = *a1;
  unsigned int v2 = CPOrdinalStateI;
  switch(v1)
  {
    case 'i':
      int v3 = 1;
      goto LABEL_7;
    case 'x':
      unsigned int v2 = CPOrdinalStateXX;
      int v3 = 10;
      goto LABEL_7;
    case 'v':
      unsigned int v2 = CPOrdinalStateV;
      int v3 = 5;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((void *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateL(unsigned __int16 *a1)
{
  int v1 = *a1;
  unsigned int v2 = CPOrdinalStateI;
  switch(v1)
  {
    case 'i':
      int v3 = 1;
      goto LABEL_7;
    case 'x':
      unsigned int v2 = CPOrdinalStateLX;
      int v3 = 10;
      goto LABEL_7;
    case 'v':
      unsigned int v2 = CPOrdinalStateV;
      int v3 = 5;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((void *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateDoneC(unsigned __int16 *a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = *a1;
  int v3 = CPOrdinalStateI;
  if (v2 > 0x75)
  {
    if (v2 == 120)
    {
      int v3 = CPOrdinalStateX;
      int v4 = 10;
      goto LABEL_10;
    }
    if (v2 == 118)
    {
      int v3 = CPOrdinalStateV;
      int v4 = 5;
      goto LABEL_10;
    }
  }
  else
  {
    if (v2 == 105)
    {
      int v4 = 1;
      goto LABEL_10;
    }
    if (v2 == 108)
    {
      int v3 = CPOrdinalStateL;
      int v4 = 50;
LABEL_10:
      *((_DWORD *)a1 + 1) += v4;
      *((void *)a1 + 1) = v3;
      return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateCC(unsigned __int16 *a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = *a1;
  int v3 = CPOrdinalStateI;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      int v3 = CPOrdinalStateDoneC;
      int v4 = 100;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      int v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        int v3 = CPOrdinalStateL;
        int v4 = 50;
        goto LABEL_12;
      case 'x':
        int v3 = CPOrdinalStateX;
        int v4 = 10;
        goto LABEL_12;
      case 'v':
        int v3 = CPOrdinalStateV;
        int v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((void *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateC(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = CPOrdinalStateI;
  int v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      unsigned int v2 = CPOrdinalStateCC;
      int v3 = 100;
      goto LABEL_6;
    case 'd':
      unsigned int v2 = CPOrdinalStateDoneC;
      int v3 = 300;
      goto LABEL_6;
    case 'i':
      goto LABEL_6;
    case 'l':
      unsigned int v2 = CPOrdinalStateL;
      int v3 = 50;
      goto LABEL_6;
    case 'm':
      unsigned int v2 = CPOrdinalStateDoneC;
      int v3 = 800;
LABEL_6:
      *(_DWORD *)(a1 + 4) += v3;
      *(void *)(a1 + 8) = v2;
      uint64_t v1 = 1;
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t CPOrdinalStateDC(unsigned __int16 *a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = *a1;
  int v3 = CPOrdinalStateI;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      int v3 = CPOrdinalStateCC;
      int v4 = 100;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      int v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        int v3 = CPOrdinalStateL;
        int v4 = 50;
        goto LABEL_12;
      case 'x':
        int v3 = CPOrdinalStateX;
        int v4 = 10;
        goto LABEL_12;
      case 'v':
        int v3 = CPOrdinalStateV;
        int v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((void *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateD(unsigned __int16 *a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = *a1;
  int v3 = CPOrdinalStateI;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      int v3 = CPOrdinalStateDC;
      int v4 = 100;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      int v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        int v3 = CPOrdinalStateL;
        int v4 = 50;
        goto LABEL_12;
      case 'x':
        int v3 = CPOrdinalStateX;
        int v4 = 10;
        goto LABEL_12;
      case 'v':
        int v3 = CPOrdinalStateV;
        int v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((void *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateDoneM(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = CPOrdinalStateI;
  int v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      unsigned int v2 = CPOrdinalStateC;
      int v3 = 100;
      goto LABEL_5;
    case 'd':
      unsigned int v2 = CPOrdinalStateD;
      int v3 = 500;
      goto LABEL_5;
    case 'i':
      goto LABEL_5;
    case 'l':
      unsigned int v2 = CPOrdinalStateL;
      int v3 = 50;
LABEL_5:
      *(_DWORD *)(a1 + 4) += v3;
      *(void *)(a1 + 8) = v2;
      uint64_t v1 = 1;
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t CPOrdinalStateMM(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = CPOrdinalStateI;
  int v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      unsigned int v2 = CPOrdinalStateC;
      int v3 = 100;
      goto LABEL_6;
    case 'd':
      unsigned int v2 = CPOrdinalStateD;
      int v3 = 500;
      goto LABEL_6;
    case 'i':
      goto LABEL_6;
    case 'l':
      unsigned int v2 = CPOrdinalStateL;
      int v3 = 50;
      goto LABEL_6;
    case 'm':
      unsigned int v2 = CPOrdinalStateDoneM;
      int v3 = 1000;
LABEL_6:
      *(_DWORD *)(a1 + 4) += v3;
      *(void *)(a1 + 8) = v2;
      uint64_t v1 = 1;
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t CPOrdinalStateM(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = CPOrdinalStateI;
  int v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      unsigned int v2 = CPOrdinalStateC;
      int v3 = 100;
      goto LABEL_6;
    case 'd':
      unsigned int v2 = CPOrdinalStateD;
      int v3 = 500;
      goto LABEL_6;
    case 'i':
      goto LABEL_6;
    case 'l':
      unsigned int v2 = CPOrdinalStateL;
      int v3 = 50;
      goto LABEL_6;
    case 'm':
      unsigned int v2 = CPOrdinalStateMM;
      int v3 = 1000;
LABEL_6:
      *(_DWORD *)(a1 + 4) += v3;
      *(void *)(a1 + 8) = v2;
      uint64_t v1 = 1;
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t CPOrdinalStateLowerRoman(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = CPOrdinalStateI;
  int v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      unsigned int v2 = CPOrdinalStateC;
      int v3 = 100;
      goto LABEL_6;
    case 'd':
      unsigned int v2 = CPOrdinalStateD;
      int v3 = 500;
      goto LABEL_6;
    case 'i':
      goto LABEL_6;
    case 'l':
      unsigned int v2 = CPOrdinalStateL;
      int v3 = 50;
      goto LABEL_6;
    case 'm':
      unsigned int v2 = CPOrdinalStateM;
      int v3 = 1000;
LABEL_6:
      *(_DWORD *)(a1 + 4) += v3;
      *(void *)(a1 + 8) = v2;
      uint64_t v1 = 1;
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t CPOrdinalLexerConvertFromBase(const __CFString *a1, unsigned int *a2, unsigned int a3, unsigned int a4, int a5)
{
  CFIndex Length = CFStringGetLength(a1);
  if (Length < 1) {
    return 0;
  }
  CFIndex v11 = Length;
  CFIndex v12 = 0;
  unsigned int v13 = 0;
  int v14 = a5 - a3;
  while (1)
  {
    unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v12);
    uint64_t result = 0;
    if (CharacterAtIndex < a3 || CharacterAtIndex > a4) {
      break;
    }
    unsigned int v13 = v14 + v13 * (a4 - a3 + 1) + CharacterAtIndex;
    if (v11 == ++v12)
    {
      if (a2) {
        *a2 = v13;
      }
      return 1;
    }
  }
  return result;
}

uint64_t CPOrdinalLexerGetCharacterType(int a1)
{
  if ((a1 - 48) > 9)
  {
    if ((a1 - 945) >= 0x19) {
      int v2 = 8 * ((a1 - 913) < 0x19);
    }
    else {
      int v2 = 7;
    }
    if (((1 << (a1 - 67)) & 0x280643) != 0) {
      int v3 = 4;
    }
    else {
      int v3 = 6;
    }
    if ((a1 - 67) <= 0x15) {
      int v4 = v3;
    }
    else {
      int v4 = 6;
    }
    if ((a1 - 65) <= 0x19) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v2;
    }
    if (((1 << (a1 - 99)) & 0x280643) != 0) {
      int v6 = 3;
    }
    else {
      int v6 = 5;
    }
    if ((a1 - 99) <= 0x15) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = 5;
    }
    if ((a1 - 97) <= 0x19) {
      return v7;
    }
    else {
      return v5;
    }
  }
  else if (a1 == 48)
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

uint64_t CPOrdinalLexerStringToInt(const __CFString *a1, unsigned int *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  if (Length < 1)
  {
LABEL_17:
    uint64_t CharacterType = 0;
  }
  else
  {
    unint64_t v5 = Length;
    int CharacterAtIndex = CFStringGetCharacterAtIndex(a1, 0);
    uint64_t CharacterType = CPOrdinalLexerGetCharacterType(CharacterAtIndex);
    if (CharacterType && v5 >= 2)
    {
      for (CFIndex i = 1; v5 != i; ++i)
      {
        int v9 = CFStringGetCharacterAtIndex(a1, i);
        if ((CPOrdinalLexerTestCharacterType[CharacterType]() & 1) == 0)
        {
          if (CharacterType == 2)
          {
            if ((v9 - 48) > 9) {
              goto LABEL_17;
            }
            uint64_t CharacterType = 2;
          }
          else if (CharacterType == 4)
          {
            if ((v9 - 65) >= 0x1A) {
              goto LABEL_17;
            }
            uint64_t CharacterType = 6;
          }
          else
          {
            if (CharacterType != 3 || (v9 - 97) >= 0x1A) {
              goto LABEL_17;
            }
            uint64_t CharacterType = 5;
          }
        }
      }
    }
  }
  if ((CPOrdinalLexerTypedStringToInt(a1, CharacterType, a2) & 1) == 0)
  {
    if (CharacterType == 3)
    {
      if (CPOrdinalLexerConvertFromBase(a1, a2, 0x61u, 0x7Au, 1)) {
        return CharacterType;
      }
      return 0;
    }
    if (CharacterType != 4 || (CPOrdinalLexerConvertFromBase(a1, a2, 0x41u, 0x5Au, 1) & 1) == 0) {
      return 0;
    }
  }
  return CharacterType;
}

uint64_t CPOrdinalLexerTypedStringToInt(CFStringRef theString, int a2, unsigned int *a3)
{
  switch(a2)
  {
    case 1:
    case 2:
      unint64_t v5 = a3;
      unsigned int v6 = 48;
      unsigned int v7 = 57;
      int v8 = 0;
      goto LABEL_22;
    case 3:
      long long v16 = xmmword_1ED09B000;
      CFIndex Length = CFStringGetLength(theString);
      if (Length < 1) {
        return 0;
      }
      CFIndex v10 = Length;
      CFIndex v11 = 0;
      while (1)
      {
        LOWORD(v16) = CFStringGetCharacterAtIndex(theString, v11);
        if (((*((uint64_t (**)(long long *))&v16 + 1))(&v16) & 1) == 0) {
          return 0;
        }
        if (v10 == ++v11) {
          goto LABEL_12;
        }
      }
    case 4:
      long long v16 = xmmword_1ED09B000;
      CFIndex v12 = CFStringGetLength(theString);
      if (v12 < 1) {
        return 0;
      }
      CFIndex v13 = v12;
      CFIndex v14 = 0;
      break;
    case 5:
      unint64_t v5 = a3;
      unsigned int v6 = 97;
      unsigned int v7 = 122;
      goto LABEL_21;
    case 6:
      unint64_t v5 = a3;
      unsigned int v6 = 65;
      unsigned int v7 = 90;
      goto LABEL_21;
    case 7:
      unint64_t v5 = a3;
      unsigned int v6 = 945;
      unsigned int v7 = 969;
      goto LABEL_21;
    case 8:
      unint64_t v5 = a3;
      unsigned int v6 = 913;
      unsigned int v7 = 937;
LABEL_21:
      int v8 = 1;
LABEL_22:
      return CPOrdinalLexerConvertFromBase(theString, v5, v6, v7, v8);
    default:
      return 0;
  }
  do
  {
    LOWORD(v16) = CFStringGetCharacterAtIndex(theString, v14) + 32;
    if (((*((uint64_t (**)(long long *))&v16 + 1))(&v16) & 1) == 0) {
      return 0;
    }
    ++v14;
  }
  while (v13 != v14);
LABEL_12:
  if (a3) {
    *a3 = DWORD1(v16);
  }
  return 1;
}

void type4_release(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 8));
    free(*(void **)(a1 + 24));
    evaluation_release(*(void ***)(a1 + 48));
    evaluation_release(*(void ***)(a1 + 40));
    type4_program_release(*(unint64_t **)(a1 + 32));
    free((void *)a1);
  }
}

_DWORD *evaluation_create(void *a1)
{
  int v2 = malloc_type_malloc(0x18uLL, 0x1080040C4643742uLL);
  int v3 = v2;
  if (v2)
  {
    *int v2 = 0;
    int v4 = malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
    *((void *)v3 + 1) = v4;
    if (v4 && (unint64_t v5 = malloc_type_malloc(8 * a1[2], 0x100004000313F17uLL), (*((void *)v3 + 2) = v5) != 0))
    {
      uint64_t v6 = (uint64_t)v5;
      unsigned int v7 = (double *)*((void *)v3 + 1);
      if (*a1) {
        bzero(*((void **)v3 + 1), 8 * *a1);
      }
      evaluate((uint64_t)a1, v7, v6);
    }
    else
    {
      evaluation_release((void **)v3);
      return 0;
    }
  }
  return v3;
}

__CFDictionary *copy_pdf_description(void *a1)
{
  if (!a1) {
    return 0;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v3 = Mutable;
  if (Mutable)
  {
    CGCFDictionarySetInteger(Mutable, @"/FunctionType", 4);
    CFMutableArrayRef v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v4)
    {
      unint64_t v5 = v4;
      if ((*a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        unint64_t v6 = 0;
        do
          CGCFArrayAppendCGFloat(v5, *(double *)(a1[1] + 8 * v6++));
        while (v6 < 2 * *a1);
      }
      CFDictionarySetValue(v3, @"/Domain", v5);
      CFRelease(v5);
      CFMutableArrayRef v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (v7)
      {
        int v8 = v7;
        if ((a1[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          unint64_t v9 = 0;
          do
            CGCFArrayAppendCGFloat(v8, *(double *)(a1[3] + 8 * v9++));
          while (v9 < 2 * a1[2]);
        }
        CFDictionarySetValue(v3, @"/Range", v8);
        CFRelease(v8);
        CFIndex v10 = (uint64_t *)a1[4];
        unint64_t program_string_length = get_program_string_length(v10);
        CFIndex v12 = (char *)malloc_type_malloc(program_string_length + 1, 0xA63D43F3uLL);
        if (v12)
        {
          CFIndex v13 = v12;
          unint64_t v14 = print_program(v12, (unint64_t *)v10);
          if (v14 > program_string_length) {
            _CGHandleAssert("type4_program_create_string", 237, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Functions/type4-program.c", "size <= length", "size of program (%lu) overflowed length (%lu)", v15, v16, v17, v14);
          }
          size_t v18 = strlen(v13);
          CFDataRef v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v13, v18);
          if (v19)
          {
            CFDataRef v20 = v19;
            CFDictionarySetValue(v3, @"/%Stream", v19);
            CFRelease(v20);
            free(v13);
            return v3;
          }
          free(v13);
        }
      }
    }
    CFRelease(v3);
    return 0;
  }
  return v3;
}

void type4_evaluate(unint64_t *a1, double *a2, uint64_t a3)
{
  if (!a1) {
    return;
  }
  int v3 = (uint64_t *)a3;
  unint64_t v5 = *a1;
  if (!*a1)
  {
LABEL_19:
    unint64_t v18 = a1[2];
    if (v18)
    {
      CFDataRef v19 = *(uint64_t **)(a1[5] + 16);
      do
      {
        uint64_t v20 = *v19++;
        *v3++ = v20;
        --v18;
      }
      while (v18);
    }
    return;
  }
  unint64_t v6 = a2;
  if (*a2 != 0.0) {
    goto LABEL_4;
  }
  unint64_t v16 = 0;
  do
  {
    if (v5 - 1 == v16) {
      goto LABEL_19;
    }
    double v17 = a2[++v16];
  }
  while (v17 == 0.0);
  if (v16 < v5)
  {
LABEL_4:
    int v7 = 0;
    unint64_t v8 = a1[6];
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v8, (unsigned int *)&v7, 1u, memory_order_relaxed, memory_order_relaxed);
    BOOL v9 = v7 == 0;
    if (v8 && v9)
    {
      unint64_t v10 = *a1;
      if (!*a1)
      {
LABEL_10:
        unint64_t v13 = a1[2];
        if (v13)
        {
          unint64_t v14 = *(uint64_t **)(v8 + 16);
          do
          {
            uint64_t v15 = *v14++;
            *v3++ = v15;
            --v13;
          }
          while (v13);
        }
LABEL_32:
        int v30 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v8, (unsigned int *)&v30, 0, memory_order_relaxed, memory_order_relaxed);
        if (v30 == 1) {
          return;
        }
LABEL_34:
        abort();
      }
      CFIndex v11 = *(double **)(v8 + 8);
      CFIndex v12 = a2;
      while (*v12 == *v11)
      {
        ++v11;
        ++v12;
        if (!--v10) {
          goto LABEL_10;
        }
      }
      int v21 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v8, (unsigned int *)&v21, 0, memory_order_relaxed, memory_order_relaxed);
      if (v21 != 1) {
        goto LABEL_34;
      }
    }
    evaluate((uint64_t)a1, a2, a3);
    int v22 = 0;
    unint64_t v8 = a1[6];
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v8, (unsigned int *)&v22, 1u, memory_order_relaxed, memory_order_relaxed);
    BOOL v23 = v22 == 0;
    if (!v8 || !v23) {
      return;
    }
    unint64_t v24 = *a1;
    if (*a1)
    {
      int v25 = *(void **)(v8 + 8);
      do
      {
        uint64_t v26 = *(void *)v6++;
        *v25++ = v26;
        --v24;
      }
      while (v24);
    }
    unint64_t v27 = a1[2];
    if (v27)
    {
      float v28 = *(void **)(v8 + 16);
      do
      {
        uint64_t v29 = *v3++;
        *v28++ = v29;
        --v27;
      }
      while (v27);
    }
    goto LABEL_32;
  }
}

void evaluate(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v17 = 0;
  memset(v16, 0, 512);
  if (*(void *)a1)
  {
    uint64_t v5 = 0;
    for (uint64_t i = *(void *)a1 - 1; ; --i)
    {
      double v7 = *a2;
      if (v5 == 200)
      {
        int v17 = 3;
        if (!i) {
          goto LABEL_9;
        }
      }
      else
      {
        *(void *)&v16[0] = v5 + 1;
        unint64_t v8 = &v16[v5];
        *((void *)v8 + 2) = 258;
        *((double *)v8 + 3) = v7;
        if (!i) {
          goto LABEL_9;
        }
      }
      uint64_t v5 = *(void *)&v16[0];
      ++a2;
    }
  }
  double v7 = 0.0;
LABEL_9:
  type4_program_execute(*(void **)(a1 + 32), (uint64_t *)v16);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    unint64_t v10 = 0;
    int v11 = 258;
    uint64_t v12 = -1;
    do
    {
      uint64_t v13 = *(void *)&v16[0];
      if (*(void *)&v16[0])
      {
        --*(void *)&v16[0];
        unint64_t v14 = &v16[v13 - 1];
        int v11 = *((_DWORD *)v14 + 4);
        double v7 = *((double *)v14 + 3);
      }
      else
      {
        int v17 = 4;
      }
      if (v11 == 258)
      {
        double v15 = v7;
      }
      else if (v11 == 257)
      {
        double v15 = (double)SLODWORD(v7);
      }
      else
      {
        pdf_error("error evaluating Type 4 function: typecheck.");
        unint64_t v9 = *(void *)(a1 + 16);
        double v15 = 0.0;
      }
      *(double *)(a3 + 8 * (v9 + v12)) = v15;
      ++v10;
      --v12;
    }
    while (v10 < v9);
  }
}

void evaluation_release(void **a1)
{
  if (a1)
  {
    free(a1[1]);
    free(a1[2]);
    free(a1);
  }
}

uint64_t CGPDFLayoutGetTypeID()
{
  uint64_t result = CGPDFLayoutGetTypeID_id;
  if (!CGPDFLayoutGetTypeID_id)
  {
    uint64_t result = _CFRuntimeRegisterClass();
    CGPDFLayoutGetTypeID_id = result;
  }
  return result;
}

CFStringRef _CGPDFLayoutCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CGPDFLayout (%p)>", a1);
}

uint64_t _CGPDFLayoutFinalize(uint64_t a1)
{
  CGPDFNodeRelease(*(_DWORD **)(a1 + 104));
  CFAllocatorRef v2 = *(const void **)(a1 + 112);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(void **)(a1 + 24);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = 0;
      for (unint64_t i = 0; i < v4; ++i)
      {
        double v7 = *(void **)(*(void *)(a1 + 24) + v5);
        if (v7)
        {
          if ((*v7)-- == 1)
          {
            free(v7);
            unint64_t v4 = *(void *)(a1 + 48);
          }
        }
        v5 += 24;
      }
      int v3 = *(void **)(a1 + 24);
    }
    free(v3);
    *(void *)(a1 + 24) = 0;
  }
  unint64_t v9 = *(const void **)(a1 + 80);
  if (v9) {
    CFRelease(v9);
  }
  unint64_t v10 = *(void **)(a1 + 88);
  if (v10) {
    free(v10);
  }
  int v11 = *(void **)(a1 + 56);
  if (v11) {
    CPMultiUnicodesRelease(v11);
  }
  uint64_t v12 = *(void **)(a1 + 64);
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)v12[1];
      CGPDFTextStyleRelease((void *)*v12);
      free(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }

  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 120));
}

CGPDFLayout *CGPDFLayoutCreateWithPage(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)MEMORY[0x18532AD60]();
  int v3 = [[CPPage alloc] initWithPDFPage:a1];
  [(CPPage *)v3 reconstruct];
  unint64_t v4 = [(CPPage *)v3 layout];
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  [(CPPage *)v3 dispose];

  return v5;
}

CFTypeRef CGPDFLayoutRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void CGPDFLayoutRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CGPDFLayoutSetHasRTL(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 72) = a2;
  }
  return result;
}

uint64_t CGPDFLayoutHasRTL(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t CGPDFLayoutAppendTextElement(uint64_t result, void *a2, void *a3, unsigned int a4)
{
  if (result)
  {
    if (a2)
    {
      if (a4 <= 0x400)
      {
        unint64_t v6 = (void *)result;
        if (*(void *)(result + 32) < *(void *)(result + 40))
        {
          if (a3)
          {
            unint64_t v8 = *(uint64_t **)(result + 64);
            if (v8)
            {
              while (1)
              {
                unint64_t v9 = v8;
                uint64_t v10 = *v8;
                uint64_t result = CGPDFTextStyleEqualToPDFTextStyle(*v8, (uint64_t)a3);
                if (result) {
                  break;
                }
                unint64_t v8 = (uint64_t *)v9[1];
                if (!v8) {
                  goto LABEL_13;
                }
              }
              if (v10) {
                goto LABEL_17;
              }
LABEL_13:
              uint64_t result = (uint64_t)malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              if (result)
              {
                ++*a3;
                *(void *)uint64_t result = a3;
                *(void *)(result + 8) = 0;
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t result = (uint64_t)malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              if (result)
              {
                unint64_t v9 = (void *)result;
                uint64_t result = 0;
                v6[8] = v9;
                ++*a3;
                *unint64_t v9 = a3;
LABEL_15:
                v9[1] = result;
                uint64_t v10 = (uint64_t)a3;
LABEL_17:
                ++*a2;
                uint64_t v11 = v6[3];
                uint64_t v12 = v6[4];
                v6[4] = v12 + 1;
                uint64_t v13 = v11 + 24 * v12;
                *(void *)uint64_t v13 = a2;
                *(void *)(v13 + 8) = v10;
                *(_DWORD *)(v13 + 16) = a4;
                *(_DWORD *)(v13 + 20) = 0;
                ++v6[6];
                return result;
              }
            }
          }
          uint64_t v10 = 0;
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

uint64_t CGPDFLayoutGetPage(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t CGPDFLayoutGetRootNode(uint64_t result)
{
  if (result) {
    return *(void *)(result + 104);
  }
  return result;
}

void *CGPDFLayoutGetRootTaggedNode(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[14];
    if (!result)
    {
      uint64_t result = CGPDFPageCopyRootTaggedNode(v1[2]);
      v1[14] = result;
    }
  }
  return result;
}

uint64_t CGPDFLayoutGetNumberOfTextElements(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t CGPDFLayoutGetCharacterMarker(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a1 + 48) > a2 && (uint64_t v4 = *(void *)(a1 + 24)) != 0) {
      return *(unsigned int *)(v4 + 24 * a2 + 16);
    }
    else {
      return 0;
    }
  }
  return result;
}

void CGPDFLayoutGetTextMatrix(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(CGAffineTransform *)a3 = CGAffineTransformIdentity;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(void *)(a1 + 48) > a2)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = (uint64_t *)(v4 + 24 * a2);
        uint64_t v6 = *v5;
        if (*v5)
        {
          uint64_t v7 = v5[1];
          double v9 = *(double *)(v6 + 32);
          double v8 = *(double *)(v6 + 40);
          CGFloat v10 = *(double *)(v6 + 16);
          CGFloat v11 = *(double *)(v6 + 24);
          if (v7 && *(__int16 *)(v6 + 8) != -4)
          {
            CGFloat width = *(double *)(v7 + 16);
            CGFloat v13 = width;
          }
          else if (v9 < 0.0 || (width = *(double *)(v6 + 32), CGFloat v13 = *(double *)(v6 + 40), v8 < 0.0))
          {
            CGRect v15 = CGRectStandardize(*(CGRect *)(v6 + 16));
            CGFloat width = v15.size.width;
            v15.origin.x = v10;
            v15.origin.y = v11;
            v15.size.CGFloat width = v9;
            v15.size.height = v8;
            *(CGRect *)(&v13 - 3) = CGRectStandardize(v15);
          }
          *(CGFloat *)a3 = width;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *(CGFloat *)(a3 + 24) = v13;
          if (v9 < 0.0 || v8 < 0.0)
          {
            v16.origin.x = v10;
            v16.origin.y = v11;
            v16.size.CGFloat width = v9;
            v16.size.height = v8;
            *(void *)&CGFloat v10 = (unint64_t)CGRectStandardize(v16);
          }
          uint64_t v14 = *(void *)(v6 + 88);
          *(CGFloat *)(a3 + 32) = v10;
          *(void *)(a3 + 40) = v14;
        }
      }
    }
  }
}

uint64_t CGPDFLayoutGetCGFont(uint64_t a1, uint64_t a2)
{
  if (a1
    && (a2 & 0x8000000000000000) == 0
    && *(void *)(a1 + 48) > a2
    && (uint64_t v2 = *(void *)(a1 + 24)) != 0
    && (uint64_t v3 = *(void *)(v2 + 24 * a2 + 8)) != 0
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    return CGPDFFontGetFont(v4);
  }
  else
  {
    return 0;
  }
}

uint64_t CGPDFLayoutGetGlyph(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v18 = 0;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(void *)(a1 + 48) > a2)
    {
      uint64_t v2 = *(void *)(a1 + 24);
      if (v2)
      {
        uint64_t v3 = (uint64_t *)(v2 + 24 * a2);
        uint64_t v5 = *v3;
        uint64_t v4 = v3[1];
        if (v5 && v4 != 0)
        {
          unsigned __int16 v19 = *(_WORD *)(v5 + 80);
          unsigned __int16 v7 = v19;
          if (v19)
          {
            uint64_t v8 = *(void *)(v4 + 8);
            if (v8)
            {
              Encoding = CGPDFFontGetEncoding(*(atomic_ullong **)(v4 + 8));
              if (Encoding) {
                return *((unsigned __int16 *)CGPDFEncodingGetGlyphVector(Encoding) + v19);
              }
              CIDToGlyphMap = (__int16 *)CGPDFFontGetCIDToGlyphMap(v8);
              if (CIDToGlyphMap)
              {
                CGFontIndexMapGetValues(CIDToGlyphMap, &v19, 1, &v18);
                return v18;
              }
              Font = (void *)CGPDFFontGetFont(v8);
              if (Font)
              {
                CGFloat v13 = Font;
                if (CGFontGetGlyphsForCIDs(Font, &v19, 1, &v18))
                {
                  if (CGPDFFontIsEmbedded(v8)) {
                    return v18;
                  }
                  unsigned __int16 v17 = 1;
                  unsigned __int16 v16 = 0;
                  int GlyphsForCIDs = CGFontGetGlyphsForCIDs(v13, &v17, 1, &v16);
                  unsigned __int16 v10 = v16;
                  if (!GlyphsForCIDs) {
                    return 0;
                  }
                  return v10;
                }
                return v19;
              }
              return v7;
            }
          }
        }
      }
    }
  }
  return v18;
}

double CGPDFLayoutGetCharacterBounds(uint64_t a1, uint64_t a2)
{
  if (a1
    && (a2 & 0x8000000000000000) == 0
    && *(void *)(a1 + 48) > a2
    && (uint64_t v2 = *(void *)(a1 + 24)) != 0
    && (uint64_t v3 = *(void *)(v2 + 24 * a2)) != 0)
  {
    return *(double *)(v3 + 16);
  }
  else
  {
    return INFINITY;
  }
}

double CGPDFLayoutGetCharacterBBox(uint64_t a1, uint64_t a2)
{
  if (a1
    && (a2 & 0x8000000000000000) == 0
    && *(void *)(a1 + 48) > a2
    && (uint64_t v2 = *(void *)(a1 + 24)) != 0
    && (uint64_t v3 = *(void *)(v2 + 24 * a2)) != 0)
  {
    return *(double *)(v3 + 48);
  }
  else
  {
    return INFINITY;
  }
}

double CGPDFLayoutGetCharacterRotation(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(void *)(a1 + 48) > a2)
    {
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 24 * a2 + 8);
        if (v4) {
          return *(double *)(v4 + 40);
        }
      }
    }
  }
  return result;
}

double CGPDFLayoutGetCharacterAnchorY(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(void *)(a1 + 48) > a2)
    {
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 24 * a2);
        if (v4) {
          return *(double *)(v4 + 88);
        }
      }
    }
  }
  return result;
}

uint64_t CGPDFLayoutGetCharacterUnicode(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a1 + 48) > a2 && (uint64_t v4 = *(void *)(a1 + 24)) != 0 && (v5 = *(void *)(v4 + 24 * a2)) != 0) {
      return *(unsigned __int16 *)(v5 + 8);
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL CGPDFLayoutIsAttachmentCharacter(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0) {
    return *(void *)(a1 + 48) > a2
  }
        && (uint64_t v4 = *(void *)(a1 + 24)) != 0
        && (uint64_t v5 = *(void *)(v4 + 24 * a2)) != 0
        && *(__int16 *)(v5 + 8) == -4;
  return result;
}

uint64_t CGPDFLayoutIsWhiteSpaceCharacter(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a1 + 48) > a2 && (uint64_t v4 = *(void *)(a1 + 24)) != 0 && (v5 = *(void *)(v4 + 24 * a2)) != 0)
    {
      uint64_t result = *(unsigned __int16 *)(v5 + 8);
      if (*(_WORD *)(v5 + 8))
      {
        if (result > 0x7F) {
          int v6 = __maskrune(result, 0x4000uLL);
        }
        else {
          int v6 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * result + 60) & 0x4000;
        }
        return v6 != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void CGPDFLayoutBufferUnicodeAndBoundsForRange(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v5 = a4;
    if ((a4 & 0x8000000000000000) == 0)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (a4 + a5 <= v6)
      {
        uint64_t v7 = *(void *)(a1 + 24);
        if (v7)
        {
          if (a5 >= 1)
          {
            if (a4 + a5 >= v6) {
              uint64_t v10 = *(void *)(a1 + 48);
            }
            else {
              uint64_t v10 = a4 + a5;
            }
            CGFloat v11 = (CGSize **)(v7 + 24 * a4);
            uint64_t v12 = a2;
            uint64_t v13 = a3;
            do
            {
              if (a2)
              {
                uint64_t v14 = *v11;
                if (*v11) {
                  LOWORD(v14) = LOWORD(v14->height);
                }
                *v12++ = (_WORD)v14;
              }
              if (a3)
              {
                p_double height = &CGRectNull.size.height;
                p_CGSize size = &CGRectNull.size;
                p_y = &CGRectNull.origin.y;
                unsigned __int16 v18 = v11[1];
                if (*v11)
                {
                  p_y = &(*v11)[1].height;
                  p_CGSize size = *v11 + 2;
                  p_double height = &(*v11)[2].height;
                  unsigned __int16 v19 = (const CGRect *)&(*v11)[1];
                }
                else
                {
                  unsigned __int16 v19 = &CGRectNull;
                }
                if (v18) {
                  double height = v18[2].height;
                }
                else {
                  double height = 0.0;
                }
                *(CGFloat *)uint64_t v13 = CGRectUprightBoundsForRotation(v19->origin.x, *p_y, p_size->width, *p_height, height);
                *(void *)(v13 + 8) = v21;
                *(void *)(v13 + 16) = v22;
                *(void *)(v13 + 24) = v23;
                v13 += 32;
              }
              ++v5;
              v11 += 3;
            }
            while (v5 < v10);
          }
        }
      }
    }
  }
}

CGFloat CGRectUprightBoundsForRotation(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  if (a5 != 0.0)
  {
    __double2 v9 = __sincos_stret(a5);
    v11.a = v9.__cosval;
    v11.b = v9.__sinval;
    v11.c = -v9.__sinval;
    v11.d = v9.__cosval;
    v11.tx = 0.0;
    v11.ty = 0.0;
    v12.origin.x = a1;
    v12.origin.y = a2;
    v12.size.CGFloat width = a3;
    v12.size.double height = a4;
    *(void *)&a1 = (unint64_t)CGRectApplyAffineTransform(v12, &v11);
  }
  return a1;
}

double CGPDFLayoutIntersectionPoint()
{
  return 0.0;
}

uint64_t CreateSelectionBetweenPoints(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v88 = a4;
  double v89 = a5;
  double v86 = a6;
  double v87 = a7;
  if (a2)
  {
    if (!a1) {
      return 0;
    }
    uint64_t v10 = *(__n64 **)(a1 + 104);
    if (a2 > 4) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = dword_1850CE0B0[a2 - 1];
    }
    BOOL v85 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    if (a2 == 1) {
      double v13 = 1.0;
    }
    else {
      double v13 = 2.0;
    }
    RangeFromStringuint64_t Range = 0;
    uint64_t v82 = 0;
    CGPDFNodeGetNodeRangeBetweenPoints(v10, v11, a3, &v84, &v83, &v85, &RangeFromStringRange, a4, a5, a6, a7, v13);
    uint64_t v15 = v83;
    uint64_t v14 = v84;
    if (v84 == v83)
    {
      if (v84)
      {
        uint64_t TextRange = CGPDFNodeGetTextRange(v84);
        uint64_t v21 = CPRangeUnion(TextRange, v20, RangeFromStringRange, v82);
      }
      else
      {
        uint64_t v21 = RangeFromStringRange;
        uint64_t v22 = v82;
      }
      if (v22 < 1) {
        return 0;
      }
      IndexSet = CPIndexSetCreateWithRange(v21, v22);
      if (!IndexSet) {
        return 0;
      }
    }
    else
    {
      int v16 = v11;
      if (v85)
      {
        IndexSet = CreateIndexSet(v84, v83, v11, a3);
        unsigned __int16 v18 = &v83;
      }
      else
      {
        IndexSet = CreateIndexSet(v83, v84, v11, a3);
        unsigned __int16 v18 = &v84;
        uint64_t v14 = v15;
      }
      uint64_t v23 = CGPDFNodeGetTextRange(v14);
      uint64_t v24 = CGPDFNodeGetTextRange(*v18);
      if (!IndexSet) {
        return 0;
      }
      uint64_t v26 = v24;
      uint64_t v27 = v25;
      unint64_t v76 = v10;
      if (IndexSet[2].i8[8]) {
        CPIndexSetNormalize((uint64_t)IndexSet);
      }
      uint64_t v28 = IndexSet[1].i64[0];
      if (v28 < 1)
      {
        uint64_t v10 = v76;
        LODWORD(v11) = v16;
      }
      else
      {
        int v75 = v16;
        uint64_t Range = CPIndexSetGetRange((uint64_t)IndexSet, 0);
        uint64_t v30 = v29;
        uint64_t v31 = CPIndexSetGetRange((uint64_t)IndexSet, v28 - 1);
        uint64_t v32 = RangeFromStringRange;
        if (v23 <= RangeFromStringRange)
        {
          LODWORD(v11) = v75;
        }
        else
        {
          if (IndexSet[1].i64[0] >= 1)
          {
            uint64_t v33 = Range + v30 - RangeFromStringRange;
            float v34 = (void *)IndexSet[2].i64[0];
            *float v34 = RangeFromStringRange;
            v34[1] = v33;
            IndexSet[2].i8[8] = 1;
          }
          if (v28 == 1) {
            uint64_t v31 = v32;
          }
          uint64_t v32 = RangeFromStringRange;
          LODWORD(v11) = v75;
        }
        uint64_t v36 = v82 + v32;
        if (v26 + v27 < v36 && IndexSet[1].i64[0] >= v28)
        {
          float v37 = (uint64_t *)(IndexSet[2].i64[0] + 16 * (v28 - 1));
          *float v37 = v31;
          v37[1] = v36 - v31;
          IndexSet[2].i8[8] = 1;
        }
        uint64_t v10 = v76;
      }
    }
    if (IndexSet[2].i8[8]) {
      CPIndexSetNormalize((uint64_t)IndexSet);
    }
    if (IndexSet[1].i64[0] < 1) {
      uint64_t v38 = -1;
    }
    else {
      uint64_t v38 = *(void *)IndexSet[2].i64[0];
    }
    uint64_t LastIndex = CPIndexSetGetLastIndex((uint64_t)IndexSet);
    uint64_t v35 = 0;
    if (v38 == -1) {
      goto LABEL_89;
    }
    uint64_t v40 = LastIndex;
    if (LastIndex == -1) {
      goto LABEL_89;
    }
    if (v82 < 1
      || !*(unsigned char *)(a1 + 72)
      || (char v78 = 0, v79 = 0, v80 = 0, CGPDFLayoutGetRTLData(&v78, a1), v40 >= (int)v80))
    {
LABEL_86:
      if (a2 == 1 && !CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)IndexSet, RangeFromStringRange, v82)) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), IndexSet);
      }
LABEL_89:
      CFRelease(IndexSet);
      return v35;
    }
    CFRelease(IndexSet);
    if (v85)
    {
      uint64_t v41 = v84;
      if (v84
        && (uint64_t v42 = CGPDFNodeGetTextRange(v84), v44 = v42 + v43, RangeFromStringRange >= v42 + v43)
        && CGPDFNodeIsHitByPoint(v41, v88, v89, v13))
      {
        float v45 = 0;
        uint64_t v46 = RangeFromStringRange - v44 + v82 + 1;
        RangeFromStringuint64_t Range = v44 - 1;
        uint64_t v82 = v46;
      }
      else
      {
        float v45 = &v88;
      }
      uint64_t v47 = v83;
      if (!v83
        || (uint64_t v48 = CGPDFNodeGetTextRange(v83), v82 + RangeFromStringRange > v48)
        || (uint64_t v49 = v48, !CGPDFNodeIsHitByPoint(v47, v86, v87, v13)))
      {
        unint64_t v50 = &v86;
LABEL_68:
        char v77 = 0;
        unint64_t StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, RangeFromStringRange, v82, v45, v50, a3, &v77, v13);
        if ((StringRangeFromCursorRange & 0x8000000000000000) == 0)
        {
          unint64_t v60 = StringRangeFromCursorRange;
          uint64_t v61 = v59;
          IndexSetForStringuint64_t Range = CGPDFLayoutCreateIndexSetForStringRange(a1, StringRangeFromCursorRange, v59);
          unsigned int v63 = IndexSetForStringRange;
          if (a3)
          {
            IndexSet = IndexSetForStringRange;
          }
          else
          {
            IndexSet = CGPDFLayoutCopyIndexSetRemovingGraphics(a1, (uint64_t)IndexSetForStringRange);
            if (v63) {
              CFRelease(v63);
            }
          }
          if (IndexSet)
          {
            RangeFromStringuint64_t Range = CGPDFLayoutGetRangeFromStringRange(a1, v60, v61);
            uint64_t v82 = v64;
            uint64_t v65 = *(int *)(v79 + 4 * v60);
            uint64_t v66 = *(int *)(v79 + 4 * (v61 + v60) - 4);
            for (uint64_t i = CGPDFNodeGetNodeContainingTextRange((uint64_t)v10, v65, 1); i; uint64_t i = *(void *)(i + 8))
            {
              if (*(_DWORD *)i == v11) {
                break;
              }
            }
            uint64_t v84 = i;
            for (uint64_t j = CGPDFNodeGetNodeContainingTextRange((uint64_t)v10, v66, 1); j; uint64_t j = *(void *)(j + 8))
            {
              if (*(_DWORD *)j == v11) {
                break;
              }
            }
            uint64_t v83 = j;
            if (i)
            {
              uint64_t v69 = CGPDFNodeGetTextRange(i);
              CPIndexSetAddRange((uint64_t)IndexSet, v69, v70);
              uint64_t j = v83;
              uint64_t v71 = v84;
            }
            else
            {
              uint64_t v71 = 0;
            }
            if (j && j != v71)
            {
              uint64_t v72 = CGPDFNodeGetTextRange(j);
              CPIndexSetAddRange((uint64_t)IndexSet, v72, v73);
            }
            goto LABEL_86;
          }
        }
        return 0;
      }
    }
    else
    {
      uint64_t v51 = v83;
      if (v83
        && (uint64_t v52 = CGPDFNodeGetTextRange(v83), v54 = v52 + v53, RangeFromStringRange >= v52 + v53)
        && CGPDFNodeIsHitByPoint(v51, v86, v87, v13))
      {
        float v45 = 0;
        uint64_t v55 = RangeFromStringRange - v54 + v82 + 1;
        RangeFromStringuint64_t Range = v54 - 1;
        uint64_t v82 = v55;
      }
      else
      {
        float v45 = &v86;
      }
      uint64_t v56 = v84;
      if (!v84
        || (uint64_t v57 = CGPDFNodeGetTextRange(v84), v82 + RangeFromStringRange > v57)
        || (uint64_t v49 = v57, !CGPDFNodeIsHitByPoint(v56, v88, v89, v13)))
      {
        unint64_t v50 = &v88;
        goto LABEL_68;
      }
    }
    unint64_t v50 = 0;
    uint64_t v82 = v49 - RangeFromStringRange + 1;
    goto LABEL_68;
  }

  return CreateCharacterSelectionBetweenPoints(a1, a3, a4, a5, a6, a7);
}

uint64_t CreateCharacterSelectionBetweenPoints(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  *(double *)uint64_t v44 = a3;
  *(double *)&v44[1] = a4;
  *(double *)uint64_t v43 = a5;
  *(double *)&v43[1] = a6;
  if (!a1) {
    return 0;
  }
  if (vabdd_f64(a3, a5) + vabdd_f64(a4, a6) < 0.1) {
    return 0;
  }
  uint64_t v8 = *(__n64 **)(a1 + 104);
  BOOL v42 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  CGPDFNodeGetNodeRangeBetweenPoints(v8, 1, a2, &v41, &v40, &v42, &v38, a3, a4, a5, a6, 0.0);
  if (v39 < 1) {
    return 0;
  }
  uint64_t v9 = v40;
  if (v41 != v40)
  {
    if (v42)
    {
      uint64_t v10 = v41;
    }
    else
    {
      uint64_t v10 = v40;
      uint64_t v9 = v41;
    }
    IndexSet = CreateIndexSet(v10, v9, 1, a2);
    uint64_t v11 = IndexSet;
    if (IndexSet)
    {
      if (IndexSet[2].i8[8]) {
        CPIndexSetNormalize((uint64_t)IndexSet);
      }
      uint64_t v13 = v11[1].i64[0];
      if (v13 >= 1)
      {
        uint64_t Range = CPIndexSetGetRange((uint64_t)v11, 0);
        uint64_t v16 = v15;
        uint64_t v17 = CPIndexSetGetRange((uint64_t)v11, v13 - 1);
        uint64_t v19 = v38;
        if (Range != v38)
        {
          uint64_t v20 = Range + v16 - v38;
          if (v20 < 1)
          {
            uint64_t v19 = -1;
            uint64_t v20 = 0;
          }
          if (v11[1].i64[0] >= 1)
          {
            uint64_t v21 = (uint64_t *)v11[2].i64[0];
            *uint64_t v21 = v19;
            v21[1] = v20;
            v11[2].i8[8] = 1;
          }
          if (v13 == 1)
          {
            uint64_t v17 = v19;
            uint64_t v18 = v20;
          }
        }
        if ((v17 & 0x8000000000000000) == 0 && v18 + v17 != v39 + v38 && v11[1].i64[0] >= v13)
        {
          uint64_t v22 = v39 + v38 - v17;
          if (v22 >= 1)
          {
            uint64_t v23 = v17;
          }
          else
          {
            uint64_t v22 = 0;
            uint64_t v23 = -1;
          }
          uint64_t v24 = (uint64_t *)(v11[2].i64[0] + 16 * (v13 - 1));
          *uint64_t v24 = v23;
          v24[1] = v22;
          v11[2].i8[8] = 1;
        }
      }
      goto LABEL_28;
    }
    return 0;
  }
  uint64_t v11 = CPIndexSetCreateWithRange(v38, v39);
  if (!v11) {
    return 0;
  }
LABEL_28:
  if (v11[2].i8[8]) {
    CPIndexSetNormalize((uint64_t)v11);
  }
  if (v11[1].i64[0] < 1) {
    uint64_t v25 = -1;
  }
  else {
    uint64_t v25 = *(void *)v11[2].i64[0];
  }
  uint64_t LastIndex = CPIndexSetGetLastIndex((uint64_t)v11);
  uint64_t v26 = 0;
  if (v25 == -1 || LastIndex == -1) {
    goto LABEL_53;
  }
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v35 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v11);
    goto LABEL_48;
  }
  if (v42) {
    uint64_t v29 = (double *)v44;
  }
  else {
    uint64_t v29 = (double *)v43;
  }
  if (v42) {
    uint64_t v30 = (double *)v43;
  }
  else {
    uint64_t v30 = (double *)v44;
  }
  char v37 = 0;
  CFIndex StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, v25, LastIndex - v25 + 1, v29, v30, a2, &v37, 0.0);
  if (StringRangeFromCursorRange < 0)
  {
    uint64_t v26 = 0;
    goto LABEL_53;
  }
  unint64_t v33 = StringRangeFromCursorRange;
  uint64_t v34 = v32;
  if (a2)
  {
    uint64_t v35 = (uint64_t)CGPDFSelectionCreateForStringRange(*(void *)(a1 + 16), StringRangeFromCursorRange, v32);
LABEL_48:
    uint64_t v26 = v35;
LABEL_53:
    CFRelease(v11);
    return v26;
  }
  CFRelease(v11);
  IndexSetForStringuint64_t Range = CGPDFLayoutCreateIndexSetForStringRange(a1, v33, v34);
  uint64_t v11 = CGPDFLayoutCopyIndexSetRemovingGraphics(a1, (uint64_t)IndexSetForStringRange);
  if (IndexSetForStringRange) {
    CFRelease(IndexSetForStringRange);
  }
  uint64_t v26 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v11);
  if (v11) {
    goto LABEL_53;
  }
  return v26;
}

int64x2_t *CreateIndexSet(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v27 = 1;
  BOOL v6 = (a3 - 514) < 3 || a3 == 1;
  if (!v6 && a3 != 1537) {
    int v27 = 0;
  }
  IteratorTouint64_t Node = (void **)CGPDFNodeCreateIteratorToNode(a1, a2, a3, a4);
  uint64_t TextRange = CGPDFNodeGetTextRange(a1);
  uint64_t v10 = v9;
  uint64_t Node = CGPDFNodeIteratorNextNode((uint64_t)IteratorToNode);
  uint64_t v26 = 0;
LABEL_7:
  uint64_t v12 = TextRange;
  for (uint64_t i = v10; ; uint64_t i = v23 - v12)
  {
    uint64_t v14 = Node;
    uint64_t v15 = CGPDFNodeIteratorNextNode((uint64_t)IteratorToNode);
    if (!v15) {
      break;
    }
    uint64_t Node = v15;
    uint64_t v16 = CGPDFNodeGetTextRange(v15);
    uint64_t TextRange = v16;
    uint64_t v10 = v17;
    unsigned int v18 = v27;
    if (v27)
    {
      if (v14)
      {
        if (*(_DWORD *)v14 == 513) {
          int v19 = 1;
        }
        else {
          int v19 = (*(_DWORD *)v14 >> 8) & 1;
        }
      }
      else
      {
        int v19 = 0;
      }
      unsigned int v18 = v19 ^ 1;
    }
    uint64_t v20 = i + v12 + v18;
    if (a3 != 1 || v20 >= v16) {
      goto LABEL_25;
    }
    uint64_t v21 = Node;
    while (*(_DWORD *)v21 != 1537)
    {
      uint64_t v21 = *(void *)(v21 + 8);
      if (!v21) {
        goto LABEL_25;
      }
    }
    if (*(double *)(v21 + 112) == 0.0)
    {
LABEL_25:
      if (v20 < v16) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v14) {
        uint64_t v22 = *(void *)(v14 + 8);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v24 = *(void *)(Node + 8);
      if (v22 != v24 && v20 < CGPDFNodeGetTextRange(v24))
      {
LABEL_32:
        if (v26) {
          CPIndexSetAddRange((uint64_t)v26, v12, i);
        }
        else {
          uint64_t v26 = CPIndexSetCreateWithRange(v12, i);
        }
        goto LABEL_7;
      }
    }
    uint64_t v23 = TextRange + v10;
    if (TextRange + v10 <= i + v12) {
      uint64_t v23 = i + v12;
    }
  }
  CGPDFNodeIteratorRelease(IteratorToNode);
  if (v26)
  {
    CPIndexSetAddRange((uint64_t)v26, v12, i);
    return v26;
  }
  else
  {
    return CPIndexSetCreateWithRange(v12, i);
  }
}

uint64_t CGPDFLayoutGetRTLData(__CFString **a1, uint64_t a2)
{
  uint64_t v3 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (pthread_mutex_t *)(a2 + 120);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 120));
  uint64_t v5 = a2 + 80;
  if (*(void *)(a2 + 80))
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
    v3[2] = *(__CFString **)(a2 + 96);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6)
    {
      uint64_t v27 = a2 + 80;
      uint64_t v28 = v4;
      uint64_t v29 = v3;
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      uint64_t appended = 0;
      uint64_t v9 = 0;
      int v10 = 0;
      ptr = 0;
      int v31 = 0;
      uint64_t v11 = v6;
      while (1)
      {
        int v12 = appended;
        uint64_t appended = CPTextServicesAppendTextLine(Mutable, (void *)a2, appended, v11, &ptr, &v31);
        uint64_t v11 = v6 - appended;
        if (v6 <= appended) {
          break;
        }
        uint64_t v13 = v31;
        if (v9)
        {
          int v14 = v31 + v10;
          uint64_t v9 = malloc_type_realloc(v9, 4 * (v31 + v10 + 1), 0x100004052888210uLL);
          uint64_t v15 = ptr;
          if (v31 >= 1)
          {
            for (uint64_t i = 0; i < v31; ++i)
              *((_DWORD *)v9 + v10 + i) = v15[i] + v12;
          }
          *((_DWORD *)v9 + v14) = appended - 1;
          free(v15);
          ptr = 0;
          int v10 = v14 + 1;
        }
        else
        {
          uint64_t v17 = ptr;
          ptr = 0;
          int v10 = v31 + 1;
          uint64_t v9 = malloc_type_realloc(v17, 4 * (v31 + 1), 0x100004052888210uLL);
          *((_DWORD *)v9 + v13) = appended - 1;
        }
        LOWORD(v18) = 0;
        if (a2 && appended >= 1)
        {
          if (*(void *)(a2 + 48) < appended)
          {
            LOWORD(v18) = 0;
          }
          else
          {
            uint64_t v18 = *(void *)(a2 + 24);
            if (v18)
            {
              uint64_t v18 = *(void *)(v18 + 24 * (appended - 1));
              if (v18) {
                LOWORD(v18) = *(_WORD *)(v18 + 8);
              }
            }
          }
        }
        UniChar chars = v18;
        CFStringAppendCharacters(Mutable, &chars, 1);
      }
      if (v9)
      {
        int v19 = v31 + v10;
        int v20 = v31 + v10 + 1;
        uint64_t v21 = (__CFString *)malloc_type_realloc(v9, 4 * v20, 0x100004052888210uLL);
        uint64_t v22 = ptr;
        if (v31 >= 1)
        {
          for (uint64_t j = 0; j < v31; ++j)
            *((_DWORD *)&v21->isa + v10 + j) = v22[j] + v12;
        }
        *((_DWORD *)&v21->isa + v19) = appended - 1;
        uint64_t v3 = v29;
        *((_DWORD *)v29 + 4) = v20;
        free(v22);
      }
      else
      {
        uint64_t v24 = ptr;
        uint64_t v25 = v31;
        uint64_t v3 = v29;
        *((_DWORD *)v29 + 4) = v31;
        uint64_t v21 = (__CFString *)malloc_type_realloc(v24, 4 * ((int)v25 + 1), 0x100004052888210uLL);
        *((_DWORD *)&v21->isa + v25) = appended - 1;
      }
      uint64_t v5 = v27;
      uint64_t v4 = v28;
      v3[1] = v21;
    }
    else
    {
      Mutable = 0;
    }
    *uint64_t v3 = Mutable;
    *(void *)(v5 + 16) = v3[2];
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v3;
  }

  return pthread_mutex_unlock(v4);
}

uint64_t CGPDFLayoutGetStringRangeFromCursorRange(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, uint64_t a6, unsigned char *a7, double a8)
{
  uint64_t v8 = a2;
  *a7 = 1;
  uint64_t v9 = -1;
  if ((a2 & 0x8000000000000000) == 0 && (a3 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = a2 + a3;
    if (a2 + a3 <= *(void *)(a1 + 48))
    {
      if (!*(unsigned char *)(a1 + 72)) {
        return CGPDFLayoutGetStringRangeFromRange(a1, v8, a3);
      }
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      CGPDFLayoutGetRTLData(&v84, a1);
      if ((int)v86 <= 0) {
        return CGPDFLayoutGetStringRangeFromRange(a1, v8, a3);
      }
      uint64_t v18 = v12 - 1;
      uint64_t v82 = v12 - 1;
      uint64_t v83 = v8;
      if (v12)
      {
        if (v8 != *(void *)(a1 + 48))
        {
          uint64_t v75 = (int)v86;
          __int16 v81 = 0;
          __int16 v80 = 0;
          if (a4)
          {
            uint64_t PairedIndexForCursor = CGPDFLayoutGetPairedIndexForCursor(a1, &v83, 1, a6, (unsigned char *)&v81 + 1, (BOOL *)&v80 + 1, *a4, a4[1], a8);
            int v20 = HIBYTE(v80);
            uint64_t v8 = v83;
            uint64_t v79 = PairedIndexForCursor;
            if (HIBYTE(v80)) {
              BOOL v21 = PairedIndexForCursor == v83;
            }
            else {
              BOOL v21 = 0;
            }
            char v22 = v21;
            if (a5)
            {
LABEL_16:
              uint64_t v23 = CGPDFLayoutGetPairedIndexForCursor(a1, &v82, 0, a6, &v81, (BOOL *)&v80, *a5, a5[1], a8);
              int v24 = v80;
              uint64_t v18 = v82;
              if ((_BYTE)v80) {
                BOOL v25 = v23 == v82;
              }
              else {
                BOOL v25 = 0;
              }
              char v26 = v25;
              if (v25) {
                char v27 = 1;
              }
              else {
                char v27 = v22;
              }
              if ((v27 & 1) == 0)
              {
                if (v79 == v82 && v23 == v8) {
                  return -1;
                }
                char v26 = 0;
                if (v8 == v82 && v79 == v23) {
                  return -1;
                }
              }
LABEL_35:
              int v70 = v20;
              char v76 = v26;
              uint64_t v74 = v23;
              StringRangeFromuint64_t Range = CGPDFLayoutGetStringRangeFromRange(a1, v8, 1);
              uint64_t v31 = v30;
              if (v8 == v18)
              {
                char v32 = CGPDFLayoutReadsLeftToRightAtIndex(a1, v8);
                uint64_t v33 = StringRangeFromRange;
                uint64_t v34 = v31;
                uint64_t v35 = StringRangeFromRange;
              }
              else
              {
                uint64_t v33 = CGPDFLayoutGetStringRangeFromRange(a1, v18, 1);
                uint64_t v34 = v36;
                uint64_t v35 = StringRangeFromRange;
                if (StringRangeFromRange <= v33)
                {
                  uint64_t v38 = StringRangeFromRange;
                  uint64_t v35 = v33;
                  goto LABEL_41;
                }
                char v32 = 0;
              }
              uint64_t v37 = v34;
              *a7 = v32;
              uint64_t v38 = v33;
              uint64_t v34 = v31;
              uint64_t v31 = v37;
              uint64_t v33 = v35;
LABEL_41:
              uint64_t v9 = -1;
              if ((v38 & 0x8000000000000000) == 0 && (v33 & 0x8000000000000000) == 0)
              {
                if (v22) {
                  goto LABEL_44;
                }
                if (HIBYTE(v81) && v70)
                {
                  char v39 = 0;
                  goto LABEL_48;
                }
                if (v8 == v18)
                {
LABEL_44:
                  char v39 = 1;
LABEL_48:
                  uint64_t v40 = v8;
                  goto LABEL_49;
                }
                uint64_t v72 = v34;
                uint64_t v58 = v35;
                uint64_t v59 = v38;
                uint64_t v60 = CGPDFLayoutGetStringRangeFromRange(a1, v79, 1);
                uint64_t v38 = v59;
                if (v60 < v59)
                {
                  uint64_t v40 = v8;
                  uint64_t v35 = v58;
                  uint64_t v34 = v72;
                }
                else
                {
                  uint64_t v35 = v58;
                  uint64_t v34 = v72;
                  if (v60 <= v58)
                  {
                    if (*a7)
                    {
                      uint64_t v31 = v61;
                    }
                    else
                    {
                      uint64_t v34 = v61;
                      uint64_t v35 = v60;
                    }
                    if (*a7) {
                      uint64_t v38 = v60;
                    }
                    char v39 = 1;
                    uint64_t v40 = v79;
                    uint64_t v79 = v8;
LABEL_49:
                    if (v76)
                    {
                      char v41 = 1;
                    }
                    else
                    {
                      if (!(_BYTE)v81 || !v24)
                      {
                        if (v8 == v18)
                        {
                          char v41 = 1;
                        }
                        else
                        {
                          char v62 = v39;
                          uint64_t v73 = v34;
                          uint64_t v78 = v40;
                          uint64_t v63 = v35;
                          char v41 = 1;
                          uint64_t v64 = v38;
                          uint64_t v65 = CGPDFLayoutGetStringRangeFromRange(a1, v74, 1);
                          uint64_t v38 = v64;
                          if (v65 < v64)
                          {
                            uint64_t v8 = v18;
                            uint64_t v35 = v63;
                            uint64_t v40 = v78;
                            uint64_t v34 = v73;
                            char v39 = v62;
                          }
                          else
                          {
                            uint64_t v35 = v63;
                            uint64_t v40 = v78;
                            uint64_t v34 = v73;
                            char v39 = v62;
                            if (v65 > v63) {
                              goto LABEL_54;
                            }
                            if (*a7)
                            {
                              uint64_t v34 = v66;
                              uint64_t v35 = v65;
                            }
                            else
                            {
                              uint64_t v31 = v66;
                            }
                            if (!*a7) {
                              uint64_t v38 = v65;
                            }
                            char v41 = 1;
                            uint64_t v8 = v74;
                            uint64_t v74 = v18;
                          }
                        }
LABEL_55:
                        if (*a7) {
                          char v42 = v41;
                        }
                        else {
                          char v42 = v39;
                        }
                        uint64_t v43 = v35 + v34;
                        uint64_t v44 = v35 + v34 - 1;
                        uint64_t v9 = v38 + v31;
                        if (v38 + v31 > v35)
                        {
                          uint64_t v9 = v38;
                          goto LABEL_121;
                        }
                        if (*a7) {
                          char v45 = v39;
                        }
                        else {
                          char v45 = v41;
                        }
                        if ((v45 & 1) == 0)
                        {
                          uint64_t v46 = *(int *)(v85 + 4 * v9);
                          if (v46 != -1)
                          {
                            if (*a7) {
                              uint64_t v47 = a4;
                            }
                            else {
                              uint64_t v47 = a5;
                            }
                            if (*a7) {
                              uint64_t v48 = v79;
                            }
                            else {
                              uint64_t v48 = v74;
                            }
                            if (*a7) {
                              uint64_t v49 = v40;
                            }
                            else {
                              uint64_t v49 = v8;
                            }
                            if (v48 == v46)
                            {
LABEL_83:
                              if ((v42 & 1) == 0)
                              {
                                uint64_t v53 = *(int *)(v85 + 4 * (v35 - 1));
                                if (v53 != -1)
                                {
                                  BOOL v54 = *a7 == 0;
                                  if (*a7) {
                                    uint64_t v55 = a5;
                                  }
                                  else {
                                    uint64_t v55 = a4;
                                  }
                                  if (*a7) {
                                    uint64_t v56 = v74;
                                  }
                                  else {
                                    uint64_t v56 = v79;
                                  }
                                  if (v54) {
                                    uint64_t v57 = v40;
                                  }
                                  else {
                                    uint64_t v57 = v8;
                                  }
                                  if (v56 == v53)
                                  {
                                    uint64_t v44 = v35 - 1;
                                  }
                                  else if (v43 < v75)
                                  {
                                    uint64_t v67 = *(int *)(v85 + 4 * v43);
                                    if (v67 != -1
                                      && v56 != v67
                                      && !CGPDFLayoutPointSelectsFirstIndex(a1, v57, v56, *v55, v55[1], a8))
                                    {
                                      uint64_t v68 = CGPDFLayoutGetStringRangeFromRange(a1, v56, 1);
                                      if ((v68 & 0x8000000000000000) == 0) {
                                        uint64_t v44 = v69 + v68 - 1;
                                      }
                                    }
                                  }
                                }
                              }
LABEL_121:
                              if (v44 >= v9) {
                                return v9;
                              }
                              return -1;
                            }
                            if (v38 >= 1)
                            {
                              uint64_t v50 = *(int *)(v85 + 4 * v38 - 4);
                              if (v50 != -1 && v48 != v50)
                              {
                                char v71 = v42;
                                uint64_t v77 = v40;
                                uint64_t v9 = v38;
                                uint64_t v51 = v35;
                                if (!CGPDFLayoutPointSelectsFirstIndex(a1, v49, v48, *v47, v47[1], a8))
                                {
                                  uint64_t v52 = CGPDFLayoutGetStringRangeFromRange(a1, v48, 1);
                                  if (v52 >= 0) {
                                    uint64_t v9 = v52;
                                  }
                                }
                                uint64_t v35 = v51;
                                uint64_t v40 = v77;
                                char v42 = v71;
                                goto LABEL_83;
                              }
                            }
                          }
                        }
                        uint64_t v9 = v38;
                        goto LABEL_83;
                      }
                      char v41 = 0;
                    }
LABEL_54:
                    uint64_t v8 = v18;
                    goto LABEL_55;
                  }
                  uint64_t v40 = v8;
                }
                char v39 = 1;
                goto LABEL_49;
              }
              return v9;
            }
          }
          else
          {
            int v20 = 1;
            HIBYTE(v81) = 1;
            uint64_t v79 = v8;
            char v22 = 1;
            if (a5) {
              goto LABEL_16;
            }
          }
          int v24 = 1;
          LOBYTE(v81) = 1;
          char v26 = 1;
          uint64_t v23 = v18;
          goto LABEL_35;
        }
      }
    }
  }
  return v9;
}

int64x2_t *CGPDFLayoutCreateIndexSetForStringRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (!a1 || (a2 & 0x8000000000000000) != 0) {
    return v3;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    char v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    CGPDFLayoutGetRTLData(&v26, a1);
    uint64_t v3 = 0;
    int64_t v7 = a2 + a3;
    int64_t v8 = (int)v28;
    uint64_t v9 = a3 - 1;
    if (a3 >= 1 && v7 <= (int)v28)
    {
      uint64_t v10 = *(int *)(v27 + 4 * a2);
      uint64_t v11 = -v10;
      if ((unint64_t)a3 >= 2)
      {
        uint64_t v3 = 0;
        uint64_t v12 = (int *)(v27 + 4 * a2 + 4);
        uint64_t v13 = *(int *)(v27 + 4 * a2);
        while (1)
        {
          uint64_t v15 = *v12++;
          uint64_t v14 = v15;
          uint64_t v16 = v10 + 1;
          if (v13 - 1 > v15 || v16 < v14)
          {
            if (v13 < 0 || v10 >= *(void *)(a1 + 48)) {
              return v3;
            }
            uint64_t v18 = v11 + v10;
            if (v3) {
              CPIndexSetAddRange((uint64_t)v3, v13, v18 + 1);
            }
            else {
              uint64_t v3 = CPIndexSetCreateWithRange(v13, v18 + 1);
            }
            uint64_t v10 = v14;
          }
          else
          {
            if (v16 == v14) {
              uint64_t v19 = v14;
            }
            else {
              uint64_t v19 = v10;
            }
            if (v13 - 1 != v14)
            {
              uint64_t v14 = v13;
              uint64_t v10 = v19;
            }
          }
          uint64_t v11 = -v14;
          uint64_t v13 = v14;
          if (!--v9) {
            goto LABEL_28;
          }
        }
      }
      uint64_t v3 = 0;
      uint64_t v14 = *(int *)(v27 + 4 * a2);
LABEL_28:
      if (v14 < 0 || v10 >= *(void *)(a1 + 48)) {
        return v3;
      }
      uint64_t v20 = v11 + v10;
      if (v3) {
        CPIndexSetAddRange((uint64_t)v3, v14, v20 + 1);
      }
      else {
        uint64_t v3 = CPIndexSetCreateWithRange(v14, v20 + 1);
      }
    }
    if (v7 <= v8) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 0;
    int64_t v7 = a2 + a3;
  }
  uint64_t CharacterIndexAtUnicodeIndex = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(void *)(a1 + 56), a2);
  uint64_t v22 = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(void *)(a1 + 56), v7);
  if (CharacterIndexAtUnicodeIndex < 0 || v22 > *(void *)(a1 + 48)) {
    return v3;
  }
  uint64_t v23 = v22 - CharacterIndexAtUnicodeIndex;
  if (v22 <= CharacterIndexAtUnicodeIndex)
  {
    if (v22 == CharacterIndexAtUnicodeIndex)
    {
      uint64_t v24 = CharacterIndexAtUnicodeIndex;
      uint64_t v23 = 1;
      goto LABEL_40;
    }
    return v3;
  }
  uint64_t v24 = CharacterIndexAtUnicodeIndex;
LABEL_40:

  return CPIndexSetCreateWithRange(v24, v23);
}

int64x2_t *CGPDFLayoutCopyIndexSetRemovingGraphics(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 40)) {
    CPIndexSetNormalize(a2);
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = -1;
  do
  {
    uint64_t Range = CPIndexSetGetRange(a2, v7);
    if (v10 < 1) {
      goto LABEL_35;
    }
    uint64_t v11 = Range + v10;
    int v12 = 1;
    while (2)
    {
      uint64_t v13 = 24 * Range;
      uint64_t v14 = Range;
      while (1)
      {
        if (a1)
        {
          if ((v14 & 0x8000000000000000) == 0 && *(void *)(a1 + 48) > v14)
          {
            uint64_t v15 = *(void *)(a1 + 24);
            if (v15)
            {
              uint64_t v16 = *(void *)(v15 + v13);
              if (v16)
              {
                if (*(__int16 *)(v16 + 8) == -4) {
                  break;
                }
              }
            }
          }
        }
LABEL_17:
        if (v12) {
          uint64_t v6 = v14;
        }
        uint64_t v8 = v14;
        v13 += 24;
        ++v14;
        int v12 = 0;
        if (v14 >= v11)
        {
          if (v11 <= Range + 1) {
            uint64_t v18 = Range + 1;
          }
          else {
            uint64_t v18 = v11;
          }
          uint64_t v8 = v18 - 1;
          goto LABEL_32;
        }
      }
      int v17 = *(_DWORD *)(v15 + v13 + 16);
      if ((v17 | v12))
      {
        if ((v17 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      if (v5) {
        CPIndexSetAddRange((uint64_t)v5, v6, v8 - v6 + 1);
      }
      else {
        uint64_t v5 = CPIndexSetCreateWithRange(v6, v8 - v6 + 1);
      }
      int v12 = 1;
LABEL_25:
      uint64_t Range = v14 + 1;
      if (v14 + 1 < v11) {
        continue;
      }
      break;
    }
    if ((v12 & 1) == 0)
    {
      uint64_t v18 = v8 + 1;
LABEL_32:
      if (v5) {
        CPIndexSetAddRange((uint64_t)v5, v6, v18 - v6);
      }
      else {
        uint64_t v5 = CPIndexSetCreateWithRange(v6, v18 - v6);
      }
    }
LABEL_35:
    ++v7;
  }
  while (v7 != v4);
  return v5;
}

uint64_t CGPDFLayoutGetRangeFromStringRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  if (a3 < 1) {
    return -1;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    CGPDFLayoutGetRTLData(&v18, a1);
    unint64_t v7 = a2 + a3;
    if ((uint64_t)(a2 + a3) <= (int)v20)
    {
      uint64_t v8 = *(int *)(v19 + 4 * a2);
      if ((unint64_t)a3 >= 2)
      {
        uint64_t v9 = (int *)(v19 + 4 * a2 + 4);
        uint64_t v10 = *(int *)(v19 + 4 * a2);
        do
        {
          uint64_t v12 = *v9++;
          uint64_t v11 = v12;
          if (v8 <= v12) {
            uint64_t v13 = v11;
          }
          else {
            uint64_t v13 = v8;
          }
          BOOL v14 = v10 <= v11;
          if (v10 >= v11) {
            uint64_t v10 = v11;
          }
          if (v14) {
            uint64_t v8 = v13;
          }
          --v3;
        }
        while (v3);
        if (v10 < 0) {
          return -1;
        }
        goto LABEL_23;
      }
      uint64_t v10 = *(int *)(v19 + 4 * a2);
      if ((v8 & 0x8000000000000000) == 0)
      {
LABEL_23:
        if (v8 < *(void *)(a1 + 48)) {
          return v10;
        }
        else {
          return -1;
        }
      }
      return -1;
    }
  }
  else
  {
    unint64_t v7 = a2 + a3;
  }
  uint64_t CharacterIndexAtUnicodeIndex = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(void *)(a1 + 56), a2);
  uint64_t v16 = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(void *)(a1 + 56), v7);
  if (CharacterIndexAtUnicodeIndex < 0) {
    return -1;
  }
  if (v16 <= *(void *)(a1 + 48) && v16 > CharacterIndexAtUnicodeIndex) {
    return CharacterIndexAtUnicodeIndex;
  }
  else {
    return -1;
  }
}

BOOL CGPDFLayoutExtendRangeToWordBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 40)) {
    CPIndexSetNormalize(a2);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    return 0;
  }
  uint64_t Range = CPIndexSetGetRange(a2, 0);
  uint64_t v58 = v10;
  uint64_t v59 = Range;
  uint64_t v11 = CPIndexSetGetRange(a2, v8 - 1);
  uint64_t v13 = v12;
  uint64_t FirstIndex = CPIndexSetGetFirstIndex(a2);
  uint64_t LastIndex = CPIndexSetGetLastIndex(a2);
  uint64_t v16 = 0;
  if (LastIndex != -1 && FirstIndex != -1 && FirstIndex <= LastIndex)
  {
    uint64_t v56 = v13;
    uint64_t v17 = LastIndex + 1 - FirstIndex;
    uint64_t v60 = FirstIndex;
    uint64_t v61 = v17;
    uint64_t v18 = a4 ? a3 : a3 - (a3 - FirstIndex > LastIndex + 1 - a3);
    uint64_t v19 = a4 ? a4 : 1;
    StringRangeFromuint64_t Range = CGPDFLayoutGetStringRangeFromRange(a1, v18, v19);
    uint64_t v57 = v21;
    unint64_t v22 = CGPDFLayoutGetStringRangeFromRange(a1, FirstIndex, v17);
    uint64_t v24 = v23;
    uint64_t v16 = 1;
    StringForRanges = CGPDFLayoutCreateStringForRanges(a1, (uint64_t)&v60, 1);
    if (StringForRanges)
    {
      CFStringRef v26 = StringForRanges;
      uint64_t v55 = v11;
      if (StringRangeFromRange < 0) {
        goto LABEL_44;
      }
      if (v24 < 1) {
        goto LABEL_44;
      }
      CFIndex Length = CFStringGetLength(StringForRanges);
      v62.CFIndex location = 0;
      v62.length = Length;
      uint64_t v28 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v26, v62, 4uLL, 0);
      if (!v28) {
        goto LABEL_44;
      }
      uint64_t v29 = v28;
      CFIndex v54 = Length;
      CFStringTokenizerTokenType v30 = CFStringTokenizerGoToTokenAtIndex(v28, StringRangeFromRange - v22);
      CFIndex location = CFStringTokenizerGetCurrentTokenRange(v29).location;
      if (v30) {
        BOOL v32 = location < 1;
      }
      else {
        BOOL v32 = 1;
      }
      int v33 = v32;
      if (!v32)
      {
        BOOL v32 = v24 <= location;
        v24 -= location;
        if (v32)
        {
          CFRelease(v29);
          goto LABEL_44;
        }
        v22 += location;
      }
      if ((v22 & 0x8000000000000000) != 0
        || (CFStringTokenizerTokenType v34 = CFStringTokenizerGoToTokenAtIndex(v29, ~(v22 + v24) + v57 + StringRangeFromRange + v54),
            CurrentTokenuint64_t Range = CFStringTokenizerGetCurrentTokenRange(v29),
            !v34)
        || (uint64_t v36 = v54 - (CurrentTokenRange.length + CurrentTokenRange.location), v36 < 1))
      {
        CFRelease(v29);
        if (v33) {
          goto LABEL_44;
        }
      }
      else
      {
        v24 -= v36;
        CFRelease(v29);
        if (v24 < 1) {
          goto LABEL_44;
        }
      }
      RangeFromStringuint64_t Range = CGPDFLayoutGetRangeFromStringRange(a1, v22, v24);
      if ((RangeFromStringRange & 0x8000000000000000) == 0)
      {
        uint64_t v39 = RangeFromStringRange - v60;
        if (RangeFromStringRange - v60 < 1)
        {
          uint64_t v42 = v55;
          uint64_t v43 = v56;
        }
        else
        {
          uint64_t v40 = v39 + v59;
          uint64_t v41 = v58 - v39;
          if (v58 - v39 < 1)
          {
            uint64_t v40 = -1;
            uint64_t v41 = 0;
          }
          uint64_t v42 = v55;
          uint64_t v43 = v56;
          if (*(uint64_t *)(a2 + 16) >= 1)
          {
            uint64_t v44 = *(uint64_t **)(a2 + 32);
            *uint64_t v44 = v40;
            v44[1] = v41;
            *(unsigned char *)(a2 + 40) = 1;
          }
          if (v8 == 1)
          {
            uint64_t v42 = v40;
            uint64_t v43 = v41;
          }
        }
        if (v42 < 0 || (uint64_t v46 = v60 - (RangeFromStringRange + v38) + v61, v46 < 1))
        {
          CFRelease(v26);
          if (v39 < 1) {
            return 1;
          }
        }
        else
        {
          if (*(void *)(a2 + 16) >= v8)
          {
            uint64_t v47 = v43 - v46;
            if (v47 >= 1)
            {
              uint64_t v48 = v42;
            }
            else
            {
              uint64_t v47 = 0;
              uint64_t v48 = -1;
            }
            uint64_t v49 = (uint64_t *)(*(void *)(a2 + 32) + 16 * (v8 - 1));
            uint64_t *v49 = v48;
            v49[1] = v47;
            *(unsigned char *)(a2 + 40) = 1;
          }
          CFRelease(v26);
        }
        uint64_t v50 = CPIndexSetGetFirstIndex(a2);
        uint64_t v51 = CPIndexSetGetLastIndex(a2);
        return v50 != -1 && v50 <= v51 && v51 != -1;
      }
LABEL_44:
      CFRelease(v26);
      return 1;
    }
  }
  return v16;
}

uint64_t CGPDFLayoutGetStringRangeFromRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 1) {
    return -1;
  }
  uint64_t v23 = v3;
  uint64_t v24 = v4;
  if (*(unsigned char *)(a1 + 72)
    && (v20 = 0, v21 = 0, v22 = 0, CGPDFLayoutGetRTLData(&v20, a1), uint64_t v8 = v22, (int)v22 >= 1))
  {
    unint64_t v9 = 0;
    uint64_t v10 = a2 + a3;
    while (1)
    {
      uint64_t v11 = *(int *)(v21 + 4 * v9);
      if (a2 <= v11 && v10 > v11) {
        break;
      }
      if (v22 == ++v9)
      {
        unint64_t v13 = (v22 - 1);
        goto LABEL_25;
      }
    }
    unint64_t v13 = (v22 - 1);
    if (v9 < v13)
    {
      while (1)
      {
        uint64_t v18 = *(int *)(v21 + 4 * v13);
        if (a2 <= v18 && v10 > v18) {
          break;
        }
        if ((uint64_t)--v13 <= (uint64_t)v9)
        {
          uint64_t v8 = v9;
          unint64_t v13 = v9;
          goto LABEL_25;
        }
      }
    }
    uint64_t v8 = v9;
LABEL_25:
    if ((uint64_t)v13 < v8) {
      return -1;
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t UnicodeRangeAtCharacterIndex = CPMultiUnicodesGetUnicodeRangeAtCharacterIndex(*(void *)(a1 + 56), a2);
    uint64_t v15 = CPMultiUnicodesGetUnicodeRangeAtCharacterIndex(*(void *)(a1 + 56), a2 + a3 - 1);
    if (UnicodeRangeAtCharacterIndex >= 0 && v15 + v16 > UnicodeRangeAtCharacterIndex) {
      return UnicodeRangeAtCharacterIndex;
    }
    else {
      return -1;
    }
  }
}

__CFString *CGPDFLayoutCreateStringForRanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Mutable = 0;
  __int16 v47 = 32;
  if (a1)
  {
    uint64_t v4 = a2;
    if (a2)
    {
      uint64_t v41 = a3 - 1;
      if (a3 >= 1)
      {
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        if (Mutable)
        {
          uint64_t v6 = 0;
          int v39 = *(unsigned __int8 *)(a1 + 72);
          UniChar v46 = 13;
          uint64_t v40 = v4;
          do
          {
            uint64_t v43 = v6;
            unint64_t v7 = (uint64_t *)(v4 + 16 * v6);
            uint64_t v8 = *v7;
            uint64_t v9 = v7[1];
            if (v39)
            {
              if (v9)
              {
                uint64_t v10 = v8 + v9;
                while (1)
                {
                  uint64_t appended = CPTextServicesAppendTextLine(Mutable, (void *)a1, v8, v9, 0, 0);
                  uint64_t v9 = v10 - appended;
                  if (v10 <= appended) {
                    break;
                  }
                  uint64_t v8 = appended;
                  if (appended >= 1 && *(void *)(a1 + 48) >= appended && (uint64_t v12 = *(void *)(a1 + 24)) != 0)
                  {
                    uint64_t v13 = *(void *)(v12 + 24 * (appended - 1));
                    if (v13) {
                      LOWORD(v13) = *(_WORD *)(v13 + 8);
                    }
                  }
                  else
                  {
                    LOWORD(v13) = 0;
                  }
                  UniChar chars = v13;
                  CFStringAppendCharacters(Mutable, &chars, 1);
                }
              }
            }
            else
            {
              RangeInCharacteruint64_t Range = CPMultiUnicodesGetRangeInCharacterRange(*(void *)(a1 + 56), v8, v9);
              BOOL v16 = RangeInCharacterRange == 0x7FFFFFFFFFFFFFFFLL;
              BOOL v17 = v15 == 0;
              if (v16 && v17) {
                CFIndex v18 = 0;
              }
              else {
                CFIndex v18 = RangeInCharacterRange;
              }
              if (v16 && v17) {
                CFIndex v19 = 0;
              }
              else {
                CFIndex v19 = RangeInCharacterRange + v15;
              }
              if (v18 <= v19)
              {
                uint64_t v20 = v8 - 1;
                uint64_t v44 = v9 + v8;
                do
                {
                  uint64_t v21 = v20;
                  uint64_t v20 = v44;
                  if (v18 < v19)
                  {
                    uint64_t v22 = *(void *)(a1 + 56);
                    if (v22
                      && (CFArrayRef v23 = *(const __CFArray **)(v22 + 24)) != 0
                      && (ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v23, v18)) != 0)
                    {
                      uint64_t v20 = *ValueAtIndex;
                    }
                    else
                    {
                      uint64_t v20 = 0;
                    }
                  }
                  uint64_t v25 = v21 + 1;
                  if (v21 + 1 < v20)
                  {
                    uint64_t v26 = 24 * v21 + 24;
                    do
                    {
                      if (v25 >= *(void *)(a1 + 48)) {
                        break;
                      }
                      uint64_t v27 = *(void *)(*(void *)(a1 + 24) + v26);
                      if (v27)
                      {
                        unsigned __int16 v45 = *(_WORD *)(v27 + 8);
                        uint64_t v28 = v45 == 65532 ? (const UniChar *)&v47 : &v45;
                      }
                      else
                      {
                        unsigned __int16 v45 = 0;
                        uint64_t v28 = &v45;
                      }
                      CFStringAppendCharacters(Mutable, v28, 1);
                      ++v25;
                      v26 += 24;
                    }
                    while (v20 != v25);
                  }
                  if (v18 < v19)
                  {
                    uint64_t v29 = *(void *)(a1 + 56);
                    if (v29)
                    {
                      CFArrayRef v30 = *(const __CFArray **)(v29 + 24);
                      if (v30)
                      {
                        uint64_t v31 = CFArrayGetValueAtIndex(v30, v18);
                        if (v31)
                        {
                          uint64_t v32 = v31[2];
                          if (v32)
                          {
                            int v33 = (const UniChar *)v31[3];
                            CFStringTokenizerTokenType v34 = v33;
                            do
                            {
                              int v35 = *(__int16 *)v34++;
                              if (v35 == -4) {
                                uint64_t v36 = (const UniChar *)&v47;
                              }
                              else {
                                uint64_t v36 = v33;
                              }
                              CFStringAppendCharacters(Mutable, v36, 1);
                              int v33 = v34;
                              --v32;
                            }
                            while (v32);
                          }
                        }
                      }
                    }
                  }
                }
                while (v18++ != v19);
              }
            }
            if (v43 < v41) {
              CFStringAppendCharacters(Mutable, &v46, 1);
            }
            uint64_t v6 = v43 + 1;
            uint64_t v4 = v40;
          }
          while (v43 + 1 != a3);
        }
      }
    }
  }
  return Mutable;
}

uint64_t CGPDFLayoutGetPairedIndexForCursor(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, unsigned char *a5, BOOL *a6, double a7, double a8, double a9)
{
  uint64_t v18 = *a2;
  if (v18 < 0 || *(void *)(a1 + 48) <= v18)
  {
    LOWORD(v19) = 0;
    if (a3) {
      goto LABEL_6;
    }
LABEL_18:
    if ((v19 & 8) != 0) {
      goto LABEL_25;
    }
    if ((v19 & 0x400) == 0) {
      goto LABEL_31;
    }
    uint64_t v20 = v18 - 1;
    if (v18 < 1) {
      goto LABEL_31;
    }
    if (*(void *)(a1 + 48) < v18) {
      goto LABEL_31;
    }
    uint64_t v23 = *(void *)(a1 + 24);
    if (!v23 || (*(unsigned char *)(v23 + 24 * v20 + 16) & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  if (v19) {
    LODWORD(v19) = *(_DWORD *)(v19 + 24 * v18 + 16);
  }
  if (!a3) {
    goto LABEL_18;
  }
LABEL_6:
  if ((v19 & 0x404) == 0x400)
  {
    uint64_t v20 = v18 + 1;
    if (v18 < -1 || v20 >= *(void *)(a1 + 48)) {
      goto LABEL_30;
    }
    uint64_t v22 = *(void *)(a1 + 24);
    if (!v22 || (*(unsigned char *)(v22 + 24 * v20 + 16) & 4) == 0) {
      goto LABEL_30;
    }
LABEL_24:
    *a2 = v20;
    uint64_t v18 = v20;
    goto LABEL_25;
  }
  if ((v19 & 4) == 0) {
    goto LABEL_30;
  }
LABEL_25:
  uint64_t v24 = *(_DWORD **)(a1 + 104);
  NodeContaininguint64_t TextRange = CGPDFNodeGetNodeContainingTextRange((uint64_t)v24, v18, 1);
  if (!NodeContainingTextRange)
  {
LABEL_29:
    uint64_t v18 = *a2;
    if (a3)
    {
LABEL_30:
      uint64_t IndexFromStringIndex = v18 - (v18 > 0);
LABEL_34:
      *a5 = 1;
LABEL_35:
      *a6 = 1;
      return IndexFromStringIndex;
    }
LABEL_31:
    if (v18 + 1 >= *(void *)(a1 + 48)) {
      uint64_t IndexFromStringIndex = v18;
    }
    else {
      uint64_t IndexFromStringIndex = v18 + 1;
    }
    goto LABEL_34;
  }
  uint64_t v26 = NodeContainingTextRange;
  while (*(_DWORD *)v26 != 514)
  {
    uint64_t v26 = *(void *)(v26 + 8);
    if (!v26) {
      goto LABEL_29;
    }
  }
  double HitTestRect = CGPDFNodeGetHitTestRect(v26, a9);
  double v31 = v30;
  double v33 = v32;
  double v35 = v34;
  double Rotation = CGPDFNodeGetRotation(v26);
  double v37 = a8;
  double v38 = a7;
  if (Rotation != 0.0)
  {
    __double2 v39 = __sincos_stret(Rotation);
    double v38 = a8 * v39.__sinval + v39.__cosval * a7 + 0.0;
    double v37 = a8 * v39.__cosval - v39.__sinval * a7 + 0.0;
  }
  if (v31 > v37 || v37 > v31 + v35)
  {
    *a5 = 0;
    goto LABEL_45;
  }
  if (a3 && v38 <= HitTestRect + v33)
  {
    *a5 = 1;
  }
  else
  {
    *a5 = (v38 >= HitTestRect) & ~(_BYTE)a3;
    if (((v38 >= HitTestRect) & ~(_BYTE)a3) == 0) {
      goto LABEL_45;
    }
  }
  uint64_t IndexFromStringIndex = *a2;
  double CharacterBounds = CGPDFLayoutGetCharacterBounds(a1, *a2);
  if (a3 && v38 >= CharacterBounds - a9 || (a3 & 1) == 0 && v38 <= CharacterBounds + v78 + a9) {
    goto LABEL_35;
  }
LABEL_45:
  uint64_t TextRange = CGPDFNodeGetTextRange(v26);
  uint64_t v43 = v42;
  StringDirectionFromCursoruint64_t Range = CGPDFLayoutGetStringDirectionFromCursorRange(a1, TextRange, v42);
  if (a3)
  {
    if ((StringDirectionFromCursorRange & 1) != 0 || !*a5) {
      goto LABEL_54;
    }
LABEL_70:
    if (*(unsigned char *)(a1 + 72))
    {
      StringRangeFromuint64_t Range = CGPDFLayoutGetStringRangeFromRange(a1, TextRange, v43);
      *a2 = CGPDFLayoutGetIndexFromStringIndex(a1, v69 + StringRangeFromRange - 1);
    }
    uint64_t NodeAfter = CGPDFNodeGetNodeAfter(v24, (_DWORD *)v26, 514, a4);
    if (!NodeAfter) {
      goto LABEL_75;
    }
    char v71 = (_DWORD *)NodeAfter;
    uint64_t IndexFromStringIndex = CGPDFNodeGetTextRange(NodeAfter);
    uint64_t v73 = v72;
    uint64_t v74 = CGPDFLayoutGetStringRangeFromRange(a1, IndexFromStringIndex, v72);
    uint64_t v76 = v74;
    if (a3)
    {
      *a6 = 0;
LABEL_100:
      uint64_t v94 = a1;
      int64_t v93 = v76;
      goto LABEL_101;
    }
    uint64_t v96 = v75;
    uint64_t v79 = v74;
    double v98 = HitTestRect;
    double v100 = CGPDFNodeGetHitTestRect((uint64_t)v71, a9);
    double v81 = v80;
    double v83 = v82;
    double v85 = v84;
    double v86 = CGPDFNodeGetRotation((uint64_t)v71);
    if (v86 != 0.0)
    {
      __double2 v87 = __sincos_stret(v86);
      double v88 = a8 * v87.__cosval - v87.__sinval * a7;
      a7 = a8 * v87.__sinval + v87.__cosval * a7 + 0.0;
      a8 = v88 + 0.0;
    }
    if (v81 <= a8 && a8 <= v81 + v85)
    {
      *a6 = a7 <= v100 + v83;
      if (a7 > v100 + v83) {
        goto LABEL_99;
      }
      if (a7 >= CGPDFLayoutGetCharacterBounds(a1, IndexFromStringIndex) - a9) {
        goto LABEL_104;
      }
      if (!*a5) {
        goto LABEL_92;
      }
      if (vabdd_f64(v38 - v98, v33) > vabdd_f64(v100, a7))
      {
        *a5 = 0;
        if (*a6)
        {
LABEL_92:
          char v89 = CGPDFLayoutGetStringDirectionFromCursorRange(a1, IndexFromStringIndex, v73);
          uint64_t v76 = v79;
          if ((v89 & 1) == 0)
          {
            uint64_t IndexFromStringIndex = CGPDFLayoutGetIndexFromStringIndex(a1, v96 + v79 - 1);
            *a2 = IndexFromStringIndex;
            *a5 = 1;
            uint64_t v90 = CGPDFNodeGetNodeAfter(v24, v71, 514, a4);
            *a6 = 0;
            if (!v90) {
              return IndexFromStringIndex;
            }
            uint64_t v91 = CGPDFNodeGetTextRange(v90);
            uint64_t v76 = CGPDFLayoutGetStringRangeFromRange(a1, v91, v92);
          }
          goto LABEL_100;
        }
LABEL_99:
        uint64_t v76 = v79;
        goto LABEL_100;
      }
    }
    *a6 = 0;
    goto LABEL_99;
  }
  if ((StringDirectionFromCursorRange & 1) != 0 || !*a5) {
    goto LABEL_70;
  }
LABEL_54:
  if (*(unsigned char *)(a1 + 72))
  {
    int64_t v45 = CGPDFLayoutGetStringRangeFromRange(a1, TextRange, v43);
    *a2 = CGPDFLayoutGetIndexFromStringIndex(a1, v45);
  }
  NodeBefore = CGPDFNodeGetNodeBefore(v24, (_DWORD *)v26, 514, a4);
  if (!NodeBefore)
  {
LABEL_75:
    uint64_t IndexFromStringIndex = *a2;
    *a6 = 0;
    return IndexFromStringIndex;
  }
  __int16 v47 = NodeBefore;
  uint64_t v48 = CGPDFNodeGetTextRange((uint64_t)NodeBefore);
  uint64_t v99 = v49;
  uint64_t v51 = CGPDFLayoutGetStringRangeFromRange(a1, v48, v49);
  if (a3)
  {
    uint64_t v52 = v50;
    double v97 = HitTestRect;
    double v53 = CGPDFNodeGetHitTestRect((uint64_t)v47, a9);
    double v55 = v54;
    double v57 = v56;
    double v59 = v58;
    double v60 = CGPDFNodeGetRotation((uint64_t)v47);
    if (v60 != 0.0)
    {
      __double2 v61 = __sincos_stret(v60);
      double v62 = a8 * v61.__cosval - v61.__sinval * a7;
      a7 = a8 * v61.__sinval + v61.__cosval * a7 + 0.0;
      a8 = v62 + 0.0;
    }
    if (v55 > a8 || a8 > v55 + v59) {
      goto LABEL_95;
    }
    *a6 = a7 >= v53;
    if (a7 < v53) {
      goto LABEL_96;
    }
    int64_t v95 = v51;
    uint64_t IndexFromStringIndex = v99 + v48 - 1;
    double v63 = CGPDFLayoutGetCharacterBounds(a1, IndexFromStringIndex);
    if (a7 > v63 + v64 + a9)
    {
      uint64_t v51 = v95;
      if (!*a5) {
        goto LABEL_67;
      }
      if (vabdd_f64(v97, v38) > vabdd_f64(a7 - v53, v57))
      {
        *a5 = 0;
        if (*a6)
        {
LABEL_67:
          if ((CGPDFLayoutGetStringDirectionFromCursorRange(a1, v48, v99) & 1) == 0)
          {
            uint64_t IndexFromStringIndex = CGPDFLayoutGetIndexFromStringIndex(a1, v95);
            *a2 = IndexFromStringIndex;
            *a5 = 1;
            uint64_t v65 = CGPDFNodeGetNodeBefore(v24, v47, 514, a4);
            *a6 = 0;
            if (!v65) {
              return IndexFromStringIndex;
            }
            uint64_t v66 = CGPDFNodeGetTextRange((uint64_t)v65);
            uint64_t v51 = CGPDFLayoutGetStringRangeFromRange(a1, v66, v67);
            goto LABEL_97;
          }
        }
LABEL_96:
        uint64_t v50 = v52;
        goto LABEL_97;
      }
LABEL_95:
      *a6 = 0;
      goto LABEL_96;
    }
LABEL_104:
    *a2 = IndexFromStringIndex;
    goto LABEL_34;
  }
  *a6 = 0;
LABEL_97:
  int64_t v93 = v51 + v50 - 1;
  uint64_t v94 = a1;
LABEL_101:

  return CGPDFLayoutGetIndexFromStringIndex(v94, v93);
}

uint64_t CGPDFLayoutReadsLeftToRightAtIndex(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return 1;
  }
  if (*(void *)(a1 + 48) <= a2) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 72)) {
    return 1;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  CGPDFLayoutGetRTLData(&v18, a1);
  uint64_t v4 = (int)v20;
  if ((int)v20 < 1) {
    return 1;
  }
  uint64_t v5 = 1;
  StringRangeFromuint64_t Range = CGPDFLayoutGetStringRangeFromRange(a1, a2, 1);
  if ((StringRangeFromRange & 0x8000000000000000) == 0)
  {
    uint64_t v8 = a2;
    if (StringRangeFromRange) {
      uint64_t v8 = *(int *)(v19 + 4 * StringRangeFromRange - 4);
    }
    uint64_t v9 = a2;
    if (StringRangeFromRange + v7 < v4) {
      uint64_t v9 = *(int *)(v19 + 4 * (StringRangeFromRange + v7));
    }
    if (v8 == a2)
    {
      return v9 >= a2;
    }
    else
    {
      BOOL v11 = __OFSUB__(v9, a2);
      uint64_t v12 = v9 - a2;
      if (v12)
      {
        if ((v12 < 0) ^ v11 | (v12 == 0)) {
          unsigned int v13 = 0;
        }
        else {
          unsigned int v13 = 1;
        }
        BOOL v14 = v8 - a2 < 0;
        BOOL v15 = v8 < a2;
        unint64_t v16 = v8 - a2;
        unsigned int v17 = v15;
        if (v14) {
          unint64_t v16 = -(uint64_t)v16;
        }
        if (v12 < 0) {
          uint64_t v12 = -v12;
        }
        if (v16 >= v12) {
          return v13;
        }
        else {
          return v17;
        }
      }
      else
      {
        return v8 < a2;
      }
    }
  }
  return v5;
}

BOOL CGPDFLayoutPointSelectsFirstIndex(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, double a6)
{
  double HitTestRectAtIndex = CGPDFLayoutGetHitTestRectAtIndex(a1, a2, a6);
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  double v19 = a5;
  double v20 = a4;
  if (a1)
  {
    double v19 = a5;
    double v20 = a4;
    if ((a2 & 0x8000000000000000) == 0)
    {
      double v19 = a5;
      double v20 = a4;
      if (*(void *)(a1 + 48) > a2)
      {
        uint64_t v21 = *(void *)(a1 + 24);
        double v19 = a5;
        double v20 = a4;
        if (v21)
        {
          uint64_t v22 = *(void *)(v21 + 24 * a2 + 8);
          double v19 = a5;
          double v20 = a4;
          if (v22)
          {
            double v23 = *(double *)(v22 + 40);
            double v19 = a5;
            double v20 = a4;
            if (v23 != 0.0)
            {
              __double2 v24 = __sincos_stret(v23);
              double v20 = a5 * v24.__sinval + v24.__cosval * a4 + 0.0;
              double v19 = a5 * v24.__cosval - v24.__sinval * a4 + 0.0;
            }
          }
        }
      }
    }
  }
  v39.origin.x = HitTestRectAtIndex;
  v39.origin.y = v14;
  v39.size.CGFloat width = v16;
  v39.size.double height = v18;
  if (CGRectContainsPoint(v39, *(CGPoint *)&v20)) {
    return 1;
  }
  double v26 = CGPDFLayoutGetHitTestRectAtIndex(a1, a3, a6);
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  if (a1)
  {
    if ((a3 & 0x8000000000000000) == 0 && *(void *)(a1 + 48) > a3)
    {
      uint64_t v33 = *(void *)(a1 + 24);
      if (v33)
      {
        uint64_t v34 = *(void *)(v33 + 24 * a3 + 8);
        if (v34)
        {
          double v35 = *(double *)(v34 + 40);
          if (v35 != 0.0)
          {
            __double2 v36 = __sincos_stret(v35);
            CGFloat v37 = a5 * v36.__cosval - v36.__sinval * a4;
            a4 = a5 * v36.__sinval + v36.__cosval * a4 + 0.0;
            a5 = v37 + 0.0;
          }
        }
      }
    }
  }
  v40.origin.x = v26;
  v40.origin.y = v28;
  v40.size.CGFloat width = v30;
  v40.size.double height = v32;
  v38.x = a4;
  v38.y = a5;
  return !CGRectContainsPoint(v40, v38);
}

double CGPDFLayoutGetHitTestRectAtIndex(uint64_t a1, uint64_t a2, double a3)
{
  v9.origin.x = CGPDFLayoutGetCharacterBounds(a1, a2);
  *(void *)&double v6 = (unint64_t)CGRectInset(v9, -a3, -a3);
  NodeContaininguint64_t TextRange = CGPDFNodeGetNodeContainingTextRange(*(void *)(a1 + 104), a2, 1);
  if (NodeContainingTextRange)
  {
    while (*(_DWORD *)NodeContainingTextRange != 514)
    {
      NodeContaininguint64_t TextRange = *(void *)(NodeContainingTextRange + 8);
      if (!NodeContainingTextRange) {
        return v6;
      }
    }
    CGPDFNodeGetHitTestRect(NodeContainingTextRange, a3);
  }
  return v6;
}

uint64_t CGPDFLayoutGetStringDirectionFromCursorRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 1;
  if ((a2 & 0x8000000000000000) == 0 && a3 >= 1)
  {
    uint64_t v6 = a2 + a3;
    if (a2 + a3 > *(void *)(a1 + 48)) {
      return 1;
    }
    if (!*(unsigned char *)(a1 + 72)) {
      return 1;
    }
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v12 = 0;
    CGPDFLayoutGetRTLData(v11, a1);
    if ((int)v12 < 1) {
      return 1;
    }
    uint64_t v7 = v6 - 1;
    if (a2 == v6 - 1) {
      return CGPDFLayoutReadsLeftToRightAtIndex(a1, a2);
    }
    uint64_t v3 = 1;
    StringRangeFromuint64_t Range = CGPDFLayoutGetStringRangeFromRange(a1, a2, 1);
    uint64_t v9 = CGPDFLayoutGetStringRangeFromRange(a1, v7, 1);
    if ((StringRangeFromRange & 0x8000000000000000) == 0 && (v9 & 0x8000000000000000) == 0) {
      return StringRangeFromRange <= v9;
    }
  }
  return v3;
}

uint64_t CGPDFLayoutGetIndexFromStringIndex(uint64_t a1, int64_t a2)
{
  if (a2 == -1) {
    return -1;
  }
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    CGPDFLayoutGetRTLData(&v8, a1);
    if ((int)v10 > a2)
    {
      uint64_t v6 = *(unsigned int *)(v9 + 4 * a2);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(void *)(a1 + 48) <= v6) {
          return -1;
        }
        else {
          return *(unsigned int *)(v9 + 4 * a2);
        }
      }
      return -1;
    }
  }
  uint64_t result = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(void *)(a1 + 56), a2);
  if (result < 0) {
    return -1;
  }
  if (result >= *(void *)(a1 + 48)) {
    return -1;
  }
  return result;
}

uint64_t CGPDFLayoutCreateSelectionBetweenPoints(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  return CreateSelectionBetweenPoints(a1, a2, 1, a3, a4, a5, a6);
}

uint64_t CGPDFLayoutCreateSelectionBetweenPointsWithOptions(uint64_t a1, unsigned int a2, int a3, double a4, double a5, double a6, double a7)
{
  return CreateSelectionBetweenPoints(a1, a2, a3 == 1, a4, a5, a6, a7);
}

uint64_t CGPDFLayoutCreateDirectionalSelection(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (!a1) {
    __assert_rtn("CGPDFLayoutCreateDirectionalSelection", "CGPDFLayout.m", 1496, "layout");
  }
  uint64_t v10 = *(__n64 **)(a1 + 104);
  BOOL v16 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CGPDFNodeGetNodeRangeBetweenPoints(v10, 1, 1, &v15, &v14, &v16, &v12, a2, a3, a4, a5, 0.0);
    if ((CGPDFLayoutGetStringDirectionFromCursorRange(a1, v12, v13) & 1) == 0) {
      v16 ^= 1u;
    }
  }
  else
  {
    CGPDFNodeGetNodeRangeBetweenPoints(v10, 1, 1, &v15, &v14, &v16, 0, a2, a3, a4, a5, 0.0);
  }
  if (v16) {
    return CreateCharacterSelectionBetweenPoints(a1, 1, a2, a3, a4, a5);
  }
  else {
    return 0;
  }
}

uint64_t CGPDFLayoutCreateSelectionBetweenIndexAndPoint(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  *(double *)uint64_t v42 = a4;
  *(double *)&v42[1] = a5;
  if (!a1) {
    return 0;
  }
  int v5 = a3;
  uint64_t v10 = *(__n64 **)(a1 + 104);
  CGRect v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  CGPDFNodeGetNodeRangeFromIndexToPoint(v10, 1, a2, a3, 1, &v41, &v40, &v39, a4, a5, 0.0);
  if (v39 >= a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = v39;
  }
  if (v39 >= a2) {
    uint64_t v12 = v39 - a2 + 1;
  }
  else {
    uint64_t v12 = a2 + 1 - v39;
  }
  if (*(unsigned char *)(a1 + 72) && (CGPDFLayoutGetStringDirectionFromCursorRange(a1, v11, v12) & 1) == 0)
  {
    v5 ^= 1u;
    CGPDFNodeGetNodeRangeFromIndexToPoint(v10, 1, a2, v5, 1, &v41, &v40, &v39, a4, a5, 0.0);
    if (v39 >= a2) {
      uint64_t v12 = v39 - a2 + 1;
    }
    else {
      uint64_t v12 = a2 + 1 - v39;
    }
    if (v39 >= a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = v39;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = v41;
  if (v41 && v40)
  {
    if (v5)
    {
      if (v39 >= a2)
      {
        uint64_t v15 = v41;
        uint64_t v14 = v40;
        goto LABEL_23;
      }
    }
    else if (v39 <= a2)
    {
      uint64_t v15 = v40;
LABEL_23:
      IndexSet = CreateIndexSet((uint64_t)v15, (uint64_t)v14, 1, 1);
      uint64_t v17 = (uint64_t)IndexSet;
      if (IndexSet)
      {
        if (IndexSet[2].i8[8]) {
          CPIndexSetNormalize((uint64_t)IndexSet);
        }
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18 < 1) {
          goto LABEL_64;
        }
        uint64_t Range = CPIndexSetGetRange(v17, 0);
        uint64_t v21 = v20;
        uint64_t v22 = CPIndexSetGetRange(v17, v18 - 1);
        if (Range != v11)
        {
          uint64_t v24 = v21 - v11 + Range;
          if (v24 < 1) {
            uint64_t v25 = -1;
          }
          else {
            uint64_t v25 = v11;
          }
          if (v24 < 1) {
            uint64_t v24 = 0;
          }
          if (*(uint64_t *)(v17 + 16) >= 1)
          {
            double v26 = *(uint64_t **)(v17 + 32);
            *double v26 = v25;
            v26[1] = v24;
            *(unsigned char *)(v17 + 40) = 1;
          }
          if (v18 == 1)
          {
            uint64_t v22 = v25;
            uint64_t v23 = v24;
          }
        }
        if (v22 < 0 || v23 + v22 == v11 + v12 || *(void *)(v17 + 16) < v18)
        {
          if (!*(unsigned char *)(v17 + 40)) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v28 = v11 + v12 - v22;
          if (v28 >= 1)
          {
            uint64_t v29 = v22;
          }
          else
          {
            uint64_t v28 = 0;
            uint64_t v29 = -1;
          }
          CGFloat v30 = (uint64_t *)(*(void *)(v17 + 32) + 16 * (v18 - 1));
          uint64_t *v30 = v29;
          v30[1] = v28;
          *(unsigned char *)(v17 + 40) = 1;
        }
        CPIndexSetNormalize(v17);
LABEL_49:
        if (*(uint64_t *)(v17 + 16) < 1) {
          uint64_t v31 = -1;
        }
        else {
          uint64_t v31 = **(void **)(v17 + 32);
        }
        uint64_t LastIndex = CPIndexSetGetLastIndex(v17);
        uint64_t v13 = 0;
        if (LastIndex == -1 || v31 == -1 || LastIndex < v31) {
          goto LABEL_67;
        }
        if (!*(unsigned char *)(a1 + 72))
        {
          uint64_t v37 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), (unsigned char *)v17);
          goto LABEL_66;
        }
        if (v5) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = (double *)v42;
        }
        if (v5) {
          uint64_t v34 = (double *)v42;
        }
        else {
          uint64_t v34 = 0;
        }
        char v38 = 0;
        CFIndex StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, v31, LastIndex - v31 + 1, v33, v34, 1, &v38, 0.0);
        if ((StringRangeFromCursorRange & 0x8000000000000000) == 0)
        {
          uint64_t v37 = (uint64_t)CGPDFSelectionCreateForStringRange(*(void *)(a1 + 16), StringRangeFromCursorRange, v36);
LABEL_66:
          uint64_t v13 = v37;
          goto LABEL_67;
        }
LABEL_64:
        uint64_t v13 = 0;
LABEL_67:
        CFRelease((CFTypeRef)v17);
        return v13;
      }
    }
    return 0;
  }
  return v13;
}

uint64_t CGPDFLayoutCreateSelectionFromIndexToPoint(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a2, 1, a3, a4);
}

uint64_t CGPDFLayoutCreateSelectionFromPointToIndex(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a2, 0, a3, a4);
}

uint64_t CGPDFLayoutCreateSelectionBetweenRangeAndPoint(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  if (!a1) {
    return 0;
  }
  uint64_t v12 = *(_DWORD **)(a1 + 104);
  if ((a4 - 1) > 3) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = dword_1850CE0B0[a4 - 1];
  }
  uint64_t SelectionBetweenIndexAndPoint = CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a2, 1, a5, a6);
  if (SelectionBetweenIndexAndPoint)
  {
    uint64_t v14 = SelectionBetweenIndexAndPoint;
    if (a4)
    {
      uint64_t LastIndex = CGPDFSelectionGetLastIndex(SelectionBetweenIndexAndPoint);
      NodePrecedingTextIndex = CGPDFNodeGetNodePrecedingTextIndex(v12, LastIndex);
      if (NodePrecedingTextIndex)
      {
        while (*NodePrecedingTextIndex != v13)
        {
          NodePrecedingTextIndex = (_DWORD *)*((void *)NodePrecedingTextIndex + 1);
          if (!NodePrecedingTextIndex) {
            return v14;
          }
        }
        uint64_t TextRange = CGPDFNodeGetTextRange((uint64_t)NodePrecedingTextIndex);
        uint64_t v24 = v23 + ~LastIndex + TextRange;
        if (a4 == 1 && (v24 & 0x8000000000000000) == 0)
        {
          uint64_t v25 = TextRange;
          double v26 = CPIndexSetCreateWithRange(TextRange, v23);
          if (CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v26, LastIndex, 1))
          {
            uint64_t v27 = CPIndexSetGetLastIndex((uint64_t)v26);
            if (v27 != -1 && v27 >= v25) {
              uint64_t v24 = v27 - LastIndex;
            }
          }
          if (v26) {
            CFRelease(v26);
          }
        }
        if (v24) {
          CGPDFSelectionExtendAtEnd(v14, v24);
        }
      }
    }
  }
  else
  {
    uint64_t v18 = CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a3 + a2 - 1, 0, a5, a6);
    if (v18)
    {
      uint64_t v14 = v18;
      if (a4)
      {
        uint64_t v19 = *(void *)(v18 + 184);
        uint64_t v20 = *(void *)(v18 + 192) == v19 ? -1 : *(void *)(v19 + 8);
        NodeFollowingTextIndex = CGPDFNodeGetNodeFollowingTextIndex(v12, v20);
        if (NodeFollowingTextIndex)
        {
          while (*NodeFollowingTextIndex != v13)
          {
            NodeFollowingTextIndex = (_DWORD *)*((void *)NodeFollowingTextIndex + 1);
            if (!NodeFollowingTextIndex) {
              return v14;
            }
          }
          uint64_t v30 = CGPDFNodeGetTextRange((uint64_t)NodeFollowingTextIndex);
          uint64_t v32 = v20 - v30;
          if (a4 == 1 && (v32 & 0x8000000000000000) == 0)
          {
            uint64_t v33 = v30;
            uint64_t v34 = v31;
            double v35 = CPIndexSetCreateWithRange(v30, v31);
            if (CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v35, v20, 1))
            {
              uint64_t FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v35);
              if (FirstIndex != -1 && FirstIndex < v33 + v34) {
                uint64_t v32 = v20 - FirstIndex;
              }
            }
            if (v35) {
              CFRelease(v35);
            }
          }
          if (v32) {
            CGPDFSelectionExtendAtStart(v14, v32);
          }
        }
      }
    }
    else
    {
      uint64_t v21 = CPIndexSetCreateWithRange(a2, a3);
      uint64_t v14 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v21);
      if (v21) {
        CFRelease(v21);
      }
    }
  }
  return v14;
}

uint64_t CGPDFLayoutCreateSelectionFromPointWithOptions(uint64_t a1, unsigned int a2, int a3, double a4, double a5)
{
  *(double *)uint64_t v52 = a4;
  *(double *)&v52[1] = a5;
  if (!a1) {
    return 0;
  }
  if (a2 == 1) {
    double v10 = 1.0;
  }
  else {
    double v10 = 2.0;
  }
  if (a2) {
    double v11 = v10;
  }
  else {
    double v11 = 0.0;
  }
  uint64_t v12 = *(_DWORD **)(a1 + 104);
  if (a2)
  {
    if (a2 > 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = dword_1850CE0B0[a2 - 1];
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  NodeAfterPoint = CGPDFNodeGetNodeAfterPoint(*(__n64 **)(a1 + 104), v13, a3 == 1, a4, a5, v11);
  NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(v12, NodeAfterPoint, v13, a3 == 1);
  if (CGPDFNodeIsHitByPoint((uint64_t)NodeBefore, a4, a5, v11)) {
    NodeAfterPoint = NodeBefore;
  }
  uint64_t TextRange = CGPDFNodeGetTextRange((uint64_t)NodeAfterPoint);
  uint64_t v18 = v17;
  uint64_t v19 = CGPDFNodeGetNodeBefore(v12, 0, v13, a3 == 1);
  uint64_t v20 = 0;
  if (NodeAfterPoint) {
    BOOL v21 = v19 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    IndexSet = CreateIndexSet((uint64_t)NodeAfterPoint, (uint64_t)v19, v13, a3 == 1);
    uint64_t v51 = IndexSet;
    if (IndexSet)
    {
      uint64_t v23 = IndexSet;
      if (IndexSet[2].i8[8]) {
        CPIndexSetNormalize((uint64_t)IndexSet);
      }
      if (v23[1].i64[0] < 1) {
        goto LABEL_40;
      }
      uint64_t v44 = v18;
      uint64_t TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint(NodeAfterPoint, a4, a5, v11);
      uint64_t Range = CPIndexSetGetRange((uint64_t)v23, 0);
      BOOL v27 = TextRange < TextIndexAfterPoint && a2 == 0;
      BOOL v28 = TextRange <= TextIndexAfterPoint && !v27;
      if (!v28 && v23[1].i64[0] >= 1)
      {
        uint64_t v29 = v26 - TextIndexAfterPoint + Range;
        if (v29 >= 1)
        {
          uint64_t v30 = TextIndexAfterPoint;
        }
        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = -1;
        }
        uint64_t v31 = (uint64_t *)v23[2].i64[0];
        *uint64_t v31 = v30;
        v31[1] = v29;
        v23[2].i8[8] = 1;
      }
      uint64_t FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v23);
      uint64_t LastIndex = CPIndexSetGetLastIndex((uint64_t)v23);
      if (FirstIndex == -1 || LastIndex == -1)
      {
LABEL_40:
        uint64_t v20 = 0;
LABEL_41:
        CFRelease(v23);
        return v20;
      }
      uint64_t v49 = TextIndexAfterPoint;
      uint64_t v50 = LastIndex - TextIndexAfterPoint + 1;
      if (!*(unsigned char *)(a1 + 72)
        || (v47 = 0uLL, v48 = 0, CGPDFLayoutGetRTLData((__CFString **)&v47, a1), int v35 = v48 - 2, (int)v48 < 2))
      {
LABEL_64:
        if (a2 == 1 && !CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v23, v49, v50))
        {
          uint64_t v20 = 0;
          if (!v23) {
            return v20;
          }
        }
        else
        {
          uint64_t v20 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v23);
          if (!v23) {
            return v20;
          }
        }
        goto LABEL_41;
      }
      CFRelease(v23);
      uint64_t v36 = *(int *)(*((void *)&v47 + 1) + 4 * v35);
      if (a2)
      {
        uint64_t v37 = TextRange + v44;
        char v38 = (double *)v52;
        if (TextIndexAfterPoint >= v37 && CGPDFNodeIsHitByPoint((uint64_t)NodeAfterPoint, a4, a5, v10))
        {
          uint64_t TextIndexAfterPoint = v37 - 1;
          char v38 = 0;
        }
      }
      else
      {
        char v38 = (double *)v52;
      }
      if (TextIndexAfterPoint <= v36) {
        uint64_t v39 = TextIndexAfterPoint;
      }
      else {
        uint64_t v39 = v36;
      }
      if (TextIndexAfterPoint > v36) {
        uint64_t v40 = TextIndexAfterPoint - v36 + 1;
      }
      else {
        uint64_t v40 = v36 - TextIndexAfterPoint + 1;
      }
      if (TextIndexAfterPoint <= v36) {
        uint64_t v41 = v38;
      }
      else {
        uint64_t v41 = 0;
      }
      if (TextIndexAfterPoint <= v36) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v38;
      }
      uint64_t v49 = v39;
      uint64_t v50 = v40;
      long long v45 = v47;
      uint64_t v46 = v48;
      if (LayoutCreateSelectionSupport(a1, &v49, v41, v42, a3 == 1, &v51, a2, (uint64_t)&v45, v11, (uint64_t)v12, v13))
      {
        uint64_t v23 = v51;
        goto LABEL_64;
      }
    }
    return 0;
  }
  return v20;
}

uint64_t LayoutCreateSelectionSupport(uint64_t a1, uint64_t *a2, double *a3, double *a4, uint64_t a5, int64x2_t **a6, int a7, uint64_t a8, double a9, uint64_t a10, int a11)
{
  char v14 = a5;
  char v35 = 0;
  unint64_t StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, *a2, a2[1], a3, a4, a5, &v35, a9);
  if ((StringRangeFromCursorRange & 0x8000000000000000) != 0) {
    return 0;
  }
  unint64_t v19 = StringRangeFromCursorRange;
  uint64_t v20 = v18;
  IndexSetForStringuint64_t Range = CGPDFLayoutCreateIndexSetForStringRange(a1, StringRangeFromCursorRange, v18);
  *a6 = IndexSetForStringRange;
  if ((v14 & 1) == 0)
  {
    uint64_t v22 = CGPDFLayoutCopyIndexSetRemovingGraphics(a1, (uint64_t)IndexSetForStringRange);
    *a6 = v22;
    if (!IndexSetForStringRange)
    {
      if (v22) {
        goto LABEL_6;
      }
      return 0;
    }
    CFRelease(IndexSetForStringRange);
    IndexSetForStringuint64_t Range = *a6;
  }
  if (!IndexSetForStringRange) {
    return 0;
  }
LABEL_6:
  if (!a7) {
    return 1;
  }
  *a2 = CGPDFLayoutGetRangeFromStringRange(a1, v19, v20);
  a2[1] = v23;
  uint64_t v24 = *(void *)(a8 + 8);
  uint64_t v25 = *(int *)(v24 + 4 * (v20 + v19) - 4);
  for (uint64_t i = CGPDFNodeGetNodeContainingTextRange(a10, *(int *)(v24 + 4 * v19), 1); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)i == a11) {
      break;
    }
  }
  for (uint64_t j = CGPDFNodeGetNodeContainingTextRange(a10, v25, 1); j; uint64_t j = *(void *)(j + 8))
  {
    if (*(_DWORD *)j == a11) {
      break;
    }
  }
  if (i)
  {
    uint64_t v28 = (uint64_t)*a6;
    uint64_t TextRange = CGPDFNodeGetTextRange(i);
    CPIndexSetAddRange(v28, TextRange, v30);
  }
  uint64_t result = 1;
  if (j && j != i)
  {
    uint64_t v32 = (uint64_t)*a6;
    uint64_t v33 = CGPDFNodeGetTextRange(j);
    CPIndexSetAddRange(v32, v33, v34);
    return 1;
  }
  return result;
}

uint64_t CGPDFLayoutCreateSelectionToPointWithOptions(uint64_t a1, unsigned int a2, int a3, double a4, double a5)
{
  *(double *)uint64_t v50 = a4;
  *(double *)&v50[1] = a5;
  if (!a1) {
    return 0;
  }
  double v10 = 2.0;
  if (a2 == 1) {
    double v10 = 1.0;
  }
  if (a2) {
    double v11 = v10;
  }
  else {
    double v11 = 0.0;
  }
  uint64_t v12 = *(_DWORD **)(a1 + 104);
  if (a2)
  {
    if (a2 > 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = dword_1850CE0B0[a2 - 1];
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  NodeAfterPoint = CGPDFNodeGetNodeAfterPoint(*(__n64 **)(a1 + 104), v13, a3 == 1, a4, a5, v11);
  NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(v12, NodeAfterPoint, v13, a3 == 1);
  if (CGPDFNodeIsHitByPoint((uint64_t)NodeAfterPoint, a4, a5, v11)) {
    NodeBefore = NodeAfterPoint;
  }
  uint64_t TextRange = CGPDFNodeGetTextRange((uint64_t)NodeBefore);
  uint64_t v18 = v17;
  uint64_t NodeAfter = CGPDFNodeGetNodeAfter(v12, 0, v13, a3 == 1);
  uint64_t v20 = 0;
  if (NodeBefore) {
    BOOL v21 = NodeAfter == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21) {
    return v20;
  }
  IndexSet = CreateIndexSet(NodeAfter, (uint64_t)NodeBefore, v13, a3 == 1);
  uint64_t v49 = IndexSet;
  if (!IndexSet) {
    return 0;
  }
  uint64_t v23 = IndexSet;
  uint64_t v42 = TextRange;
  if (IndexSet[2].i8[8]) {
    CPIndexSetNormalize((uint64_t)IndexSet);
  }
  uint64_t v24 = v23[1].i64[0];
  if (v24 < 1)
  {
    uint64_t v20 = 0;
    goto LABEL_61;
  }
  int v41 = a3;
  uint64_t TextIndexBeforePoint = CGPDFNodeGetTextIndexBeforePoint(NodeBefore, a4, a5, v11);
  uint64_t Range = CPIndexSetGetRange((uint64_t)v23, v24 - 1);
  if (a2) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = v42 + v18 - 1 <= TextIndexBeforePoint;
  }
  int v28 = !v27;
  BOOL v29 = v42 + v18 > TextIndexBeforePoint && v28 == 0;
  if (!v29 && v23[1].i64[0] >= v24)
  {
    uint64_t v30 = TextIndexBeforePoint - Range + 1;
    if (v30 >= 1) {
      uint64_t v31 = TextIndexBeforePoint - Range + 1;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v30 < 1) {
      uint64_t v32 = -1;
    }
    else {
      uint64_t v32 = Range;
    }
    uint64_t v33 = (uint64_t *)(v23[2].i64[0] + 16 * (v24 - 1));
    *uint64_t v33 = v32;
    v33[1] = v31;
    v23[2].i8[8] = 1;
  }
  uint64_t FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v23);
  uint64_t LastIndex = CPIndexSetGetLastIndex((uint64_t)v23);
  uint64_t v20 = 0;
  if (FirstIndex == -1 || LastIndex == -1) {
    goto LABEL_61;
  }
  uint64_t v47 = FirstIndex;
  uint64_t v48 = TextIndexBeforePoint - FirstIndex + 1;
  if (!*(unsigned char *)(a1 + 72)) {
    goto LABEL_55;
  }
  long long v45 = 0uLL;
  uint64_t v46 = 0;
  CGPDFLayoutGetRTLData((__CFString **)&v45, a1);
  if ((int)v46 < 2) {
    goto LABEL_55;
  }
  CFRelease(v23);
  uint64_t v36 = (int)**((_DWORD **)&v45 + 1);
  uint64_t v37 = (double *)v50;
  if (a2 && TextIndexBeforePoint < v42)
  {
    if (CGPDFNodeIsHitByPoint((uint64_t)NodeBefore, a4, a5, v11))
    {
      uint64_t TextIndexBeforePoint = v42;
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = (double *)v50;
    }
  }
  if (TextIndexBeforePoint >= v36)
  {
    uint64_t v39 = 0;
    uint64_t v38 = TextIndexBeforePoint - v36 + 1;
    uint64_t TextIndexBeforePoint = v36;
  }
  else
  {
    uint64_t v38 = v36 - TextIndexBeforePoint + 1;
    uint64_t v39 = v37;
    uint64_t v37 = 0;
  }
  uint64_t v47 = TextIndexBeforePoint;
  uint64_t v48 = v38;
  long long v43 = v45;
  uint64_t v44 = v46;
  if (!LayoutCreateSelectionSupport(a1, &v47, v39, v37, v41 == 1, &v49, a2, (uint64_t)&v43, v11, (uint64_t)v12, v13))return 0; {
  uint64_t v23 = v49;
  }
LABEL_55:
  if (a2 != 1 || CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v23, v47, v48))
  {
    uint64_t v20 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v23);
    if (!v23) {
      return v20;
    }
    goto LABEL_61;
  }
  uint64_t v20 = 0;
  if (v23) {
LABEL_61:
  }
    CFRelease(v23);
  return v20;
}

uint64_t CGPDFLayoutCreateSelectionAtPoint(uint64_t a1, int a2, double a3, double a4)
{
  return CGPDFLayoutCreateSelectionAtPointWithOptions(a1, a2, 1, a3, a4);
}

uint64_t CGPDFLayoutCreateSelectionAtPointWithOptions(uint64_t a1, int a2, int a3, double a4, double a5)
{
  if (a1)
  {
    uint64_t v9 = *(void *)(a1 + 104);
    switch(a2)
    {
      case 0:
        char v68 = 0;
        uint64_t v67 = 0;
        uint64_t BestNodeContainingPoint = CGPDFNodeGetBestNodeContainingPoint(v9, 514, 0, &v67, &v68, a4, a5, 0.0);
        if (!BestNodeContainingPoint) {
          return 0;
        }
        uint64_t TextRange = CGPDFNodeGetTextRange(BestNodeContainingPoint);
        if (v12 < 1) {
          return 0;
        }
        uint64_t v13 = TextRange;
        uint64_t v14 = TextRange + v12;
        uint64_t v15 = *(void *)(a1 + 24) + 24 * TextRange + 8;
        break;
      case 1:
        uint64_t v33 = 1;
        goto LABEL_29;
      case 2:
        uint64_t v33 = 514;
        goto LABEL_29;
      case 3:
        uint64_t v33 = 1537;
        goto LABEL_29;
      case 4:
        uint64_t v33 = 515;
        goto LABEL_29;
      case 5:
        LOBYTE(v67) = 0;
        TopmostContentNodeAtPoint = CGPDFNodeGetTopmostContentNodeAtPoint(v9, (char *)&v67, a4, a5);
        if (!TopmostContentNodeAtPoint) {
          return 0;
        }
        __double2 v61 = TopmostContentNodeAtPoint;
        uint64_t v62 = CGPDFNodeGetTextRange((uint64_t)TopmostContentNodeAtPoint);
        double v64 = CPIndexSetCreateWithRange(v62, v63);
        if (!v64) {
          return 0;
        }
        int v41 = v64;
        uint64_t v32 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v64);
        pthread_mutex_lock((pthread_mutex_t *)(v32 + 96));
        *(void *)(v32 + 40) = v61;
        pthread_mutex_unlock((pthread_mutex_t *)(v32 + 96));
        goto LABEL_61;
      default:
        uint64_t v33 = 0;
LABEL_29:
        char v68 = 0;
        uint64_t v67 = 0;
        uint64_t v34 = CGPDFNodeGetBestNodeContainingPoint(v9, v33, a3 == 1, &v67, &v68, a4, a5, 0.0);
        if (!v34) {
          return 0;
        }
        uint64_t v35 = CGPDFNodeGetTextRange(v34);
        uint64_t v37 = v36;
        uint64_t v38 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "persistentDomainForName:", @"com.apple.CorePDF");
        if (v38
          && objc_msgSend((id)objc_msgSend(v38, "objectForKey:", @"ShowRange"), "isEqualToString:", @"YES"))
        {
          NSLog(&cfstr_RangeDD.isa, v35, v37);
        }
        uint64_t v39 = v37 - 1;
        if (v37 < 1) {
          return 0;
        }
        uint64_t v40 = CPIndexSetCreateWithRange(v35, v37);
        if (!v40) {
          return 0;
        }
        int v41 = v40;
        if (a2 != 1) {
          goto LABEL_60;
        }
        uint64_t v42 = v37 + v35 - 1;
        if (v35 >= v42) {
          goto LABEL_53;
        }
        uint64_t v43 = *(void *)(a1 + 24) + 24 * v35 + 8;
        while (1)
        {
          uint64_t v44 = *(void *)(v43 - 8);
          p_double height = &CGRectNull.size.height;
          p_CGSize size = &CGRectNull.size;
          uint64_t v47 = (const CGRect *)(v44 + 16);
          uint64_t v48 = (CGSize *)(v44 + 32);
          uint64_t v49 = (CGFloat *)(v44 + 40);
          BOOL v50 = v44 == 0;
          if (v44) {
            p_y = (CGFloat *)(v44 + 24);
          }
          else {
            p_y = &CGRectNull.origin.y;
          }
          if (v50)
          {
            uint64_t v52 = &CGRectNull;
          }
          else
          {
            p_CGSize size = v48;
            p_double height = v49;
            uint64_t v52 = v47;
          }
          double x = v52->origin.x;
          double v54 = *p_height;
          double width = p_size->width;
          CGFloat v56 = *p_y;
          double v57 = a4;
          if (*(void *)v43)
          {
            double v58 = *(double *)(*(void *)v43 + 40);
            double v57 = a4;
            if (v58 != 0.0)
            {
              __double2 v59 = __sincos_stret(v58);
              double v57 = a5 * v59.__sinval + v59.__cosval * a4 + 0.0;
            }
          }
          if (width < 0.0 || v54 < 0.0)
          {
            v72.origin.double x = x;
            v72.origin.y = v56;
            v72.size.double width = width;
            v72.size.double height = v54;
            CGRect v73 = CGRectStandardize(v72);
            double x = v73.origin.x;
            double width = v73.size.width;
          }
          if (v57 <= x + width) {
            break;
          }
          ++v35;
          v43 += 24;
          if (!--v39)
          {
            uint64_t v35 = v42;
            break;
          }
        }
LABEL_53:
        if (CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v41, v35, 1)) {
LABEL_60:
        }
          uint64_t v32 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v41);
        else {
          uint64_t v32 = 0;
        }
LABEL_61:
        CFRelease(v41);
        return v32;
    }
    while (1)
    {
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = &CGRectNull.size.height;
      uint64_t v18 = &CGRectNull.size;
      unint64_t v19 = (const CGRect *)(v16 + 16);
      uint64_t v20 = (CGSize *)(v16 + 32);
      BOOL v21 = (CGFloat *)(v16 + 40);
      BOOL v22 = v16 == 0;
      if (v16) {
        uint64_t v23 = (CGFloat *)(v16 + 24);
      }
      else {
        uint64_t v23 = &CGRectNull.origin.y;
      }
      if (v22)
      {
        uint64_t v24 = &CGRectNull;
      }
      else
      {
        uint64_t v18 = v20;
        uint64_t v17 = v21;
        uint64_t v24 = v19;
      }
      double v25 = v24->origin.x;
      double v26 = *v17;
      double v27 = v18->width;
      CGFloat v28 = *v23;
      double v29 = a4;
      if (*(void *)v15)
      {
        double v30 = *(double *)(*(void *)v15 + 40);
        double v29 = a4;
        if (v30 != 0.0)
        {
          __double2 v31 = __sincos_stret(v30);
          double v29 = a5 * v31.__sinval + v31.__cosval * a4 + 0.0;
        }
      }
      if (v27 < 0.0 || v26 < 0.0)
      {
        v69.origin.double x = v25;
        v69.origin.y = v28;
        v69.size.double width = v27;
        v69.size.double height = v26;
        if (COERCE_DOUBLE(CGRectStandardize(v69)) <= v29)
        {
          v70.origin.double x = v25;
          v70.origin.y = v28;
          v70.size.double width = v27;
          v70.size.double height = v26;
          CGRect v71 = CGRectStandardize(v70);
          double v25 = v71.origin.x;
          double v27 = v71.size.width;
LABEL_21:
          if (v29 <= v25 + v27 + 0.0)
          {
            uint64_t v65 = CPIndexSetCreateWithRange(v13, 1);
            if (!v65) {
              return 0;
            }
            int v41 = v65;
            goto LABEL_60;
          }
        }
      }
      else if (v25 <= v29)
      {
        goto LABEL_21;
      }
      uint64_t v32 = 0;
      ++v13;
      v15 += 24;
      if (v13 >= v14) {
        return v32;
      }
    }
  }
  return 0;
}

uint64_t CGPDFLayoutCreateSelectionContainingSelection(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if ((a3 - 1) >= 5)
    {
      Containinguint64_t Node = CGPDFSelectionGetContainingNode(a2);
      int v6 = 0;
      goto LABEL_9;
    }
    int v6 = dword_18520D158[a3 - 1];
    uint64_t v7 = (_DWORD *)CGPDFSelectionGetContainingNode(a2);
    Containinguint64_t Node = (uint64_t)v7;
    if (a3 != 5) {
      goto LABEL_9;
    }
    if (!v7) {
      return 0;
    }
    if (*v7 != 513 && (*v7 & 0x100) == 0)
    {
      while (*(_DWORD *)ContainingNode != v6)
      {
        Containinguint64_t Node = *(void *)(ContainingNode + 8);
LABEL_9:
        if (!ContainingNode) {
          return 0;
        }
      }
    }
    uint64_t TextRange = CGPDFNodeGetTextRange(ContainingNode);
    double v11 = CPIndexSetCreateWithRange(TextRange, v10);
    if (v11)
    {
      uint64_t v12 = v11;
      if (a3 == 1
        && (uint64_t FirstIndex = CGPDFSelectionGetFirstIndex(a2),
            uint64_t LastIndex = CGPDFSelectionGetLastIndex(a2),
            !CGPDFLayoutExtendRangeToWordBoundaries(v3, (uint64_t)v12, FirstIndex, LastIndex - FirstIndex + 1)))
      {
        uint64_t v3 = 0;
      }
      else
      {
        uint64_t v3 = CGPDFSelectionCreateWithIndexSet(*(const void **)(v3 + 16), v12);
        pthread_mutex_lock((pthread_mutex_t *)(v3 + 96));
        *(void *)(v3 + 40) = ContainingNode;
        pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
      }
      CFRelease(v12);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t CGPDFLayoutCreateSelectionForRect(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if (!a1) {
    return 0;
  }
  CGFloat v5 = a3;
  CGFloat v6 = a2;
  if (a2 == INFINITY || a3 == INFINITY) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9 < 1) {
    return 0;
  }
  CGFloat v10 = a5;
  CGFloat v11 = a4;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = -1;
  uint64_t v16 = 1;
  uint64_t v17 = -1;
  do
  {
    uint64_t v18 = *(void *)(a1 + 24);
    uint64_t v19 = *(void *)(v18 + v12);
    p_double height = &CGRectNull.size.height;
    p_CGSize size = &CGRectNull.size;
    BOOL v22 = (const CGRect *)(v19 + 16);
    uint64_t v23 = (CGSize *)(v19 + 32);
    uint64_t v24 = (CGFloat *)(v19 + 40);
    BOOL v25 = v19 == 0;
    if (v19) {
      p_double y = (CGFloat *)(v19 + 24);
    }
    else {
      p_double y = &CGRectNull.origin.y;
    }
    if (v25)
    {
      double v27 = &CGRectNull;
    }
    else
    {
      p_CGSize size = v23;
      p_double height = v24;
      double v27 = v22;
    }
    double x = v27->origin.x;
    double v29 = *p_height;
    double width = p_size->width;
    double y = *p_y;
    uint64_t v32 = *(void *)(v18 + v12 + 8);
    if (!v32 || (double v33 = *(double *)(v32 + 40), v33 == 0.0))
    {
      v56.origin.double x = v6;
      v56.origin.double y = v5;
      v56.size.double width = v11;
      v56.size.double height = v10;
      v71.origin.double x = v27->origin.x;
      v71.origin.double y = *p_y;
      v71.size.double width = p_size->width;
      v71.size.double height = *p_height;
      if (!CGRectContainsRect(v56, v71)) {
        goto LABEL_41;
      }
LABEL_17:
      uint64_t v34 = v16 - 1;
      if (v15 != -1)
      {
        if (v34 == v17)
        {
          uint64_t v13 = v16 - v15;
          uint64_t v34 = v15;
LABEL_35:
          uint64_t v9 = *(void *)(a1 + 48);
          uint64_t v17 = v16;
          uint64_t v15 = v34;
          goto LABEL_41;
        }
        if (v14) {
          CPIndexSetAddRange((uint64_t)v14, v15, v13);
        }
        else {
          uint64_t v14 = CPIndexSetCreateWithRange(v15, v13);
        }
      }
      uint64_t v13 = 1;
      goto LABEL_35;
    }
    __double2 v35 = __sincos_stret(v33);
    BOOL v36 = v29 < 0.0 || width < 0.0;
    double v37 = x;
    double v38 = y;
    if (v36)
    {
      v57.origin.double x = x;
      v57.origin.double y = y;
      v57.size.double width = width;
      v57.size.double height = v29;
      *(void *)&double v37 = (unint64_t)CGRectStandardize(v57);
      v58.origin.double x = x;
      v58.origin.double y = y;
      v58.size.double width = width;
      v58.size.double height = v29;
      *(CGRect *)(&v38 - 1) = CGRectStandardize(v58);
    }
    double v39 = -v35.__sinval;
    v52.double x = v38 * -v35.__sinval + v35.__cosval * v37 + 0.0;
    v52.double y = v35.__cosval * v38 + v35.__sinval * v37 + 0.0;
    v59.origin.double x = a2;
    v59.origin.double y = a3;
    v59.size.double width = a4;
    CGFloat v10 = a5;
    v59.size.double height = a5;
    if (!CGRectContainsPoint(v59, v52)) {
      goto LABEL_40;
    }
    double v40 = x;
    double v41 = y;
    double v42 = v29;
    if (v36)
    {
      v60.origin.double x = x;
      v60.origin.double y = y;
      v60.size.double width = width;
      v60.size.double height = v29;
      *(void *)&double v40 = (unint64_t)CGRectStandardize(v60);
      v61.origin.double x = x;
      v61.origin.double y = y;
      v61.size.double width = width;
      v61.size.double height = v29;
      *(CGRect *)(&v41 - 1) = CGRectStandardize(v61);
    }
    v53.double x = (v41 + v42) * v39 + v35.__cosval * v40 + 0.0;
    v53.double y = v35.__cosval * (v41 + v42) + v35.__sinval * v40 + 0.0;
    v62.origin.double x = a2;
    v62.origin.double y = a3;
    v62.size.double width = a4;
    CGFloat v10 = a5;
    v62.size.double height = a5;
    if (!CGRectContainsPoint(v62, v53)) {
      goto LABEL_40;
    }
    if (v36)
    {
      v63.origin.double x = x;
      v63.origin.double y = y;
      v63.size.double width = width;
      v63.size.double height = v29;
      CGRect v64 = CGRectStandardize(v63);
      double v43 = v64.origin.x + v64.size.width;
      v64.origin.double x = x;
      v64.origin.double y = y;
      v64.size.double width = width;
      v64.size.double height = v29;
      CGRect v65 = CGRectStandardize(v64);
    }
    else
    {
      double v43 = x + width;
      v65.origin.double y = y;
      v65.size.double height = v29;
    }
    v54.double x = (v65.origin.y + v65.size.height) * v39 + v35.__cosval * v43 + 0.0;
    v54.double y = v35.__cosval * (v65.origin.y + v65.size.height) + v35.__sinval * v43 + 0.0;
    v66.origin.double x = a2;
    v66.origin.double y = a3;
    v66.size.double width = a4;
    CGFloat v10 = a5;
    v66.size.double height = a5;
    if (CGRectContainsPoint(v66, v54))
    {
      if (v36)
      {
        v67.origin.double x = x;
        v67.origin.double y = y;
        v67.size.double width = width;
        v67.size.double height = v29;
        CGRect v68 = CGRectStandardize(v67);
        double v44 = v68.origin.x + v68.size.width;
        v68.origin.double x = x;
        v68.origin.double y = y;
        v68.size.double width = width;
        v68.size.double height = v29;
        CGRect v69 = CGRectStandardize(v68);
        double y = v69.origin.y;
      }
      else
      {
        double v44 = x + width;
      }
      v55.double x = y * v39 + v35.__cosval * v44 + 0.0;
      v55.double y = v35.__cosval * y + v35.__sinval * v44 + 0.0;
      CGFloat v6 = a2;
      CGFloat v5 = a3;
      v70.origin.double x = a2;
      v70.origin.double y = a3;
      CGFloat v11 = a4;
      v70.size.double width = a4;
      CGFloat v10 = a5;
      v70.size.double height = a5;
      if (CGRectContainsPoint(v70, v55)) {
        goto LABEL_17;
      }
    }
    else
    {
LABEL_40:
      CGFloat v5 = a3;
      CGFloat v11 = a4;
      CGFloat v6 = a2;
    }
LABEL_41:
    v12 += 24;
  }
  while (v16++ < v9);
  if (v15 != -1)
  {
    if (v14)
    {
      CPIndexSetAddRange((uint64_t)v14, v15, v13);
      goto LABEL_51;
    }
    uint64_t v14 = CPIndexSetCreateWithRange(v15, v13);
  }
  if (v14)
  {
LABEL_51:
    uint64_t v46 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v14);
    CFRelease(v14);
    return v46;
  }
  return 0;
}

uint64_t CGPDFLayoutCreateSelectionForPath(uint64_t a1, CGPathRef path, unsigned __int8 a3)
{
  uint64_t v3 = a1;
  if (!a1) {
    return v3;
  }
  uint64_t v4 = *(__n64 **)(a1 + 104);
  uint64_t v12 = 0;
  v8[0] = a1;
  v8[1] = path;
  v8[2] = a3;
  PathBoundingBodouble x = CGPathGetPathBoundingBox(path);
  cf_8 = 0;
  long long v11 = CPRangeNull;
  CGPDFFindContainedRanges(v5, v4, (uint64_t)v8);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_5:
    CGFloat v6 = cf_8;
    if (cf_8) {
      goto LABEL_6;
    }
    return 0;
  }
  if (cf_8)
  {
    CPIndexSetAddRange((uint64_t)cf_8, v11, *((uint64_t *)&v11 + 1));
    goto LABEL_5;
  }
  CGFloat v6 = CPIndexSetCreateWithRange(v11, *((uint64_t *)&v11 + 1));
  cf_8 = v6;
  if (!v6) {
    return 0;
  }
LABEL_6:
  uint64_t v3 = CGPDFSelectionCreateWithIndexSet(*(const void **)(v3 + 16), v6);
  if (cf_8) {
    CFRelease(cf_8);
  }
  return v3;
}

BOOL CGPDFFindContainedRanges(uint64_t a1, __n64 *a2, uint64_t a3)
{
  uint64_t v5 = *(const CGPath **)(a3 + 8);
  long long v6 = *(_OWORD *)(a3 + 40);
  long long v46 = *(_OWORD *)(a3 + 24);
  long long v47 = v6;
  v7.n64_u64[0] = CGPDFNodeGetBounds(a2).n64_u64[0];
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  if (a2 && a2->n64_u32[0] == 516 && (double Rotation = CGPDFNodeGetRotation((uint64_t)a2), Rotation != 0.0))
  {
    __double2 v15 = __sincos_stret(Rotation);
    v45.a = v15.__cosval;
    v45.b = -v15.__sinval;
    *(__double2 *)&v45.c = v15;
    v45.tdouble x = 0.0;
    v45.tdouble y = 0.0;
    uint64_t v16 = CGPathCreateMutableCopyByTransformingPath(v5, &v45);
    *(void *)(a3 + 8) = v16;
    *(CGRect *)(a3 + 24) = CGPathGetBoundingBox(v16);
    int v17 = 1;
  }
  else
  {
    int v17 = 0;
  }
  v52.origin.double x = v7.n64_f64[0];
  v52.origin.double y = v9;
  v52.size.double width = v11;
  v52.size.double height = v13;
  if (!CGRectIntersectsRect(*(CGRect *)(a3 + 24), v52))
  {
    *(unsigned char *)(a3 + 80) = 0;
    goto LABEL_38;
  }
  if (!a2
    || (unsigned __int32 v18 = a2->n64_u32[0], (a2->n64_u32[0] & 0x200) == 0)
    || !a2[5].n64_u32[1]
    || v18 == 513
    || (v18 & 0x100) != 0)
  {
    uint64_t TextRange = CGPDFNodeGetTextRange((uint64_t)a2);
    uint64_t v22 = TextRange + v21;
    if (TextRange + v21 > TextRange)
    {
      uint64_t v23 = TextRange;
      unsigned int v24 = TextRange + 1;
      while (1)
      {
        uint64_t v25 = *(void *)(*(void *)(*(void *)a3 + 24) + 24 * v23);
        if (v25)
        {
          double v26 = (const CGRect *)(v25 + 16);
          p_double y = (CGFloat *)(v25 + 24);
          p_CGSize size = (CGSize *)(v25 + 32);
          p_double height = (CGFloat *)(v25 + 40);
        }
        else
        {
          p_double height = &CGRectNull.size.height;
          p_CGSize size = &CGRectNull.size;
          p_double y = &CGRectNull.origin.y;
          double v26 = &CGRectNull;
        }
        double x = v26->origin.x;
        double v31 = *p_height;
        double width = p_size->width;
        double v33 = *p_y;
        v53.origin.double x = v26->origin.x;
        v53.origin.double y = *p_y;
        v53.size.double width = p_size->width;
        v53.size.double height = *p_height;
        if (CGRectContainsRect(*(CGRect *)(a3 + 24), v53))
        {
          v48.double x = x;
          v48.double y = v33;
          if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v48, *(unsigned char *)(a3 + 16)))
          {
            double v34 = x + width;
            v49.double x = v34;
            v49.double y = v33;
            if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v49, *(unsigned char *)(a3 + 16)))
            {
              double v35 = v33 + v31;
              v50.double x = v34;
              v50.double y = v35;
              if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v50, *(unsigned char *)(a3 + 16)))
              {
                v51.double x = v34 - width;
                v51.double y = v35;
                if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v51, *(unsigned char *)(a3 + 16))) {
                  break;
                }
              }
            }
          }
        }
        char v39 = 0;
LABEL_28:
        *(unsigned char *)(a3 + 80) = v39;
        uint64_t v23 = v24;
        if (v22 <= v24++) {
          goto LABEL_38;
        }
      }
      uint64_t v36 = *(void *)(a3 + 64);
      uint64_t v37 = *(void *)(a3 + 72);
      if (v36 != 0x7FFFFFFFFFFFFFFFLL || v37)
      {
        if (*(unsigned char *)(a3 + 80))
        {
          uint64_t v38 = v24 - v36;
          goto LABEL_33;
        }
        uint64_t v41 = *(void *)(a3 + 56);
        if (v41) {
          CPIndexSetAddRange(v41, v36, v37);
        }
        else {
          *(void *)(a3 + 56) = CPIndexSetCreateWithRange(*(void *)(a3 + 64), *(void *)(a3 + 72));
        }
      }
      *(void *)(a3 + 64) = v23;
      uint64_t v38 = 1;
LABEL_33:
      *(void *)(a3 + 72) = v38;
      char v39 = 1;
      goto LABEL_28;
    }
LABEL_38:
    BOOL v19 = 1;
    if (!v17) {
      return v19;
    }
    goto LABEL_39;
  }
  BOOL v19 = CGPDFNodeMap((uint64_t)a2, (uint64_t (*)(uint64_t, void, uint64_t))CGPDFFindContainedRanges, a3);
  if (!v17) {
    return v19;
  }
LABEL_39:
  double v42 = *(const void **)(a3 + 8);
  if (v42) {
    CFRelease(v42);
  }
  *(void *)(a3 + 8) = v5;
  long long v43 = v47;
  *(_OWORD *)(a3 + 24) = v46;
  *(_OWORD *)(a3 + 40) = v43;
  return v19;
}

uint64_t CGPDFLayoutCreateSelectionForQuadPoints(uint64_t a1, double *a2, int a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    int v4 = a3;
    uint64_t v5 = *(__n64 **)(a1 + 104);
    uint64_t v18 = 0;
    uint64_t v13 = a1;
    uint64_t v14 = a2;
    CGRect v15 = CGRectNull;
    CFTypeRef cf = 0;
    long long v17 = CPRangeNull;
    if (!a3) {
      return 0;
    }
    do
    {
      long long v6 = CPPolygonBounds(a2);
      v15.origin.double x = v7;
      v15.origin.double y = v8;
      v15.size.double width = v9;
      v15.size.double height = v10;
      CGPDFFindQuadrangleRanges((uint64_t)v6, v5, (uint64_t)&v13);
      if ((void)v17 != 0x7FFFFFFFFFFFFFFFLL || *((void *)&v17 + 1) != 0)
      {
        if (cf) {
          CPIndexSetAddRange((uint64_t)cf, v17, *((uint64_t *)&v17 + 1));
        }
        else {
          CFTypeRef cf = CPIndexSetCreateWithRange(v17, *((uint64_t *)&v17 + 1));
        }
      }
      long long v17 = CPRangeNull;
      LOBYTE(v18) = 0;
      a2 = v14 + 8;
      v14 += 8;
      --v4;
    }
    while (v4);
    if (cf)
    {
      uint64_t v3 = CGPDFSelectionCreateWithIndexSet(*(const void **)(v3 + 16), cf);
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

BOOL CGPDFFindQuadrangleRanges(uint64_t a1, __n64 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  long long v60 = *(_OWORD *)(a3 + 16);
  long long v61 = *(_OWORD *)(a3 + 32);
  v6.n64_u64[0] = CGPDFNodeGetBounds(a2).n64_u64[0];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  if (a2 && a2->n64_u32[0] == 516 && (double Rotation = CGPDFNodeGetRotation((uint64_t)a2), Rotation != 0.0))
  {
    double v14 = Rotation;
    CGRect v15 = (double *)malloc_type_malloc(0x40uLL, 0x1000040451B5BE8uLL);
    *(void *)(a3 + 8) = v15;
    __double2 v17 = __sincos_stret(v14);
    v16.f64[0] = v17.__cosval;
    for (uint64_t i = 0; i != 8; i += 2)
    {
      v16.f64[1] = -v17.__sinval;
      *(float64x2_t *)&v15[i] = vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v17, *(double *)(v5 + i * 8 + 8)), v16, *(double *)(v5 + i * 8)), (float64x2_t)0);
    }
    CPPolygonBounds(v15);
    *(void *)(a3 + 16) = v19;
    *(void *)(a3 + 24) = v20;
    *(void *)(a3 + 32) = v21;
    *(void *)(a3 + 40) = v22;
    int v23 = 1;
  }
  else
  {
    int v23 = 0;
  }
  v65.origin.double x = v6.n64_f64[0];
  v65.origin.double y = v8;
  v65.size.double width = v10;
  v65.size.double height = v12;
  if (!CGRectIntersectsRect(*(CGRect *)(a3 + 16), v65))
  {
    *(unsigned char *)(a3 + 72) = 0;
    goto LABEL_46;
  }
  if (!a2) {
    goto LABEL_17;
  }
  unsigned __int32 v24 = a2->n64_u32[0];
  int v25 = 1;
  if (a2->n64_u32[0] != 513 && (v24 & 0x100) == 0)
  {
    if ((v24 & 0x200) != 0 && a2[5].n64_u32[1])
    {
      BOOL v26 = CGPDFNodeMap((uint64_t)a2, (uint64_t (*)(uint64_t, void, uint64_t))CGPDFFindQuadrangleRanges, a3);
      if (!v23) {
        return v26;
      }
      goto LABEL_47;
    }
LABEL_17:
    int v25 = 0;
  }
  uint64_t TextRange = CGPDFNodeGetTextRange((uint64_t)a2);
  uint64_t v29 = TextRange + v28;
  if (TextRange + v28 > TextRange)
  {
    uint64_t v30 = TextRange;
    unsigned int v31 = TextRange + 1;
    do
    {
      uint64_t v32 = *(void *)(*(void *)(*(void *)a3 + 24) + 24 * v30);
      if (v32)
      {
        double v33 = (const CGRect *)(v32 + 16);
        p_double y = (CGFloat *)(v32 + 24);
        p_CGSize size = (CGSize *)(v32 + 32);
        p_double height = (CGFloat *)(v32 + 40);
      }
      else
      {
        double v33 = &CGRectNull;
        p_double height = &CGRectNull.size.height;
        p_CGSize size = &CGRectNull.size;
        p_double y = &CGRectNull.origin.y;
      }
      double x = v33->origin.x;
      double v38 = *p_height;
      double width = p_size->width;
      CGFloat v40 = *p_y;
      CGFloat v42 = *(double *)(a3 + 16);
      CGFloat v41 = *(double *)(a3 + 24);
      CGFloat v44 = *(double *)(a3 + 32);
      CGFloat v43 = *(double *)(a3 + 40);
      v62.origin.double x = v42;
      v62.origin.double y = v41;
      v62.size.double width = v44;
      v62.size.double height = v43;
      v66.origin.double x = v33->origin.x;
      v66.origin.double y = *p_y;
      v66.size.double width = p_size->width;
      v66.size.double height = *p_height;
      if (CGRectIntersectsRect(v62, v66))
      {
        if (v25)
        {
          v63.origin.double x = x;
          v63.origin.double y = v40;
          v63.size.double width = width;
          v63.size.double height = v38;
          CGRect v64 = CGRectInset(v63, width * 0.1, v38 * 0.1);
          double v45 = v64.origin.x;
          double y = v64.origin.y;
          double v47 = v64.size.width;
          double height = v64.size.height;
          uint64_t v49 = *(void *)(a3 + 8);
          if (CPPointIsInsidePolygonWithBounds(v49, v64.origin.x, v64.origin.y, v42, v41, v44, v43))
          {
            double v50 = v45 + v47;
            if (CPPointIsInsidePolygonWithBounds(v49, v50, y, v42, v41, v44, v43))
            {
              double v51 = y + height;
              if (CPPointIsInsidePolygonWithBounds(v49, v50, v51, v42, v41, v44, v43)
                && CPPointIsInsidePolygonWithBounds(v49, v50 - v47, v51, v42, v41, v44, v43))
              {
                goto LABEL_35;
              }
            }
          }
        }
        else
        {
          if (v32) {
            CGFloat v54 = *(double *)(v32 + 88);
          }
          else {
            CGFloat v54 = 0.0;
          }
          if (CPPointIsInsidePolygonWithBounds(*(void *)(a3 + 8), x + width * 0.5, v54, v42, v41, v44, v43))
          {
LABEL_35:
            uint64_t v55 = *(void *)(a3 + 56);
            uint64_t v56 = *(void *)(a3 + 64);
            if (v55 != 0x7FFFFFFFFFFFFFFFLL || v56)
            {
              if (!*(unsigned char *)(a3 + 72))
              {
                uint64_t v58 = *(void *)(a3 + 48);
                if (v58) {
                  CPIndexSetAddRange(v58, v55, v56);
                }
                else {
                  *(void *)(a3 + 48) = CPIndexSetCreateWithRange(*(void *)(a3 + 56), *(void *)(a3 + 64));
                }
                goto LABEL_37;
              }
              uint64_t v57 = v31 - v55;
            }
            else
            {
LABEL_37:
              *(void *)(a3 + 56) = v30;
              uint64_t v57 = 1;
            }
            *(void *)(a3 + 64) = v57;
            char v52 = 1;
            goto LABEL_29;
          }
        }
      }
      char v52 = 0;
LABEL_29:
      *(unsigned char *)(a3 + 72) = v52;
      uint64_t v30 = v31;
    }
    while (v29 > v31++);
  }
LABEL_46:
  BOOL v26 = 1;
  if (v23)
  {
LABEL_47:
    free(*(void **)(a3 + 8));
    *(void *)(a3 + 8) = v5;
    *(_OWORD *)(a3 + 16) = v60;
    *(_OWORD *)(a3 + 32) = v61;
  }
  return v26;
}

uint64_t CGPDFLayoutCreateSelectionForIntersectingRect(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  return CGPDFLayoutCreateSelectionForIntersectingRectWithOptions(a1, a2, 1, a3, a4, a5, a6);
}

uint64_t CGPDFLayoutCreateSelectionForIntersectingRectWithOptions(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = a1;
  if (a1)
  {
    if ((a2 - 1) > 3) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = dword_1850CE0B0[a2 - 1];
    }
    double v9 = *(__n64 **)(a1 + 104);
    *(_DWORD *)&v13[8] = 0;
    *(double *)double v11 = a4;
    *(double *)&v11[1] = a5;
    *(double *)&v11[2] = a6;
    *(double *)&v11[3] = a7;
    v11[4] = 0;
    v11[5] = 0;
    unsigned int v12 = v8;
    *(void *)uint64_t v13 = a3 == 1;
    CGPDFFindIntersectionRanges(a1, v9, (uint64_t)v11);
    if (*(void *)&v13[4])
    {
      uint64_t v7 = CGPDFSelectionCreateWithIndexSet(*(const void **)(v7 + 16), *(unsigned char **)&v13[4]);
      if (*(void *)&v13[4]) {
        CFRelease(*(CFTypeRef *)&v13[4]);
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

BOOL CGPDFFindIntersectionRanges(uint64_t a1, __n64 *a2, uint64_t a3)
{
  v27[8] = *(double *)MEMORY[0x1E4F143B8];
  v5.n64_u64[0] = CGPDFNodeGetBounds(a2).n64_u64[0];
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  if (!a2)
  {
    int v12 = 0;
    BOOL v18 = 0;
    uint64_t v13 = (void **)(a3 + 40);
    double v14 = *(void **)(a3 + 40);
    CGRect v15 = (void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 32);
    goto LABEL_10;
  }
  int v12 = a2->n64_u32[0];
  uint64_t v13 = (void **)(a3 + 40);
  double v14 = *(void **)(a3 + 40);
  CGRect v15 = (void *)(a3 + 32);
  uint64_t v16 = *(void *)(a3 + 32);
  if (a2->n64_u32[0] != 516)
  {
    BOOL v18 = 0;
LABEL_10:
    uint64_t v21 = v14;
    if (!v14) {
      goto LABEL_6;
    }
LABEL_11:
    if (!CGPDFRectIntersectsQuadrangleSide((uint64_t)v21, v5.n64_f64[0], v7, v9, v11))
    {
      CGPDFGetVerticesFromRotatedRect(v27, v5.n64_f64[0], v7, v9, v11, *(double *)(a3 + 32));
      if (!CGPDFRectIntersectsQuadrangleSide((uint64_t)v27, *(double *)a3, *(double *)(a3 + 8), *(double *)(a3 + 16), *(double *)(a3 + 24)))goto LABEL_23; {
    }
      }
    goto LABEL_13;
  }
  double Rotation = CGPDFNodeGetRotation((uint64_t)a2);
  BOOL v18 = Rotation != 0.0;
  if (Rotation != 0.0)
  {
    double v19 = Rotation;
    *(double *)(a3 + 32) = Rotation;
    uint64_t v20 = (double *)malloc_type_malloc(0x40uLL, 0x1000040451B5BE8uLL);
    *(void *)(a3 + 40) = v20;
    CGPDFGetVerticesFromRotatedRect(v20, *(double *)a3, *(double *)(a3 + 8), *(double *)(a3 + 16), *(double *)(a3 + 24), -v19);
  }
  uint64_t v21 = *v13;
  int v12 = 516;
  if (*v13) {
    goto LABEL_11;
  }
LABEL_6:
  v28.origin.double x = v5.n64_f64[0];
  v28.origin.double y = v7;
  v28.size.double width = v9;
  v28.size.double height = v11;
  if (!CGRectIntersectsRect(v28, *(CGRect *)a3)) {
    goto LABEL_23;
  }
LABEL_13:
  if (v12 != *(_DWORD *)(a3 + 48)
    && (!*(unsigned char *)(a3 + 52) || !a2 || a2->n64_u32[0] != 513 && (a2->n64_u32[0] & 0x100) == 0))
  {
    BOOL v25 = CGPDFNodeMap((uint64_t)a2, (uint64_t (*)(uint64_t, void, uint64_t))CGPDFFindIntersectionRanges, a3);
    if (!v18) {
      return v25;
    }
    goto LABEL_24;
  }
  uint64_t TextRange = CGPDFNodeGetTextRange((uint64_t)a2);
  uint64_t v24 = *(void *)(a3 + 56);
  if (v24) {
    CPIndexSetAddRange(v24, TextRange, v22);
  }
  else {
    *(void *)(a3 + 56) = CPIndexSetCreateWithRange(TextRange, v22);
  }
LABEL_23:
  BOOL v25 = 1;
  if (v18)
  {
LABEL_24:
    void *v15 = v16;
    free(*v13);
    *uint64_t v13 = v14;
  }
  return v25;
}

double CGPDFGetVerticesFromRotatedRect(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  __double2 v11 = __sincos_stret(a6);
  *a1 = v11.__cosval * a2 - v11.__sinval * a3 + 0.0;
  a1[1] = a3 * v11.__cosval + v11.__sinval * a2 + 0.0;
  a1[2] = v11.__cosval * (a2 + a4) - v11.__sinval * a3 + 0.0;
  a1[3] = a3 * v11.__cosval + v11.__sinval * (a2 + a4) + 0.0;
  double v12 = (a3 + a5) * v11.__cosval;
  a1[4] = v11.__cosval * (a2 + a4) - v11.__sinval * (a3 + a5) + 0.0;
  a1[5] = v12 + v11.__sinval * (a2 + a4) + 0.0;
  double v13 = a2 + a4 - a4;
  double result = v12 + v11.__sinval * v13 + 0.0;
  a1[6] = v11.__cosval * v13 - v11.__sinval * (a3 + a5) + 0.0;
  a1[7] = result;
  return result;
}

BOOL CGPDFRectIntersectsQuadrangleSide(uint64_t a1, double a2, double a3, double a4, double a5)
{
  unint64_t v8 = 0;
  for (uint64_t i = (double *)(a1 + 8); v8 != 4; i += 2)
  {
    uint64_t v10 = v8 == 3 ? 0 : v8 + 1;
    __double2 v11 = (double *)(a1 + 16 * v10);
    double v13 = *(i - 1);
    double v12 = *i;
    double v14 = *v11 - v13;
    double v15 = CGIntervalIntersection(v13, v14, a2, a4);
    double v17 = v16;
    if (fabs(v15) != INFINITY)
    {
      double v18 = v11[1] - v12;
      double v19 = CGIntervalIntersection(v12, v18, a3, a5);
      if (fabs(v19) != INFINITY
        && (v14 == 0.0
         || v18 == 0.0
         || fabs(CGIntervalIntersection(v18 * (v15 - v13), v18 * v17, v14 * (v19 - v12), v14 * v20)) != INFINITY))
      {
        break;
      }
    }
    ++v8;
  }
  return v8 < 4;
}

uint64_t CGPDFLayoutCreateSelectionForEntireLayout(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t TextRange = CGPDFNodeGetTextRange(*(void *)(a1 + 104));
    if (v3 < 1)
    {
      return 0;
    }
    else
    {
      int v4 = CPIndexSetCreateWithRange(TextRange, v3);
      uint64_t v1 = CGPDFSelectionCreateWithIndexSet(*(const void **)(v1 + 16), v4);
      if (v4) {
        CFRelease(v4);
      }
    }
  }
  return v1;
}

int64x2_t *CGPDFLayoutCreateSelectionForStringRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  double result = CGPDFLayoutCreateIndexSetForStringRange(a1, a2, a3);
  if (result)
  {
    __n64 v5 = result;
    uint64_t v6 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), result);
    CFRelease(v5);
    return (int64x2_t *)v6;
  }
  return result;
}

uint64_t CGPDFLayoutCreateSelectionForRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  if ((a2 & 0x8000000000000000) == 0 && a3 >= 1)
  {
    if (a2 + a3 > *(void *)(a1 + 48)) {
      return 0;
    }
    __n64 v5 = CPIndexSetCreateWithRange(a2, a3);
    uint64_t v3 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v5);
    if (v5) {
      CFRelease(v5);
    }
  }
  return v3;
}

double CGPDFLayoutGetBoundsForTextRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CGFloat height = 0.0;
  if (!a1) {
    return INFINITY;
  }
  uint64_t v4 = a2;
  if (a2 < 0) {
    return INFINITY;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (a2 >= v5 || a3 < 1) {
    return INFINITY;
  }
  if (v5 >= a2 + a3) {
    uint64_t v8 = a2 + a3;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 48);
  }
  uint64_t v9 = *(void *)(a1 + 24) + 24 * a2 + 8;
  CGFloat width = 0.0;
  double x = INFINITY;
  CGFloat y = INFINITY;
  do
  {
    uint64_t v12 = *(void *)(v9 - 8);
    p_CGFloat height = &CGRectNull.size.height;
    p_CGSize size = &CGRectNull.size;
    double v15 = (const CGRect *)(v12 + 16);
    double v16 = (CGSize *)(v12 + 32);
    double v17 = (CGFloat *)(v12 + 40);
    BOOL v18 = v12 == 0;
    if (v12) {
      p_CGFloat y = (CGFloat *)(v12 + 24);
    }
    else {
      p_CGFloat y = &CGRectNull.origin.y;
    }
    if (v18)
    {
      double v20 = &CGRectNull;
    }
    else
    {
      p_CGSize size = v16;
      p_CGFloat height = v17;
      double v20 = v15;
    }
    double v21 = 0.0;
    if (*(void *)v9) {
      double v21 = *(double *)(*(void *)v9 + 40);
    }
    v28.origin.double x = CGRectUprightBoundsForRotation(v20->origin.x, *p_y, p_size->width, *p_height, v21);
    v28.origin.CGFloat y = v22;
    v28.size.CGFloat width = v23;
    v28.size.CGFloat height = v24;
    v26.origin.double x = x;
    v26.origin.CGFloat y = y;
    v26.size.CGFloat width = width;
    v26.size.CGFloat height = height;
    CGRect v27 = CGRectUnion(v26, v28);
    double x = v27.origin.x;
    CGFloat y = v27.origin.y;
    CGFloat width = v27.size.width;
    CGFloat height = v27.size.height;
    ++v4;
    v9 += 24;
  }
  while (v4 < v8);
  return x;
}

__n64 CGPDFLayoutGetRectForTextRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2 < 0) {
      return (__n64)0x7FF0000000000000;
    }
    uint64_t v4 = *(void *)(a1 + 48);
    if (a2 >= v4 || a3 < 1)
    {
      return (__n64)0x7FF0000000000000;
    }
    else
    {
      if (v4 >= a2 + a3) {
        uint64_t v7 = a2 + a3;
      }
      else {
        uint64_t v7 = *(void *)(a1 + 48);
      }
      uint64_t v8 = (uint64_t *)(*(void *)(a1 + 24) + 24 * a2);
      uint64_t v9 = 0;
      result.n64_u64[0] = 0x7FF0000000000000;
      uint64_t v10 = 0x7FF0000000000000;
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *v8;
        v8 += 3;
        p_CGFloat height = &CGRectNull.size.height;
        p_CGSize size = &CGRectNull.size;
        double v15 = (const CGRect *)(v12 + 16);
        double v16 = (CGFloat *)(v12 + 24);
        double v17 = (CGSize *)(v12 + 32);
        BOOL v18 = (CGFloat *)(v12 + 40);
        BOOL v19 = v12 == 0;
        if (v12) {
          p_CGFloat y = v16;
        }
        else {
          p_CGFloat y = &CGRectNull.origin.y;
        }
        if (v19)
        {
          double v21 = &CGRectNull;
        }
        else
        {
          p_CGSize size = v17;
          p_CGFloat height = v18;
          double v21 = v15;
        }
        v22.origin.double x = v21->origin.x;
        v22.size.CGFloat height = *p_height;
        v22.size.CGFloat width = p_size->width;
        v22.origin.CGFloat y = *p_y;
        *(CGRect *)result.n64_u64 = CGRectUnion(*(CGRect *)result.n64_u64, v22);
        ++v3;
      }
      while (v3 < v7);
    }
  }
  else
  {
    return (__n64)0x7FF0000000000000;
  }
  return result;
}

CFMutableStringRef CGPDFLayoutCreateString(uint64_t a1)
{
  CFMutableStringRef Mutable = (CFMutableStringRef)a1;
  if (!a1) {
    return Mutable;
  }
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      uint64_t v4 = v2 + 8;
      uint64_t v2 = *(void *)(v2 + 8);
      uint64_t v3 = *(void *)(v4 + 8);
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v5 = (char *)malloc_type_malloc(2 * (*(void *)(a1 + 48) + v3 - v2), 0x1000040BDFB0063uLL);
    uint64_t length = Mutable[1].length;
    if (length && (CFArrayRef v7 = *(const __CFArray **)(length + 24)) != 0)
    {
      CFIndex Count = CFArrayGetCount(v7);
      if (Count < 0)
      {
        CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
LABEL_43:
        free(v5);
        return Mutable;
      }
    }
    else
    {
      CFIndex Count = 0;
    }
    CFIndex v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = -1;
    do
    {
      p_data = (uint64_t *)&Mutable[1].data;
      if (v9 >= Count
        || (uint64_t v13 = Mutable[1].length) != 0
        && (CFArrayRef v14 = *(const __CFArray **)(v13 + 24)) != 0
        && (p_data = (uint64_t *)CFArrayGetValueAtIndex(v14, v9)) != 0)
      {
        uint64_t v15 = *p_data;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (v11 + 1 >= v15)
      {
        uint64_t v19 = v10;
      }
      else
      {
        uint64_t v16 = ~v11 + v15;
        double v17 = (uint64_t *)(Mutable->length + 24 * v11 + 24);
        do
        {
          uint64_t v18 = *v17;
          if (*v17) {
            LOWORD(v18) = *(_WORD *)(v18 + 8);
          }
          uint64_t v19 = v10 + 1;
          *(_WORD *)&v5[2 * v10] = v18;
          v17 += 3;
          ++v10;
          --v16;
        }
        while (v16);
      }
      if (v9 >= Count)
      {
        uint64_t v10 = v19;
      }
      else
      {
        uint64_t v20 = Mutable[1].length;
        if (v20
          && (CFArrayRef v21 = *(const __CFArray **)(v20 + 24)) != 0
          && (ValueAtIndedouble x = CFArrayGetValueAtIndex(v21, v9)) != 0)
        {
          uint64_t v24 = ValueAtIndex[2];
          CGFloat v23 = (const void *)ValueAtIndex[3];
        }
        else
        {
          uint64_t v24 = 0;
          CGFloat v23 = 0;
        }
        memcpy(&v5[2 * v19], v23, 2 * v24);
        uint64_t v10 = v24 + v19;
      }
      uint64_t v11 = v15;
    }
    while (v9++ != Count);
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    if (v10 >= 1)
    {
      CGRect v26 = (CFTypeRef *)v5;
      do
      {
        if (*(__int16 *)v26 == -4)
        {
          LOWORD(cf[0]) = 32;
          CGRect v27 = cf;
          CGRect v28 = Mutable;
        }
        else
        {
          CGRect v28 = Mutable;
          CGRect v27 = v26;
        }
        CFStringAppendCharacters(v28, (const UniChar *)v27, 1);
        CGRect v26 = (CFTypeRef *)((char *)v26 + 2);
        --v10;
      }
      while (v10);
    }
    goto LABEL_43;
  }
  memset(cf, 0, sizeof(cf));
  CGPDFLayoutGetRTLData((__CFString **)cf, a1);
  CFMutableStringRef Mutable = (CFMutableStringRef)cf[0];
  if (cf[0]) {
    CFRetain(cf[0]);
  }
  return Mutable;
}

CFAttributedStringRef CGPDFLayoutCreateAttributedStringForRanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFAttributedStringRef aStr = 0;
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v76 = a3 - 1;
      if (a3 >= 1)
      {
        if (*(unsigned char *)(a1 + 72))
        {
          CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFAttributedStringRef aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
          uint64_t v5 = 0;
          do
          {
            uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
            uint64_t v7 = v6[1];
            if (v7)
            {
              uint64_t v79 = v5;
              uint64_t v8 = *v6;
              CFStringRef String = CFAttributedStringGetString(aStr);
              CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(alloc, 0, String);
              uint64_t v90 = 0;
              uint64_t v11 = v8 + v7;
              uint64_t v83 = v8 + v7;
              double v85 = MutableCopy;
              do
              {
                *(_DWORD *)char v89 = 0;
                uint64_t appended = CPTextServicesAppendTextLine(MutableCopy, (void *)a1, v8, v7, &v90, (int *)v89);
                uint64_t v13 = appended;
                if (v11 > appended)
                {
                  if (appended >= 1 && *(void *)(a1 + 48) >= appended && (uint64_t v14 = *(void *)(a1 + 24)) != 0)
                  {
                    uint64_t v15 = *(void *)(v14 + 24 * (appended - 1));
                    if (v15) {
                      LOWORD(v15) = *(_WORD *)(v15 + 8);
                    }
                  }
                  else
                  {
                    LOWORD(v15) = 0;
                  }
                  UniChar chars = v15;
                  CFStringAppendCharacters(MutableCopy, &chars, 1);
                }
                CFIndex Length = CFAttributedStringGetLength(aStr);
                v91.CFIndex location = 0;
                v91.uint64_t length = Length;
                CFAttributedStringReplaceString(aStr, v91, MutableCopy);
                CFIndex v17 = CFStringGetLength(MutableCopy);
                if (v11 <= v13) {
                  uint64_t v22 = 0;
                }
                else {
                  uint64_t v22 = -1;
                }
                uint64_t v23 = v22 - Length + v17;
                if (*(int *)v89 >= v23) {
                  uint64_t v24 = v23;
                }
                else {
                  uint64_t v24 = *(int *)v89;
                }
                if (v24 < 1)
                {
                  uint64_t v24 = 0;
                  uint64_t v26 = 0;
                  uint64_t v25 = 0;
                }
                else
                {
                  uint64_t v25 = 0;
                  uint64_t v26 = 0;
                  uint64_t v27 = 0;
                  CGRect v28 = (int *)v90;
                  do
                  {
                    uint64_t v29 = v28[v27];
                    if ((v29 & 0x80000000) == 0 && v13 + ~v8 > v29)
                    {
                      uint64_t v30 = v8 + v29;
                      if (v30 >= 0 && *(void *)(a1 + 48) > v30 && (uint64_t v31 = *(void *)(a1 + 24)) != 0) {
                        uint64_t v32 = *(void *)(v31 + 24 * v30 + 8);
                      }
                      else {
                        uint64_t v32 = 0;
                      }
                      if (v32 != v26)
                      {
                        if (v27)
                        {
                          CGPDFLayoutApplyStyleToStringForRange(v26, aStr, v25 + Length, v27 - v25, v18, v19, v20, v21);
                          uint64_t v26 = v32;
                          uint64_t v25 = v27;
                        }
                        else
                        {
                          uint64_t v25 = 0;
                          uint64_t v26 = v32;
                        }
                      }
                    }
                    ++v27;
                  }
                  while (v24 != v27);
                  uint64_t v11 = v83;
                  CFMutableStringRef MutableCopy = v85;
                }
                CGPDFLayoutApplyStyleToStringForRange(v26, aStr, v25 + Length, v24 - v25, v18, v19, v20, v21);
                free(v90);
                uint64_t v90 = 0;
                uint64_t v8 = v13;
                BOOL v33 = __OFSUB__(v11, v13);
                uint64_t v7 = v11 - v13;
              }
              while (!((v7 < 0) ^ v33 | (v7 == 0)));
              CFRelease(MutableCopy);
              uint64_t v5 = v79;
              if (v79 < v76)
              {
                CFStringRef v34 = CFAttributedStringGetString(aStr);
                CFMutableStringRef v35 = CFStringCreateMutableCopy(alloc, 0, v34);
                v89[0] = 10;
                CFStringAppendCharacters(v35, v89, 1);
                v92.uint64_t length = CFAttributedStringGetLength(aStr);
                v92.CFIndex location = 0;
                CFAttributedStringReplaceString(aStr, v92, v35);
                CFRelease(v35);
              }
              uint64_t v3 = a2;
            }
            ++v5;
          }
          while (v5 != a3);
        }
        else
        {
          StringForRanges = CGPDFLayoutCreateStringForRanges(a1, a2, a3);
          if (StringForRanges)
          {
            CFStringRef v37 = StringForRanges;
            CFIndex v38 = CFStringGetLength(StringForRanges);
            if (v38 >= 1
              && (CFIndex v39 = v38,
                  CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
                  (CFAttributedStringRef v41 = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v37, 0)) != 0))
            {
              CFAllocatorRef v42 = v41;
              CFAttributedStringRef aStr = CFAttributedStringCreateMutableCopy(v40, v39, v41);
              if (aStr)
              {
                CFAllocatorRef alloca = v42;
                CFStringRef v80 = v37;
                uint64_t v43 = 0;
                uint64_t v44 = 0;
                uint64_t v45 = 0;
                do
                {
                  uint64_t v84 = v43;
                  long long v46 = (uint64_t *)(a2 + 16 * v43);
                  uint64_t v48 = *v46;
                  uint64_t v47 = v46[1];
                  RangeInCharacteruint64_t Range = CPMultiUnicodesGetRangeInCharacterRange(*(void *)(a1 + 56), *v46, v47);
                  BOOL v55 = RangeInCharacterRange == 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v56 = v50 == 0;
                  if (v55 && v56) {
                    CFIndex v57 = 0;
                  }
                  else {
                    CFIndex v57 = RangeInCharacterRange;
                  }
                  if (v55 && v56) {
                    CFIndex v58 = 0;
                  }
                  else {
                    CFIndex v58 = RangeInCharacterRange + v50;
                  }
                  if (v57 <= v58)
                  {
                    CFIndex v60 = v58;
                    uint64_t v59 = 0;
                    uint64_t v86 = v47 + v48;
                    uint64_t v61 = 1;
                    CFIndex v62 = v58;
                    do
                    {
                      uint64_t v63 = v48;
                      uint64_t v48 = v86;
                      if (v57 < v62)
                      {
                        uint64_t v64 = *(void *)(a1 + 56);
                        if (v64
                          && (CFArrayRef v65 = *(const __CFArray **)(v64 + 24)) != 0
                          && (ValueAtIndedouble x = (uint64_t *)CFArrayGetValueAtIndex(v65, v57)) != 0)
                        {
                          uint64_t v48 = *ValueAtIndex;
                        }
                        else
                        {
                          uint64_t v48 = 0;
                        }
                      }
                      uint64_t v67 = v48 - v63;
                      if (v48 <= v63)
                      {
                        uint64_t v70 = v61;
                      }
                      else
                      {
                        uint64_t v68 = 24 * v63 + 8;
                        uint64_t v69 = v59;
                        do
                        {
                          uint64_t v59 = *(void *)(*(void *)(a1 + 24) + v68);
                          if (v59 == v69)
                          {
                            uint64_t v59 = v69;
                          }
                          else
                          {
                            if (v45 >= 1) {
                              CGPDFLayoutApplyStyleToStringForRange(v69, aStr, v44, v45 - v44, v51, v52, v53, v54);
                            }
                            uint64_t v44 = v45;
                          }
                          v45 += v61;
                          v68 += 24;
                          uint64_t v61 = 1;
                          uint64_t v69 = v59;
                          uint64_t v70 = 1;
                          --v67;
                        }
                        while (v67);
                      }
                      uint64_t v61 = v70;
                      CFIndex v62 = v60;
                      if (v57 < v60)
                      {
                        uint64_t v71 = *(void *)(a1 + 56);
                        if (v71
                          && (CFArrayRef v72 = *(const __CFArray **)(v71 + 24)) != 0
                          && (CGRect v73 = CFArrayGetValueAtIndex(v72, v57)) != 0)
                        {
                          uint64_t v61 = v73[2];
                        }
                        else
                        {
                          uint64_t v61 = 0;
                        }
                      }
                    }
                    while (v57++ != v60);
                  }
                  else
                  {
                    uint64_t v59 = 0;
                  }
                  CGPDFLayoutApplyStyleToStringForRange(v59, aStr, v44, v45 - v44, v51, v52, v53, v54);
                  ++v45;
                  uint64_t v43 = v84 + 1;
                }
                while (v84 + 1 != a3);
                CFAllocatorRef v42 = alloca;
                CFStringRef v37 = v80;
              }
              else
              {
                CFAttributedStringRef aStr = 0;
              }
              CFRelease(v37);
            }
            else
            {
              CFAttributedStringRef aStr = 0;
              CFAllocatorRef v42 = (const __CFAllocator *)v37;
            }
            CFRelease(v42);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return aStr;
}

void CGPDFLayoutApplyStyleToStringForRange(uint64_t a1, __CFAttributedString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  *(_OWORD *)uint64_t v26 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  keys[0] = (void *)kCGPDFTextStyleFont;
  keys[1] = (void *)kCGPDFTextStyleFontSize;
  keys[2] = (void *)kCGPDFTextStyleFillColor;
  keys[3] = (void *)kCGPDFTextStyleFillColorSpace;
  keys[4] = (void *)kCGPDFTextStyleBaseLineOffset;
  *(void *)bytes = *(void *)(a1 + 8);
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v12 = *(CGColorSpace ***)(a1 + 24);
  if (v12)
  {
    if (((unint64_t)v12 & 0x8000000000000000) != 0)
    {
      ColorSpace = CGTaggedColorGetColorSpace(*(void *)(a1 + 24), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (ColorSpace)
      {
LABEL_5:
        int v14 = 0;
LABEL_9:
        CGColorRef v15 = (CGColorRef)v12;
        goto LABEL_10;
      }
    }
    else
    {
      ColorSpace = v12[3];
      if (ColorSpace) {
        goto LABEL_5;
      }
    }
    int v14 = 1;
    ColorSpace = CGColorSpaceCreateDeviceRGB();
    goto LABEL_9;
  }
  ColorSpace = CGColorSpaceCreateDeviceRGB();
  *(_OWORD *)components = xmmword_1852950E0;
  long long v22 = unk_1852950F0;
  CGColorRef v15 = CGColorCreate(ColorSpace, components);
  int v14 = 1;
LABEL_10:
  components[0] = *(CGFloat *)(a1 + 48);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 8);
  cf[0] = CFDataCreate(v16, (const UInt8 *)&v19, 8);
  cf[1] = v15;
  v26[0] = ColorSpace;
  v26[1] = CFDataCreate(v16, (const UInt8 *)components, 8);
  CFDictionaryRef v17 = CFDictionaryCreate(v16, (const void **)keys, (const void **)&values, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v17)
  {
    CFDictionaryRef v18 = v17;
    v28.CFIndex location = a3;
    v28.uint64_t length = a4;
    CFAttributedStringSetAttributes(a2, v28, v17, 0);
    CFRelease(v18);
  }
  if (v14) {
    CGColorSpaceRelease(ColorSpace);
  }
  if (!v12 && v15) {
    CFRelease(v15);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (values) {
    CFRelease(values);
  }
  if (v26[1]) {
    CFRelease(v26[1]);
  }
}

uint64_t CGPDFLayoutGetLineRangesForTextRange(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (a5)
  {
    uint64_t v6 = *a5;
    *a5 = 0;
    if (result)
    {
      if ((a2 & 0x8000000000000000) == 0 && a3 >= 1)
      {
        NodeContaininguint64_t TextRange = (int *)CGPDFNodeGetNodeContainingTextRange(*(void *)(result + 104), a2, a3);
        v14[0] = a2;
        v14[1] = a3;
        v14[2] = a4;
        v14[3] = a5;
        v14[4] = v6;
        if (NodeContainingTextRange) {
          int v11 = *NodeContainingTextRange;
        }
        else {
          int v11 = 0;
        }
        uint64_t v12 = 1;
        while (kCGPDFNodeTypeOrder[v12] != v11)
        {
          if (++v12 == 12)
          {
            uint64_t v13 = 0;
            return ((uint64_t (*)(void, int *, void *))lineRangeFuncArray[v13])(0, NodeContainingTextRange, v14);
          }
        }
        uint64_t v13 = v12;
        return ((uint64_t (*)(void, int *, void *))lineRangeFuncArray[v13])(0, NodeContainingTextRange, v14);
      }
    }
  }
  return result;
}

BOOL mapLineRangeRecurse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t TextRange = CGPDFNodeGetTextRange(a2);
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (v8 <= 0) {
    uint64_t v9 = *a3 + v8;
  }
  else {
    uint64_t v9 = *a3;
  }
  if (v8 > 0) {
    uint64_t v7 = *a3 + v8;
  }
  uint64_t v10 = TextRange + v6;
  if (v6 <= 0) {
    uint64_t v11 = TextRange + v6;
  }
  else {
    uint64_t v11 = TextRange;
  }
  if (v6 <= 0) {
    uint64_t v10 = TextRange;
  }
  BOOL v12 = v7 > v11 && v10 <= v9;
  BOOL result = v12;
  if (!v12 && v7 > v11)
  {
    return CGPDFNodeMapByType(a2, (uint64_t)lineRangeFuncArray);
  }
  return result;
}

uint64_t mapLineRangeFetch(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t TextRange = CGPDFNodeGetTextRange(a2);
  uint64_t v6 = v5;
  uint64_t v7 = a3[1];
  if (v7 <= 0) {
    uint64_t v8 = *a3 + v7;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 <= 0) {
    uint64_t v9 = *a3;
  }
  else {
    uint64_t v9 = *a3 + v7;
  }
  uint64_t v10 = TextRange + v6;
  if (v6 <= 0) {
    uint64_t v11 = TextRange + v6;
  }
  else {
    uint64_t v11 = TextRange;
  }
  if (v6 <= 0) {
    uint64_t v10 = TextRange;
  }
  BOOL v12 = v9 > v11 && v10 <= v8;
  uint64_t v13 = v12;
  if (!v12 && v9 > v11)
  {
    uint64_t v15 = a3[2];
    int v14 = (uint64_t *)a3[3];
    uint64_t v16 = *v14;
    if (v15 && v16 < a3[4])
    {
      uint64_t v17 = CPRangeIntersection(*a3, v7, TextRange, v6);
      CFDictionaryRef v18 = (uint64_t *)(v15 + 16 * v16);
      *CFDictionaryRef v18 = v17;
      v18[1] = v19;
      uint64_t v16 = *v14;
    }
    *int v14 = v16 + 1;
    return 1;
  }
  return v13;
}

BOOL mapLineRangeStop(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t TextRange = CGPDFNodeGetTextRange(a2);
  return *a3 + (a3[1] & ~((uint64_t)a3[1] >> 63)) > TextRange + (v5 & (v5 >> 63));
}

uint64_t CGPDFLayoutRangeIsOfType(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 1;
  if (a3 && a4)
  {
    uint64_t v9 = a3;
    int v11 = a4 - 1;
    if ((a4 - 1) > 4)
    {
      int v12 = 0;
      int v13 = 0;
    }
    else
    {
      int v12 = dword_18520D16C[v11];
      int v13 = dword_18520D180[v11];
    }
    if (a2 < 0 || a1[6] <= a2 || (uint64_t v14 = a1[3]) == 0) {
      int v15 = 0;
    }
    else {
      int v15 = *(_DWORD *)(v14 + 24 * a2 + 16);
    }
    if (v15 & v13) != 0 || (CGPDFLayoutIsWhiteSpaceCharacter((uint64_t)a1, a2))
    {
      int v16 = 1;
    }
    else
    {
      if (a2 < 0 || a1[6] <= a2)
      {
        LODWORD(v23) = 0;
      }
      else
      {
        uint64_t v23 = a1[3];
        if (v23)
        {
          uint64_t v23 = *(void *)(v23 + 24 * a2);
          if (v23) {
            LODWORD(v23) = *(__int16 *)(v23 + 8) == -4;
          }
        }
      }
      int v16 = (v15 & 1) != 0 ? 0 : v23;
    }
    uint64_t v17 = a2 + a3;
    uint64_t v18 = a2 + a3 - 1;
    if (a2 + a3 >= 1 && a1[6] >= v17 && (uint64_t v19 = a1[3]) != 0) {
      int v20 = *(_DWORD *)(v19 + 24 * v18 + 16);
    }
    else {
      int v20 = 0;
    }
    if ((v20 & v12) != 0)
    {
      LODWORD(v21) = 1;
    }
    else
    {
      int v22 = v16;
      if (CGPDFLayoutIsWhiteSpaceCharacter((uint64_t)a1, a2 + a3 - 1))
      {
        LODWORD(v21) = 1;
        int v16 = v22;
      }
      else
      {
        if (v17 < 1 || a1[6] < v17)
        {
          LODWORD(v21) = 0;
          int v16 = v22;
        }
        else
        {
          uint64_t v21 = a1[3];
          int v16 = v22;
          if (v21)
          {
            uint64_t v21 = *(void *)(v21 + 24 * v18);
            if (v21) {
              LODWORD(v21) = *(__int16 *)(v21 + 8) == -4;
            }
          }
        }
        if ((v20 & 2) != 0) {
          LODWORD(v21) = 0;
        }
      }
    }
    uint64_t v5 = v16 & v21;
    if (a4 == 1 && (v16 & v21 & 1) == 0)
    {
      int v41 = v21;
      int v42 = v16;
      uint64_t v24 = a2;
      uint64_t v25 = a1[13];
      NodeContaininguint64_t TextRange = (int *)CGPDFNodeGetNodeContainingTextRange(v25, a2, 1);
      uint64_t v27 = (uint64_t)NodeContainingTextRange;
      if (NodeContainingTextRange) {
        int v28 = *NodeContainingTextRange;
      }
      else {
        int v28 = 0;
      }
      uint64_t v29 = (int *)CGPDFNodeGetNodeContainingTextRange(v25, a2 + a3 - 1, 1);
      uint64_t v30 = (uint64_t)v29;
      if (v29) {
        int v31 = *v29;
      }
      else {
        int v31 = 0;
      }
      if (v28 == 1)
      {
        uint64_t TextRange = CGPDFNodeGetTextRange(v27);
        if (TextRange >= a2) {
          uint64_t v24 = a2;
        }
        else {
          uint64_t v24 = TextRange;
        }
        if (TextRange >= a2) {
          uint64_t v9 = a3;
        }
        else {
          uint64_t v9 = v17 - TextRange;
        }
      }
      if (v31 == 1)
      {
        uint64_t v33 = CGPDFNodeGetTextRange(v30);
        if (v33 + v34 > v17) {
          uint64_t v9 = v33 + v34 - v24;
        }
      }
      if (v24 == a2 && v9 == a3) {
        return 0;
      }
      uint64_t v36 = CPIndexSetCreateWithRange(v24, v9);
      if (CGPDFLayoutExtendRangeToWordBoundaries((uint64_t)a1, (uint64_t)v36, a2, a3))
      {
        uint64_t FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v36);
        uint64_t LastIndex = CPIndexSetGetLastIndex((uint64_t)v36);
        int v39 = v42;
        if (FirstIndex == a2) {
          int v39 = 1;
        }
        int v40 = v41;
        if (LastIndex + 1 == v17) {
          int v40 = 1;
        }
        uint64_t v5 = v40 & v39;
      }
      else
      {
        uint64_t v5 = 0;
      }
      if (v36) {
        CFRelease(v36);
      }
    }
  }
  return v5;
}

uint64_t CGPDFLayoutGetOffsetInLine(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    RangeInCharacteruint64_t Range = CPMultiUnicodesGetRangeInCharacterRange(*(void *)(a1 + 56), a2, a3);
    uint64_t v9 = 0;
    BOOL v10 = RangeInCharacterRange == 0x7FFFFFFFFFFFFFFFLL;
    BOOL v11 = v8 == 0;
    if (v10 && v11) {
      CFIndex v12 = 0;
    }
    else {
      CFIndex v12 = RangeInCharacterRange;
    }
    if (v10 && v11) {
      CFIndex v13 = 0;
    }
    else {
      CFIndex v13 = RangeInCharacterRange + v8;
    }
    if (v12 <= v13)
    {
      uint64_t v9 = 0;
      int64_t v14 = 0;
      uint64_t v15 = a2 - 1;
      uint64_t v16 = a2 + a3;
      do
      {
        uint64_t v17 = v16;
        if (v12 < v13)
        {
          uint64_t v18 = *(void *)(a1 + 56);
          if (v18
            && (CFArrayRef v19 = *(const __CFArray **)(v18 + 24)) != 0
            && (ValueAtIndedouble x = (uint64_t *)CFArrayGetValueAtIndex(v19, v12)) != 0)
          {
            uint64_t v17 = *ValueAtIndex;
          }
          else
          {
            uint64_t v17 = 0;
          }
        }
        unint64_t v21 = ~v14 + a4;
        if (v21 >= v17 - v15 - 2) {
          unint64_t v21 = v17 - v15 - 2;
        }
        uint64_t v22 = v9 + v21;
        unint64_t v23 = v14 + v21;
        if (v14 < a4) {
          unint64_t v24 = v23 + 1;
        }
        else {
          unint64_t v24 = v14;
        }
        if (v14 < a4) {
          uint64_t v25 = v22 + 1;
        }
        else {
          uint64_t v25 = v9;
        }
        if (v15 + 1 < v17)
        {
          int64_t v14 = v24;
          uint64_t v9 = v25;
        }
        if (v12 < v13)
        {
          uint64_t v26 = *(void *)(a1 + 56);
          if (v26)
          {
            CFArrayRef v27 = *(const __CFArray **)(v26 + 24);
            if (v27 && (int v28 = CFArrayGetValueAtIndex(v27, v12)) != 0) {
              uint64_t v26 = v28[2];
            }
            else {
              uint64_t v26 = 0;
            }
          }
          v14 += v26;
          if (v14 >= (unint64_t)a4) {
            return v9 + a2;
          }
          ++v9;
        }
        ++v12;
        uint64_t v15 = v17;
      }
      while (v13 + 1 != v12);
    }
    return v9 + a2;
  }
  return a4;
}

uint64_t CGPDFLayoutDebugLineElement()
{
  return 0;
}

uint64_t __CGPDFSoftMaskGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFSoftMaskGetTypeID_class);
  CGPDFSoftMaskGetTypeID_id = result;
  return result;
}

void CGPDFSoftMaskFinalize(uint64_t a1)
{
  CGPDFGroupRelease(*(CGColorSpaceRef **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

void upsample_provider_release_info(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)) {
    CGDataProviderUnlock(*(void *)a1);
  }
  CGDataProviderRelease(*(CGDataProviderRef *)a1);
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2) {
    free(v2);
  }

  free((void *)a1);
}

uint64_t upsample_provider_get_work_buffer_size(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t upsample_provider_get_bytes_per_row_count(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t upsample_provider_unlock(uint64_t *a1)
{
  return CGDataProviderUnlock(*a1);
}

uint64_t upsample_provider_lock(uint64_t *a1)
{
  return CGDataProviderLock(*a1);
}

void upsample_provider_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (!v9) {
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, v10);
  }
  if ((*(_DWORD *)(v9 + 20) | 2) != 3) {
    _CGHandleAssert("upsample_provider_rewind", 400, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "", "Unimplemented", a6, a7, a8, v10);
  }
  CGDataProviderRewind(v9);
  a1[6] = 0;
  a1[11] = 0;
}

unint64_t upsample_provider_skip_forward(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *a1;
  unint64_t v5 = upsample_provider_destination_byte_count_to_source_byte_count((uint64_t)a1, a2);
  unint64_t v6 = CGDataProviderSkipForwardInternal(v4, v5);
  if ((v6 & 0x8000000000000000) != 0) {
    _CGHandleAssert("upsample_provider_skip_forward", 375, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "skipped >= 0", "", v7, v8, v9, v12);
  }
  unint64_t v10 = v6;
  if (v6 != v5) {
    unint64_t v2 = upsample_provider_source_byte_count_to_destination_byte_count((uint64_t)a1, v6);
  }
  a1[11] += v10;
  a1[6] += v2;
  return v2;
}

unint64_t upsample_provider_destination_byte_count_to_source_byte_count(uint64_t a1, unint64_t a2)
{
  return upsample_provider_byte_count_to_byte_count(*(void *)(a1 + 112), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), a2);
}

unint64_t upsample_provider_source_byte_count_to_destination_byte_count(uint64_t a1, unint64_t a2)
{
  return upsample_provider_byte_count_to_byte_count(*(void *)(a1 + 112), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), a2);
}

unint64_t upsample_provider_byte_count_to_byte_count(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (!a4) {
    _CGHandleAssert("upsample_provider_byte_count_to_byte_count", 177, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "input_bytes_per_row != 0", "rowbytes %zu", a6, a7, a8, 0);
  }
  if (!a10) {
    return 0;
  }
  if (a4 == a5 || !a9)
  {
    unint64_t v12 = a10 / a1 / a2;
    unint64_t v13 = a10 / a1 % a2;
    if (a10 / a1 >= a2 && v12 != 1)
    {
      unint64_t v12 = vcvtas_u32_f32((float)((float)(unint64_t)a8 * (float)v12) / (float)a3);
      if (a8 - 1 < v12) {
        unint64_t v12 = a8 - 1;
      }
    }
    if (v13 >= 2)
    {
      unint64_t v13 = vcvtas_u32_f32((float)((float)(unint64_t)a7 * (float)v13) / (float)a2);
      if (a7 - 1 < v13) {
        unint64_t v13 = a7 - 1;
      }
    }
    return (v13 + v12 * a7) * a1;
  }
  else
  {
    if (a10 >= a4) {
      unint64_t v10 = a10 / a4;
    }
    else {
      unint64_t v10 = 0;
    }
    unint64_t v14 = a10 - v10 * a4;
    unint64_t v15 = v14 + a6 % a4;
    if (v15 >= a4)
    {
      ++v10;
      unint64_t v14 = v15 - a4;
      v15 -= a4;
    }
    BOOL v16 = v15 >= a5;
    unint64_t v17 = v15 - a5;
    if (v16) {
      unint64_t v14 = v17;
    }
    if (v16) {
      unint64_t v18 = a5;
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v19 = v18 / a1;
    if (v10 >= 2)
    {
      unint64_t v10 = vcvtas_u32_f32((float)((float)(unint64_t)a8 * (float)v10) / (float)a3);
      if (a8 - 1 < v10) {
        unint64_t v10 = a8 - 1;
      }
    }
    if (v19 != 1 && v18 >= a1)
    {
      unint64_t v19 = vcvtas_u32_f32((float)((float)(unint64_t)a7 * (float)v19) / (float)a2);
      if (a7 - 1 < v19) {
        unint64_t v19 = a7 - 1;
      }
    }
    return v14 + v10 * a9 + v19 * a1;
  }
}

unint64_t upsample_provider_get_bytes(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 8)) {
    _CGHandleAssert("upsample_provider_get_bytes", 361, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "info->src_provider_uses_random_access == false", "", a6, a7, a8, vars0);
  }

  return upsample_provider_get_bytes_at_position_inner(a1, a2, 0, a3, 1, a6, a7, a8);
}

unint64_t upsample_provider_get_bytes_at_position_inner(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 0x8000000000000000) != 0) {
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 290, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "pos >= 0", "pos %lld", a6, a7, a8, a3);
  }
  unint64_t v9 = a4;
  unint64_t v11 = *(void *)(a1 + 32);
  if (v11 < a4) {
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 296, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "length <= dst_scaline_size", "length %zu size %zu", a6, a7, a8, a4);
  }
  unint64_t v14 = upsample_provider_destination_byte_count_to_source_byte_count(a1, a4);
  unint64_t v22 = upsample_provider_byte_count_to_byte_count(*(void *)(a1 + 112), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), 0, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), a3);
  if (v22 >= 0x7FFFFFFF) {
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 314, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "src_pos >= 0 && src_pos < INT_MAX", "pos %lld", v19, v20, v21, v22);
  }
  unint64_t v23 = *(void **)a1;
  if (v14 > *(void *)(a1 + 144))
  {
    CGPostError((uint64_t)"%s: bytes_to_read %zd > work_buffer_size %zd", v15, v16, v17, v18, v19, v20, v21, (char)"upsample_provider_get_bytes_at_position_inner");
    if (v14 > *(void *)(a1 + 144)) {
      _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 322, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "bytes_to_read <= info->work_buffer_size", "bytes to read %zu  buffer size %zu", v19, v20, v21, v14);
    }
  }
  unint64_t v24 = *(char **)(a1 + 136);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t BytesAtPositionInternal = CGDataProviderDirectGetBytesAtPositionInternal(v23, v24, v22, v14, v18, v19, v20, v21);
  }
  else {
    unint64_t BytesAtPositionInternal = CGDataProviderSequentialGetBytesInternal((uint64_t)v23, (uint64_t)v24, v14);
  }
  unint64_t v29 = BytesAtPositionInternal;
  if (BytesAtPositionInternal)
  {
    uint64_t v30 = *(void *)(a1 + 136);
    uint64_t v31 = *(void *)(a1 + 96);
    switch(v31)
    {
      case 32:
        if (v11 >= 4)
        {
          unint64_t v38 = 0;
          unint64_t v39 = *(void *)(a1 + 120);
          unint64_t v40 = v39 >> 1;
          uint64_t v41 = *(void *)(a1 + 104);
          uint64_t v42 = 4 * v41;
          do
          {
            if (v41)
            {
              uint64_t v43 = (int *)(v30 + v42 * (v40 >> 16));
              uint64_t v44 = a2;
              uint64_t v45 = v41;
              do
              {
                int v46 = *v43++;
                *v44++ = v46;
                --v45;
              }
              while (v45);
            }
            v40 += v39;
            v38 += v41;
            a2 = (_DWORD *)((char *)a2 + v42);
          }
          while (v38 < v11 >> 2);
        }
        break;
      case 16:
        if (v11 >= 2)
        {
          unint64_t v47 = 0;
          unint64_t v48 = *(void *)(a1 + 120);
          unint64_t v49 = v48 >> 1;
          uint64_t v50 = *(void *)(a1 + 104);
          uint64_t v51 = 2 * v50;
          do
          {
            if (v50)
            {
              uint64_t v52 = (__int16 *)(v30 + v51 * (v49 >> 16));
              uint64_t v53 = a2;
              uint64_t v54 = v50;
              do
              {
                __int16 v55 = *v52++;
                *v53++ = v55;
                --v54;
              }
              while (v54);
            }
            v49 += v48;
            v47 += v50;
            a2 = (_DWORD *)((char *)a2 + v51);
          }
          while (v47 < v11 >> 1);
        }
        break;
      case 8:
        if (v11)
        {
          unint64_t v32 = 0;
          unint64_t v33 = *(void *)(a1 + 120);
          unint64_t v34 = v33 >> 1;
          unint64_t v35 = *(void *)(a1 + 104);
          do
          {
            if (v35)
            {
              unint64_t v36 = 0;
              uint64_t v37 = v30 + (v34 >> 16) * v35;
              do
              {
                *((unsigned char *)a2 + v32 + v36) = *(unsigned char *)(v37 + v36);
                ++v36;
                unint64_t v35 = *(void *)(a1 + 104);
              }
              while (v36 < v35);
              unint64_t v33 = *(void *)(a1 + 120);
            }
            v34 += v33;
            v32 += v35;
          }
          while (v32 < v11);
        }
        break;
      default:
        _CGHandleAssert("upsample_data", 159, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "", "Unimplemented", v26, v27, v28, v57);
    }
  }
  if (v14 < BytesAtPositionInternal) {
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 336, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "src_length >= bytes_read", "length %zu  to read %zu", v26, v27, v28, v14);
  }
  if (BytesAtPositionInternal < v14) {
    unint64_t v9 = upsample_provider_source_byte_count_to_destination_byte_count(a1, BytesAtPositionInternal);
  }
  if (a5)
  {
    *(void *)(a1 + 88) += v29;
    *(void *)(a1 + 48) += v9;
  }
  return v9;
}

uint64_t upsample_provider_release_data(uint64_t *a1)
{
  CGDataProviderReleaseBytePtr(*a1);
  uint64_t v2 = *a1;

  return CGDataProviderReleaseData(v2);
}

uint64_t upsample_provider_retain_data(uint64_t *a1)
{
  CGDataProviderRetainBytePtr(*a1);
  uint64_t v2 = *a1;

  return CGDataProviderRetainData(v2);
}

unint64_t upsample_provider_get_bytes_at_position(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 8)) {
    _CGHandleAssert("upsample_provider_get_bytes_at_position", 353, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "info->src_provider_uses_random_access == true", "", a6, a7, a8, vars0);
  }

  return upsample_provider_get_bytes_at_position_inner(a1, a2, a3, a4, 0, a6, a7, a8);
}

uint64_t cmap_bf_set_release(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    free(*(void **)(result + 8));
    free(*(void **)(v1 + 32));
    uint64_t v2 = *(void **)(v1 + 64);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    uint64_t v4 = *(void **)(v1 + 48);
    *(void *)(v1 + 48) = 0;
    if (v4) {
      operator delete(v4);
    }
    JUMPOUT(0x18532A2A0);
  }
  return result;
}

void cmap_bf_set_add_range(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unsigned __int16 *a5)
{
  if (!a1 || a4 > 0x400) {
    return;
  }
  if (*(void *)(a1 + 40) < a4) {
    *(void *)(a1 + 40) = a4;
  }
  unint64_t v11 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  unint64_t v12 = a4 + v10 + 1;
  if (v12 <= v11)
  {
    unint64_t v13 = *(_WORD **)(a1 + 32);
  }
  else
  {
    do
      unint64_t v11 = 2 * v11 + 10;
    while (v11 < v12);
    unint64_t v13 = malloc_type_realloc(*(void **)(a1 + 32), 2 * v11, 0x1000040BDFB0063uLL);
    if (!v13) {
      return;
    }
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 16) = v11;
    unint64_t v10 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v10 + 1;
  v13[v10] = a4;
  memcpy(&v13[v10 + 1], a5, 2 * a4);
  *(void *)(a1 + 24) += a4;
  if (*(_DWORD *)a1 > a3)
  {
    if (a2 > a3) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  char v14 = grow_code_map((void **)a1, a3);
  if (a2 <= a3 && (v14 & 1) != 0)
  {
LABEL_15:
    int v15 = 0;
    uint64_t v16 = *(void *)(a1 + 8);
    do
    {
      uint64_t v17 = (_DWORD *)(v16 + 8 * (a2 + v15));
      *uint64_t v17 = v10;
      v17[1] = v15++;
    }
    while (a2 + v15 <= a3);
  }
LABEL_17:
  if (a4 == 1 && a2 <= a3)
  {
    uint64_t v18 = (void *)(a1 + 64);
    unint64_t v19 = *(void *)(a1 + 56);
    while (1)
    {
      unint64_t v20 = *a5;
      if (v19)
      {
        uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          unint64_t v10 = *a5;
          if (v19 <= v20) {
            unint64_t v10 = v20 % v19;
          }
        }
        else
        {
          unint64_t v10 = (v19 - 1) & v20;
        }
        unint64_t v22 = *(void ***)(*(void *)(a1 + 48) + 8 * v10);
        if (v22)
        {
          unint64_t v23 = *v22;
          if (*v22)
          {
            do
            {
              unint64_t v24 = v23[1];
              if (v24 == v20)
              {
                if (*((unsigned __int16 *)v23 + 8) == v20) {
                  goto LABEL_92;
                }
              }
              else
              {
                if (v21.u32[0] > 1uLL)
                {
                  if (v24 >= v19) {
                    v24 %= v19;
                  }
                }
                else
                {
                  v24 &= v19 - 1;
                }
                if (v24 != v10) {
                  break;
                }
              }
              unint64_t v23 = (void *)*v23;
            }
            while (v23);
          }
        }
      }
      unint64_t v23 = operator new(0x18uLL);
      *unint64_t v23 = 0;
      v23[1] = v20;
      *((_WORD *)v23 + 8) = v20;
      *((_WORD *)v23 + 9) = 0;
      float v25 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
      float v26 = *(float *)(a1 + 80);
      if (!v19 || (float)(v26 * (float)v19) < v25) {
        break;
      }
LABEL_82:
      uint64_t v43 = *(void *)(a1 + 48);
      uint64_t v44 = *(void **)(v43 + 8 * v10);
      if (v44)
      {
        *unint64_t v23 = *v44;
      }
      else
      {
        *unint64_t v23 = *v18;
        *uint64_t v18 = v23;
        *(void *)(v43 + 8 * v10) = v18;
        if (!*v23) {
          goto LABEL_91;
        }
        unint64_t v45 = *(void *)(*v23 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v45 >= v19) {
            v45 %= v19;
          }
        }
        else
        {
          v45 &= v19 - 1;
        }
        uint64_t v44 = (void *)(*(void *)(a1 + 48) + 8 * v45);
      }
      *uint64_t v44 = v23;
LABEL_91:
      ++*(void *)(a1 + 72);
LABEL_92:
      *((_WORD *)v23 + 9) = a2++;
      if (a2 > a3) {
        return;
      }
    }
    BOOL v27 = (v19 & (v19 - 1)) != 0;
    if (v19 < 3) {
      BOOL v27 = 1;
    }
    unint64_t v28 = v27 | (2 * v19);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      int8x8_t prime = (int8x8_t)v29;
    }
    else {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v19 = *(void *)(a1 + 56);
    }
    if (*(void *)&prime > v19) {
      goto LABEL_48;
    }
    if (*(void *)&prime < v19)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v19 < 3 || (uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (*(void *)&prime <= v37) {
        int8x8_t prime = (int8x8_t)v37;
      }
      if (*(void *)&prime >= v19)
      {
        unint64_t v19 = *(void *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_48:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          uint64_t v31 = operator new(8 * *(void *)&prime);
          unint64_t v32 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v31;
          if (v32) {
            operator delete(v32);
          }
          uint64_t v33 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(void *)(*(void *)(a1 + 48) + 8 * v33++) = 0;
          while (*(void *)&prime != v33);
          unint64_t v34 = (void *)*v18;
          if (*v18)
          {
            unint64_t v35 = v34[1];
            uint8x8_t v36 = (uint8x8_t)vcnt_s8(prime);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(void *)&prime) {
                v35 %= *(void *)&prime;
              }
            }
            else
            {
              v35 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 48) + 8 * v35) = v18;
            unint64_t v40 = (void *)*v34;
            if (*v34)
            {
              do
              {
                unint64_t v41 = v40[1];
                if (v36.u32[0] > 1uLL)
                {
                  if (v41 >= *(void *)&prime) {
                    v41 %= *(void *)&prime;
                  }
                }
                else
                {
                  v41 &= *(void *)&prime - 1;
                }
                if (v41 != v35)
                {
                  uint64_t v42 = *(void *)(a1 + 48);
                  if (!*(void *)(v42 + 8 * v41))
                  {
                    *(void *)(v42 + 8 * v41) = v34;
                    goto LABEL_73;
                  }
                  *unint64_t v34 = *v40;
                  *unint64_t v40 = **(void **)(*(void *)(a1 + 48) + 8 * v41);
                  **(void **)(*(void *)(a1 + 48) + 8 * v41) = v40;
                  unint64_t v40 = v34;
                }
                unint64_t v41 = v35;
LABEL_73:
                unint64_t v34 = v40;
                unint64_t v40 = (void *)*v40;
                unint64_t v35 = v41;
              }
              while (v40);
            }
          }
          unint64_t v19 = (unint64_t)prime;
          goto LABEL_77;
        }
        int v46 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        if (v46) {
          operator delete(v46);
        }
        unint64_t v19 = 0;
        *(void *)(a1 + 56) = 0;
      }
    }
LABEL_77:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v19 <= v20) {
        unint64_t v10 = v20 % v19;
      }
      else {
        unint64_t v10 = v20;
      }
    }
    else
    {
      unint64_t v10 = (v19 - 1) & v20;
    }
    goto LABEL_82;
  }
}

void sub_184DBCCF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t grow_code_map(void **a1, unsigned int a2)
{
  LODWORD(v2) = *(_DWORD *)a1;
  if (*(_DWORD *)a1 > a2) {
    return 1;
  }
  do
    uint64_t v2 = (2 * v2 + 10);
  while (v2 <= a2);
  uint64_t result = (uint64_t)malloc_type_realloc(a1[1], 8 * v2, 0x100004000313F17uLL);
  if (result)
  {
    uint64_t v5 = *(unsigned int *)a1;
    if (v5 < v2)
    {
      uint64_t v6 = v2 - v5;
      uint64_t v7 = (void *)(result + 8 * v5);
      do
      {
        *v7++ = 0xFFFFFFFFLL;
        --v6;
      }
      while (v6);
    }
    a1[1] = (void *)result;
    *(_DWORD *)a1 = v2;
    return 1;
  }
  return result;
}

unint64_t cmap_bf_set_get_unichars(unint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    unint64_t v8 = result;
    if (*(_DWORD *)result <= a2) {
      return 0;
    }
    uint64_t v9 = *(void *)(result + 8);
    uint64_t v10 = *(unsigned int *)(v9 + 8 * a2);
    if (v10 == -1)
    {
      return 0;
    }
    else
    {
      unint64_t v11 = (_WORD *)(*(void *)(result + 32) + 2 * v10);
      uint64_t result = (unsigned __int16)*v11;
      if (a3 && *v11)
      {
        unsigned int v12 = *(_DWORD *)(v9 + 8 * a2 + 4);
        uint64_t v13 = result;
        do
        {
          unsigned int v14 = v12 + (unsigned __int16)v11[v13];
          unsigned int v12 = HIWORD(v14);
          *(_WORD *)(a3 - 2 + v13 * 2) = v14;
          --v13;
        }
        while (v13 * 2);
      }
      if (*(void *)(v8 + 40) < result) {
        _CGHandleAssert("cmap_bf_set_get_unichars", 242, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/CMaps/cmap-bf-set.cpp", "n <= set->max_unichar_length", "n (%lu) overflowed unichar length (%lu)", a6, a7, a8, result);
      }
    }
  }
  return result;
}

uint64_t CG::DisplayListXMLSerializer::serialize(CG::DisplayListXMLSerializer *this)
{
  CFBooleanRef propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(*((CFURLRef *)this + 2), (CFStringRef)*MEMORY[0x1E4F1D678], &propertyValueTypeRefPtr, 0))
  {
    int Value = CFBooleanGetValue(propertyValueTypeRefPtr);
    CFRelease(propertyValueTypeRefPtr);
    if (!Value)
    {
      CGPostError((uint64_t)"%s: The destination is not an existing directory", v3, v4, v5, v6, v7, v8, v9, (char)"virtual BOOL CG::DisplayListXMLSerializer::serialize()");
      return 0;
    }
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v11 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *((CFURLRef *)this + 2), @"Resources", 1u);
  *((void *)this + 5) = v11;
  if (!v11)
  {
    CGPostError((uint64_t)"%s: Failed to create URL for Resources directory", v12, v13, v14, v15, v16, v17, v18, (char)"virtual BOOL CG::DisplayListXMLSerializer::serialize()");
    return 0;
  }
  CFURLRef v19 = CFURLCreateCopyAppendingPathComponent(v10, *((CFURLRef *)this + 2), @"displayList.xml", 0);
  if (v19)
  {
    CFURLRef v27 = v19;
    *((void *)this + 6) = CGDataConsumerCreateWithURL(v19);
    CFRelease(v27);
  }
  if (!*((void *)this + 6))
  {
    CGPostError((uint64_t)"%s: Failed to create a data consumer from given URL", v20, v21, v22, v23, v24, v25, v26, (char)"virtual BOOL CG::DisplayListXMLSerializer::serialize()");
    return 0;
  }
  xmlTextWriterSetIndent(*((xmlTextWriterPtr *)this + 4), 2);
  xmlTextWriterSetIndentString(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)" ");
  if (xmlTextWriterStartDocument(*((xmlTextWriterPtr *)this + 4), 0, "UTF-8", 0) < 0) {
    return 0;
  }
  if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"dl") & 0x80000000) == 0)
  {
    v94[0] = 0;
    v94[1] = 0;
    int64_t v93 = (uint64_t *)v94;
    uint64_t v33 = *((void *)this + 1);
    long long v34 = *(_OWORD *)(v33 + 40);
    float64x2_t v102 = *(float64x2_t *)(v33 + 24);
    long long v103 = v34;
    CG::DisplayListXMLHelper::addRectToAttributes(&v93, "frame", &v102, v28, v29, v30, v31, v32);
    CG::DisplayListXMLHelper::addFormatToAttributes(&v93, "flags", "0x%.8X", v35, v36, v37, v38, v39, *(_DWORD *)(*((void *)this + 1) + 64));
    uint64_t v45 = *((void *)this + 1);
    if (*(void *)(v45 + 576) == *(void *)(v45 + 584))
    {
      int v46 = &CGRectNull;
      p_CGFloat height = &CGRectNull.size.height;
      p_CGFloat y = &CGRectNull.origin.y;
      p_CGSize size = &CGRectNull.size;
    }
    else
    {
      int v46 = (const CGRect *)(v45 + 72);
      p_CGFloat y = (CGFloat *)(v45 + 80);
      p_CGSize size = (CGSize *)(v45 + 88);
      p_CGFloat height = (CGFloat *)(v45 + 96);
    }
    uint64_t v51 = *(void *)p_height;
    float64_t v52 = *p_y;
    CGFloat width = p_size->width;
    v102.f64[0] = v46->origin.x;
    v102.f64[1] = v52;
    *(CGFloat *)&long long v103 = width;
    *((void *)&v103 + 1) = v51;
    CG::DisplayListXMLHelper::addRectToAttributes(&v93, "bounds", &v102, v40, v41, v42, v43, v44);
    CG::DisplayListXMLHelper::writeAttributes(&v93, *((xmlTextWriterPtr *)this + 4));
    v102.f64[0] = 0.0;
    *(void *)&v102.f64[1] = &v102;
    *(void *)&long long v103 = 0x4002000000;
    *((void *)&v103 + 1) = __Block_byref_object_copy__3858;
    int v104 = __Block_byref_object_dispose__3859;
    __p = 0;
    unsigned int v106 = 0;
    uint64_t v107 = 0;
    uint64_t v54 = *((void *)this + 1);
    uint64_t v96 = MEMORY[0x1E4F143A8];
    uint64_t v97 = 0x40000000;
    double v98 = ___ZN2CG24DisplayListXMLSerializer14writeResourcesEv_block_invoke;
    uint64_t v99 = &unk_1E52B2960;
    double v100 = &v102;
    uint64_t v101 = this;
    CG::DisplayList::enumerateAllResourcesWithBlock(v54, 0, (uint64_t)&v96);
    if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"resources") & 0x80000000) == 0)
    {
      uint64_t v55 = *(void *)(*(void *)&v102.f64[1] + 40);
      for (uint64_t i = *(void *)(*(void *)&v102.f64[1] + 48); v55 != i; v55 += 8)
      {
        char v57 = *(const void **)v55;
        switch(*(unsigned char *)(*(void *)v55 + 11))
        {
          case 0:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v58;
            v112[0] = &unk_1ED093C58;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 1:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v59;
            v112[0] = &unk_1ED093DF8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 2:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v60;
            v112[0] = &unk_1ED094348;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 3:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v61;
            v112[0] = &unk_1ED093C90;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 4:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v62;
            v112[0] = &unk_1ED093CC8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 5:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v63;
            v112[0] = &unk_1ED093E30;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 6:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v64;
            v112[0] = &unk_1ED093FA0;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 7:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v65;
            v112[0] = &unk_1ED093F68;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 8:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v66;
            v112[0] = &unk_1ED093E68;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 9:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v67;
            v112[0] = &unk_1ED0941A8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xA:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v68;
            v112[0] = &unk_1ED094138;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xB:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v69;
            v112[0] = &unk_1ED0943B0;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xC:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v70;
            v112[0] = &unk_1ED0942E0;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xD:
            uint64_t v113 = (void (*)(uint64_t, uint64_t *))this;
            uint64_t v114 = v71;
            v112[0] = &unk_1ED094170;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v112, *((xmlTextWriterPtr *)this + 4));
            break;
          default:
            continue;
        }
      }
      xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    }
    _Block_object_dispose(&v102, 8);
    if (__p)
    {
      unsigned int v106 = __p;
      operator delete(__p);
    }
    if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"entryStates") & 0x80000000) == 0)
    {
      CFArrayRef v72 = (void *)*((void *)this + 1);
      *(void *)&v102.f64[0] = MEMORY[0x1E4F143A8];
      *(void *)&v102.f64[1] = 0x40000000;
      *(void *)&long long v103 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke;
      *((void *)&v103 + 1) = &__block_descriptor_tmp_20_3847;
      int v104 = (void (*)(uint64_t))this;
      CGRect v73 = (void *)v72[60];
      uint64_t v74 = v72 + 61;
      if (v73 != v72 + 61)
      {
        do
        {
          ((void (*)(float64x2_t *, void))v103)(&v102, v73[4]);
          uint64_t v75 = (void *)v73[1];
          if (v75)
          {
            do
            {
              uint64_t v76 = v75;
              uint64_t v75 = (void *)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              uint64_t v76 = (void *)v73[2];
              BOOL v77 = *v76 == (void)v73;
              CGRect v73 = v76;
            }
            while (!v77);
          }
          CGRect v73 = v76;
        }
        while (v76 != v74);
        CFArrayRef v72 = (void *)*((void *)this + 1);
      }
      uint64_t v96 = MEMORY[0x1E4F143A8];
      uint64_t v97 = 0x40000000;
      double v98 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_2;
      uint64_t v99 = &__block_descriptor_tmp_22_3848;
      double v100 = (float64x2_t *)this;
      double v78 = (void *)v72[63];
      uint64_t v79 = v72 + 64;
      if (v78 != v72 + 64)
      {
        do
        {
          v98((uint64_t)&v96, (uint64_t *)v78[4]);
          CFStringRef v80 = (void *)v78[1];
          if (v80)
          {
            do
            {
              double v81 = v80;
              CFStringRef v80 = (void *)*v80;
            }
            while (v80);
          }
          else
          {
            do
            {
              double v81 = (void *)v78[2];
              BOOL v77 = *v81 == (void)v78;
              double v78 = v81;
            }
            while (!v77);
          }
          double v78 = v81;
        }
        while (v81 != v79);
        CFArrayRef v72 = (void *)*((void *)this + 1);
      }
      v112[0] = MEMORY[0x1E4F143A8];
      v112[1] = 0x40000000;
      uint64_t v113 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_3;
      uint64_t v114 = &__block_descriptor_tmp_24_3849;
      uint64_t v115 = this;
      double v82 = (void *)v72[66];
      uint64_t v83 = v72 + 67;
      if (v82 != v72 + 67)
      {
        do
        {
          v113((uint64_t)v112, (uint64_t *)v82[4]);
          uint64_t v84 = (void *)v82[1];
          if (v84)
          {
            do
            {
              double v85 = v84;
              uint64_t v84 = (void *)*v84;
            }
            while (v84);
          }
          else
          {
            do
            {
              double v85 = (void *)v82[2];
              BOOL v77 = *v85 == (void)v82;
              double v82 = v85;
            }
            while (!v77);
          }
          double v82 = v85;
        }
        while (v85 != v83);
        CFArrayRef v72 = (void *)*((void *)this + 1);
      }
      v108[0] = MEMORY[0x1E4F143A8];
      v108[1] = 0x40000000;
      int8x16_t v109 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_4;
      uint64_t v110 = &__block_descriptor_tmp_26_3850;
      unsigned int v111 = this;
      uint64_t v86 = (void *)v72[69];
      __double2 v87 = v72 + 70;
      if (v86 != v72 + 70)
      {
        do
        {
          v109((uint64_t)v108, (uint64_t *)v86[4]);
          double v88 = (void *)v86[1];
          if (v88)
          {
            do
            {
              char v89 = v88;
              double v88 = (void *)*v88;
            }
            while (v88);
          }
          else
          {
            do
            {
              char v89 = (void *)v86[2];
              BOOL v77 = *v89 == (void)v86;
              uint64_t v86 = v89;
            }
            while (!v77);
          }
          uint64_t v86 = v89;
        }
        while (v89 != v87);
      }
      xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    }
    if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"entries") & 0x80000000) == 0)
    {
      uint64_t v90 = *((void *)this + 1);
      *(void *)&v102.f64[0] = MEMORY[0x1E4F143A8];
      *(void *)&v102.f64[1] = 0x40000000;
      *(void *)&long long v103 = ___ZN2CG24DisplayListXMLSerializer12writeEntriesEv_block_invoke;
      *((void *)&v103 + 1) = &__block_descriptor_tmp_29_3830;
      int v104 = (void (*)(uint64_t))this;
      CG::DisplayList::enumerateEntriesWithBlock(v90, 0, (uint64_t)&v102);
      xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    }
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v94[0]);
  }
  if (xmlTextWriterEndDocument(*((xmlTextWriterPtr *)this + 4)) < 0) {
    return 0;
  }
  uint64_t result = CGDataConsumerPutBytes(*((void *)this + 6), **((void **)this + 3), *(unsigned int *)(*((void *)this + 3) + 8));
  if (result)
  {
    uint64_t v91 = *((void *)this + 6);
    if (v91 && !*(unsigned char *)(v91 + 56))
    {
      CFRange v92 = *(void (**)(void))(v91 + 80);
      if (v92) {
        v92(*(void *)(v91 + 16));
      }
    }
    return 1;
  }
  return result;
}

void sub_184DBDB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a12);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:fe180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:fe180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void ___ZN2CG24DisplayListXMLSerializer12writeEntriesEv_block_invoke(uint64_t a1, void *lpsrc)
{
  uint64_t v2 = *(void *)(a1 + 32);
  switch(*((unsigned char *)lpsrc + 8))
  {
    case 0:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED0939E8;
      goto LABEL_11;
    case 1:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED093B28;
      goto LABEL_11;
    case 2:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED093920;
      goto LABEL_11;
    case 3:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED093A58;
      goto LABEL_11;
    case 4:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED093A20;
      goto LABEL_11;
    case 5:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED093C20;
      goto LABEL_11;
    case 6:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED093DC0;
      goto LABEL_11;
    case 7:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED0940C8;
      goto LABEL_11;
    case 8:
      uint64_t v6 = v2;
      uint64_t v4 = &unk_1ED093AF0;
LABEL_11:
      uint64_t v5 = v4;
      uint64_t v7 = v3;
      DisplayListXMLWriterEntry::write((DisplayListXMLWriterEntry *)&v5, *(xmlTextWriterPtr *)(v2 + 32));
      break;
    default:
      return;
  }
}

void DisplayListXMLWriterEntry::write(DisplayListXMLWriterEntry *this, xmlTextWriterPtr writer)
{
  *((void *)this + 2) = writer;
  if ((xmlTextWriterStartElement(writer, (const xmlChar *)"entry") & 0x80000000) == 0)
  {
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v3 = v4;
    (*(void (**)(DisplayListXMLWriterEntry *, void ***))(*(void *)this + 16))(this, &v3);
    CG::DisplayListXMLHelper::writeAttributes(&v3, *((xmlTextWriterPtr *)this + 2));
    (*(void (**)(DisplayListXMLWriterEntry *))(*(void *)this + 24))(this);
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 2));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4[0]);
  }
}

void sub_184DBE1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t DisplayListXMLWriterEntryAction::getEntry(DisplayListXMLWriterEntryAction *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryAction::writeChildElements(DisplayListXMLWriterEntryAction *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryAction::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  return 1;
}

void DisplayListXMLWriterEntry::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  int v5 = *(_DWORD *)(v4 + 8);
  if (v5 > 8u) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = off_1E52CEC88[(char)v5];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", v6);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "flags", "0x%.6X", v7, v8, v9, v10, v11, BYTE1(*(_DWORD *)(v4 + 8)));
  float64x2_t v12 = *(float64x2_t *)(v4 + 32);
  v52[0] = *(float64x2_t *)(v4 + 16);
  v52[1] = v12;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "boundingBox", v52, v13, v14, v15, v16, v17);
  unint64_t v24 = *(void *)(v4 + 48);
  if (v24)
  {
    char ElementIDForEntryState = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v24, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "drawState", "%llu", v26, v27, v28, v29, v30, ElementIDForEntryState);
  }
  unint64_t v31 = *(void *)(v4 + 56);
  if (v31)
  {
    char v32 = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v31, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "fillState", "%llu", v33, v34, v35, v36, v37, v32);
  }
  unint64_t v38 = *(void *)(v4 + 64);
  if (v38)
  {
    char v39 = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v38, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "strokeState", "%llu", v40, v41, v42, v43, v44, v39);
  }
  unint64_t v45 = *(void *)(v4 + 72);
  if (v45)
  {
    char v46 = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v45, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "patternState", "%llu", v47, v48, v49, v50, v51, v46);
  }
}

uint64_t CG::DisplayListXMLSerializer::getElementIDForEntryState(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void **)(a1 + 96);
  uint64_t v8 = (void *)(a1 + 96);
  uint64_t v9 = v10;
  if (v10)
  {
    uint64_t v11 = v8;
    do
    {
      unint64_t v12 = v9[4];
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = v9 + 1;
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      uint64_t v9 = (void *)*v14;
    }
    while (*v14);
    if (v11 != v8 && v11[4] <= a2) {
      return v11[5];
    }
  }
  CGPostError((uint64_t)"%s: Failed to find ID of entryState: %p", a2, a3, a4, a5, a6, a7, a8, (char)"DisplayListElementID CG::DisplayListXMLSerializer::getElementIDForEntryState(const DisplayListEntryState *)");
  return -1;
}

void DisplayListXMLWriterEntryAction::~DisplayListXMLWriterEntryAction(DisplayListXMLWriterEntryAction *this)
{
}

uint64_t DisplayListXMLWriterEntryDisplayList::getEntry(DisplayListXMLWriterEntryDisplayList *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryDisplayList::writeChildElements(DisplayListXMLWriterEntryDisplayList *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryDisplayList::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "displayList", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 24) + 136);
  if (v18 > 4) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = off_1E52CE318[v18];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationQuality", v19);
  uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 24) + 140);
  if (v20 > 4) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = off_1E52CE178[v20];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "renderingIntent", v21);
  return 1;
}

uint64_t CG::DisplayListXMLSerializer::getElementIDForResource(CG::DisplayListXMLSerializer *this, const CG::DisplayListResource *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)*((void *)this + 9);
  uint64_t v8 = (char *)this + 72;
  uint64_t v9 = v10;
  if (v10)
  {
    uint64_t v11 = v8;
    do
    {
      unint64_t v12 = v9[4];
      BOOL v13 = v12 >= (unint64_t)a2;
      if (v12 >= (unint64_t)a2) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = v9 + 1;
      }
      if (v13) {
        uint64_t v11 = (char *)v9;
      }
      uint64_t v9 = (void *)*v14;
    }
    while (*v14);
    if (v11 != v8 && *((void *)v11 + 4) <= (unint64_t)a2) {
      return *((void *)v11 + 5);
    }
  }
  CGPostError((uint64_t)"%s: Failed to find ID of resource: %p", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"DisplayListElementID CG::DisplayListXMLSerializer::getElementIDForResource(const DisplayListResource *)");
  return -1;
}

void DisplayListXMLWriterEntryDisplayList::~DisplayListXMLWriterEntryDisplayList(DisplayListXMLWriterEntryDisplayList *this)
{
}

uint64_t DisplayListXMLWriterEntryGradient::getEntry(DisplayListXMLWriterEntryGradient *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryGradient::writeChildElements(DisplayListXMLWriterEntryGradient *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryGradient::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "gradient", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "options", "%d", v18, v19, v20, v21, v22, *(_DWORD *)(*(void *)(a1 + 24) + 140));
  int v30 = *(_DWORD *)(*(void *)(a1 + 24) + 136);
  switch(v30)
  {
    case 3:
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "gradientType", "conic");
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "center", "{%.17lg, %.17lg}", v43, v44, v45, v46, v47, *(_OWORD *)(*(void *)(a1 + 24) + 224));
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "angle", "%g", v48, v49, v50, v51, v52, *(void *)(*(void *)(a1 + 24) + 240));
      break;
    case 2:
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "gradientType", "radial");
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "startCenter", "{%.17lg, %.17lg}", v53, v54, v55, v56, v57, *(_OWORD *)(*(void *)(a1 + 24) + 176));
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "endCenter", "{%.17lg, %.17lg}", v58, v59, v60, v61, v62, *(_OWORD *)(*(void *)(a1 + 24) + 192));
      unint64_t v31 = "%g";
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "startRadius", "%g", v63, v64, v65, v66, v67, *(void *)(*(void *)(a1 + 24) + 208));
      *(void *)&long long v69 = *(void *)(*(void *)(a1 + 24) + 216);
      uint64_t v42 = "endRadius";
      goto LABEL_9;
    case 1:
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "gradientType", "linear");
      unint64_t v31 = "{%.17lg, %.17lg}";
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "startPt", "{%.17lg, %.17lg}", v32, v33, v34, v35, v36, *(_OWORD *)(*(void *)(a1 + 24) + 144));
      long long v69 = *(_OWORD *)(*(void *)(a1 + 24) + 160);
      uint64_t v42 = "endPt";
LABEL_9:
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, v42, v31, v37, v38, v39, v40, v41, v69);
      return 1;
    default:
      CGPostError((uint64_t)"%s: Invalid gradient type", v23, v24, v25, v26, v27, v28, v29, (char)"virtual BOOL DisplayListXMLWriterEntryGradient::writeAttributes(DLXMLAttributes &)");
      break;
  }
  return 1;
}

void DisplayListXMLWriterEntryGradient::~DisplayListXMLWriterEntryGradient(DisplayListXMLWriterEntryGradient *this)
{
}

uint64_t DisplayListXMLWriterEntryShading::getEntry(DisplayListXMLWriterEntryShading *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryShading::writeChildElements(DisplayListXMLWriterEntryShading *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryShading::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "shading", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 24) + 136);
  if (v18 > 4) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = off_1E52CE318[v18];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationQuality", v19);
  uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 24) + 140);
  if (v20 > 4) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = off_1E52CE178[v20];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "renderingIntent", v21);
  return 1;
}

void DisplayListXMLWriterEntryShading::~DisplayListXMLWriterEntryShading(DisplayListXMLWriterEntryShading *this)
{
}

uint64_t DisplayListXMLWriterEntryLines::getEntry(DisplayListXMLWriterEntryLines *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterEntryLines::writeChildElements(xmlTextWriterPtr *this)
{
  int started = xmlTextWriterStartElement(this[2], (const xmlChar *)"lines");
  if ((started & 0x80000000) == 0)
  {
    if (*((void *)this[3] + 17))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        if ((xmlTextWriterStartElement(this[2], (const xmlChar *)"line") & 0x80000000) == 0)
        {
          uint64_t v5 = (double *)(*((void *)this[3] + 16) + v3);
          xmlTextWriterWriteFormatRaw(this[2], "{%.17lg, %.17lg}", *v5, v5[1]);
          xmlTextWriterEndElement(this[2]);
        }
        ++v4;
        v3 += 16;
      }
      while (v4 < *((void *)this[3] + 17));
    }
    xmlTextWriterEndElement(this[2]);
  }
  return started >= 0;
}

uint64_t DisplayListXMLWriterEntryLines::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes(a1, a2);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v4, v5, v6, v7, v8, *(_OWORD *)(a1[3] + 80));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v9, v10, v11, v12, v13, *(void *)(a1[3] + 136));
  return 1;
}

void DisplayListXMLWriterEntryLines::~DisplayListXMLWriterEntryLines(DisplayListXMLWriterEntryLines *this)
{
}

uint64_t DisplayListXMLWriterEntryRects::getEntry(DisplayListXMLWriterEntryRects *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterEntryRects::writeChildElements(xmlTextWriterPtr *this)
{
  int started = xmlTextWriterStartElement(this[2], (const xmlChar *)"rects");
  if ((started & 0x80000000) == 0)
  {
    if (*((void *)this[3] + 18))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        if ((xmlTextWriterStartElement(this[2], (const xmlChar *)"rect") & 0x80000000) == 0)
        {
          uint64_t v5 = (double *)(*((void *)this[3] + 17) + v3);
          xmlTextWriterWriteFormatRaw(this[2], "{%.17lg, %.17lg}, {%.17lg, %.17lg}", *v5, v5[1], v5[2], v5[3]);
          xmlTextWriterEndElement(this[2]);
        }
        ++v4;
        v3 += 32;
      }
      while (v4 < *((void *)this[3] + 18));
    }
    xmlTextWriterEndElement(this[2]);
  }
  return started >= 0;
}

uint64_t DisplayListXMLWriterEntryRects::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1[3] + 80);
  if (v4 > 4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = off_1E52CE280[v4];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "drawingMode", v5);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v6, v7, v8, v9, v10, *(_OWORD *)(a1[3] + 88));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v11, v12, v13, v14, v15, *(void *)(a1[3] + 144));
  return 1;
}

void DisplayListXMLWriterEntryRects::~DisplayListXMLWriterEntryRects(DisplayListXMLWriterEntryRects *this)
{
}

uint64_t DisplayListXMLWriterEntryPath::getEntry(DisplayListXMLWriterEntryPath *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterEntryPath::writeChildElements(xmlTextWriterPtr *this)
{
  if (xmlTextWriterStartElement(this[2], (const xmlChar *)"cgpath") < 0) {
    return 0;
  }
  BOOL v3 = CG::DisplayListXMLHelper::writeCGPath(*((CG::DisplayListXMLHelper **)this[3] + 11), this[2], v2);
  xmlTextWriterEndElement(this[2]);
  return v3;
}

uint64_t DisplayListXMLWriterEntryPath::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1[3] + 80);
  if (v4 > 4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = off_1E52CE280[v4];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "drawingMode", v5);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "direct", *(unsigned __int8 *)(a1[3] + 84));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v6, v7, v8, v9, v10, *(_OWORD *)(a1[3] + 96));
  return 1;
}

void DisplayListXMLWriterEntryPath::~DisplayListXMLWriterEntryPath(DisplayListXMLWriterEntryPath *this)
{
}

uint64_t DisplayListXMLWriterEntryGlyphs::getEntry(DisplayListXMLWriterEntryGlyphs *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterEntryGlyphs::writeChildElements(xmlTextWriterPtr *this)
{
  int started = xmlTextWriterStartElement(this[2], (const xmlChar *)"glyphs");
  if ((started & 0x80000000) == 0)
  {
    if (*((void *)this[3] + 31))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        if ((xmlTextWriterStartElement(this[2], (const xmlChar *)"glyph") & 0x80000000) == 0)
        {
          v17[0] = 0;
          v17[1] = 0;
          uint64_t v16 = (uint64_t *)v17;
          CG::DisplayListXMLHelper::addFormatToAttributes(&v16, "position", "{%.17lg, %.17lg}", v5, v6, v7, v8, v9, *(void *)(*((void *)this[3] + 30) + v3));
          CG::DisplayListXMLHelper::addFormatToAttributes(&v16, "glyph", "%d", v10, v11, v12, v13, v14, *(_WORD *)(*((void *)this[3] + 29) + 2 * v4));
          CG::DisplayListXMLHelper::writeAttributes(&v16, this[2]);
          xmlTextWriterEndElement(this[2]);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17[0]);
        }
        ++v4;
        v3 += 16;
      }
      while (v4 < *((void *)this[3] + 31));
    }
    xmlTextWriterEndElement(this[2]);
  }
  return started >= 0;
}

void sub_184DBEED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t DisplayListXMLWriterEntryGlyphs::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "font", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ftm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v18, v19, v20, v21, v22, *(_OWORD *)(*(void *)(a1 + 24) + 136));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "scale", "%.17lg", v23, v24, v25, v26, v27, *(void *)(*(void *)(a1 + 24) + 184));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "dilation", "{%.17lg, %.17lg}", v28, v29, v30, v31, v32, *(_OWORD *)(*(void *)(a1 + 24) + 192));
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v40 = *(const CG::DisplayListResource **)(v39 + 208);
  if (v40)
  {
    char v41 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v40, v33, v34, v35, v36, v37, v38);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "fontSmoothingBGColor", "%llu", v42, v43, v44, v45, v46, v41);
    uint64_t v39 = *(void *)(a1 + 24);
  }
  uint64_t v47 = *(unsigned int *)(v39 + 216);
  if (v47 > 7) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = off_1E52CE2A8[v47];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "textDrawingMode", v48);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "fontRenderingStyle", "0x%.8X", v49, v50, v51, v52, v53, *(_DWORD *)(*(void *)(a1 + 24) + 220));
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "shouldDrawBMRuns", *(unsigned __int8 *)(*(void *)(a1 + 24) + 224));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v54, v55, v56, v57, v58, *(void *)(*(void *)(a1 + 24) + 248));
  return 1;
}

void DisplayListXMLWriterEntryGlyphs::~DisplayListXMLWriterEntryGlyphs(DisplayListXMLWriterEntryGlyphs *this)
{
}

uint64_t DisplayListXMLWriterEntryImage::getEntry(DisplayListXMLWriterEntryImage *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntry::writeChildElements(DisplayListXMLWriterEntry *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryImage::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "image", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 24) + 136);
  if (v18 > 4) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = off_1E52CE318[v18];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationQuality", v19);
  uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 24) + 140);
  if (v20 > 4) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = off_1E52CE318[v20];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationMin", v21);
  uint64_t v22 = *(unsigned int *)(*(void *)(a1 + 24) + 144);
  if (v22 > 4) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = off_1E52CE318[v22];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationMax", v23);
  uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 24) + 148);
  if (v24 > 4) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = off_1E52CE178[v24];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "renderingIntent", v25);
  return 1;
}

void DisplayListXMLWriterEntryImage::~DisplayListXMLWriterEntryImage(DisplayListXMLWriterEntryImage *this)
{
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(uint64_t **)(v3 + 56);
  *(void *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&unk_1ED094270;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(uint64_t **)(v3 + 56);
  *(void *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&unk_1ED093ED0;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(uint64_t **)(v3 + 56);
  *(void *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&unk_1ED094100;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(uint64_t **)(v3 + 56);
  *(void *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&unk_1ED0942A8;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

uint64_t **std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    char *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void DisplayListXMLWriterEntryState::write(DisplayListXMLWriterEntryState *this, xmlTextWriterPtr writer)
{
  *((void *)this + 2) = writer;
  if ((xmlTextWriterStartElement(writer, (const xmlChar *)"entryState") & 0x80000000) == 0)
  {
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v3 = v4;
    (*(void (**)(DisplayListXMLWriterEntryState *, void ***))(*(void *)this + 16))(this, &v3);
    CG::DisplayListXMLHelper::writeAttributes(&v3, *((xmlTextWriterPtr *)this + 2));
    (*(void (**)(DisplayListXMLWriterEntryState *))(*(void *)this + 24))(this);
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 2));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4[0]);
  }
}

void sub_184DBF600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t DisplayListXMLWriterEntryStatePattern::getEntryState(DisplayListXMLWriterEntryStatePattern *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryState::writeChildElements(DisplayListXMLWriterEntryState *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryStatePattern::writeAttributes(void *a1, uint64_t **a2)
{
  DisplayListXMLWriterEntryState::writeAttributes(a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "pattern");
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "baseCTM", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v4, v5, v6, v7, v8, *(_OWORD *)(a1[3] + 8));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "phase", "{%.17lg, %.17lg}", v9, v10, v11, v12, v13, *(_OWORD *)(a1[3] + 56));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "smoothness", "%.17lg", v14, v15, v16, v17, v18, *(void *)(a1[3] + 72));
  return 1;
}

void DisplayListXMLWriterEntryState::writeAttributes(void *a1, uint64_t **a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  char ElementIDForEntryState = CG::DisplayListXMLSerializer::getElementIDForEntryState(v3, v4, v5, v6, v7, v8, v9, v10);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "_id", "%llu", v12, v13, v14, v15, v16, ElementIDForEntryState);
}

void DisplayListXMLWriterEntryStatePattern::~DisplayListXMLWriterEntryStatePattern(DisplayListXMLWriterEntryStatePattern *this)
{
}

uint64_t DisplayListXMLWriterEntryStateStroke::getEntryState(DisplayListXMLWriterEntryStateStroke *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryStateStroke::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntryState::writeAttributes((void *)a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "stroke");
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(const CG::DisplayListResource **)(v10 + 8);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "color", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "width", "%.17lg", v5, v6, v7, v8, v9, *(void *)(v10 + 16));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "thresh", "%.17lg", v18, v19, v20, v21, v22, *(void *)(*(void *)(a1 + 24) + 24));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "limit", "%.17lg", v23, v24, v25, v26, v27, *(void *)(*(void *)(a1 + 24) + 32));
  uint64_t v34 = *(void *)(a1 + 24);
  uint64_t v35 = *(const CG::DisplayListResource **)(v34 + 40);
  if (v35)
  {
    char v36 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v35, v28, v29, v30, v31, v32, v33);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "dash", "%llu", v37, v38, v39, v40, v41, v36);
    uint64_t v34 = *(void *)(a1 + 24);
  }
  __int16 v42 = *(_WORD *)(v34 + 48) << 8;
  if ((v42 & 0xFF00u) > 0x2FF) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = off_1E52CE2E8[v42 >> 8];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "cap", v43);
  unsigned int v44 = *(unsigned __int16 *)(*(void *)(a1 + 24) + 48);
  if (v44 > 0x2FF) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = off_1E52CE300[(__int16)v44 >> 8];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "join", v45);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "adjust", *(unsigned __int8 *)(*(void *)(a1 + 24) + 50));
  return 1;
}

void DisplayListXMLWriterEntryStateStroke::~DisplayListXMLWriterEntryStateStroke(DisplayListXMLWriterEntryStateStroke *this)
{
}

uint64_t DisplayListXMLWriterEntryStateFill::getEntryState(DisplayListXMLWriterEntryStateFill *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryStateFill::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntryState::writeAttributes((void *)a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "fill");
  uint64_t v10 = *(const CG::DisplayListResource **)(*(void *)(a1 + 24) + 8);
  if (v10)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v10, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "color", "%llu", v12, v13, v14, v15, v16, ElementIDForResource);
  }
  return 1;
}

void DisplayListXMLWriterEntryStateFill::~DisplayListXMLWriterEntryStateFill(DisplayListXMLWriterEntryStateFill *this)
{
}

uint64_t DisplayListXMLWriterEntryStateDrawing::getEntryState(DisplayListXMLWriterEntryStateDrawing *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterEntryStateDrawing::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterEntryState::writeAttributes((void *)a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "drawing");
  uint64_t v10 = *(void **)(a1 + 24);
  uint64_t v11 = (const CG::DisplayListResource *)v10[1];
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "clip", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void **)(a1 + 24);
  }
  uint64_t v18 = (const CG::DisplayListResource *)v10[2];
  if (v18)
  {
    char v19 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v18, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "softMask", "%llu", v20, v21, v22, v23, v24, v19);
    uint64_t v10 = *(void **)(a1 + 24);
  }
  uint64_t v25 = (const CG::DisplayListResource *)v10[3];
  if (v25)
  {
    char v26 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v25, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "style", "%llu", v27, v28, v29, v30, v31, v26);
    uint64_t v10 = *(void **)(a1 + 24);
  }
  uint64_t v32 = (const CG::DisplayListResource *)v10[4];
  if (v32)
  {
    char v33 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v32, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "BG", "%llu", v34, v35, v36, v37, v38, v33);
    uint64_t v10 = *(void **)(a1 + 24);
  }
  uint64_t v39 = (const CG::DisplayListResource *)v10[5];
  if (v39)
  {
    char v40 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v39, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "UCR", "%llu", v41, v42, v43, v44, v45, v40);
    uint64_t v10 = *(void **)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "flatness", "%.17lg", v5, v6, v7, v8, v9, v10[6]);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "alpha", "%.17lg", v46, v47, v48, v49, v50, *(void *)(*(void *)(a1 + 24) + 56));
  unsigned int v51 = *(_DWORD *)(*(void *)(a1 + 24) + 96);
  if (((v51 >> 2) & 0xF) > 6) {
    uint64_t v52 = "Unknown";
  }
  else {
    uint64_t v52 = off_1E52CE1A0[(int)(v51 << 26) >> 26];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "compositeOp", v52);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "antialias", (*(_DWORD *)(*(void *)(a1 + 24) + 96) >> 6) & 1);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "alphaIsShape", (*(_DWORD *)(*(void *)(a1 + 24) + 96) >> 7) & 1);
  unsigned int v53 = *(_DWORD *)(*(void *)(a1 + 24) + 96);
  if (((v53 >> 8) & 0x3F) > 4) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = off_1E52CE178[(int)(v53 << 18) >> 26];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "intent", v54);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "fillOverprint", (*(_DWORD *)(*(void *)(a1 + 24) + 96) >> 14) & 1);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "strokeOverprint", (*(_DWORD *)(*(void *)(a1 + 24) + 96) >> 15) & 1);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "overprintMode", "%d", v55, v56, v57, v58, v59, *(_DWORD *)(*(void *)(a1 + 24) + 100));
  return 1;
}

void DisplayListXMLWriterEntryStateDrawing::~DisplayListXMLWriterEntryStateDrawing(DisplayListXMLWriterEntryStateDrawing *this)
{
}

__n128 __Block_byref_object_copy__3858(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3859(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN2CG24DisplayListXMLSerializer14writeResourcesEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v41 = a2;
  (*(void (**)(void **__return_ptr, uint64_t *))(*a2 + 16))(&__p, a2);
  uint64_t v5 = (uint64_t **)__p;
  uint64_t v6 = v40;
  if (__p != v40)
  {
    uint64_t v7 = (void *)(v4 + 72);
    do
    {
      uint64_t v8 = *v5;
      uint64_t v38 = *v5;
      uint64_t v9 = (void *)*v7;
      if (!*v7) {
        goto LABEL_14;
      }
      uint64_t v10 = (void *)(v4 + 72);
      do
      {
        unint64_t v11 = v9[4];
        BOOL v12 = v11 >= (unint64_t)v8;
        if (v11 >= (unint64_t)v8) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = v9 + 1;
        }
        if (v12) {
          uint64_t v10 = v9;
        }
        uint64_t v9 = (void *)*v13;
      }
      while (*v13);
      if (v10 == v7 || (unint64_t)v8 < v10[4])
      {
LABEL_14:
        uint64_t v14 = *(uint64_t **)(v4 + 56);
        *(void *)(v4 + 56) = (char *)v14 + 1;
        uint64_t v15 = std::__tree<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::__map_value_compare<CG::DisplayListResource const*,std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::less<CG::DisplayListResource const*>,true>,std::allocator<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>>>::__emplace_unique_key_args<CG::DisplayListResource const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListResource const* const&>,std::tuple<>>((uint64_t **)(v4 + 64), (unint64_t)v8, &v38);
        v15[5] = v14;
        *((unsigned char *)v15 + 48) = 0;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v16 = *(void **)(v4 + 72);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = (void *)(v4 + 72);
  do
  {
    unint64_t v18 = v16[4];
    BOOL v19 = v18 >= (unint64_t)a2;
    if (v18 >= (unint64_t)a2) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = v16 + 1;
    }
    if (v19) {
      uint64_t v17 = v16;
    }
    uint64_t v16 = (void *)*v20;
  }
  while (*v20);
  if (v17 == (void *)(v4 + 72) || v17[4] > (unint64_t)a2)
  {
LABEL_27:
    uint64_t v21 = *(uint64_t **)(v4 + 56);
    *(void *)(v4 + 56) = (char *)v21 + 1;
    uint64_t v22 = std::__tree<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::__map_value_compare<CG::DisplayListResource const*,std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::less<CG::DisplayListResource const*>,true>,std::allocator<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>>>::__emplace_unique_key_args<CG::DisplayListResource const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListResource const* const&>,std::tuple<>>((uint64_t **)(v4 + 64), (unint64_t)a2, &v41);
    v22[5] = v21;
    *((unsigned char *)v22 + 48) = 0;
  }
  if (__p)
  {
    char v40 = (uint64_t **)__p;
    operator delete(__p);
  }
  uint64_t v23 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v25 = (uint64_t **)v23[6];
  unint64_t v24 = v23[7];
  if ((unint64_t)v25 >= v24)
  {
    uint64_t v27 = v23[5];
    uint64_t v28 = ((uint64_t)v25 - v27) >> 3;
    if ((unint64_t)(v28 + 1) >> 61) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v29 = v24 - v27;
    uint64_t v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
      uint64_t v30 = v28 + 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31) {
      unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v31);
    }
    else {
      uint64_t v32 = 0;
    }
    char v33 = (uint64_t **)(v31 + 8 * v28);
    unint64_t v34 = v31 + 8 * v32;
    *char v33 = a2;
    char v26 = v33 + 1;
    uint64_t v36 = (char *)v23[5];
    uint64_t v35 = (char *)v23[6];
    if (v35 != v36)
    {
      do
      {
        uint64_t v37 = (uint64_t *)*((void *)v35 - 1);
        v35 -= 8;
        *--char v33 = v37;
      }
      while (v35 != v36);
      uint64_t v35 = (char *)v23[5];
    }
    v23[5] = v33;
    v23[6] = v26;
    v23[7] = v34;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *uint64_t v25 = a2;
    char v26 = v25 + 1;
  }
  v23[6] = v26;
}

void sub_184DBFEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DisplayListXMLWriterResource::write(DisplayListXMLWriterResource *this, xmlTextWriterPtr writer)
{
  *((void *)this + 1) = writer;
  if ((xmlTextWriterStartElement(writer, (const xmlChar *)"resource") & 0x80000000) == 0)
  {
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v3 = v4;
    (*(void (**)(DisplayListXMLWriterResource *, void ***))(*(void *)this + 16))(this, &v3);
    CG::DisplayListXMLHelper::writeAttributes(&v3, *((xmlTextWriterPtr *)this + 1));
    (*(void (**)(DisplayListXMLWriterResource *))(*(void *)this + 24))(this);
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4[0]);
  }
}

void sub_184DBFFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t DisplayListXMLWriterResourceCFTypeRef::getResource(DisplayListXMLWriterResourceCFTypeRef *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterResource::writeChildElements(DisplayListXMLWriterResource *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterResource::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  uint64_t v4 = (char *)(*((uint64_t (**)(CG::DisplayListXMLSerializer **))*a1 + 4))(a1);
  char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], (const CG::DisplayListResource *)v4, v5, v6, v7, v8, v9, v10);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "_id", "%llu", v12, v13, v14, v15, v16, ElementIDForResource);
  int v17 = *((_DWORD *)v4 + 2);
  if (v17 >> 25 > 6) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = off_1E52CECD0[v17 >> 24];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", v18);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "flags", "0x%.6X", v19, v20, v21, v22, v23, v4[8]);
  return 1;
}

void DisplayListXMLWriterResourceCFTypeRef::~DisplayListXMLWriterResourceCFTypeRef(DisplayListXMLWriterResourceCFTypeRef *this)
{
}

uint64_t DisplayListXMLWriterResourceDisplayList::getResource(DisplayListXMLWriterResourceDisplayList *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterResourceDisplayList::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v5, v6, v7, v8, v9, v10);
  CFStringRef v12 = CFStringCreateWithFormat(v4, 0, @"DisplayList-%llu.dlist", ElementIDForResource);
  if (v12)
  {
    CFStringRef v13 = v12;
    ResourcesDirectorCGFloat y = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
    if (ResourcesDirectory)
    {
      CFURLRef v15 = CFURLCreateCopyAppendingPathComponent(v4, ResourcesDirectory, v13, 0);
      if (v15)
      {
        CFURLRef v17 = v15;
        uint64_t v18 = *((void *)a1[3] + 2);
        if (v18)
        {
          CFURLRef v19 = CG::DisplayList::serializeToURL((CG::DisplayList *)(v18 + 16), v15, v16);
          if (v19)
          {
            CFURLRef v20 = v19;
            CFStringRef PathComponent = CFURLCopyLastPathComponent(v19);
            if (PathComponent)
            {
              CFStringGetCString(PathComponent, buffer, 1024, 0x8000100u);
              CG::DisplayListXMLHelper::addStringToAttributes(a2, "fileName", buffer);
            }
            CFRelease(v20);
          }
        }
        CFRelease(v17);
      }
    }
    CFRelease(v13);
  }
  return 1;
}

uint64_t CG::DisplayListXMLSerializer::getResourcesDirectory(CG::DisplayListXMLSerializer *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (CFURLGetFileSystemRepresentation(*((CFURLRef *)this + 5), 1u, buffer, 1025)
    && (!mkdir((const char *)buffer, 0x1FFu) || *__error() == 17))
  {
    return *((void *)this + 5);
  }
  CGPostError((uint64_t)"%s: Failed to create Resources directory", v2, v3, v4, v5, v6, v7, v8, (char)"CFURLRef CG::DisplayListXMLSerializer::getResourcesDirectory(BOOL)");
  return 0;
}

void DisplayListXMLWriterResourceDisplayList::~DisplayListXMLWriterResourceDisplayList(DisplayListXMLWriterResourceDisplayList *this)
{
}

uint64_t DisplayListXMLWriterResourceFunction::getResource(DisplayListXMLWriterResourceFunction *this)
{
  return *((void *)this + 3);
}

void DisplayListXMLWriterResourceFunction::~DisplayListXMLWriterResourceFunction(DisplayListXMLWriterResourceFunction *this)
{
}

uint64_t DisplayListXMLWriterResourceSoftMask::getResource(DisplayListXMLWriterResourceSoftMask *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterResourceSoftMask::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 16);
  p_CGFloat height = &CGRectNull.size.height;
  p_CGFloat y = &CGRectNull.origin.y;
  p_CGSize size = &CGRectNull.size;
  CFStringRef v13 = (const CGRect *)(v9 + 72);
  if (v9)
  {
    p_CGSize size = (CGSize *)(v9 + 88);
    p_CGFloat y = (CGFloat *)(v9 + 80);
    p_CGFloat height = (CGFloat *)(v9 + 96);
  }
  else
  {
    CFStringRef v13 = &CGRectNull;
  }
  uint64_t v14 = *(void *)p_height;
  float64_t v15 = *p_y;
  CGFloat width = p_size->width;
  buffer.f64[0] = v13->origin.x;
  buffer.f64[1] = v15;
  CGFloat v79 = width;
  uint64_t v80 = v14;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "bbox", &buffer, v4, v5, v6, v7, v8);
  uint64_t v22 = (const CGAffineTransform *)(v9 + 24);
  if (!v9) {
    uint64_t v22 = &CGAffineTransformIdentity;
  }
  tdouble x = v22->tx;
  tCGFloat y = v22->ty;
  long long v74 = *(_OWORD *)&v22->a;
  long long v75 = *(_OWORD *)&v22->c;
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "matrix", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v17, v18, v19, v20, v21, *(_OWORD *)&v22->a);
  uint64_t v29 = *(const CG::DisplayListResource ***)(a1 + 24);
  if (v29[3])
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v29[3], v23, v24, v25, v26, v27, v28);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "bg", "%llu", v31, v32, v33, v34, v35, ElementIDForResource);
    uint64_t v29 = *(const CG::DisplayListResource ***)(a1 + 24);
  }
  CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v37 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), (const CG::DisplayListResource *)v29, v23, v24, v25, v26, v27, v28);
  CFStringRef v38 = CFStringCreateWithFormat(v36, 0, @"SoftMask-%llu.dlist", v37, *((void *)&v74 + 1), v75, *(void *)&tx, *(void *)&ty);
  if (!v38) {
    return 0;
  }
  CFStringRef v39 = v38;
  ResourcesDirectorCGFloat y = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(*(CG::DisplayListXMLSerializer **)(a1 + 16));
  if (ResourcesDirectory && (CFURLRef v41 = CFURLCreateCopyAppendingPathComponent(v36, ResourcesDirectory, v39, 0)) != 0)
  {
    CFURLRef v48 = v41;
    uint64_t v49 = &CGRectNull.size.height;
    uint64_t v50 = &CGRectNull.origin.y;
    unsigned int v51 = &CGRectNull.size;
    uint64_t v52 = (const CGRect *)(v9 + 72);
    if (v9)
    {
      unsigned int v51 = (CGSize *)(v9 + 88);
      uint64_t v50 = (CGFloat *)(v9 + 80);
      uint64_t v49 = (CGFloat *)(v9 + 96);
    }
    else
    {
      uint64_t v52 = &CGRectNull;
    }
    uint64_t v53 = *(void *)v49;
    float64_t v54 = *v50;
    CGFloat v55 = v51->width;
    buffer.f64[0] = v52->origin.x;
    buffer.f64[1] = v54;
    CGFloat v79 = v55;
    uint64_t v80 = v53;
    uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&buffer, v42, v43, v44, v45, v46, v47);
    if (CGDisplayList)
    {
      uint64_t v64 = CGDisplayList;
      uint64_t v65 = CGDisplayListContextCreate(CGDisplayList, v57, v58, v59, v60, v61, v62, v63);
      if (v65)
      {
        uint64_t v67 = (const void *)v65;
        if (v9)
        {
          uint64_t v68 = *(void (**)(void, uint64_t))(v9 + 136);
          if (v68) {
            v68(*(void *)(v9 + 120), v65);
          }
        }
        CFURLRef v69 = CG::DisplayList::serializeToURL((CG::DisplayList *)(v64 + 16), v48, v66);
        if (v69)
        {
          CFURLRef v70 = v69;
          CFStringRef PathComponent = CFURLCopyLastPathComponent(v69);
          BOOL v72 = PathComponent != 0;
          if (PathComponent)
          {
            CFStringGetCString(PathComponent, (char *)&buffer, 1024, 0x8000100u);
            CG::DisplayListXMLHelper::addStringToAttributes(a2, "dl", (char *)&buffer);
          }
          CFRelease(v70);
        }
        else
        {
          BOOL v72 = 0;
        }
        CFRelease(v67);
      }
      else
      {
        BOOL v72 = 0;
      }
      CFRelease((CFTypeRef)v64);
    }
    else
    {
      BOOL v72 = 0;
    }
    CFRelease(v48);
  }
  else
  {
    BOOL v72 = 0;
  }
  CFRelease(v39);
  return v72;
}

void DisplayListXMLWriterResourceSoftMask::~DisplayListXMLWriterResourceSoftMask(DisplayListXMLWriterResourceSoftMask *this)
{
}

uint64_t DisplayListXMLWriterResourceStyle::getResource(DisplayListXMLWriterResourceStyle *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterResourceStyle::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 16);
  if (v11)
  {
    switch(*(_DWORD *)(v11 + 20))
    {
      case 1:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "shadow");
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "elevation", "%.17lg", v12, v13, v14, v15, v16, *(void *)(v11 + 40));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "azimuth", "%.17lg", v17, v18, v19, v20, v21, *(void *)(v11 + 48));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ambient", "%.17lg", v22, v23, v24, v25, v26, *(void *)(v11 + 56));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "height", "%.17lg", v27, v28, v29, v30, v31, *(void *)(v11 + 64));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "radius", "%.17lg", v32, v33, v34, v35, v36, *(void *)(v11 + 72));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "saturation", "%.17lg", v37, v38, v39, v40, v41, *(void *)(v11 + 80));
        break;
      case 2:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "focusRing");
        int v42 = *(_DWORD *)(v11 + 36);
        uint64_t v43 = "graphite";
        if (v42 != 1) {
          uint64_t v43 = 0;
        }
        if (v42) {
          uint64_t v44 = (char *)v43;
        }
        else {
          uint64_t v44 = "blue";
        }
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "tint", v44);
        uint64_t v45 = 0;
        uint64_t v46 = *(unsigned int *)(v11 + 40);
        if (v46 <= 2) {
          uint64_t v45 = off_1E52CE340[v46];
        }
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "ordering", v45);
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "alpha", "%.17lg", v47, v48, v49, v50, v51, *(void *)(v11 + 48));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "radius", "%.17lg", v52, v53, v54, v55, v56, *(void *)(v11 + 56));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "threshold", "%.17lg", v57, v58, v59, v60, v61, *(void *)(v11 + 64));
        CG::DisplayListXMLHelper::addRectToAttributes(a2, "bounds", (float64x2_t *)(v11 + 72), v62, v63, v64, v65, v66);
        BOOL v72 = "accumulate";
        LODWORD(v85) = *(_DWORD *)(v11 + 104);
        CGRect v73 = "%d";
        goto LABEL_13;
      case 3:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "gaussianBlur");
        BOOL v72 = "radius";
        uint64_t v85 = *(void *)(v11 + 40);
        CGRect v73 = "%.17lg";
LABEL_13:
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, v72, v73, v67, v68, v69, v70, v71, v85);
        break;
      case 4:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "colorMatrix");
        uint64_t v74 = 0;
        uint64_t v75 = v11 + 40;
        do
        {
          CG::DisplayListXMLHelper::addFormatToAttributes(a2, CG::DisplayListXMLHelper::colorMatrixIndexKey::keys[v74], "%.17lg", v6, v7, v8, v9, v10, *(void *)(v75 + v74 * 8));
          ++v74;
        }
        while (v74 != 20);
        break;
      default:
        CGPostError((uint64_t)"Unknown CGStyleType", v4, v5, v6, v7, v8, v9, v10, v84);
        break;
    }
  }
  uint64_t v76 = *(const CG::DisplayListResource **)(*(void *)(a1 + 24) + 24);
  if (v76)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v76, v5, v6, v7, v8, v9, v10);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v78, v79, v80, v81, v82, ElementIDForResource);
  }
  return 1;
}

void DisplayListXMLWriterResourceStyle::~DisplayListXMLWriterResourceStyle(DisplayListXMLWriterResourceStyle *this)
{
}

uint64_t DisplayListXMLWriterResourcePattern::getResource(DisplayListXMLWriterResourcePattern *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterResourcePattern::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  uint64_t v4 = *((void *)a1[3] + 2);
  int v5 = *(_DWORD *)(v4 + 20);
  uint64_t v6 = "shading";
  if (v5 != 1) {
    uint64_t v6 = 0;
  }
  if (v5) {
    uint64_t v7 = (char *)v6;
  }
  else {
    uint64_t v7 = "tiling";
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "patternType", v7);
  long long v8 = *(_OWORD *)(v4 + 120);
  *(_OWORD *)keys = *(_OWORD *)(v4 + 104);
  long long v69 = v8;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "patternBounds", (float64x2_t *)keys, v9, v10, v11, v12, v13);
  uint64_t v66 = *(void *)(v4 + 56);
  uint64_t v67 = *(void *)(v4 + 64);
  long long v65 = *(_OWORD *)(v4 + 40);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "patternMatrix", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v14, v15, v16, v17, v18, *(_OWORD *)(v4 + 24));
  uint64_t v64 = *(void *)(v4 + 144);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "step", "{%.17lg, %.17lg}", v19, v20, v21, v22, v23, *(void *)(v4 + 136));
  uint64_t v24 = 0;
  uint64_t v25 = *(unsigned int *)(v4 + 152);
  if (v25 <= 2) {
    uint64_t v24 = off_1E52CE3C0[v25];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "tiling", v24);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "isColored", *(unsigned __int8 *)(v4 + 185));
  CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v27, v28, v29, v30, v31, v32);
  CFStringRef v34 = CFStringCreateWithFormat(v26, 0, @"PatternCell-%llu.dlist", ElementIDForResource, v64, v65, v66, v67);
  if (!v34) {
    return 0;
  }
  CFStringRef v35 = v34;
  ResourcesDirectorCGFloat y = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
  if (ResourcesDirectory && (CFURLRef v37 = CFURLCreateCopyAppendingPathComponent(v26, ResourcesDirectory, v35, 0)) != 0)
  {
    CFURLRef v44 = v37;
    if (*(unsigned char *)(v4 + 185))
    {
      uint64_t v45 = 0;
    }
    else
    {
      keys[0] = @"trackColors";
      values[0] = *(void **)MEMORY[0x1E4F1CFC8];
      uint64_t v45 = CFDictionaryCreate(v26, (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    long long v47 = *(_OWORD *)(v4 + 120);
    *(_OWORD *)keys = *(_OWORD *)(v4 + 104);
    long long v69 = v47;
    uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(v45, (const __CFDictionary *)keys, v38, v39, v40, v41, v42, v43);
    if (v45) {
      CFRelease(v45);
    }
    if (CGDisplayList)
    {
      uint64_t v56 = CGDisplayListContextCreate(CGDisplayList, v48, v49, v50, v51, v52, v53, v54);
      if (v56)
      {
        uint64_t v58 = (const void *)v56;
        uint64_t v59 = *(void (**)(void, uint64_t))(v4 + 168);
        if (v59) {
          v59(*(void *)(v4 + 80), v56);
        }
        CFURLRef v60 = CG::DisplayList::serializeToURL((CG::DisplayList *)(CGDisplayList + 16), v44, v57);
        if (v60)
        {
          CFURLRef v61 = v60;
          CFStringRef PathComponent = CFURLCopyLastPathComponent(v60);
          BOOL v46 = PathComponent != 0;
          if (PathComponent)
          {
            CFStringGetCString(PathComponent, (char *)keys, 1024, 0x8000100u);
            CG::DisplayListXMLHelper::addStringToAttributes(a2, "drawCell", (char *)keys);
          }
          CFRelease(v61);
        }
        else
        {
          BOOL v46 = 0;
        }
        CFRelease(v58);
      }
      else
      {
        BOOL v46 = 0;
      }
      CFRelease((CFTypeRef)CGDisplayList);
    }
    else
    {
      BOOL v46 = 0;
    }
    CFRelease(v44);
  }
  else
  {
    BOOL v46 = 0;
  }
  CFRelease(v35);
  return v46;
}

void DisplayListXMLWriterResourcePattern::~DisplayListXMLWriterResourcePattern(DisplayListXMLWriterResourcePattern *this)
{
}

uint64_t DisplayListXMLWriterResourceGradient::getResource(DisplayListXMLWriterResourceGradient *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterResourceGradient::writeChildElements(DisplayListXMLWriterResourceGradient *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 3) + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = (double **)&v16;
  uint64_t v18 = 0x4002000000;
  uint64_t v19 = __Block_byref_object_copy__81;
  uint64_t v20 = __Block_byref_object_dispose__82;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = (double **)&v8;
  uint64_t v10 = 0x4002000000;
  uint64_t v11 = __Block_byref_object_copy__81;
  uint64_t v12 = __Block_byref_object_dispose__82;
  __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3) {
    uint64_t v4 = *(void *)(*(void *)(v3 + 24) + 48) + 1;
  }
  else {
    uint64_t v4 = 1;
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN36DisplayListXMLWriterResourceGradient18writeChildElementsEv_block_invoke;
  v7[3] = &unk_1E52B2A28;
  v7[5] = &v8;
  v7[6] = v4;
  v7[4] = &v16;
  CGGradientApplyWithBlock(v2, (uint64_t)v7);
  BOOL v5 = CG::DisplayListXMLHelper::writeCGFloatArray((xmlChar *)"locations", v17 + 5, *((xmlTextWriterPtr *)this + 1))
    && CG::DisplayListXMLHelper::writeCGFloatArray((xmlChar *)"components", v9 + 5, *((xmlTextWriterPtr *)this + 1));
  _Block_object_dispose(&v8, 8);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v16, 8);
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  return v5;
}

void sub_184DC0E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v23 - 80), 8);
  uint64_t v25 = *(void **)(v23 - 40);
  if (v25)
  {
    *(void *)(v23 - 32) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__81(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__82(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN36DisplayListXMLWriterResourceGradient18writeChildElementsEv_block_invoke(void *a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(void **)(a1[4] + 8);
  uint64_t v8 = (double *)v6[6];
  unint64_t v7 = v6[7];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (double *)v6[5];
    uint64_t v11 = v8 - v10;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
LABEL_36:
    }
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15)
    {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v15);
      uint64_t v10 = (double *)v6[5];
      uint64_t v8 = (double *)v6[6];
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (double *)(v15 + 8 * v11);
    unint64_t v18 = v15 + 8 * v16;
    *uint64_t v17 = a3;
    uint64_t v9 = v17 + 1;
    while (v8 != v10)
    {
      uint64_t v19 = *((void *)v8-- - 1);
      *((void *)v17-- - 1) = v19;
    }
    v6[5] = v17;
    v6[6] = v9;
    v6[7] = v18;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v8 = a3;
    uint64_t v9 = v8 + 1;
  }
  v6[6] = v9;
  if (a1[6])
  {
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void **)(a1[5] + 8);
      uint64_t v23 = (char *)v21[6];
      unint64_t v22 = v21[7];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = (char *)v21[5];
        uint64_t v26 = (v23 - v25) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_36;
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v29);
          uint64_t v25 = (char *)v21[5];
          uint64_t v23 = (char *)v21[6];
        }
        else
        {
          uint64_t v30 = 0;
        }
        uint64_t v31 = (void *)(v29 + 8 * v26);
        *uint64_t v31 = *(void *)(a2 + 8 * v20);
        uint64_t v24 = v31 + 1;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23 - 1);
          v23 -= 8;
          *--uint64_t v31 = v32;
        }
        v21[5] = v31;
        v21[6] = v24;
        v21[7] = v29 + 8 * v30;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)uint64_t v23 = *(void *)(a2 + 8 * v20);
        uint64_t v24 = v23 + 8;
      }
      v21[6] = v24;
      ++v20;
    }
    while (v20 < a1[6]);
  }
}

uint64_t DisplayListXMLWriterResourceGradient::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(const CG::DisplayListResource **)(v10 + 24);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void *)(a1 + 24);
  }
  uint64_t v18 = *(void *)(v10 + 16);
  if (v18) {
    uint64_t v18 = *(void *)(v18 + 48);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v5, v6, v7, v8, v9, v18);
  return 1;
}

void DisplayListXMLWriterResourceGradient::~DisplayListXMLWriterResourceGradient(DisplayListXMLWriterResourceGradient *this)
{
}

uint64_t DisplayListXMLWriterResourceShading::getResource(DisplayListXMLWriterResourceShading *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterResourceShading::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  uint64_t v10 = *(const CG::DisplayListResource **)(*(void *)(a1 + 24) + 32);
  if (v10)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v10, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v12, v13, v14, v15, v16, ElementIDForResource);
  }
  return 1;
}

void DisplayListXMLWriterResourceShading::~DisplayListXMLWriterResourceShading(DisplayListXMLWriterResourceShading *this)
{
}

uint64_t DisplayListXMLWriterResourceImage::getResource(DisplayListXMLWriterResourceImage *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterResourceImage::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  uint64_t v10 = a1[3];
  uint64_t v11 = (const CG::DisplayListResource *)*((void *)v10 + 5);
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = a1[3];
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "width", "%zu", v5, v6, v7, v8, v9, *((void *)v10 + 3));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "height", "%zu", v18, v19, v20, v21, v22, *((void *)a1[3] + 4));
  if ((16 * *((unsigned char *)a1[3] + 48)) > 0x4Fu) {
    LOBYTE(v28) = 0;
  }
  else {
    uint64_t v28 = off_1E52CE178[(char)(16 * *((unsigned char *)a1[3] + 48)) >> 4];
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "renderingIntent", "%s", v23, v24, v25, v26, v27, (char)v28);
  if ((*((unsigned char *)a1[3] + 48) & 0x10) != 0) {
    CFStringRef v34 = "true";
  }
  else {
    CFStringRef v34 = "false";
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "interpolate", "%s", v29, v30, v31, v32, v33, (char)v34);
  if ((*((unsigned char *)a1[3] + 48) & 0x20) != 0) {
    uint64_t v40 = "true";
  }
  else {
    uint64_t v40 = "false";
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "isMask", "%s", v35, v36, v37, v38, v39, (char)v40);
  if ((*((unsigned char *)a1[3] + 48) & 0x40) != 0) {
    BOOL v46 = "true";
  }
  else {
    BOOL v46 = "false";
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "isTransparent", "%s", v41, v42, v43, v44, v45, (char)v46);
  CFAllocatorRef v47 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v54 = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v48, v49, v50, v51, v52, v53);
  CFStringRef v55 = CFStringCreateWithFormat(v47, 0, @"Image-%llu.br2", v54);
  ResourcesDirectorCGFloat y = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
  if (ResourcesDirectory)
  {
    CFURLRef v57 = CFURLCreateCopyAppendingPathComponent(v47, ResourcesDirectory, v55, 0);
    if (v57)
    {
      CFURLRef v58 = v57;
      CFURLGetFileSystemRepresentation(v57, 1u, buffer, 1025);
      CFStringRef FileNameForBufferReader = CGImageCreateFileNameForBufferReader(*((CGImage **)a1[3] + 2), (char *)buffer);
      if (FileNameForBufferReader)
      {
        CFStringRef v60 = FileNameForBufferReader;
        CFStringGetCString(FileNameForBufferReader, __s, 1025, 0x8000100u);
        CGImageDumpToFile(*((void *)a1[3] + 2), __s);
        CFURLRef v61 = strrchr(__s, 47);
        if (v61)
        {
          uint64_t v62 = v61;
          if (v55) {
            CFRelease(v55);
          }
          CFStringRef v55 = CFStringCreateWithCString(v47, v62 + 1, 0x8000100u);
        }
        CFRelease(v60);
      }
      CFRelease(v58);
    }
  }
  if (v55)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(v55, 0x8000100u);
    CG::DisplayListXMLHelper::addStringToAttributes(a2, "imageName", CStringPtr);
    CFRelease(v55);
  }
  return 1;
}

void DisplayListXMLWriterResourceImage::~DisplayListXMLWriterResourceImage(DisplayListXMLWriterResourceImage *this)
{
}

uint64_t DisplayListXMLWriterResourceFont::getResource(DisplayListXMLWriterResourceFont *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterResourceFont::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  CFURLRef v4 = CGFontCopyURL(*((const __CFURL **)a1[3] + 2));
  if (v4)
  {
    CFURLRef v5 = v4;
    CFStringRef v6 = CFURLGetString(v4);
    if (v6)
    {
      CStringPtr = (char *)CFStringGetCStringPtr(v6, 0x8000100u);
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "fontURL", CStringPtr);
    }
    CFStringRef v8 = (const __CFString *)v5;
LABEL_5:
    CFRelease(v8);
    goto LABEL_13;
  }
  int v34 = 0;
  if (CGFontGetIntProperty(*((void *)a1[3] + 2), @"com.apple.CoreGraphics.CGPDFFontFormat", &v34))
  {
    uint64_t v14 = *((void *)a1[3] + 2);
    if (v14)
    {
      uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v14 + 88), memory_order_acquire);
      if (explicit)
      {
        PropertCGFloat y = (const __CFData *)CGPropertiesGetProperty(explicit, @"com.apple.CoreGraphics.CGPDFFontData");
        if (Property)
        {
          CFDataRef v17 = Property;
          CFTypeID v18 = CFGetTypeID(Property);
          if (v18 == CFDataGetTypeID())
          {
            if ((v34 - 1) > 5) {
              uint64_t v20 = "font";
            }
            else {
              uint64_t v20 = off_1E52B2A48[v34 - 1];
            }
            CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            uint64_t ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v19, v9, v10, v11, v12, v13);
            CFStringRef v24 = CFStringCreateWithFormat(v22, 0, @"Font-%llu.%s", ElementIDForResource, v20);
            ResourcesDirectorCGFloat y = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
            if (ResourcesDirectory)
            {
              CFURLRef v26 = CFURLCreateCopyAppendingPathComponent(v22, ResourcesDirectory, v24, 0);
              if (v26)
              {
                CFURLRef v27 = v26;
                CGDataConsumerRef v28 = CGDataConsumerCreateWithURL(v26);
                if (v28)
                {
                  uint64_t v29 = (uint64_t)v28;
                  BytePtr = CFDataGetBytePtr(v17);
                  CFIndex Length = CFDataGetLength(v17);
                  CGDataConsumerPutBytes(v29, (uint64_t)BytePtr, Length);
                  if (!*(unsigned char *)(v29 + 56))
                  {
                    uint64_t v32 = *(void (**)(void))(v29 + 80);
                    if (v32) {
                      v32(*(void *)(v29 + 16));
                    }
                  }
                  CFRelease((CFTypeRef)v29);
                }
                CFRelease(v27);
              }
            }
            uint64_t v33 = (char *)CFStringGetCStringPtr(v24, 0x8000100u);
            CG::DisplayListXMLHelper::addStringToAttributes(a2, "fontResourceURL", v33);
            CFStringRef v8 = v24;
            goto LABEL_5;
          }
        }
      }
    }
  }
LABEL_13:
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "em", "%.17lg", v9, v10, v11, v12, v13, *((void *)a1[3] + 3));
  return 1;
}

void DisplayListXMLWriterResourceFont::~DisplayListXMLWriterResourceFont(DisplayListXMLWriterResourceFont *this)
{
}

uint64_t DisplayListXMLWriterResourceDash::getResource(DisplayListXMLWriterResourceDash *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterResourceDash::writeChildElements(xmlTextWriterPtr *this)
{
  int started = xmlTextWriterStartElement(this[1], (const xmlChar *)"pattern");
  if (started < 1)
  {
    int v5 = started;
  }
  else
  {
    uint64_t v3 = *((void *)this[3] + 2);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v4 = 0;
    }
    if (v3) {
      CFStringRef v6 = (void *)(v3 + 24);
    }
    else {
      CFStringRef v6 = 0;
    }
    memset(&v16, 0, sizeof(v16));
    std::string::append(&v16, "[");
    if (v4) {
      CG::DisplayListXMLHelper::appendFormatToString((uint64_t)&v16, v7, v8, v9, v10, v11, v12, v13, *v6);
    }
    std::string::append(&v16, "]");
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v16;
    }
    else {
      uint64_t v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    xmlTextWriterWriteRaw(this[1], (const xmlChar *)v14);
    int v5 = xmlTextWriterEndElement(this[1]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  return v5 >= 0;
}

void sub_184DC1800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DisplayListXMLWriterResourceDash::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    LOBYTE(v11) = 0;
    LOBYTE(v10) = 0;
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "phase", "%.17lg", v4, v5, v6, v7, v8, v10);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v12, v13, v14, v15, v16, v11);
  return 1;
}

void DisplayListXMLWriterResourceDash::~DisplayListXMLWriterResourceDash(DisplayListXMLWriterResourceDash *this)
{
}

uint64_t DisplayListXMLWriterResourceColorSpace::getResource(DisplayListXMLWriterResourceColorSpace *this)
{
  return *((void *)this + 3);
}

const __CFString *DisplayListXMLWriterResourceColorSpace::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  uint64_t v4 = (CGColorSpace *)*((void *)a1[3] + 2);
  unsigned int v5 = CGColorSpaceGetType(v4) + 1;
  if (v5 > 0xC) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = off_1E52CE358[v5];
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "csType", v6);
  if (!v4)
  {
    if (CGColorSpaceGetType(0) == 9) {
      return 0;
    }
    goto LABEL_17;
  }
  CFStringRef v7 = *(const __CFString **)(*((void *)v4 + 3) + 80);
  if (v7)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(v7, 0x8000100u);
    uint64_t v9 = "name";
LABEL_7:
    CG::DisplayListXMLHelper::addStringToAttributes(a2, v9, CStringPtr);
    return (const __CFString *)1;
  }
  int Type = CGColorSpaceGetType(v4);
  uint64_t v19 = *((void *)v4 + 3);
  if (Type != 9)
  {
    unsigned int v21 = *(_DWORD *)(v19 + 24);
    if (v21 <= 0xB && ((0xC78u >> v21) & 1) != 0)
    {
      CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v12, v13, v14, v15, v16, v17);
      CFStringRef v24 = CFStringCreateWithFormat(v22, 0, @"ColorSpace-%llu.icc", ElementIDForResource);
      CFDataRef v31 = CGColorSpaceCopyICCData(v4);
      uint64_t v32 = a1[2];
      if (v31)
      {
        ResourcesDirectorCGFloat y = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(v32);
        if (ResourcesDirectory)
        {
          CFURLRef v34 = CFURLCreateCopyAppendingPathComponent(v22, ResourcesDirectory, v24, 0);
          if (v34)
          {
            CFURLRef v35 = v34;
            CGDataConsumerRef v36 = CGDataConsumerCreateWithURL(v34);
            if (v36)
            {
              uint64_t v37 = (uint64_t)v36;
              BytePtr = CFDataGetBytePtr(v31);
              CFIndex Length = CFDataGetLength(v31);
              uint64_t v40 = CGDataConsumerPutBytes(v37, (uint64_t)BytePtr, Length);
              CFIndex v41 = CFDataGetLength(v31);
              BOOL v43 = v41 < 0 || v40 != v41;
              if (!*(unsigned char *)(v37 + 56))
              {
                uint64_t v44 = *(void (**)(void))(v37 + 80);
                if (v44) {
                  v44(*(void *)(v37 + 16));
                }
              }
              CFRelease((CFTypeRef)v37);
              CFRelease(v35);
              CFRelease(v31);
              if (!v43)
              {
                CStringPtr = (char *)CFStringGetCStringPtr(v24, 0x8000100u);
                uint64_t v9 = "profile";
                goto LABEL_7;
              }
              return 0;
            }
            CFRelease(v35);
          }
        }
        CFRelease(v31);
      }
      else
      {
        CG::DisplayListXMLSerializer::getElementIDForResource(v32, a1[3], v25, v26, v27, v28, v29, v30);
        CGPostError((uint64_t)"%s: CGColorSpaceCopyICCData() returned NULL for ColorSpaceResource with id = %llu", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLWriterResourceColorSpace::writeAttributes(DLXMLAttributes &)");
      }
      return 0;
    }
LABEL_17:
    CGPostError((uint64_t)"%s: Unhanded colorspace kind", v11, v12, v13, v14, v15, v16, v17, (char)"virtual BOOL DisplayListXMLWriterResourceColorSpace::writeAttributes(DLXMLAttributes &)");
    return 0;
  }
  if ((*(_DWORD *)(v19 + 28) - 5) > 1) {
    return 0;
  }
  uint64_t v20 = **(void **)(v19 + 96);
  if (!v20) {
    return 0;
  }
  CFStringRef result = *(const __CFString **)(*(void *)(v20 + 24) + 80);
  if (result)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(result, 0x8000100u);
    uint64_t v9 = "patternBaseName";
    goto LABEL_7;
  }
  return result;
}

void DisplayListXMLWriterResourceColorSpace::~DisplayListXMLWriterResourceColorSpace(DisplayListXMLWriterResourceColorSpace *this)
{
}

uint64_t DisplayListXMLWriterResourceColor::getResource(DisplayListXMLWriterResourceColor *this)
{
  return *((void *)this + 3);
}

uint64_t DisplayListXMLWriterResourceColor::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  uint64_t v10 = *(void **)(a1 + 24);
  uint64_t v11 = (const CG::DisplayListResource *)v10[3];
  if (v11)
  {
    char ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    uint64_t v10 = *(void **)(a1 + 24);
  }
  CFTypeID v18 = (const CG::DisplayListResource *)v10[4];
  if (v18)
  {
    char v19 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v18, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "pattern", "%llu", v20, v21, v22, v23, v24, v19);
    uint64_t v10 = *(void **)(a1 + 24);
  }
  uint64_t v25 = v10[2];
  Components = CGColorGetComponents((CGColorRef)v25);
  if (v25)
  {
    if (v25 < 0) {
      unint64_t NumberOfComponents = CGTaggedColorGetNumberOfComponents(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else {
      unint64_t NumberOfComponents = *(void *)(v25 + 56);
    }
  }
  else
  {
    unint64_t NumberOfComponents = 0;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    CGDataConsumerRef v36 = Mutable;
    CFStringAppend(Mutable, @"(");
    if (NumberOfComponents)
    {
      unint64_t v37 = 0;
      do
      {
        CFStringAppendFormat(v36, 0, @"%.17lg", *(void *)&Components[v37++]);
        if (v37 < NumberOfComponents) {
          CFStringAppendCString(v36, " ", 0x8000100u);
        }
      }
      while (NumberOfComponents != v37);
    }
    CFStringAppend(v36, @""));
    CStringPtr = (char *)CFStringGetCStringPtr(v36, 0x8000100u);
    CG::DisplayListXMLHelper::addStringToAttributes(a2, "components", CStringPtr);
    CFRelease(v36);
  }
  return 1;
}

void DisplayListXMLWriterResourceColor::~DisplayListXMLWriterResourceColor(DisplayListXMLWriterResourceColor *this)
{
}

uint64_t DisplayListXMLWriterResourceClip::getResource(DisplayListXMLWriterResourceClip *this)
{
  return *((void *)this + 3);
}

BOOL DisplayListXMLWriterResourceClip::writeChildElements(DisplayListXMLWriterResourceClip *this)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*((void *)this + 3) + 16);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(void *)(v1 + 120);
  if (!v2) {
    return 1;
  }
  int started = xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"stack");
  if ((started & 0x80000000) == 0)
  {
    xmlTextWriterWriteFormatAttribute(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"count", "%zu", v2);
    unint64_t v12 = 0;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v13 = 16;
    do
    {
      uint64_t v14 = *(void **)(*((void *)this + 3) + 16);
      if (v14 && v14[15] > v12)
      {
        if (v14[14] == 3) {
          uint64_t v15 = &v14[v13];
        }
        else {
          uint64_t v15 = (uint64_t *)(v14[16] + 8 * v12);
        }
        uint64_t v16 = *v15;
      }
      else
      {
        uint64_t v16 = 0;
      }
      unsigned int v17 = *(char *)(v16 + 8);
      if (v17 > 4 || v17 == 1)
      {
        CGPostError((uint64_t)"%s: Unexpected clip type (%d) encountered,", v5, v6, v7, v8, v9, v10, v11, (char)"virtual BOOL DisplayListXMLWriterResourceClip::writeChildElements()");
      }
      else if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"clip") & 0x80000000) == 0)
      {
        v68[0] = 0;
        v68[1] = 0;
        uint64_t v67 = (uint64_t *)v68;
        int v19 = *(unsigned __int8 *)(v16 + 8);
        switch((char)v19)
        {
          case 0:
            CG::DisplayListXMLHelper::addStringToAttributes(&v67, "type", "rect");
            if (*(unsigned char *)(v16 + 8))
            {
              uint64_t v25 = &CGRectNull;
              p_CGFloat height = &CGRectNull.size.height;
              p_CGFloat y = &CGRectNull.origin.y;
              p_CGSize size = &CGRectNull.size;
            }
            else
            {
              uint64_t v25 = (const CGRect *)(v16 + 24);
              p_CGFloat y = (CGFloat *)(v16 + 32);
              p_CGSize size = (CGSize *)(v16 + 40);
              p_CGFloat height = (CGFloat *)(v16 + 48);
            }
            CGFloat v48 = *p_height;
            uint64_t v49 = *(void *)p_y;
            CGFloat width = p_size->width;
            *(CGFloat *)float64x2_t buffer = v25->origin.x;
            *(void *)&buffer[8] = v49;
            v70[0] = width;
            v70[1] = v48;
            CG::DisplayListXMLHelper::addRectToAttributes(&v67, "rect", (float64x2_t *)buffer, v20, v21, v22, v23, v24);
            break;
          case 2:
          case 4:
            CG::DisplayListXMLHelper::addStringToAttributes(&v67, "type", off_1E52CE148[(char)v19 + 1]);
            break;
          case 3:
            if (v19 == 3)
            {
              uint64_t v29 = *(void *)(v16 + 24);
              if (v29)
              {
                long long v30 = *(_OWORD *)(v29 + 80);
                *(_OWORD *)float64x2_t buffer = *(_OWORD *)(v29 + 64);
                *(_OWORD *)uint64_t v70 = v30;
                CG::DisplayListXMLHelper::addRectToAttributes(&v67, "rect", (float64x2_t *)buffer, v7, v8, v9, v10, v11);
                uint64_t v63 = *(void *)(v29 + 40);
                uint64_t v64 = *(void *)(v29 + 48);
                long long v62 = *(_OWORD *)(v29 + 24);
                CG::DisplayListXMLHelper::addFormatToAttributes(&v67, "matrix", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v31, v32, v33, v34, v35, *(_OWORD *)(v29 + 8));
                long long v65 = *(const void **)(v29 + 56);
                if (v65)
                {
                  uint64_t ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*((CG::DisplayListXMLSerializer **)this + 2), *((const CG::DisplayListResource **)this + 3), v36, v37, v38, v39, v40, v41);
                  CFStringRef v43 = CFStringCreateWithFormat(alloc, 0, @"Clip-%llu_Mask-%lu.tiff", ElementIDForResource, v12 + 1, v62, v63, v64);
                  ResourcesDirectorCGFloat y = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(*((CG::DisplayListXMLSerializer **)this + 2));
                  if (ResourcesDirectory)
                  {
                    CFURLRef v45 = CFURLCreateCopyAppendingPathComponent(alloc, ResourcesDirectory, v43, 0);
                    CFURLRef v46 = v45;
                    if (v45)
                    {
                      CFURLGetFileSystemRepresentation(v45, 1u, buffer, 1025);
                      CGImageWriteToFile(v65, (char *)buffer);
                      CFRelease(v46);
                    }
                  }
                  CStringPtr = (char *)CFStringGetCStringPtr(v43, 0x8000100u);
                  CG::DisplayListXMLHelper::addStringToAttributes(&v67, "maskImage", CStringPtr);
                }
              }
            }
            CG::DisplayListXMLHelper::addStringToAttributes(&v67, "type", "mask");
            break;
          default:
            break;
        }
        CG::DisplayListXMLHelper::writeAttributes(&v67, *((xmlTextWriterPtr *)this + 1));
        int v58 = *(unsigned __int8 *)(v16 + 8);
        if (v58 == 4)
        {
          CGPostError((uint64_t)"%s: kCGClipTypeTextClipping is unimplemented", v51, v52, v53, v54, v55, v56, v57, (char)"virtual BOOL DisplayListXMLWriterResourceClip::writeChildElements()");
        }
        else if ((char)v58 == 2 && v58 == 2)
        {
          uint64_t v59 = *(CG::DisplayListXMLHelper **)(v16 + 24);
          if (v59)
          {
            if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"cgpath") & 0x80000000) == 0)
            {
              CG::DisplayListXMLHelper::writeCGPath(v59, *((const CGPath **)this + 1), v60);
              xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
            }
          }
        }
        xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v68[0]);
      }
      ++v12;
      ++v13;
    }
    while (v2 != v12);
    int started = xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
  }
  return started >= 0;
}

void sub_184DC2130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

uint64_t DisplayListXMLWriterResourceClip::writeAttributes(uint64_t a1, uint64_t **a2)
{
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  uint64_t v4 = *(void *)(a1 + 24);
  float64x2_t v5 = *(float64x2_t *)(v4 + 40);
  v12[0] = *(float64x2_t *)(v4 + 24);
  v12[1] = v5;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "bbox", v12, v6, v7, v8, v9, v10);
  return 1;
}

void DisplayListXMLWriterResourceClip::~DisplayListXMLWriterResourceClip(DisplayListXMLWriterResourceClip *this)
{
}

uint64_t **std::__tree<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::__map_value_compare<CG::DisplayListResource const*,std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::less<CG::DisplayListResource const*>,true>,std::allocator<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>>>::__emplace_unique_key_args<CG::DisplayListResource const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListResource const* const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  float64x2_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        float64x2_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      float64x2_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x38uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *((unsigned char *)v7 + 48) = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    char *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void CG::DisplayListXMLSerializer::~DisplayListXMLSerializer(CG::DisplayListXMLSerializer *this)
{
  CG::DisplayListXMLSerializer::~DisplayListXMLSerializer(this);

  JUMPOUT(0x18532A2A0);
}

{
  const void *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1ED094C10;
  xmlFreeTextWriter(*((xmlTextWriterPtr *)this + 4));
  xmlBufferFree(*((xmlBufferPtr *)this + 3));
  uint64_t v2 = (const void *)*((void *)this + 6);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 5);
  if (v3) {
    CFRelease(v3);
  }
  std::__tree<unsigned long>::destroy(*((void **)this + 12));
  std::__tree<unsigned long>::destroy(*((void **)this + 9));

  CG::DisplayListSerializer::~DisplayListSerializer(this);
}

void CG::DisplayListSerializer::~DisplayListSerializer(CG::DisplayListSerializer *this)
{
  *(void *)this = &unk_1ED0949C0;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t CGFontGetGlyphPaths(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a4;
  uint64_t v13 = (float64x2_t *)a3;
  uint64_t v14 = (unsigned __int16 *)a2;
  if ((CGFontGetGlyphPaths_warned & 1) == 0)
  {
    CGFontGetGlyphPaths_warned = 1;
  }
  if (!a1) {
    return 0;
  }
  uint64_t result = 0;
  if (v12) {
    BOOL v17 = v14 == 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (!v17 && a8)
  {
    if (!v12) {
      return 1;
    }
    info[0] = a7;
    info[1] = a8;
    uint64_t result = (uint64_t)get_font_info(a1);
    if (!result) {
      return result;
    }
    int v18 = *(_DWORD *)(result + 8);
    if (v18)
    {
      double v19 = 1.0 / (double)v18;
      if (a6 && *a6 != 72.0) {
        double v19 = v19 * (72.0 / *a6);
      }
      double v33 = v19;
      double v34 = 0.0;
      double v35 = 0.0;
      double v36 = v19;
      float64x2_t v37 = 0uLL;
      if (a5)
      {
        double v20 = a5[1];
        double v21 = a5[2];
        double v22 = a5[3];
        double v23 = a5[5];
        double v24 = v21 * 0.0;
        double v25 = v21 * 0.0 + v19 * *a5;
        double v26 = v19 * v21 + *a5 * 0.0;
        double v27 = a5[4] + v24 + *a5 * 0.0;
        double v33 = v25;
        double v34 = v22 * 0.0 + v19 * v20;
        double v35 = v26;
        double v36 = v19 * v22 + v20 * 0.0;
        v37.f64[0] = v27;
        v37.f64[1] = v22 * 0.0 + v20 * 0.0 + v23;
      }
      do
      {
        if (*(void *)a8) {
          (*(void (**)(uint64_t, void))a8)(a7, *v14);
        }
        uint64_t v28 = (const CGPath *)(*(uint64_t (**)(void, void, void))(a1[2] + 400))(a1[14], 0, *v14);
        if (v28)
        {
          uint64_t v29 = v28;
          CGPathApply(v28, info, (CGPathApplierFunction)process_path_element);
          CFRelease(v29);
        }
        else
        {
          CGPathApply(0, info, (CGPathApplierFunction)process_path_element);
        }
        long long v30 = *(void (**)(uint64_t, void))(a8 + 48);
        if (v30) {
          v30(a7, *v14);
        }
        if (v13)
        {
          float64x2_t v31 = *v13++;
          float64x2_t v37 = vaddq_f64(v31, v37);
        }
        ++v14;
        --v12;
      }
      while (v12);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t process_path_element(uint64_t result, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  unint64_t v8 = *(void **)(result + 8);
  switch(*(_DWORD *)a2)
  {
    case 0:
      uint64_t v9 = (uint64_t (*)(uint64_t, __n128, __n128))v8[1];
      if (!v9) {
        return result;
      }
      goto LABEL_5;
    case 1:
      uint64_t v9 = (uint64_t (*)(uint64_t, __n128, __n128))v8[2];
      if (v9)
      {
LABEL_5:
        __n128 v12 = (__n128)vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(result + 32), *(double *)(*(void *)(a2 + 8) + 8)), *(float64x2_t *)(result + 16), **(double **)(a2 + 8));
        __n128 v10 = (__n128)vaddq_f64(*(float64x2_t *)(result + 48), (float64x2_t)v12);
        uint64_t v11 = *(void *)result;
        v12.n128_u64[0] = v10.n128_u64[1];
        uint64_t result = v9(v11, v10, v12);
      }
      break;
    case 2:
      uint64_t v13 = (uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128))v8[3];
      if (v13)
      {
        uint64_t v14 = *(double **)(a2 + 8);
        double v15 = v14[1];
        double v16 = *(double *)(result + 16);
        double v17 = *(double *)(result + 24);
        double v18 = *(double *)(result + 32);
        double v19 = *(double *)(result + 40);
        double v20 = *(double *)(result + 48);
        double v21 = *(double *)(result + 56);
        a3.n128_f64[0] = v20 + v15 * v18 + v16 * *v14;
        a4.n128_f64[0] = v21 + v15 * v19 + v17 * *v14;
        double v22 = v14[2];
        double v23 = v14[3];
        a5.n128_f64[0] = v20 + v18 * v23 + v16 * v22;
        uint64_t v24 = *(void *)result;
        a6.n128_f64[0] = v21 + v19 * v23 + v17 * v22;
        uint64_t result = v13(v24, a3, a4, a5, a6);
      }
      break;
    case 3:
      double v25 = (uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128, __n128))v8[4];
      if (v25)
      {
        double v26 = *(double **)(a2 + 8);
        double v27 = v26[1];
        double v28 = *(double *)(result + 16);
        double v29 = *(double *)(result + 24);
        double v30 = *(double *)(result + 32);
        double v31 = *(double *)(result + 40);
        double v32 = *(double *)(result + 48);
        double v33 = *(double *)(result + 56);
        a3.n128_f64[0] = v32 + v27 * v30 + v28 * *v26;
        a4.n128_f64[0] = v33 + v27 * v31 + v29 * *v26;
        double v34 = v26[2];
        double v35 = v26[3];
        a5.n128_f64[0] = v32 + v30 * v35 + v28 * v34;
        a6.n128_f64[0] = v33 + v31 * v35 + v29 * v34;
        double v36 = v26[4];
        double v37 = v26[5];
        a7.n128_f64[0] = v32 + v30 * v37 + v28 * v36;
        a8.n128_f64[0] = v33 + v31 * v37 + v29 * v36;
        uint64_t v38 = *(void *)result;
        uint64_t result = v25(v38, a3, a4, a5, a6, a7, a8);
      }
      break;
    case 4:
      uint64_t v39 = (uint64_t (*)(uint64_t))v8[5];
      if (v39)
      {
        uint64_t v40 = *(void *)result;
        uint64_t result = v39(v40);
      }
      break;
    default:
      abort();
  }
  return result;
}

void *CGPDFXRefStreamCreate(const void **a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v23 = a2;
  uint64_t v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v6)
  {
    void *v6 = a1;
    v6[3] = v4;
    uint64_t v7 = pdf_object_scanner_create_with_xref(a1, 0);
    v6[2] = v7;
    if (v7)
    {
      uint64_t v14 = v6 + 1;
      while (1)
      {
        double v15 = xref_stream_create(v7, v4, v8, v9, v10, v11, v12, v13);
        if (!v15) {
          break;
        }
        double v16 = v15;
        double v17 = (void *)*v14;
        double v18 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
        *double v18 = v17;
        v18[1] = v16;
        *uint64_t v14 = v18;
        if (!a3) {
          goto LABEL_16;
        }
        if (!CGPDFDictionaryGetOffset(*((CGPDFDictionary **)v16 + 1), "Prev", &v23))
        {
          double v18 = (void *)*v14;
          if (*v14)
          {
LABEL_16:
            double v21 = 0;
            do
            {
              double v22 = v18;
              double v18 = (void *)*v18;
              *double v22 = v21;
              double v21 = v22;
            }
            while (v18);
          }
          else
          {
            double v22 = 0;
          }
          *uint64_t v14 = v22;
          return v6;
        }
        uint64_t v4 = v23;
        if (!v23) {
          break;
        }
        double v19 = v6 + 1;
        while (1)
        {
          double v19 = (void *)*v19;
          if (!v19) {
            break;
          }
          if (*(void *)v19[1] == v23) {
            goto LABEL_13;
          }
        }
        uint64_t v7 = (uint64_t *)v6[2];
      }
    }
LABEL_13:
    CGPDFXRefStreamRelease((uint64_t)v6);
    return 0;
  }
  return v6;
}

void CGPDFXRefStreamRelease(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(uint64_t ***)(a1 + 8);
    if (v2)
    {
      do
      {
        xref_stream_release(v2[1]);
        uint64_t v2 = (uint64_t **)*v2;
      }
      while (v2);
      uint64_t v3 = *(void **)(a1 + 8);
      if (v3)
      {
        do
        {
          uint64_t v4 = (void *)*v3;
          free(v3);
          uint64_t v3 = v4;
        }
        while (v4);
      }
    }
    pdf_object_scanner_release(*(uint64_t **)(a1 + 16));
    free((void *)a1);
  }
}

char *xref_stream_create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v51[3] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  value = 0;
  memset(v38, 0, sizeof(v38));
  CGPDFSourceSetPosition(a1[1], a2, a3, a4, a5, a6, a7, a8);
  if ((pdf_object_scanner_read_indirect_object(a1, (uint64_t)v38, v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
    pdf_error("missing or invalid cross-reference stream.");
    return 0;
  }
  if (DWORD2(v38[0]) != 9)
  {
    pdf_error("missing or invalid cross-reference stream.");
LABEL_11:
    if ((DWORD2(v38[0]) - 5) <= 4) {
      pdf_object_release_compound_value((uint64_t)v38);
    }
    return 0;
  }
  uint64_t v15 = v39;
  if (v39) {
    *(unsigned char *)(v39 + 41) = 1;
  }
  double v16 = (char *)malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v16) {
    goto LABEL_11;
  }
  if (v15)
  {
    double v17 = *(CGPDFDictionary **)(v15 + 48);
    if (v17) {
      CFRetain(*(CFTypeRef *)(v15 + 48));
    }
  }
  else
  {
    double v17 = 0;
  }
  *((void *)v16 + 1) = v17;
  if (!CGPDFDictionaryGetName(v17, "Type", (const char **)&value))
  {
LABEL_18:
    pdf_error(v18);
    goto LABEL_19;
  }
  if (strcmp(value, "XRef"))
  {
LABEL_19:
    if ((DWORD2(v38[0]) - 5) <= 4) {
      pdf_object_release_compound_value((uint64_t)v38);
    }
    xref_stream_release(v16);
    return 0;
  }
  CGPDFArrayRef v50 = 0;
  int v49 = 0;
  CGPDFInteger v47 = 0;
  CGPDFInteger v48 = 0;
  CGPDFInteger v46 = 0;
  if (!CGPDFDictionaryGetInteger(*((CGPDFDictionaryRef *)v16 + 1), "Size", &v48))
  {
    goto LABEL_19;
  }
  if (!CGPDFDictionaryGetIntegers(*((CGPDFDictionary **)v16 + 1), "W", (uint64_t)v51, (CGPDFArray *)3))
  {
    goto LABEL_19;
  }
  uint64_t v20 = 0;
  do
  {
    if (v51[v20] > 8uLL) {
      goto LABEL_18;
    }
    ++v20;
  }
  while (v20 != 3);
  uint64_t v42 = 0;
  CFStringRef v43 = &v42;
  uint64_t v44 = 0x2000000000;
  char v45 = 0;
  description = pdf_filter_chain_create_description(v15, *(unsigned __int8 *)(v15 + 40));
  if (description)
  {
    double v22 = description;
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 0x40000000;
    v41[2] = __xref_stream_read_sections_block_invoke;
    v41[3] = &unk_1E52B2A80;
    v41[4] = &v42;
    CGCFArrayApplyBlock(description, v41);
    CFRelease(v22);
  }
  if (*((unsigned char *)v43 + 24))
  {
LABEL_53:
    _Block_object_dispose(&v42, 8);
    goto LABEL_19;
  }
  uint64_t v23 = (const void *)CGPDFStreamCreateFilterChain(v15, &v49);
  if (!v23 || v49)
  {
    if (!v23) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (CGPDFDictionaryGetArray(*((CGPDFDictionaryRef *)v16 + 1), "Index", &v50))
  {
    if (v50)
    {
      size_t v24 = *((void *)v50 + 2);
      if (v24)
      {
LABEL_51:
        goto LABEL_52;
      }
      double v25 = v16 + 16;
      if (v24)
      {
        size_t v26 = 0;
        while (CGPDFArrayGetInteger(v50, v26, &v47))
        {
          size_t v27 = v26 + 1;
          if (!CGPDFArrayGetInteger(v50, v27, &v46)) {
            break;
          }
          section = xref_stream_read_section((uint64_t)v23, v51, v47, v46);
          if (!section) {
            goto LABEL_52;
          }
          double v29 = section;
          double v30 = (void *)*v25;
          double v31 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
          *double v31 = v30;
          v31[1] = v29;
          *double v25 = v31;
          size_t v26 = v27 + 1;
          if (v26 >= v24) {
            goto LABEL_56;
          }
        }
        goto LABEL_51;
      }
    }
    else
    {
      double v25 = v16 + 16;
    }
    double v31 = (void *)*v25;
    if (*v25)
    {
LABEL_56:
      double v36 = 0;
      do
      {
        double v37 = v31;
        double v31 = (void *)*v31;
        *double v37 = v36;
        double v36 = v37;
      }
      while (v31);
    }
    else
    {
      double v37 = 0;
    }
    *double v25 = v37;
  }
  else
  {
    double v32 = xref_stream_read_section((uint64_t)v23, v51, 0, v48);
    if (!v32)
    {
LABEL_52:
      CFRelease(v23);
      goto LABEL_53;
    }
    double v33 = v32;
    uint64_t v34 = *((void *)v16 + 2);
    double v35 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    *double v35 = v34;
    v35[1] = v33;
    *((void *)v16 + 2) = v35;
  }
  CFRelease(v23);
  _Block_object_dispose(&v42, 8);
  if ((DWORD2(v38[0]) - 5) <= 4) {
    pdf_object_release_compound_value((uint64_t)v38);
  }
  return v16;
}

void xref_stream_release(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (uint64_t **)a1[2];
    if (v2)
    {
      do
      {
        free(v2[1]);
        uint64_t v2 = (uint64_t **)*v2;
      }
      while (v2);
      uint64_t v3 = (void *)a1[2];
      if (v3)
      {
        do
        {
          uint64_t v4 = (void *)*v3;
          free(v3);
          uint64_t v3 = v4;
        }
        while (v4);
      }
    }
    float64x2_t v5 = (const void *)a1[1];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

uint64_t __xref_stream_read_sections_block_invoke(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  uint64_t result = CFNumberGetTypeID();
  if (v4 == result)
  {
    int valuePtr = 0;
    uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
    if (result)
    {
      if (valuePtr == 6) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

void *xref_stream_read_section(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a4 > 0x155555555555555) {
    return 0;
  }
  uint64_t v8 = malloc_type_calloc(1uLL, 24 * a4 + 16, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v8)
  {
    *uint64_t v8 = a3;
    v8[1] = a4;
    if (a4)
    {
      uint64_t v16 = 0;
      unint64_t v29 = a4;
      while (2)
      {
        uint64_t v17 = 0;
        double v30 = &v8[3 * v16 + 2];
        do
        {
          unint64_t v18 = a2[v17];
          if (v18)
          {
            BOOL v19 = 0;
            uint64_t v20 = 0;
            uint64_t v21 = 0;
            while (1)
            {
              int v22 = CGPDFSourceGetc(a1, v9, v10, v11, v12, v13, v14, v15);
              if (v22 == -1) {
                break;
              }
              uint64_t v20 = v22 | (unint64_t)(v20 << 8);
              BOOL v19 = ++v21 >= v18;
              if (v18 == v21) {
                goto LABEL_12;
              }
            }
            if (!v19) {
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v20 = 0;
LABEL_12:
            *(&v31 + v17) = v20;
          }
          ++v17;
        }
        while (v17 != 3);
        if (*a2) {
          uint64_t v23 = v31;
        }
        else {
          uint64_t v23 = 1;
        }
        if (v23 == 2)
        {
          _OWORD *v30 = v32;
          double v25 = &v8[3 * v16];
          *((_WORD *)v25 + 16) = 0;
          char v26 = *((unsigned char *)v25 + 34) | 3;
        }
        else if (v23 == 1)
        {
          __int16 v27 = WORD4(v32);
          *(void *)double v30 = v32;
          double v25 = &v8[3 * v16];
          *((_WORD *)v25 + 16) = v27;
          char v26 = *((unsigned char *)v25 + 34) & 0xFC | 1;
        }
        else
        {
          if (v23)
          {
LABEL_26:
            free(v8);
            return 0;
          }
          __int16 v24 = WORD4(v32);
          *(void *)double v30 = v32;
          double v25 = &v8[3 * v16];
          *((_WORD *)v25 + 16) = v24;
          char v26 = *((unsigned char *)v25 + 34) & 0xFC;
        }
        *((unsigned char *)v25 + 34) = v26;
        if (++v16 != v29) {
          continue;
        }
        break;
      }
    }
  }
  return v8;
}

uint64_t CGPDFXRefStreamGetObject(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1;
  do
  {
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      return 0;
    }
    entrCGFloat y = xref_stream_get_entry(*(void **)(v8[1] + 16), a2, a3);
  }
  while (!entry);
  uint64_t v16 = *entry;
  if ((*((unsigned char *)entry + 18) & 2) != 0)
  {
    if (!v16) {
      return 0;
    }
    double v25 = (const void **)*a1;
    uint64_t v26 = pdf_xref_resolve(*a1, v16, 0);
    if (!v26) {
      return 0;
    }
    uint64_t v27 = v26;
    double v28 = CGPDFObjectCopyAssociation(v26, "ObjectStream");
    if (v28)
    {
      uint64_t v33 = v28;
      uint64_t Object = CGPDFObjectStreamGetObject((uint64_t)v28, a2, a3, a4, v29, v30, v31, v32);
    }
    else
    {
      if (*(_DWORD *)(v27 + 8) != 9) {
        return 0;
      }
      double v35 = (const void *)CGPDFObjectStreamCreate(v25, *(void *)(v27 + 32));
      if (!v35) {
        return 0;
      }
      uint64_t v33 = (const void *)CGPDFObjectSetAssociation(v27, v35, "ObjectStream");
      uint64_t Object = CGPDFObjectStreamGetObject((uint64_t)v33, a2, a3, a4, v36, v37, v38, v39);
      if (!v33) {
        return Object;
      }
    }
    CFRelease(v33);
    return Object;
  }
  if (!v16) {
    return 0;
  }
  CGPDFSourceSetPosition(*(void *)(a1[2] + 8), v16, v10, v11, v12, v13, v14, v15);
  uint64_t v23 = (uint64_t *)a1[2];

  return pdf_object_scanner_read_indirect_object(v23, a4, v17, v18, v19, v20, v21, v22);
}

void *xref_stream_get_entry(void *result, unint64_t a2, unsigned __int16 a3)
{
  if (result)
  {
    while (1)
    {
      uint64_t v3 = (void *)result[1];
      unint64_t v4 = a2 - *v3;
      if (a2 >= *v3 && a2 < v3[1] + *v3 && LOWORD(v3[3 * v4 + 4]) == a3) {
        break;
      }
      uint64_t result = (void *)*result;
      if (!result) {
        return result;
      }
    }
    return &v3[3 * v4 + 2];
  }
  return result;
}

BOOL CGPDFXRefStreamGetEntry(uint64_t a1, unint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      break;
    }
    entrCGFloat y = xref_stream_get_entry(*(void **)(v7[1] + 16), a2, a3);
    if (entry)
    {
      if ((*((unsigned char *)entry + 18) & 2) != 0)
      {
        *(_DWORD *)a4 = 1;
        *(void *)(a4 + 8) = *entry;
        *(void *)(a4 + 16) = entry[1];
      }
      else
      {
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = *entry;
      }
      *(unsigned char *)(a4 + 24) = *((unsigned char *)entry + 18) & 1;
      *(_WORD *)(a4 + 26) = *((_WORD *)entry + 8);
      return v7 != 0;
    }
  }
  return v7 != 0;
}

uint64_t CGPDFXRefStreamPrint(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (FILE *)(a2 ? a2 : *MEMORY[0x1E4F143D8]);
    uint64_t v3 = *(void **)(result + 8);
    if (v3)
    {
      do
      {
        uint64_t v11 = v3;
        unint64_t v4 = (void *)v3[1];
        uint64_t result = fprintf(v2, "xref stream %p:\n", v4);
        float64x2_t v5 = (void *)v4[2];
        if (v5)
        {
          uint64_t v6 = 0;
          do
          {
            uint64_t v7 = (void *)v5[1];
            fprintf(v2, "  Section %zu\n", v6);
            fprintf(v2, "    start = %ld\n", *v7);
            uint64_t result = fprintf(v2, "    count = %ld\n", v7[1]);
            if ((uint64_t)v7[1] >= 1)
            {
              uint64_t v8 = 0;
              uint64_t v9 = (char *)v7 + 34;
              do
              {
                if (*v9) {
                  uint64_t v10 = "used";
                }
                else {
                  uint64_t v10 = "free";
                }
                fprintf(v2, "    Entry %ld %hu (%s)\n", v8 + *v7, *((unsigned __int16 *)v9 - 1), v10);
                if ((*v9 & 2) != 0) {
                  uint64_t result = fprintf(v2, "      Stream: %lu index: %ld\n");
                }
                else {
                  uint64_t result = fprintf(v2, "      Offset: %lld\n");
                }
                v9 += 24;
                ++v8;
              }
              while (v8 < v7[1]);
            }
            ++v6;
            float64x2_t v5 = (void *)*v5;
          }
          while (v5);
        }
        uint64_t v3 = (void *)*v11;
      }
      while (*v11);
    }
  }
  return result;
}

uint64_t PBPageLayoutPkg::PBTextLine::formatText(PBPageLayoutPkg::PBTextLine *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "bbox");
  }
  if ((*((unsigned char *)this + 36) & 2) != 0) {
    PB::TextFormatter::format(a2, "rotation", *((float *)this + 8));
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "textRange");
  }
  if (*((unsigned char *)this + 36)) {
    PB::TextFormatter::format(a2, "uniCharStart");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t PBPageLayoutPkg::PBTextLine::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 36)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  if ((*(unsigned char *)(v3 + 36) & 2) != 0)
  {
    float v6 = *(float *)(v3 + 32);
    return PB::Writer::write(a2, v6);
  }
  return this;
}

uint64_t PBPageLayoutPkg::PBTextLine::readFrom(PBPageLayoutPkg::PBTextLine *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_46;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_41:
          uint64_t v25 = 0;
          goto LABEL_46;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 3u:
        operator new();
      case 4u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v28);
          *((void *)a2 + 1) += 4;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_47;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        uint64_t v25 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_46;
      }
      unint64_t v31 = v20 + 1;
      char v32 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v31;
      v25 |= (unint64_t)(v32 & 0x7F) << v29;
      if ((v32 & 0x80) == 0) {
        break;
      }
      v29 += 7;
      unint64_t v20 = v31;
      BOOL v14 = v30++ > 8;
      if (v14) {
        goto LABEL_41;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v25 = 0;
    }
LABEL_46:
    *((void *)this + 3) = v25;
LABEL_47:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_47;
  }
  return result;
}

void PBPageLayoutPkg::PBTextLine::~PBTextLine(PBPageLayoutPkg::PBTextLine *this)
{
  PBPageLayoutPkg::PBTextLine::~PBTextLine(this);

  JUMPOUT(0x18532A2A0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1ED094628;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

uint64_t CGPDFFontCreateWithObject(uint64_t a1)
{
  if (a1 && *(_DWORD *)(a1 + 8) == 8) {
    return CGPDFFontCreate(*(CGPDFDictionary **)(a1 + 32));
  }
  else {
    return 0;
  }
}

uint64_t CGPDFFontCreate(CGPDFDictionary *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (char *)CGPDFDictionaryCopyAssociation((uint64_t)a1, "Font");
  if (v2) {
    return (uint64_t)v2;
  }
  if (CGPDFFontGetTypeID_onceToken != -1) {
    dispatch_once(&CGPDFFontGetTypeID_onceToken, &__block_literal_global_3992);
  }
  uint64_t cftype = pdf_create_cftype();
  unint64_t v2 = (char *)cftype;
  if (!cftype) {
    return (uint64_t)v2;
  }
  unint64_t v12 = 0;
  *(void *)(cftype + 16) = a1;
  v14.__sig = 0;
  *(void *)v14.__opaque = 0;
  pthread_mutexattr_init(&v14);
  pthread_mutexattr_settype(&v14, 2);
  pthread_mutex_init((pthread_mutex_t *)(v2 + 136), &v14);
  pthread_mutexattr_destroy(&v14);
  unsigned int font_subtype = get_font_subtype(a1);
  *((_DWORD *)v2 + 50) = font_subtype;
  if (font_subtype > 7) {
    goto LABEL_10;
  }
  if (((1 << font_subtype) & 0x3C) != 0) {
    goto LABEL_11;
  }
  if (((1 << font_subtype) & 0xC2) != 0)
  {
    v2[24] = 1;
  }
  else
  {
LABEL_10:
    *((_DWORD *)v2 + 50) = 2;
  }
LABEL_11:
  if (CGPDFDictionaryGetName(a1, "BaseFont", &v12)) {
    *((void *)v2 + 4) = v12;
  }
  *((_DWORD *)v2 + 10) = 0;
  int v6 = *((_DWORD *)v2 + 50);
  if (v6 == 4 || v6 == 2)
  {
    uint64_t v7 = (char *)*((void *)v2 + 4);
    if (!v7)
    {
LABEL_33:
      *((void *)v2 + 7) = 0x3F50624DD2F1A9FCLL;
      *((void *)v2 + 8) = 0;
      *((void *)v2 + 9) = 0;
      *((void *)v2 + 10) = 0x3F50624DD2F1A9FCLL;
      *((void *)v2 + 11) = 0;
      *((void *)v2 + 12) = 0;
      *(CGRect *)(v2 + 104) = CGRectNull;
      return CGPDFDictionarySetAssociation((uint64_t)a1, v2, "Font");
    }
    int base14_name = get_base14_name(v7);
    if (base14_name >= 15) {
      int v9 = 0;
    }
    else {
      int v9 = base14_name;
    }
    *((_DWORD *)v2 + 10) = v9;
    int v6 = *((_DWORD *)v2 + 50);
  }
  if (v6 == 1)
  {
    value[0] = 0;
    CGPDFDictionaryRef v13 = 0;
    if (CGPDFDictionaryGetArray(*((CGPDFDictionaryRef *)v2 + 2), "DescendantFonts", value))
    {
      if (value[0] && *((void *)value[0] + 2) == 1)
      {
        if (!CGPDFArrayGetDictionary(value[0], 0, &v13))
        {
          pdf_error("invalid descendant font for Type0 font.", v12);
          goto LABEL_41;
        }
        if ((~get_font_subtype(v13) & 6) != 0)
        {
          pdf_error("invalid descendant font subtype for Type0 font.", v12);
          goto LABEL_41;
        }
        uint64_t v10 = CGPDFFontCreate(v13);
        *((void *)v2 + 6) = v10;
        if (v10)
        {
          int v6 = *((_DWORD *)v2 + 50);
          goto LABEL_28;
        }
      }
      else
      {
      }
    }
    else
    {
    }
LABEL_41:
    CFRelease(v2);
    return 0;
  }
LABEL_28:
  if (v6 != 5) {
    goto LABEL_33;
  }
  if (!CGPDFDictionaryGetNumbers(a1, "FontMatrix", (uint64_t)value, (CGPDFArray *)6))
  {
    goto LABEL_41;
  }
  long long v11 = v16;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)value;
  *(_OWORD *)(v2 + 72) = v11;
  *(_OWORD *)(v2 + 88) = v17;
  if (!CGPDFDictionaryGetRect(a1, "FontBBox", (double *)v2 + 13))
  {
    goto LABEL_41;
  }
  if (*((_DWORD *)v2 + 50) != 5) {
    return CGPDFDictionarySetAssociation((uint64_t)a1, v2, "Font");
  }
  return (uint64_t)v2;
}

uint64_t get_font_subtype(CGPDFDictionary *a1)
{
  value = 0;
  if (CGPDFDictionaryGetName(a1, "Subtype", (const char **)&value))
  {
    uint64_t v1 = value;
    if (!strcmp(value, "Type1"))
    {
      return 2;
    }
    else if (!strcmp(v1, "MMType1"))
    {
      return 3;
    }
    else if (!strcmp(v1, "TrueType"))
    {
      return 4;
    }
    else if (!strcmp(v1, "Type3"))
    {
      return 5;
    }
    else if (!strcmp(v1, "Type0"))
    {
      return 1;
    }
    else if (!strcmp(v1, "CIDFontType0"))
    {
      return 6;
    }
    else if (!strcmp(v1, "CIDFontType2"))
    {
      return 7;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t __CGPDFFontGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFFontGetTypeID_class);
  CGPDFFontGetTypeID_id = result;
  return result;
}

void CGPDFFontFinalize(uint64_t a1)
{
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 136));
  CGPDFAdvancesRelease(*(void ****)(a1 + 208));
  unint64_t v2 = *(const void **)(a1 + 224);
  if (v2) {
    CFRelease(v2);
  }
  CGPDFEncodingRelease(*(void *)(a1 + 216));
  uint64_t v3 = *(void *)(a1 + 232);
  if (v3)
  {
    int v4 = *(const void **)(v3 + 24);
    if (v4) {
      CFRelease(v4);
    }
    free(*(void **)v3);
    free(*(void **)(v3 + 8));
    free((void *)v3);
  }
  uint64_t v5 = *(const void **)(a1 + 240);
  if (v5) {
    CFRelease(v5);
  }
  int v6 = *(const void **)(a1 + 248);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 48);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 288);
  if (v8) {
    CFRelease(v8);
  }
  CGFontIndexMapRelease(*(char **)(a1 + 264));
  CGPDFFontMutatorRelease(*(char **)(a1 + 296));
  int v9 = *(void **)(a1 + 272);

  free(v9);
}

void CGPDFFontRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeRef CGPDFFontRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

uint64_t CGPDFFontGetDictionary(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t CGPDFFontGetType(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 200);
  }
  return result;
}

uint64_t CGPDFFontGetName(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t CGPDFFontIsBase14(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result + 40);
    if (v2)
    {
      if (a2) {
        *a2 = v2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ***CGPDFFontGetAdvances(void ***result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    while (*(_DWORD *)(v1 + 200) == 1)
    {
      uint64_t v1 = *(void *)(v1 + 48);
      if (!v1) {
        return 0;
      }
    }
    int v2 = (atomic_ullong *)(v1 + 208);
    uint64_t result = (void ***)atomic_load_explicit((atomic_ullong *volatile)(v1 + 208), memory_order_acquire);
    if (!result)
    {
      uint64_t result = CGPDFAdvancesCreate(v1);
      uint64_t v3 = 0;
      atomic_compare_exchange_strong(v2, (unint64_t *)&v3, (unint64_t)result);
      if (v3)
      {
        CGPDFAdvancesRelease(result);
        return (void ***)v3;
      }
    }
  }
  return result;
}

__n128 CGPDFFontGetFontMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = (const CGAffineTransform *)(a1 + 56);
  if (!a1) {
    int v2 = &CGAffineTransformIdentity;
  }
  long long v3 = *(_OWORD *)&v2->c;
  *(_OWORD *)a2 = *(_OWORD *)&v2->a;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)&v2->tx;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

CGFloat CGPDFFontGetFontBBox(uint64_t a1)
{
  if (!a1) {
    return INFINITY;
  }
  if (*(_DWORD *)(a1 + 200) == 5) {
    return *(double *)(a1 + 104);
  }
  unint64_t FontDescriptor = CGPDFFontGetFontDescriptor(a1);
  long long v3 = &CGRectNull;
  if (FontDescriptor) {
    long long v3 = (const CGRect *)(FontDescriptor + 48);
  }
  return v3->origin.x;
}

unint64_t CGPDFFontGetFontDescriptor(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  while (*(_DWORD *)(v1 + 200) == 1)
  {
    uint64_t v1 = *(void *)(v1 + 48);
    if (!v1) {
      return 0;
    }
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v1 + 248), memory_order_acquire);
  if (!explicit)
  {
    if (CGPDFFontDescriptorGetTypeID_onceToken != -1) {
      dispatch_once(&CGPDFFontDescriptorGetTypeID_onceToken, &__block_literal_global_16887);
    }
    uint64_t cftype = pdf_create_cftype();
    unint64_t explicit = cftype;
    if (!cftype) {
      goto LABEL_21;
    }
    CGPDFDictionaryRef dict = 0;
    CGPDFInteger value = 0;
    *(void *)(cftype + 16) = v1;
    *(void *)(cftype + 24) = 0;
    if (CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)(v1 + 16), "FontDescriptor", &dict))
    {
      if (!CGPDFDictionaryGetRect(dict, "FontBBox", (double *)(explicit + 48))) {
        *(CGRect *)(explicit + 48) = CGRectNull;
      }
      *(_DWORD *)(explicit + 40) = 0;
      if (CGPDFDictionaryGetInteger(dict, "Flags", &value)) {
        *(_DWORD *)(explicit + 40) = value;
      }
      *(void *)(explicit + 32) = dict;
      goto LABEL_21;
    }
    unsigned int v4 = *(_DWORD *)(v1 + 40);
    if (v4)
    {
      if (v4 <= 0xE)
      {
        uint64_t v5 = off_1E529F9D0[v4 - 1];
        long long v6 = *(_OWORD *)(v5 + 24);
        *(_OWORD *)(explicit + 48) = *(_OWORD *)(v5 + 8);
        *(_OWORD *)(explicit + 64) = v6;
        *(_DWORD *)(explicit + 40) = *((_DWORD *)v5 + 10);
        goto LABEL_21;
      }
    }
    else
    {
      CFRelease((CFTypeRef)explicit);
    }
    unint64_t explicit = 0;
LABEL_21:
    uint64_t v7 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v1 + 248), (unint64_t *)&v7, explicit);
    if (v7)
    {
      if (explicit) {
        CFRelease((CFTypeRef)explicit);
      }
      return v7;
    }
  }
  return explicit;
}

uint64_t CGPDFFontCreateToUnicodeCMap(uint64_t result)
{
  if (result)
  {
    CGPDFObjectRef value = 0;
    BOOL Object = CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(result + 16), "ToUnicode", &value);
    __n128 result = 0;
    if (Object) {
      return CGPDFCMapCreate((uint64_t)value);
    }
  }
  return result;
}

uint64_t CGPDFFontGetToUnicodeCMap(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = (pthread_mutex_t *)(a1 + 136);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  uint64_t v3 = *(void *)(a1 + 240);
  if (!v3)
  {
    uint64_t v3 = CGPDFFontCreateToUnicodeCMap(a1);
    *(void *)(a1 + 240) = v3;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

atomic_ullong *CGPDFFontGetEncoding(atomic_ullong *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    if (*((_DWORD *)result + 50) == 1)
    {
      return 0;
    }
    else
    {
      int v2 = result + 27;
      __n128 result = (atomic_ullong *)atomic_load_explicit(result + 27, memory_order_acquire);
      if (!result)
      {
        __n128 result = (atomic_ullong *)CGPDFEncodingCreate(v1);
        uint64_t v3 = 0;
        atomic_compare_exchange_strong(v2, (unint64_t *)&v3, (unint64_t)result);
        if (v3)
        {
          CGPDFEncodingRelease((uint64_t)result);
          return (atomic_ullong *)v3;
        }
      }
    }
  }
  return result;
}

uint64_t CGPDFFontGetDescendant(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

void *CGPDFFontGetCIDSystemInfo(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    while (*(_DWORD *)(v1 + 200) == 1)
    {
      uint64_t v1 = *(void *)(v1 + 48);
      if (!v1) {
        return 0;
      }
    }
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 136));
    int v2 = *(void **)(v1 + 232);
    if (v2) {
      goto LABEL_24;
    }
    if ((*(_DWORD *)(v1 + 200) & 0xFFFFFFFE) == 6)
    {
      CGPDFStringRef value = 0;
      CGPDFInteger v15 = 0;
      CGPDFDictionaryRef dict = 0;
      CGPDFStringRef v13 = 0;
      int v2 = 0;
      if (!CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)(v1 + 16), "CIDSystemInfo", &dict))
      {
LABEL_23:
        *(void *)(v1 + 232) = v2;
LABEL_24:
        pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
        return v2;
      }
      if (CGPDFDictionaryGetString(dict, "Registry", &value)
        && CGPDFDictionaryGetString(dict, "Ordering", &v13)
        && CGPDFDictionaryGetInteger(dict, "Supplement", &v15))
      {
        size_t v3 = 1;
        int v2 = malloc_type_calloc(1uLL, 0x28uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        CGPDFStringRef v4 = value;
        if (value)
        {
          if (*((void *)value + 3)) {
            decrypt_string((uint64_t)value);
          }
          size_t v3 = *((void *)v4 + 9) + 1;
        }
        uint64_t v5 = (char *)malloc_type_malloc(v3, 0x566C45D1uLL);
        __CFSetLastAllocationEventName();
        *int v2 = v5;
        CGPDFStringRef v6 = value;
        if (*((void *)value + 3)) {
          decrypt_string((uint64_t)value);
        }
        strcpy(v5, (const char *)v6 + 80);
        CGPDFStringRef v7 = v13;
        if (v13)
        {
          if (*((void *)v13 + 3)) {
            decrypt_string((uint64_t)v13);
          }
          size_t v8 = *((void *)v7 + 9) + 1;
        }
        else
        {
          size_t v8 = 1;
        }
        uint64_t v10 = (char *)malloc_type_malloc(v8, 0x566C45D1uLL);
        __CFSetLastAllocationEventName();
        v2[1] = v10;
        CGPDFStringRef v11 = v13;
        if (*((void *)v13 + 3)) {
          decrypt_string((uint64_t)v13);
        }
        strcpy(v10, (const char *)v11 + 80);
        *((_DWORD *)v2 + 4) = v15;
        *((_DWORD *)v2 + 8) = 0;
        goto LABEL_23;
      }
    }
    int v2 = 0;
    goto LABEL_23;
  }
  return 0;
}

unint64_t CGPDFFontGetCMap(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (*(_DWORD *)(result + 200) == 1)
    {
      __n128 result = atomic_load_explicit((atomic_ullong *volatile)(result + 224), memory_order_acquire);
      if (!result)
      {
        CGPDFObjectRef value = 0;
        BOOL Object = CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(v1 + 16), "Encoding", &value);
        __n128 result = 0;
        if (Object)
        {
          __n128 result = CGPDFCMapCreate((uint64_t)value);
          uint64_t v3 = 0;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v1 + 224), (unint64_t *)&v3, result);
          if (v3)
          {
            if (result) {
              CFRelease((CFTypeRef)result);
            }
            return v3;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *CGPDFFontGetROSUnicodeCMap(char *result)
{
  if (result)
  {
    while (1)
    {
      if (!result[24]) {
        return 0;
      }
      if (*((_DWORD *)result + 50) != 1) {
        break;
      }
      __n128 result = (char *)*((void *)result + 6);
      if (!result) {
        return result;
      }
    }
    __n128 result = (char *)CGPDFFontGetCIDSystemInfo((uint64_t)result);
    if (result)
    {
      unint64_t v1 = (const char **)result;
      __n128 result = (char *)*((void *)result + 3);
      if (!result)
      {
        os_unfair_lock_lock((os_unfair_lock_t)v1 + 8);
        if (v1[3])
        {
LABEL_11:
          os_unfair_lock_unlock((os_unfair_lock_t)v1 + 8);
          return (char *)v1[3];
        }
        size_t v2 = strlen(*v1);
        size_t v3 = strlen(v1[1]);
        CGPDFStringRef v4 = (char *)malloc_type_malloc(v2 + v3 + 35, 0x7BD994B3uLL);
        sprintf_l(v4, 0, "%s-%s-UCS2", *v1, v1[1]);
        uint64_t v5 = CGPDFCMapCreateWithName((uint64_t)v4);
        v1[3] = (const char *)v5;
        if (v5)
        {
          free(v4);
          goto LABEL_11;
        }
        free(v4);
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 8);
        return 0;
      }
    }
  }
  return result;
}

uint64_t CGPDFFontGetCIDToGlyphMap(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    while (1)
    {
      if (!*(unsigned char *)(v1 + 24)) {
        return 0;
      }
      int v2 = *(_DWORD *)(v1 + 200);
      if (v2 != 1) {
        break;
      }
      uint64_t v1 = *(void *)(v1 + 48);
      if (!v1) {
        return 0;
      }
    }
    if (v2 != 7) {
      return 0;
    }
    __n128 result = *(void *)(v1 + 264);
    if (!result)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 136));
      if (!*(void *)(v1 + 264) && !*(unsigned char *)(v1 + 256))
      {
        *(void *)(v1 + 264) = CGPDFCIDToGlyphMapCreate((char *)v1);
        *(unsigned char *)(v1 + 256) = 1;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
      return *(void *)(v1 + 264);
    }
  }
  return result;
}

BOOL CGPDFFontIsEmbedded(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  while (1)
  {
    int v1 = *(_DWORD *)(a1 + 200);
    if (v1 != 1) {
      break;
    }
    a1 = *(void *)(a1 + 48);
    if (!a1) {
      return 0;
    }
  }
  BOOL v2 = 0;
  switch(v1)
  {
    case 2:
    case 3:
      unint64_t font_stream_20162 = get_font_stream_20162(a1, &v5);
      goto LABEL_10;
    case 4:
      unint64_t font_stream_20162 = (unint64_t)get_font_stream(a1);
      goto LABEL_10;
    case 6:
      unint64_t font_stream_20162 = get_font_stream_8518(a1, &v6);
      goto LABEL_10;
    case 7:
      unint64_t font_stream_20162 = (unint64_t)get_font_stream_20452(a1);
LABEL_10:
      BOOL v2 = font_stream_20162 != 0;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t CGPDFFontGetFont(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    BOOL v2 = (pthread_mutex_t *)(a1 + 136);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    if (!*(unsigned char *)(v1 + 280)) {
      load_font(v1);
    }
    uint64_t v1 = *(void *)(v1 + 288);
    pthread_mutex_unlock(v2);
  }
  return v1;
}

void load_font(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 280))
  {
    switch(*(_DWORD *)(a1 + 200))
    {
      case 1:
        uint64_t v19 = *(void *)(a1 + 48);
        if (v19)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v19 + 136));
          uint64_t v20 = *(void *)(a1 + 48);
          if (!*(void *)(v20 + 240))
          {
            uint64_t v21 = CGPDFFontCreateToUnicodeCMap(a1);
            uint64_t v20 = *(void *)(a1 + 48);
            *(void *)(v20 + 240) = v21;
          }
          pthread_mutex_unlock((pthread_mutex_t *)(v20 + 136));
          uint64_t v22 = *(void *)(a1 + 48);
        }
        else
        {
          uint64_t v22 = 0;
        }
        Font = (const void *)CGPDFFontGetFont(v22);
        if (!Font)
        {
          *(void *)(a1 + 288) = 0;
          goto LABEL_98;
        }
        uint64_t v48 = (uint64_t)Font;
        CFRetain(Font);
        *(void *)(a1 + 288) = v48;
        int v49 = *(const void **)(*(void *)(a1 + 48) + 240);
        if (!v49) {
          goto LABEL_98;
        }
        uint64_t v50 = v48;
        goto LABEL_97;
      case 2:
      case 3:
        CGPDFInteger value = 0;
        CGPDFInteger v75 = 0;
        int v74 = 0;
        unint64_t font_stream_20162 = (void *)get_font_stream_20162(a1, &v74);
        if (!font_stream_20162) {
          goto LABEL_53;
        }
        uint64_t v3 = (uint64_t)font_stream_20162;
        int v4 = v74;
        if (v74 == 2)
        {
          int v5 = (CGPDFDictionary *)font_stream_20162[6];
          if (CGPDFDictionaryGetInteger(v5, "Length1", &value)
            && CGPDFDictionaryGetInteger(v5, "Length2", &v75)
            && !((unint64_t)value >> 62)
            && (v75 & 0x8000000000000000) == 0
            && !((unint64_t)v75 >> 62))
          {
            size_t v6 = value + v75 + 540;
            CGPDFStringRef v7 = malloc_type_malloc(v6, 0x566C45D1uLL);
            __CFSetLastAllocationEventName();
            if (v7)
            {
              uint64_t Data = CGPDFStreamGetData(v3, (uint64_t)v7, v75 + value);
              if (Data == v75 + value)
              {
                uint64_t v9 = 0;
                CGPDFInteger v10 = (CGPDFInteger)v7 + value + v75;
                *(void *)&long long v11 = 0x3030303030303030;
                *((void *)&v11 + 1) = 0x3030303030303030;
                do
                {
                  CGPDFInteger v12 = v10 + v9;
                  *(_OWORD *)CGPDFInteger v12 = v11;
                  *(_OWORD *)(v12 + 16) = v11;
                  *(unsigned char *)(v12 + 32) = 10;
                  v9 += 33;
                }
                while (v9 != 528);
                *(_DWORD *)(v10 + 536) = 174813793;
                *(void *)(v10 + 528) = *(void *)"cleartomark\n";
                CGPDFStringRef v13 = CGDataProviderCreateWithData(0, v7, v6, (CGDataProviderReleaseDataCallback)type1_free);
                pthread_mutexattr_t v14 = (CGFont *)CGFontCreateWithDataProviderAndData((uint64_t)v13, 0);
                if (v14)
                {
                  CGFontRef v15 = v14;
                  CFDataRef v16 = CGDataProviderCopyData(v13);
                  if (v16)
                  {
                    CFDataRef v17 = v16;
                    CGFontSetIntProperty((uint64_t)v15, 2);
                    CGFontSetProperty((uint64_t)v15, @"com.apple.CoreGraphics.CGPDFFontData", v17);
                    CFDataRef v18 = v17;
LABEL_48:
                    CFRelease(v18);
                    goto LABEL_49;
                  }
                  goto LABEL_49;
                }
                CGDataProviderRelease(v13);
                if (!a1) {
                  goto LABEL_94;
                }
              }
              else
              {
                free(v7);
              }
            }
          }
        }
        else
        {
          int v76 = 0;
          uint64_t v40 = CGPDFStreamCreateDataProvider(font_stream_20162, &v76);
          CGPDFStringRef v13 = (CGDataProvider *)v40;
          if (v40)
          {
            if (!v76)
            {
              uint64_t v41 = (CGFont *)CGFontCreateWithDataProviderAndData(v40, 0);
              if (v41)
              {
                CGFontRef v15 = v41;
                CFDataRef v42 = CGDataProviderCopyData(v13);
                if (v42)
                {
                  CFDataRef v43 = v42;
                  CGFontSetIntProperty((uint64_t)v15, v4);
                  CGFontSetProperty((uint64_t)v15, @"com.apple.CoreGraphics.CGPDFFontData", v43);
                  CFDataRef v18 = v43;
                  goto LABEL_48;
                }
LABEL_49:
                CGDataProviderRelease(v13);
                goto LABEL_95;
              }
            }
          }
          CGDataProviderRelease(v13);
        }
LABEL_53:
        char v45 = *(char **)(a1 + 32);
        if (!v45)
        {
LABEL_94:
          CGFontRef v15 = 0;
LABEL_95:
          *(void *)(a1 + 288) = v15;
          uint64_t v58 = CGPDFFontCreateToUnicodeCMap(a1);
          *(void *)(a1 + 240) = v58;
          if (v58)
          {
            int v49 = (const void *)v58;
            uint64_t v50 = *(void *)(a1 + 288);
LABEL_97:
            CGFontSetProperty(v50, @"com.apple.CoreGraphics.CGPDFFontToUnicodeCMap", v49);
          }
LABEL_98:
          if (*(void *)(a1 + 288)) {
            goto LABEL_137;
          }
          if ((*(_DWORD *)(a1 + 200) - 2) > 2) {
            goto LABEL_109;
          }
          uint64_t v59 = malloc_type_calloc(1uLL, 0x1228uLL, 0x33BCE901uLL);
          __CFSetLastAllocationEventName();
          if (!v59) {
            goto LABEL_109;
          }
          *uint64_t v59 = a1;
          unint64_t FontDescriptor = CGPDFFontGetFontDescriptor(a1);
          uint64_t Style = CGPDFFontDescriptorGetStyle(FontDescriptor);
          pthread_once(&choose_font_for_style_once, (void (*)(void))create_agars);
          if (Style)
          {
            if (*(unsigned char *)(Style + 18))
            {
              uint64_t v62 = agar_TimesLTMM;
              if (agar_TimesLTMM) {
                goto LABEL_104;
              }
            }
            else
            {
              uint64_t v62 = agar_HelveticaLTMM;
              if (agar_HelveticaLTMM)
              {
LABEL_104:
                v59[3] = v62;
                *((_DWORD *)v59 + 2) = (int)*(double *)Style;
                *((double *)v59 + 2) = *(double *)(Style + 8) * -3.14159265 / 180.0;
                Encoding = CGPDFFontGetEncoding((atomic_ullong *)*v59);
                if (CGPDFEncodingGetGlyphVectorWithFont((size_t)Encoding, *(void *)(v59[3] + 64), *(unsigned __int8 *)(Style + 20), (_WORD *)v59 + 16))
                {
                  *((_DWORD *)v59 + 1160) = 0;
                  *(void *)(a1 + 296) = v59;
LABEL_137:
                  *(unsigned char *)(a1 + 280) = 1;
                  return;
                }
                goto LABEL_108;
              }
            }
          }
          v59[3] = 0;
LABEL_108:
          CGPDFFontMutatorRelease((char *)v59);
LABEL_109:
          *(void *)(a1 + 296) = 0;
          unint64_t v64 = CGPDFFontGetFontDescriptor(a1);
          uint64_t v65 = CGPDFFontDescriptorGetStyle(v64);
          if (v65)
          {
            uint64_t v66 = v65;
            uint64_t v67 = *(const char **)(a1 + 32);
            if (v67 && !strcmp(v67, "LucidaConsole") || *(unsigned char *)(v66 + 19))
            {
              if (*(unsigned char *)(v66 + 17) || *(double *)v66 > 78.0)
              {
                int v69 = *(unsigned __int8 *)(v66 + 16);
                uint64_t v70 = "Courier-BoldOblique";
                uint64_t v71 = "Courier-Bold";
              }
              else
              {
                int v69 = *(unsigned __int8 *)(v66 + 16);
                uint64_t v70 = "Courier-Oblique";
                uint64_t v71 = "Courier";
              }
            }
            else if (*(unsigned char *)(v66 + 18))
            {
              if (*(unsigned char *)(v66 + 17) || *(double *)v66 > 111.0)
              {
                int v69 = *(unsigned __int8 *)(v66 + 16);
                uint64_t v70 = "Times-BoldItalic";
                uint64_t v71 = "Times-Bold";
              }
              else
              {
                int v69 = *(unsigned __int8 *)(v66 + 16);
                uint64_t v70 = "Times-Italic";
                uint64_t v71 = "Times-Roman";
              }
            }
            else if (*(unsigned char *)(v66 + 17) || *(double *)v66 > 114.0)
            {
              int v69 = *(unsigned __int8 *)(v66 + 16);
              uint64_t v70 = "Helvetica-BoldOblique";
              uint64_t v71 = "Helvetica-Bold";
            }
            else
            {
              int v69 = *(unsigned __int8 *)(v66 + 16);
              uint64_t v70 = "Helvetica-Oblique";
              uint64_t v71 = "Helvetica";
            }
            if (v69) {
              BOOL v72 = (char *)v70;
            }
            else {
              BOOL v72 = (char *)v71;
            }
            CGFontRef v68 = CGFontCreateWithName(v72);
            if (v68)
            {
              if (*(_DWORD *)(a1 + 200) == 4) {
                CGRect v73 = "TrueType";
              }
              else {
                CGRect v73 = "Type1";
              }
            }
          }
          else
          {
            CGFontRef v68 = 0;
          }
          *(void *)(a1 + 288) = v68;
          *(unsigned char *)(a1 + 304) = 1;
          goto LABEL_137;
        }
        CGPDFInteger value = 0;
        CGFontRef v15 = 0;
        if (!CGPDFFontNameHasAlias(v45, (char **)&value)) {
          goto LABEL_95;
        }
        CGFontRef v15 = CGFontCreateWithName((char *)value);
        if (!v15) {
          goto LABEL_58;
        }
        *(_DWORD *)(a1 + 200) = 4;
        CGPDFInteger v46 = (char *)value;
        if (strcmp(v45, (const char *)value))
        {
LABEL_58:
          CGPDFInteger v46 = (char *)value;
        }
        free(v46);
        goto LABEL_95;
      case 4:
        CGPDFStreamRef font_stream = get_font_stream(a1);
        if (!font_stream) {
          goto LABEL_51;
        }
        LODWORD(value) = 0;
        uint64_t DataProvider = CGPDFStreamCreateDataProvider(font_stream, (int *)&value);
        uint64_t v25 = (CGDataProvider *)DataProvider;
        if (!DataProvider || value || (unint64_t v26 = CGFontCreateWithDataProviderAndData(DataProvider, 0)) == 0)
        {
          CGDataProviderRelease(v25);
LABEL_51:
          TrueTypeOrCIDType2 = CGPDFFontFindTrueTypeOrCIDType2(a1);
          goto LABEL_90;
        }
        char v27 = v26;
        CFDataRef v28 = CGDataProviderCopyData(v25);
        if (!v28) {
          goto LABEL_86;
        }
        CFDataRef v29 = v28;
        uint64_t v30 = (uint64_t)v27;
        int v31 = 1;
        goto LABEL_85;
      case 5:
        goto LABEL_98;
      case 6:
        LODWORD(value) = 0;
        LODWORD(v75) = 0;
        font_stream_8518 = (const void *)get_font_stream_8518(a1, (int *)&value);
        if (!font_stream_8518) {
          goto LABEL_70;
        }
        uint64_t v25 = (CGDataProvider *)CGPDFStreamCreateDataProvider(font_stream_8518, (int *)&v75);
        if (v25 && !v75)
        {
          uint64_t v33 = CGPDFFontGetToUnicodeCMap(a1);
          if (v33 && cmap_vtable && (uint64_t v34 = *(uint64_t (**)(void))(cmap_vtable + 80)) != 0)
          {
            double v35 = (const void *)v34(*(void *)(v33 + 16));
            char v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, (uint64_t)v35);
            if (v35) {
              CFRelease(v35);
            }
          }
          else
          {
            char v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, 0);
          }
          if (v27)
          {
            CFDataRef v51 = CGDataProviderCopyData(v25);
            if (!v51) {
              goto LABEL_86;
            }
            CFDataRef v29 = v51;
            int v31 = value;
            uint64_t v30 = (uint64_t)v27;
            goto LABEL_85;
          }
        }
        CGDataProviderRelease(v25);
LABEL_70:
        uint64_t v52 = *(char **)(a1 + 32);
        if (!v52) {
          goto LABEL_89;
        }
        uint64_t v53 = 0;
        while (v52[v53] - 91 >= 0xFFFFFFE6)
        {
          if (++v53 == 6)
          {
            uint64_t v54 = 7;
            if (v52[6] != 43) {
              uint64_t v54 = 0;
            }
            v52 += v54;
            break;
          }
        }
        CGFontRef v55 = CGFontCreateWithName(v52);
        if (!v55) {
          goto LABEL_89;
        }
        char v27 = v55;
        uint64_t v56 = (const char *)(*(uint64_t (**)(void))(*((void *)v55 + 2) + 144))(*((void *)v55 + 14));
        if (!strcmp(v56, ".PhoneFallback") || (CGPDFFontHasMatchingROS(a1, v27) & 1) == 0)
        {
          CFRelease(v27);
          goto LABEL_89;
        }
LABEL_91:
        *(void *)(a1 + 288) = v27;
        goto LABEL_98;
      case 7:
        CGPDFStreamRef font_stream_20452 = get_font_stream_20452(a1);
        if (!font_stream_20452) {
          goto LABEL_88;
        }
        LODWORD(value) = 0;
        uint64_t v25 = (CGDataProvider *)CGPDFStreamCreateDataProvider(font_stream_20452, (int *)&value);
        if (!v25 || value) {
          goto LABEL_87;
        }
        uint64_t v37 = CGPDFFontGetToUnicodeCMap(a1);
        if (v37 && cmap_vtable && (uint64_t v38 = *(uint64_t (**)(void))(cmap_vtable + 80)) != 0)
        {
          uint64_t v39 = (const void *)v38(*(void *)(v37 + 16));
          char v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, (uint64_t)v39);
          if (v39) {
            CFRelease(v39);
          }
        }
        else
        {
          char v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, 0);
        }
        if (v27)
        {
          CFDataRef v57 = CGDataProviderCopyData(v25);
          if (v57)
          {
            CFDataRef v29 = v57;
            uint64_t v30 = (uint64_t)v27;
            int v31 = 5;
LABEL_85:
            CGFontSetIntProperty(v30, v31);
            CGFontSetProperty((uint64_t)v27, @"com.apple.CoreGraphics.CGPDFFontData", v29);
            CFRelease(v29);
          }
LABEL_86:
          CGDataProviderRelease(v25);
        }
        else
        {
LABEL_87:
          CGDataProviderRelease(v25);
LABEL_88:
          char v27 = CGPDFFontFindTrueTypeOrCIDType2(a1);
          if (!v27)
          {
LABEL_89:
            TrueTypeOrCIDType2 = CGPDFFontMatchCID(a1);
LABEL_90:
            char v27 = TrueTypeOrCIDType2;
          }
        }
        goto LABEL_91;
      default:
        abort();
    }
  }
}

uint64_t CGPDFFontGetMutator(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    BOOL v2 = (pthread_mutex_t *)(a1 + 136);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    if (!*(unsigned char *)(v1 + 280)) {
      load_font(v1);
    }
    uint64_t v1 = *(void *)(v1 + 296);
    pthread_mutex_unlock(v2);
  }
  return v1;
}

void *CGPDFFontGetProcedures(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 200) != 5) {
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  BOOL v2 = *(void **)(a1 + 272);
  if (!v2)
  {
    uint64_t v3 = *(CGPDFDictionary **)(a1 + 16);
    CGPDFDictionaryRef value = 0;
    if (CGPDFDictionaryGetDictionary(v3, "CharProcs", &value))
    {
      Encoding = CGPDFFontGetEncoding((atomic_ullong *)a1);
      if (Encoding)
      {
        uint64_t v5 = (uint64_t)Encoding;
        BOOL v2 = malloc_type_calloc(1uLL, 0x800uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        if (v2)
        {
          for (unint64_t i = 0; i != 256; ++i)
          {
            NameForIndedouble x = (const char *)CGPDFEncodingGetNameForIndex(v5, i);
            CGPDFStreamRef v9 = 0;
            if (NameForIndex && CGPDFDictionaryGetStream(value, NameForIndex, &v9)) {
              v2[i] = v9;
            }
          }
          *(void *)(a1 + 272) = v2;
          goto LABEL_4;
        }
      }
      else
      {
      }
    }
    else
    {
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
    return 0;
  }
LABEL_4:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  return v2;
}

void *PDFFunctionSetCreate(uint64_t a1)
{
  BOOL v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2) {
    *BOOL v2 = a1;
  }
  return v2;
}

void *PDFFunctionSetAddFunctionWithRange(uint64_t *a1, uint64_t a2, unint64_t a3, char a4)
{
  __n128 result = 0;
  if (a1 && a2)
  {
    if (!a1[1]) {
      a1[1] = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &callbacks_4060);
    }
    if (*(void *)(a2 + 48) > a3
      && (v9 = *a1, CGPDFInteger v10 = malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL), __CFSetLastAllocationEventName(), v10))
    {
      *(_DWORD *)CGPDFInteger v10 = 1;
      v10[1] = v9;
      *((_DWORD *)v10 + 6) = *(_DWORD *)(a2 + 16);
      v10[4] = 0;
      v10[5] = a3;
      *((unsigned char *)v10 + 56) = a4;
      long long v11 = *(uint64_t (**)(void))(a2 + 88);
      if (v11 && (uint64_t v12 = v11(*(void *)(a2 + 24))) != 0)
      {
        CGPDFStringRef v13 = (const void *)v12;
        if (v9) {
          uint64_t v14 = *(void *)(v9 + 40);
        }
        else {
          uint64_t v14 = 0;
        }
        v10[6] = PDFMetaSetAddDictionary(v14, v13);
        CFRelease(v13);
        v10[2] = 0;
        *((unsigned char *)v10 + 57) = 1;
      }
      else
      {
        CFRetain((CFTypeRef)a2);
        v10[2] = a2;
        v10[6] = PDFXRefTableAddObject(*(void **)(v10[1] + 464));
      }
      CGPDFDictionaryRef value = 0;
      if (!CFSetGetValueIfPresent((CFSetRef)a1[1], v10, (const void **)&value))
      {
        CFSetAddValue((CFMutableSetRef)a1[1], v10);
        CGPDFDictionaryRef value = v10;
      }
      PDFShadingRelease(v10);
      CGFontRef v15 = (const void **)a1[2];
      if (!v15)
      {
        CGFontRef v15 = CGOrderedSetCreate();
        a1[2] = (uint64_t)v15;
      }
      CGOrderedSetAddValue((CFSetRef *)v15, value);
      return value;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t function_hash(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

BOOL function_equal(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(void *)(a1 + 32) == *(void *)(a2 + 32)
    && *(void *)(a1 + 40) == *(void *)(a2 + 40))
  {
    return *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  }
  return 0;
}

void function_release(int a1, void *a2)
{
}

_DWORD *function_retain(uint64_t a1, _DWORD *a2)
{
  __n128 result = a2;
  if (a2) {
    ++*a2;
  }
  return result;
}

BOOL PDFFunctionSetEmitDefinitions(BOOL result)
{
  char context = 0;
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      do
      {
        *(void *)(v1 + 16) = 0;
        CFArrayRef v3 = *(const __CFArray **)(v2 + 8);
        v5.uint64_t length = CFArrayGetCount(v3);
        v5.CFIndex location = 0;
        CFArrayApplyFunction(v3, v5, (CFArrayApplierFunction)emit_function_definition, &context);
        CGOrderedSetRelease((const void **)v2);
        uint64_t v2 = *(void *)(v1 + 16);
      }
      while (v2);
      return context != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void emit_function_definition(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 57))
  {
    int v4 = PDFStreamCreateWithObjectNumber(*(void *)(a1 + 8), *(void *)(a1 + 48));
    PDFDocumentBeginObject(*v4, v4[1], v5, v6, v7, v8, v9, v10);
    PDFDocumentPrintf(*v4, (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v91);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/FunctionType 0", v17, v18, v19, v20, v21, v22, v92);
    char v23 = *(void **)(a1 + 16);
    double v100 = a2;
    if (v23)
    {
      unint64_t v24 = v23[4];
      uint64_t v25 = v23[6];
    }
    else
    {
      unint64_t v24 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v103 = v25;
    unint64_t v26 = v24 + v24 * (*(void *)(a1 + 40) - *(void *)(a1 + 32));
    if (v26 <= 0x100) {
      unint64_t v27 = 0x1000 / v26;
    }
    else {
      unint64_t v27 = 16;
    }
    v101[0] = v27;
    v101[1] = 8;
    v101[2] = v24;
    if (v23)
    {
      CFDataRef v28 = (uint64_t *)v23[5];
      float64x2_t v102 = v28;
      CFDataRef v29 = (_OWORD *)v23[7];
    }
    else
    {
      CFDataRef v28 = 0;
      CFDataRef v29 = 0;
      float64x2_t v102 = 0;
    }
    int v104 = v29;
    uint64_t v30 = malloc_type_malloc(8 * v24, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    unsigned int v105 = v30;
    int v31 = malloc_type_malloc(8 * v25, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    unsigned int v106 = v31;
    if (v28)
    {
      uint64_t v99 = 0;
    }
    else
    {
      CFDataRef v28 = (uint64_t *)malloc_type_malloc(16 * v24, 0x566C45D1uLL);
      __CFSetLastAllocationEventName();
      if (v24)
      {
        int32x2_t v38 = vdup_n_s32(*(unsigned char *)(a1 + 56) == 0);
        v39.i64[0] = v38.u32[0];
        v39.i64[1] = v38.u32[1];
        int8x16_t v40 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v39, 0x3FuLL)), (int8x16_t)xmmword_1850CDA80, (int8x16_t)xmmword_1850CD8C0);
        uint64_t v41 = (int8x16_t *)v28;
        unint64_t v42 = v24;
        do
        {
          *v41++ = v40;
          --v42;
        }
        while (v42);
      }
      float64x2_t v102 = v28;
      uint64_t v99 = v28;
    }
    CFDataRef v43 = v30;
    if (v29)
    {
      double v98 = 0;
    }
    else
    {
      CFDataRef v29 = malloc_type_malloc(16 * v25, 0x566C45D1uLL);
      __CFSetLastAllocationEventName();
      if (v25)
      {
        uint64_t v44 = v29;
        do
        {
          *v44++ = xmmword_1850CDA90;
          --v25;
        }
        while (v25);
      }
      evaluate_range(a1, v24 - 1, v101, (uint64_t)v29);
      int v104 = v29;
      double v98 = v29;
    }
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BitsPerSample %d", v32, v33, v34, v35, v36, v37, 8);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Size [", v45, v46, v47, v48, v49, v50, v93);
    if (v24)
    {
      unint64_t v57 = v24;
      do
      {
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%d", v51, v52, v53, v54, v55, v56, v27);
        --v57;
      }
      while (v57);
    }
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"]", v51, v52, v53, v54, v55, v56, v94);
    if (v24 && v28)
    {
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Domain [", v58, v59, v60, v61, v62, v63, v95);
      uint64_t v70 = 2 * v24;
      if (2 * v24)
      {
        do
        {
          uint64_t v71 = *v28++;
          PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%f", v64, v65, v66, v67, v68, v69, v71);
          --v70;
        }
        while (v70);
      }
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"]", v64, v65, v66, v67, v68, v69, v96);
    }
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Range [", v58, v59, v60, v61, v62, v63, v95);
    unint64_t v78 = *(void *)(a1 + 32);
    if (v78 <= *(void *)(a1 + 40))
    {
      uint64_t v79 = (double *)&v29[v78] + 1;
      do
      {
        double v80 = *(v79 - 1);
        if (fabs(v80) == INFINITY) {
          double v80 = -2.0;
        }
        double v81 = *v79;
        v79 += 2;
        double v82 = v81;
        if (fabs(v81) == INFINITY) {
          double v83 = 3.0;
        }
        else {
          double v83 = v82;
        }
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%f", v72, v73, v74, v75, v76, v77, *(uint64_t *)&v80);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%f", v84, v85, v86, v87, v88, v89, *(uint64_t *)&v83);
        ++v78;
      }
      while (v78 <= *(void *)(a1 + 40));
    }
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"]", v72, v73, v74, v75, v76, v77, v97);
    PDFStreamBeginData((CGDataConsumerRef)v4);
    emit_samples((uint64_t *)a1, (uint64_t)v4, v24 - 1, v101);
    PDFStreamEndData(v4);
    free(v31);
    free(v43);
    free(v99);
    free(v98);
    PDFStreamEnd((CFDataRef *)v4);
    PDFStreamRelease((uint64_t)v4);
    uint64_t v90 = *(const void **)(a1 + 16);
    if (v90) {
      CFRelease(v90);
    }
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 57) = 1;
    a2 = v100;
  }
  *a2 = 1;
}

unsigned char *ToUnicode::write_epilog(ToUnicode *this, CGDataConsumer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CGDataConsumerPrintf(this, "endcmap\n", a3, a4, a5, a6, a7, a8, v29);
  CGDataConsumerPrintf(this, "CMapName currentdict /CMap defineresource pop\n", v10, v11, v12, v13, v14, v15, v30);
  CGDataConsumerPrintf(this, "end\n", v16, v17, v18, v19, v20, v21, v31);

  return CGDataConsumerPrintf(this, "end\n", v22, v23, v24, v25, v26, v27, a9);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<ToUnicode::bfrange>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(6 * a1);
}

void ToUnicode::write<std::set<unsigned short>>(uint64_t a1, uint64_t a2, void *a3)
{
  CFMutableStringRef Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable) {
    return;
  }
  uint64_t v7 = Mutable;
  CGDataConsumerRef v8 = CGDataConsumerCreateWithCFData(Mutable);
  if (!v8) {
    goto LABEL_91;
  }
  uint64_t v15 = v8;
  CGDataConsumerPrintf(v8, "/CIDInit /ProcSet findresource begin\n", v9, v10, v11, v12, v13, v14, v216);
  CGDataConsumerPrintf(v15, "12 dict begin\n", v16, v17, v18, v19, v20, v21, v217);
  CGDataConsumerPrintf(v15, "begincmap\n", v22, v23, v24, v25, v26, v27, v218);
  CGDataConsumerPrintf(v15, "/CIDSystemInfo <<\n", v28, v29, v30, v31, v32, v33, v219);
  CGDataConsumerPrintf(v15, "  /Registry (Adobe)\n", v34, v35, v36, v37, v38, v39, v220);
  CGDataConsumerPrintf(v15, "  /Ordering (UCS)\n", v40, v41, v42, v43, v44, v45, v221);
  CGDataConsumerPrintf(v15, "  /Supplement 0\n", v46, v47, v48, v49, v50, v51, v222);
  CGDataConsumerPrintf(v15, ">> def\n", v52, v53, v54, v55, v56, v57, v223);
  CGDataConsumerPrintf(v15, "/CMapName /Adobe-Identity-UCS def\n", v58, v59, v60, v61, v62, v63, v224);
  CGDataConsumerPrintf(v15, "/CMapType 2 def\n", v64, v65, v66, v67, v68, v69, v225);
  CGDataConsumerPrintf(v15, "1 begincodespacerange\n", v70, v71, v72, v73, v74, v75, v226);
  CGDataConsumerPrintf(v15, "<", v76, v77, v78, v79, v80, v81, v227);
  CGDataConsumerPrintf(v15, "00", v82, v83, v84, v85, v86, v87, v228);
  CGDataConsumerPrintf(v15, "00", v88, v89, v90, v91, v92, v93, v229);
  CGDataConsumerPrintf(v15, "><", v94, v95, v96, v97, v98, v99, v230);
  CGDataConsumerPrintf(v15, "FF", v100, v101, v102, v103, v104, v105, v231);
  CGDataConsumerPrintf(v15, "FF", v106, v107, v108, v109, v110, v111, v232);
  CGDataConsumerPrintf(v15, ">\n", v112, v113, v114, v115, v116, v117, v233);
  CGDataConsumerPrintf(v15, "endcodespacerange\n", v118, v119, v120, v121, v122, v123, v234);
  v250[0] = 0;
  v250[1] = 0;
  uint64_t v249 = (uint64_t *)v250;
  char v124 = *(void **)(*(void *)a1 + 16);
  if (v124)
  {
    get_unimap(v124);
    uint64_t v125 = 256;
  }
  else
  {
    uint64_t v125 = 0;
  }
  std::vector<unsigned short>::vector(&__p, v125);
  unint64_t v133 = *(void **)(*(void *)a1 + 16);
  uint64_t v242 = a2;
  CFDataRef v243 = v7;
  uint64_t v241 = a1;
  if (v133 && (uint64_t explicit = atomic_load_explicit(v133 + 11, memory_order_acquire)) != 0) {
    PropertCGFloat y = CGPropertiesGetProperty(explicit, @"com.apple.CoreGraphics.CGPDFFontToUnicodeCMap");
  }
  else {
    PropertCGFloat y = 0;
  }
  char v138 = (void *)*a3;
  uint64_t v137 = a3 + 1;
  unsigned int v136 = v138;
  if (v138 == v137)
  {
LABEL_45:
    uint64_t v175 = v249;
    if (v249 == (uint64_t *)v250)
    {
      unsigned int v176 = 0;
      int v177 = 0;
      unsigned int v191 = 0;
    }
    else
    {
      unsigned int v176 = 0;
      int v177 = 0;
      unint64_t v178 = 0;
      do
      {
        unsigned __int16 v179 = 0;
        int v180 = *((unsigned __int16 *)v175 + 13);
        int v181 = *((unsigned __int16 *)v175 + 14);
        while (v180 + v179 == *((unsigned __int16 *)v175 + 13) && v181 + v179 == *((unsigned __int16 *)v175 + 14))
        {
          unsigned int v182 = (uint64_t *)v175[1];
          if (v182)
          {
            do
            {
              unsigned int v183 = v182;
              unsigned int v182 = (uint64_t *)*v182;
            }
            while (v182);
          }
          else
          {
            do
            {
              unsigned int v183 = (uint64_t *)v175[2];
              BOOL v174 = *v183 == (void)v175;
              uint64_t v175 = v183;
            }
            while (!v174);
          }
          ++v179;
          uint64_t v175 = v183;
          if (v183 == (uint64_t *)v250)
          {
            uint64_t v175 = (uint64_t *)v250;
            break;
          }
        }
        __int16 v184 = v179 + v180 - 1;
        if ((unint64_t)v177 >= v178)
        {
          unint64_t v185 = 0xAAAAAAAAAAAAAAABLL * ((v177 - v176) >> 1) + 1;
          if (v185 > 0x2AAAAAAAAAAAAAAALL) {
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v178 - (void)v176) >> 1) > v185) {
            unint64_t v185 = 0x5555555555555556 * ((uint64_t)(v178 - (void)v176) >> 1);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - (void)v176) >> 1) >= 0x1555555555555555) {
            unint64_t v186 = 0x2AAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v186 = v185;
          }
          if (v186) {
            unint64_t v186 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<ToUnicode::bfrange>>(v186);
          }
          else {
            int v126 = 0;
          }
          uint64_t v187 = (char *)(v186 + 2 * ((v177 - v176) >> 1));
          *(_WORD *)uint64_t v187 = v180;
          *((_WORD *)v187 + 1) = v184;
          *((_WORD *)v187 + 2) = v181;
          uint64_t v188 = v187;
          while (v177 != v176)
          {
            int v189 = *(_DWORD *)(v177 - 6);
            v177 -= 6;
            __int16 v190 = *((_WORD *)v177 + 2);
            *(_DWORD *)(v188 - 6) = v189;
            v188 -= 6;
            *((_WORD *)v188 + 2) = v190;
          }
          unint64_t v178 = v186 + 6 * (void)v126;
          int v177 = v187 + 6;
          if (v176) {
            operator delete(v176);
          }
          unsigned int v176 = v188;
        }
        else
        {
          *(_WORD *)int v177 = v180;
          *((_WORD *)v177 + 1) = v184;
          *((_WORD *)v177 + 2) = v181;
          v177 += 6;
        }
      }
      while (v175 != (uint64_t *)v250);
      unsigned int v191 = v176;
    }
    while (v177 != v191)
    {
      uint64_t v192 = v191;
      unint64_t v193 = 0;
      do
      {
        unsigned int v194 = v191;
        v191 += 6;
        if (v193 > 0x30) {
          break;
        }
        ++v193;
      }
      while (v191 != v177);
      if (v192 != v191)
      {
        CGDataConsumerPrintf(v15, "%d beginbfrange\n", (uint64_t)v127, v128, v129, v130, v131, v132, -85 * ((v191 - v192) >> 1));
        do
        {
          CGDataConsumerPrintf(v15, "<%0*x><%0*x><%04x>\n", v195, v196, v197, v198, v199, v200, 4);
          BOOL v174 = v192 == v194;
          v192 += 6;
        }
        while (!v174);
        CGDataConsumerPrintf(v15, "endbfrange\n", v195, v196, v197, v198, v199, v200, v239);
      }
    }
    if (v176) {
      operator delete(v176);
    }
    ToUnicode::write_epilog(v15, v126, (uint64_t)v127, v128, v129, v130, v131, v132, v235);
    uint64_t v7 = v243;
    if (__p)
    {
      uint64_t v248 = __p;
      operator delete(__p);
    }
    std::__tree<unsigned long>::destroy(v250[0]);
    CGDataConsumerClose((uint64_t)v15);
    CFRelease(v15);
    uint64_t v201 = PDFStreamCreateWithObjectNumber(**(void **)(*(void *)v241 + 8), v242);
    PDFDocumentBeginObject(*v201, v201[1], v202, v203, v204, v205, v206, v207);
    PDFDocumentPrintf(*v201, (uint64_t)"<<", v208, v209, v210, v211, v212, v213, v240);
    PDFStreamBeginData((CGDataConsumerRef)v201);
    BytePtr = CFDataGetBytePtr(v243);
    CFIndex Length = CFDataGetLength(v243);
    CGDataConsumerPutBytes(v201[3], (uint64_t)BytePtr, Length);
    PDFStreamEndData(v201);
    PDFStreamEnd((CFDataRef *)v201);
    PDFStreamRelease((uint64_t)v201);
LABEL_91:
    CFRelease(v7);
    return;
  }
  while (1)
  {
    uint64_t v139 = *((unsigned __int16 *)v136 + 13);
    unsigned __int16 v246 = *((_WORD *)v136 + 13);
    if (Property)
    {
      unsigned __int16 v244 = 0;
      unsigned int CIDsForGlyphs = CGFontGetCIDsForGlyphs(v133, &v246, 1, &v244);
      uint64_t v127 = __p;
      if (CIDsForGlyphs)
      {
        if (v248 == __p) {
          goto LABEL_95;
        }
        if (cmap_vtable && (uint64_t v141 = *(uint64_t (**)(void, void))(cmap_vtable + 64)) != 0) {
          uint64_t UnicharsForGlyph = v141(Property[2], v244);
        }
        else {
          uint64_t UnicharsForGlyph = 0;
        }
        unint64_t v145 = &v244;
      }
      else
      {
        if (v248 == __p) {
          goto LABEL_95;
        }
        if (cmap_vtable && (int v144 = *(uint64_t (**)(void, void))(cmap_vtable + 64)) != 0) {
          uint64_t UnicharsForGlyph = v144(Property[2], v246);
        }
        else {
          uint64_t UnicharsForGlyph = 0;
        }
        unint64_t v145 = &v246;
      }
      unsigned __int16 v143 = *v145;
    }
    else
    {
      if (v248 == __p) {
        goto LABEL_95;
      }
      uint64_t UnicharsForGlyph = CGFontGetUnicharsForGlyph((uint64_t)v133, v139, __p);
      unsigned __int16 v143 = v246;
    }
    unsigned __int16 v245 = v143;
    if (!UnicharsForGlyph) {
      goto LABEL_39;
    }
    if (UnicharsForGlyph != 1) {
      break;
    }
    if (v248 == __p) {
      goto LABEL_95;
    }
    __int16 v146 = *(_WORD *)__p;
    *((_WORD *)std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v249, v143, &v245)+ 14) = v146;
LABEL_39:
    uint64_t v172 = (void *)v136[1];
    if (v172)
    {
      do
      {
        uint64_t v173 = v172;
        uint64_t v172 = (void *)*v172;
      }
      while (v172);
    }
    else
    {
      do
      {
        uint64_t v173 = (void *)v136[2];
        BOOL v174 = *v173 == (void)v136;
        unsigned int v136 = v173;
      }
      while (!v174);
    }
    unsigned int v136 = v173;
    if (v173 == v137) {
      goto LABEL_45;
    }
  }
  CGDataConsumerPrintf(v15, "1 beginbfchar\n", (uint64_t)v127, v128, v129, v130, v131, v132, v235);
  CGDataConsumerPrintf(v15, "<%0*x>", v147, v148, v149, v150, v151, v152, 4);
  CGDataConsumerPrintf(v15, "<", v153, v154, v155, v156, v157, v158, v236);
  unint64_t v165 = 0;
  while (1)
  {
    if (v165) {
      CGDataConsumerPrintf(v15, " ", v159, v160, v161, v162, v163, v164, v237);
    }
    if (v165 >= (v248 - (unsigned char *)__p) >> 1) {
      break;
    }
    CGDataConsumerPrintf(v15, "%04x", v159, v160, v161, v162, v163, v164, *((_WORD *)__p + v165++));
    if (UnicharsForGlyph == v165)
    {
      CGDataConsumerPrintf(v15, ">\n", v159, v160, v161, v162, v163, v164, v237);
      CGDataConsumerPrintf(v15, "endbfchar\n", v166, v167, v168, v169, v170, v171, v238);
      goto LABEL_39;
    }
  }
LABEL_95:
  __break(1u);
}

void sub_184DC6378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
}

void ToUnicode::write<std::vector<unsigned short>>(uint64_t a1, uint64_t a2, void *a3)
{
  CFMutableStringRef Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable) {
    return;
  }
  uint64_t v6 = Mutable;
  CGDataConsumerRef v7 = CGDataConsumerCreateWithCFData(Mutable);
  if (!v7) {
    goto LABEL_77;
  }
  uint64_t v14 = v7;
  CGDataConsumerPrintf(v7, "/CIDInit /ProcSet findresource begin\n", v8, v9, v10, v11, v12, v13, v195);
  CGDataConsumerPrintf(v14, "12 dict begin\n", v15, v16, v17, v18, v19, v20, v196);
  CGDataConsumerPrintf(v14, "begincmap\n", v21, v22, v23, v24, v25, v26, v197);
  CGDataConsumerPrintf(v14, "/CIDSystemInfo <<\n", v27, v28, v29, v30, v31, v32, v198);
  CGDataConsumerPrintf(v14, "  /Registry (Adobe)\n", v33, v34, v35, v36, v37, v38, v199);
  CGDataConsumerPrintf(v14, "  /Ordering (UCS)\n", v39, v40, v41, v42, v43, v44, v200);
  CGDataConsumerPrintf(v14, "  /Supplement 0\n", v45, v46, v47, v48, v49, v50, v201);
  CGDataConsumerPrintf(v14, ">> def\n", v51, v52, v53, v54, v55, v56, v202);
  CGDataConsumerPrintf(v14, "/CMapName /Adobe-Identity-UCS def\n", v57, v58, v59, v60, v61, v62, v203);
  CGDataConsumerPrintf(v14, "/CMapType 2 def\n", v63, v64, v65, v66, v67, v68, v204);
  CGDataConsumerPrintf(v14, "1 begincodespacerange\n", v69, v70, v71, v72, v73, v74, v205);
  CGDataConsumerPrintf(v14, "<", v75, v76, v77, v78, v79, v80, v206);
  CGDataConsumerPrintf(v14, "00", v81, v82, v83, v84, v85, v86, v207);
  CGDataConsumerPrintf(v14, "><", v87, v88, v89, v90, v91, v92, v208);
  CGDataConsumerPrintf(v14, "FF", v93, v94, v95, v96, v97, v98, v209);
  CGDataConsumerPrintf(v14, ">\n", v99, v100, v101, v102, v103, v104, v210);
  CGDataConsumerPrintf(v14, "endcodespacerange\n", v105, v106, v107, v108, v109, v110, v211);
  v225[0] = 0;
  v225[1] = 0;
  char v224 = (uint64_t *)v225;
  uint64_t v111 = *(void **)(*(void *)a1 + 16);
  if (v111)
  {
    get_unimap(v111);
    uint64_t v112 = 256;
  }
  else
  {
    uint64_t v112 = 0;
  }
  std::vector<unsigned short>::vector(&__p, v112);
  uint64_t v119 = *(void *)(*(void *)a1 + 16);
  uint64_t v218 = a2;
  CFDataRef v219 = v6;
  if (v119 && (uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v119 + 88), memory_order_acquire)) != 0) {
    PropertCGFloat y = CGPropertiesGetProperty(explicit, @"com.apple.CoreGraphics.CGPDFFontToUnicodeCMap");
  }
  else {
    PropertCGFloat y = 0;
  }
  for (unint64_t i = 0; i != 256; ++i)
  {
    if (Property)
    {
      uint64_t v123 = __p;
      if (v223 == __p) {
        goto LABEL_81;
      }
      if (!cmap_vtable) {
        continue;
      }
      char v124 = *(uint64_t (**)(void, void))(cmap_vtable + 64);
      if (!v124) {
        continue;
      }
      uint64_t UnicharsForGlyph = v124(Property[2], (unsigned __int16)i);
    }
    else
    {
      if (i >= (uint64_t)(a3[1] - *a3) >> 1 || v223 == __p) {
        goto LABEL_81;
      }
      uint64_t UnicharsForGlyph = CGFontGetUnicharsForGlyph(*(void *)(*(void *)a1 + 16), *(unsigned __int16 *)(*a3 + 2 * i), __p);
    }
    uint64_t v126 = UnicharsForGlyph;
    unsigned __int16 v221 = i;
    if (UnicharsForGlyph)
    {
      if (UnicharsForGlyph != 1)
      {
        CGDataConsumerPrintf(v14, "1 beginbfchar\n", (uint64_t)v123, v114, v115, v116, v117, v118, v212);
        CGDataConsumerPrintf(v14, "<%0*x>", v128, v129, v130, v131, v132, v133, 2);
        CGDataConsumerPrintf(v14, "<", v134, v135, v136, v137, v138, v139, v213);
        unint64_t v146 = 0;
        while (1)
        {
          if (v146) {
            CGDataConsumerPrintf(v14, " ", v140, v141, v142, v143, v144, v145, v214);
          }
          if (v146 >= (v223 - (unsigned char *)__p) >> 1) {
            break;
          }
          CGDataConsumerPrintf(v14, "%04x", v140, v141, v142, v143, v144, v145, *((_WORD *)__p + v146++));
          if (v126 == v146)
          {
            CGDataConsumerPrintf(v14, ">\n", v140, v141, v142, v143, v144, v145, v214);
            CGDataConsumerPrintf(v14, "endbfchar\n", v147, v148, v149, v150, v151, v152, v215);
            goto LABEL_30;
          }
        }
LABEL_81:
        __break(1u);
        return;
      }
      if (v223 == __p) {
        goto LABEL_81;
      }
      __int16 v127 = *(_WORD *)__p;
      *((_WORD *)std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v224, i, &v221)+ 14) = v127;
    }
LABEL_30:
    ;
  }
  uint64_t v153 = v224;
  if (v224 == (uint64_t *)v225)
  {
    uint64_t v154 = 0;
    uint64_t v155 = 0;
    uint64_t v170 = 0;
  }
  else
  {
    uint64_t v154 = 0;
    uint64_t v155 = 0;
    unint64_t v156 = 0;
    do
    {
      unsigned __int16 v157 = 0;
      int v158 = *((unsigned __int16 *)v153 + 13);
      int v159 = *((unsigned __int16 *)v153 + 14);
      while (v158 + v157 == *((unsigned __int16 *)v153 + 13) && v159 + v157 == *((unsigned __int16 *)v153 + 14))
      {
        uint64_t v160 = (uint64_t *)v153[1];
        if (v160)
        {
          do
          {
            uint64_t v161 = v160;
            uint64_t v160 = (uint64_t *)*v160;
          }
          while (v160);
        }
        else
        {
          do
          {
            uint64_t v161 = (uint64_t *)v153[2];
            BOOL v162 = *v161 == (void)v153;
            uint64_t v153 = v161;
          }
          while (!v162);
        }
        ++v157;
        uint64_t v153 = v161;
        if (v161 == (uint64_t *)v225)
        {
          uint64_t v153 = (uint64_t *)v225;
          break;
        }
      }
      __int16 v163 = v157 + v158 - 1;
      if ((unint64_t)v155 >= v156)
      {
        unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * ((v155 - v154) >> 1) + 1;
        if (v164 > 0x2AAAAAAAAAAAAAAALL) {
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v156 - (void)v154) >> 1) > v164) {
          unint64_t v164 = 0x5555555555555556 * ((uint64_t)(v156 - (void)v154) >> 1);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (void)v154) >> 1) >= 0x1555555555555555) {
          unint64_t v165 = 0x2AAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v165 = v164;
        }
        if (v165) {
          unint64_t v165 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<ToUnicode::bfrange>>(v165);
        }
        else {
          uint64_t v113 = 0;
        }
        uint64_t v166 = (char *)(v165 + 2 * ((v155 - v154) >> 1));
        *(_WORD *)uint64_t v166 = v158;
        *((_WORD *)v166 + 1) = v163;
        *((_WORD *)v166 + 2) = v159;
        uint64_t v167 = v166;
        while (v155 != v154)
        {
          int v168 = *(_DWORD *)(v155 - 6);
          v155 -= 6;
          __int16 v169 = *((_WORD *)v155 + 2);
          *(_DWORD *)(v167 - 6) = v168;
          v167 -= 6;
          *((_WORD *)v167 + 2) = v169;
        }
        unint64_t v156 = v165 + 6 * (void)v113;
        uint64_t v155 = v166 + 6;
        if (v154) {
          operator delete(v154);
        }
        uint64_t v154 = v167;
      }
      else
      {
        *(_WORD *)uint64_t v155 = v158;
        *((_WORD *)v155 + 1) = v163;
        *((_WORD *)v155 + 2) = v159;
        v155 += 6;
      }
    }
    while (v153 != (uint64_t *)v225);
    uint64_t v170 = v154;
  }
  while (v155 != v170)
  {
    uint64_t v171 = v170;
    unint64_t v172 = 0;
    do
    {
      uint64_t v173 = v170;
      v170 += 6;
      if (v172 > 0x30) {
        break;
      }
      ++v172;
    }
    while (v170 != v155);
    if (v171 != v170)
    {
      CGDataConsumerPrintf(v14, "%d beginbfrange\n", (uint64_t)v123, v114, v115, v116, v117, v118, -85 * ((v170 - v171) >> 1));
      do
      {
        CGDataConsumerPrintf(v14, "<%0*x><%0*x><%04x>\n", v174, v175, v176, v177, v178, v179, 2);
        BOOL v162 = v171 == v173;
        v171 += 6;
      }
      while (!v162);
      CGDataConsumerPrintf(v14, "endbfrange\n", v174, v175, v176, v177, v178, v179, v216);
    }
  }
  if (v154) {
    operator delete(v154);
  }
  ToUnicode::write_epilog(v14, v113, (uint64_t)v123, v114, v115, v116, v117, v118, v212);
  uint64_t v6 = v219;
  if (__p)
  {
    char v223 = __p;
    operator delete(__p);
  }
  std::__tree<unsigned long>::destroy(v225[0]);
  CGDataConsumerClose((uint64_t)v14);
  CFRelease(v14);
  int v180 = PDFStreamCreateWithObjectNumber(**(void **)(*(void *)a1 + 8), v218);
  PDFDocumentBeginObject(*v180, v180[1], v181, v182, v183, v184, v185, v186);
  PDFDocumentPrintf(*v180, (uint64_t)"<<", v187, v188, v189, v190, v191, v192, v217);
  PDFStreamBeginData((CGDataConsumerRef)v180);
  BytePtr = CFDataGetBytePtr(v219);
  CFIndex Length = CFDataGetLength(v219);
  CGDataConsumerPutBytes(v180[3], (uint64_t)BytePtr, Length);
  PDFStreamEndData(v180);
  PDFStreamEnd((CFDataRef *)v180);
  PDFStreamRelease((uint64_t)v180);
LABEL_77:

  CFRelease(v6);
}

void sub_184DC6A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
}

void **PDFEStateCreate(void *a1, const char *a2)
{
  int v4 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    *(_DWORD *)int v4 = 1;
    v4[1] = a1;
    size_t v5 = strlen(a2);
    uint64_t v6 = (char *)malloc_type_malloc(v5 + 1, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    v4[7] = v6;
    if (v6)
    {
      strcpy(v6, a2);
    }
    else
    {
      PDFEStateRelease(v4);
      return 0;
    }
  }
  return v4;
}

void PDFEStateRelease(void **a1)
{
  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      switch(*((_DWORD *)a1 + 11))
      {
        case 3:
          free(a1[6]);
          break;
        case 4:
        case 5:
        case 6:
          CFArrayRef v3 = a1[6];
          if (v3) {
            CFRelease(v3);
          }
          break;
        case 7:
          PDFClipMaskRelease((void **)a1[6]);
          break;
        default:
          break;
      }
      free(a1[7]);
      free(a1);
    }
  }
}

uint64_t type4_op_abs(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    *a1 = v1 - 1;
    int v4 = &a1[2 * v1 - 2];
    size_t v5 = v4 + 2;
    int v6 = *((_DWORD *)v4 + 4);
    if (v6 == 258)
    {
      double v11 = fabs(*((double *)v4 + 3));
      *a1 = v1;
      *size_t v5 = 258;
      *((double *)v4 + 3) = v11;
    }
    else
    {
      if (v6 != 257)
      {
        uint64_t v2 = 0;
        int v3 = 2;
        goto LABEL_9;
      }
      CGDataConsumerRef v7 = &a1[2 * v1 - 2];
      int v10 = *((_DWORD *)v7 + 6);
      uint64_t v8 = v7 + 3;
      int v9 = v10;
      if (v10 == 0x80000000)
      {
        *a1 = v1;
        *size_t v5 = 258;
        *uint64_t v8 = 0x41E0000000000000;
      }
      else
      {
        if (v9 < 0) {
          int v9 = -v9;
        }
        *a1 = v1;
        *size_t v5 = 257;
        *(_DWORD *)uint64_t v8 = v9;
      }
    }
    return 1;
  }
  uint64_t v2 = 0;
  int v3 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_add(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) >= 3)
  {
    *a1 = v2 - 1;
    if (type4_value_add((double *)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2])) {
      return 1;
    }
    int v3 = 2;
  }
  else
  {
    int v3 = 4;
  }
  uint64_t result = 0;
  *((_DWORD *)a1 + 804) = v3;
  return result;
}

uint64_t type4_op_atan(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t result = 0;
    int v4 = 4;
LABEL_15:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  uint64_t v5 = v2 - 1;
  *a1 = v2 - 1;
  int v6 = &a1[2 * v2 - 2];
  int v7 = *((_DWORD *)v6 + 4);
  if (v7 == 258)
  {
    double v8 = *((double *)v6 + 3);
  }
  else
  {
    if (v7 != 257) {
      goto LABEL_10;
    }
    double v8 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  uint64_t v9 = v2 - 2;
  *a1 = v2 - 2;
  int v10 = &a1[2 * v2 - 4];
  uint64_t v12 = v10 + 2;
  int v11 = *((_DWORD *)v10 + 4);
  if (v11 == 258)
  {
    double v13 = *((double *)v10 + 3);
    goto LABEL_12;
  }
  if (v11 != 257)
  {
LABEL_10:
    uint64_t result = 0;
    int v4 = 2;
    goto LABEL_15;
  }
  double v13 = (double)SLODWORD(a1[2 * v9 + 3]);
LABEL_12:
  if (v8 == 0.0 && v13 == 0.0)
  {
    uint64_t result = 0;
    int v4 = 5;
    goto LABEL_15;
  }
  double v14 = atan2(v13, v8) * 180.0 / 3.14159265;
  if (v14 < 0.0) {
    double v14 = v14 + 360.0;
  }
  *a1 = v5;
  *uint64_t v12 = 258;
  *(double *)&a1[2 * v9 + 3] = v14;
  return 1;
}

uint64_t type4_op_ceiling(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  int v4 = &a1[2 * v1 - 2];
  uint64_t v5 = v4 + 2;
  int v6 = *((_DWORD *)v4 + 4);
  if (v6 == 258)
  {
    double v7 = ceil(*((double *)v4 + 3));
    *a1 = v1;
    *uint64_t v5 = 258;
    *((double *)v4 + 3) = v7;
  }
  else
  {
    if (v6 != 257)
    {
      uint64_t v2 = 0;
      int v3 = 2;
      goto LABEL_9;
    }
    *a1 = v1;
    *uint64_t v5 = 257;
  }
  return 1;
}

uint64_t type4_op_cos(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    uint64_t v5 = v2 - 1;
    *a1 = v2 - 1;
    int v6 = &a1[2 * v2 - 2];
    int v9 = *((_DWORD *)v6 + 4);
    double v8 = v6 + 2;
    int v7 = v9;
    if (v9 == 258)
    {
      double v10 = *(double *)&a1[2 * v2 + 1];
    }
    else
    {
      if (v7 != 257)
      {
        uint64_t result = 0;
        int v4 = 2;
        goto LABEL_9;
      }
      double v10 = (double)SLODWORD(a1[2 * v5 + 3]);
    }
    long double v11 = cos(v10 * 3.14159265 / 180.0);
    *a1 = v2;
    *double v8 = 258;
    *(long double *)&a1[2 * v5 + 3] = v11;
    return 1;
  }
  uint64_t result = 0;
  int v4 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_cvi(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) < 2)
  {
    LODWORD(result) = 4;
    goto LABEL_7;
  }
  char v5 = 0;
  *a1 = v2 - 1;
  int v4 = (long long *)&a1[2 * v2];
  long long v6 = *v4;
  *a1 = v2;
  if (!type4_value_cvi((uint64_t)v4, (uint64_t)&v6, &v5))
  {
    LODWORD(result) = 2;
    goto LABEL_7;
  }
  uint64_t result = 1;
  if (v5)
  {
LABEL_7:
    *((_DWORD *)a1 + 804) = result;
    return 0;
  }
  return result;
}

uint64_t type4_op_cvr(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) < 2)
  {
    int v2 = 4;
LABEL_9:
    uint64_t v8 = 0;
    *((_DWORD *)a1 + 804) = v2;
    return v8;
  }
  *a1 = v1 - 1;
  int v3 = &a1[2 * v1 - 2];
  int v5 = *((_DWORD *)v3 + 4);
  int v6 = *((_DWORD *)v3 + 5);
  int v4 = v3 + 2;
  uint64_t v7 = v4[1];
  *a1 = v1;
  if (v5 == 258)
  {
    *(_DWORD *)int v4 = 258;
    *((_DWORD *)v4 + 1) = v6;
    v4[1] = v7;
  }
  else
  {
    if (v5 != 257)
    {
      int v2 = 2;
      goto LABEL_9;
    }
    *(_DWORD *)int v4 = 258;
    *(double *)&a1[2 * v1 + 1] = (double)(int)v7;
  }
  return 1;
}

uint64_t type4_op_div(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t v2 = 0;
    int v3 = 4;
    goto LABEL_14;
  }
  uint64_t v4 = v1 - 1;
  *a1 = v1 - 1;
  int v5 = &a1[2 * v1 - 2];
  int v6 = *((_DWORD *)v5 + 4);
  if (v6 == 258)
  {
    double v7 = *((double *)v5 + 3);
  }
  else
  {
    if (v6 != 257) {
      goto LABEL_10;
    }
    double v7 = (double)SLODWORD(a1[2 * v4 + 3]);
  }
  uint64_t v8 = v1 - 2;
  *a1 = v8;
  int v9 = &a1[2 * v8];
  int v12 = *((_DWORD *)v9 + 4);
  double v10 = v9 + 2;
  int v11 = v12;
  if (v12 == 258)
  {
    double v13 = *(double *)&a1[2 * v8 + 3];
    goto LABEL_12;
  }
  if (v11 != 257)
  {
LABEL_10:
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_14;
  }
  double v13 = (double)SLODWORD(a1[2 * v8 + 3]);
LABEL_12:
  if (v7 != 0.0)
  {
    *a1 = v4;
    *double v10 = 258;
    *(double *)&a1[2 * v8 + 3] = v13 / v7;
    return 1;
  }
  uint64_t v2 = 0;
  int v3 = 5;
LABEL_14:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_exp(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t result = 0;
    int v4 = 4;
LABEL_15:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  uint64_t v5 = v2 - 1;
  *a1 = v2 - 1;
  int v6 = &a1[2 * v2 - 2];
  int v7 = *((_DWORD *)v6 + 4);
  if (v7 == 258)
  {
    double v8 = *((double *)v6 + 3);
  }
  else
  {
    if (v7 != 257) {
      goto LABEL_10;
    }
    double v8 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  uint64_t v9 = v2 - 2;
  *a1 = v2 - 2;
  double v10 = &a1[2 * v2 - 4];
  int v12 = v10 + 2;
  int v11 = *((_DWORD *)v10 + 4);
  if (v11 == 258)
  {
    double v13 = *((double *)v10 + 3);
    goto LABEL_12;
  }
  if (v11 != 257)
  {
LABEL_10:
    uint64_t result = 0;
    int v4 = 2;
    goto LABEL_15;
  }
  double v13 = (double)SLODWORD(a1[2 * v9 + 3]);
LABEL_12:
  if (v13 < 0.0 && modf(v8, &__y) != 0.0)
  {
    uint64_t result = 0;
    int v4 = 5;
    goto LABEL_15;
  }
  long double v14 = pow(v13, v8);
  *a1 = v5;
  *int v12 = 258;
  *(long double *)&a1[2 * v9 + 3] = v14;
  return 1;
}

uint64_t type4_op_floor(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  int v4 = &a1[2 * v1 - 2];
  int v7 = *((_DWORD *)v4 + 4);
  uint64_t v5 = v4 + 2;
  int v6 = v7;
  double v8 = *((double *)v5 + 1);
  if (v7 == 258)
  {
    *a1 = v1;
    *(_DWORD *)uint64_t v5 = 258;
    *(double *)&a1[2 * v1 + 1] = floor(v8);
  }
  else
  {
    if (v6 != 257)
    {
      uint64_t v2 = 0;
      int v3 = 2;
      goto LABEL_9;
    }
    *a1 = v1;
    *(_DWORD *)uint64_t v5 = 257;
    LODWORD(a1[2 * v1 + 1]) = LODWORD(v8);
  }
  return 1;
}

uint64_t type4_op_idiv(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_8:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  uint64_t v4 = v1 - 1;
  *a1 = v1 - 1;
  if (LODWORD(a1[2 * v1]) != 257 || (uint64_t v5 = v1 - 2, *a1 = v1 - 2, v6 = &a1[2 * v1 - 2], *(_DWORD *)v6 != 257))
  {
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_8;
  }
  int v7 = a1[2 * v4 + 3];
  if (!v7)
  {
    uint64_t v2 = 0;
    int v3 = 5;
    goto LABEL_8;
  }
  double v8 = &a1[2 * v5];
  int v9 = *((_DWORD *)v8 + 6) / v7;
  *a1 = v4;
  *(_DWORD *)int v6 = 257;
  *((_DWORD *)v8 + 6) = v9;
  return 1;
}

uint64_t type4_op_ln(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    uint64_t result = 0;
    int v4 = 4;
LABEL_10:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  uint64_t v5 = v2 - 1;
  *a1 = v2 - 1;
  int v6 = &a1[2 * v2 - 2];
  int v9 = *((_DWORD *)v6 + 4);
  double v8 = v6 + 2;
  int v7 = v9;
  if (v9 == 258)
  {
    double v10 = *(double *)&a1[2 * v2 + 1];
  }
  else
  {
    if (v7 != 257)
    {
      uint64_t result = 0;
      int v4 = 2;
      goto LABEL_10;
    }
    double v10 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  if (v10 < 0.0)
  {
    uint64_t result = 0;
    int v4 = 1;
    goto LABEL_10;
  }
  long double v11 = log(v10);
  *a1 = v2;
  *double v8 = 258;
  *(long double *)&a1[2 * v5 + 3] = v11;
  return 1;
}

uint64_t type4_op_log(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    uint64_t result = 0;
    int v4 = 4;
LABEL_10:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  uint64_t v5 = v2 - 1;
  *a1 = v2 - 1;
  int v6 = &a1[2 * v2 - 2];
  int v9 = *((_DWORD *)v6 + 4);
  double v8 = v6 + 2;
  int v7 = v9;
  if (v9 == 258)
  {
    double v10 = *(double *)&a1[2 * v2 + 1];
  }
  else
  {
    if (v7 != 257)
    {
      uint64_t result = 0;
      int v4 = 2;
      goto LABEL_10;
    }
    double v10 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  if (v10 < 0.0)
  {
    uint64_t result = 0;
    int v4 = 1;
    goto LABEL_10;
  }
  long double v11 = log10(v10);
  *a1 = v2;
  *double v8 = 258;
  *(long double *)&a1[2 * v5 + 3] = v11;
  return 1;
}

uint64_t type4_op_mod(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_8:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  uint64_t v4 = v1 - 1;
  *a1 = v1 - 1;
  if (LODWORD(a1[2 * v1]) != 257 || (uint64_t v5 = v1 - 2, *a1 = v1 - 2, v6 = &a1[2 * v1 - 2], *(_DWORD *)v6 != 257))
  {
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_8;
  }
  int v7 = a1[2 * v4 + 3];
  if (!v7)
  {
    uint64_t v2 = 0;
    int v3 = 5;
    goto LABEL_8;
  }
  double v8 = &a1[2 * v5];
  int v9 = *((_DWORD *)v8 + 6);
  *a1 = v4;
  *(_DWORD *)int v6 = 257;
  *((_DWORD *)v8 + 6) = v9 % v7;
  return 1;
}

uint64_t type4_op_mul(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) >= 3)
  {
    *a1 = v2 - 1;
    if (type4_value_mul((uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2])) {
      return 1;
    }
    int v3 = 2;
  }
  else
  {
    int v3 = 4;
  }
  uint64_t result = 0;
  *((_DWORD *)a1 + 804) = v3;
  return result;
}

uint64_t type4_op_neg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    *a1 = v1 - 1;
    uint64_t v4 = &a1[2 * v1 - 2];
    uint64_t v5 = v4 + 2;
    int v6 = *((_DWORD *)v4 + 4);
    if (v6 == 258)
    {
      double v11 = -*((double *)v4 + 3);
      *a1 = v1;
      *uint64_t v5 = 258;
      *((double *)v4 + 3) = v11;
    }
    else
    {
      if (v6 != 257)
      {
        uint64_t v2 = 0;
        int v3 = 2;
        goto LABEL_9;
      }
      int v7 = &a1[2 * v1 - 2];
      int v10 = *((_DWORD *)v7 + 6);
      double v8 = v7 + 3;
      int v9 = v10;
      *a1 = v1;
      if (v10 == 0x80000000)
      {
        *uint64_t v5 = 258;
        *double v8 = 0x41E0000000000000;
      }
      else
      {
        *uint64_t v5 = 257;
        *(_DWORD *)double v8 = -v9;
      }
    }
    return 1;
  }
  uint64_t v2 = 0;
  int v3 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_round(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  uint64_t v4 = &a1[2 * v1 - 2];
  uint64_t v5 = v4 + 2;
  int v6 = *((_DWORD *)v4 + 4);
  if (v6 == 258)
  {
    double v7 = round(*((double *)v4 + 3));
    *a1 = v1;
    *uint64_t v5 = 258;
    *((double *)v4 + 3) = v7;
  }
  else
  {
    if (v6 != 257)
    {
      uint64_t v2 = 0;
      int v3 = 2;
      goto LABEL_9;
    }
    *a1 = v1;
    *uint64_t v5 = 257;
  }
  return 1;
}

uint64_t type4_op_sin(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    uint64_t v5 = v2 - 1;
    *a1 = v2 - 1;
    int v6 = &a1[2 * v2 - 2];
    int v9 = *((_DWORD *)v6 + 4);
    double v8 = v6 + 2;
    int v7 = v9;
    if (v9 == 258)
    {
      double v10 = *(double *)&a1[2 * v2 + 1];
    }
    else
    {
      if (v7 != 257)
      {
        uint64_t result = 0;
        int v4 = 2;
        goto LABEL_9;
      }
      double v10 = (double)SLODWORD(a1[2 * v5 + 3]);
    }
    long double v11 = sin(v10 * 3.14159265 / 180.0);
    *a1 = v2;
    *double v8 = 258;
    *(long double *)&a1[2 * v5 + 3] = v11;
    return 1;
  }
  uint64_t result = 0;
  int v4 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_sqrt(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    uint64_t v4 = v1 - 1;
    *a1 = v1 - 1;
    uint64_t v5 = &a1[2 * v1 - 2];
    int v8 = *((_DWORD *)v5 + 4);
    int v6 = v5 + 2;
    int v7 = v8;
    if (v8 == 258)
    {
      double v9 = *(double *)&a1[2 * v1 + 1];
    }
    else
    {
      if (v7 != 257)
      {
        uint64_t v2 = 0;
        int v3 = 2;
        goto LABEL_10;
      }
      double v9 = (double)SLODWORD(a1[2 * v4 + 3]);
    }
    if (v9 >= 0.0)
    {
      *a1 = v1;
      _DWORD *v6 = 258;
      *(double *)&a1[2 * v4 + 3] = sqrt(v9);
      return 1;
    }
    uint64_t v2 = 0;
    int v3 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = 4;
  }
LABEL_10:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_sub(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) >= 3)
  {
    *a1 = v2 - 1;
    if (type4_value_sub((double *)&a1[2 * v2 - 2], (double *)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2])) {
      return 1;
    }
    int v3 = 2;
  }
  else
  {
    int v3 = 4;
  }
  uint64_t result = 0;
  *((_DWORD *)a1 + 804) = v3;
  return result;
}

uint64_t type4_op_truncate(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    *a1 = v2 - 1;
    uint64_t v5 = &a1[2 * v2 - 2];
    int v7 = v5 + 2;
    int v6 = *((_DWORD *)v5 + 4);
    if (v6 == 258)
    {
      __CGFloat y = 0.0;
      modf(*((long double *)v5 + 3), &__y);
      long double v8 = __y;
      *a1 = v2;
      *int v7 = 258;
      *((long double *)v5 + 3) = v8;
    }
    else
    {
      if (v6 != 257)
      {
        uint64_t result = 0;
        int v4 = 2;
        goto LABEL_9;
      }
      *a1 = v2;
      *int v7 = 257;
    }
    return 1;
  }
  uint64_t result = 0;
  int v4 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_and(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_13:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  uint64_t v4 = v1 - 1;
  uint64_t v5 = v1 - 2;
  *a1 = v1 - 2;
  int v6 = &a1[2 * v1];
  int v7 = &a1[2 * v1 - 2];
  if (*(_DWORD *)v7 != 257)
  {
    if (*(_DWORD *)v7 == 256 && *(_DWORD *)v6 == 256)
    {
      long double v8 = &a1[2 * v5];
      int v11 = *((unsigned __int8 *)v8 + 24);
      double v9 = (BOOL *)(v8 + 3);
      BOOL v10 = v11;
      if (v11) {
        BOOL v10 = LOBYTE(a1[2 * v4 + 3]) != 0;
      }
      *a1 = v4;
      *(_DWORD *)int v7 = 256;
      *double v9 = v10;
      return 1;
    }
LABEL_12:
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_13;
  }
  if (*(_DWORD *)v6 != 257) {
    goto LABEL_12;
  }
  *a1 = v4;
  int v12 = a1 + 2;
  double v13 = &v12[2 * v5];
  int v14 = LODWORD(v12[2 * v4 + 1]) & v13[1];
  *(_DWORD *)int v7 = 257;
  *((_DWORD *)v13 + 2) = v14;
  return 1;
}

uint64_t type4_op_bitshift(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_8:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  uint64_t v4 = v1 - 1;
  *a1 = v1 - 1;
  if (LODWORD(a1[2 * v1]) != 257 || (uint64_t v5 = v1 - 2, *a1 = v1 - 2, v6 = &a1[2 * v1 - 2], *(_DWORD *)v6 != 257))
  {
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_8;
  }
  int v7 = a1[2 * v4 + 3];
  long double v8 = &a1[2 * v5];
  int v11 = *((_DWORD *)v8 + 6);
  double v9 = (int *)(v8 + 3);
  int v10 = v11;
  if (v7 < 0) {
    int v12 = v10 >> -(char)v7;
  }
  else {
    int v12 = v10 << v7;
  }
  *a1 = v4;
  *(_DWORD *)int v6 = 257;
  *double v9 = v12;
  return 1;
}

uint64_t type4_op_eq(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_equal((uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2]))
    {
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = 0;
      return 1;
    }
    uint64_t result = 0;
    int v4 = 2;
  }
  else
  {
    uint64_t result = 0;
    int v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_ge(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    int v8 = 0;
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]))
    {
      int v7 = v8;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7 >= 0;
      return 1;
    }
    uint64_t result = 0;
    int v4 = 2;
  }
  else
  {
    uint64_t result = 0;
    int v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_gt(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    int v8 = 0;
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]))
    {
      BOOL v7 = v8 > 0;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7;
      return 1;
    }
    uint64_t result = 0;
    int v4 = 2;
  }
  else
  {
    uint64_t result = 0;
    int v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_le(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    int v8 = 0;
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]))
    {
      BOOL v7 = v8 < 1;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7;
      return 1;
    }
    uint64_t result = 0;
    int v4 = 2;
  }
  else
  {
    uint64_t result = 0;
    int v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_lt(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    int v8 = 0;
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]))
    {
      int v7 = v8;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7 < 0;
      return 1;
    }
    uint64_t result = 0;
    int v4 = 2;
  }
  else
  {
    uint64_t result = 0;
    int v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_ne(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_equal((uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2]))
    {
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      uint64_t result = 1;
      LOBYTE(a1[2 * v6 + 3]) = 1;
      return result;
    }
    uint64_t result = 0;
    int v4 = 2;
  }
  else
  {
    uint64_t result = 0;
    int v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_not(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  int v4 = &a1[2 * v1 - 2];
  uint64_t v5 = v4 + 2;
  int v6 = *((_DWORD *)v4 + 4);
  if (v6 == 257)
  {
    int v9 = ~*((_DWORD *)v4 + 6);
    *a1 = v1;
    *uint64_t v5 = 257;
    *((_DWORD *)v4 + 6) = v9;
  }
  else
  {
    if (v6 != 256)
    {
      uint64_t v2 = 0;
      int v3 = 2;
      goto LABEL_9;
    }
    int v7 = &a1[2 * v1 - 2];
    char v8 = *((unsigned char *)v7 + 24);
    *a1 = v1;
    *uint64_t v5 = 256;
    *((unsigned char *)v7 + 24) = v8 ^ 1;
  }
  return 1;
}

uint64_t type4_op_or(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    uint64_t v4 = v1 - 1;
    uint64_t v5 = v1 - 2;
    *a1 = v1 - 2;
    int v6 = &a1[2 * v1];
    int v7 = &a1[2 * v1 - 2];
    if (*(_DWORD *)v7 == 257)
    {
      if (*(_DWORD *)v6 == 257)
      {
        *a1 = v4;
        int v12 = a1 + 2;
        double v13 = &v12[2 * v5];
        int v14 = LODWORD(v12[2 * v4 + 1]) | *((_DWORD *)v13 + 2);
        *(_DWORD *)int v7 = 257;
        *((_DWORD *)v13 + 2) = v14;
        return 1;
      }
    }
    else if (*(_DWORD *)v7 == 256 && *(_DWORD *)v6 == 256)
    {
      char v8 = &a1[2 * v5];
      int v10 = *((unsigned __int8 *)v8 + 24);
      int v9 = (BOOL *)(v8 + 3);
      if (v10) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = LOBYTE(a1[2 * v4 + 3]) != 0;
      }
      *a1 = v4;
      *(_DWORD *)int v7 = 256;
      *int v9 = v11;
      return 1;
    }
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_11;
  }
  uint64_t v2 = 0;
  int v3 = 4;
LABEL_11:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_xor(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_11:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  uint64_t v4 = v1 - 1;
  uint64_t v5 = v1 - 2;
  *a1 = v1 - 2;
  int v6 = &a1[2 * v1];
  int v7 = &a1[2 * v1 - 2];
  if (*(_DWORD *)v7 == 257)
  {
    if (*(_DWORD *)v6 == 257)
    {
      *a1 = v4;
      BOOL v11 = a1 + 2;
      int v12 = &v11[2 * v5];
      int v13 = LODWORD(v11[2 * v4 + 1]) ^ *((_DWORD *)v12 + 2);
      *(_DWORD *)int v7 = 257;
      *((_DWORD *)v12 + 2) = v13;
      return 1;
    }
LABEL_10:
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_11;
  }
  if (*(_DWORD *)v7 != 256 || *(_DWORD *)v6 != 256) {
    goto LABEL_10;
  }
  *a1 = v4;
  char v8 = a1 + 2;
  int v9 = &v8[2 * v5];
  BOOL v10 = *((unsigned __int8 *)v9 + 8) != LOBYTE(v8[2 * v4 + 1]);
  *(_DWORD *)int v7 = 256;
  *((unsigned char *)v9 + 8) = v10;
  return 1;
}

uint64_t type4_op_if (uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if ((unint64_t)(*(void *)a1 + 1) <= 2)
  {
    uint64_t result = 0;
    int v4 = 4;
LABEL_8:
    *(_DWORD *)(a1 + 3216) = v4;
    return result;
  }
  *(void *)a1 = v2 - 1;
  if (*(_DWORD *)(a1 + 16 * (v2 - 1) + 16) != 259
    || (*(void *)a1 = v2 - 2, *(_DWORD *)(a1 + 16 + 16 * (v2 - 2)) != 256))
  {
    uint64_t result = 0;
    int v4 = 2;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16 * (v2 - 2) + 24)) {
    return type4_program_execute(*(void **)(a1 + 16 + 16 * (v2 - 1) + 8), (uint64_t *)a1);
  }
  else {
    return 1;
  }
}

uint64_t type4_op_ifelse(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if ((unint64_t)(*(void *)a1 + 1) <= 3)
  {
    int v3 = 4;
LABEL_10:
    *(_DWORD *)(a1 + 3216) = v3;
    return 0;
  }
  *(void *)a1 = v2 - 1;
  if (*(_DWORD *)(a1 + 16 * (v2 - 1) + 16) != 259
    || (*(void *)a1 = v2 - 2, *(_DWORD *)(a1 + 16 + 16 * (v2 - 2)) != 259)
    || (int v4 = *(void **)(a1 + 16 + 16 * (v2 - 1) + 8),
        *(void *)a1 = v2 - 3,
        *(_DWORD *)(a1 + 16 + 16 * (v2 - 3)) != 256))
  {
    int v3 = 2;
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 16 * (v2 - 3) + 24)) {
    int v4 = *(void **)(a1 + 16 + 16 * (v2 - 2) + 8);
  }
  return type4_program_execute(v4, (uint64_t *)a1);
}

uint64_t type4_op_copy(uint64_t a1)
{
  unint64_t v1 = *(void *)a1;
  if ((unint64_t)(*(void *)a1 + 1) < 2) {
    goto LABEL_2;
  }
  *(void *)a1 = v1 - 1;
  uint64_t v3 = a1 + 16 * (v1 - 1);
  if (*(_DWORD *)(v3 + 16) != 257)
  {
    int v2 = 2;
    goto LABEL_11;
  }
  uint64_t v4 = *(unsigned int *)(v3 + 24);
  if ((v4 & 0x80000000) != 0)
  {
    int v2 = 1;
    goto LABEL_11;
  }
  if (!v4) {
    return 1;
  }
  if (v1 < v4 + 1)
  {
LABEL_2:
    int v2 = 4;
LABEL_11:
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 3216) = v2;
    return v5;
  }
  if (v1 - 1 + v4 > 0xC8)
  {
    int v2 = 3;
    goto LABEL_11;
  }
  uint64_t v7 = -(uint64_t)(int)v4;
  do
  {
    unint64_t v8 = *(void *)a1;
    uint64_t v9 = *(void *)a1 + v7;
    ++*(void *)a1;
    *(_OWORD *)(a1 + 16 + 16 * v8) = *(_OWORD *)(a1 + 16 + 16 * v9);
    uint64_t v5 = 1;
    LODWORD(v4) = v4 - 1;
  }
  while (v4);
  return v5;
}

uint64_t type4_op_dup(uint64_t a1)
{
  unint64_t v2 = *(void *)a1 + 1;
  if (v2 <= 1)
  {
    uint64_t result = 0;
    int v4 = 4;
LABEL_5:
    *(_DWORD *)(a1 + 3216) = v4;
    return result;
  }
  if (v2 >= 0xC9)
  {
    uint64_t result = 0;
    int v4 = 3;
    goto LABEL_5;
  }
  uint64_t v5 = (_OWORD *)(a1 + 16 * *(void *)a1);
  *(void *)a1 = v2;
  v5[1] = *v5;
  return 1;
}

BOOL type4_op_exch(uint64_t a1)
{
  unint64_t v1 = *(void *)a1 - 2;
  if (v1 >= 0xFFFFFFFFFFFFFFFDLL)
  {
    *(_DWORD *)(a1 + 3216) = 4;
  }
  else
  {
    uint64_t v2 = *(void *)a1 - 1;
    *(void *)a1 = v2;
    long long v3 = *(_OWORD *)(a1 + 16 + 16 * v2);
    *(void *)a1 = v1;
    long long v4 = *(_OWORD *)(a1 + 16 + 16 * v1);
    *(void *)a1 = v2;
    *(_OWORD *)(a1 + 16 + 16 * v1) = v3;
    uint64_t v5 = (*(void *)a1)++;
    *(_OWORD *)(a1 + 16 + 16 * v5) = v4;
  }
  return v1 < 0xFFFFFFFFFFFFFFFDLL;
}

uint64_t type4_op_index(uint64_t a1)
{
  unint64_t v1 = *(void *)a1;
  if ((unint64_t)(*(void *)a1 + 1) <= 1) {
    goto LABEL_2;
  }
  *(void *)a1 = v1 - 1;
  uint64_t v4 = a1 + 16 * (v1 - 1);
  int v6 = *(_DWORD *)(v4 + 16);
  uint64_t v5 = (_OWORD *)(v4 + 16);
  if (v6 != 257)
  {
    uint64_t v2 = 0;
    int v3 = 2;
    goto LABEL_9;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 16 * (v1 - 1) + 24);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v2 = 0;
    int v3 = 1;
    goto LABEL_9;
  }
  if (v1 < v7 + 2)
  {
LABEL_2:
    uint64_t v2 = 0;
    int v3 = 4;
LABEL_9:
    *(_DWORD *)(a1 + 3216) = v3;
    return v2;
  }
  *(void *)a1 = v1;
  *uint64_t v5 = *(_OWORD *)(a1 + 16 * (v1 - 1 + ~v7) + 16);
  return 1;
}

BOOL type4_op_pop(uint64_t a1)
{
  unint64_t v1 = *(void *)a1 - 1;
  if (v1 >= 0xFFFFFFFFFFFFFFFELL) {
    *(_DWORD *)(a1 + 3216) = 4;
  }
  else {
    *(void *)a1 = v1;
  }
  return v1 < 0xFFFFFFFFFFFFFFFELL;
}

uint64_t type4_op_roll(uint64_t *a1)
{
  v25[401] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2) {
    goto LABEL_2;
  }
  unint64_t v5 = v2 - 1;
  *a1 = v2 - 1;
  if (LODWORD(a1[2 * v2]) != 257 || (uint64_t v6 = v2 - 2, *a1 = v2 - 2, LODWORD(a1[2 * v2 - 2]) != 257))
  {
    uint64_t result = 0;
    int v4 = 2;
    goto LABEL_22;
  }
  uint64_t v7 = LODWORD(a1[2 * v6 + 3]);
  if ((int)v7 <= 0)
  {
    uint64_t result = 0;
    int v4 = 1;
    goto LABEL_22;
  }
  if (v5 < v7 + 1)
  {
LABEL_2:
    uint64_t result = 0;
    int v4 = 4;
LABEL_22:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  if (v7 != 1)
  {
    int v8 = a1[2 * v5 + 3];
    if (v8 <= -(int)v7 || v8 >= (int)v7) {
      v8 %= (int)v7;
    }
    int v10 = v7 & (v8 >> 31);
    uint64_t v11 = (v10 + v8);
    if (v10 + v8)
    {
      int v12 = &a1[2 * (v6 - v7) + 2];
      if ((int)v11 <= (int)(v7 >> 1))
      {
        int v18 = v7 - v11;
        if ((int)v11 >= 1)
        {
          uint64_t v19 = v25;
          int v20 = v7 - v11;
          uint64_t v21 = v11;
          do
          {
            *v19++ = *(_OWORD *)&v12[2 * v20++];
            --v21;
          }
          while (v21);
        }
        if (v18 >= 1)
        {
          uint64_t v22 = -(uint64_t)v18;
          int v23 = v7 - 1;
          do
          {
            *(_OWORD *)&v12[2 * v23] = *(_OWORD *)&v12[2 * (v23 - (int)v11)];
            --v23;
          }
          while (!__CFADD__(v22++, 1));
        }
        if ((int)v11 < 1) {
          return 1;
        }
        size_t v17 = 16 * (v11 - 1) + 16;
        uint64_t v16 = v12;
      }
      else
      {
        if ((int)v7 - (int)v11 >= 1) {
          memcpy(v25, v12, 16 * (v7 + ~v11) + 16);
        }
        int v13 = v7 - v11;
        int v14 = v12;
        uint64_t v15 = v11;
        do
        {
          *(_OWORD *)int v14 = *(_OWORD *)&v12[2 * v13];
          v14 += 2;
          ++v13;
          --v15;
        }
        while (v15);
        if ((int)v7 - (int)v11 < 1) {
          return 1;
        }
        uint64_t v16 = &a1[2 * v2 - 2 + 2 * v11 + -2 * v7];
        size_t v17 = 16 * (v7 - v11);
      }
      memcpy(v16, v25, v17);
    }
  }
  return 1;
}

CGPDFStringRef CGPDFNameTreeGetValue(CGPDFDictionary *a1, uint64_t a2)
{
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  CGPDFStringRef value_in_kid = get_value_in_kid(a1, (size_t *)a2, (uint64_t)v7);
  if (!value_in_kid)
  {
    if (a2)
    {
      if (*(void *)(a2 + 24))
      {
        decrypt_string(a2);
        int v4 = *(_DWORD *)(a2 + 72);
        if (*(void *)(a2 + 24)) {
          decrypt_string(a2);
        }
      }
      else
      {
        int v4 = *(_DWORD *)(a2 + 72);
      }
      unint64_t v5 = (const char *)(a2 + 80);
    }
    else
    {
      int v4 = 0;
      unint64_t v5 = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)v7);
  return value_in_kid;
}

void sub_184DC87A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

CGPDFStringRef get_value_in_kid(CGPDFDictionary *a1, size_t *a2, uint64_t a3)
{
  CGPDFArrayRef v30 = 0;
  CGPDFDictionaryRef dict = a1;
  arraCGFloat y = 0;
  if (CGPDFDictionaryGetArray(a1, "Names", &array))
  {
    uint64_t v6 = array;
    if (!array) {
      return 0;
    }
    unint64_t v7 = *((void *)array + 2);
    if ((v7 & 1) == 0)
    {
      if (v7 < 2) {
        return 0;
      }
      uint64_t v8 = 0;
      CGPDFStringRef __s1 = 0;
      CGPDFStringRef value = 0;
      while (1)
      {
        uint64_t v9 = v8 + (v7 >> 2);
        if (!CGPDFArrayGetString(v6, 2 * v9, &value)) {
          break;
        }
        int v10 = string_compare(a2, value);
        if (!v10)
        {
          if (!CGPDFArrayGetObject(v6, (2 * v9) | 1, &__s1)) {
            break;
          }
          return __s1;
        }
        unint64_t v11 = v7 >> 1;
        BOOL v12 = v10 > 0;
        if (v10 > 0) {
          uint64_t v8 = v9 + 1;
        }
        unint64_t v7 = v11 - v12;
        if (v11 - v12 <= 1) {
          return 0;
        }
      }
    }
    pdf_error("invalid name table: invalid /Names entry.");
    return 0;
  }
  if (CGPDFDictionaryGetArray(a1, "Kids", &v30))
  {
    if (!v30) {
      return 0;
    }
    uint64_t v13 = *((void *)v30 + 2);
    if (!v13) {
      return 0;
    }
    size_t v14 = 0;
    while (1)
    {
      if (!CGPDFArrayGetDictionary(v30, v14, &dict))
      {
        pdf_error("missing or invalid name table dictionary.");
        return 0;
      }
      int8x8_t v15 = *(int8x8_t *)(a3 + 8);
      if (v15)
      {
        unint64_t v16 = 0x9DDFEA08EB382D69 * (((8 * dict) + 8) ^ ((unint64_t)dict >> 32));
        unint64_t v17 = 0x9DDFEA08EB382D69 * (((unint64_t)dict >> 32) ^ (v16 >> 47) ^ v16);
        unint64_t v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
        uint8x8_t v19 = (uint8x8_t)vcnt_s8(v15);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          unint64_t v20 = v18;
          if (v18 >= *(void *)&v15) {
            unint64_t v20 = v18 % *(void *)&v15;
          }
        }
        else
        {
          unint64_t v20 = v18 & (*(void *)&v15 - 1);
        }
        uint64_t v21 = *(uint64_t ****)(*(void *)a3 + 8 * v20);
        if (v21)
        {
          for (unint64_t i = *v21; i; unint64_t i = (uint64_t **)*i)
          {
            unint64_t v23 = (unint64_t)i[1];
            if (v23 == v18)
            {
              if (i[2] == (uint64_t *)dict)
              {
                pdf_error("cycle in name tree.");
                return 0;
              }
            }
            else
            {
              if (v19.u32[0] > 1uLL)
              {
                if (v23 >= *(void *)&v15) {
                  v23 %= *(void *)&v15;
                }
              }
              else
              {
                v23 &= *(void *)&v15 - 1;
              }
              if (v23 != v20) {
                break;
              }
            }
          }
        }
      }
      CGPDFStringRef __s1 = 0;
      CGPDFStringRef value = 0;
      CGPDFStringRef v32 = 0;
      BOOL v24 = CGPDFDictionaryGetArray(dict, "Limits", &value);
      uint64_t v25 = "invalid name table: missing /Limits entry.";
      if (!v24) {
        goto LABEL_42;
      }
      if (!value) {
        break;
      }
      uint64_t v25 = "invalid name table: invalid /Limits entry.";
      if (*((void *)value + 2) != 2) {
        goto LABEL_42;
      }
      BOOL String = CGPDFArrayGetString(value, 0, &__s1);
      uint64_t v25 = "invalid name table: invalid /Limits entry.";
      if (!String) {
        goto LABEL_42;
      }
      BOOL v27 = CGPDFArrayGetString(value, 1uLL, &v32);
      uint64_t v25 = "invalid name table: invalid /Limits entry.";
      if (!v27) {
        goto LABEL_42;
      }
      if ((int)string_compare((size_t *)__s1, (CGPDFString *)a2) < 1 && (int)string_compare(a2, v32) <= 0)
      {
        std::__hash_table<CGPDFDictionary *,std::hash<CGPDFDictionary *>,std::equal_to<CGPDFDictionary *>,std::allocator<CGPDFDictionary *>>::__emplace_unique_key_args<CGPDFDictionary *,CGPDFDictionary * const&>((float *)a3, (unint64_t)dict, (uint64_t)dict);
        return (CGPDFStringRef)get_value_in_kid(dict, a2, a3);
      }
LABEL_43:
      CGPDFStringRef result = 0;
      if (++v14 == v13) {
        return result;
      }
    }
    uint64_t v25 = "invalid name table: invalid /Limits entry.";
LABEL_42:
    pdf_error(v25);
    goto LABEL_43;
  }
  pdf_error("invalid name table: no /Kids or /Names entry.");
  return 0;
}

uint64_t string_compare(size_t *__s1, CGPDFString *a2)
{
  int v3 = (CGPDFString *)__s1;
  if (__s1)
  {
    if (__s1[3])
    {
      decrypt_string((uint64_t)__s1);
      size_t v4 = *((void *)v3 + 9);
      if (*((void *)v3 + 3)) {
        decrypt_string((uint64_t)v3);
      }
    }
    else
    {
      size_t v4 = __s1[9];
    }
    int v3 = (CGPDFString *)((char *)v3 + 80);
    if (a2) {
      goto LABEL_9;
    }
LABEL_6:
    size_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  size_t v4 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_9:
  if (*((void *)a2 + 3))
  {
    decrypt_string((uint64_t)a2);
    size_t v5 = *((void *)a2 + 9);
    if (*((void *)a2 + 3)) {
      decrypt_string((uint64_t)a2);
    }
  }
  else
  {
    size_t v5 = *((void *)a2 + 9);
  }
  uint64_t v6 = (char *)a2 + 80;
LABEL_14:
  if (v4 >= v5) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = v4;
  }
  if (v4 < v5) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v4 > v5;
  }
  LODWORD(result) = memcmp(v3, v6, v7);
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

void std::__hash_table<CGPDFDictionary *,std::hash<CGPDFDictionary *>,std::equal_to<CGPDFDictionary *>,std::allocator<CGPDFDictionary *>>::__emplace_unique_key_args<CGPDFDictionary *,CGPDFDictionary * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = (void *)*v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t v14 = operator new(0x18uLL);
  *size_t v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          BOOL v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            CGPDFArrayRef v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *BOOL v24 = *v30;
                  void *v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  CGPDFArrayRef v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                BOOL v24 = v30;
                CGPDFArrayRef v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  CGPDFStringRef v32 = *(void **)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *size_t v14 = *v33;
LABEL_72:
    *uint64_t v33 = v14;
    goto LABEL_73;
  }
  *size_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_184DC8FB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CGPDFGStateSynchronizeStroke(uint64_t a1, CGContextRef c)
{
  if (a1)
  {
    double v4 = *(double *)(a1 + 144);
    if (v4 == 0.0) {
      double v4 = -1.0905473e16;
    }
    CGContextSetLineWidth(c, v4);
    CGContextSetLineCap(c, *(CGLineCap *)(a1 + 152));
    CGContextSetLineJoin(c, *(CGLineJoin *)(a1 + 156));
    CGContextSetMiterLimit(c, *(CGFloat *)(a1 + 160));
    CGContextSetStrokeAdjust((uint64_t)c, *(unsigned __int8 *)(a1 + 180), v5, v6, v7, v8, v9, v10);
    uint64_t v11 = *(void *)(a1 + 168);
    if (v11)
    {
      CGFloat v12 = *(double *)(v11 + 8);
      size_t v13 = *(void *)(v11 + 16);
      size_t v14 = (const CGFloat *)(v11 + 24);
      float v15 = c;
      goto LABEL_8;
    }
  }
  else
  {
    CGContextSetLineWidth(c, 1.0);
    CGContextSetLineCap(c, kCGLineCapButt);
    CGContextSetLineJoin(c, kCGLineJoinMiter);
    CGContextSetMiterLimit(c, 10.0);
    CGContextSetStrokeAdjust((uint64_t)c, 0, v16, v17, v18, v19, v20, v21);
  }
  CGFloat v12 = 0.0;
  float v15 = c;
  size_t v14 = 0;
  size_t v13 = 0;
LABEL_8:

  CGContextSetLineDash(v15, v12, v14, v13);
}

void CGPDFGStateSynchronizeContextForText(uint64_t a1, CGContextRef c)
{
  if (!a1 || !c) {
    return;
  }
  CGContextSetAlpha(c, 1.0);
  v16.CGFloat width = 0.0;
  v16.CGFloat height = 0.0;
  CGContextSetPatternPhase(c, v16);
  unsigned int v4 = *(_DWORD *)(a1 + 112);
  if (v4 <= 6)
  {
    if (((1 << v4) & 0x11) != 0)
    {
      FillColor = (CGColor *)CGPDFGStateGetFillColor(a1);
      CGContextSetFillColorWithColor(c, FillColor);
      goto LABEL_11;
    }
    if (((1 << v4) & 0x22) != 0) {
      goto LABEL_8;
    }
    if (((1 << v4) & 0x44) != 0)
    {
      uint64_t v5 = (CGColor *)CGPDFGStateGetFillColor(a1);
      CGContextSetFillColorWithColor(c, v5);
LABEL_8:
      StrokeColor = (CGColor *)CGPDFGStateGetStrokeColor(a1);
      CGContextSetStrokeColorWithColor(c, StrokeColor);
      CGPDFGStateSynchronizeStroke(a1, c);
    }
  }
LABEL_11:
  CGPDFGStateSynchronizeColorRendering(a1, c);
  CGPDFGStateSynchronizeRendering(a1, (uint64_t)c, v8, v9, v10, v11, v12, v13);
  uint64_t v14 = *(unsigned int *)(a1 + 112);
  if (v14 <= 7) {
    CGContextSetTextDrawingMode(c, dword_185294DB8[v14]);
  }

  CGContextSetFontSize(c, 1.0);
}

void CGPDFGStateSynchronizeForImages(uint64_t a1, CGContextRef c)
{
  if (a1 && c)
  {
    CGContextSetAlpha(c, *(CGFloat *)(a1 + 200));
    v11.CGFloat width = 0.0;
    v11.CGFloat height = 0.0;
    CGContextSetPatternPhase(c, v11);
    CGPDFGStateSynchronizeColorRendering(a1, c);
    CGPDFGStateSynchronizeRendering(a1, (uint64_t)c, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t __CGStyleFilterContextDelegateCreate(const void *a1)
{
  uint64_t v2 = ripc_Initialize();
  uint64_t Filter = CGContextDelegateCreateFilter((uint64_t)v2, a1, v3, v4, v5, v6, v7, v8);
  uint64_t v17 = Filter;
  if (Filter)
  {
    uint64_t v18 = 0;
    *(void *)(Filter + 24) = rips_Finalize;
    *(void *)(Filter + 32) = rips_GetColorTransform;
    do
    {
      uint64_t v19 = __CGStyleFilterContextDelegateCreate_callbacks[v18];
      if (!a1
        || (uint64_t v20 = (void *)get_callback_address((uint64_t)a1, __CGStyleFilterContextDelegateCreate_callbacks[v18], (uint64_t)"CGContextDelegateImplementsCallback", v12, v13, v14, v15, v16)) != 0&& *v20)
      {
        uint64_t v21 = *(void *)&__CGStyleFilterContextDelegateCreate_callbacks[v18 + 2];
        callback_address = (void *)get_callback_address(v17, v19, (uint64_t)"CGContextDelegateSetCallback", v12, v13, v14, v15, v16);
        if (callback_address) {
          void *callback_address = v21;
        }
      }
      v18 += 4;
    }
    while (v18 != 28);
  }
  else
  {
    CGPostError((uint64_t)"Failed to create style context delegate", v10, v11, v12, v13, v14, v15, v16, v24);
    if (*(void *)v2) {
      CFRelease(*(CFTypeRef *)v2);
    }
  }
  return v17;
}

uint64_t rips_DrawDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a1;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v8 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v8)
    {
      uint64_t v9 = 0;
LABEL_6:
      memset(v115, 0, sizeof(v115));
      uint64_t v10 = (float64x2_t *)rips_Acquire(v9, a2, v8, v115);
      if (!v10)
      {
        CFRetain(v8);
        __int16 v15 = 512;
        goto LABEL_43;
      }
      if (*(void *)v9) {
        uint64_t v11 = *(void *)(*(void *)v9 + 288);
      }
      else {
        uint64_t v11 = 0;
      }
      long long v126 = 0u;
      long long v127 = 0u;
      long long v125 = 0u;
      unint64_t v123 = 0;
      char v124 = 0;
      if (!ripc_GetRenderingState(v11, a2, a3, (uint64_t)&v125)) {
        goto LABEL_42;
      }
      if (a4)
      {
        p_CGSize size = &CGRectNull.size;
        uint64_t v18 = (const CGRect *)(a4 + 11);
        p_CGFloat y = (CGFloat *)(a4 + 12);
        if (a4[74] == a4[75]) {
          p_CGFloat y = &CGRectNull.origin.y;
        }
        else {
          p_CGSize size = (CGSize *)(a4 + 13);
        }
        if (a4[74] == a4[75])
        {
          uint64_t v18 = &CGRectNull;
          p_CGFloat height = &CGRectNull.size.height;
        }
        else
        {
          p_CGFloat height = (CGFloat *)(a4 + 14);
        }
        CGFloat height = *p_height;
        CGFloat x = v18->origin.x;
        CGFloat y = *p_y;
        CGFloat width = p_size->width;
        CFDictionaryRef v25 = (const __CFDictionary *)a4[4];
        if (v25)
        {
          memset(&v130, 0, 32);
          if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1) {
            dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
          }
          if ((CGCFDictionaryGetCFTypeRef(v25, @"kCGContextColorSpace", CGColorSpaceGetTypeID_type_id, (uint64_t *)&v124) & 1) != 0|| (uint8x8_t v26 = (char *)v11, CFDictionaryGetValue(v25, @"kCGContextGroup")))
          {
            uint8x8_t v26 = 0;
          }
          if (kCGColorComponents_block_invoke_once != -1) {
            dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_31);
          }
          CGCFDictionaryGetCFTypeRef(v25, @"kCGContextBackgroundColor", CGColorGetTypeID_color_type_id, (uint64_t *)&v123);
          if (CGCFDictionaryGetRect(v25, @"kCGContextBoundingBox", (UInt8 *)&v130))
          {
            v152.origin.CGFloat x = v130.a;
            v152.origin.CGFloat y = v130.b;
            v152.size.CGFloat width = v130.c;
            v152.size.CGFloat height = v130.d;
            v146.origin.CGFloat x = x;
            v146.origin.CGFloat y = y;
            v146.size.CGFloat width = width;
            v146.size.CGFloat height = height;
            CGRect v147 = CGRectIntersection(v146, v152);
            CGFloat x = v147.origin.x;
            CGFloat y = v147.origin.y;
            CGFloat width = v147.size.width;
            CGFloat height = v147.size.height;
          }
LABEL_37:
          long long v27 = *(_OWORD *)(a3 + 40);
          *(_OWORD *)&v130.a = *(_OWORD *)(a3 + 24);
          *(_OWORD *)&v130.c = v27;
          *(_OWORD *)&v130.tCGFloat x = *(_OWORD *)(a3 + 56);
          CGFloat v28 = x;
          *(CGFloat *)&long long v27 = y;
          CGFloat v29 = width;
          CGFloat v30 = height;
          CGRect v148 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v27 - 8), &v130);
          v153.origin.CGFloat x = (double)SDWORD2(v126);
          v153.origin.CGFloat y = (double)SHIDWORD(v126);
          v153.size.CGFloat width = (double)(int)v127;
          v153.size.CGFloat height = (double)SDWORD1(v127);
          CGRect v149 = CGRectIntersection(v148, v153);
          CGFloat v35 = v149.origin.x;
          if (v149.origin.x == INFINITY || v149.origin.y == INFINITY) {
            goto LABEL_42;
          }
          CGFloat v39 = v149.size.width;
          if (v149.size.width == 0.0) {
            goto LABEL_42;
          }
          CGFloat v40 = v149.size.height;
          if (v149.size.height == 0.0) {
            goto LABEL_42;
          }
          CopCGFloat y = (char *)a3;
          if (!v26)
          {
            CGFloat v42 = v149.origin.y;
            uint64_t v43 = *(void **)(v11 + 200);
            uint64_t v44 = *(void **)(v11 + 120);
            if (v43 == v44)
            {
              if (v43) {
                CFRetain(*(CFTypeRef *)(v11 + 200));
              }
              uint64_t v47 = *(void *)(v11 + 48);
              if (v47) {
                uint64_t v46 = *(unsigned int **)(v47 + 32);
              }
              else {
                uint64_t v46 = 0;
              }
            }
            else
            {
              uint64_t v45 = *(void *)(v11 + 48);
              if (v45) {
                uint64_t v46 = *(unsigned int **)(v45 + 32);
              }
              else {
                uint64_t v46 = 0;
              }
              if (v124
                && CGColorTransformConvertNeedsCMS(v44, v124, 0)
                && v124
                && (unsigned int v54 = *(_DWORD *)(*((void *)v124 + 3) + 28), v54 <= 2)
                && (dispatch_once_t v55 = RIPLayerDepthForModel(v54, *v46, v48, v49, v50, v51, v52, v53)) != 0
                && (uint64_t v56 = (unsigned int *)v55, (v57 = color_transform_create(v124, 0)) != 0))
              {
                uint64_t v43 = (void *)v57;
                uint64_t v46 = v56;
              }
              else
              {
                uint64_t v43 = *(void **)(v11 + 120);
                if (v43) {
                  CFRetain(*(CFTypeRef *)(v11 + 120));
                }
              }
            }
            v150.origin.CGFloat x = v35;
            v150.origin.CGFloat y = v42;
            v150.size.CGFloat width = v39;
            v150.size.CGFloat height = v40;
            CGRect v151 = CGRectIntegral(v150);
            CGFloat v65 = v151.origin.x;
            CGFloat v66 = v151.origin.y;
            CGFloat v67 = v151.size.width;
            CGFloat v68 = v151.size.height;
            LODWORD(v130.a) = (int)v151.origin.x;
            HIDWORD(v130.a) = (int)v151.origin.y;
            LODWORD(v130.b) = (int)v151.size.width;
            HIDWORD(v130.b) = (int)v151.size.height;
            if (v123)
            {
              if ((v123 & 0x8000000000000000) != 0) {
                double Alpha = CGTaggedColorGetAlpha(v123, v58, v59, v60, v61, v62, v63, v64);
              }
              else {
                double Alpha = *(double *)(v123 + 8 * *(void *)(v123 + 56) + 56);
              }
              uint64_t v70 = (Alpha < 1.0) | 0x10u;
            }
            else
            {
              uint64_t v70 = 17;
            }
            if (a2) {
              uint64_t v71 = *(unsigned int *)(a2 + 4);
            }
            else {
              uint64_t v71 = 3;
            }
            uint64_t v72 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)&v130, v70, (uint64_t)v46, v71, v62, v63, v64);
            if (!v72)
            {
              if (v43)
              {
                uint64_t v90 = v43;
LABEL_132:
                CFRelease(v90);
              }
LABEL_42:
              __int16 v15 = rips_Initialize(v10);
LABEL_43:
              CGGStateSetStyle(a3, 0);
              if (v7) {
                uint64_t v7 = *(void *)(v7 + 16);
              }
              if (v10) {
                rips_Begin((uint64_t)v10, v15, v7, a2, a3);
              }
              if ((v15 & 0x800) != 0)
              {
                if (a4) {
                  CFTypeRef v38 = CFRetain(a4);
                }
                else {
                  CFTypeRef v38 = 0;
                }
                uint64_t v16 = 0;
                *(void *)&v10[4].f64[1] = v38;
              }
              else if ((v15 & 0x200) != 0 && v7)
              {
                uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(v7 + 128);
                if (v37)
                {
                  uint64_t v16 = v37(v7, a2, a3, a4);
                  if (!v10) {
                    goto LABEL_56;
                  }
                }
                else
                {
                  uint64_t v16 = 1006;
                  if (!v10) {
                    goto LABEL_56;
                  }
                }
              }
              else
              {
                uint64_t v16 = 0;
                if (!v10)
                {
LABEL_56:
                  CGGStateSetStyle(a3, v8);
                  return v16;
                }
              }
              rips_End((uint64_t)v10, v15, v7, a2);
              CGGStateSetStyle(a3, v8);
              rips_Release(v10);
              return v16;
            }
            uint64_t v73 = v72;
            uint8x8_t v26 = ripc_Initialize();
            *((void *)v26 + 6) = v73;
            *((void *)v26 + 2) = v43;
            *(_OWORD *)(v26 + 24) = *(_OWORD *)(v11 + 24);
            CopCGFloat y = CGGStateCreateCopy(a3);
            CGGStateSetCompositeOperation((uint64_t)Copy, 2);
            if (*(double *)(*((void *)Copy + 15) + 8) != 1.0)
            {
              maybeCopyRenderingState((uint64_t)Copy);
              *(void *)(*((void *)Copy + 15) + 8) = 0x3FF0000000000000;
            }
            CGGStateSetStyle((uint64_t)Copy, 0);
            CGGStateSetSoftMask((uint64_t)Copy, 0);
            CGGStateResetClip((uint64_t)Copy);
            *(CGAffineTransform *)(Copy + 24) = CGAffineTransformIdentity;
            CGGStateClipToRect((uint64_t)Copy, v65, v66, v67, v68);
            long long v74 = *(_OWORD *)(a3 + 24);
            long long v75 = *(_OWORD *)(a3 + 40);
            *(_OWORD *)(Copy + 56) = *(_OWORD *)(a3 + 56);
            *(_OWORD *)(Copy + 40) = v75;
            *(_OWORD *)(Copy + 24) = v74;
            *((_DWORD *)v26 + 54) = *(_DWORD *)(v11 + 216);
          }
          CGDisplayListDelegateDrawDisplayList(*(void **)v26, a2, (uint64_t)Copy, (uint64_t)a4, v31, v32, v33, v34);
          if (v26 == (char *)v11) {
            goto LABEL_42;
          }
          CGGStateRelease((uint64_t)Copy);
          uint64_t v76 = *((void *)v26 + 6);
          if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 16, 0))
          {
            long long v140 = xmmword_185293580;
            long long v141 = unk_185293590;
            long long v142 = xmmword_1852935A0;
            uint64_t v143 = 0;
            long long v136 = xmmword_185293540;
            long long v137 = unk_185293550;
            long long v138 = xmmword_185293560;
            long long v139 = unk_185293570;
            long long v132 = xmmword_185293500;
            long long v133 = unk_185293510;
            long long v134 = xmmword_185293520;
            long long v135 = unk_185293530;
            memset(&v130, 0, sizeof(v130));
            long long v131 = unk_1852934F0;
            uint64_t v122 = 0;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v119 = 0u;
            if (*(int *)(v76 + 20) < 1 || *(int *)(v76 + 24) < 1 || !*(void *)(v76 + 56))
            {
LABEL_128:
              (*(void (**)(uint64_t, void))(*(void *)v76 + 48))(v76, 0);
              goto LABEL_131;
            }
            unsigned int v84 = *(_DWORD *)(*(void *)(a3 + 120) + 4);
            int v85 = v84 << 12;
            if (((v84 >> 20) & 0xF) != 0) {
              int v86 = v84 << 8;
            }
            else {
              int v86 = v84 << 12;
            }
            if (!(v86 >> 28)) {
              int v86 = v85;
            }
            uint64_t v87 = (v86 >> 28);
            Cache = CGColorTransformGetCache(*((void **)v26 + 2));
            if (Cache) {
              uint64_t v89 = (CGColorSpace *)Cache[2];
            }
            else {
              uint64_t v89 = 0;
            }
            uint64_t v114 = v89;
            if ((CGColorTransformConvertNeedsCMS(*(void **)(v11 + 120), v89, v87) & 1) == 0)
            {
              uint64_t v113 = 0;
              tCGFloat x = *(double *)(v76 + 32);
              v130.tCGFloat x = tx;
              DWORD2(v131) = *(_DWORD *)(v76 + 20);
              LODWORD(v130.ty) = DWORD2(v131);
              HIDWORD(v131) = *(_DWORD *)(v76 + 24);
              *(void *)&long long v131 = 0;
              HIDWORD(v130.ty) = HIDWORD(v131);
              LODWORD(v132) = *(_DWORD *)(v76 + 48);
              *((void *)&v132 + 1) = *(void *)(v76 + 56);
              *((void *)&v133 + 1) = *(void *)(v76 + 72);
              LODWORD(v133) = *(_DWORD *)(v76 + 64);
              long long v134 = 0uLL;
LABEL_117:
              if (*(void *)&tx == RIPGetDepthForLayerFormat(0, v91, v92, v93, v94, v95, v96, v97))
              {
                v130.tCGFloat x = 0.0;
              }
              else if (*(void *)&v130.tx)
              {
                uint64_t v111 = 0;
LABEL_124:
                long long v119 = *(_OWORD *)(v76 + 12);
                uint64_t v122 = 0;
                *(void *)&long long v121 = 0;
                long long v120 = (unint64_t)&v130;
                DWORD2(v121) = 0;
                ripc_RenderImage(v11, a2, a3, (uint64_t *)&v125, (int *)&v119, (uint64_t)&v119, v109, v110);
                if (v111) {
                  CGGStateSetFillColor(a3, v111);
                }
                if (v113) {
                  CGSImageDataUnlock(v113);
                }
                goto LABEL_128;
              }
              FillColor = (void *)CGGStateGetFillColor(a3);
              uint64_t v111 = FillColor;
              if (FillColor) {
                CFRetain(FillColor);
              }
              CGGStateSetFillColor(a3, 0);
              goto LABEL_124;
            }
            uint64_t v116 = 0;
            size_t v98 = *(int *)(v76 + 24);
            int v117 = *(_DWORD *)(v76 + 20);
            int v118 = v98;
            int v99 = *(_DWORD *)(v76 + 48);
            uint64_t v100 = *(void *)(v76 + 72);
            v129[0] = *(void *)(v76 + 56);
            v129[1] = v100;
            int v101 = *(_DWORD *)(v76 + 64);
            v128[0] = v99;
            v128[1] = v101;
            uint64_t v102 = CGSImageDataLockPixels(v117, v98, (uint64_t)v129, v128, *(_DWORD **)(v76 + 32), v114, v117, v98, (uint64_t)&v116, v87, *(void **)(v11 + 120), *(_DWORD *)(v11 + 216), *(int **)(*(void *)(v11 + 48) + 32));
            if (v102)
            {
              uint64_t v113 = (uint64_t *)v102;
              RIPImageDataInitialize((uint64_t)&v130, v11, v102, v103, v104, v105, v106, v107);
              tCGFloat x = v130.tx;
              goto LABEL_117;
            }
            (*(void (**)(uint64_t, void))(*(void *)v76 + 48))(v76, 0);
          }
          CGPostError((uint64_t)"%s - Cannot acquire group image", v77, v78, v79, v80, v81, v82, v83, (char)"ripc_DrawDisplayList");
LABEL_131:
          uint64_t v90 = *(const void **)v26;
          if (*(void *)v26) {
            goto LABEL_132;
          }
          goto LABEL_42;
        }
      }
      else
      {
        CGFloat height = 0.0;
        CGFloat y = INFINITY;
        CGFloat width = 0.0;
        CGFloat x = INFINITY;
      }
      uint8x8_t v26 = (char *)v11;
      goto LABEL_37;
    }
    return 0;
  }
  uint64_t v8 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 288);
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *(uint64_t (**)(void))(v12 + 128);
  if (!v13) {
    return 1006;
  }

  return v13();
}

void *rips_Acquire(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  uint64_t v8 = *(void *)(a1 + 80);
  if (a3) {
    int v9 = a3[4];
  }
  else {
    int v9 = 0;
  }
  float64x2_t v10 = *(float64x2_t *)(a2 + 40);
  float64x2_t __s2 = *(float64x2_t *)(a2 + 24);
  float64x2_t v36 = v10;
  __n128 v11 = *(__n128 *)(a2 + 56);
  float64x2_t v37 = (float64x2_t)v11;
  v11.n128_u64[0] = *(void *)(a1 + 40);
  if (v11.n128_f64[0] != 1.0)
  {
    float64x2_t __s2 = vmulq_n_f64(__s2, v11.n128_f64[0]);
    float64x2_t v36 = vmulq_n_f64(v36, v11.n128_f64[0]);
    float64x2_t v37 = vmulq_n_f64(v37, v11.n128_f64[0]);
  }
  if (v8)
  {
    if (*(_DWORD **)(v8 + 16) == a3 && *(_DWORD *)(v8 + 24) == v9)
    {
      int v12 = *(_DWORD *)(v8 + 12);
      if ((v12 & 1) == 0) {
        goto LABEL_17;
      }
      __n128 v34 = v11;
      int v13 = memcmp((const void *)(v8 + 32), &__s2, 0x30uLL);
      __n128 v11 = v34;
      if (!v13) {
        goto LABEL_17;
      }
    }
    if (*(void *)v8)
    {
      (*(void (**)(uint64_t, __n128))(*(void *)v8 + 24))(v8, v11);
      v11.n128_u64[0] = *(void *)(a1 + 40);
    }
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v14 = rips_Create(v11, (uint64_t)&_rips_class, (uint64_t)a3);
  if (!v14) {
    return 0;
  }
  uint64_t v8 = v14;
  int v15 = *(_DWORD *)(v14 + 12);
  if (!v15) {
    return 0;
  }
  *(void *)(a1 + 80) = v14;
  *(void *)(v14 + 16) = a3;
  *(_DWORD *)(v14 + 24) = v9;
  LOWORD(v12) = v15 | 0x1000;
  *(_DWORD *)(v14 + 12) = v15 | 0x1000;
  float64x2_t v16 = v36;
  __n128 v11 = (__n128)v37;
  *(float64x2_t *)(v14 + 32) = __s2;
  *(float64x2_t *)(v14 + 48) = v16;
  *(__n128 *)(v14 + 64) = v11;
LABEL_17:
  *a4 = a1;
  a4[1] = *(void *)(a1 + 48);
  if ((v12 & 0x2000) == 0)
  {
    uint64_t v17 = *(const void **)(a1 + 200);
    uint64_t v18 = *(const void **)(a1 + 16);
    if (v18 == v17) {
      goto LABEL_33;
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v17) {
      CFRetain(v17);
    }
    goto LABEL_32;
  }
  uint64_t v19 = (CGColorSpace *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 48))(v8, v11);
  uint64_t v20 = *(void **)(a1 + 16);
  if (!v20)
  {
LABEL_31:
    uint64_t v17 = (const void *)color_transform_create(v19, 0);
LABEL_32:
    *(void *)(a1 + 16) = v17;
    goto LABEL_33;
  }
  Cache = CGColorTransformGetCache(v20);
  if (Cache) {
    uint64_t v22 = Cache[2];
  }
  else {
    uint64_t v22 = 0;
  }
  if (!CGColorSpaceEqualToColorSpace((uint64_t)v19, v22))
  {
    uint64_t v23 = *(const void **)(a1 + 16);
    if (v23) {
      CFRelease(v23);
    }
    goto LABEL_31;
  }
LABEL_33:
  char v24 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x80172DF9uLL);
  if (v24)
  {
    uint64_t v32 = v24;
    *(void *)char v24 = RIPLayer_ripl_class;
    *(_OWORD *)(v24 + 8) = xmmword_1850CDAA0;
    *((void *)v24 + 3) = 8388606;
    *((void *)v24 + 4) = RIPGetDepthForLayerFormat(0, v25, v26, v27, v28, v29, v30, v31);
    *((void *)v32 + 5) = 0;
    *((_DWORD *)v32 + 12) = 0;
    *((void *)v32 + 7) = 0;
    *((_DWORD *)v32 + 16) = 0;
    *((void *)v32 + 9) = 0;
    *(void *)(a1 + 48) = v32;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
    if (a3) {
      CFRetain(a3);
    }
    a4[2] = a3;
    a4[3] = 0;
    a4[8] = 0;
    a4[9] = 0;
  }
  else
  {
    a4 = 0;
    *(void *)(a1 + 48) = 0;
  }
  return a4;
}

uint64_t rips_Initialize(float64x2_t *a1)
{
  float64_t v2 = a1->f64[0];
  uint64_t v3 = *(void *)(*(void *)&a1->f64[0] + 48);
  *(float64_t *)(*(void *)&v2 + 48) = a1->f64[1];
  a1->f64[1] = 0.0;
  uint64_t v4 = *(void **)(*(void *)&v2 + 16);
  if (v4 && (Cache = CGColorTransformGetCache(v4)) != 0) {
    uint64_t v6 = (CGColorSpace *)Cache[2];
  }
  else {
    uint64_t v6 = 0;
  }
  Image = RIPLayerCreateImage(v3, v6, 1);
  *(void *)&a1[4].f64[0] = Image;
  if (!Image) {
    return 512;
  }
  uint64_t v8 = *(void *)(v3 + 12);
  v9.i64[0] = (int)v8;
  v9.i64[1] = SHIDWORD(v8);
  float64x2_t v10 = vcvtq_f64_s64(v9);
  uint64_t v11 = *(void *)(v3 + 20);
  v9.i64[0] = (int)v11;
  v9.i64[1] = SHIDWORD(v11);
  a1[2] = v10;
  a1[3] = vcvtq_f64_s64(v9);
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return *(_DWORD *)(*(void *)(*(void *)&a1->f64[0] + 80) + 12) & 0xF00;
}

void rips_Begin(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a2 & 0xD00) != 0)
  {
    if (!*(void *)(a1 + 24))
    {
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9) {
        float64x2_t v10 = *(CGColor **)(v9 + 24);
      }
      else {
        float64x2_t v10 = 0;
      }
      CopCGFloat y = CGGStateCreateCopy(a5);
      *(void *)(a1 + 24) = Copy;
      if (*(double *)(*((void *)Copy + 15) + 8) != 1.0)
      {
        int v12 = Copy;
        maybeCopyRenderingState((uint64_t)Copy);
        *(void *)(*((void *)v12 + 15) + 8) = 0x3FF0000000000000;
      }
      if (v10)
      {
        CopyWithdouble Alpha = CGColorCreateCopyWithAlpha(v10, 1.0);
        CGGStateSetFillColor(*(void *)(a1 + 24), CopyWithAlpha);
        if (CopyWithAlpha) {
          CFRelease(CopyWithAlpha);
        }
      }
      *(CGAffineTransform *)(*(void *)(a1 + 24) + 24) = CGAffineTransformIdentity;
      CGGStateResetClip(*(void *)(a1 + 24));
    }
    if ((a2 & 0x500) != 0)
    {
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v15 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"kCGContextStyleType", @"kCGContextStyleBegin");
        float64x2_t v16 = *(const void **)(a1 + 16);
        if (v16) {
          CFDictionarySetValue(v15, @"kCGContextStyle", v16);
        }
      }
      if (a3)
      {
        uint64_t v17 = *(void (**)(uint64_t, uint64_t, void, __CFString *, __CFDictionary *))(a3 + 168);
        if (v17) {
          v17(a3, a4, *(void *)(a1 + 24), @"kCGContextStyle", v15);
        }
      }
      if (v15) {
        CFRelease(v15);
      }
      if ((a2 & 0x400) != 0)
      {
        uint64_t v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v19 = v18;
        if (v18) {
          CFDictionarySetValue(v18, @"kCGContextStyleType", @"kCGContextStyleContentBegin");
        }
        if (a3)
        {
          uint64_t v20 = *(void (**)(uint64_t, uint64_t, void, __CFString *, __CFDictionary *))(a3 + 168);
          if (v20) {
            v20(a3, a4, *(void *)(a1 + 24), @"kCGContextStyle", v19);
          }
        }
        if (v19) {
          CFRelease(v19);
        }
        if (a3)
        {
          uint64_t v21 = *(void (**)(uint64_t, uint64_t, void, void, double, double, double, double))(a3 + 80);
          if (v21) {
            v21(a3, a4, *(void *)(a1 + 24), *(void *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
          }
        }
        uint64_t v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v23 = v22;
        if (v22) {
          CFDictionarySetValue(v22, @"kCGContextStyleType", @"kCGContextStyleContentEnd");
        }
        if (a3)
        {
          char v24 = *(void (**)(uint64_t, uint64_t, void, __CFString *, __CFDictionary *))(a3 + 168);
          if (v24) {
            v24(a3, a4, *(void *)(a1 + 24), @"kCGContextStyle", v23);
          }
        }
        if (v23)
        {
          CFRelease(v23);
        }
      }
    }
  }
}

void rips_End(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0xD00) != 0)
  {
    if ((a2 & 0x100) != 0)
    {
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v14 = Mutable;
      if (Mutable) {
        CFDictionarySetValue(Mutable, @"kCGContextStyleType", @"kCGContextStyleContentBegin");
      }
      if (a3)
      {
        int v15 = *(void (**)(uint64_t, uint64_t, void, __CFString *, __CFDictionary *))(a3 + 168);
        if (v15) {
          v15(a3, a4, *(void *)(a1 + 24), @"kCGContextStyle", v14);
        }
      }
      if (v14) {
        CFRelease(v14);
      }
      if (a3)
      {
        float64x2_t v16 = *(void (**)(uint64_t, uint64_t, void, void, double, double, double, double))(a3 + 80);
        if (v16) {
          v16(a3, a4, *(void *)(a1 + 24), *(void *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
        }
      }
      uint64_t v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v18 = v17;
      if (v17) {
        CFDictionarySetValue(v17, @"kCGContextStyleType", @"kCGContextStyleContentEnd");
      }
      if (a3)
      {
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, void, __CFString *, __CFDictionary *))(a3 + 168);
        if (v19) {
          v19(a3, a4, *(void *)(a1 + 24), @"kCGContextStyle", v18);
        }
      }
      if (v18) {
        CFRelease(v18);
      }
    }
    else if ((a2 & 0x800) != 0)
    {
      uint64_t v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v8 = v7;
      if (v7)
      {
        CFDictionarySetValue(v7, @"kCGContextStyleType", @"kCGContextStyleBegin");
        uint64_t v9 = *(const void **)(a1 + 72);
        if (v9) {
          CFDictionarySetValue(v8, @"kCGContextStyleContent", v9);
        }
        float64x2_t v10 = *(const void **)(a1 + 16);
        if (v10) {
          CFDictionarySetValue(v8, @"kCGContextStyle", v10);
        }
      }
      if (a3)
      {
        uint64_t v11 = *(void (**)(uint64_t, uint64_t, void, __CFString *, __CFDictionary *))(a3 + 168);
        if (v11) {
          v11(a3, a4, *(void *)(a1 + 24), @"kCGContextStyle", v8);
        }
      }
      if (v8) {
        CFRelease(v8);
      }
      if (a3)
      {
        int v12 = *(void (**)(uint64_t, uint64_t, void, void, double, double, double, double))(a3 + 80);
        if (v12) {
          v12(a3, a4, *(void *)(a1 + 24), *(void *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
        }
      }
    }
    uint64_t v20 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v21 = v20;
    if (v20)
    {
      CFDictionarySetValue(v20, @"kCGContextStyleType", @"kCGContextStyleEnd");
      uint64_t v22 = *(const void **)(a1 + 16);
      if (v22) {
        CFDictionarySetValue(v21, @"kCGContextStyle", v22);
      }
    }
    if (a3)
    {
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, void, __CFString *, __CFDictionary *))(a3 + 168);
      if (v23) {
        v23(a3, a4, *(void *)(a1 + 24), @"kCGContextStyle", v21);
      }
    }
    if (v21)
    {
      CFRelease(v21);
    }
  }
}

void rips_Release(void *a1)
{
  float64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[8];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    CGGStateRelease(v4);
  }
  uint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t rips_DrawShading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  if (!a1)
  {
    uint64_t v8 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v8)
    {
      uint64_t v9 = 0;
LABEL_6:
      memset(v25, 0, sizeof(v25));
      float64x2_t v10 = (float64x2_t *)rips_Acquire(v9, a2, v8, v25);
      if (v10)
      {
        if (*(void *)v9)
        {
          uint64_t v11 = *(void (**)(void))(*(void *)v9 + 96);
          if (v11) {
            v11();
          }
        }
        __int16 v12 = rips_Initialize(v10);
      }
      else
      {
        CFRetain(v8);
        __int16 v12 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v7) {
        uint64_t v7 = *(void *)(v7 + 16);
      }
      if (v10) {
        rips_Begin((uint64_t)v10, v12, v7, a2, a3);
      }
      if ((v12 & 0x800) != 0)
      {
        uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v16, v17, v18, v19, v20, v21);
        *(void *)&v10[4].f64[1] = CGDisplayList;
        if (CGDisplayList) {
          CG::DisplayList::createContextDelegate();
        }
        uint64_t v23 = 1000;
      }
      else if ((v12 & 0x200) != 0 && v7)
      {
        uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 96);
        if (v22)
        {
          uint64_t v23 = v22(v7, a2, a3, a4);
          if (!v10) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v23 = 1006;
          if (!v10) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        uint64_t v23 = 0;
        if (!v10)
        {
LABEL_31:
          CGGStateSetStyle(a3, v8);
          return v23;
        }
      }
      rips_End((uint64_t)v10, v12, v7, a2);
      CGGStateSetStyle(a3, v8);
      rips_Release(v10);
      return v23;
    }
    return 0;
  }
  uint64_t v8 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 288);
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = *(uint64_t (**)(void))(v13 + 96);
  if (!v14) {
    return 1006;
  }

  return v14();
}

uint64_t rips_DrawGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a1;
  if (!a1)
  {
    uint64_t v14 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v14)
    {
      uint64_t v15 = 0;
LABEL_6:
      memset(v31, 0, sizeof(v31));
      float64x2_t v16 = (float64x2_t *)rips_Acquire(v15, a2, v14, v31);
      if (v16)
      {
        if (*(void *)v15)
        {
          uint64_t v17 = *(void (**)(void))(*(void *)v15 + 88);
          if (v17) {
            v17();
          }
        }
        __int16 v18 = rips_Initialize(v16);
      }
      else
      {
        CFRetain(v14);
        __int16 v18 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v13) {
        uint64_t v13 = *(void *)(v13 + 16);
      }
      if (v16) {
        rips_Begin((uint64_t)v16, v18, v13, a2, a3);
      }
      if ((v18 & 0x800) != 0)
      {
        uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v22, v23, v24, v25, v26, v27);
        *(void *)&v16[4].f64[1] = CGDisplayList;
        if (CGDisplayList) {
          CG::DisplayList::createContextDelegate();
        }
        uint64_t v29 = 1000;
      }
      else if ((v18 & 0x200) != 0 && v13)
      {
        uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 88);
        if (v28)
        {
          uint64_t v29 = v28(v13, a2, a3, a4, a5, a6, a7);
          if (!v16) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v29 = 1006;
          if (!v16) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        uint64_t v29 = 0;
        if (!v16)
        {
LABEL_31:
          CGGStateSetStyle(a3, v14);
          return v29;
        }
      }
      rips_End((uint64_t)v16, v18, v13, a2);
      CGGStateSetStyle(a3, v14);
      rips_Release(v16);
      return v29;
    }
    return 0;
  }
  uint64_t v14 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 288);
    goto LABEL_6;
  }
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return 0;
  }
  uint64_t v20 = *(uint64_t (**)(void))(v19 + 88);
  if (!v20) {
    return 1006;
  }

  return v20();
}

uint64_t rips_DrawImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v15 = a1;
  if (!a1)
  {
    float64x2_t v16 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v16)
    {
      uint64_t v17 = 0;
LABEL_6:
      memset(v33, 0, sizeof(v33));
      __int16 v18 = (float64x2_t *)rips_Acquire(v17, a2, v16, v33);
      if (v18)
      {
        if (*(void *)v17)
        {
          uint64_t v19 = *(void (**)(double, double, double, double))(*(void *)v17 + 80);
          if (v19) {
            v19(a5, a6, a7, a8);
          }
        }
        __int16 v20 = rips_Initialize(v18);
      }
      else
      {
        CFRetain(v16);
        __int16 v20 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v15) {
        uint64_t v15 = *(void *)(v15 + 16);
      }
      if (v18) {
        rips_Begin((uint64_t)v18, v20, v15, a2, a3);
      }
      if ((v20 & 0x800) != 0)
      {
        uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v24, v25, v26, v27, v28, v29);
        *(void *)&v18[4].f64[1] = CGDisplayList;
        if (CGDisplayList) {
          CG::DisplayList::createContextDelegate();
        }
        uint64_t v31 = 1000;
      }
      else if ((v20 & 0x200) != 0 && v15)
      {
        uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(v15 + 80);
        if (v30)
        {
          uint64_t v31 = v30(v15, a2, a3, a4, a5, a6, a7, a8);
          if (!v18) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v31 = 1006;
          if (!v18) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        uint64_t v31 = 0;
        if (!v18)
        {
LABEL_31:
          CGGStateSetStyle(a3, v16);
          return v31;
        }
      }
      rips_End((uint64_t)v18, v20, v15, a2);
      CGGStateSetStyle(a3, v16);
      rips_Release(v18);
      return v31;
    }
    return 0;
  }
  float64x2_t v16 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 288);
    goto LABEL_6;
  }
  uint64_t v21 = *(void *)(a1 + 16);
  if (!v21) {
    return 0;
  }
  uint64_t v22 = *(uint64_t (**)(void))(v21 + 80);
  if (!v22) {
    return 1006;
  }

  return v22();
}

uint64_t rips_DrawPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  uint64_t v9 = a1;
  if (a1)
  {
    float64x2_t v10 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v10)
    {
      uint64_t v11 = *(uint64_t **)(a1 + 288);
      goto LABEL_5;
    }
    a1 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v11 = 0;
    float64x2_t v10 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v10)
    {
LABEL_5:
      memset(v23, 0, sizeof(v23));
      __int16 v12 = (float64x2_t *)rips_Acquire((uint64_t)v11, a2, v10, v23);
      if (v12)
      {
        CGContextDelegateDrawPath(*v11, a2, a3, a4, cf);
        __int16 v13 = rips_Initialize(v12);
      }
      else
      {
        CFRetain(v10);
        __int16 v13 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v9) {
        uint64_t v9 = *(void *)(v9 + 16);
      }
      if (v12) {
        rips_Begin((uint64_t)v12, v13, v9, a2, a3);
      }
      if ((v13 & 0x800) != 0)
      {
        uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v15, v16, v17, v18, v19, v20);
        *(void *)&v12[4].f64[1] = CGDisplayList;
        if (CGDisplayList) {
          CG::DisplayList::createContextDelegate();
        }
        uint64_t v21 = 1000;
      }
      else if ((v13 & 0x200) != 0)
      {
        uint64_t v21 = CGContextDelegateDrawPath(v9, a2, a3, a4, cf);
        if (!v12)
        {
LABEL_23:
          CGGStateSetStyle(a3, v10);
          return v21;
        }
      }
      else
      {
        uint64_t v21 = 0;
        if (!v12) {
          goto LABEL_23;
        }
      }
      rips_End((uint64_t)v12, v13, v9, a2);
      CGGStateSetStyle(a3, v10);
      rips_Release(v12);
      return v21;
    }
  }

  return CGContextDelegateDrawPath(a1, a2, a3, a4, cf);
}

uint64_t rips_DrawRects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a1;
  if (!a1)
  {
    __int16 v12 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v12)
    {
      uint64_t v13 = 0;
LABEL_6:
      memset(v29, 0, sizeof(v29));
      uint64_t v14 = (float64x2_t *)rips_Acquire(v13, a2, v12, v29);
      if (v14)
      {
        if (*(void *)v13)
        {
          uint64_t v15 = *(void (**)(void))(*(void *)v13 + 64);
          if (v15) {
            v15();
          }
        }
        __int16 v16 = rips_Initialize(v14);
      }
      else
      {
        CFRetain(v12);
        __int16 v16 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v11) {
        uint64_t v11 = *(void *)(v11 + 16);
      }
      if (v14) {
        rips_Begin((uint64_t)v14, v16, v11, a2, a3);
      }
      if ((v16 & 0x800) != 0)
      {
        uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v20, v21, v22, v23, v24, v25);
        *(void *)&v14[4].f64[1] = CGDisplayList;
        if (CGDisplayList) {
          CG::DisplayList::createContextDelegate();
        }
        uint64_t v27 = 1000;
      }
      else if ((v16 & 0x200) != 0 && v11)
      {
        uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
        if (v26)
        {
          uint64_t v27 = v26(v11, a2, a3, a4, a5, a6);
          if (!v14) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v27 = 1006;
          if (!v14) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        uint64_t v27 = 0;
        if (!v14)
        {
LABEL_31:
          CGGStateSetStyle(a3, v12);
          return v27;
        }
      }
      rips_End((uint64_t)v14, v16, v11, a2);
      CGGStateSetStyle(a3, v12);
      rips_Release(v14);
      return v27;
    }
    return 0;
  }
  __int16 v12 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 288);
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = *(uint64_t (**)(void))(v17 + 64);
  if (!v18) {
    return 1006;
  }

  return v18();
}

void rips_DrawLines(uint64_t a1, uint64_t a2, uint64_t a3, const CGPoint *a4, unint64_t a5)
{
  uint64_t v9 = a1;
  if (!a1)
  {
    uint64_t v11 = 0;
    float64x2_t v10 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_8:
    CGContextDelegateDrawLines(a1, a2, a3, a4, a5);
    return;
  }
  float64x2_t v10 = *(_DWORD **)(*(void *)(a3 + 120) + 16);
  if (!v10)
  {
    a1 = *(void *)(a1 + 16);
    goto LABEL_8;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 288);
LABEL_5:
  memset(v21, 0, sizeof(v21));
  __int16 v12 = (float64x2_t *)rips_Acquire((uint64_t)v11, a2, v10, v21);
  if (v12)
  {
    CGContextDelegateDrawLines(*v11, a2, a3, a4, a5);
    __int16 v13 = rips_Initialize(v12);
  }
  else
  {
    CFRetain(v10);
    __int16 v13 = 512;
  }
  CGGStateSetStyle(a3, 0);
  if (v9) {
    uint64_t v9 = *(void *)(v9 + 16);
  }
  if (v12) {
    rips_Begin((uint64_t)v12, v13, v9, a2, a3);
  }
  if ((v13 & 0x800) != 0)
  {
    uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v14, v15, v16, v17, v18, v19);
    *(void *)&v12[4].f64[1] = CGDisplayList;
    if (CGDisplayList) {
      CG::DisplayList::createContextDelegate();
    }
  }
  else
  {
    if ((v13 & 0x200) != 0) {
      CGContextDelegateDrawLines(v9, a2, a3, a4, a5);
    }
    if (!v12)
    {
      CGGStateSetStyle(a3, v10);
      return;
    }
  }
  rips_End((uint64_t)v12, v13, v9, a2);
  CGGStateSetStyle(a3, v10);
  rips_Release(v12);
}

void *rips_GetColorTransform(void *result)
{
  if (!result)
  {
    uint64_t v1 = 0;
    if (!MEMORY[0x30]) {
      return result;
    }
    goto LABEL_9;
  }
  uint64_t v1 = result[36];
  if (*(void *)(v1 + 48))
  {
LABEL_9:
    ripc_InitializeColorTransform(v1);
    return *(void **)(v1 + 120);
  }
  uint64_t result = (void *)result[2];
  if (result)
  {
    float64_t v2 = (uint64_t (*)(void))result[4];
    if (v2)
    {
      return (void *)v2();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void rips_Finalize(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(CFTypeRef **)(a1 + 288);
    if (v1)
    {
      if (*v1) {
        CFRelease(*v1);
      }
    }
  }
}

uint64_t compareIntervalIndirect(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  double v3 = *(double *)(a1 + 16 * *a2) + *(double *)(a1 + 16 * *a2 + 8) * 0.5;
  double v4 = *(double *)(a1 + 16 * *a3) + *(double *)(a1 + 16 * *a3 + 8) * 0.5;
  if (v3 < v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3 > v4;
  }
}

uint64_t JBIG2Bitmap::getType(JBIG2Bitmap *this)
{
  return 0;
}

void JBIG2Bitmap::~JBIG2Bitmap(void **this)
{
  *this = &unk_1ED093668;
  free(this[3]);

  JUMPOUT(0x18532A2A0);
}

{
  *this = &unk_1ED093668;
  free(this[3]);
}

uint64_t JBIG2SymbolDict::getType(JBIG2SymbolDict *this)
{
  return 1;
}

void JBIG2SymbolDict::~JBIG2SymbolDict(JBIG2SymbolDict *this)
{
  JBIG2SymbolDict::~JBIG2SymbolDict(this);

  JUMPOUT(0x18532A2A0);
}

{
  void *v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  void **v6;
  void **v7;

  *(void *)this = &unk_1ED093818;
  float64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    double v3 = *((unsigned int *)this + 3);
    if (v3)
    {
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v5 = *(void *)(*((void *)this + 2) + 8 * i);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          double v3 = *((unsigned int *)this + 3);
        }
      }
      float64_t v2 = (void *)*((void *)this + 2);
    }
  }
  free(v2);
  uint64_t v6 = (void **)*((void *)this + 3);
  if (v6)
  {
    free(*v6);
    MEMORY[0x18532A2A0](v6, 0x1010C40A1D9428BLL);
  }
  uint64_t v7 = (void **)*((void *)this + 4);
  if (v7)
  {
    free(*v7);
    MEMORY[0x18532A2A0](v7, 0x1010C40A1D9428BLL);
  }
}

uint64_t JBIG2PatternDict::getType(JBIG2PatternDict *this)
{
  return 2;
}

void JBIG2PatternDict::~JBIG2PatternDict(JBIG2PatternDict *this)
{
  JBIG2PatternDict::~JBIG2PatternDict(this);

  JUMPOUT(0x18532A2A0);
}

{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;

  *(void *)this = &unk_1ED093840;
  float64_t v2 = *((unsigned int *)this + 3);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      double v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        float64_t v2 = *((unsigned int *)this + 3);
      }
    }
  }
  free(*((void **)this + 2));
}

uint64_t JBIG2CodeTable::getType(JBIG2CodeTable *this)
{
  return 3;
}

void JBIG2CodeTable::~JBIG2CodeTable(void **this)
{
  *this = &unk_1ED0937C8;
  free(this[2]);

  JUMPOUT(0x18532A2A0);
}

{
  *this = &unk_1ED0937C8;
  free(this[2]);
}

uint64_t JBIG2Stream::lookChar(JBIG2Stream *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 11);
  if (v1 && (unint64_t)v1 < *((void *)this + 12)) {
    return *v1 ^ 0xFFu;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t JBIG2Stream::isBinary(JBIG2Stream *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 48))(*((void *)this + 2), 1);
}

uint64_t FilterStream::getPos(FilterStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 40))();
}

uint64_t JBIG2Stream::getChar(JBIG2Stream *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 11);
  if (!v1 || (unint64_t)v1 >= *((void *)this + 12)) {
    return 0xFFFFFFFFLL;
  }
  *((void *)this + 11) = v1 + 1;
  return *v1 ^ 0xFFu;
}

uint64_t JBIG2Stream::close(JBIG2Stream *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 6) = 0;
  }
  uint64_t v3 = *((void *)this + 8);
  if (!v3)
  {
    uint64_t v7 = *((void *)this + 9);
    if (!v7) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  int v4 = *(_DWORD *)(v3 + 12);
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)v3 + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        int v4 = *(_DWORD *)(v3 + 12);
      }
    }
  }
  free(*(void **)v3);
  MEMORY[0x18532A2A0](v3, 0x1080C40A085CBA5);
  uint64_t v7 = *((void *)this + 9);
  if (*((void *)this + 8) == v7)
  {
    uint64_t v7 = 0;
    *((void *)this + 9) = 0;
  }
  *((void *)this + 8) = 0;
  if (v7)
  {
LABEL_14:
    int v8 = *(_DWORD *)(v7 + 12);
    if (v8 >= 1)
    {
      for (uint64_t j = 0; j < v8; ++j)
      {
        uint64_t v10 = *(void *)(*(void *)v7 + 8 * j);
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          int v8 = *(_DWORD *)(v7 + 12);
        }
      }
    }
    free(*(void **)v7);
    MEMORY[0x18532A2A0](v7, 0x1080C40A085CBA5);
    *((void *)this + 9) = 0;
  }
LABEL_20:
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v11 = *(uint64_t (**)(void))(**((void **)this + 2) + 24);

  return v11();
}

void JBIG2Stream::reset(JBIG2Stream *this)
{
}

void sub_184DCCA8C(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1080C40A085CBA5);
  _Unwind_Resume(a1);
}

void JBIG2Stream::readSegments(JBIG2Stream *this)
{
  uint64_t v161 = (unsigned int *)((char *)this + 36);
  BOOL v162 = (unsigned int *)((char *)this + 32);
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  unsigned int v166 = 0;
  unsigned int v164 = 0;
  while (2)
  {
    if (!JBIG2Stream::readULong(this, &v166)) {
      return;
    }
    int v2 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
    if (v2 == -1) {
      goto LABEL_307;
    }
    char v3 = v2;
    unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
    if (v4 == -1) {
      goto LABEL_307;
    }
    unsigned int v5 = v4;
    unsigned int v6 = v4 >> 5;
    if (v4 >> 5 == 7)
    {
      int v7 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
      if (v7 == -1) {
        goto LABEL_307;
      }
      int v8 = v7;
      int v9 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
      if (v9 == -1) {
        goto LABEL_307;
      }
      int v10 = v9;
      int v11 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
      if (v11 == -1) {
        goto LABEL_307;
      }
      unsigned int v6 = ((v8 << 16) | (v5 << 24) | (v10 << 8) | v11) & 0x1FFFFFFF;
      unsigned int v12 = (v6 + 9) >> 3;
      do
      {
        (*(void (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        --v12;
      }
      while (v12);
    }
    if (HIBYTE(v6)) {
      goto LABEL_307;
    }
    __int16 v13 = (int *)gmallocn(v6, 4u);
    uint64_t v14 = v13;
    if (v6)
    {
      if (!v13) {
        goto LABEL_307;
      }
    }
    unsigned int v15 = v166;
    if (v166 > 0x100)
    {
      if (v166 > 0x10000)
      {
        if (!v6) {
          goto LABEL_30;
        }
        uint64_t v21 = v6;
        uint64_t v22 = (unsigned int *)v13;
        while (JBIG2Stream::readULong(this, v22))
        {
          ++v22;
          if (!--v21) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        if (!v6) {
          goto LABEL_30;
        }
        uint64_t v19 = v6;
        uint64_t v20 = (unsigned int *)v13;
        while (JBIG2Stream::readUWord(this, v20))
        {
          ++v20;
          if (!--v19) {
            goto LABEL_30;
          }
        }
      }
LABEL_306:
      free(v14);
LABEL_307:
      int v156 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
      error(v156, "Unexpected EOF in JBIG2 stream");
      return;
    }
    if (v6)
    {
      uint64_t v16 = v6;
      uint64_t v17 = v13;
      do
      {
        int v18 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v18 == -1) {
          goto LABEL_306;
        }
        *v17++ = v18;
      }
      while (--v16);
    }
LABEL_30:
    if ((v3 & 0x40) != 0)
    {
      if (!JBIG2Stream::readULong(this, &v165)) {
        goto LABEL_306;
      }
    }
    else
    {
      unsigned int v23 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
      if (v23 == -1) {
        goto LABEL_306;
      }
      unsigned int v165 = v23;
    }
    if (!JBIG2Stream::readULong(this, &v164)) {
      goto LABEL_306;
    }
    int v26 = v3 & 0x3F;
    if (!*((void *)this + 6))
    {
      if ((v3 & 0x3C) == 4
        || (BOOL v24 = (v26 - 20) >= 0x17, v25 = v26 == 43, (v26 - 20) <= 0x17))
      {
        int v157 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
        error(v157, "First JBIG2 segment associated with a page must be a page information segment");
        goto LABEL_313;
      }
    }
    __int16 v163 = v14;
    int v27 = 0;
    int v28 = v26 - 36;
    switch(v28)
    {
      case 0:
      case 2:
      case 3:
        unsigned int v29 = v164;
        unsigned int v175 = 0;
        if (!JBIG2Stream::readULong(this, &v175)) {
          goto LABEL_303;
        }
        v174[0] = 0;
        if (!JBIG2Stream::readULong(this, v174)) {
          goto LABEL_303;
        }
        unsigned int v173 = 0;
        if (!JBIG2Stream::readULong(this, &v173)) {
          goto LABEL_303;
        }
        unsigned int v172 = 0;
        if (!JBIG2Stream::readULong(this, &v172)) {
          goto LABEL_303;
        }
        if ((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) == -1) {
          goto LABEL_303;
        }
        unsigned int v30 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v30 == -1) {
          goto LABEL_303;
        }
        int v31 = (v30 >> 1) & 3;
        int v32 = (v30 >> 3) & 1;
        if (v30) {
          JBIG2Stream::readGenericBitmap(this, 1, v175, v174[0], v31, v32, 0, 0, (int *)&v177, (int *)v180, v29 - 18);
        }
        unsigned int v33 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v31)
        {
          if (v33 != -1)
          {
            unsigned int v34 = v33 | 0xFFFFFF00;
            if ((v33 & 0x80) == 0) {
              unsigned int v34 = v33;
            }
            unsigned int v177 = v34;
            unsigned int v35 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
            if (v35 != -1)
            {
              unsigned int v36 = v35 | 0xFFFFFF00;
              if ((v35 & 0x80) == 0) {
                unsigned int v36 = v35;
              }
              v180[0] = v36;
              int v37 = v31;
              goto LABEL_54;
            }
          }
        }
        else if (v33 != -1)
        {
          unsigned int v132 = v33 | 0xFFFFFF00;
          if ((v33 & 0x80) == 0) {
            unsigned int v132 = v33;
          }
          unsigned int v177 = v132;
          unsigned int v133 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
          if (v133 != -1)
          {
            unsigned int v134 = v133 | 0xFFFFFF00;
            if ((v133 & 0x80) == 0) {
              unsigned int v134 = v133;
            }
            v180[0] = v134;
            unsigned int v135 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
            if (v135 != -1)
            {
              unsigned int v136 = v135 | 0xFFFFFF00;
              if ((v135 & 0x80) == 0) {
                unsigned int v136 = v135;
              }
              LODWORD(v178) = v136;
              unsigned int v137 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v137 != -1)
              {
                unsigned int v138 = v137 | 0xFFFFFF00;
                if ((v137 & 0x80) == 0) {
                  unsigned int v138 = v137;
                }
                v180[1] = v138;
                unsigned int v139 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                if (v139 != -1)
                {
                  unsigned int v140 = v139 | 0xFFFFFF00;
                  if ((v139 & 0x80) == 0) {
                    unsigned int v140 = v139;
                  }
                  HIDWORD(v178) = v140;
                  unsigned int v141 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                  if (v141 != -1)
                  {
                    unsigned int v142 = v141 | 0xFFFFFF00;
                    if ((v141 & 0x80) == 0) {
                      unsigned int v142 = v141;
                    }
                    v180[2] = v142;
                    unsigned int v143 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                    if (v143 != -1)
                    {
                      unsigned int v144 = v143 | 0xFFFFFF00;
                      if ((v143 & 0x80) == 0) {
                        unsigned int v144 = v143;
                      }
                      int v179 = v144;
                      unsigned int v145 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                      if (v145 != -1)
                      {
                        int v37 = 0;
                        unsigned int v146 = v145 | 0xFFFFFF00;
                        if ((v145 & 0x80) == 0) {
                          unsigned int v146 = v145;
                        }
                        v180[3] = v146;
LABEL_54:
                        JBIG2Stream::resetGenericStats(this, v37, 0);
                        JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
                        JBIG2Stream::readGenericBitmap(this, 0, v175, v174[0], v31, v32, 0, 0, (int *)&v177, (int *)v180, 0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_303:
        int v155 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
        error(v155, "Unexpected EOF in JBIG2 stream");
        goto LABEL_304;
      case 1:
      case 5:
      case 8:
      case 9:
      case 10:
      case 11:
      case 13:
      case 15:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
LABEL_175:
        int v79 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
        error(v79, "Unknown segment type in JBIG2 stream");
        unsigned int v80 = v164;
        if (!v164) {
          goto LABEL_305;
        }
        while ((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) != -1)
        {
          if (!--v80) {
            goto LABEL_305;
          }
        }
        goto LABEL_306;
      case 4:
        goto LABEL_92;
      case 6:
      case 7:
        int v27 = 1;
LABEL_92:
        unsigned int v175 = 0;
        if (!JBIG2Stream::readULong(this, &v175)) {
          goto LABEL_303;
        }
        v174[0] = 0;
        if (!JBIG2Stream::readULong(this, v174)) {
          goto LABEL_303;
        }
        unsigned int v173 = 0;
        if (!JBIG2Stream::readULong(this, &v173)) {
          goto LABEL_303;
        }
        unsigned int v172 = 0;
        if (!JBIG2Stream::readULong(this, &v172)) {
          goto LABEL_303;
        }
        int v43 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        char v44 = v43;
        if (v43 == -1) {
          goto LABEL_303;
        }
        unsigned int v45 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        unsigned int v46 = v45;
        if (v45 == -1) {
          goto LABEL_303;
        }
        if (v45) {
          goto LABEL_112;
        }
        unsigned int v47 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v47 == -1) {
          goto LABEL_303;
        }
        unsigned int v48 = v47 | 0xFFFFFF00;
        if ((v47 & 0x80) == 0) {
          unsigned int v48 = v47;
        }
        unsigned int v177 = v48;
        unsigned int v49 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v49 == -1) {
          goto LABEL_303;
        }
        unsigned int v50 = v49 | 0xFFFFFF00;
        if ((v49 & 0x80) == 0) {
          unsigned int v50 = v49;
        }
        v180[0] = v50;
        unsigned int v51 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v51 == -1) {
          goto LABEL_303;
        }
        unsigned int v52 = v51 | 0xFFFFFF00;
        if ((v51 & 0x80) == 0) {
          unsigned int v52 = v51;
        }
        LODWORD(v178) = v52;
        unsigned int v53 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v53 == -1) {
          goto LABEL_303;
        }
        unsigned int v54 = v53 | 0xFFFFFF00;
        if ((v53 & 0x80) == 0) {
          unsigned int v54 = v53;
        }
        v180[1] = v54;
LABEL_112:
        if (((v6 != 0) & ~v27) == 0 && *v161 == -1 && v174[0] + v172 > *((_DWORD *)this + 10)) {
          JBIG2Bitmap::expand(*((JBIG2Bitmap **)this + 6), v174[0] + v172, *((_DWORD *)this + 11));
        }
        if (v6 < 2)
        {
          if (v6 != 1) {
            JBIG2Bitmap::getSlice(*((JBIG2Bitmap **)this + 6));
          }
          Segment = JBIG2Stream::findSegment(this, *v14);
          if (Segment
            && (CGAffineTransform v130 = (JBIG2Bitmap *)Segment, !((unsigned int (*)(uint64_t **))(*Segment)[2])(Segment)))
          {
            unsigned int v151 = v175;
            int v152 = v174[0];
            JBIG2Stream::resetRefinementStats(this, v46 & 1, 0);
            JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
            GenericRefinementRegion = (JBIG2Bitmap *)JBIG2Stream::readGenericRefinementRegion(this, v151, v152, v46 & 1, (v46 >> 1) & 1, v130, 0, 0, (int *)&v177, (int *)v180);
            CGRect v148 = GenericRefinementRegion;
            if (GenericRefinementRegion)
            {
              if (v27)
              {
                JBIG2Bitmap::combine(*((void *)this + 6), GenericRefinementRegion, v173, v172, v44 & 7);
                (*(void (**)(JBIG2Bitmap *))(*(void *)v148 + 8))(v148);
              }
              else
              {
                *((_DWORD *)GenericRefinementRegion + 2) = v15;
                GList::append(*((GList **)this + 8), GenericRefinementRegion);
              }
              JBIG2Stream::discardSegment(this, *v163);
            }
            else
            {
              int v149 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
              error(v149, "Bad bitmap in JBIG2 generic refinement region");
            }
          }
          else
          {
            int v131 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
            error(v131, "Bad bitmap reference in JBIG2 generic refinement segment");
          }
        }
        else
        {
          int v55 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
          error(v55, "Bad reference in JBIG2 generic refinement segment");
        }
        goto LABEL_304;
      case 12:
        if (JBIG2Stream::readULong(this, v162))
        {
          if (JBIG2Stream::readULong(this, v161))
          {
            if (JBIG2Stream::readULong(this, &v177))
            {
              if (JBIG2Stream::readULong(this, v180))
              {
                unsigned int v74 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                if (v74 != -1)
                {
                  unsigned int v175 = 0;
                  if (JBIG2Stream::readUWord(this, &v175))
                  {
                    *((_DWORD *)this + 14) = (v74 >> 3) & 3;
                    unsigned int v75 = *((_DWORD *)this + 9);
                    if (v75 == -1) {
                      unsigned int v75 = v175 & 0x7FFF;
                    }
                    *((_DWORD *)this + 10) = v75;
                    *((_DWORD *)this + 11) = (v74 >> 2) & 1;
                    uint64_t v76 = *((void *)this + 6);
                    if (v76)
                    {
                      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
                      *((void *)this + 6) = 0;
                    }
                    operator new();
                  }
                }
              }
            }
          }
        }
        goto LABEL_303;
      case 14:
        if (v164)
        {
          unsigned int v63 = v164 - 1;
          while ((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) != -1
               && v63-- != 0)
            ;
        }
        goto LABEL_305;
      case 16:
        if (v164)
        {
          unsigned int v77 = v164 - 1;
          while ((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) != -1
               && v77-- != 0)
            ;
        }
        goto LABEL_305;
      case 17:
        unsigned int v65 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
        if (v65 == -1) {
          goto LABEL_303;
        }
        unsigned int v177 = 0;
        if (!JBIG2Stream::readULong(this, &v177)) {
          goto LABEL_303;
        }
        v180[0] = 0;
        if (!JBIG2Stream::readULong(this, v180)) {
          goto LABEL_303;
        }
        *(void *)(*((void *)this + 30) + 8) = 0;
        CGFloat v66 = (char *)gmalloc(0x80uLL);
        unsigned int v67 = ((v65 >> 1) & 7) + 1;
        signed int v68 = v177;
        if ((int)v177 >= (int)v180[0])
        {
          int v70 = 0;
          unsigned int v71 = 8;
        }
        else
        {
          unsigned int v69 = 0;
          int v70 = 0;
          unsigned int v71 = 8;
          do
          {
            if (v70 == v71)
            {
              if (v69 >> 22) {
                goto LABEL_303;
              }
              CGFloat v66 = (char *)greallocn(v66, v69, 0x10u);
              unsigned int v71 = v69;
            }
            *(_DWORD *)&v66[16 * v70] = v68;
            uint64_t v72 = &v66[16 * v70];
            *((_DWORD *)v72 + 1) = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v65 >> 1) & 7) + 1);
            int Bits = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v65 >> 4) & 7) + 1);
            *((_DWORD *)v72 + 2) = Bits;
            v68 += 1 << Bits;
            ++v70;
            v69 += 2;
          }
          while (v68 < (int)v180[0]);
        }
        int v111 = v65 & 1;
        unsigned int v112 = v111 + v70 + 3;
        if (v112 > v71) {
          CGFloat v66 = (char *)greallocn(v66, v112, 0x10u);
        }
        *(_DWORD *)&v66[16 * v70] = v177 - 1;
        int v113 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v65 >> 1) & 7) + 1);
        uint64_t v114 = &v66[16 * v70];
        *((_DWORD *)v114 + 1) = v113;
        *((_DWORD *)v114 + 2) = -3;
        *(_DWORD *)&v66[16 * (v70 + 1)] = v180[0];
        int v115 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v65 >> 1) & 7) + 1);
        uint64_t v116 = &v66[16 * (v70 + 1)];
        *((_DWORD *)v116 + 1) = v115;
        *((_DWORD *)v116 + 2) = 32;
        uint64_t v117 = (v70 + 2);
        if (v111)
        {
          *(_DWORD *)&v66[16 * (v70 + 2)] = 0;
          int v118 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), v67);
          long long v119 = &v66[16 * v117];
          *((_DWORD *)v119 + 1) = v118;
          *((_DWORD *)v119 + 2) = -2;
          LODWORD(v117) = v70 + 3;
        }
        long long v120 = &v66[16 * v117];
        *(void *)long long v120 = 0;
        *((_DWORD *)v120 + 2) = -1;
        JBIG2HuffmanDecoder::buildTable(v66, v117);
        operator new();
      case 26:
        if (v164)
        {
          unsigned int v61 = v164 - 1;
          while ((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) != -1
               && v61-- != 0)
            ;
        }
        goto LABEL_305;
      default:
        if (!v25 && v24)
        {
          switch(v28)
          {
            case 16:
              unsigned int v81 = v164;
              unsigned int v82 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v82 == -1) {
                goto LABEL_303;
              }
              unsigned int v83 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v83 == -1) {
                goto LABEL_303;
              }
              unsigned int v84 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v84 == -1) {
                goto LABEL_303;
              }
              unsigned int v175 = 0;
              if (!JBIG2Stream::readULong(this, &v175)) {
                goto LABEL_303;
              }
              if (v83 <= 0xFFFE && v84 <= 0xFFFE)
              {
                unsigned int v85 = v175;
                if (v175 <= 0xFFFE)
                {
                  int v86 = (v82 >> 1) & 3;
                  int v87 = v82 & 1;
                  if (!v87)
                  {
                    JBIG2Stream::resetGenericStats(this, v86, 0);
                    JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
                  }
                  unsigned int v177 = -v83;
                  uint64_t v178 = 0x2FFFFFFFDLL;
                  int v179 = -2;
                  *(_OWORD *)int v180 = xmmword_1850CDAC0;
                  JBIG2Stream::readGenericBitmap(this, v87, (v85 + 1) * v83, v84, v86, 0, 0, 0, (int *)&v177, (int *)v180, v81 - 7);
                }
              }
              return;
            case 20:
            case 22:
            case 23:
              unsigned int v175 = 0;
              if (!JBIG2Stream::readULong(this, &v175)) {
                goto LABEL_303;
              }
              v174[0] = 0;
              if (!JBIG2Stream::readULong(this, v174)) {
                goto LABEL_303;
              }
              unsigned int v173 = 0;
              if (!JBIG2Stream::readULong(this, &v173)) {
                goto LABEL_303;
              }
              unsigned int v172 = 0;
              if (!JBIG2Stream::readULong(this, &v172)) {
                goto LABEL_303;
              }
              if ((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) == -1) {
                goto LABEL_303;
              }
              unsigned int v38 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v38 == -1) {
                goto LABEL_303;
              }
              unsigned int v171 = 0;
              if (!JBIG2Stream::readULong(this, &v171)) {
                goto LABEL_303;
              }
              unsigned int v170 = 0;
              if (!JBIG2Stream::readULong(this, &v170)) {
                goto LABEL_303;
              }
              v168[1] = 0;
              if (!JBIG2Stream::readULong(this, &v168[1])) {
                goto LABEL_303;
              }
              v168[0] = 0;
              if (!JBIG2Stream::readULong(this, v168)) {
                goto LABEL_303;
              }
              v169[1] = 0;
              if (!JBIG2Stream::readUWord(this, &v169[1])) {
                goto LABEL_303;
              }
              v169[0] = 0;
              if (!JBIG2Stream::readUWord(this, v169)) {
                goto LABEL_303;
              }
              if (v175 && v174[0] && v175 < 0x7FFFFFFF / v174[0])
              {
                if (v170 && v171 < 0x7FFFFFFF / v170)
                {
                  if (v6 == 1)
                  {
                    uint64_t v160 = JBIG2Stream::findSegment(this, *v14);
                    if (v160)
                    {
                      if (((unsigned int (*)(uint64_t **))(*v160)[2])(v160) == 2)
                      {
                        unsigned int v39 = *((_DWORD *)v160 + 3);
                        if (v39 >= 2)
                        {
                          unsigned int v40 = 1;
                          int v41 = -1;
                          do
                          {
                            v40 *= 2;
                            ++v41;
                          }
                          while (v40 < v39);
                        }
                        if ((v38 & 1) == 0)
                        {
                          JBIG2Stream::resetGenericStats(this, (v38 >> 1) & 3, 0);
                          JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
                        }
                        operator new();
                      }
                    }
                  }
                  int v154 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
                  error(v154, "Bad symbol dictionary reference in JBIG2 halftone segment");
                }
                else
                {
                  int v153 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
                  error(v153, "Bad grid size in JBIG2 halftone segment");
                }
              }
              else
              {
                int v150 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
                error(v150, "Bad bitmap size in JBIG2 halftone segment");
              }
              break;
            default:
              goto LABEL_175;
          }
LABEL_304:
          uint64_t v14 = v163;
LABEL_305:
          free(v14);
          continue;
        }
        switch(v28)
        {
          case 0:
            unsigned int v173 = 0;
            unsigned int v170 = 0;
            *(void *)int v168 = 0;
            *(void *)__int16 v169 = 0;
            *(void *)uint64_t v167 = 0;
            if (!JBIG2Stream::readUWord(this, &v173)) {
              goto LABEL_312;
            }
            unsigned int v56 = v173;
            unsigned int v159 = (v173 >> 10) & 3;
            if (v173) {
              goto LABEL_215;
            }
            unsigned int v57 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
            if (!v159)
            {
              if (v57 == -1) {
                goto LABEL_312;
              }
              unsigned int v88 = v57 | 0xFFFFFF00;
              if ((v57 & 0x80) == 0) {
                unsigned int v88 = v57;
              }
              unsigned int v177 = v88;
              unsigned int v89 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v89 == -1) {
                goto LABEL_312;
              }
              unsigned int v90 = v89 | 0xFFFFFF00;
              if ((v89 & 0x80) == 0) {
                unsigned int v90 = v89;
              }
              v180[0] = v90;
              unsigned int v91 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v91 == -1) {
                goto LABEL_312;
              }
              unsigned int v92 = v91 | 0xFFFFFF00;
              if ((v91 & 0x80) == 0) {
                unsigned int v92 = v91;
              }
              LODWORD(v178) = v92;
              unsigned int v93 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v93 == -1) {
                goto LABEL_312;
              }
              unsigned int v94 = v93 | 0xFFFFFF00;
              if ((v93 & 0x80) == 0) {
                unsigned int v94 = v93;
              }
              v180[1] = v94;
              unsigned int v95 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v95 == -1) {
                goto LABEL_312;
              }
              unsigned int v96 = v95 | 0xFFFFFF00;
              if ((v95 & 0x80) == 0) {
                unsigned int v96 = v95;
              }
              HIDWORD(v178) = v96;
              unsigned int v97 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v97 == -1) {
                goto LABEL_312;
              }
              unsigned int v98 = v97 | 0xFFFFFF00;
              if ((v97 & 0x80) == 0) {
                unsigned int v98 = v97;
              }
              v180[2] = v98;
              unsigned int v99 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v99 == -1) {
                goto LABEL_312;
              }
              unsigned int v100 = v99 | 0xFFFFFF00;
              if ((v99 & 0x80) == 0) {
                unsigned int v100 = v99;
              }
              int v179 = v100;
              unsigned int v101 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v101 == -1) {
                goto LABEL_312;
              }
              unsigned int v102 = v101 | 0xFFFFFF00;
              if ((v101 & 0x80) == 0) {
                unsigned int v102 = v101;
              }
              v180[3] = v102;
LABEL_215:
              if ((v56 & 2) != 0 && ((v56 >> 12) & 1) == 0)
              {
                unsigned int v103 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                if (v103 == -1) {
                  goto LABEL_312;
                }
                unsigned int v104 = v103 | 0xFFFFFF00;
                if ((v103 & 0x80) == 0) {
                  unsigned int v104 = v103;
                }
                unsigned int v175 = v104;
                unsigned int v105 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                if (v105 == -1) {
                  goto LABEL_312;
                }
                unsigned int v106 = v105 | 0xFFFFFF00;
                if ((v105 & 0x80) == 0) {
                  unsigned int v106 = v105;
                }
                v174[0] = v106;
                unsigned int v107 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                if (v107 == -1) {
                  goto LABEL_312;
                }
                unsigned int v108 = v107 | 0xFFFFFF00;
                if ((v107 & 0x80) == 0) {
                  unsigned int v108 = v107;
                }
                unsigned int v176 = v108;
                unsigned int v109 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                if (v109 == -1) {
                  goto LABEL_312;
                }
                unsigned int v110 = v109 | 0xFFFFFF00;
                if ((v109 & 0x80) == 0) {
                  unsigned int v110 = v109;
                }
                v174[1] = v110;
              }
              unsigned int v172 = 0;
              if (JBIG2Stream::readULong(this, &v172))
              {
                unsigned int v171 = 0;
                if (JBIG2Stream::readULong(this, &v171)) {
                  operator new();
                }
              }
              goto LABEL_312;
            }
            if (v57 != -1)
            {
              unsigned int v58 = v57 | 0xFFFFFF00;
              if ((v57 & 0x80) == 0) {
                unsigned int v58 = v57;
              }
              unsigned int v177 = v58;
              unsigned int v59 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v59 != -1)
              {
                unsigned int v60 = v59 | 0xFFFFFF00;
                if ((v59 & 0x80) == 0) {
                  unsigned int v60 = v59;
                }
                v180[0] = v60;
                goto LABEL_215;
              }
            }
LABEL_312:
            int v158 = (*(uint64_t (**)(JBIG2Stream *))(*(void *)this + 40))(this);
            error(v158, "Unexpected EOF in JBIG2 stream");
LABEL_313:
            free(v14);
            break;
          case 1:
          case 2:
          case 3:
          case 5:
            goto LABEL_175;
          case 4:
          case 6:
          case 7:
            v174[0] = 0;
            v169[1] = 0;
            v168[1] = 0;
            if (!JBIG2Stream::readULong(this, v174)) {
              goto LABEL_303;
            }
            unsigned int v173 = 0;
            if (!JBIG2Stream::readULong(this, &v173)) {
              goto LABEL_303;
            }
            unsigned int v172 = 0;
            if (!JBIG2Stream::readULong(this, &v172)) {
              goto LABEL_303;
            }
            unsigned int v171 = 0;
            if (!JBIG2Stream::readULong(this, &v171)) {
              goto LABEL_303;
            }
            if ((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) == -1) {
              goto LABEL_303;
            }
            unsigned int v170 = 0;
            if (!JBIG2Stream::readUWord(this, &v170)) {
              goto LABEL_303;
            }
            unsigned int v42 = v170;
            if ((v170 & 1) != 0 && !JBIG2Stream::readUWord(this, &v169[1])) {
              goto LABEL_303;
            }
            if (v42 & 2) == 0 || ((v42 >> 15)) {
              goto LABEL_255;
            }
            unsigned int v121 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
            if (v121 != -1)
            {
              unsigned int v122 = v121 | 0xFFFFFF00;
              if ((v121 & 0x80) == 0) {
                unsigned int v122 = v121;
              }
              v180[0] = v122;
              unsigned int v123 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
              if (v123 != -1)
              {
                unsigned int v124 = v123 | 0xFFFFFF00;
                if ((v123 & 0x80) == 0) {
                  unsigned int v124 = v123;
                }
                unsigned int v175 = v124;
                unsigned int v125 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                if (v125 != -1)
                {
                  unsigned int v126 = v125 | 0xFFFFFF00;
                  if ((v125 & 0x80) == 0) {
                    unsigned int v126 = v125;
                  }
                  v180[1] = v126;
                  unsigned int v127 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
                  if (v127 != -1)
                  {
                    unsigned int v128 = v127 | 0xFFFFFF00;
                    if ((v127 & 0x80) == 0) {
                      unsigned int v128 = v127;
                    }
                    unsigned int v176 = v128;
LABEL_255:
                    v169[0] = 0;
                    if (JBIG2Stream::readULong(this, v169)) {
                      operator new();
                    }
                  }
                }
              }
            }
            goto LABEL_303;
          default:
            JUMPOUT(0);
        }
        return;
    }
  }
}

void sub_184DD06A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
    error(v41, "Exception thrown when attempting to allocate memory.");
    __cxa_end_catch();
    JUMPOUT(0x184DD0480);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JBIG2Stream::readULong(JBIG2Stream *this, unsigned int *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
  if (v4 == -1) {
    return 0;
  }
  int v5 = v4;
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
  if (v6 == -1) {
    return 0;
  }
  int v7 = v6;
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
  if (v8 == -1) {
    return 0;
  }
  int v9 = v8;
  int v10 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
  if (v10 == -1) {
    return 0;
  }
  *a2 = (v7 << 16) | (v5 << 24) | (v9 << 8) | v10;
  return 1;
}

uint64_t JBIG2Stream::readUWord(JBIG2Stream *this, unsigned int *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
  if (v4 == -1) {
    return 0;
  }
  int v5 = v4;
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10));
  if (v6 == -1) {
    return 0;
  }
  *a2 = v6 | (v5 << 8);
  return 1;
}

uint64_t JBIG2HuffmanDecoder::readBits(JBIG2HuffmanDecoder *this, unsigned int a2)
{
  unsigned int v3 = *((_DWORD *)this + 3);
  unsigned int v4 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v5 = *((_DWORD *)this + 2) & ~(-1 << v3);
    unsigned int v6 = a2 - v3;
    *((_DWORD *)this + 3) = 0;
    if (a2 - v3 < 8)
    {
      uint64_t v8 = v5;
      if (!v6) {
        return v8;
      }
    }
    else
    {
      do
      {
        unsigned __int8 v7 = (*(uint64_t (**)(void))(**(void **)this + 32))();
        uint64_t v8 = v7 | (v5 << 8);
        v6 -= 8;
        LODWORD(v5) = v7 | (v5 << 8);
      }
      while (v6 > 7);
      if (!v6) {
        return v8;
      }
    }
    unsigned int v10 = (*(uint64_t (**)(void))(**(void **)this + 32))();
    *((_DWORD *)this + 2) = v10;
    *((_DWORD *)this + 3) = 8 - v6;
    return (v10 >> (8 - v6)) & ~(-1 << v6) | (v8 << v6);
  }
  if (a2 == 32) {
    int v9 = -1;
  }
  else {
    int v9 = ~(-1 << a2);
  }
  uint64_t v8 = (*((_DWORD *)this + 2) >> v4) & v9;
  *((_DWORD *)this + 3) = v4;
  return v8;
}

_DWORD *JBIG2HuffmanDecoder::buildTable(_DWORD *result, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = 0;
    uint64_t v3 = a2;
    unsigned int v4 = 1;
    uint64_t v5 = result + 1;
    while (1)
    {
      unsigned int v6 = a2 <= v4 ? v4 : a2;
      unsigned __int8 v7 = v5;
      unint64_t v8 = v2;
      while (1)
      {
        int v9 = *v7;
        v7 += 4;
        if (v9) {
          break;
        }
        if (++v8 >= a2) {
          goto LABEL_11;
        }
      }
      unsigned int v6 = v8;
LABEL_11:
      if (v6 == a2) {
        break;
      }
      unsigned int v10 = v6 + 1;
      if (v6 + 1 < a2)
      {
        int v11 = &result[4 * v10 + 1];
        do
        {
          unsigned int v13 = *v11;
          v11 += 4;
          unsigned int v12 = v13;
          if (v13 && v12 < result[4 * v6 + 1]) {
            unsigned int v6 = v10;
          }
          ++v10;
        }
        while (a2 != v10);
      }
      if (v2 != v6)
      {
        unint64_t v14 = v6;
        unsigned int v15 = (long long *)&result[4 * v6];
        long long v24 = *v15;
        if (v2 < v14)
        {
          unint64_t v16 = v14 - 1;
          do
          {
            unint64_t v17 = v16;
            *v15-- = *(_OWORD *)&result[4 * v16--];
          }
          while (v17 > v2);
        }
        *(_OWORD *)&result[4 * v2] = v24;
      }
      ++v2;
      ++v4;
      v5 += 4;
      if (v2 == a2) {
        goto LABEL_27;
      }
    }
    a2 = v2;
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_27:
  *(_OWORD *)&result[4 * a2] = *(_OWORD *)&result[4 * v3];
  if (result[2] != -1)
  {
    result[3] = 0;
    if (result[6] != -1)
    {
      uint64_t v18 = 1;
      unsigned int v19 = 2;
      int v20 = 1;
      do
      {
        uint64_t v21 = &result[4 * v18];
        int v22 = v20 << (v21[1] - result[4 * v19 - 7]);
        int v20 = v22 + 1;
        v21[3] = v22;
        uint64_t v18 = v19;
        int v23 = result[4 * v19++ + 2];
      }
      while (v23 != -1);
    }
  }
  return result;
}

void JBIG2Bitmap::JBIG2Bitmap(JBIG2Bitmap *this, int a2, int a3, signed int a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *(void *)this = &unk_1ED093668;
  unsigned int v5 = (a3 + 7) >> 3;
  *((_DWORD *)this + 4) = a4;
  *((_DWORD *)this + 5) = v5;
  if (a3 < 1 || a4 < 1 || 0x7FFFFFFE / v5 <= a4)
  {
    *((void *)this + 2) = 0x2FFFFFFFFLL;
    a4 = -1;
    unsigned int v5 = 2;
  }
  unsigned int v6 = gmalloc(v5 * a4 + 1);
  *((void *)this + 3) = v6;
  if (v6) {
    v6[*((int *)this + 5) * (uint64_t)*((int *)this + 4)] = 0;
  }
}

void JBIG2Bitmap::expand(JBIG2Bitmap *this, signed int a2, int a3)
{
  if (*((_DWORD *)this + 4) < a2)
  {
    int v4 = *((_DWORD *)this + 5);
    if (v4 >= 1 && (int)(0x7FFFFFFEu / v4) > a2)
    {
      unsigned __int8 v7 = (char *)grealloc(*((void **)this + 3), (v4 * a2 + 1));
      *((void *)this + 3) = v7;
      int v8 = *((_DWORD *)this + 4);
      int v9 = *((_DWORD *)this + 5);
      unsigned int v10 = &v7[v9 * v8];
      int v11 = (a2 - v8) * v9;
      if (a3) {
        memset(v10, 255, v11);
      }
      else {
        bzero(v10, v11);
      }
      *((_DWORD *)this + 4) = a2;
      *(unsigned char *)(*((void *)this + 3) + *((int *)this + 5) * (uint64_t)a2) = 0;
    }
  }
}

uint64_t **JBIG2Stream::findSegment(JBIG2Stream *this, int a2)
{
  unint64_t v2 = (uint64_t **)*((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)v2 + 3);
    if ((int)v3 < 1)
    {
LABEL_6:
      unsigned int v5 = (uint64_t **)*((void *)this + 8);
      uint64_t v6 = *((unsigned int *)v5 + 3);
      if ((int)v6 < 1)
      {
        return 0;
      }
      else
      {
        for (uint64_t i = *v5; ; ++i)
        {
          unint64_t v2 = (uint64_t **)*i;
          if (*(_DWORD *)(*i + 8) == a2) {
            break;
          }
          if (!--v6) {
            return 0;
          }
        }
      }
    }
    else
    {
      int v4 = *v2;
      while (1)
      {
        unint64_t v2 = (uint64_t **)*v4;
        if (*(_DWORD *)(*v4 + 8) == a2) {
          break;
        }
        ++v4;
        if (!--v3) {
          goto LABEL_6;
        }
      }
    }
  }
  return v2;
}

void JBIG2Bitmap::getSlice(JBIG2Bitmap *this)
{
}

void sub_184DD11BC(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1091C40AC3DD578);
  _Unwind_Resume(a1);
}

void JBIG2Stream::resetRefinementStats(JBIG2Stream *this, unsigned int a2, JArithmeticDecoderStats *a3)
{
  size_t v4 = *((int *)&refContextSize + a2);
  if (a3 && *((_DWORD *)a3 + 2) == v4)
  {
    uint64_t v6 = *((void *)this + 15);
    unsigned __int8 v7 = *(void **)v6;
    if (*(_DWORD *)(v6 + 8) != v4)
    {
      free(v7);
      MEMORY[0x18532A2A0](v6, 0x1010C40A1D9428BLL);
      JArithmeticDecoderStats::copy(a3);
    }
    int v8 = *(const void **)a3;
    memcpy(v7, v8, v4);
  }
  else
  {
    uint64_t v9 = *((void *)this + 15);
    unsigned int v10 = *(void **)v9;
    if (*(_DWORD *)(v9 + 8) != v4)
    {
      free(v10);
      MEMORY[0x18532A2A0](v9, 0x1010C40A1D9428BLL);
      *((void *)this + 15) = 0;
      operator new();
    }
    size_t v11 = *((int *)&refContextSize + a2);
    bzero(v10, v11);
  }
}

void sub_184DD1328(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

uint64_t JBIG2Stream::readGenericRefinementRegion(JBIG2Stream *this, int a2, int a3, int a4, int a5, JBIG2Bitmap *a6, int a7, int a8, int *a9, int *a10)
{
  if (a2 < 0x10000 && a3 < 0x10000) {
    operator new();
  }
  return 0;
}

void sub_184DD3198(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1091C40AC3DD578);
  _Unwind_Resume(a1);
}

uint64_t JBIG2Bitmap::combine(uint64_t this, JBIG2Bitmap *a2, int a3, int a4, int a5)
{
  if (a2 && a4 != 0x80000000)
  {
    int v5 = -a4 & (a4 >> 31);
    int v6 = *(_DWORD *)(this + 16);
    int v7 = *((_DWORD *)a2 + 4) + a4 <= v6 ? *((_DWORD *)a2 + 4) : v6 - a4;
    BOOL v8 = v5 >= v7 || (v5 ^ 0x7FFFFFFF) < a4;
    if (!v8 && (v7 ^ 0x7FFFFFFF) >= a4)
    {
      int v10 = *(_DWORD *)(this + 20);
      if (v10 < 1 || ((signed int v11 = 0x7FFFFFFFu / v10, v5 + a4 <= v11) ? (v12 = v7 + a4 <= v11) : (v12 = 0), v12))
      {
        signed int v13 = a3 & 0xFFFFFFF8 & ~(a3 >> 31);
        signed int v14 = *((_DWORD *)a2 + 3) + a3 >= *(_DWORD *)(this + 12) ? *(_DWORD *)(this + 12) : *((_DWORD *)a2 + 3) + a3;
        if (v13 < v14)
        {
          char v15 = a3 & 7;
          unsigned int v16 = 0xFFu >> (v14 & 7);
          int v17 = 255 << (8 - (v14 & 7));
          if ((v14 & 7) == 0) {
            int v17 = 255;
          }
          unint64_t v18 = (unint64_t)-a3 >> 3;
          unsigned int v19 = (v14 - 1) & 0xFFFFFFF8;
          unint64_t v20 = (unint64_t)a3 >> 3;
          signed int v21 = v14 - 8;
          do
          {
            int v22 = (unsigned char *)(*(void *)(this + 24) + *(int *)(this + 20) * (uint64_t)(v5 + a4));
            if (v13 == v19)
            {
              if (a3 < 0)
              {
                LOBYTE(v23) = *v22;
                char v30 = *(unsigned char *)(*((void *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5 + v18);
                switch(a5)
                {
                  case 0:
                    LOBYTE(v25) = v17 & v30;
                    goto LABEL_60;
                  case 1:
                    LOBYTE(v32) = v16 | v30;
                    goto LABEL_67;
                  case 2:
                    char v40 = v17 & v30;
                    goto LABEL_69;
                  case 3:
                    goto LABEL_61;
                  case 4:
                    char v41 = v17 & v30;
                    goto LABEL_71;
                  default:
                    break;
                }
              }
              else
              {
                v22 += v20;
                unsigned int v23 = *v22;
                unsigned int v24 = *(unsigned __int8 *)(*((void *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5);
                switch(a5)
                {
                  case 0:
                    int v25 = (v24 >> v15) & v17;
                    goto LABEL_60;
                  case 1:
                    unsigned int v32 = ((v24 | 0xFF00) >> v15) | v16;
                    goto LABEL_67;
                  case 2:
                    unsigned int v33 = v24 >> v15;
                    goto LABEL_62;
                  case 3:
                    unsigned int v33 = (v24 ^ 0xFF) >> v15;
                    goto LABEL_62;
                  case 4:
                    unsigned int v23 = (v24 >> v15) & v17 | v23 & ~(v17 & (0xFFu >> v15));
                    break;
                  default:
                    break;
                }
              }
            }
            else
            {
              if (a3 < 0)
              {
                signed int v31 = 0;
                int v27 = (unsigned __int8 *)(*((void *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5 + v18);
                unsigned int v28 = *v27;
              }
              else
              {
                int v26 = &v22[v20];
                int v27 = (unsigned __int8 *)(*((void *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5);
                unsigned int v28 = *v27;
                int v29 = *v26;
                switch(a5)
                {
                  case 0:
                    v29 |= v28 >> v15;
                    break;
                  case 1:
                    v29 &= (v28 | 0xFF00) >> v15;
                    break;
                  case 2:
                    unsigned int v34 = v28 >> v15;
                    goto LABEL_45;
                  case 3:
                    unsigned int v34 = (v28 ^ 0xFF) >> v15;
LABEL_45:
                    LOBYTE(v29) = v34 ^ v29;
                    break;
                  case 4:
                    int v29 = (255 << (8 - v15)) & v29 | (v28 >> v15);
                    break;
                  default:
                    break;
                }
                *int v26 = v29;
                int v22 = v26 + 1;
                signed int v31 = (a3 & 0xFFFFFFF8) + 8;
              }
              unsigned int v35 = v27 + 1;
              if (v31 >= v21)
              {
                unsigned int v37 = v28;
              }
              else
              {
                do
                {
                  char v36 = *v22;
                  unsigned int v37 = *v35;
                  unsigned int v38 = (v37 | (v28 << 8)) >> v15;
                  switch(a5)
                  {
                    case 0:
                      v36 |= v38;
                      break;
                    case 1:
                      v36 &= v38;
                      break;
                    case 2:
                      v36 ^= v38;
                      break;
                    case 3:
                      char v36 = ~(v38 ^ v36);
                      break;
                    case 4:
                      char v36 = v38;
                      break;
                    default:
                      break;
                  }
                  *v22++ = v36;
                  v31 += 8;
                  ++v35;
                  unsigned int v28 = v37;
                }
                while (v31 < v21);
              }
              LOBYTE(v23) = *v22;
              unsigned int v39 = (*v35 | (v37 << 8)) >> v15;
              char v30 = v39;
              switch(a5)
              {
                case 0:
                  LOBYTE(v25) = v39 & v17;
LABEL_60:
                  LOBYTE(v23) = v25 | v23;
                  break;
                case 1:
                  LOBYTE(v32) = v39 | v16;
LABEL_67:
                  LOBYTE(v23) = v32 & v23;
                  break;
                case 2:
                  char v40 = v39 & v17;
                  goto LABEL_69;
                case 3:
LABEL_61:
                  LOBYTE(v33) = ~v30;
LABEL_62:
                  char v40 = v33 & v17;
LABEL_69:
                  LOBYTE(v23) = v40 ^ v23;
                  break;
                case 4:
                  char v41 = v39 & v17;
LABEL_71:
                  LOBYTE(v23) = v41 | v16 & v23;
                  break;
                default:
                  break;
              }
            }
            *int v22 = v23;
            ++v5;
          }
          while (v5 < v7);
        }
      }
    }
  }
  return this;
}

void *JBIG2Stream::discardSegment(void *this, int a2)
{
  uint64_t v2 = this[9];
  uint64_t v3 = *(unsigned int *)(v2 + 12);
  if ((int)v3 < 1)
  {
LABEL_5:
    uint64_t v2 = this[8];
    uint64_t v3 = *(unsigned int *)(v2 + 12);
    if ((int)v3 < 1) {
      return this;
    }
    uint64_t v4 = 0;
    int v5 = *(void **)v2;
    while (*(_DWORD *)(v5[v4] + 8) != a2)
    {
      if (v3 == ++v4) {
        return this;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = *(void **)v2;
    while (*(_DWORD *)(v5[v4] + 8) != a2)
    {
      if (v3 == ++v4) {
        goto LABEL_5;
      }
    }
  }
  if ((v4 & 0x80000000) != 0 || (int)v3 <= (int)v4) {
    return (void *)error(-1, "%s: Range error (indeCGFloat x = %d, length = %d)", "del", v4, v3);
  }
  int v6 = v3 - 1;
  if ((int)v3 - 1 > (int)v4)
  {
    this = memmove(&v5[v4], &v5[v4 + 1], 8 * ((int)v3 + ~v4));
    int v6 = *(_DWORD *)(v2 + 12) - 1;
  }
  *(_DWORD *)(v2 + 12) = v6;
  int v7 = *(_DWORD *)(v2 + 8);
  int v8 = v7 - v6;
  int v9 = *(_DWORD *)(v2 + 16);
  if (v7 >= 0) {
    int v10 = *(_DWORD *)(v2 + 8);
  }
  else {
    int v10 = v7 + 1;
  }
  int v11 = v10 >> 1;
  if (v9 <= 0) {
    int v9 = v11;
  }
  if (v8 >= v9)
  {
    *(_DWORD *)(v2 + 8) = v7 - v9;
    this = greallocn(*(void **)v2, v7 - v9, 8u);
    *(void *)uint64_t v2 = this;
    int v12 = *(_DWORD *)(v2 + 8);
    if (v12 < *(_DWORD *)(v2 + 12)) {
      *(_DWORD *)(v2 + 12) = v12;
    }
  }
  return this;
}

uint64_t JBIG2Bitmap::clearPixel(uint64_t this, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) == 0
    && (a3 & 0x80000000) == 0
    && *(_DWORD *)(this + 12) > (signed int)a2
    && *(_DWORD *)(this + 16) > a3)
  {
    int v3 = *(_DWORD *)(this + 20) * a3 + (a2 >> 3);
    *(unsigned char *)(*(void *)(this + 24) + v3) &= 0x7F7Fu >> (a2 & 7);
  }
  return this;
}

uint64_t JBIG2Bitmap::setPixel(uint64_t this, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) == 0
    && (a3 & 0x80000000) == 0
    && *(_DWORD *)(this + 12) > (signed int)a2
    && *(_DWORD *)(this + 16) > a3)
  {
    int v3 = *(_DWORD *)(this + 20) * a3 + (a2 >> 3);
    *(unsigned char *)(*(void *)(this + 24) + v3) |= 1 << (~(_BYTE)a2 & 7);
  }
  return this;
}

uint64_t JBIG2Bitmap::getPixel(JBIG2Bitmap *this, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t result = 0;
  if ((a3 & 0x80000000) == 0 && *((_DWORD *)this + 3) > (signed int)a2)
  {
    if (*((_DWORD *)this + 4) > a3) {
      return (*(unsigned __int8 *)(*((void *)this + 3) + (int)(*((_DWORD *)this + 5) * a3 + (a2 >> 3))) >> (~(_BYTE)a2 & 7)) & 1;
    }
    return 0;
  }
  return result;
}

void JBIG2Stream::resetGenericStats(JBIG2Stream *this, int a2, JArithmeticDecoderStats *a3)
{
  size_t v4 = contextSize[a2];
  if (a3 && *((_DWORD *)a3 + 2) == v4)
  {
    uint64_t v6 = *((void *)this + 14);
    int v7 = *(void **)v6;
    if (*(_DWORD *)(v6 + 8) != v4)
    {
      free(v7);
      MEMORY[0x18532A2A0](v6, 0x1010C40A1D9428BLL);
      JArithmeticDecoderStats::copy(a3);
    }
    int v8 = *(const void **)a3;
    memcpy(v7, v8, v4);
  }
  else
  {
    uint64_t v9 = *((void *)this + 14);
    int v10 = *(void **)v9;
    if (*(_DWORD *)(v9 + 8) != v4)
    {
      free(v10);
      MEMORY[0x18532A2A0](v9, 0x1010C40A1D9428BLL);
      *((void *)this + 14) = 0;
      operator new();
    }
    size_t v11 = contextSize[a2];
    bzero(v10, v11);
  }
}

void sub_184DD398C(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

void JBIG2Stream::readGenericBitmap(JBIG2Stream *this, int a2, int a3, int a4, int a5, int a6, int a7, JBIG2Bitmap *a8, int *a9, int *a10, int a11)
{
}

void sub_184DD6258(_Unwind_Exception *exception_object, int a2)
{
  int v3 = *(void **)(v2 - 120);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    int v4 = (*(uint64_t (**)(void))(**(void **)(v2 - 112) + 40))(*(void *)(v2 - 112));
    error(v4, "Exception thrown when attempting to allocate memory.");
    if (v3) {
      free(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x184DD4B5CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JBIG2MMRDecoder::getBlackCode(JBIG2MMRDecoder *this)
{
  unsigned int v2 = *((_DWORD *)this + 3);
  if (!v2)
  {
    unsigned __int8 v3 = (*(uint64_t (**)(void))(**(void **)this + 32))();
    unsigned int v2 = 8;
    *((_DWORD *)this + 2) = v3;
    *((_DWORD *)this + 3) = 8;
    ++*((_DWORD *)this + 4);
  }
  while (1)
  {
    if (v2 < 0xA)
    {
      unsigned int v4 = *((_DWORD *)this + 2);
      if (v2 < 7)
      {
        unsigned int v8 = v4 << (6 - v2);
LABEL_20:
        int v7 = (__int16 *)((char *)&blackTab3 + 4 * (v8 & 0x3F));
        goto LABEL_21;
      }
      char v5 = v2 - 6;
    }
    else
    {
      unsigned int v4 = *((_DWORD *)this + 2);
      char v5 = v2 - 6;
      if (((v4 >> (v2 - 6)) & 0x3F) == 0)
      {
        int v6 = v4 << (13 - v2);
        if (v2 >= 0xE) {
          LOBYTE(v6) = v4 >> (v2 - 13);
        }
        int v7 = (__int16 *)((char *)&blackTab1 + 4 * (v6 & 0x7F));
        goto LABEL_21;
      }
    }
    unsigned int v8 = v4 >> v5;
    if (((v4 >> (v2 - 4)) & 0xF) != 0 || (v8 & 3) == 0) {
      goto LABEL_20;
    }
    int v10 = v4 << (12 - v2);
    if (v2 >= 0xD) {
      LOBYTE(v10) = v4 >> (v2 - 12);
    }
    BOOL v11 = v10 >= 0x40u;
    int v12 = v10 - 64;
    if (!v11) {
      break;
    }
    int v7 = &blackTab2[2 * v12];
LABEL_21:
    int v13 = *v7;
    if (v13 >= 1 && (int)v2 >= v13)
    {
      *((_DWORD *)this + 3) = v2 - v13;
      return v7[1];
    }
    if (v2 > 0xC) {
      break;
    }
    *((_DWORD *)this + 2) = (*(unsigned __int8 (**)(void))(**(void **)this + 32))() | (v4 << 8);
    int32x2_t v15 = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000008);
    *(int32x2_t *)((char *)this + 12) = v15;
    unsigned int v2 = v15.i32[0];
  }
  int v16 = (*(uint64_t (**)(void))(**(void **)this + 40))();
  error(v16, "Bad black code in JBIG2 MMR stream");
  --*((_DWORD *)this + 3);
  return 1;
}

uint64_t JBIG2MMRDecoder::getWhiteCode(JBIG2MMRDecoder *this)
{
  unsigned int v2 = *((_DWORD *)this + 3);
  if (!v2)
  {
    unsigned __int8 v3 = (*(uint64_t (**)(void))(**(void **)this + 32))();
    unsigned int v2 = 8;
    *((_DWORD *)this + 2) = v3;
    *((_DWORD *)this + 3) = 8;
    ++*((_DWORD *)this + 4);
  }
  while (1)
  {
    if (v2 < 0xB)
    {
      unsigned int v4 = *((_DWORD *)this + 2);
      if (v2 == 10) {
LABEL_9:
      }
        unsigned int v7 = v4 >> (v2 - 9);
      else {
        unsigned int v7 = v4 << (9 - v2);
      }
      int v6 = (char *)&whiteTab2 + 4 * (v7 & 0x1FF);
      goto LABEL_12;
    }
    unsigned int v4 = *((_DWORD *)this + 2);
    if (((v4 >> (v2 - 7)) & 0x7F) != 0) {
      goto LABEL_9;
    }
    int v5 = v4 << (12 - v2);
    if (v2 >= 0xD) {
      LOBYTE(v5) = v4 >> (v2 - 12);
    }
    int v6 = (char *)&whiteTab1 + 4 * (v5 & 0x1F);
LABEL_12:
    int v8 = *(__int16 *)v6;
    if (v8 >= 1 && (int)v2 >= v8)
    {
      *((_DWORD *)this + 3) = v2 - v8;
      return *((__int16 *)v6 + 1);
    }
    if (v2 > 0xB) {
      break;
    }
    *((_DWORD *)this + 2) = (*(unsigned __int8 (**)(void))(**(void **)this + 32))() | (v4 << 8);
    int32x2_t v10 = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000008);
    *(int32x2_t *)((char *)this + 12) = v10;
    unsigned int v2 = v10.i32[0];
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)this + 40))();
  error(v12, "Bad white code in JBIG2 MMR stream");
  --*((_DWORD *)this + 3);
  return 1;
}

uint64_t JBIG2HuffmanDecoder::decodeInt(JBIG2HuffmanDecoder *this, _DWORD *a2, uint64_t a3)
{
  unsigned __int8 v3 = (unsigned int *)(a3 + 8);
  if (*(_DWORD *)(a3 + 8) == -1) {
    return 0;
  }
  uint64_t v7 = 0;
  int v8 = 0;
  unsigned int v9 = 0;
  for (int i = 0; ; ++i)
  {
    uint64_t v11 = a3 + 16 * v7;
    unsigned int v14 = *(_DWORD *)(v11 + 4);
    int v13 = (unsigned int *)(v11 + 4);
    for (unsigned int j = v14; v9 < j; unsigned int j = *v13)
    {
      int v8 = JBIG2HuffmanDecoder::readBit(this) | (2 * v8);
      ++v9;
    }
    if (v8 == *(_DWORD *)(a3 + 16 * v7 + 12)) {
      break;
    }
    uint64_t v7 = (i + 1);
    uint64_t v15 = a3 + 16 * v7;
    int v16 = *(_DWORD *)(v15 + 8);
    unsigned __int8 v3 = (unsigned int *)(v15 + 8);
    if (v16 == -1) {
      return 0;
    }
  }
  int v17 = (int *)(a3 + 16 * v7);
  unsigned int v18 = *v3;
  if (*v3)
  {
    if (v18 != -2)
    {
      int v19 = *v17;
      if (v18 == -3) {
        int v20 = v19 - JBIG2HuffmanDecoder::readBits(this, 0x20u);
      }
      else {
        int v20 = JBIG2HuffmanDecoder::readBits(this, v18) + v19;
      }
      goto LABEL_16;
    }
    return 0;
  }
  int v20 = *v17;
LABEL_16:
  *a2 = v20;
  return 1;
}

void JBIG2Stream::resetIntStats(void ***this, char a2)
{
  bzero(*this[16], *((int *)this[16] + 2));
  bzero(*this[17], *((int *)this[17] + 2));
  bzero(*this[18], *((int *)this[18] + 2));
  bzero(*this[19], *((int *)this[19] + 2));
  bzero(*this[20], *((int *)this[20] + 2));
  bzero(*this[21], *((int *)this[21] + 2));
  bzero(*this[22], *((int *)this[22] + 2));
  bzero(*this[23], *((int *)this[23] + 2));
  bzero(*this[24], *((int *)this[24] + 2));
  bzero(*this[25], *((int *)this[25] + 2));
  bzero(*this[26], *((int *)this[26] + 2));
  bzero(*this[27], *((int *)this[27] + 2));
  bzero(*this[28], *((int *)this[28] + 2));
  unsigned int v4 = this[29];
  size_t v5 = *((int *)v4 + 2);
  int v6 = *v4;
  if (v5 != 1 << (a2 + 1))
  {
    free(v6);
    MEMORY[0x18532A2A0](v4, 0x1010C40A1D9428BLL);
    this[29] = 0;
    operator new();
  }

  bzero(v6, v5);
}

void sub_184DD6A3C(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

void JBIG2Stream::readTextRegion()
{
}

void sub_184DD70AC(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1091C40AC3DD578);
  _Unwind_Resume(a1);
}

uint64_t JBIG2HuffmanDecoder::readBit(JBIG2HuffmanDecoder *this)
{
  int v2 = *((_DWORD *)this + 3);
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)this + 2);
    int v4 = v2 - 1;
  }
  else
  {
    unsigned int v3 = (*(uint64_t (**)(void))(**(void **)this + 32))();
    *((_DWORD *)this + 2) = v3;
    int v4 = 7;
  }
  *((_DWORD *)this + 3) = v4;
  return (v3 >> v4) & 1;
}

void JBIG2SymbolDict::JBIG2SymbolDict(JBIG2SymbolDict *this, int a2, unsigned int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *(void *)this = &unk_1ED093818;
  *((void *)this + 2) = gmallocn(a3, 8u);
  uint64_t v4 = *((unsigned int *)this + 3);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      *(void *)(*((void *)this + 2) + v5) = 0;
      v5 += 8;
    }
    while (v6 != v5);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
}

void JBIG2Stream::~JBIG2Stream(void ***this)
{
  JBIG2Stream::~JBIG2Stream(this);

  JUMPOUT(0x18532A2A0);
}

{
  void **v2;
  int v3;
  void **v4;
  int v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;

  *this = (void **)&unk_1ED093690;
  JBIG2Stream::close((JBIG2Stream *)this);
  int v2 = this[3];
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)v2 + 2) - 1;
    *((_DWORD *)v2 + 2) = v3;
    if (!v3)
    {
      (*((void (**)(void **))*v2 + 1))(v2);
      this[3] = 0;
    }
  }
  uint64_t v4 = this[13];
  if (v4)
  {
    if (*((_DWORD *)v4 + 9))
    {
      uint64_t v5 = *((_DWORD *)v4 + 8);
      if (v5 >= 1)
      {
        uint64_t v6 = *((_DWORD *)v4 + 1);
        do
        {
          *(_DWORD *)uint64_t v4 = v6;
          if (*((_DWORD *)v4 + 9)) {
            *((_DWORD *)v4 + 8) = v5 - 1;
          }
          uint64_t v6 = (*(unsigned __int8 (**)(void *))(*(void *)v4[3] + 32))(v4[3]);
          *((_DWORD *)v4 + 1) = v6;
          uint64_t v5 = *((_DWORD *)v4 + 8);
        }
        while (v5 > 0);
      }
    }
    MEMORY[0x18532A2A0](v4, 0x1020C402DBDC18BLL);
  }
  uint64_t v7 = this[14];
  if (v7)
  {
    free(*v7);
    MEMORY[0x18532A2A0](v7, 0x1010C40A1D9428BLL);
  }
  int v8 = this[15];
  if (v8)
  {
    free(*v8);
    MEMORY[0x18532A2A0](v8, 0x1010C40A1D9428BLL);
  }
  unsigned int v9 = this[16];
  if (v9)
  {
    free(*v9);
    MEMORY[0x18532A2A0](v9, 0x1010C40A1D9428BLL);
  }
  int32x2_t v10 = this[17];
  if (v10)
  {
    free(*v10);
    MEMORY[0x18532A2A0](v10, 0x1010C40A1D9428BLL);
  }
  uint64_t v11 = this[18];
  if (v11)
  {
    free(*v11);
    MEMORY[0x18532A2A0](v11, 0x1010C40A1D9428BLL);
  }
  int v12 = this[19];
  if (v12)
  {
    free(*v12);
    MEMORY[0x18532A2A0](v12, 0x1010C40A1D9428BLL);
  }
  int v13 = this[20];
  if (v13)
  {
    free(*v13);
    MEMORY[0x18532A2A0](v13, 0x1010C40A1D9428BLL);
  }
  unsigned int v14 = this[21];
  if (v14)
  {
    free(*v14);
    MEMORY[0x18532A2A0](v14, 0x1010C40A1D9428BLL);
  }
  uint64_t v15 = this[22];
  if (v15)
  {
    free(*v15);
    MEMORY[0x18532A2A0](v15, 0x1010C40A1D9428BLL);
  }
  int v16 = this[23];
  if (v16)
  {
    free(*v16);
    MEMORY[0x18532A2A0](v16, 0x1010C40A1D9428BLL);
  }
  int v17 = this[24];
  if (v17)
  {
    free(*v17);
    MEMORY[0x18532A2A0](v17, 0x1010C40A1D9428BLL);
  }
  unsigned int v18 = this[25];
  if (v18)
  {
    free(*v18);
    MEMORY[0x18532A2A0](v18, 0x1010C40A1D9428BLL);
  }
  int v19 = this[26];
  if (v19)
  {
    free(*v19);
    MEMORY[0x18532A2A0](v19, 0x1010C40A1D9428BLL);
  }
  int v20 = this[27];
  if (v20)
  {
    free(*v20);
    MEMORY[0x18532A2A0](v20, 0x1010C40A1D9428BLL);
  }
  signed int v21 = this[28];
  if (v21)
  {
    free(*v21);
    MEMORY[0x18532A2A0](v21, 0x1010C40A1D9428BLL);
  }
  int v22 = this[29];
  if (v22)
  {
    free(*v22);
    MEMORY[0x18532A2A0](v22, 0x1010C40A1D9428BLL);
  }
  unsigned int v23 = this[30];
  if (v23) {
    MEMORY[0x18532A2A0](v23, 0x1020C40EDED9539);
  }
  unsigned int v24 = this[31];
  if (v24) {
    MEMORY[0x18532A2A0](v24, 0x1020C405AF6BDC9);
  }
  int v25 = this[2];
  if (v25) {
    (*((void (**)(void **))*v25 + 1))(v25);
  }
}

void CGPDFDrawingContextDrawImage(uint64_t a1, CGImage *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1) {
    uint64_t v10 = *(void *)a1;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v43 = 0;
  int Type = CGContextGetType(*(void *)(a1 + 88), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  float64x2_t v12 = 0uLL;
  if (Type == 8 || Type == 4)
  {
    memset(&v42, 0, sizeof(v42));
    CGContextGetCTM(&v42, *(CGContextRef *)(a1 + 88));
    float64x2_t v12 = vrndpq_f64(vabsq_f64(vaddq_f64(*(float64x2_t *)&v42.a, *(float64x2_t *)&v42.c)));
  }
  CGImageRef ImageForRenderingSize = CGPDFImageCreateImageForRenderingSize(a2, v10, v12.f64[0], v12.f64[1]);
  if (ImageForRenderingSize)
  {
    int v20 = ImageForRenderingSize;
    uint64_t v21 = *(void *)(a1 + 32);
    int v22 = *(CGContext **)(a1 + 88);
    if ((*((unsigned char *)ImageForRenderingSize + 39) & 2) != 0)
    {
      if (v21 && v22)
      {
        FillColor = (CGColor *)CGPDFGStateGetFillColor(*(void *)(a1 + 32));
        CGContextSetFillColorWithColor(v22, FillColor);
        v44.CGFloat width = 0.0;
        v44.CGFloat height = 0.0;
        CGContextSetPatternPhase(v22, v44);
        CGPDFGStateSynchronizeColorRendering(v21, v22);
        CGPDFGStateSynchronizeRendering(v21, (uint64_t)v22, v24, v25, v26, v27, v28, v29);
      }
    }
    else
    {
      CGPDFGStateSynchronizeForImages(*(void *)(a1 + 32), *(CGContextRef *)(a1 + 88));
    }
    char v30 = *(CGContext **)(a1 + 88);
    if (*((void *)v20 + 8) == 1)
    {
      CGContextGetInterpolationQualityRange((uint64_t)v30, (_DWORD *)&v43 + 1, &v43, v15, v16, v17, v18, v19);
      CGContextSetInterpolationQualityRange(*(void *)(a1 + 88), 3, 3, v31, v32, v33, v34, v35);
      draw_image((void *)a1, v20);
      CGContextSetInterpolationQualityRange(*(void *)(a1 + 88), SHIDWORD(v43), v43, v36, v37, v38, v39, v40);
    }
    else
    {
      CGContextGetCTM(&v41, v30);
      if ((v41.b == 0.0 && v41.c == 0.0 || v41.a == 0.0 && v41.d == 0.0) && !*(unsigned char *)(a1 + 8))
      {
        CGContextSaveGState(*(CGContextRef *)(a1 + 88));
        CGContextSetShouldAntialias(*(CGContextRef *)(a1 + 88), 0);
        draw_image((void *)a1, v20);
        CGContextRestoreGState(*(CGContextRef *)(a1 + 88));
      }
      else
      {
        draw_image((void *)a1, v20);
      }
    }
    CFRelease(v20);
  }
}

void draw_image(void *a1, CGImageRef image)
{
  uint64_t v4 = a1[23];
  if (!v4
    || (uint64_t v5 = *(unsigned int (**)(void, CGImageRef, void, double, double, double, double))(v4 + 16)) == 0
    || v5(a1[11], image, a1[24], 0.0, 0.0, 1.0, 1.0))
  {
    uint64_t v6 = (CGContext *)a1[11];
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    double v9 = 1.0;
    double v10 = 1.0;
    CGContextDrawImage(v6, *(CGRect *)&v7, image);
  }
}

uint64_t CG::DisplayListXMLDeserializer::deserializeTo(CG::DisplayListXMLDeserializer *this, CG::DisplayList *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  *((void *)this + 2) = a2;
  CFBooleanRef propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(*((CFURLRef *)this + 1), (CFStringRef)*MEMORY[0x1E4F1D678], &propertyValueTypeRefPtr, 0)&& (BOOL v3 = CFBooleanGetValue(propertyValueTypeRefPtr) == 0, CFRelease(propertyValueTypeRefPtr), v3))
  {
    CGPostError((uint64_t)"%s: The destination is not an existing directory", v4, v5, v6, v7, v8, v9, v10, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
  }
  else
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFURLRef v12 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *((CFURLRef *)this + 1), @"Resources", 1u);
    *((void *)this + 3) = v12;
    if (v12)
    {
      CFURLRef v20 = CFURLCreateCopyAppendingPathComponent(v11, *((CFURLRef *)this + 1), @"displayList.xml", 0);
      if (v20)
      {
        if (CFURLGetFileSystemRepresentation(v20, 1u, buffer, 1025))
        {
          File = xmlReadFile((const char *)buffer, 0, 0);
          uint64_t v43 = (xmlDoc *)File;
          if (File)
          {
            RootElement = xmlDocGetRootElement(File);
            if (!RootElement)
            {
              CGPostError((uint64_t)"Malformed display list: document does not contain a root node.", 0, v45, v46, v47, v48, v49, v50, v86);
              uint64_t v83 = 0;
LABEL_31:
              xmlFreeDoc(v43);
              return v83;
            }
            CG::DisplayListXMLHelper::parseAttributesFromNode(v91, RootElement);
            int v88 = 0;
            if (CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v91, "frame", (uint64_t)&v89))
            {
              uint64_t v58 = *((void *)this + 2);
              long long v59 = v90;
              *(_OWORD *)(v58 + 24) = v89;
              *(_OWORD *)(v58 + 40) = v59;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)v91, "flags", "0x%X", v53, v54, v55, v56, v57, (uint64_t)&v88) != 1)
              {
                CGPostError((uint64_t)"Failed to parse attribute \"%s\" from root node", v60, v61, v62, v63, v64, v65, v66, (char)"flags");
LABEL_29:
                uint64_t v83 = 0;
LABEL_30:
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v92);
                goto LABEL_31;
              }
              *(_DWORD *)(*((void *)this + 2) + 64) = v88;
              if (CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v91, "bounds", (uint64_t)&v89))
              {
                uint64_t v67 = *((void *)this + 2);
                long long v68 = v90;
                *(_OWORD *)(v67 + 72) = v89;
                *(_OWORD *)(v67 + 88) = v68;
                NodeSetWithXPath = CG::DisplayListXMLDeserializer::getNodeSetWithXPath(v43, (_xmlDoc *)"/dl/resources/resource", v52);
                unsigned int v71 = CG::DisplayListXMLDeserializer::getNodeSetWithXPath(v43, (_xmlDoc *)"/dl/entryStates/entryState", v70);
                uint64_t v73 = CG::DisplayListXMLDeserializer::getNodeSetWithXPath(v43, (_xmlDoc *)"/dl/entries/entry", v72);
                unsigned int v81 = v73;
                if (NodeSetWithXPath && v71 && v73)
                {
                  CG::DisplayListXMLDeserializer::parseResources(this, NodeSetWithXPath->nodesetval);
                  if (v82 && CG::DisplayListXMLDeserializer::parseEntryStates(this, v71->nodesetval)) {
                    uint64_t v83 = CG::DisplayListXMLDeserializer::parseEntries(this, v81->nodesetval);
                  }
                  else {
                    uint64_t v83 = 0;
                  }
                }
                else
                {
                  CGPostError((uint64_t)"%s: Malformed display list: resources = %p, entryStates = %p, entries = %p", v74, v75, v76, v77, v78, v79, v80, (char)"BOOL CG::DisplayListXMLDeserializer::parseModel(xmlDocPtr)");
                  uint64_t v83 = 0;
                  if (!NodeSetWithXPath) {
                    goto LABEL_36;
                  }
                }
                xmlXPathFreeObject(NodeSetWithXPath);
LABEL_36:
                if (v71) {
                  xmlXPathFreeObject(v71);
                }
                if (v81) {
                  xmlXPathFreeObject(v81);
                }
                goto LABEL_30;
              }
              unsigned int v85 = "Failed to parse attribute \"bounds\" from root node";
            }
            else
            {
              unsigned int v85 = "Failed to parse attribute \"frame\" from root node";
            }
            CGPostError((uint64_t)v85, v51, (uint64_t)v52, v53, v54, v55, v56, v57, v86);
            goto LABEL_29;
          }
          CGPostError((uint64_t)"%s: xmlReadFile failed", v36, v37, v38, v39, v40, v41, v42, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
        }
        else
        {
          CGPostError((uint64_t)"%s: Failed to get file system path for URL", v28, v29, v30, v31, v32, v33, v34, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
        }
      }
      else
      {
        CGPostError((uint64_t)"%s: Failed to create URL for displayList.xml", v21, v22, v23, v24, v25, v26, v27, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
      }
    }
    else
    {
      CGPostError((uint64_t)"%s: Failed to create URL for Resources directory", v13, v14, v15, v16, v17, v18, v19, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
    }
  }
  return 0;
}

void sub_184DD7BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

xmlXPathObject *CG::DisplayListXMLDeserializer::getNodeSetWithXPath(xmlDoc *this, _xmlDoc *a2, const unsigned __int8 *a3)
{
  xmlXPathContextPtr v4 = xmlXPathNewContext(this);
  if (!v4)
  {
    CGPostError((uint64_t)"%s: xmlXPathNewContext returned NULL", v5, v6, v7, v8, v9, v10, v11, (char)"xmlXPathObjectPtr CG::DisplayListXMLDeserializer::getNodeSetWithXPath(xmlDocPtr, const xmlChar *)");
    return 0;
  }
  CFURLRef v12 = v4;
  uint64_t v13 = (xmlXPathObject *)MEMORY[0x18532BDF0](a2, v4);
  xmlXPathFreeContext(v12);
  if (!v13)
  {
    CGPostError((uint64_t)"%s: xmlXPathEvalExpression returned NULL", v14, v15, v16, v17, v18, v19, v20, (char)"xmlXPathObjectPtr CG::DisplayListXMLDeserializer::getNodeSetWithXPath(xmlDocPtr, const xmlChar *)");
    return v13;
  }
  xmlNodeSetPtr nodesetval = v13->nodesetval;
  if (!nodesetval || !nodesetval->nodeNr || !nodesetval->nodeTab)
  {
    xmlXPathFreeObject(v13);
    return 0;
  }
  return v13;
}

void CG::DisplayListXMLDeserializer::parseResources(CG::DisplayListXMLDeserializer *this, _xmlNodeSet *a2)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:fe180100]<0>(v84, "clip");
  *(_OWORD *)int v115 = *(_OWORD *)v84;
  *(void *)&long long v116 = v85;
  v84[1] = 0;
  unsigned int v85 = 0;
  v84[0] = 0;
  DWORD2(v116) = 0;
  std::string::basic_string[abi:fe180100]<0>(v113, "color");
  *(_OWORD *)uint64_t v117 = *(_OWORD *)v113;
  uint64_t v118 = v114[0];
  v113[1] = 0;
  v114[0] = 0;
  v113[0] = 0;
  int v119 = 1;
  std::string::basic_string[abi:fe180100]<0>(&v111, "colorSpace");
  long long v120 = v111;
  uint64_t v121 = v112;
  uint64_t v112 = 0;
  long long v111 = 0uLL;
  int v122 = 2;
  std::string::basic_string[abi:fe180100]<0>(&v106, "dash");
  long long v123 = v106;
  uint64_t v124 = v107;
  uint64_t v107 = 0;
  long long v106 = 0uLL;
  int v125 = 3;
  std::string::basic_string[abi:fe180100]<0>(v104, "font");
  long long v126 = *(_OWORD *)v104;
  uint64_t v127 = v105;
  v104[1] = 0;
  uint64_t v105 = 0;
  v104[0] = 0;
  int v128 = 4;
  std::string::basic_string[abi:fe180100]<0>(&v102, "image");
  long long v129 = v102;
  uint64_t v130 = v103;
  uint64_t v103 = 0;
  long long v102 = 0uLL;
  int v131 = 5;
  std::string::basic_string[abi:fe180100]<0>(v100, "shading");
  long long v132 = *(_OWORD *)v100;
  uint64_t v133 = v101;
  v100[1] = 0;
  uint64_t v101 = 0;
  v100[0] = 0;
  int v134 = 6;
  std::string::basic_string[abi:fe180100]<0>(&v98, "gradient");
  long long v135 = v98;
  uint64_t v136 = v99;
  uint64_t v99 = 0;
  long long v98 = 0uLL;
  int v137 = 13;
  std::string::basic_string[abi:fe180100]<0>(v96, "pattern");
  long long v138 = *(_OWORD *)v96;
  uint64_t v139 = v97;
  v96[1] = 0;
  uint64_t v97 = 0;
  v96[0] = 0;
  int v140 = 7;
  std::string::basic_string[abi:fe180100]<0>(&v94, "style");
  long long v141 = v94;
  uint64_t v142 = v95;
  uint64_t v95 = 0;
  long long v94 = 0uLL;
  int v143 = 8;
  std::string::basic_string[abi:fe180100]<0>(v92, "softMask");
  long long v144 = *(_OWORD *)v92;
  uint64_t v145 = v93;
  v92[1] = 0;
  uint64_t v93 = 0;
  v92[0] = 0;
  int v146 = 9;
  std::string::basic_string[abi:fe180100]<0>(v90, "function");
  long long v147 = *(_OWORD *)v90;
  uint64_t v148 = v91;
  v90[1] = 0;
  uint64_t v91 = 0;
  v90[0] = 0;
  int v149 = 10;
  std::string::basic_string[abi:fe180100]<0>(v88, "displayList");
  long long v150 = *(_OWORD *)v88;
  uint64_t v151 = v89;
  v88[1] = 0;
  uint64_t v89 = 0;
  v88[0] = 0;
  int v152 = 11;
  std::string::basic_string[abi:fe180100]<0>(__p, "CFTypeRef");
  BOOL v3 = 0;
  uint64_t v4 = 0;
  long long v153 = *(_OWORD *)__p;
  uint64_t v154 = v87;
  __p[1] = 0;
  uint64_t v87 = 0;
  __p[0] = 0;
  int v155 = 12;
  unsigned int v109 = 0;
  uint64_t v110 = 0;
  unsigned int v108 = &v109;
  while (1)
  {
    uint64_t v5 = &v115[4 * v4];
    uint64_t v6 = &v109;
    if (v108 == &v109) {
      break;
    }
    uint64_t v7 = v3;
    uint64_t v8 = &v109;
    if (v3)
    {
      do
      {
        uint64_t v6 = (uint64_t **)v7;
        uint64_t v7 = (uint64_t *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v6 = (uint64_t **)v8[2];
        BOOL v63 = *v6 == (uint64_t *)v8;
        uint64_t v8 = v6;
      }
      while (v63);
    }
    if (std::less<std::string>::operator()[abi:fe180100](v6 + 4, &v115[4 * v4])) {
      break;
    }
    uint64_t v9 = &v109;
    uint64_t v10 = &v109;
    if (!v3) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v11;
        CFURLRef v12 = v11 + 4;
        if (!std::less<std::string>::operator()[abi:fe180100](&v115[4 * v4], v11 + 4)) {
          break;
        }
        uint64_t v11 = *v9;
        uint64_t v10 = v9;
        if (!*v9) {
          goto LABEL_18;
        }
      }
      if (!std::less<std::string>::operator()[abi:fe180100](v12, &v115[4 * v4])) {
        break;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v11 = v9[1];
      if (!v11) {
        goto LABEL_18;
      }
    }
LABEL_24:
    if (++v4 == 14)
    {
      uint64_t v15 = 56;
      do
      {
        if (SHIBYTE(v114[v15]) < 0) {
          operator delete(v113[v15]);
        }
        v15 -= 4;
      }
      while (v15 * 8);
      if (SHIBYTE(v87) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v89) < 0) {
        operator delete(v88[0]);
      }
      if (SHIBYTE(v91) < 0) {
        operator delete(v90[0]);
      }
      if (SHIBYTE(v93) < 0) {
        operator delete(v92[0]);
      }
      if (SHIBYTE(v95) < 0) {
        operator delete((void *)v94);
      }
      if (SHIBYTE(v97) < 0) {
        operator delete(v96[0]);
      }
      if (SHIBYTE(v99) < 0) {
        operator delete((void *)v98);
      }
      if (SHIBYTE(v101) < 0) {
        operator delete(v100[0]);
      }
      if (SHIBYTE(v103) < 0) {
        operator delete((void *)v102);
      }
      if (SHIBYTE(v105) < 0) {
        operator delete(v104[0]);
      }
      if (SHIBYTE(v107) < 0) {
        operator delete((void *)v106);
      }
      if (SHIBYTE(v112) < 0) {
        operator delete((void *)v111);
      }
      if (SHIBYTE(v114[0]) < 0) {
        operator delete(v113[0]);
      }
      if (SHIBYTE(v85) < 0) {
        operator delete(v84[0]);
      }
      *((void *)&v106 + 1) = 0;
      uint64_t v107 = 0;
      *(void *)&long long v106 = (char *)&v106 + 8;
      uint64_t v16 = a2;
      unint64_t nodeNr = a2->nodeNr;
      if ((int)nodeNr > 0)
      {
        int64_t v18 = 0;
        uint64_t v80 = (uint64_t **)((char *)this + 40);
        do
        {
          uint64_t v19 = v16->nodeTab[v18];
          CG::DisplayListXMLHelper::parseAttributesFromNode((xmlChar *)v113, v19);
          std::string::basic_string[abi:fe180100]<0>(v115, "type");
          uint64_t v27 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v113, v115);
          if (SBYTE7(v116) < 0) {
            operator delete(v115[0]);
          }
          if (&v113[1] == v27)
          {
            CGPostError((uint64_t)"%s: Node does not contain \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"BOOL CG::DisplayListXMLDeserializer::parseResources(xmlNodeSetPtr)");
          }
          else
          {
            unsigned int v81 = v19;
            uint64_t v28 = v109;
            if (!v109) {
              goto LABEL_73;
            }
            uint64_t v29 = v27 + 7;
            uint64_t v30 = &v109;
            do
            {
              uint64_t v31 = v30;
              uint64_t v32 = v28 + 4;
              BOOL v33 = std::less<std::string>::operator()[abi:fe180100](v28 + 4, v29);
              uint64_t v34 = v28 + 1;
              if (!v33)
              {
                uint64_t v34 = v28;
                uint64_t v30 = (uint64_t **)v28;
              }
              uint64_t v28 = (uint64_t *)*v34;
            }
            while (*v34);
            if (v30 == &v109
              || (!v33 ? (uint64_t v35 = v32) : (uint64_t v35 = (uint64_t *)(v31 + 4)),
                  std::less<std::string>::operator()[abi:fe180100](v29, v35)))
            {
LABEL_73:
              CGPostError((uint64_t)"%s: Invalid value for \"type\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"BOOL CG::DisplayListXMLDeserializer::parseResources(xmlNodeSetPtr)");
            }
            else
            {
              switch(*((_DWORD *)v30 + 14))
              {
                case 0:
                  operator new();
                case 1:
                  operator new();
                case 2:
                  operator new();
                case 3:
                  operator new();
                case 4:
                  operator new();
                case 5:
                  operator new();
                case 6:
                  operator new();
                case 7:
                  operator new();
                case 8:
                  operator new();
                case 9:
                  operator new();
                case 0xA:
                  operator new();
                case 0xB:
                  operator new();
                case 0xC:
                  operator new();
                case 0xD:
                  operator new();
                default:
                  *(void *)&long long v111 = 0;
                  if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)v113, "_id", "%llu", v22, v23, v24, v25, v26, (uint64_t)&v111) == 1)
                  {
                    uint64_t v43 = (uint64_t **)((char *)this + 40);
                    CGSize v44 = *v80;
                    uint64_t v45 = (uint64_t **)((char *)this + 40);
                    if (!*v80) {
                      goto LABEL_100;
                    }
                    do
                    {
                      while (1)
                      {
                        uint64_t v43 = (uint64_t **)v44;
                        unint64_t v46 = v44[4];
                        if ((unint64_t)v111 >= v46) {
                          break;
                        }
                        CGSize v44 = *v43;
                        uint64_t v45 = v43;
                        if (!*v43) {
                          goto LABEL_100;
                        }
                      }
                      if (v46 >= (unint64_t)v111)
                      {
                        uint64_t v47 = (uint64_t *)v43;
                        goto LABEL_105;
                      }
                      CGSize v44 = v43[1];
                    }
                    while (v44);
                    uint64_t v45 = v43 + 1;
LABEL_100:
                    uint64_t v47 = (uint64_t *)operator new(0x30uLL);
                    v47[4] = v111;
                    v47[5] = 0;
                    uint64_t *v47 = 0;
                    v47[1] = 0;
                    v47[2] = (uint64_t)v43;
                    *uint64_t v45 = v47;
                    uint64_t v48 = **((void **)this + 4);
                    uint64_t v49 = v47;
                    if (v48)
                    {
                      *((void *)this + 4) = v48;
                      uint64_t v49 = *v45;
                    }
                    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 5), v49);
                    ++*((void *)this + 6);
LABEL_105:
                    v47[5] = 0;
                    v115[0] = 0;
                    v115[1] = v81;
                    long long v116 = *(_OWORD *)v113;
                    v117[0] = (void *)v114[0];
                    if (v114[0])
                    {
                      *((void *)v113[1] + 2) = (char *)&v116 + 8;
                      v113[0] = &v113[1];
                      v113[1] = 0;
                      v114[0] = 0;
                    }
                    else
                    {
                      *(void *)&long long v116 = (char *)&v116 + 8;
                    }
                    uint64_t v50 = std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)&v106, v111, (uint64_t **)&v111);
                    *(_OWORD *)(v50 + 5) = *(_OWORD *)v115;
                    if (v50 + 5 != (uint64_t **)v115)
                    {
                      uint64_t v51 = v50 + 7;
                      unsigned int v52 = (void *)v116;
                      if (v50[9])
                      {
                        int v82 = v50;
                        uint64_t v54 = v50 + 8;
                        uint64_t v53 = v50[8];
                        uint64_t v55 = v50[7];
                        v50[7] = (uint64_t *)(v50 + 8);
                        v53[2] = 0;
                        v50[8] = 0;
                        v50[9] = 0;
                        if (v55[1]) {
                          uint64_t v56 = v55[1];
                        }
                        else {
                          uint64_t v56 = (uint64_t)v55;
                        }
                        v84[0] = v50 + 7;
                        v84[1] = (void *)v56;
                        unsigned int v85 = (uint64_t *)v56;
                        if (v56)
                        {
                          v84[1] = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(v56);
                          uint64_t v57 = (void *)&v116 + 1;
                          if (v52 != (void *)((char *)&v116 + 8))
                          {
                            do
                            {
                              std::string::operator=((std::string *)(v56 + 32), (const std::string *)(v52 + 4));
                              std::string::operator=((std::string *)(v56 + 56), (const std::string *)(v52 + 7));
                              uint64_t v58 = v85;
                              long long v59 = *v54;
                              uint64_t v60 = v54;
                              uint64_t v61 = v54;
                              if (*v54)
                              {
                                do
                                {
                                  while (1)
                                  {
                                    uint64_t v60 = (uint64_t **)v59;
                                    if (!std::less<std::string>::operator()[abi:fe180100](v58 + 4, v59 + 4)) {
                                      break;
                                    }
                                    long long v59 = *v60;
                                    uint64_t v61 = v60;
                                    if (!*v60) {
                                      goto LABEL_121;
                                    }
                                  }
                                  long long v59 = v60[1];
                                }
                                while (v59);
                                uint64_t v61 = v60 + 1;
                              }
LABEL_121:
                              std::__tree<unsigned long>::__insert_node_at(v51, (uint64_t)v60, v61, v58);
                              unsigned int v85 = (uint64_t *)v84[1];
                              if (v84[1]) {
                                v84[1] = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v84[1]);
                              }
                              uint64_t v62 = (void *)v52[1];
                              if (v62)
                              {
                                do
                                {
                                  uint64_t v57 = v62;
                                  uint64_t v62 = (void *)*v62;
                                }
                                while (v62);
                              }
                              else
                              {
                                do
                                {
                                  uint64_t v57 = (void *)v52[2];
                                  BOOL v63 = *v57 == (void)v52;
                                  unsigned int v52 = v57;
                                }
                                while (!v63);
                              }
                              uint64_t v56 = (uint64_t)v85;
                              if (v85) {
                                BOOL v63 = v57 == (void *)((char *)&v116 + 8);
                              }
                              else {
                                BOOL v63 = 1;
                              }
                              unsigned int v52 = v57;
                            }
                            while (!v63);
                          }
                        }
                        else
                        {
                          uint64_t v57 = v52;
                        }
                        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:fe180100]((uint64_t)v84);
                        unsigned int v52 = v57;
                        uint64_t v50 = v82;
                      }
                      if (v52 != (void *)((char *)&v116 + 8))
                      {
                        uint64_t v64 = v50 + 8;
                        do
                        {
                          uint64_t v65 = (char *)operator new(0x50uLL);
                          uint64_t v66 = (uint64_t *)v65;
                          v84[0] = v65;
                          v84[1] = v64;
                          LOBYTE(v85) = 0;
                          uint64_t v67 = v65 + 32;
                          if (*((char *)v52 + 55) < 0)
                          {
                            std::string::__init_copy_ctor_external((std::string *)(v65 + 32), (const std::string::value_type *)v52[4], v52[5]);
                          }
                          else
                          {
                            long long v68 = *((_OWORD *)v52 + 2);
                            *((void *)v65 + 6) = v52[6];
                            *(_OWORD *)uint64_t v67 = v68;
                          }
                          unsigned int v69 = (std::string *)(v66 + 7);
                          if (*((char *)v52 + 79) < 0)
                          {
                            std::string::__init_copy_ctor_external(v69, (const std::string::value_type *)v52[7], v52[8]);
                          }
                          else
                          {
                            long long v70 = *(_OWORD *)(v52 + 7);
                            v66[9] = v52[9];
                            *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v70;
                          }
                          LOBYTE(v85) = 1;
                          unsigned int v71 = (uint64_t *)*v64;
                          uint64_t v72 = (uint64_t **)v64;
                          uint64_t v73 = (uint64_t **)v64;
                          if (*v64)
                          {
                            do
                            {
                              while (1)
                              {
                                uint64_t v72 = (uint64_t **)v71;
                                if (!std::less<std::string>::operator()[abi:fe180100](v67, v71 + 4)) {
                                  break;
                                }
                                unsigned int v71 = *v72;
                                uint64_t v73 = v72;
                                if (!*v72) {
                                  goto LABEL_150;
                                }
                              }
                              unsigned int v71 = v72[1];
                            }
                            while (v71);
                            uint64_t v73 = v72 + 1;
                          }
LABEL_150:
                          std::__tree<unsigned long>::__insert_node_at(v51, (uint64_t)v72, v73, v66);
                          v84[0] = 0;
                          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:fe180100]((uint64_t)v84);
                          uint64_t v74 = (void *)v52[1];
                          if (v74)
                          {
                            do
                            {
                              uint64_t v75 = v74;
                              uint64_t v74 = (void *)*v74;
                            }
                            while (v74);
                          }
                          else
                          {
                            do
                            {
                              uint64_t v75 = (_OWORD *)v52[2];
                              BOOL v63 = *(void *)v75 == (void)v52;
                              unsigned int v52 = v75;
                            }
                            while (!v63);
                          }
                          unsigned int v52 = v75;
                        }
                        while (v75 != (long long *)((char *)&v116 + 8));
                      }
                    }
                    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)&v116 + 1));
                  }
                  else
                  {
                    CGPostError((uint64_t)"%s: Failed to parse \"_id\" attribute from node", v36, v37, v38, v39, v40, v41, v42, (char)"BOOL CG::DisplayListXMLDeserializer::parseResources(xmlNodeSetPtr)");
                  }
                  break;
              }
            }
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v113[1]);
          ++v18;
          uint64_t v16 = a2;
          unint64_t nodeNr = a2->nodeNr;
        }
        while (v18 < (uint64_t)nodeNr);
      }
      v115[0] = v115;
      v115[1] = v115;
      long long v116 = 0u;
      *(_OWORD *)uint64_t v117 = 0u;
      v84[0] = (char *)&v116 + 8;
      LOBYTE(v84[1]) = 0;
      if (nodeNr)
      {
        if (nodeNr > 0x492492492492492) {
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v76 = std::__allocate_at_least[abi:fe180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(nodeNr);
        *((void *)&v116 + 1) = v76;
        v117[1] = &v76[14 * v77];
        uint64_t v78 = 56 * nodeNr;
        uint64_t v79 = (char *)&v76[14 * nodeNr];
        do
        {
          v76[12] = 0;
          *((_OWORD *)v76 + 1) = 0uLL;
          *((_OWORD *)v76 + 2) = 0uLL;
          *(_OWORD *)uint64_t v76 = 0uLL;
          v76 += 14;
          v78 -= 56;
        }
        while (v78);
        v117[0] = v79;
      }
      operator new();
    }
    BOOL v3 = v109;
  }
  uint64_t v9 = &v109;
  uint64_t v10 = &v109;
  if (v3)
  {
    uint64_t v10 = v6 + 1;
    if (v6[1]) {
      goto LABEL_24;
    }
    uint64_t v9 = v6;
  }
LABEL_18:
  uint64_t v13 = (char *)operator new(0x40uLL);
  uint64_t v14 = (std::string *)(v13 + 32);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    *((void *)v13 + 6) = v5[2];
  }
  *((_DWORD *)v13 + 14) = v117[4 * v4 - 1];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = v9;
  *uint64_t v10 = (uint64_t *)v13;
  if (*v108)
  {
    unsigned int v108 = (uint64_t **)*v108;
    uint64_t v13 = (char *)*v10;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v109, (uint64_t *)v13);
  ++v110;
  goto LABEL_24;
}

void sub_184DDA918()
{
}

void sub_184DDA924(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x184DDAC5CLL);
}

void sub_184DDA938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl((uint64_t)&STACK[0x200]);
  if (a22) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a61);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a64);
  _Unwind_Resume(a1);
}

void sub_184DDA948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  for (; v83 != &STACK[0x200]; v83 -= 4)
  {
    if (*((char *)v83 - 9) < 0) {
      operator delete((void *)*(v83 - 4));
    }
  }
  JUMPOUT(0x184DDAC5CLL);
}

void sub_184DDA954()
{
}

void sub_184DDA960()
{
}

void sub_184DDA96C()
{
}

void sub_184DDA978()
{
}

void sub_184DDA984()
{
}

void sub_184DDA990()
{
}

void sub_184DDA99C()
{
}

void sub_184DDA9A8()
{
}

void sub_184DDA9B4()
{
}

void sub_184DDA9C0()
{
}

void sub_184DDA9CC()
{
}

void sub_184DDA9D8()
{
}

void sub_184DDA9E4()
{
}

void sub_184DDA9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  std::__list_imp<long long>::clear(&STACK[0x200]);
  JUMPOUT(0x184DDAC40);
}

void sub_184DDAA04()
{
}

void sub_184DDAA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__list_imp<long long>::clear(&a57);
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::~adjacency_list((uint64_t)&STACK[0x200]);
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy((void *)a61);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)a64);
  _Unwind_Resume(a1);
}

void sub_184DDAA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  if (*(char *)(v15 + 55) < 0) {
    operator delete(*v14);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:fe180100]((uint64_t)va);
  JUMPOUT(0x184DDAAA8);
}

void sub_184DDAA70()
{
}

void sub_184DDAAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x184DDAABCLL);
  }
  JUMPOUT(0x184DDAAC8);
}

void sub_184DDAAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a70);
  if (a22) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a61);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a64);
  _Unwind_Resume(a1);
}

void sub_184DDAAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a22) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a61);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a64);
  _Unwind_Resume(a1);
}

void sub_184DDAC24()
{
}

uint64_t CG::DisplayListXMLDeserializer::parseEntryStates(CG::DisplayListXMLDeserializer *this, _xmlNodeSet *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:fe180100]<0>(v51, "drawing");
  long long v56 = *(_OWORD *)v51;
  uint64_t v57 = v52;
  v51[1] = 0;
  uint64_t v52 = 0;
  v51[0] = 0;
  v58[0] = 0;
  std::string::basic_string[abi:fe180100]<0>(v49, "fill");
  long long v59 = *(_OWORD *)v49;
  uint64_t v60 = v50;
  v49[1] = 0;
  uint64_t v50 = 0;
  v49[0] = 0;
  int v61 = 1;
  std::string::basic_string[abi:fe180100]<0>(v47, "stroke");
  long long v62 = *(_OWORD *)v47;
  uint64_t v63 = v48;
  v47[1] = 0;
  uint64_t v48 = 0;
  v47[0] = 0;
  int v64 = 2;
  std::string::basic_string[abi:fe180100]<0>(__p, "pattern");
  BOOL v3 = 0;
  uint64_t v4 = 0;
  long long v65 = *(_OWORD *)__p;
  uint64_t v66 = v46;
  __p[1] = 0;
  uint64_t v46 = 0;
  __p[0] = 0;
  int v67 = 3;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = &v54;
  while (1)
  {
    uint64_t v5 = &v56 + 2 * v4;
    uint64_t v6 = &v54;
    if (v53 == &v54) {
      goto LABEL_8;
    }
    uint64_t v7 = v3;
    uint64_t v8 = &v54;
    if (v3)
    {
      do
      {
        uint64_t v6 = (uint64_t **)v7;
        uint64_t v7 = (uint64_t *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v6 = (uint64_t **)v8[2];
        BOOL v9 = *v6 == (uint64_t *)v8;
        uint64_t v8 = v6;
      }
      while (v9);
    }
    if (std::less<std::string>::operator()[abi:fe180100](v6 + 4, (void *)&v56 + 4 * v4))
    {
LABEL_8:
      uint64_t v10 = &v54;
      uint64_t v11 = &v54;
      if (v3)
      {
        uint64_t v11 = v6 + 1;
        if (v6[1]) {
          goto LABEL_24;
        }
        uint64_t v10 = v6;
      }
LABEL_18:
      uint64_t v14 = (char *)operator new(0x40uLL);
      uint64_t v15 = (std::string *)(v14 + 32);
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *v5;
        *((void *)v14 + 6) = *((void *)v5 + 2);
      }
      *((_DWORD *)v14 + 14) = v58[8 * v4];
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = v10;
      *uint64_t v11 = (uint64_t *)v14;
      if (*v53)
      {
        uint64_t v53 = (uint64_t **)*v53;
        uint64_t v14 = (char *)*v11;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v54, (uint64_t *)v14);
      ++v55;
      goto LABEL_24;
    }
    uint64_t v10 = &v54;
    uint64_t v11 = &v54;
    if (!v3) {
      goto LABEL_18;
    }
    CFURLRef v12 = v3;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v12;
        uint64_t v13 = v12 + 4;
        if (!std::less<std::string>::operator()[abi:fe180100]((void *)&v56 + 4 * v4, v12 + 4)) {
          break;
        }
        CFURLRef v12 = *v10;
        uint64_t v11 = v10;
        if (!*v10) {
          goto LABEL_18;
        }
      }
      if (!std::less<std::string>::operator()[abi:fe180100](v13, (void *)&v56 + 4 * v4)) {
        break;
      }
      uint64_t v11 = v10 + 1;
      CFURLRef v12 = v10[1];
      if (!v12) {
        goto LABEL_18;
      }
    }
LABEL_24:
    if (++v4 == 4) {
      break;
    }
    BOOL v3 = v54;
  }
  CGSize v44 = a2;
  for (uint64_t i = 0; i != -128; i -= 32)
  {
    if (*((char *)&v66 + i + 7) < 0) {
      operator delete(*(void **)((char *)&v65 + i));
    }
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(v51[0]);
  }
  if (a2->nodeNr < 1)
  {
LABEL_65:
    uint64_t v41 = 1;
    goto LABEL_66;
  }
  uint64_t v17 = 0;
  while (2)
  {
    CG::DisplayListXMLHelper::parseAttributesFromNode((xmlChar *)&v56, a2->nodeTab[v17]);
    std::string::basic_string[abi:fe180100]<0>(v51, "type");
    uint64_t v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v56, v51);
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    if ((void *)((char *)&v56 + 8) == v25)
    {
      CGPostError((uint64_t)"%s: Node does not contain \"%s\" attribute", v18, v19, v20, v21, v22, v23, v24, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntryStates(xmlNodeSetPtr)");
      goto LABEL_56;
    }
    uint64_t v26 = v54;
    if (!v54) {
      goto LABEL_53;
    }
    uint64_t v27 = v25 + 7;
    uint64_t v28 = &v54;
    do
    {
      uint64_t v29 = v28;
      uint64_t v30 = v26 + 4;
      BOOL v31 = std::less<std::string>::operator()[abi:fe180100](v26 + 4, v27);
      uint64_t v32 = v26 + 1;
      if (!v31)
      {
        uint64_t v32 = v26;
        uint64_t v28 = (uint64_t **)v26;
      }
      uint64_t v26 = (uint64_t *)*v32;
    }
    while (*v32);
    if (v28 == &v54
      || (!v31 ? (BOOL v33 = v30) : (BOOL v33 = (uint64_t *)(v29 + 4)), std::less<std::string>::operator()[abi:fe180100](v27, v33)))
    {
LABEL_53:
      CGPostError((uint64_t)"%s: Invalid value for \"type\" attribute", v18, v19, v20, v21, v22, v23, v24, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntryStates(xmlNodeSetPtr)");
      goto LABEL_54;
    }
    __p[0] = 0;
    if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v56, "_id", "%llu", v20, v21, v22, v23, v24, (uint64_t)__p) != 1)
    {
      CGPostError((uint64_t)"%s: Failed to parse \"_id\" attribute from node", v34, v35, v36, v37, v38, v39, v40, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntryStates(xmlNodeSetPtr)");
LABEL_54:
      a2 = v44;
LABEL_56:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)&v56 + 1));
      if (++v17 >= a2->nodeNr) {
        goto LABEL_65;
      }
      continue;
    }
    break;
  }
  switch(*((_DWORD *)v28 + 14))
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    default:
      uint64_t v43 = v28 + 4;
      if (*((char *)v28 + 55) < 0) {
        uint64_t v43 = (void *)*v43;
      }
      CGPostError((uint64_t)"Failed to parse DisplayListEntryState of type: %s", v34, v35, v36, v37, v38, v39, v40, (char)v43);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)&v56 + 1));
      uint64_t v41 = 0;
      break;
  }
LABEL_66:
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)v54);
  return v41;
}

void sub_184DDB6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,std::__shared_weak_count *a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char *a39,uint64_t a40,char a41,void *a42)
{
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:fe180100](a33);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a42);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a39);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayListXMLDeserializer::parseEntries(CG::DisplayListXMLDeserializer *this, _xmlNodeSet *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:fe180100]<0>(v54, "image");
  v59.CGPoint origin = *(CGPoint *)v54;
  v59.size.CGFloat width = v55;
  v54[1] = 0;
  CGFloat v55 = 0.0;
  v54[0] = 0;
  LODWORD(v59.size.height) = 0;
  std::string::basic_string[abi:fe180100]<0>(v52, "glyphs");
  long long v60 = *(_OWORD *)v52;
  uint64_t v61 = v53;
  v52[1] = 0;
  uint64_t v53 = 0;
  v52[0] = 0;
  int v62 = 1;
  std::string::basic_string[abi:fe180100]<0>(v50, "path");
  long long v63 = *(_OWORD *)v50;
  uint64_t v64 = v51;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  int v65 = 2;
  std::string::basic_string[abi:fe180100]<0>(v48, "rects");
  long long v66 = *(_OWORD *)v48;
  uint64_t v67 = v49;
  v48[1] = 0;
  uint64_t v49 = 0;
  v48[0] = 0;
  int v68 = 3;
  std::string::basic_string[abi:fe180100]<0>(v46, "lines");
  long long v69 = *(_OWORD *)v46;
  uint64_t v70 = v47;
  v46[1] = 0;
  uint64_t v47 = 0;
  v46[0] = 0;
  int v71 = 4;
  std::string::basic_string[abi:fe180100]<0>(v44, "shading");
  long long v72 = *(_OWORD *)v44;
  uint64_t v73 = v45;
  v44[1] = 0;
  uint64_t v45 = 0;
  v44[0] = 0;
  int v74 = 5;
  std::string::basic_string[abi:fe180100]<0>(v42, "gradient");
  long long v75 = *(_OWORD *)v42;
  uint64_t v76 = v43;
  v42[1] = 0;
  uint64_t v43 = 0;
  v42[0] = 0;
  int v77 = 6;
  std::string::basic_string[abi:fe180100]<0>(v40, "displayList");
  uint64_t v37 = a2;
  long long v78 = *(_OWORD *)v40;
  uint64_t v79 = v41;
  v40[1] = 0;
  uint64_t v41 = 0;
  v40[0] = 0;
  int v80 = 7;
  std::string::basic_string[abi:fe180100]<0>(__p, "action");
  BOOL v3 = 0;
  uint64_t v4 = 0;
  long long v81 = *(_OWORD *)__p;
  uint64_t v82 = v39;
  __p[1] = 0;
  uint64_t v39 = 0;
  __p[0] = 0;
  int v83 = 8;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  long long v56 = &v57;
  while (1)
  {
    uint64_t v5 = &v59 + v4;
    uint64_t v6 = &v57;
    if (v56 == &v57) {
      goto LABEL_8;
    }
    uint64_t v7 = v3;
    uint64_t v8 = &v57;
    if (v3)
    {
      do
      {
        uint64_t v6 = (uint64_t **)v7;
        uint64_t v7 = (uint64_t *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v6 = (uint64_t **)v8[2];
        BOOL v9 = *v6 == (uint64_t *)v8;
        uint64_t v8 = v6;
      }
      while (v9);
    }
    if (std::less<std::string>::operator()[abi:fe180100](v6 + 4, (void *)&v59.origin.x + 4 * v4))
    {
LABEL_8:
      uint64_t v10 = &v57;
      uint64_t v11 = &v57;
      if (v3)
      {
        uint64_t v11 = v6 + 1;
        if (v6[1]) {
          goto LABEL_24;
        }
        uint64_t v10 = v6;
      }
LABEL_18:
      uint64_t v14 = (char *)operator new(0x40uLL);
      uint64_t v15 = (std::string *)(v14 + 32);
      if (SHIBYTE(v5->size.width) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)&v5->origin.x, *(void *)&v5->origin.y);
      }
      else
      {
        *(CGPoint *)&v15->__r_.__value_.__l.__data_ = v5->origin;
        *((void *)v14 + 6) = *(void *)&v5->size.width;
      }
      *((_DWORD *)v14 + 14) = *((_DWORD *)&v59.size.height + 8 * v4);
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = v10;
      *uint64_t v11 = (uint64_t *)v14;
      if (*v56)
      {
        long long v56 = (uint64_t **)*v56;
        uint64_t v14 = (char *)*v11;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v57, (uint64_t *)v14);
      ++v58;
      goto LABEL_24;
    }
    uint64_t v10 = &v57;
    uint64_t v11 = &v57;
    if (!v3) {
      goto LABEL_18;
    }
    CFURLRef v12 = v3;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v12;
        uint64_t v13 = v12 + 4;
        if (!std::less<std::string>::operator()[abi:fe180100]((void *)&v59.origin.x + 4 * v4, v12 + 4)) {
          break;
        }
        CFURLRef v12 = *v10;
        uint64_t v11 = v10;
        if (!*v10) {
          goto LABEL_18;
        }
      }
      if (!std::less<std::string>::operator()[abi:fe180100](v13, (void *)&v59.origin.x + 4 * v4)) {
        break;
      }
      uint64_t v11 = v10 + 1;
      CFURLRef v12 = v10[1];
      if (!v12) {
        goto LABEL_18;
      }
    }
LABEL_24:
    if (++v4 == 9) {
      break;
    }
    BOOL v3 = v57;
  }
  uint64_t v16 = 36;
  uint64_t v17 = a2;
  do
  {
    if (SHIBYTE((&v57)[v16]) < 0) {
      operator delete(*(void **)((char *)&v55 + v16 * 8));
    }
    v16 -= 4;
  }
  while (v16 * 8);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[0]);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[0]);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
  uint64_t v18 = 1;
  if (a2->nodeNr >= 1)
  {
    uint64_t v19 = 0;
    while (1)
    {
      CG::DisplayListXMLHelper::parseAttributesFromNode((xmlChar *)v54, v17->nodeTab[v19]);
      std::string::basic_string[abi:fe180100]<0>(&v59, "type");
      uint64_t v27 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v54, &v59);
      if (SHIBYTE(v59.size.width) < 0) {
        operator delete(*(void **)&v59.origin.x);
      }
      if (&v54[1] == v27)
      {
        CGPostError((uint64_t)"%s: Node does not contain \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntries(xmlNodeSetPtr)");
      }
      else
      {
        uint64_t v28 = v57;
        if (v57)
        {
          uint64_t v29 = &v57;
          do
          {
            uint64_t v30 = v29;
            BOOL v31 = v28 + 4;
            BOOL v32 = std::less<std::string>::operator()[abi:fe180100](v28 + 4, v27 + 7);
            BOOL v33 = v28 + 1;
            if (!v32)
            {
              BOOL v33 = v28;
              uint64_t v29 = (uint64_t **)v28;
            }
            uint64_t v28 = (uint64_t *)*v33;
          }
          while (*v33);
          if (v29 != &v57)
          {
            uint64_t v34 = v32 ? v30 + 4 : (uint64_t **)v31;
            if (!std::less<std::string>::operator()[abi:fe180100](v27 + 7, v34))
            {
              switch(*((_DWORD *)v29 + 14))
              {
                case 0:
                  operator new();
                case 1:
                  operator new();
                case 2:
                  operator new();
                case 3:
                  operator new();
                case 4:
                  operator new();
                case 5:
                  operator new();
                case 6:
                  operator new();
                case 7:
                  operator new();
                case 8:
                  operator new();
                default:
                  uint64_t v35 = v27 + 4;
                  if (*((char *)v27 + 55) < 0) {
                    uint64_t v35 = (void *)*v35;
                  }
                  CGPostError((uint64_t)"Failed to parse entry of type: %s", v20, v21, v22, v23, v24, v25, v26, (char)v35);
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v54[1]);
                  uint64_t v18 = 0;
                  break;
              }
              break;
            }
          }
        }
        CGPostError((uint64_t)"%s: Invalid value for \"type\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntries(xmlNodeSetPtr)");
        uint64_t v17 = v37;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v54[1]);
      if (++v19 >= v17->nodeNr)
      {
        uint64_t v18 = 1;
        break;
      }
    }
  }
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)v57);
  return v18;
}

void sub_184DDC560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,char *a43)
{
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, void *a2)
{
  int v2 = (void *)(a1 + 8);
  BOOL v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::less<std::string>::operator()[abi:fe180100](v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    BOOL v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:fe180100](a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

{
  void *v2;
  void *v3;
  void *v5;
  char v6;
  void *v7;

  int v2 = (void *)(a1 + 8);
  BOOL v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::operator<=>[abi:fe180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = v3;
    }
    BOOL v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:fe180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

BOOL DisplayListXMLParserEntryImage::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v16 = v11;
  ResourceWithAttributeName = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "image", 1, v12, v13, v14, v15);
  if (!ResourceWithAttributeName) {
    return 0;
  }
  if (!v18)
  {
    CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v19, v20, v21, v22, v23, v24, v25, (char)"image");
    return 0;
  }
  *((void *)v16 + 10) = v18;
  uint64_t v26 = "ctm";
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v46)
    || (long long v34 = v46[1],
        *(_OWORD *)(v16 + 88) = v46[0],
        *(_OWORD *)(v16 + 104) = v34,
        *(_OWORD *)(v16 + 120) = v46[2],
        int v45 = 0,
        uint64_t v26 = "interpolationQuality",
        !CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationQuality", &v45)))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v27, v28, v29, v30, v31, v32, v33, (char)v26);
    return 0;
  }
  *((_DWORD *)v16 + 34) = v45;
  if (CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationMin", &v45)) {
    *((_DWORD *)v16 + 35) = v45;
  }
  if (CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationMax", &v45)) {
    *((_DWORD *)v16 + 36) = v45;
  }
  int v44 = 0;
  BOOL v42 = CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "renderingIntent", &v44);
  if (v42) {
    *((_DWORD *)v16 + 37) = v44;
  }
  else {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v35, v36, v37, v38, v39, v40, v41, (char)"renderingIntent");
  }
  return v42;
}

BOOL DisplayListXMLParserEntryGlyphs::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v16 = v11;
  ResourceWithAttributeName = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "font", 1, v12, v13, v14, v15);
  if (!ResourceWithAttributeName) {
    return 0;
  }
  if (!v18)
  {
    uint64_t v46 = "font";
    int v44 = "Entry state for attribute: %s is of the wrong class";
    goto LABEL_21;
  }
  *((void *)v16 + 10) = v18;
  uint64_t v26 = "ctm";
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)&v53)) {
    goto LABEL_18;
  }
  long long v27 = v54;
  *(_OWORD *)(v16 + 88) = v53;
  *(_OWORD *)(v16 + 104) = v27;
  *(_OWORD *)(v16 + 120) = v55;
  uint64_t v26 = "ftm";
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ftm", (uint64_t)&v53)) {
    goto LABEL_18;
  }
  long long v28 = v54;
  *(_OWORD *)(v16 + 136) = v53;
  *(_OWORD *)(v16 + 152) = v28;
  *(_OWORD *)(v16 + 168) = v55;
  uint64_t v52 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "scale", "%lg", v21, v22, v23, v24, v25, (uint64_t)&v52) != 1)
  {
    int v44 = "Failed to parse \"scale\" attribute";
    goto LABEL_21;
  }
  *((void *)v16 + 23) = v52;
  uint64_t v26 = "dilation";
  if (!CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "dilation", &v51, v21, v22, v23, v24, v25)) {
    goto LABEL_18;
  }
  *((_OWORD *)v16 + 12) = v51;
  uint64_t v29 = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "fontSmoothingBGColor", 0, v22, v23, v24, v25);
  if (v29) {
  int v50 = 0;
  }
  if (!CG::DisplayListXMLHelper::parseTextDrawingModeFromAttributes(a2, &v50))
  {
    uint64_t v46 = "textDrawingMode";
    goto LABEL_19;
  }
  *((_DWORD *)v16 + 54) = v50;
  int v49 = 0;
  uint64_t v26 = "fontRenderingStyle";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "fontRenderingStyle", "0x%X", v21, v22, v23, v24, v25, (uint64_t)&v49) != 1)
  {
LABEL_18:
    LOBYTE(v46) = (_BYTE)v26;
LABEL_19:
    int v44 = "Failed to parse \"%s\" attribute";
LABEL_21:
    CGPostError((uint64_t)v44, v19, v20, v21, v22, v23, v24, v25, (char)v46);
    return 0;
  }
  *((_DWORD *)v16 + 55) = v49;
  char v48 = 0;
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "shouldDrawBMRuns", &v48)) {
    v16[224] = v48;
  }
  uint64_t v47 = 0;
  uint64_t v35 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v30, v31, v32, v33, v34, (uint64_t)&v47);
  BOOL v43 = v35 == 1;
  if (v35 == 1) {
    *(void *)(a1 + 16) = v47;
  }
  else {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v36, v37, v38, v39, v40, v41, v42, (char)"count");
  }
  return v43;
}

BOOL DisplayListXMLParserEntryPath::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  uint64_t v11 = v10;
  int v31 = 0;
  if (!CG::DisplayListXMLHelper::parsePathDrawingModeFromAttributes(a2, &v31))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v12, v13, v14, v15, v16, v17, v18, (char)"drawingMode");
    return 0;
  }
  v11[20] = v31;
  char v30 = 0;
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "direct", &v30)) {
    *((unsigned char *)v11 + 84) = v30;
  }
  BOOL v26 = CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v29);
  if (v26)
  {
    long long v27 = v29[1];
    *((_OWORD *)v11 + 6) = v29[0];
    *((_OWORD *)v11 + 7) = v27;
    *((_OWORD *)v11 + 8) = v29[2];
  }
  else
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v19, v20, v21, v22, v23, v24, v25, (char)"ctm");
  }
  return v26;
}

BOOL DisplayListXMLParserEntryRects::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v12 = v11;
  int v40 = 0;
  if (!CG::DisplayListXMLHelper::parsePathDrawingModeFromAttributes(a2, &v40))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v13, v14, v15, v16, v17, v18, v19, (char)"drawingMode");
    return 0;
  }
  *((_DWORD *)v12 + 20) = v40;
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v39))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"ctm");
    return 0;
  }
  long long v27 = v39[1];
  *(_OWORD *)(v12 + 88) = v39[0];
  *(_OWORD *)(v12 + 104) = v27;
  *(_OWORD *)(v12 + 120) = v39[2];
  uint64_t v38 = 0;
  uint64_t v28 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v22, v23, v24, v25, v26, (uint64_t)&v38);
  BOOL v36 = v28 == 1;
  if (v28 == 1) {
    *(void *)(a1 + 16) = v38;
  }
  else {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v29, v30, v31, v32, v33, v34, v35, (char)"count");
  }
  return v36;
}

BOOL DisplayListXMLParserEntryLines::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v12 = v11;
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v32))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v13, v14, v15, v16, v17, v18, v19, (char)"ctm");
    return 0;
  }
  long long v20 = v32[1];
  v12[5] = v32[0];
  v12[6] = v20;
  v12[7] = v32[2];
  uint64_t v31 = 0;
  uint64_t v21 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v15, v16, v17, v18, v19, (uint64_t)&v31);
  BOOL v29 = v21 == 1;
  if (v21 == 1) {
    *(void *)(a1 + 16) = v31;
  }
  else {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v22, v23, v24, v25, v26, v27, v28, (char)"count");
  }
  return v29;
}

uint64_t DisplayListXMLParserEntry::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v62 = 0;
  uint64_t v11 = "flags";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "flags", "0x%X", a4, a5, a6, a7, a8, (uint64_t)&v62) != 1
    || (*(_DWORD *)(a3 + 8) = *(unsigned __int8 *)(a3 + 8) | (v62 << 8),
        uint64_t v11 = "boundingBox",
        (CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "boundingBox", (uint64_t)v61) & 1) == 0))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v12, v13, v14, v15, v16, v17, v18, (char)v11);
    return 0;
  }
  long long v19 = v61[1];
  *(_OWORD *)(a3 + 16) = v61[0];
  *(_OWORD *)(a3 + 32) = v19;
  EntryStateWithAttributeName = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "drawState", 0, v15, v16, v17, v18);
  if (EntryStateWithAttributeName)
  {
    if (v27) {
      goto LABEL_7;
    }
    CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v28, v29, v30, v31, v32, v33, v34, (char)"drawState");
  }
  CGLog(1, (uint64_t)"entry has NULL drawing state", v21, v22, v23, v24, v25, v26, v60);
  uint64_t v27 = 0;
LABEL_7:
  *(void *)(a3 + 48) = v27;
  uint64_t v35 = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "fillState", 1, v31, v32, v33, v34);
  if (v35)
  {
    if (!v35)
    {
      CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v40, v41, v42, v36, v37, v38, v39, (char)"fillState");
      uint64_t v35 = 0;
    }
  }
  *(void *)(a3 + 56) = v35;
  BOOL v43 = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "strokeState", 1, v36, v37, v38, v39);
  if (v43)
  {
    if (!v43)
    {
      CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v48, v49, v50, v44, v45, v46, v47, (char)"strokeState");
      BOOL v43 = 0;
    }
  }
  *(void *)(a3 + 64) = v43;
  long long v51 = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "patternState", 1, v44, v45, v46, v47);
  if (v51)
  {
    if (!v51)
    {
      CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v52, v53, v54, v55, v56, v57, v58, (char)"patternState");
      long long v51 = 0;
    }
  }
  *(void *)(a3 + 72) = v51;
  return 1;
}

uint64_t DisplayListXMLParserEntryGradient::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if (!v12) {
      __cxa_bad_cast();
    }
    uint64_t v17 = v12;
    uint64_t v18 = "gradient";
    ResourceWithAttributeName = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "gradient", 1, v13, v14, v15, v16);
    if (ResourceWithAttributeName)
    {
      if (!v27)
      {
        CGPostError((uint64_t)"Entry state for attribute: \"%s\" is of the wrong class", v28, v29, v30, v31, v32, v33, v34, (char)"gradient");
        return 0;
      }
      *((void *)v17 + 10) = v27;
      uint64_t v18 = "ctm";
      if (CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v60))
      {
        long long v35 = v60[1];
        *(_OWORD *)(v17 + 88) = v60[0];
        *(_OWORD *)(v17 + 104) = v35;
        *(_OWORD *)(v17 + 120) = v60[2];
        int v59 = 0;
        if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "options", "%d", v22, v23, v24, v25, v26, (uint64_t)&v59))
        {
          *((_DWORD *)v17 + 35) = v59;
          uint64_t v36 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "gradientType");
          if (!v36)
          {
            uint64_t v55 = "type";
LABEL_27:
            CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)v55);
            return 0;
          }
          uint64_t v37 = v36;
          uint64_t v57 = 0;
          if (!strcmp(v36, "linear"))
          {
            *((_DWORD *)v17 + 34) = 1;
            uint64_t v18 = "startPt";
            if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "startPt", &v58, v38, v39, v40, v41, v42))
            {
              *((_OWORD *)v17 + 9) = v58;
              uint64_t v18 = "endPt";
              if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "endPt", &v58, v22, v23, v24, v25, v26))
              {
                *((_OWORD *)v17 + 10) = v58;
                return 1;
              }
            }
          }
          else
          {
            if (strcmp(v37, "radial"))
            {
              if (strcmp(v37, "conic"))
              {
                CGPostError((uint64_t)"%s: Invalid gradient type: %s", v48, v49, v50, v51, v52, v53, v54, (char)"virtual BOOL DisplayListXMLParserEntryGradient::parseAttributes(const DLXMLAttributes &, DisplayListEntry &)");
                return 0;
              }
              *((_DWORD *)v17 + 34) = 3;
              uint64_t v18 = "center";
              if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "center", &v58, v50, v51, v52, v53, v54))
              {
                *((_OWORD *)v17 + 14) = v58;
                uint64_t v56 = 0;
                uint64_t v18 = "angle";
                if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "angle", "%lg", v22, v23, v24, v25, v26, (uint64_t)&v56))
                {
                  *((void *)v17 + 30) = v56;
                  return 1;
                }
              }
              goto LABEL_26;
            }
            *((_DWORD *)v17 + 34) = 2;
            uint64_t v18 = "startCenter";
            if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "startCenter", &v58, v43, v44, v45, v46, v47))
            {
              *((_OWORD *)v17 + 11) = v58;
              uint64_t v18 = "endCenter";
              if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "endCenter", &v58, v22, v23, v24, v25, v26))
              {
                *((_OWORD *)v17 + 12) = v58;
                uint64_t v18 = "startRadius";
                if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "startRadius", "%lg", v22, v23, v24, v25, v26, (uint64_t)&v57))
                {
                  *((void *)v17 + 26) = v57;
                  uint64_t v18 = "endRadius";
                  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "endRadius", "%lg", v22, v23, v24, v25, v26, (uint64_t)&v57))
                  {
                    *((void *)v17 + 27) = v57;
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_26:
    LOBYTE(v55) = (_BYTE)v18;
    goto LABEL_27;
  }
  return result;
}

uint64_t DisplayListXMLParserEntryDisplayList::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if (!v12) {
      __cxa_bad_cast();
    }
    uint64_t v13 = v12;
    uint64_t v14 = "ctm";
    if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v33)) {
      goto LABEL_9;
    }
    long long v22 = v33[1];
    *(_OWORD *)(v13 + 88) = v33[0];
    *(_OWORD *)(v13 + 104) = v22;
    *(_OWORD *)(v13 + 120) = v33[2];
    int v32 = 0;
    uint64_t v14 = "interpolationQuality";
    if (!CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationQuality", &v32)) {
      goto LABEL_9;
    }
    *((_DWORD *)v13 + 34) = v32;
    int v31 = 0;
    uint64_t v14 = "renderingIntent";
    if (CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "renderingIntent", &v31))
    {
      *((_DWORD *)v13 + 35) = v31;
      uint64_t result = DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "displayList", 1, v18, v19, v20, v21);
      if (!result) {
        return result;
      }
      if (v23)
      {
        *((void *)v13 + 10) = v23;
        return 1;
      }
      CGPostError((uint64_t)"Resource for attribute: %s is of the wrong class", v24, v25, v26, v27, v28, v29, v30, (char)"displayList");
    }
    else
    {
LABEL_9:
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v15, v16, v17, v18, v19, v20, v21, (char)v14);
    }
    return 0;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t DisplayListXMLParserEntry::parseChildElements()
{
  return 1;
}

void DisplayListXMLParserEntryAction::~DisplayListXMLParserEntryAction(DisplayListXMLParserEntryAction *this)
{
}

uint64_t CG::DisplayListEntryAction::_equal_to(CG::DisplayListEntryAction *this, const CG::DisplayListEntry *a2, uint64_t a3)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v6 = *((void *)this + 10);
  }
  uint64_t v7 = *((void *)a2 + 10);
  if (v6)
  {
    if (!v7 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7, a3)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *((void *)this + 11);
  uint64_t v9 = *((void *)a2 + 11);
  if (!v8)
  {
    if (!v9) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v9 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v9, a3)) {
    return 0;
  }
LABEL_11:

  return CG::DisplayListEntry::_equal_to((uint64_t)this, (uint64_t)a2, a3);
}

uint64_t CG::DisplayListEntry::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8));
  if (result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
    uint64_t result = CGRectEqualToRect(*(CGRect *)(a1 + 16), *(CGRect *)(a2 + 16));
    if (!result) {
      return result;
    }
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a2 + 48);
    if ((v7 != 0) == (v8 == 0)) {
      return 0;
    }
    if (v7)
    {
      if (v8)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v8, a3);
        if (!result) {
          return result;
        }
      }
    }
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a2 + 56);
    if ((v9 != 0) == (v10 == 0)) {
      return 0;
    }
    if (v9)
    {
      if (v10)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10, a3);
        if (!result) {
          return result;
        }
      }
    }
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a2 + 64);
    if ((v11 != 0) == (v12 == 0)) {
      return 0;
    }
    if (v11)
    {
      if (v12)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v12, a3);
        if (!result) {
          return result;
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a2 + 72);
    if ((v13 != 0) == (v14 == 0)) {
      return 0;
    }
    if (!v13) {
      return 1;
    }
    if (!v14) {
      return 1;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v14, a3);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t CG::DisplayListEntryAction::getSize(CG::DisplayListEntryAction *this)
{
  return 96;
}

uint64_t DisplayListXMLParserEntry::getResourceWithAttributeName(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  char v9 = (char)a3;
  unint64_t v27 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, a3, "%llu", a4, a5, a6, a7, a8, (uint64_t)&v27) != 1)
  {
    if (v8) {
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v11, v12, v13, v14, v15, v16, v17, v9);
    }
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v21 = *(void **)(v18 + 40);
  uint64_t v19 = (void *)(v18 + 40);
  uint64_t v20 = v21;
  if (!v21) {
    goto LABEL_13;
  }
  long long v22 = v19;
  do
  {
    unint64_t v23 = v20[4];
    BOOL v24 = v23 >= v27;
    if (v23 >= v27) {
      uint64_t v25 = v20;
    }
    else {
      uint64_t v25 = v20 + 1;
    }
    if (v24) {
      long long v22 = v20;
    }
    uint64_t v20 = (void *)*v25;
  }
  while (*v25);
  if (v22 != v19 && v22[4] <= v27)
  {
    uint64_t result = v22[5];
    if (result) {
      return result;
    }
  }
  else
  {
LABEL_13:
    uint64_t result = 0;
  }
  if (v8)
  {
    CGPostError((uint64_t)"resource for id: %llu is NULL", v11, v12, v13, v14, v15, v16, v17, v27);
    return 0;
  }
  return result;
}

void DisplayListXMLParserEntryDisplayList::~DisplayListXMLParserEntryDisplayList(DisplayListXMLParserEntryDisplayList *this)
{
}

uint64_t CG::DisplayListEntryDisplayList::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8))|| *(double *)(a1 + 88) != *(double *)(a2 + 88)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 128) != *(double *)(a2 + 128)|| *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)|| *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v7 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7, a3)) {
    return 0;
  }
LABEL_11:

  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

uint64_t CG::DisplayListEntryDisplayList::getSize(CG::DisplayListEntryDisplayList *this)
{
  return 144;
}

void DisplayListXMLParserEntryGradient::~DisplayListXMLParserEntryGradient(DisplayListXMLParserEntryGradient *this)
{
}

uint64_t CG::DisplayListEntryGradient::_equal_to(float64x2_t *this, float64x2_t *a2, uint64_t a3)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)&this->f64[0] - 8) + 8), *(void *)(*(void *)(*(void *)&a2->f64[0] - 8) + 8)))return 0; {
  if (this[5].f64[1] != a2[5].f64[1])
  }
    return 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(this[6], a2[6]), (int32x4_t)vceqq_f64(this[7], a2[7]))), 0xFuLL))) & 1) == 0)return 0; {
  if (this[8].f64[0] != a2[8].f64[0])
  }
    return 0;
  int v6 = LODWORD(this[8].f64[1]);
  if (v6 != LODWORD(a2[8].f64[1]) || HIDWORD(this[8].f64[1]) != HIDWORD(a2[8].f64[1])) {
    return 0;
  }
  switch(v6)
  {
    case 1:
      if (this[9].f64[0] != a2[9].f64[0] || this[9].f64[1] != a2[9].f64[1] || this[10].f64[0] != a2[10].f64[0]) {
        return 0;
      }
      double v7 = this[10].f64[1];
      double v8 = a2[10].f64[1];
      break;
    case 2:
      v13[0] = this[11].f64;
      v13[1] = this[12].f64;
      v13[2] = this[13].f64;
      v13[3] = &this[13].f64[1];
      v12[0] = a2[11].f64;
      v12[1] = a2[12].f64;
      float64x2_t v12[2] = a2[13].f64;
      v12[3] = &a2[13].f64[1];
      if (!std::__tuple_equal<4ul>::operator()[abi:fe180100]<std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>,std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>>(v13, v12))return 0; {
      goto LABEL_21;
      }
    case 3:
      if (this[14].f64[0] != a2[14].f64[0] || this[14].f64[1] != a2[14].f64[1]) {
        return 0;
      }
      double v7 = this[15].f64[0];
      double v8 = a2[15].f64[0];
      break;
    default:
      goto LABEL_21;
  }
  if (v7 != v8) {
    return 0;
  }
LABEL_21:
  float64_t v9 = this[5].f64[0];
  float64_t v10 = a2[5].f64[0];
  if (v9 == 0.0)
  {
    if (v10 == 0.0) {
      goto LABEL_24;
    }
    return 0;
  }
  if (v10 == 0.0
    || !(*(unsigned int (**)(float64_t, float64_t, uint64_t))(**(void **)&v9 + 24))(COERCE_FLOAT64_T(*(void *)&v9), COERCE_FLOAT64_T(*(void *)&v10), a3))
  {
    return 0;
  }
LABEL_24:

  return CG::DisplayListEntry::_equal_to((uint64_t)this, (uint64_t)a2, a3);
}

BOOL std::__tuple_equal<4ul>::operator()[abi:fe180100]<std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>,std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>>(double **a1, double **a2)
{
  BOOL v2 = **a1 == **a2 && (*a1)[1] == (*a2)[1];
  if (v2 && ((BOOL v3 = a1[1], v4 = a2[1], *v3 == *v4) ? (v5 = v3[1] == v4[1]) : (v5 = 0), v5 && *a1[2] == *a2[2])) {
    return *a1[3] == *a2[3];
  }
  else {
    return 0;
  }
}

uint64_t CG::DisplayListEntryGradient::getSize(CG::DisplayListEntryGradient *this)
{
  return 248;
}

uint64_t DisplayListXMLParserEntry::_getEntryStateWithAttributeName(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a4;
  char v9 = (char)a3;
  unint64_t v27 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, a3, "%llu", a4, a5, a6, a7, a8, (uint64_t)&v27) != 1)
  {
    if ((v8 & 1) == 0) {
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v11, v12, v13, v14, v15, v16, v17, v9);
    }
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v21 = *(void **)(v18 + 64);
  uint64_t v19 = (void *)(v18 + 64);
  uint64_t v20 = v21;
  if (!v21) {
    goto LABEL_14;
  }
  long long v22 = v19;
  do
  {
    unint64_t v23 = v20[4];
    BOOL v24 = v23 >= v27;
    if (v23 >= v27) {
      uint64_t v25 = v20;
    }
    else {
      uint64_t v25 = v20 + 1;
    }
    if (v24) {
      long long v22 = v20;
    }
    uint64_t v20 = (void *)*v25;
  }
  while (*v25);
  if (v22 == v19 || v22[4] > v27 || (uint64_t result = v22[5]) == 0)
  {
LABEL_14:
    CGPostError((uint64_t)"entryState for id: %llu is NULL", v11, v12, v13, v14, v15, v16, v17, v27);
    return 0;
  }
  return result;
}

void DisplayListXMLParserEntryShading::~DisplayListXMLParserEntryShading(DisplayListXMLParserEntryShading *this)
{
}

uint64_t CG::DisplayListEntryShading::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8))|| *(double *)(a1 + 88) != *(double *)(a2 + 88)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 128) != *(double *)(a2 + 128)|| *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)|| *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v7 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7, a3)) {
    return 0;
  }
LABEL_11:

  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

uint64_t CG::DisplayListEntryShading::getSize(CG::DisplayListEntryShading *this)
{
  return 144;
}

BOOL DisplayListXMLParserEntryLines::parseChildElements(DisplayListXMLParserEntryLines *this, _xmlNode *a2, CG::DisplayListEntry *lpsrc)
{
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  uint64_t v14 = (CGPoint *)malloc_type_malloc(16 * *((void *)this + 2), 0x705560E0uLL);
  children = a2->children;
  if (!children) {
    goto LABEL_16;
  }
  while (xmlStrcmp(children->name, (const xmlChar *)"lines"))
  {
    children = children->next;
    if (!children) {
      goto LABEL_16;
    }
  }
  uint64_t v16 = children->children;
  if (!v16)
  {
LABEL_16:
    uint64_t v17 = 0;
    goto LABEL_17;
  }
  uint64_t v17 = 0;
  uint64_t v18 = (void (**)(xmlChar *))MEMORY[0x1E4FBA9D0];
  while (v16->type != XML_ELEMENT_NODE)
  {
LABEL_14:
    uint64_t v16 = v16->next;
    if (!v16) {
      goto LABEL_17;
    }
  }
  if (!xmlStrcmp(v16->name, (const xmlChar *)"line"))
  {
    BOOL String = xmlNodeListGetString(v16->doc, v16->children, 1);
    if (String)
    {
      unint64_t v27 = String;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (sscanf((const char *)String, "{%lg, %lg}", &v33, &v32) == 2)
      {
        uint64_t v28 = v32;
        p_CGFloat x = (void *)&v14[v17++].x;
        *p_CGFloat x = v33;
        p_x[1] = v28;
      }
      (*v18)(v27);
    }
    goto LABEL_14;
  }
  CGPostError((uint64_t)"Unexpected child node name. Expected \"%s\", got \"%s\"", v19, v20, v21, v22, v23, v24, v25, (char)"line");
LABEL_17:
  uint64_t v30 = *((void *)this + 2);
  if (v17 == v30) {
    CG::DisplayListEntryLines::setPoints(v6, v14, v17);
  }
  else {
    CGPostError((uint64_t)"Failed to parse expected number of lines. Expected %zu, got %zu", v7, v8, v9, v10, v11, v12, v13, v30);
  }
  free(v14);
  return v17 == v30;
}

CGPoint *CG::DisplayListEntryLines::setPoints(CG::DisplayListEntryLines *this, const CGPoint *a2, uint64_t a3)
{
  uint64_t result = (CGPoint *)*((void *)this + 16);
  if (result != a2)
  {
    free(result);
    *((void *)this + 16) = 0;
    uint64_t result = (CGPoint *)malloc_type_malloc(16 * a3, 0x705560E0uLL);
    *((void *)this + 16) = result;
    if (result) {
      uint64_t result = (CGPoint *)memcpy(result, a2, 16 * a3);
    }
    *((void *)this + 17) = a3;
  }
  return result;
}

void DisplayListXMLParserEntryLines::~DisplayListXMLParserEntryLines(DisplayListXMLParserEntryLines *this)
{
}

unsigned int *CG::DisplayListEntryLines::_hash(uint64_t a1, unsigned int *a2)
{
  XXH64_update(a2, (char *)(a1 + 80), 0x30uLL);
  uint64_t v4 = *(char **)(a1 + 128);
  if (v4) {
    XXH64_update(a2, v4, 16 * *(void *)(a1 + 136));
  }

  return CG::DisplayListEntry::_hash(a1, a2);
}

uint64_t CG::DisplayListEntryLines::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  if (*(double *)(a1 + 80) != *(double *)(a2 + 80))
  }
    return 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104)))), 0xFuLL))) & 1) == 0)return 0; {
  if (*(double *)(a1 + 120) != *(double *)(a2 + 120))
  }
    return 0;
  uint64_t v6 = *(void *)(a1 + 136);
  if (v6 != *(void *)(a2 + 136)) {
    return 0;
  }
  uint64_t v7 = *(const void **)(a1 + 128);
  uint64_t v8 = *(const void **)(a2 + 128);
  if (v7)
  {
    if (!v8 || memcmp(v7, v8, 16 * v6)) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }

  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

uint64_t CG::DisplayListEntryLines::getSize(CG::DisplayListEntryLines *this)
{
  return 144;
}

void CG::DisplayListEntryLines::~DisplayListEntryLines(void **this)
{
  *this = &unk_1ED094950;
  free(this[16]);

  JUMPOUT(0x18532A2A0);
}

{
  *this = &unk_1ED094950;
  free(this[16]);
}

BOOL DisplayListXMLParserEntryRects::parseChildElements(DisplayListXMLParserEntryRects *this, _xmlNode *a2, CG::DisplayListEntry *lpsrc)
{
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  uint64_t v14 = (CGRect *)malloc_type_malloc(32 * *((void *)this + 2), 0x705560E0uLL);
  children = a2->children;
  if (!children) {
    goto LABEL_16;
  }
  while (xmlStrcmp(children->name, (const xmlChar *)"rects"))
  {
    children = children->next;
    if (!children) {
      goto LABEL_16;
    }
  }
  uint64_t v16 = children->children;
  if (!v16)
  {
LABEL_16:
    uint64_t v17 = 0;
    goto LABEL_17;
  }
  uint64_t v17 = 0;
  uint64_t v18 = (void (**)(xmlChar *))MEMORY[0x1E4FBA9D0];
  while (v16->type != XML_ELEMENT_NODE)
  {
LABEL_14:
    uint64_t v16 = v16->next;
    if (!v16) {
      goto LABEL_17;
    }
  }
  if (!xmlStrcmp(v16->name, (const xmlChar *)"rect"))
  {
    BOOL String = xmlNodeListGetString(v16->doc, v16->children, 1);
    if (String)
    {
      unint64_t v27 = String;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      if (sscanf((const char *)String, "{%lg, %lg}, {%lg, %lg}", &v37, &v36, &v35, &v34) == 4)
      {
        uint64_t v28 = v36;
        uint64_t v30 = v34;
        uint64_t v29 = v35;
        p_CGFloat x = (void *)&v14[v17++].origin.x;
        *p_CGFloat x = v37;
        p_x[1] = v28;
        p_x[2] = v29;
        p_x[3] = v30;
      }
      (*v18)(v27);
    }
    goto LABEL_14;
  }
  CGPostError((uint64_t)"Unexpected child node name. Expected \"rect\", got \"%s\"", v19, v20, v21, v22, v23, v24, v25, (char)v16->name);
LABEL_17:
  uint64_t v32 = *((void *)this + 2);
  if (v17 == v32) {
    CG::DisplayListEntryRects::setRects(v6, v14, v17);
  }
  else {
    CGPostError((uint64_t)"Failed to parse expected number of rects. Expected %zu, got %zu", v7, v8, v9, v10, v11, v12, v13, v32);
  }
  free(v14);
  return v17 == v32;
}

void DisplayListXMLParserEntryRects::~DisplayListXMLParserEntryRects(DisplayListXMLParserEntryRects *this)
{
}

uint64_t CG::DisplayListEntryRects::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
  }
    return 0;
  uint64_t v6 = *(void *)(a1 + 144);
  if (v6 != *(void *)(a2 + 144)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 128) != *(double *)(a2 + 128))
  {
    return 0;
  }
  uint64_t v7 = *(const void **)(a1 + 136);
  uint64_t v8 = *(const void **)(a2 + 136);
  if (v7)
  {
    if (!v8 || memcmp(v7, v8, 32 * v6)) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }

  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

uint64_t CG::DisplayListEntryRects::getSize(CG::DisplayListEntryRects *this)
{
  return 152;
}

uint64_t DisplayListXMLParserEntryPath::parseChildElements(DisplayListXMLParserEntryPath *this, _xmlNode *a2, CG::DisplayListEntry *lpsrc)
{
  if (!v4) {
    __cxa_bad_cast();
  }
  children = a2->children;
  if (children)
  {
    uint64_t v6 = v4;
    while (xmlStrcmp(children->name, (const xmlChar *)"cgpath"))
    {
      children = children->next;
      if (!children) {
        return 1;
      }
    }
    uint64_t v8 = (const void *)CG::DisplayListXMLHelper::parseCGPathFromNode((CG::DisplayListXMLHelper *)children, v7);
    uint64_t v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    uint64_t v10 = (const void *)v6[11];
    v6[11] = v9;
    if (v10) {
      CFRelease(v10);
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  return 1;
}

void DisplayListXMLParserEntryPath::~DisplayListXMLParserEntryPath(DisplayListXMLParserEntryPath *this)
{
}

uint64_t CG::DisplayListEntryPath::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8))|| *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)|| *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84)|| *(double *)(a1 + 96) != *(double *)(a2 + 96)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 120), *(float64x2_t *)(a2 + 120)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 136) != *(double *)(a2 + 136))
  {
    return 0;
  }
  uint64_t v6 = *(const CGPath **)(a1 + 88);
  uint64_t v7 = *(const CGPath **)(a2 + 88);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v7 || !CGPathEqualToPath(v6, v7)) {
    return 0;
  }
LABEL_11:

  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

uint64_t CG::DisplayListEntryPath::getSize(CG::DisplayListEntryPath *this)
{
  return 144;
}

BOOL DisplayListXMLParserEntryGlyphs::parseChildElements(DisplayListXMLParserEntryGlyphs *this, _xmlNode *a2, CG::DisplayListEntry *lpsrc)
{
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  uint64_t v7 = (CGPoint *)malloc_type_malloc(16 * *((void *)this + 2), 0x705560E0uLL);
  uint64_t v15 = (unsigned __int16 *)malloc_type_malloc(2 * *((void *)this + 2), 0x705560E0uLL);
  children = a2->children;
  if (!children) {
    goto LABEL_16;
  }
  while (xmlStrcmp(children->name, (const xmlChar *)"glyphs"))
  {
    children = children->next;
    if (!children) {
      goto LABEL_16;
    }
  }
  uint64_t v17 = children->children;
  if (!v17)
  {
LABEL_16:
    uint64_t v18 = 0;
    goto LABEL_17;
  }
  uint64_t v18 = 0;
  while (v17->type != XML_ELEMENT_NODE)
  {
LABEL_14:
    uint64_t v17 = v17->next;
    if (!v17) {
      goto LABEL_17;
    }
  }
  if (!xmlStrcmp(v17->name, (const xmlChar *)"glyph"))
  {
    CG::DisplayListXMLHelper::parseAttributesFromNode(v40, v17);
    unsigned __int16 v38 = 0;
    if (CG::DisplayListXMLHelper::parsePointFromAttributes((uint64_t)v40, "position", &v39, v26, v27, v28, v29, v30)
      && CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)v40, "glyph", "%hd", v31, v32, v33, v34, v35, (uint64_t)&v38) == 1)
    {
      v7[v18] = v39;
      v15[v18++] = v38;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v41);
    goto LABEL_14;
  }
  CGPostError((uint64_t)"Unexpected child node name. Expected \"glyph\", got \"%s\"", v19, v20, v21, v22, v23, v24, v25, (char)v17->name);
LABEL_17:
  uint64_t v36 = *((void *)this + 2);
  if (v18 == v36) {
    CG::DisplayListEntryGlyphs::setGlyphsAndPositions(v6, v15, v7, v18);
  }
  else {
    CGPostError((uint64_t)"Failed to parse expected number of glyphs. Expected %zu, got %zu", v8, v9, v10, v11, v12, v13, v14, v36);
  }
  free(v15);
  free(v7);
  return v18 == v36;
}

void sub_184DDF01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void DisplayListXMLParserEntryGlyphs::~DisplayListXMLParserEntryGlyphs(DisplayListXMLParserEntryGlyphs *this)
{
}

uint64_t CG::DisplayListEntryGlyphs::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8))|| *(double *)(a1 + 88) != *(double *)(a2 + 88)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 128) != *(double *)(a2 + 128)|| *(double *)(a1 + 136) != *(double *)(a2 + 136)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 144), *(float64x2_t *)(a2 + 144)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 160), *(float64x2_t *)(a2 + 160)))), 0xFuLL))) & 1) == 0
    || *(double *)(a1 + 176) != *(double *)(a2 + 176)
    || *(double *)(a1 + 184) != *(double *)(a2 + 184)
    || *(double *)(a1 + 192) != *(double *)(a2 + 192)
    || *(double *)(a1 + 200) != *(double *)(a2 + 200)
    || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216)
    || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220)
    || *(unsigned __int8 *)(a1 + 224) != *(unsigned __int8 *)(a2 + 224)
    || *(void *)(a1 + 248) != *(void *)(a2 + 248))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a2 + 80);
  if (v6)
  {
    if (!v7 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7, a3)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 208);
  uint64_t v9 = *(void *)(a2 + 208);
  if (v8)
  {
    if (!v9 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v9, a3)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(const void **)(a1 + 232);
  uint64_t v11 = *(const void **)(a2 + 232);
  if (v10)
  {
    if (!v11 || memcmp(v10, v11, 2 * *(void *)(a1 + 248))) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = *(const void **)(a1 + 240);
  uint64_t v13 = *(const void **)(a2 + 240);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_36;
    }
    return 0;
  }
  if (!v13 || memcmp(v12, v13, 16 * *(void *)(a1 + 248))) {
    return 0;
  }
LABEL_36:

  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

uint64_t CG::DisplayListEntryGlyphs::getSize(CG::DisplayListEntryGlyphs *this)
{
  return 256;
}

void DisplayListXMLParserEntryImage::~DisplayListXMLParserEntryImage(DisplayListXMLParserEntryImage *this)
{
}

uint64_t CG::DisplayListEntryImage::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8))|| *(double *)(a1 + 88) != *(double *)(a2 + 88)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 128) != *(double *)(a2 + 128)|| *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)|| *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)|| *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)|| *(float *)(a1 + 152) != *(float *)(a2 + 152))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_13;
    }
    return 0;
  }
  if (!v7 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7, a3)) {
    return 0;
  }
LABEL_13:

  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

uint64_t CG::DisplayListEntryImage::getSize(CG::DisplayListEntryImage *this)
{
  return 160;
}

BOOL std::less<std::string>::operator()[abi:fe180100](void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t DisplayListXMLParserEntryStateDrawing::parseAttributes(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __p[58] = *(void **)MEMORY[0x1E4F143B8];
  if (lpsrc) {
  else
  }
    uint64_t v10 = 0;
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  unsigned __int8 v97 = 0;
  int v95 = 0;
  int v96 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "clip", "%llu", a4, a5, a6, a7, a8, (uint64_t)&v99) == 1)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v19 = *(void **)(v16 + 40);
    uint64_t v17 = (void *)(v16 + 40);
    uint64_t v18 = v19;
    if (!v19) {
      goto LABEL_16;
    }
    uint64_t v20 = v17;
    do
    {
      unint64_t v21 = v18[4];
      BOOL v22 = v21 >= v99;
      if (v21 >= v99) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = v18 + 1;
      }
      if (v22) {
        uint64_t v20 = v18;
      }
      uint64_t v18 = (void *)*v23;
    }
    while (*v23);
    if (v20 != v17 && v20[4] <= v99)
    {
      uint64_t v24 = (void *)v20[5];
      if (v24) {
    }
      }
    else
    {
LABEL_16:
      uint64_t v24 = 0;
    }
    v10[1] = v24;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "softMask", "%llu", v11, v12, v13, v14, v15, (uint64_t)&v99) == 1)
  {
    uint64_t v30 = *(void *)(a1 + 8);
    uint64_t v33 = *(void **)(v30 + 40);
    uint64_t v31 = (void *)(v30 + 40);
    uint64_t v32 = v33;
    if (!v33) {
      goto LABEL_30;
    }
    uint64_t v34 = v31;
    do
    {
      unint64_t v35 = v32[4];
      BOOL v36 = v35 >= v99;
      if (v35 >= v99) {
        uint64_t v37 = v32;
      }
      else {
        uint64_t v37 = v32 + 1;
      }
      if (v36) {
        uint64_t v34 = v32;
      }
      uint64_t v32 = (void *)*v37;
    }
    while (*v37);
    if (v34 != v31 && v34[4] <= v99)
    {
      unsigned __int16 v38 = (void *)v34[5];
      if (v38) {
    }
      }
    else
    {
LABEL_30:
      unsigned __int16 v38 = 0;
    }
    v10[2] = v38;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "style", "%llu", v25, v26, v27, v28, v29, (uint64_t)&v99) == 1)
  {
    uint64_t v44 = *(void *)(a1 + 8);
    uint64_t v47 = *(void **)(v44 + 40);
    uint64_t v45 = (void *)(v44 + 40);
    uint64_t v46 = v47;
    if (!v47) {
      goto LABEL_44;
    }
    uint64_t v48 = v45;
    do
    {
      unint64_t v49 = v46[4];
      BOOL v50 = v49 >= v99;
      if (v49 >= v99) {
        uint64_t v51 = v46;
      }
      else {
        uint64_t v51 = v46 + 1;
      }
      if (v50) {
        uint64_t v48 = v46;
      }
      uint64_t v46 = (void *)*v51;
    }
    while (*v51);
    if (v48 != v45 && v48[4] <= v99)
    {
      uint64_t v52 = (void *)v48[5];
      if (v52) {
    }
      }
    else
    {
LABEL_44:
      uint64_t v52 = 0;
    }
    v10[3] = v52;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "BG", "%llu", v39, v40, v41, v42, v43, (uint64_t)&v99) == 1)
  {
    uint64_t v58 = *(void *)(a1 + 8);
    uint64_t v61 = *(void **)(v58 + 40);
    int v59 = (void *)(v58 + 40);
    char v60 = v61;
    if (!v61) {
      goto LABEL_58;
    }
    int v62 = v59;
    do
    {
      unint64_t v63 = v60[4];
      BOOL v64 = v63 >= v99;
      if (v63 >= v99) {
        int v65 = v60;
      }
      else {
        int v65 = v60 + 1;
      }
      if (v64) {
        int v62 = v60;
      }
      char v60 = (void *)*v65;
    }
    while (*v65);
    if (v62 != v59 && v62[4] <= v99)
    {
      long long v66 = (void *)v62[5];
      if (v66) {
    }
      }
    else
    {
LABEL_58:
      long long v66 = 0;
    }
    v10[4] = v66;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "UCR", "%llu", v53, v54, v55, v56, v57, (uint64_t)&v99) == 1)
  {
    uint64_t v72 = *(void *)(a1 + 8);
    long long v75 = *(void **)(v72 + 40);
    uint64_t v73 = (void *)(v72 + 40);
    int v74 = v75;
    if (!v75) {
      goto LABEL_72;
    }
    uint64_t v76 = v73;
    do
    {
      unint64_t v77 = v74[4];
      BOOL v78 = v77 >= v99;
      if (v77 >= v99) {
        uint64_t v79 = v74;
      }
      else {
        uint64_t v79 = v74 + 1;
      }
      if (v78) {
        uint64_t v76 = v74;
      }
      int v74 = (void *)*v79;
    }
    while (*v79);
    if (v76 != v73 && v76[4] <= v99)
    {
      int v80 = (void *)v76[5];
      if (v80) {
    }
      }
    else
    {
LABEL_72:
      int v80 = 0;
    }
    v10[5] = v80;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "flatness", "%lg", v67, v68, v69, v70, v71, (uint64_t)&v98) == 1)v10[6] = v98; {
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "alpha", "%lg", v81, v82, v83, v84, v85, (uint64_t)&v98) == 1)
  }
    v10[7] = v98;
  std::string::basic_string[abi:fe180100]<0>(__p, "compositeOp");
  char v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if ((void *)(a2 + 8) != v86)
  {
    memcpy(__p, &off_1E52CDEB8, 0x1D0uLL);
    __key[1] = 0;
    uint64_t v87 = v86 + 7;
    if (*((char *)v86 + 79) < 0) {
      uint64_t v87 = (void *)*v87;
    }
    __key[0] = v87;
    int v88 = bsearch_b(__key, __p, 0x1DuLL, 0x10uLL, &__block_literal_global_20856);
    if (v88) {
      *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFFFC0 | v88[2] & 0x3F;
    }
  }
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "antialias", (char *)&v97)) {
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFFFBF | (v97 << 6);
  }
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "alphaIsShape", (char *)&v97)) {
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFFF7F | (v97 << 7);
  }
  if (CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "intent", &v96)) {
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFC0FF | ((v96 & 0x3F) << 8);
  }
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "fillOverprint", (char *)&v97)) {
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFBFFF | (v97 << 14);
  }
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "strokeOverprint", (char *)&v97)) {
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFF7FFF | (v97 << 15);
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "overprintMode", "%d", v89, v90, v91, v92, v93, (uint64_t)&v95) == 1)*((_DWORD *)v10 + 25) = v95; {
  return 1;
  }
}

uint64_t DisplayListXMLParserEntryStateFill::parseAttributes(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (lpsrc) {
  else
  }
    uint64_t v10 = 0;
  unint64_t v21 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "color", "%llu", a4, a5, a6, a7, a8, (uint64_t)&v21) == 1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v14 = *(void **)(v11 + 40);
    uint64_t v12 = (void *)(v11 + 40);
    uint64_t v13 = v14;
    if (!v14) {
      goto LABEL_16;
    }
    uint64_t v15 = v12;
    do
    {
      unint64_t v16 = v13[4];
      BOOL v17 = v16 >= v21;
      if (v16 >= v21) {
        uint64_t v18 = v13;
      }
      else {
        uint64_t v18 = v13 + 1;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      uint64_t v13 = (void *)*v18;
    }
    while (*v18);
    if (v15 != v12 && v15[4] <= v21)
    {
      uint64_t v19 = (void *)v15[5];
      if (v19) {
    }
      }
    else
    {
LABEL_16:
      uint64_t v19 = 0;
    }
    v10[1] = v19;
  }
  return 1;
}

uint64_t DisplayListXMLParserEntryStateStroke::parseAttributes(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (lpsrc) {
  else
  }
    uint64_t v10 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  char v55 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "color", "%llu", a4, a5, a6, a7, a8, (uint64_t)&v57) == 1)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v19 = *(void **)(v16 + 40);
    BOOL v17 = (void *)(v16 + 40);
    uint64_t v18 = v19;
    if (!v19) {
      goto LABEL_16;
    }
    uint64_t v20 = v17;
    do
    {
      unint64_t v21 = v18[4];
      BOOL v22 = v21 >= v57;
      if (v21 >= v57) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = v18 + 1;
      }
      if (v22) {
        uint64_t v20 = v18;
      }
      uint64_t v18 = (void *)*v23;
    }
    while (*v23);
    if (v20 != v17 && v20[4] <= v57)
    {
      uint64_t v24 = (void *)v20[5];
      if (v24) {
    }
      }
    else
    {
LABEL_16:
      uint64_t v24 = 0;
    }
    v10[1] = v24;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "width", "%lg", v11, v12, v13, v14, v15, (uint64_t)&v56) == 1) {
    v10[2] = v56;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "thresh", "%lg", v25, v26, v27, v28, v29, (uint64_t)&v56) == 1) {
    v10[3] = v56;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "dash", "%llu", v30, v31, v32, v33, v34, (uint64_t)&v57) == 1)
  {
    uint64_t v35 = *(void *)(a1 + 8);
    unsigned __int16 v38 = *(void **)(v35 + 40);
    BOOL v36 = (void *)(v35 + 40);
    uint64_t v37 = v38;
    if (!v38) {
      goto LABEL_34;
    }
    uint64_t v39 = v36;
    do
    {
      unint64_t v40 = v37[4];
      BOOL v41 = v40 >= v57;
      if (v40 >= v57) {
        uint64_t v42 = v37;
      }
      else {
        uint64_t v42 = v37 + 1;
      }
      if (v41) {
        uint64_t v39 = v37;
      }
      uint64_t v37 = (void *)*v42;
    }
    while (*v42);
    if (v39 != v36 && v39[4] <= v57)
    {
      uint64_t v43 = (void *)v39[5];
      if (v43) {
    }
      }
    else
    {
LABEL_34:
      uint64_t v43 = 0;
    }
    v10[5] = v43;
  }
  std::string::basic_string[abi:fe180100]<0>(&__p, "cap");
  uint64_t v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &__p);
  if (SHIBYTE(v60) < 0) {
    operator delete(__p);
  }
  if ((void *)(a2 + 8) != v44)
  {
    __p = "butt";
    int v59 = 0;
    char v60 = "round";
    int v61 = 1;
    int v62 = "square";
    int v63 = 2;
    uint64_t v45 = (const char *)(v44 + 7);
    if (*((char *)v44 + 79) < 0) {
      uint64_t v45 = *(const char **)v45;
    }
    unint64_t v46 = 0;
    uint64_t v47 = (const char **)&v59;
    BOOL v48 = 1;
    while (strcmp(v45, *(v47 - 1)))
    {
      BOOL v48 = v46 < 2;
      v47 += 2;
      if (++v46 == 3) {
        goto LABEL_47;
      }
    }
    if (v48) {
      *((unsigned char *)v10 + 48) = *(_DWORD *)v47;
    }
  }
LABEL_47:
  std::string::basic_string[abi:fe180100]<0>(&__p, "join");
  unint64_t v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &__p);
  if (SHIBYTE(v60) < 0) {
    operator delete(__p);
  }
  if ((void *)(a2 + 8) != v49)
  {
    __p = "miter";
    int v59 = 0;
    char v60 = "round";
    int v61 = 1;
    int v62 = "bevel";
    int v63 = 2;
    BOOL v50 = (const char *)(v49 + 7);
    if (*((char *)v49 + 79) < 0) {
      BOOL v50 = *(const char **)v50;
    }
    unint64_t v51 = 0;
    uint64_t v52 = (const char **)&v59;
    BOOL v53 = 1;
    while (strcmp(v50, *(v52 - 1)))
    {
      BOOL v53 = v51 < 2;
      v52 += 2;
      if (++v51 == 3) {
        goto LABEL_58;
      }
    }
    if (v53) {
      *((unsigned char *)v10 + 49) = *(_DWORD *)v52;
    }
  }
LABEL_58:
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "adjust", &v55)) {
    *((unsigned char *)v10 + 50) = v55;
  }
  return 1;
}

uint64_t DisplayListXMLParserEntryStatePattern::parseAttributes(int a1, uint64_t a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    size_t v4 = 0;
  uint64_t v17 = 0;
  if (CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "baseCTM", (uint64_t)v19))
  {
    long long v10 = v19[1];
    *(_OWORD *)(v4 + 8) = v19[0];
    *(_OWORD *)(v4 + 24) = v10;
    *(_OWORD *)(v4 + 40) = v19[2];
  }
  if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "phase", &v18, v5, v6, v7, v8, v9)) {
    *(_OWORD *)(v4 + 56) = v18;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "smoothness", "%lg", v11, v12, v13, v14, v15, (uint64_t)&v17))
  {
    *((void *)v4 + 9) = v17;
  }
  return 1;
}

uint64_t DisplayListXMLParserEntryState::parseChildElements()
{
  return 1;
}

void DisplayListXMLParserEntryStatePattern::~DisplayListXMLParserEntryStatePattern(DisplayListXMLParserEntryStatePattern *this)
{
}

BOOL CG::DisplayListEntryStatePattern::_equal_to(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL v4 = std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8));
  if (!v4 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  uint64_t v5 = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    BOOL v6 = *(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 64) == *(double *)(a2 + 64);
    if (v6 && *(double *)(a1 + 72) == *(double *)(a2 + 72)) {
      return v4;
    }
    return 0;
  }
  return v5;
}

void DisplayListXMLParserEntryStateStroke::~DisplayListXMLParserEntryStateStroke(DisplayListXMLParserEntryStateStroke *this)
{
}

BOOL CG::DisplayListEntryStateStroke::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8))|| *(double *)(a1 + 16) != *(double *)(a2 + 16)|| *(double *)(a1 + 24) != *(double *)(a2 + 24))
  {
    return 0;
  }
  BOOL v6 = *(double *)(a1 + 32) == *(double *)(a2 + 32) && *(unsigned __int16 *)(a1 + 48) == *(unsigned __int16 *)(a2 + 48);
  if (!v6 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  if (v7)
  {
    if (!v8 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v8, a3)) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a2 + 40);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_19;
    }
    return 0;
  }
  if (!v10 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v10, a3)) {
    return 0;
  }
LABEL_19:
  uint64_t v11 = *(void *)(*(void *)(*(void *)a1 - 8) + 8);
  uint64_t v12 = *(void *)(*(void *)(*(void *)a2 - 8) + 8);

  return std::type_info::operator==[abi:fe180100](v11, v12);
}

void DisplayListXMLParserEntryStateFill::~DisplayListXMLParserEntryStateFill(DisplayListXMLParserEntryStateFill *this)
{
}

BOOL CG::DisplayListEntryStateFill::_equal_to(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*a1 - 8) + 8), *(void *)(*(void *)(*a2 - 8) + 8)))return 0; {
  uint64_t v8 = a1[1];
  }
  uint64_t v9 = a2[1];
  if (!v8)
  {
    if (!v9) {
      goto LABEL_9;
    }
    return 0;
  }
  if (!v9 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v9, a3)) {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
LABEL_9:
  uint64_t v11 = *(void *)(*(void *)(v6 - 8) + 8);
  uint64_t v12 = *(void *)(*(void *)(v7 - 8) + 8);

  return std::type_info::operator==[abi:fe180100](v11, v12);
}

void DisplayListXMLParserEntryStateDrawing::~DisplayListXMLParserEntryStateDrawing(DisplayListXMLParserEntryStateDrawing *this)
{
}

BOOL CG::DisplayListEntryStateDrawing::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
  }
    return 0;
  if (*(double *)(a1 + 56) != *(double *)(a2 + 56)) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 96);
  int v7 = *(_DWORD *)(a2 + 96);
  if (!CGRectEqualToRect(*(CGRect *)(a1 + 64), *(CGRect *)(a2 + 64))
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x3F) != 0
    || ((v6 ^ v7) & 0x40) != 0
    || ((v6 & 0x80) == 0) == (v7 & 0x80) >> 7
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x3F00) != 0
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x4000) != 0
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x8000) != 0
    || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
  {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 8);
  if (v9)
  {
    if (!v10 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v10, a3)) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a2 + 16);
  if (v11)
  {
    if (!v12 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v12, a3)) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a2 + 24);
  if (v13)
  {
    if (!v14 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v14, a3)) {
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a2 + 32);
  if (v15)
  {
    if (!v16 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v16, a3)) {
      return 0;
    }
  }
  else if (v16)
  {
    return 0;
  }
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a2 + 40);
  if (!v17)
  {
    if (!v18) {
      goto LABEL_40;
    }
    return 0;
  }
  if (!v18 || *(void *)(a2 + 24) && !(*(unsigned int (**)(uint64_t))(*(void *)v17 + 24))(v17)) {
    return 0;
  }
LABEL_40:
  uint64_t v19 = *(void *)(*(void *)(*(void *)a1 - 8) + 8);
  uint64_t v20 = *(void *)(*(void *)(*(void *)a2 - 8) + 8);

  return std::type_info::operator==[abi:fe180100](v19, v20);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x50uLL);
    uint64_t v10 = *a3;
    v7[8] = 0;
    v7[9] = 0;
    v7[4] = v10;
    v7[5] = 0;
    v7[6] = 0;
    void v7[7] = (uint64_t *)(v7 + 8);
    *int v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = v9;
    CG::DisplayListEntryGlyphs *v6 = (uint64_t *)v7;
    uint64_t v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)a1[8]);
    operator delete(a1);
  }
}

BOOL DisplayListXMLParserResourceClip::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if (CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "bbox", a1 + 24))
    {
      return 1;
    }
    else
    {
      CGPostError((uint64_t)"%s: Failed to parse attribute \"bbox\"", v11, v12, v13, v14, v15, v16, v17, (char)"virtual BOOL DisplayListXMLParserResourceClip::parseAttributes(const DLXMLAttributes &)");
      return 0;
    }
  }
  return result;
}

uint64_t DisplayListXMLParserResourceColor::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  components[5] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (!DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  uint64_t v15 = *(const void **)(a1 + 8);
  uint64_t v16 = v15
  unint64_t v63 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "colorSpace", "%llu", v10, v11, v12, v13, v14, (uint64_t)&v63) != 1)return 0; {
  uint64_t v17 = *(void *)(a1 + 16);
  }
  uint64_t v20 = *(void **)(v17 + 40);
  uint64_t v18 = (void *)(v17 + 40);
  uint64_t v19 = v20;
  if (!v20) {
    return 0;
  }
  unint64_t v21 = v18;
  do
  {
    unint64_t v22 = v19[4];
    BOOL v23 = v22 >= v63;
    if (v22 >= v63) {
      uint64_t v24 = v19;
    }
    else {
      uint64_t v24 = v19 + 1;
    }
    if (v23) {
      unint64_t v21 = v19;
    }
    uint64_t v19 = (void *)*v24;
  }
  while (*v24);
  if (v21 == v18) {
    return 0;
  }
  if (v21[4] > v63) {
    return 0;
  }
  uint64_t v25 = (const void *)v21[5];
  if (!v25) {
    return 0;
  }
  if (!v26)
  {
    CGPostError((uint64_t)"%s: colorSpace resource is of an unexpected class", v27, v28, v29, v30, v31, v32, v33, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  *((void *)v16 + 3) = v26;
  uint64_t v34 = (CGColorSpace *)v26[2];
  if (!v34)
  {
    CGPostError((uint64_t)"%s: Color resource has NULL CGColorSpace", v27, v28, v29, v30, v31, v32, v33, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "pattern", "%llu", v29, v30, v31, v32, v33, (uint64_t)&v63) == 1)
  {
    uint64_t v35 = *(void *)(a1 + 16);
    unsigned __int16 v38 = *(void **)(v35 + 40);
    BOOL v36 = (void *)(v35 + 40);
    uint64_t v37 = v38;
    if (!v38) {
      return 0;
    }
    uint64_t v39 = v36;
    do
    {
      unint64_t v40 = v37[4];
      BOOL v41 = v40 >= v63;
      if (v40 >= v63) {
        uint64_t v42 = v37;
      }
      else {
        uint64_t v42 = v37 + 1;
      }
      if (v41) {
        uint64_t v39 = v37;
      }
      uint64_t v37 = (void *)*v42;
    }
    while (*v42);
    if (v39 == v36) {
      return 0;
    }
    if (v39[4] > v63) {
      return 0;
    }
    uint64_t v43 = (const void *)v39[5];
    if (!v43) {
      return 0;
    }
  }
  unint64_t v44 = CG::DisplayListXMLHelper::parseColorComponentsFromAttributes(a2, (uint64_t)components);
  uint64_t v52 = *((void *)v34 + 3);
  if (v44 != *(void *)(v52 + 48) + 1)
  {
    CGPostError((uint64_t)"%s: Color resource has wrong number of components", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  uint64_t v53 = *((void *)v16 + 4);
  if (v53)
  {
    unint64_t v54 = *(void *)(v53 + 16);
    if (!v54)
    {
      CGPostError((uint64_t)"%s: Pattern resource has NULL CGPattern", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
      return v54;
    }
    if (*(unsigned char *)(v54 + 185))
    {
      Pattern = v34;
    }
    else
    {
      if ((*(_DWORD *)(v52 + 28) - 5) > 1) {
        goto LABEL_52;
      }
      int v59 = **(CGColorSpace ***)(v52 + 96);
      if (!v59) {
        goto LABEL_52;
      }
      Pattern = CGColorSpaceCreatePattern(v59);
      if (!Pattern) {
        goto LABEL_52;
      }
    }
    CGColorRef v56 = CGColorCreateWithPattern(Pattern, (CGPatternRef)v54, components);
  }
  else
  {
    CGColorRef v56 = CGColorCreate(v34, components);
  }
  CGColorRef v58 = v56;
  if (v56)
  {
    CG::DisplayListResourceImage::setImage(v16, v56);
    CFRelease(v58);
    return 1;
  }
LABEL_52:
  CGPostError((uint64_t)"%s: Failed to create color from components", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
  char v60 = CGColorSpaceCreateWithName(@"kCGColorSpaceSRGB");
  if (!v60) {
    return 0;
  }
  int v61 = v60;
  *(_OWORD *)uint64_t v64 = 0u;
  long long v65 = 0u;
  CGColorRef v62 = CGColorCreate(v60, v64);
  unint64_t v54 = v62 != 0;
  CG::DisplayListResourceImage::setImage(v16, v62);
  if (v62) {
    CFRelease(v62);
  }
  CFRelease(v61);
  return v54;
}

BOOL DisplayListXMLParserResourceColorSpace::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  BOOL result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result) {
    return result;
  }
  uint64_t v11 = *(const void **)(a1 + 8);
  if (v11) {
  else
  }
    uint64_t v12 = 0;
  std::string::basic_string[abi:fe180100]<0>(&__p, "csType");
  uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &__p);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  if ((void *)(a2 + 8) == v20) {
    goto LABEL_20;
  }
  __p = "none";
  int v38 = -1;
  uint64_t v39 = "deviceGray";
  BOOL v41 = "deviceRGB";
  int v42 = 1;
  uint64_t v43 = "deviceCMYK";
  int v44 = 2;
  uint64_t v45 = "calibratedGray";
  int v46 = 3;
  uint64_t v47 = "calibratedRGB";
  int v48 = 4;
  uint64_t v49 = "LAB";
  int v50 = 5;
  uint64_t v51 = "ICCBased";
  int v52 = 6;
  uint64_t v53 = "FlexGTCProxy";
  int v54 = 11;
  char v55 = "indexed";
  int v56 = 7;
  unint64_t v57 = "deviceN";
  int v58 = 8;
  int v59 = "pattern";
  int v60 = 9;
  int v40 = 0;
  int v61 = "profileSets";
  int v62 = 10;
  unint64_t v21 = (const char *)(v20 + 7);
  if (*((char *)v20 + 79) < 0) {
    unint64_t v21 = *(const char **)v21;
  }
  unint64_t v22 = 0;
  BOOL v23 = &v38;
  BOOL v24 = 1;
  while (strcmp(v21, *((const char **)v23 - 1)))
  {
    BOOL v24 = v22 < 0xC;
    v23 += 4;
    if (++v22 == 13) {
      goto LABEL_20;
    }
  }
  if (!v24)
  {
LABEL_20:
    BOOL v36 = "virtual BOOL DisplayListXMLParserResourceColorSpace::parseAttributes(const DLXMLAttributes &)";
    uint64_t v28 = "%s: Failed to parse \"type\" attribute";
LABEL_21:
    CGPostError((uint64_t)v28, (uint64_t)v13, v14, v15, v16, v17, v18, v19, (char)v36);
    return 0;
  }
  if (*v23 == 9)
  {
    CGColorSpaceFromAttributeName = DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(a2, "patternBaseName");
    uint64_t v26 = CGColorSpaceFromAttributeName;
    if (!CGColorSpaceFromAttributeName)
    {
      Pattern = DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(a2, "name");
      if (!Pattern)
      {
LABEL_33:
        uint64_t v28 = "Unhandled colorspace type";
        goto LABEL_21;
      }
      goto LABEL_30;
    }
    Pattern = CGColorSpaceCreatePattern(CGColorSpaceFromAttributeName);
    CFRelease(v26);
    goto LABEL_18;
  }
  Pattern = DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(a2, "name");
  if (!Pattern)
  {
    uint64_t v13 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "profile");
    if (!v13) {
      goto LABEL_33;
    }
    CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v30 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, 0x8000100u);
    if (!v30) {
      goto LABEL_33;
    }
    CFURLRef v31 = CFURLCreateCopyAppendingPathComponent(v29, *(CFURLRef *)(*(void *)(a1 + 16) + 24), v30, 0);
    CFURLRef v32 = v31;
    if (v31)
    {
      CGDataProviderRef v33 = CGDataProviderCreateWithURL(v31);
      if (v33)
      {
        uint64_t v34 = v33;
        Pattern = (CGColorSpace *)CGColorSpaceFromICCDataCacheGetRetained(v33);
        CGDataProviderRelease(v34);
      }
      else
      {
        Pattern = 0;
      }
      CFRelease(v32);
    }
    else
    {
      Pattern = 0;
    }
    CFRelease(v30);
LABEL_18:
    if (!Pattern) {
      goto LABEL_33;
    }
  }
LABEL_30:
  uint64_t v35 = (CGColorSpace *)*((void *)v12 + 2);
  if (v35 != Pattern)
  {
    CGColorSpaceRelease(v35);
    CFRetain(Pattern);
    *((void *)v12 + 2) = Pattern;
  }
  CFRelease(Pattern);
  return 1;
}

uint64_t DisplayListXMLParserResourceDash::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v16 = "phase";
    if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "phase", "%lg", v11, v12, v13, v14, v15, (uint64_t)&v25) == 1
      && (*(void *)(a1 + 24) = v25,
          uint64_t v16 = "count",
          uint64_t result = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v19, v20, v21, v22, v23, (uint64_t)&v24), result == 1))
    {
      *(void *)(a1 + 32) = v24;
    }
    else
    {
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v17, v18, v19, v20, v21, v22, v23, (char)v16);
      return 0;
    }
  }
  return result;
}

uint64_t DisplayListXMLParserResourceFont::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  uint64_t v10 = *(const void **)(a1 + 8);
  if (v10) {
  else
  }
    uint64_t v11 = 0;
  uint64_t v12 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "fontURL");
  if (v12)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, 0x8000100u);
    if (!v14) {
      return 0;
    }
    CFStringRef v15 = v14;
    CFURLRef v16 = CFURLCreateWithString(v13, v14, 0);
    CFRelease(v15);
    if (!v16) {
      return 0;
    }
  }
  else
  {
    uint64_t v17 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "fontResourceURL");
    if (!v17)
    {
      CGPostError((uint64_t)"Failed to parse \"fontURL\" or \"fontResourceURL\" attributes", v18, v19, v20, v21, v22, v23, v24, v34);
      return 0;
    }
    CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v26 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v17, 0x8000100u);
    if (!v26) {
      return 0;
    }
    CFURLRef v16 = CFURLCreateCopyAppendingPathComponent(v25, *(CFURLRef *)(*(void *)(a1 + 16) + 24), v26, 0);
    if (!v16) {
      return 0;
    }
  }
  FontsWithURL = CGFontCreateFontsWithURL(v16);
  if (FontsWithURL)
  {
    CFArrayRef v28 = FontsWithURL;
    if (CFArrayGetCount(FontsWithURL) < 1) {
      goto LABEL_19;
    }
    ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v28, 0);
    if (!ValueAtIndex) {
      goto LABEL_19;
    }
    CFStringRef v30 = ValueAtIndex;
    CFTypeID v31 = CFGetTypeID(ValueAtIndex);
    if (_block_invoke_once_3318 != -1)
    {
      CFTypeID v35 = v31;
      dispatch_once(&_block_invoke_once_3318, &__block_literal_global_8_3319);
      CFTypeID v31 = v35;
    }
    if (v31 == CGFontGetTypeID_font_type_id)
    {
      CG::DisplayListResourceFont::setFont(v11, v30);
      uint64_t v32 = 1;
    }
    else
    {
LABEL_19:
      uint64_t v32 = 0;
    }
    CFRelease(v28);
  }
  else
  {
    uint64_t v32 = 0;
  }
  CFRelease(v16);
  return v32;
}

const __CFString *DisplayListXMLParserResourceImage::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  CFStringRef result = (const __CFString *)DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result) {
    return result;
  }
  CFURLRef v16 = *(const void **)(a1 + 8);
  if (v16) {
  else
  }
    uint64_t v17 = 0;
  unint64_t v88 = 0;
  char v87 = 0;
  uint64_t v86 = 0;
  int v85 = 0;
  uint64_t v18 = "width";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "width", "%zu", v11, v12, v13, v14, v15, (uint64_t)&v86) != 1) {
    goto LABEL_28;
  }
  *((void *)v17 + 3) = v86;
  uint64_t v18 = "height";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "height", "%zu", v21, v22, v23, v24, v25, (uint64_t)&v86) != 1) {
    goto LABEL_28;
  }
  *((void *)v17 + 4) = v86;
  uint64_t v18 = "renderingIntent";
  if (!CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "renderingIntent", &v85)
    || (v17[48] = v17[48] & 0xF0 | v85 & 0xF,
        uint64_t v18 = "interpolate",
        (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "interpolate", &v87) & 1) == 0)
    || (v17[48] = v17[48] & 0xEF | (16 * v87),
        uint64_t v18 = "isMask",
        (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "isMask", &v87) & 1) == 0)
    || (v17[48] = v17[48] & 0xDF | (32 * v87),
        uint64_t v18 = "isTransparent",
        (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "isTransparent", &v87) & 1) == 0))
  {
LABEL_28:
    LOBYTE(decode) = (_BYTE)v18;
LABEL_29:
    uint64_t v47 = "Failed to parse \"%s\" attribute";
LABEL_30:
    CGPostError((uint64_t)v47, v19, v20, v21, v22, v23, v24, v25, (char)decode);
    return 0;
  }
  v17[48] = v17[48] & 0xBF | (v87 << 6);
  CFStringRef v26 = (char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "imageName");
  if (!v26)
  {
    decode = (CGFloat *)"imageName";
    goto LABEL_29;
  }
  uint64_t v27 = v26;
  if ((v17[48] & 0x20) != 0)
  {
    int v46 = 0;
    goto LABEL_35;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "colorSpace", "%llu", v21, v22, v23, v24, v25, (uint64_t)&v88) != 1)
  {
    uint64_t v47 = "Failed to parse \"colorSpace\" attribute";
    goto LABEL_30;
  }
  uint64_t v28 = *(void *)(a1 + 16);
  char v29 = v88;
  uint64_t v32 = *(void **)(v28 + 40);
  CFStringRef v30 = (void *)(v28 + 40);
  CFTypeID v31 = v32;
  if (!v32) {
    goto LABEL_48;
  }
  CGDataProviderRef v33 = v30;
  do
  {
    unint64_t v34 = v31[4];
    BOOL v35 = v34 >= v88;
    if (v34 >= v88) {
      BOOL v36 = v31;
    }
    else {
      BOOL v36 = v31 + 1;
    }
    if (v35) {
      CGDataProviderRef v33 = v31;
    }
    CFTypeID v31 = (void *)*v36;
  }
  while (*v36);
  if (v33 == v30 || v33[4] > v88 || (uint64_t v37 = (const void *)v33[5]) == 0)
  {
LABEL_48:
    CGPostError((uint64_t)"Failed to get resourceID: %llu for \"colorSpace\" attribute", v19, v20, v21, v22, v23, v24, v25, v88);
    return 0;
  }
  if (!v38)
  {
    CGPostError((uint64_t)"colorSpace resourceID: %llu is of an unexpected class", v39, v40, v41, v42, v43, v44, v45, v29);
    return 0;
  }
  int v46 = v38;
  *((void *)v17 + 5) = v38;
LABEL_35:
  CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef result = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v27, 0x8000100u);
  if (result)
  {
    uint64_t v49 = result;
    CFURLRef v50 = CFURLCreateCopyAppendingPathComponent(v48, *(CFURLRef *)(*(void *)(a1 + 16) + 24), result, 0);
    if (!v50)
    {
      int v57 = 0;
LABEL_62:
      CFRelease(v49);
      return (const __CFString *)(v57 != 0);
    }
    CFURLRef v51 = v50;
    CFStringRef v52 = CFURLCopyPathExtension(v50);
    if (!v52 || CFStringCompare(v52, @"br2", 0))
    {
      if (DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate != -1) {
        dispatch_once(&DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate, &__block_literal_global_101_4299);
      }
      uint64_t v53 = DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::f(v51, 0);
      if (!v53) {
        goto LABEL_60;
      }
      int v54 = (const void *)v53;
      if (DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate != -1) {
        dispatch_once(&DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate, &__block_literal_global_104_4300);
      }
      char v55 = (__CFData *)DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::f(v54, 0, 0);
      goto LABEL_45;
    }
    size_t v83 = 0;
    size_t v84 = 0;
    size_t v81 = 0;
    size_t v82 = 0;
    uint64_t v80 = 0;
    CGBitmapInfo bitmapInfo = 0;
    int v58 = strstr(v27, "_w=");
    if (!v58
      || sscanf(v58, "_w=%ld,h=%ld,rb=%ld,cs=%ld,bpc=%ld,bmi=%x", &v84, &v83, &v81, &v80, &v82, &bitmapInfo) != 6)
    {
      CGPostError((uint64_t)"Improperly formed BufferReader name: %s", v19, v20, v21, v22, v23, v24, v25, (char)v27);
      goto LABEL_57;
    }
    if ((v17[48] & 0x20) != 0)
    {
      int v59 = 0;
      size_t v61 = v82;
LABEL_71:
      uint64_t v63 = CGDataProviderCreateWithURL(v51);
      if (v63)
      {
        int v54 = v63;
        unsigned int v64 = v17[48];
        if ((v64 & 0x20) == 0)
        {
          int v56 = (uint64_t *)CGImageCreate(v84, v83, v82, v61, v81, v59, bitmapInfo, v63, 0, (v64 & 0x10) != 0, (CGColorRenderingIntent)((int)(v64 << 28) >> 28));
          CGImageCopyHeadroomFromOriginal(v56, *((CGImage **)v17 + 2), v65, v66, v67, v68, v69, v70);
          goto LABEL_46;
        }
        char v55 = mask_create(v84, v83, v82, v61, v81, v63, 0, (v64 >> 4) & 1, 4);
LABEL_45:
        int v56 = (uint64_t *)v55;
LABEL_46:
        CFRelease(v54);
        goto LABEL_58;
      }
      CFURLGetFileSystemRepresentation(v51, 1u, buffer, 1024);
      CGPostError((uint64_t)"%s: Failed to create CGDataProvider with URL: %s", v71, v72, v73, v74, v75, v76, v77, (char)"virtual BOOL DisplayListXMLParserResourceImage::parseAttributes(const DLXMLAttributes &)");
LABEL_57:
      int v56 = 0;
LABEL_58:
      if (v56)
      {
        CG::DisplayListResourceImage::setImage((CG::DisplayListResourceImage *)v17, v56);
        CFRelease(v56);
        int v57 = 1;
LABEL_61:
        CFRelease(v51);
        goto LABEL_62;
      }
LABEL_60:
      int v57 = 0;
      goto LABEL_61;
    }
    if (v46)
    {
      int v59 = (CGColorSpace *)*((void *)v46 + 2);
      if (v59) {
        uint64_t v60 = *(void *)(*((void *)v59 + 3) + 48);
      }
      else {
        uint64_t v60 = 0;
      }
      if ((bitmapInfo & 0x1F) != 0) {
        size_t v62 = v82;
      }
      else {
        size_t v62 = 0;
      }
      size_t v61 = v62 + v82 * v60;
      goto LABEL_71;
    }
    uint64_t v47 = "colorSpaceResource == NULL";
    goto LABEL_30;
  }
  return result;
}

BOOL DisplayListXMLParserResource::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v18 = 0;
  uint64_t v16 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "flags", "0x%X", a4, a5, a6, a7, a8, (uint64_t)&v18);
  if (v16 == 1) {
    *(_DWORD *)(*(void *)(a1 + 8) + 8) = v18 & 0xFFFFFF | (*(unsigned __int8 *)(*(void *)(a1 + 8) + 11) << 24);
  }
  else {
    CGPostError((uint64_t)"%s: Failed to parse attribute \"%s\"", v9, v10, v11, v12, v13, v14, v15, (char)"virtual BOOL DisplayListXMLParserResource::parseAttributes(const DLXMLAttributes &)");
  }
  return v16 == 1;
}

uint64_t DisplayListXMLParserResourceGradient::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v16 = *(const void **)(a1 + 8);
    if (v16) {
    else
    }
      uint64_t v17 = 0;
    unint64_t v52 = 0;
    if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "colorSpace", "%llu", v11, v12, v13, v14, v15, (uint64_t)&v52) == 1)
    {
      uint64_t v25 = *(void *)(a1 + 16);
      char v26 = v52;
      char v29 = *(void **)(v25 + 40);
      uint64_t v27 = (void *)(v25 + 40);
      uint64_t v28 = v29;
      if (v29)
      {
        CFStringRef v30 = v27;
        do
        {
          unint64_t v31 = v28[4];
          BOOL v32 = v31 >= v52;
          if (v31 >= v52) {
            CGDataProviderRef v33 = v28;
          }
          else {
            CGDataProviderRef v33 = v28 + 1;
          }
          if (v32) {
            CFStringRef v30 = v28;
          }
          uint64_t v28 = (void *)*v33;
        }
        while (*v33);
        if (v30 != v27 && v30[4] <= v52)
        {
          unint64_t v34 = (const void *)v30[5];
          if (v34)
          {
            if (v35)
            {
              v17[3] = v35;
              uint64_t result = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v38, v39, v40, v41, v42, a1 + 24);
              if (result == 1) {
                return result;
              }
              CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v43, v44, v45, v46, v47, v48, v49, (char)"count");
            }
            else
            {
              CGPostError((uint64_t)"colorSpace resourceID: %llu is of an unexpected class", v36, v37, v38, v39, v40, v41, v42, v26);
            }
            return 0;
          }
        }
      }
      char v51 = v52;
      CFURLRef v50 = "Failed to get resourceID: %llu for \"colorSpace\" attribute";
    }
    else
    {
      CFURLRef v50 = "Failed to parse \"colorSpace\" attribute";
    }
    CGPostError((uint64_t)v50, v18, v19, v20, v21, v22, v23, v24, v51);
    return 0;
  }
  return result;
}

BOOL DisplayListXMLParserResourcePattern::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  BOOL result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result) {
    return result;
  }
  uint64_t v11 = *(const void **)(a1 + 8);
  if (v11) {
  else
  }
    uint64_t v12 = 0;
  uint64_t v13 = "patternType";
  std::string::basic_string[abi:fe180100]<0>(&callbacks, "patternType");
  uint64_t v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &callbacks);
  if (SHIBYTE(callbacks.releaseInfo) < 0) {
    operator delete(*(void **)&callbacks.version);
  }
  if ((void *)(a2 + 8) == v21) {
    goto LABEL_26;
  }
  *(void *)&callbacks.version = "tiling";
  callbacks.releaseInfo = (CGPatternReleaseInfoCallback)"shading";
  uint64_t v22 = (const char *)(v21 + 7);
  if (*((char *)v21 + 79) < 0) {
    uint64_t v22 = *(const char **)v22;
  }
  uint64_t v23 = 0;
  char v24 = 1;
  while (1)
  {
    char v25 = v24;
    if (!strcmp(v22, *((const char **)&callbacks.version + 2 * v23))) {
      break;
    }
    char v24 = 0;
    uint64_t v23 = 1;
    if ((v25 & 1) == 0) {
      goto LABEL_26;
    }
  }
  uint64_t v13 = "patternBounds";
  if ((CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "patternBounds", (uint64_t)&v53) & 1) == 0) {
    goto LABEL_26;
  }
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "patternMatrix", (uint64_t)&v52))
  {
    unint64_t v31 = "Failed to parse \"patternMatrix\" attribute";
    goto LABEL_28;
  }
  uint64_t v13 = "step";
  if (!CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "step", v51, v16, v17, v18, v19, v20))
  {
LABEL_26:
    LOBYTE(v48) = (_BYTE)v13;
LABEL_27:
    unint64_t v31 = "Failed to parse \"%s\" attribute";
LABEL_28:
    CGPostError((uint64_t)v31, (uint64_t)v14, v15, v16, v17, v18, v19, v20, (char)v48);
    return 0;
  }
  std::string::basic_string[abi:fe180100]<0>(&callbacks, "tiling");
  char v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &callbacks);
  if (SHIBYTE(callbacks.releaseInfo) < 0) {
    operator delete(*(void **)&callbacks.version);
  }
  if ((void *)(a2 + 8) == v26) {
    goto LABEL_41;
  }
  *(void *)&callbacks.version = "noDistortion";
  LODWORD(callbacks.drawPattern) = 0;
  callbacks.releaseInfo = (CGPatternReleaseInfoCallback)"constSpacingMinDistortion";
  int v55 = 1;
  int v56 = "constSpacing";
  int v57 = 2;
  uint64_t v27 = (const char *)(v26 + 7);
  if (*((char *)v26 + 79) < 0) {
    uint64_t v27 = *(const char **)v27;
  }
  unint64_t v28 = 0;
  p_drawPattern = &callbacks.drawPattern;
  BOOL v30 = 1;
  while (strcmp(v27, (const char *)*(p_drawPattern - 1)))
  {
    BOOL v30 = v28 < 2;
    p_drawPattern += 2;
    if (++v28 == 3) {
      goto LABEL_41;
    }
  }
  if (!v30)
  {
LABEL_41:
    unint64_t v31 = "Failed to parse \"tiling\" attribute";
    goto LABEL_28;
  }
  CGPatternTiling v32 = *(_DWORD *)p_drawPattern;
  BOOL isColored = 0;
  if ((CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "isColored", (char *)&isColored) & 1) == 0)
  {
    uint64_t v48 = "isColored";
    goto LABEL_27;
  }
  uint64_t v14 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "drawCell");
  if (!v14)
  {
    unint64_t v31 = "Failed to parse \"drawCell\" attribute";
    goto LABEL_28;
  }
  CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v34 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v14, 0x8000100u);
  if (!v34) {
    goto LABEL_45;
  }
  CFURLRef v35 = *(const __CFURL **)(*(void *)(a1 + 16) + 24);
  if (!v35 || (CFURLRef v36 = CFURLCreateCopyAppendingPathComponent(v33, v35, v34, 1u), (v44 = v36) == 0))
  {
    CFRelease(v34);
    goto LABEL_45;
  }
  uint64_t v45 = (void *)CGDisplayListCreateWithURL(v36, v37, v38, v39, v40, v41, v42, v43);
  CFRelease(v44);
  CFRelease(v34);
  if (!v45)
  {
LABEL_45:
    unint64_t v31 = "Failed to read pattern cell display list";
    goto LABEL_28;
  }
  CGPatternCallbacks callbacks = *(CGPatternCallbacks *)byte_1ED09B0E0;
  matriCGFloat x = v52;
  CGPatternRef v46 = CGPatternCreate(v45, v53, &matrix, v51[0], v51[1], v32, isColored, &callbacks);
  if (v46)
  {
    CGPatternRef v47 = v46;
    CG::DisplayListResourcePattern::setPattern(v12, v46);
    CFRelease(v47);
  }
  return 1;
}

BOOL DisplayListXMLParserResourceStyle::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  BOOL result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v11 = *(const void **)(a1 + 8);
    if (v11) {
    else
    }
      uint64_t v12 = 0;
    std::string::basic_string[abi:fe180100]<0>(__p, "styleType");
    uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, __p);
    if (SBYTE7(v136) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v21 = (void *)(a2 + 8);
    if ((void *)(a2 + 8) == v20) {
      goto LABEL_30;
    }
    __p[0] = "shadow";
    LODWORD(__p[1]) = 1;
    *(void *)&long long v136 = "focusRing";
    DWORD2(v136) = 2;
    *(void *)int v137 = "gaussianBlur";
    *(_DWORD *)&v137[8] = 3;
    *(void *)&v137[16] = "colorMatrix";
    *(_DWORD *)&v137[24] = 4;
    *(void *)&v137[32] = "unknown";
    *(_DWORD *)&v137[40] = 0;
    uint64_t v22 = (const char *)(v20 + 7);
    if (*((char *)v20 + 79) < 0) {
      uint64_t v22 = *(const char **)v22;
    }
    unint64_t v23 = 0;
    char v24 = &__p[1];
    BOOL v25 = 1;
    while (strcmp(v22, (const char *)*(v24 - 1)))
    {
      BOOL v25 = v23 < 4;
      v24 += 2;
      if (++v23 == 5) {
        goto LABEL_30;
      }
    }
    if (!v25)
    {
LABEL_30:
      CGPostError((uint64_t)"Failed to parse attribute: \"statusType\"", v13, v14, v15, v16, v17, v18, v19, v132);
      return 0;
    }
    else
    {
      switch(*(_DWORD *)v24)
      {
        case 1:
          *(void *)&long long v144 = 0;
          LODWORD(__p[0]) = 0;
          uint64_t v26 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "elevation", "%lg", v15, v16, v17, v18, v19, (uint64_t)&v144);
          double v32 = *(double *)&v144;
          if (!v26) {
            double v32 = 45.0;
          }
          __p[1] = *(void **)&v32;
          uint64_t v33 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "azimuth", "%lg", v27, v28, v29, v30, v31, (uint64_t)&v144);
          double v39 = *(double *)&v144;
          if (!v33) {
            double v39 = 135.0;
          }
          *(double *)&long long v136 = v39;
          uint64_t v40 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "ambient", "%lg", v34, v35, v36, v37, v38, (uint64_t)&v144);
          double v46 = *(double *)&v144;
          if (!v40) {
            double v46 = 0.666666667;
          }
          *((double *)&v136 + 1) = v46;
          uint64_t v47 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "height", "%lg", v41, v42, v43, v44, v45, (uint64_t)&v144);
          double v53 = *(double *)&v144;
          if (!v47) {
            double v53 = 3.0;
          }
          *(double *)int v137 = v53;
          uint64_t v54 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "radius", "%lg", v48, v49, v50, v51, v52, (uint64_t)&v144);
          double v60 = *(double *)&v144;
          if (!v54) {
            double v60 = 0.0;
          }
          *(double *)&v137[8] = v60;
          uint64_t v61 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "saturation", "%lg", v55, v56, v57, v58, v59, (uint64_t)&v144);
          double v68 = *(double *)&v144;
          if (!v61) {
            double v68 = 1.0;
          }
          *(double *)&v137[16] = v68;
          ShadowWithColor = (const void *)CGStyleCreateShadowWithColor((uint64_t)__p, 0, v62, v63, v64, v65, v66, v67);
          if (ShadowWithColor)
          {
            uint64_t v70 = ShadowWithColor;
            CG::DisplayListResourcePattern::setPattern(v12, ShadowWithColor);
            CFRelease(v70);
          }
          break;
        case 2:
          double v134 = 0.0;
          int v133 = 0;
          LODWORD(__p[0]) = 0;
          std::string::basic_string[abi:fe180100]<0>(&v144, "tint");
          uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &v144);
          if (SBYTE7(v145) < 0) {
            operator delete((void *)v144);
          }
          if (v21 == v71)
          {
LABEL_40:
            int v76 = 0;
          }
          else
          {
            *(void *)&long long v144 = "blue";
            *(void *)&long long v145 = "graphite";
            DWORD2(v144) = 0;
            DWORD2(v145) = 1;
            uint64_t v72 = (const char *)(v71 + 7);
            if (*((char *)v71 + 79) < 0) {
              uint64_t v72 = *(const char **)v72;
            }
            uint64_t v73 = 0;
            char v74 = 1;
            while (1)
            {
              char v75 = v74;
              if (!strcmp(v72, *((const char **)&v144 + 2 * v73))) {
                break;
              }
              char v74 = 0;
              uint64_t v73 = 1;
              if ((v75 & 1) == 0) {
                goto LABEL_40;
              }
            }
            int v76 = *((_DWORD *)&v144 + 4 * v73 + 2);
          }
          HIDWORD(__p[0]) = v76;
          std::string::basic_string[abi:fe180100]<0>(&v144, "ordering");
          uint64_t v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &v144);
          if (SBYTE7(v145) < 0) {
            operator delete((void *)v144);
          }
          if (v21 == v101)
          {
LABEL_59:
            int v106 = 0;
          }
          else
          {
            *(void *)&long long v144 = "none";
            *(void *)&long long v145 = "above";
            DWORD2(v144) = 0;
            DWORD2(v145) = 2;
            int v146 = "below";
            int v147 = 1;
            long long v102 = (const char *)(v101 + 7);
            if (*((char *)v101 + 79) < 0) {
              long long v102 = *(const char **)v102;
            }
            unint64_t v103 = 0;
            BOOL v104 = 1;
            uint64_t v105 = (const char **)&v144;
            while (strcmp(v102, *v105))
            {
              BOOL v104 = v103 < 2;
              v105 += 2;
              if (++v103 == 3) {
                goto LABEL_59;
              }
            }
            int v106 = *((_DWORD *)&v144 + 4 * v103 + 2);
            if (!v104) {
              int v106 = 0;
            }
          }
          LODWORD(__p[1]) = v106;
          uint64_t v107 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "alpha", "%lg", v96, v97, v98, v99, v100, (uint64_t)&v134);
          double v113 = v134;
          if (!v107) {
            double v113 = 0.8;
          }
          *(double *)&long long v136 = v113;
          uint64_t v114 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "radius", "%lg", v108, v109, v110, v111, v112, (uint64_t)&v134);
          double v120 = v134;
          if (!v114) {
            double v120 = 2.0;
          }
          *((double *)&v136 + 1) = v120;
          uint64_t v121 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "threshold", "%lg", v115, v116, v117, v118, v119, (uint64_t)&v134);
          double v122 = v134;
          if (!v121) {
            double v122 = 0.5;
          }
          *(double *)int v137 = v122;
          if (CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "bounds", (uint64_t)&v144))
          {
            *(_OWORD *)&v137[8] = v144;
            *(_OWORD *)&v137[24] = v145;
          }
          else
          {
            memset(&v137[8], 0, 32);
          }
          uint64_t v128 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "accumulate", "%d", v123, v124, v125, v126, v127, (uint64_t)&v133);
          int v129 = v133;
          if (!v128) {
            int v129 = 0;
          }
          *(_DWORD *)&v137[40] = v129;
          FocusRing = (const void *)CGStyleCreateFocusRing((uint64_t)__p);
          if (FocusRing)
          {
            int v131 = FocusRing;
            CG::DisplayListResourcePattern::setPattern(v12, FocusRing);
            CFRelease(v131);
          }
          break;
        case 3:
          __p[0] = 0;
          if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "radius", "%lg", v15, v16, v17, v18, v19, (uint64_t)__p))
          {
            double v84 = *(double *)__p;
          }
          else
          {
            double v84 = 0.0;
          }
          style_with_type = (double *)create_style_with_type(3, v77, v78, v79, v80, v81, v82, v83);
          style_with_type[5] = fmax(fmin(v84, 1.79769313e308), 0.0);
          CG::DisplayListResourcePattern::setPattern(v12, style_with_type);
          CFRelease(style_with_type);
          break;
        case 4:
          uint64_t v86 = 0;
          *(void *)&long long v144 = 0;
          LODWORD(__p[0]) = 0;
          do
          {
            uint64_t v87 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, CG::DisplayListXMLHelper::colorMatrixIndexKey::keys[v86], "%lg", v15, v16, v17, v18, v19, (uint64_t)&v144);
            double v90 = *(double *)&v144;
            if (!v87) {
              double v90 = 0.0;
            }
            *(double *)&__p[++v86] = v90;
          }
          while (v86 != 20);
          uint64_t v91 = create_style_with_type(4, v88, v89, v15, v16, v17, v18, v19);
          *(_OWORD *)(v91 + 144) = v140;
          long long v92 = v142;
          *(_OWORD *)(v91 + 160) = v141;
          *(_OWORD *)(v91 + 176) = v92;
          *(void *)(v91 + 192) = v143;
          long long v93 = *(_OWORD *)&v137[32];
          *(_OWORD *)(v91 + 80) = *(_OWORD *)&v137[16];
          *(_OWORD *)(v91 + 96) = v93;
          long long v94 = v139;
          *(_OWORD *)(v91 + 112) = v138;
          *(_OWORD *)(v91 + 128) = v94;
          long long v95 = v136;
          *(_OWORD *)(v91 + 32) = *(_OWORD *)__p;
          *(_OWORD *)(v91 + 48) = v95;
          *(_OWORD *)(v91 + 64) = *(_OWORD *)v137;
          CG::DisplayListResourcePattern::setPattern(v12, (CFTypeRef)v91);
          CFRelease((CFTypeRef)v91);
          break;
        default:
          return 1;
      }
      return 1;
    }
  }
  return result;
}

BOOL DisplayListXMLParserResourceSoftMask::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  uint64_t v10 = *(const void **)(a1 + 8);
  if (v10) {
  else
  }
    uint64_t v11 = 0;
  unint64_t v82 = 0;
  uint64_t v12 = "bbox";
  if ((CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "bbox", (uint64_t)v84) & 1) == 0
    || (uint64_t v12 = "matrix", !CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "matrix", (uint64_t)v83)))
  {
    LOBYTE(v78) = (_BYTE)v12;
LABEL_23:
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v13, v14, v15, v16, v17, v18, v19, (char)v78);
    return 0;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "bg", "%llu", v15, v16, v17, v18, v19, (uint64_t)&v82) == 1)
  {
    uint64_t v27 = *(void *)(a1 + 16);
    uint64_t v30 = *(void **)(v27 + 40);
    uint64_t v28 = (void *)(v27 + 40);
    uint64_t v29 = v30;
    if (!v30) {
      goto LABEL_34;
    }
    uint64_t v31 = v28;
    do
    {
      unint64_t v32 = v29[4];
      BOOL v33 = v32 >= v82;
      if (v32 >= v82) {
        uint64_t v34 = v29;
      }
      else {
        uint64_t v34 = v29 + 1;
      }
      if (v33) {
        uint64_t v31 = v29;
      }
      uint64_t v29 = (void *)*v34;
    }
    while (*v34);
    if (v31 == v28 || v31[4] > v82 || (uint64_t v35 = (const void *)v31[5]) == 0)
    {
LABEL_34:
      CGPostError((uint64_t)"Failed to get resourceID: %llu for \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, v82);
      return 0;
    }
    if (!v43)
    {
      CGPostError((uint64_t)"\"%s\" resourceID: %llu is of an unexpected class", v36, v37, v38, v39, v40, v41, v42, (char)"background");
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
  }
  double v46 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "dl");
  if (!v46)
  {
    uint64_t v78 = "dl";
    goto LABEL_23;
  }
  CFAllocatorRef v47 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v48 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v46, 0x8000100u);
  if (!v48) {
    goto LABEL_37;
  }
  CFStringRef v56 = v48;
  CFURLRef v57 = *(const __CFURL **)(*(void *)(a1 + 16) + 24);
  if (!v57 || (CFURLRef v58 = CFURLCreateCopyAppendingPathComponent(v47, v57, v48, 1u)) == 0)
  {
    CFRelease(v56);
    goto LABEL_37;
  }
  CFURLRef v66 = v58;
  uint64_t v67 = CGDisplayListCreateWithURL(v58, v59, v60, v61, v62, v63, v64, v65);
  CFRelease(v66);
  CFRelease(v56);
  if (!v67)
  {
LABEL_37:
    CGPostError((uint64_t)"%s: Failed to read softmask display list", v49, v50, v51, v52, v53, v54, v55, (char)"virtual BOOL DisplayListXMLParserResourceSoftMask::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  uint64_t v81 = off_1ED09B108;
  v79[0] = v83[0];
  v79[1] = v83[1];
  v79[2] = v83[2];
  long long v80 = xmmword_1ED09B0F8;
  if (v43) {
    double v68 = (const void *)v43[2];
  }
  else {
    double v68 = 0;
  }
  uint64_t v69 = (const void *)CGSoftMaskCreate(v67, v79, v68, 0, (uint64_t)&v80, v53, v54, v55, v84[0], v84[1], v84[2], v84[3]);
  BOOL v44 = v69 != 0;
  if (v69)
  {
    uint64_t v77 = v69;
    CG::DisplayListResourcePattern::setPattern(v11, v69);
    CFRelease(v77);
  }
  else
  {
    CGPostError((uint64_t)"%s: Failed to create CGSoftMaskRef", v70, v71, v72, v73, v74, v75, v76, (char)"virtual BOOL DisplayListXMLParserResourceSoftMask::parseAttributes(const DLXMLAttributes &)");
  }
  return v44;
}

BOOL DisplayListXMLParserResourceDisplayList::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  BOOL result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v11 = *(const void **)(a1 + 8);
    if (v11) {
    else
    }
      uint64_t v12 = 0;
    uint64_t v13 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "fileName");
    if (v13)
    {
      CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v22 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, 0x8000100u);
      if (v22)
      {
        CFStringRef v23 = v22;
        CFURLRef v24 = *(const __CFURL **)(*(void *)(a1 + 16) + 24);
        if (v24)
        {
          CFURLRef v25 = CFURLCreateCopyAppendingPathComponent(v21, v24, v22, 1u);
          if (v25)
          {
            CFURLRef v33 = v25;
            uint64_t v34 = (const void *)CGDisplayListCreateWithURL(v25, v26, v27, v28, v29, v30, v31, v32);
            if (v34)
            {
              uint64_t v35 = v34;
              CG::DisplayListResourcePattern::setPattern(v12, v34);
              CFRelease(v35);
            }
            else
            {
              CFURLGetFileSystemRepresentation(v33, 1u, buffer, 1024);
              CGPostError((uint64_t)"Failed to parse displayList resource from URL: %s", v36, v37, v38, v39, v40, v41, v42, (char)buffer);
            }
            CFRelease(v33);
          }
        }
        CFRelease(v23);
      }
      return 1;
    }
    else
    {
      CGPostError((uint64_t)"Failed to parse \"fileName\" attribute", v14, v15, v16, v17, v18, v19, v20, v43);
      return 0;
    }
  }
  return result;
}

uint64_t boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::~adjacency_list(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    MEMORY[0x18532A2A0](v2, 0xC400A2AC0F1);
  }
  BOOL v4 = (void **)(a1 + 24);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100](&v4);
  std::__list_imp<long long>::clear((void *)a1);
  return a1;
}

uint64_t DisplayListXMLParserResource::parseChildElements(DisplayListXMLParserResource *this, _xmlNode *a2)
{
  return 1;
}

void DisplayListXMLParserResourceCFTypeRef::~DisplayListXMLParserResourceCFTypeRef(DisplayListXMLParserResourceCFTypeRef *this)
{
}

void DisplayListXMLParserResourceDisplayList::~DisplayListXMLParserResourceDisplayList(DisplayListXMLParserResourceDisplayList *this)
{
}

void DisplayListXMLParserResourceFunction::~DisplayListXMLParserResourceFunction(DisplayListXMLParserResourceFunction *this)
{
}

void _softMaskReleaseInfoCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void _softMaskDrawSoftMaskCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      CGDisplayListDrawInContext(a1, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void DisplayListXMLParserResourceSoftMask::~DisplayListXMLParserResourceSoftMask(DisplayListXMLParserResourceSoftMask *this)
{
}

void DisplayListXMLParserResourceStyle::~DisplayListXMLParserResourceStyle(DisplayListXMLParserResourceStyle *this)
{
}

void _patternReleaseInfoCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void _patternDrawPatternCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      CGDisplayListDrawInContext(a1, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void DisplayListXMLParserResourcePattern::~DisplayListXMLParserResourcePattern(DisplayListXMLParserResourcePattern *this)
{
}

uint64_t DisplayListXMLParserResourceGradient::parseChildElements(DisplayListXMLParserResourceGradient *this, _xmlNode *a2)
{
  uint64_t v12 = v4[3];
  if (!v12)
  {
    CFURLRef v24 = "DisplayListResourceGradient returned NULL for getColorSpaceResource()";
LABEL_16:
    CGPostError((uint64_t)v24, v5, v6, v7, v8, v9, v10, v11, v25[0]);
    return 0;
  }
  uint64_t v13 = *(void **)(v12 + 16);
  if (!v13)
  {
    CFURLRef v24 = "DisplayListResourceColorSpace returned NULL for getColorSpace()";
    goto LABEL_16;
  }
  uint64_t v14 = v4;
  memset(v26, 0, sizeof(v26));
  CG::DisplayListXMLHelper::parseCGFloatArrayFromElement((uint64_t)a2, (xmlChar *)"components", (uint64_t)v26);
  memset(v25, 0, sizeof(v25));
  CG::DisplayListXMLHelper::parseCGFloatArrayFromElement((uint64_t)a2, (xmlChar *)"locations", (uint64_t)v25);
  uint64_t v15 = (void *)v26[0];
  uint64_t v16 = (void *)v25[0];
  uint64_t v20 = CGGradientCreateWithColorComponentsAndOptions(v13, v26[0], v25[0], *((void *)this + 3), 0, v17, v18, v19);
  if (v20)
  {
    CFAllocatorRef v21 = (const void *)v20;
    CFStringRef v22 = (const void *)v14[2];
    if (v22 != v21)
    {
      if (v22) {
        CFRelease(v22);
      }
      CFRetain(v21);
      v14[2] = v21;
    }
    CFRelease(v21);
  }
  if (v16) {
    operator delete(v16);
  }
  if (v15) {
    operator delete(v15);
  }
  return 1;
}

void sub_184DE306C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (v12) {
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DisplayListXMLParserResourceGradient::~DisplayListXMLParserResourceGradient(DisplayListXMLParserResourceGradient *this)
{
}

void DisplayListXMLParserResourceShading::~DisplayListXMLParserResourceShading(DisplayListXMLParserResourceShading *this)
{
}

void CG::DisplayListResourceImage::setImage(CG::DisplayListResourceImage *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 2);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    if (cf) {
      CFRetain(cf);
    }
    *((void *)this + 2) = cf;
  }
}

void *___ZN33DisplayListXMLParserResourceImage15parseAttributesERKNSt3__13mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_NS0_4lessIS7_EENS5_INS0_4pairIKS7_S7_EEEEEE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::f = result;
  return result;
}

void *___ZN33DisplayListXMLParserResourceImage15parseAttributesERKNSt3__13mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_NS0_4lessIS7_EENS5_INS0_4pairIKS7_S7_EEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithURL");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithURL");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithURL");
  }
  DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::f = result;
  return result;
}

void DisplayListXMLParserResourceImage::~DisplayListXMLParserResourceImage(DisplayListXMLParserResourceImage *this)
{
}

void DisplayListXMLParserResourceFont::~DisplayListXMLParserResourceFont(DisplayListXMLParserResourceFont *this)
{
}

BOOL DisplayListXMLParserResourceDash::parseChildElements(DisplayListXMLParserResourceDash *this, _xmlNode *a2)
{
  BOOL v4 = (const void *)*((void *)this + 1);
  if (v4) {
  else
  }
    uint64_t v5 = 0;
  uint64_t v6 = *((void *)this + 4);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (double *)malloc_type_malloc(8 * v6, 0x705560E0uLL);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  children = a2->children;
  if (!children) {
    goto LABEL_31;
  }
  while (xmlStrcmp(children->name, (const xmlChar *)"pattern"))
  {
    children = children->next;
    if (!children) {
      goto LABEL_31;
    }
  }
  uint64_t v17 = (uint64_t)children->children;
  if (!v17 || *(_DWORD *)(v17 + 8) != 3)
  {
    CGPostError((uint64_t)"XML node of dash resource does not contain a \"pattern\" child", v17, v10, v11, v12, v13, v14, v15, v26);
    goto LABEL_31;
  }
  BOOL String = (char *)xmlNodeListGetString(*(xmlDocPtr *)(v17 + 64), (const xmlNode *)v17, 1);
  if (!String) {
    goto LABEL_31;
  }
  std::string::basic_string[abi:fe180100]<0>(v53, String);
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v49, "[ ]");
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v44, (uint64_t *)v53, &v49);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v36, (uint64_t)v44);
  for (unint64_t i = 0; ; ++i)
  {
    boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)&v27, (uint64_t)v44);
    if (v33) {
      break;
    }
    if (!v42) {
      goto LABEL_41;
    }
LABEL_21:
    unint64_t v20 = *((void *)this + 4);
    if (v35 < 0) {
      operator delete(__p);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (i > v20) {
      goto LABEL_47;
    }
    if (!v42) {
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    }
    v8[i] = std::stod(&v43, 0);
    boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::increment((uint64_t)v36);
  }
  if (!v42 || v31 != v40 || v32 != v41) {
    goto LABEL_21;
  }
LABEL_41:
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
LABEL_47:
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete((void *)v49);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
LABEL_31:
  uint64_t v21 = *((void *)this + 4);
  BOOL v16 = v21 != 0;
  if (v21)
  {
    uint64_t v22 = *((void *)this + 3);
    CFStringRef v23 = (atomic_uint *)malloc_type_calloc(1uLL, 8 * v21 + 24, 0x64A29F66uLL);
    *CFStringRef v23 = 1;
    *((void *)v23 + 1) = v22;
    *((void *)v23 + 2) = v21;
    memcpy(v23 + 6, v8, 8 * v21);
    CFURLRef v24 = (atomic_uint *)v5[2];
    if (v24 != v23)
    {
      if (v24 && atomic_fetch_add_explicit(v24, 0xFFFFFFFF, memory_order_relaxed) == 1) {
        free(v24);
      }
      atomic_fetch_add_explicit(v23, 1u, memory_order_relaxed);
      v5[2] = v23;
    }
    if (atomic_fetch_add_explicit(v23, 0xFFFFFFFF, memory_order_relaxed) == 1) {
      free(v23);
    }
  }
  free(v8);
  return v16;
}

void sub_184DE368C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a38);
  boost::char_separator<char,std::char_traits<char>>::~char_separator(v38 - 168);
  if (*(char *)(v38 - 81) < 0) {
    operator delete(*(void **)(v38 - 104));
  }
  _Unwind_Resume(a1);
}

uint64_t boost::char_separator<char,std::char_traits<char>>::char_separator(uint64_t a1, char *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::string::basic_string[abi:fe180100]<0>((void *)(a1 + 24), a2);
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  return a1;
}

void sub_184DE3724(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  *(void *)a1 = v5;
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  *(void *)(a1 + 8) = (char *)v7 + v6;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 32) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a3 + 24);
    *(void *)(a1 + 56) = *((void *)a3 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = *((void *)a3 + 6);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a3 + 56);
  *(void *)(a1 + 64) = v11;
  return a1;
}

void sub_184DE380C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string v5 = *(std::string *)(a2 + 16);
  }
  if (*(char *)(a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else {
    std::string __p = *(std::string *)(a2 + 40);
  }
  uint64_t v7 = *(void *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a1, (long long *)&v5, *(std::string::value_type **)a2, *(std::string::value_type **)(a2 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v4 = (void *)v5.__r_.__value_.__r.__words[0];
    operator delete(v4);
  }
}

void sub_184DE390C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string v5 = *(std::string *)(a2 + 16);
  }
  if (*(char *)(a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else {
    std::string __p = *(std::string *)(a2 + 40);
  }
  uint64_t v7 = *(void *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a1, (long long *)&v5, *(std::string::value_type **)(a2 + 8), *(std::string::value_type **)(a2 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v4 = (void *)v5.__r_.__value_.__r.__words[0];
    operator delete(v4);
  }
}

void sub_184DE3A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::increment(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80)) {
    __assert_rtn("increment", "token_iterator.hpp", 54, "valid_");
  }
  uint64_t result = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(a1, (std::string::value_type **)(a1 + 64), *(std::string::value_type **)(a1 + 72), (std::string *)(a1 + 88));
  *(unsigned char *)(a1 + 80) = result;
  return result;
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t boost::char_separator<char,std::char_traits<char>>::~char_separator(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void CG::DisplayListResourceDash::setDash(uint64_t a1, atomic_uint *a2)
{
  CFTypeRef v3 = *(atomic_uint **)(a1 + 16);
  if (v3 != a2)
  {
    if (v3 && atomic_fetch_add_explicit(v3, 0xFFFFFFFF, memory_order_relaxed) == 1) {
      free(v3);
    }
    if (a2) {
      atomic_fetch_add_explicit(a2, 1u, memory_order_relaxed);
    }
    *(void *)(a1 + 16) = a2;
  }
}

uint64_t boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  char v8 = *a2;
  if (*(_DWORD *)(a1 + 52)) {
    goto LABEL_2;
  }
  if (v8 == a3) {
    return 0;
  }
  while (1)
  {
    BOOL is_dropped = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v8);
    char v8 = *a2;
    if (!is_dropped) {
      break;
    }
    *a2 = ++v8;
    if (v8 == a3)
    {
      char v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8))
      {
        if (*(unsigned char *)(a1 + 56))
        {
          ++*a2;
          *(unsigned char *)(a1 + 56) = 0;
LABEL_25:
          std::string::__assign_trivial[abi:fe180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(unsigned char *)(a1 + 56) || !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2))
      {
        BOOL v13 = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2);
        uint64_t v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          char v8 = v14;
        }
        while (v14 != a3
             && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v14)
             && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
        {
          uint64_t v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(unsigned char *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(unsigned char *)(a1 + 56))
    {
      uint64_t v12 = 1;
      *(unsigned char *)(a1 + 56) = 1;
      std::string::__assign_trivial[abi:fe180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    BOOL is_kept = boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8);
    uint64_t v11 = *a2;
    if (is_kept)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3
           && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v11)
           && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
      {
        uint64_t v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_dropped(uint64_t a1, unsigned int a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 49)) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    int v3 = __maskrune(a2, 0x4000uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a2 + 60) & 0x4000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_kept(uint64_t a1, unsigned int a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    int v3 = __maskrune(a2, 0x2000uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a2 + 60) & 0x2000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

void std::string::__assign_trivial[abi:fe180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    char v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  char v8 = this;
  if ((v12 & 0x80) != 0) {
    char v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    char v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(uint64_t a1, long long *a2, std::string::value_type *a3, std::string::value_type *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v8;
  }
  uint64_t v9 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = *((void *)a2 + 6);
  char v12 = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 64) = a3;
  *(unsigned char *)(a1 + 56) = v12;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 72) = a4;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (a3 == a4) {
    char v13 = 0;
  }
  else {
    char v13 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(a1, (std::string::value_type **)(a1 + 64), a4, (std::string *)(a1 + 88));
  }
  *(unsigned char *)(a1 + 80) = v13;
  return a1;
}

void sub_184DE4068(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void DisplayListXMLParserResourceDash::~DisplayListXMLParserResourceDash(DisplayListXMLParserResourceDash *this)
{
}

CGColorSpaceRef DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(uint64_t a1, char *a2)
{
  BOOL v2 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a1, a2);
  if (!v2) {
    return 0;
  }
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 0x8000100u);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  CGColorSpaceRef v5 = CGColorSpaceCreateWithName(v3);
  CFRelease(v4);
  return v5;
}

void DisplayListXMLParserResourceColorSpace::~DisplayListXMLParserResourceColorSpace(DisplayListXMLParserResourceColorSpace *this)
{
}

void DisplayListXMLParserResourceColor::~DisplayListXMLParserResourceColor(DisplayListXMLParserResourceColor *this)
{
}

uint64_t DisplayListXMLParserResourceClip::parseChildElements(DisplayListXMLParserResourceClip *this, _xmlNode *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (const void *)*((void *)this + 1);
  if (v4) {
  else
  }
    CGColorSpaceRef v5 = 0;
  uint64_t v6 = (char *)malloc_type_malloc(0x98uLL, 0x2062DE7BuLL);
  *(_DWORD *)uint64_t v6 = 1;
  *((_DWORD *)v6 + 1) = 0;
  *((_DWORD *)v6 + 2) = 0;
  *(CGRect *)(v6 + 48) = CGRectInfinite;
  *(CGRect *)(v6 + 80) = CGRectInfinite;
  *(CGRect *)(v6 + 16) = CGRectInfinite;
  *((void *)v6 + 14) = 3;
  *((void *)v6 + 15) = 0;
  *((void *)v6 + 16) = 0;
  CGClipStackAddRect((uint64_t)v6, 1, *((CGFloat *)this + 3), *((CGFloat *)this + 4), *((CGFloat *)this + 5), *((CGFloat *)this + 6));
  children = a2->children;
  if (!children) {
    goto LABEL_58;
  }
  while (xmlStrcmp(children->name, (const xmlChar *)"stack"))
  {
    children = children->next;
    if (!children) {
      goto LABEL_58;
    }
  }
  long long v8 = children->children;
  if (!v8)
  {
LABEL_58:
    CG::DisplayListResourceClip::setClipStack((uint64_t)v5, (uint64_t)v6);
    CGClipStackRelease(v6);
    return 1;
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (v8->type != XML_ELEMENT_NODE)
  {
LABEL_45:
    long long v8 = v8->next;
    if (!v8) {
      goto LABEL_58;
    }
  }
  if (!xmlStrcmp(v8->name, (const xmlChar *)"clip"))
  {
    CG::DisplayListXMLHelper::parseAttributesFromNode(v44, v8);
    std::string::basic_string[abi:fe180100]<0>(&__p, "type");
    BOOL v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v44, &__p);
    if (SHIBYTE(v48) < 0) {
      operator delete(__p);
    }
    if (&v45 == v16) {
      goto LABEL_44;
    }
    std::string __p = "none";
    LODWORD(v47) = -1;
    char v48 = "rect";
    LODWORD(v49) = 0;
    char v50 = "glyphs_obsolete";
    int v51 = 1;
    char v52 = "path";
    int v53 = 2;
    char v54 = "mask";
    int v55 = 3;
    CFStringRef v56 = "text";
    int v57 = 4;
    uint64_t v17 = (const char *)(v16 + 7);
    if (*((char *)v16 + 79) < 0) {
      uint64_t v17 = *(const char **)v17;
    }
    unint64_t v18 = 0;
    BOOL v19 = 1;
    unint64_t v20 = &v47;
    while (strcmp(v17, *((const char **)v20 - 1)))
    {
      BOOL v19 = v18 < 5;
      v20 += 2;
      if (++v18 == 6) {
        goto LABEL_44;
      }
    }
    if (!v19) {
      goto LABEL_44;
    }
    switch(*(_DWORD *)v20)
    {
      case 0:
        CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v44, "rect", (uint64_t)&__p);
        char v28 = (char *)CGClipCreateWithRect((CGAffineTransform *)&CGAffineTransformIdentity, 1, *(CGFloat *)&__p, v47, *(CGFloat *)&v48, v49);
        goto LABEL_24;
      case 2:
        uint64_t v29 = v8->children;
        if (!v29) {
          goto LABEL_29;
        }
        break;
      case 3:
        if ((CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v44, "rect", (uint64_t)v43) & 1) == 0) {
          goto LABEL_44;
        }
        if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes((uint64_t)v44, "matrix", (uint64_t)&__p)) {
          goto LABEL_44;
        }
        char v30 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes((uint64_t)v44, "maskImage");
        if (!v30) {
          goto LABEL_44;
        }
        CFStringRef v31 = CFStringCreateWithCString(alloc, v30, 0x8000100u);
        if (v31)
        {
          CFURLRef v32 = CFURLCreateCopyAppendingPathComponent(alloc, *(CFURLRef *)(*((void *)this + 2) + 24), v31, 0);
          if (v32)
          {
            if (DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate != -1) {
              dispatch_once(&DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate, &__block_literal_global_60);
            }
            char v33 = (const void *)DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::f(v32, 0);
            if (v33)
            {
              if (DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate != -1) {
                dispatch_once(&DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate, &__block_literal_global_64_4336);
              }
              uint64_t v34 = (const void *)DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::f(v33, 0, 0);
              if (v34)
              {
                uint64_t v40 = v34;
                uint64_t v41 = v33;
                char v35 = CGClipMaskCreate(&CGAffineTransformIdentity, v34, v43[0], v43[1], v43[2], v43[3]);
                if (v35)
                {
                  uint64_t v36 = v35;
                  char v28 = (char *)CGClipCreateWithMask((atomic_uint *)v35, 1);
                  CGClipMaskRelease(v36);
                }
                else
                {
                  char v28 = 0;
                }
                char v33 = v41;
                CFRelease(v40);
              }
              else
              {
                char v28 = 0;
              }
              CFRelease(v33);
            }
            else
            {
              char v28 = 0;
            }
            CFRelease(v32);
          }
          else
          {
            char v28 = 0;
          }
          CFRelease(v31);
        }
        else
        {
          char v28 = 0;
        }
        goto LABEL_24;
      case 4:
        CGPostError((uint64_t)"%s: kCGClipTypeTextClipping is unimplemented", (uint64_t)v21, v22, v23, v24, v25, v26, v27, (char)"CGClipRef DisplayListXMLParserResourceClip::parseClipNode(xmlNodePtr)");
        goto LABEL_44;
      default:
        goto LABEL_44;
    }
    while (xmlStrcmp(v29->name, (const xmlChar *)"cgpath"))
    {
      uint64_t v29 = v29->next;
      if (!v29)
      {
LABEL_29:
        CGPostError((uint64_t)"%s: Failed to get \"%s\" node", (uint64_t)v21, v22, v23, v24, v25, v26, v27, (char)"CGClipRef DisplayListXMLParserResourceClip::parseClipNode(xmlNodePtr)");
        goto LABEL_44;
      }
    }
    char v37 = (const void *)CG::DisplayListXMLHelper::parseCGPathFromNode((CG::DisplayListXMLHelper *)v29, v21);
    uint64_t v38 = v37;
    if (v37)
    {
      char v28 = (char *)CGClipCreateWithPath(v37, 0, 1, 1.0);
      CFRelease(v38);
LABEL_24:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v45);
      if (v28)
      {
        CGClipStackAddClip((uint64_t)v6, (uint64_t)v28);
        CGClipRelease(v28);
      }
    }
    else
    {
LABEL_44:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v45);
    }
    goto LABEL_45;
  }
  CGPostError((uint64_t)"%s: Unexpected child node name. Expected \"clip\", got \"%s\"", v9, v10, v11, v12, v13, v14, v15, (char)"virtual BOOL DisplayListXMLParserResourceClip::parseChildElements(xmlNodePtr)");
  return 0;
}

void sub_184DE46DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

void *___ZN32DisplayListXMLParserResourceClip13parseClipNodeEP8_xmlNode_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::f = (uint64_t (*)(void, void, void))result;
  return result;
}

void *___ZN32DisplayListXMLParserResourceClip13parseClipNodeEP8_xmlNode_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithURL");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithURL");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithURL");
  }
  DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::f = (uint64_t (*)(void, void))result;
  return result;
}

void DisplayListXMLParserResourceClip::~DisplayListXMLParserResourceClip(DisplayListXMLParserResourceClip *this)
{
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (*this && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

uint64_t boost::shared_array<boost::default_color_type>::operator[](uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    CFStringRef v3 = "px != 0";
    int v4 = 199;
    goto LABEL_6;
  }
  if (a2 < 0)
  {
    CFStringRef v3 = "i >= 0";
    int v4 = 200;
LABEL_6:
    __assert_rtn("operator[]", "shared_array.hpp", v4, v3);
  }
  return a1 + 4 * a2;
}

void boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,unsigned long>>,boost::detail::nontruth2>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  char v30 = 0;
  unint64_t i = 0;
  unint64_t v32 = 0;
  *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, a2) = 1;
  uint64_t v7 = *(void *)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 32) - v7) >> 3) <= a2) {
LABEL_20:
  }
    __break(1u);
  long long v8 = (uint64_t *)(v7 + 56 * a2);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  unint64_t v33 = a2;
  char v34 = 0;
  *(void *)&long long v37 = v10;
  *((void *)&v37 + 1) = a2;
  *(void *)&long long v38 = v9;
  *((void *)&v38 + 1) = a2;
  uint64_t v11 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v30, (uint64_t)&v33);
  for (unint64_t i = v11; v30 != v11; *(void *)(v25 + 16) = v28)
  {
    uint64_t v12 = *((void *)v11 - 9);
    if (*(v11 - 64)) {
      *(v11 - 64) = 0;
    }
    uint64_t v13 = (uint64_t *)*((void *)v11 - 4);
    unint64_t v14 = *((void *)v11 - 3);
    BOOL v16 = (uint64_t *)*((void *)v11 - 2);
    unint64_t v15 = *((void *)v11 - 1);
    unint64_t i = v11 - 72;
    v11 -= 72;
    while (v13 != v16)
    {
      unint64_t v17 = *v13;
      int v18 = *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, *v13);
      if (v18)
      {
        if (v18 == 1) {
          boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>::back_edge<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS> const>();
        }
        v13 += 2;
      }
      else
      {
        uint64_t v19 = *v13;
        uint64_t v20 = v13[1] + 32;
        unint64_t v33 = v12;
        *(void *)&long long v35 = v14;
        *((void *)&v35 + 1) = v19;
        char v34 = 1;
        uint64_t v36 = v20;
        *(void *)&long long v37 = v13 + 2;
        *((void *)&v37 + 1) = v14;
        *(void *)&long long v38 = v16;
        *((void *)&v38 + 1) = v15;
        if ((unint64_t)v11 >= v32)
        {
          uint64_t v11 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v30, (uint64_t)&v33);
        }
        else
        {
          *(void *)uint64_t v11 = v12;
          v11[8] = 0;
          if (v34)
          {
            long long v21 = v35;
            *((void *)v11 + 4) = v36;
            *((_OWORD *)v11 + 1) = v21;
            v11[8] = 1;
          }
          long long v22 = v37;
          *(_OWORD *)(v11 + 56) = v38;
          *(_OWORD *)(v11 + 40) = v22;
          v11 += 72;
        }
        unint64_t i = v11;
        *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v17) = 1;
        uint64_t v23 = *(void *)(a1 + 24);
        if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 32) - v23) >> 3) <= v17) {
          goto LABEL_20;
        }
        uint64_t v24 = (uint64_t **)(v23 + 56 * v17);
        uint64_t v13 = *v24;
        BOOL v16 = v24[1];
        unint64_t v15 = v17;
        uint64_t v12 = v17;
        unint64_t v14 = v17;
      }
    }
    *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v12) = 4;
    uint64_t v25 = *(void *)(a3 + 8);
    uint64_t v26 = operator new(0x18uLL);
    CFTypeRef v26[2] = v12;
    *uint64_t v26 = v25;
    uint64_t v27 = *(void **)(v25 + 8);
    v26[1] = v27;
    *uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v25 + 16) + 1;
    *(void *)(v25 + 8) = v26;
  }
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:fe180100](&v30);
}

void sub_184DE4C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:fe180100]((char **)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>(void **a1, uint64_t a2)
{
  CFStringRef v3 = (char *)*a1;
  BOOL v2 = (char *)a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - v3) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v8 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v9 = (char *)operator new(72 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[72 * v4];
  *(void *)uint64_t v10 = *(void *)a2;
  v10[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v11 = &v9[72 * v4];
    *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v11 + 4) = *(void *)(a2 + 32);
    v10[8] = 1;
  }
  uint64_t v12 = &v9[72 * v8];
  uint64_t v13 = &v9[72 * v4];
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a2 + 56);
  unint64_t v14 = v10 + 72;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      BOOL v16 = &v10[v15];
      unint64_t v17 = &v2[v15];
      *((void *)v16 - 9) = *(void *)&v2[v15 - 72];
      *(v16 - 64) = 0;
      if (v2[v15 - 64])
      {
        long long v18 = *(_OWORD *)(v17 - 56);
        *((void *)v16 - 5) = *((void *)v17 - 5);
        *(_OWORD *)(v16 - 56) = v18;
        *(v16 - 64) = 1;
      }
      long long v19 = *((_OWORD *)v17 - 1);
      *((_OWORD *)v16 - 2) = *((_OWORD *)v17 - 2);
      *((_OWORD *)v16 - 1) = v19;
      v15 -= 72;
    }
    while (&v2[v15] != v3);
    uint64_t v20 = &v10[v15];
    BOOL v2 = (char *)*a1;
    long long v21 = (char *)a1[1];
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v12;
    while (v21 != v2)
    {
      if (*(v21 - 64)) {
        *(v21 - 64) = 0;
      }
      v21 -= 72;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v14;
}

void boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>::back_edge<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS> const>()
{
  std::string::basic_string[abi:fe180100]<0>(&v1, "The graph must be a DAG.");
  std::logic_error::logic_error(&v0, &v1);
  v0.__vftable = (std::logic_error_vtbl *)&unk_1ED094FA8;
  if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1.__r_.__value_.__l.__data_);
  }
  v0.__vftable = (std::logic_error_vtbl *)&unk_1ED094FF0;
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)"/AppleInternal/Library/BuildRoots/9f16a0bb-a2ea-11ef-bacb-1e"
                                                            "361567c031/Applications/Xcode.app/Contents/Developer/Platfor"
                                                            "ms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sd"
                                                            "k/usr/local/include/boost/graph/topological_sort.hpp";
  v1.__r_.__value_.__l.__size_ = (std::string::size_type)"void boost::topo_sort_visitor<std::front_insert_iterator<std::l"
                                                         "ist<unsigned long>>>::back_edge(const Edge &, Graph &) [OutputI"
                                                         "terator = std::front_insert_iterator<std::list<unsigned long>>,"
                                                         " Edge = boost::detail::edge_desc_impl<boost::bidirectional_tag,"
                                                         " unsigned long>, Graph = const boost::adjacency_list<boost::vec"
                                                         "S, boost::vecS, boost::bidirectionalS, boost::property<boost::v"
                                                         "ertex_color_t, boost::default_color_type>>]";
  v1.__r_.__value_.__r.__words[2] = 42;
  boost::throw_exception<boost::not_a_dag>(&v0, (int8x16_t *)&v1);
}

void std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:fe180100](char **a1)
{
  BOOL v2 = *a1;
  if (v2)
  {
    for (unint64_t i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 64)) {
        *(i - 64) = 0;
      }
    }
    a1[1] = v2;
    operator delete(v2);
  }
}

void boost::throw_exception<boost::not_a_dag>(const std::logic_error *a1, int8x16_t *a2)
{
  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(void *)exception = &unk_1ED094F30;
  std::logic_error::logic_error((std::logic_error *)(exception + 8), a1);
  *((void *)exception + 5) = 0;
  *((void *)exception + 6) = 0;
  *(void *)exception = &unk_1ED094EB8;
  *((void *)exception + 1) = &unk_1ED094EE8;
  *((void *)exception + 3) = &unk_1ED094F10;
  *((void *)exception + 4) = 0;
  *((_DWORD *)exception + 14) = a2[1].i32[0];
  *(int8x16_t *)(exception + 40) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<boost::not_a_dag>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1ED094FD0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x18532A090](a1 + 8);
  return a1;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::not_a_dag>::~wrapexcept(void *a1)
{
  *a1 = &unk_1ED094FD0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x18532A090](a1 - 2);

  JUMPOUT(0x18532A2A0);
}

{
  uint64_t vars8;

  *a1 = &unk_1ED094FD0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  JUMPOUT(0x18532A090);
}

void non-virtual thunk to'boost::wrapexcept<boost::not_a_dag>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1ED094FD0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x18532A090](a1);

  JUMPOUT(0x18532A2A0);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1ED094FD0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  JUMPOUT(0x18532A090);
}

void boost::wrapexcept<boost::not_a_dag>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1ED094FD0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x18532A090](a1 + 8);

  JUMPOUT(0x18532A2A0);
}

void boost::wrapexcept<boost::not_a_dag>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::not_a_dag>::wrapexcept((uint64_t)exception, a1);
}

void sub_184DE5378(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::not_a_dag>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1ED094F30;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1ED094FF0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1ED094FD0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1ED094EB8;
  *(void *)(a1 + 8) = &unk_1ED094EE8;
  *(void *)(a1 + 24) = &unk_1ED094F10;
  return a1;
}

void boost::not_a_dag::~not_a_dag(boost::not_a_dag *this)
{
  MEMORY[0x18532A090](this);

  JUMPOUT(0x18532A2A0);
}

void boost::wrapexcept<boost::not_a_dag>::clone()
{
}

void sub_184DE56D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void boost::bad_graph::~bad_graph(boost::bad_graph *this)
{
  MEMORY[0x18532A090](this);

  JUMPOUT(0x18532A2A0);
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"N5boost21checked_array_deleterINS_18default_color_typeEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    JUMPOUT(0x18532A280);
  }
  return result;
}

void boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::~sp_counted_impl_pd()
{
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    CFStringRef v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; CFStringRef v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          CFStringRef v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:fe180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    CFStringRef v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        CFStringRef v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:fe180100](uint64_t a1)
{
  std::string v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:fe180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

BOOL CG::DisplayListResourceCFTypeRef::_equal_to(CG::DisplayListResourceCFTypeRef *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = (const void *)*((void *)this + 2);
  }
  long long v5 = (const void *)*((void *)a2 + 2);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || !CFEqual(v4, v5)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

void CG::DisplayListResourceCFTypeRef::~DisplayListResourceCFTypeRef(CG::DisplayListResourceCFTypeRef *this)
{
  CG::DisplayListResourceCFTypeRef::~DisplayListResourceCFTypeRef(this);

  JUMPOUT(0x18532A2A0);
}

{
  const void *v1;

  *(void *)this = &unk_1ED094E28;
  std::string v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL CG::DisplayListResourceDisplayList::_equal_to(CG::DisplayListResourceDisplayList *this, const CG::DisplayListResource *a2, uint64_t a3)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v6 = *((void *)this + 2);
  }
  uint64_t v7 = *((void *)a2 + 2);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_7;
    }
    return 0;
  }
  if (!v7
    || v6 != v7
    && !CG::DisplayList::isEqualTo((CG::DisplayList *)(v6 + 16), (const CG::DisplayList *)(v7 + 16), a3))
  {
    return 0;
  }
LABEL_7:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

BOOL CG::DisplayListResourceFunction::_equal_to(CG::DisplayListResourceFunction *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || *(_DWORD *)(v4 + 16) != *(_DWORD *)(v5 + 16)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

void CG::DisplayListResourceFunction::~DisplayListResourceFunction(CG::DisplayListResourceFunction *this)
{
  *(void *)this = &unk_1ED094D48;
  std::string v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }

  JUMPOUT(0x18532A2A0);
}

{
  const void *v1;

  *(void *)this = &unk_1ED094D48;
  std::string v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL CG::DisplayListResourceSoftMask::_equal_to(CG::DisplayListResourceSoftMask *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || *(_DWORD *)(v4 + 16) != *(_DWORD *)(v5 + 16)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

void *CG::DisplayListResourceSoftMask::getChildResources@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this[3];
  if (v2)
  {
    uint64_t v4 = operator new(8uLL);
    *a2 = v4;
    *uint64_t v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceGradient::_equal_to(CG::DisplayListResourceGradient *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || *(_DWORD *)(v4 + 16) != *(_DWORD *)(v5 + 16)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

void *CG::DisplayListResourceGradient::getChildResources@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this[3];
  if (v2)
  {
    uint64_t v4 = operator new(8uLL);
    *a2 = v4;
    *uint64_t v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceFont::_equal_to(CG::DisplayListResourceFont *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v4)
  {
    if (v5)
    {
      int v6 = *(_DWORD *)(v4 + 24);
      if (v6
        || (atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 24), (unsigned int *)&v6, ~atomic_fetch_add_explicit(get_identifier_identifier, 1u, memory_order_relaxed), memory_order_relaxed, memory_order_relaxed), v6 = *(_DWORD *)(v4 + 24), (uint64_t v5 = *((void *)a2 + 2)) != 0))
      {
        int v7 = *(_DWORD *)(v5 + 24);
        if (!v7)
        {
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v5 + 24), (unsigned int *)&v7, ~atomic_fetch_add_explicit(get_identifier_identifier, 1u, memory_order_relaxed), memory_order_relaxed, memory_order_relaxed);
          int v7 = *(_DWORD *)(v5 + 24);
        }
      }
      else
      {
        int v7 = 0;
      }
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_13:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

BOOL CG::DisplayListResourceDash::_equal_to(CG::DisplayListResourceDash *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v4)
  {
    if (!v5 || CGDashCompare(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

void CG::DisplayListResourceDash::~DisplayListResourceDash(CG::DisplayListResourceDash *this)
{
  *(void *)this = &unk_1ED094AE8;
  std::string v1 = (void *)*((void *)this + 2);
  if (v1 && atomic_fetch_add_explicit((atomic_uint *volatile)v1, 0xFFFFFFFF, memory_order_relaxed) == 1) {
    free(v1);
  }

  JUMPOUT(0x18532A2A0);
}

{
  void *v1;

  *(void *)this = &unk_1ED094AE8;
  std::string v1 = (void *)*((void *)this + 2);
  if (v1)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)v1, 0xFFFFFFFF, memory_order_relaxed) == 1) {
      free(v1);
    }
  }
}

BOOL CG::DisplayListResourceColorSpace::_equal_to(CG::DisplayListResourceColorSpace *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8))|| *((void *)this + 2) != *((void *)a2 + 2))
  {
    return 0;
  }

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

BOOL CG::DisplayListResourceClip::_equal_to(CG::DisplayListResourceClip *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || !CGClipStackEquivalent(v4, v5)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

uint64_t boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(uint64_t a1)
{
  CFStringRef v3 = (void **)(a1 + 24);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100](&v3);
  std::__list_imp<long long>::clear((void *)a1);
  return a1;
}

uint64_t boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    *(_OWORD *)uint64_t v13 = *a2;
    int v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *a2;
    int v6 = v5 + 16;
  }
  a1[1] = v6;
  return 1;
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(56 * a1);
}

void CG::DisplayListXMLDeserializer::~DisplayListXMLDeserializer(CG::DisplayListXMLDeserializer *this)
{
  CG::DisplayListXMLDeserializer::~DisplayListXMLDeserializer(this);

  JUMPOUT(0x18532A2A0);
}

{
  const void *v2;
  const void *v3;

  *(void *)this = &unk_1ED094CC0;
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  std::__tree<unsigned long>::destroy(*((void **)this + 8));
  std::__tree<unsigned long>::destroy(*((void **)this + 5));
  *(void *)this = &unk_1ED094A58;
  CFStringRef v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
}

void CIDFontType2::emit_definitions(CIDFontType2 *this)
{
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char **)((char *)this + 120);
    CFStringRef v3 = (uint64_t *)*((void *)this + 1);
    uint64_t v4 = *v3;
    uint64_t v5 = PDFXRefTableAddObject(*(void **)(*v3 + 464));
    PDFDocumentBeginObject(v4, *((void *)this + 14), v6, v7, v8, v9, v10, v11);
    PDFDocumentPrintf(v4, (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v285);
    PDFDocumentPrintf(v4, (uint64_t)"/Type /Font", v18, v19, v20, v21, v22, v23, v286);
    PDFDocumentPrintf(v4, (uint64_t)"/Subtype /Type0", v24, v25, v26, v27, v28, v29, v287);
    PDFDocumentPrintf(v4, (uint64_t)"/Encoding /Identity-H", v30, v31, v32, v33, v34, v35, v288);
    PDFDocumentPrintReference(v4, (uint64_t)"/DescendantFonts [%R]", v5, v36, v37, v38, v39, v40);
    CGFloat v47 = (char **)((char *)this + 88);
    char v48 = (char *)this + 88;
    if (*((char *)this + 111) < 0) {
      char v48 = *v47;
    }
    PDFDocumentPrintf(v4, (uint64_t)"/BaseFont /%N", v41, v42, v43, v44, v45, v46, (uint64_t)v48);
    uint64_t v49 = PDFXRefTableAddObject(*(void **)(v4 + 464));
    PDFDocumentPrintReference(v4, (uint64_t)"/ToUnicode %R", v49, v50, v51, v52, v53, v54);
    PDFDocumentPrintf(v4, (uint64_t)">>", v55, v56, v57, v58, v59, v60, v289);
    PDFDocumentEndObject(v4, v61, v62, v63, v64, v65, v66, v67);
    uint64_t v306 = (uint64_t *)this;
    ToUnicode::write<std::set<unsigned short>>((uint64_t)&v306, v49, v2);
    uint64_t v68 = **((void **)this + 1);
    PDFDocumentBeginObject(v68, v5, v69, v70, v71, v72, v73, v74);
    PDFDocumentPrintf(v68, (uint64_t)"<<", v75, v76, v77, v78, v79, v80, v290);
    PDFDocumentPrintf(v68, (uint64_t)"/Type /Font", v81, v82, v83, v84, v85, v86, v291);
    PDFDocumentPrintf(v68, (uint64_t)"/Subtype /CIDFontType2", v87, v88, v89, v90, v91, v92, v292);
    uint64_t v99 = (char *)this + 88;
    if (*((char *)this + 111) < 0) {
      uint64_t v99 = *v47;
    }
    PDFDocumentPrintf(v68, (uint64_t)"/BaseFont /%N", v93, v94, v95, v96, v97, v98, (uint64_t)v99);
    uint64_t v100 = **((void **)this + 1);
    PDFDocumentPrintf(v100, (uint64_t)"/CIDSystemInfo <<", v101, v102, v103, v104, v105, v106, v293);
    PDFDocumentPrintf(v100, (uint64_t)"/Registry %T", v107, v108, v109, v110, v111, v112, @"Adobe");
    PDFDocumentPrintf(v100, (uint64_t)"/Ordering %T", v113, v114, v115, v116, v117, v118, @"Identity");
    PDFDocumentPrintf(v100, (uint64_t)"/Supplement 0", v119, v120, v121, v122, v123, v124, v294);
    PDFDocumentPrintf(v100, (uint64_t)">>", v125, v126, v127, v128, v129, v130, v295);
    uint64_t v131 = PDFXRefTableAddObject(*(void **)(v68 + 464));
    PDFDocumentPrintReference(v68, (uint64_t)"/W %R", v131, v132, v133, v134, v135, v136);
    PDFDocumentPrintf(v68, (uint64_t)"/DW %d", v137, v138, v139, v140, v141, v142, 1000);
    FontDescriptor::FontDescriptor((FontDescriptor *)v304, this, 0);
    PDFDocumentPrintReference(v68, (uint64_t)"/FontDescriptor %R", v305, v143, v144, v145, v146, v147);
    uint64_t v148 = *((void *)this + 2);
    if (v148
      && (uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v148 + 88), memory_order_acquire)) != 0
      && CGPropertiesGetProperty(explicit, @"com.apple.CoreGraphics.CGPDFFontData"))
    {
      uint64_t v302 = 0;
    }
    else
    {
      uint64_t v302 = PDFXRefTableAddObject(*(void **)(v68 + 464));
      PDFDocumentPrintReference(v68, (uint64_t)"/CIDToGIDMap %R", v302, v156, v157, v158, v159, v160);
    }
    PDFDocumentPrintf(v68, (uint64_t)">>", v150, v151, v152, v153, v154, v155, v296);
    PDFDocumentEndObject(v68, v161, v162, v163, v164, v165, v166, v167);
    uint64_t v168 = **((void **)this + 1);
    PDFDocumentBeginObject(v168, v131, v169, v170, v171, v172, v173, v174);
    PDFDocumentPrintf(v168, (uint64_t)"[", v175, v176, v177, v178, v179, v180, v297);
    v307[0] = 0;
    v307[1] = 0;
    uint64_t v306 = (uint64_t *)v307;
    font_info = (int *)get_font_info(*((void **)this + 2));
    uint64_t v303 = v2;
    if (font_info) {
      float v188 = (float)font_info[2];
    }
    else {
      float v188 = 0.0;
    }
    uint64_t v189 = (char *)*((void *)this + 15);
    uint64_t v190 = (char *)this + 128;
    if (v189 != (char *)this + 128)
    {
      do
      {
        int advances = 0;
        CGGlyph glyphs = *((_WORD *)v189 + 13);
        CGFontGetGlyphAdvances(*((CGFontRef *)this + 2), &glyphs, 1uLL, &advances);
        int v191 = advances;
        *((_DWORD *)std::__tree<std::__value_type<unsigned short,int>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,int>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v306, glyphs, &glyphs)+ 8) = (int)((float)((float)(1000 * v191) / v188) + 0.5);
        uint64_t v192 = (char *)*((void *)v189 + 1);
        if (v192)
        {
          do
          {
            unint64_t v193 = v192;
            uint64_t v192 = *(char **)v192;
          }
          while (v192);
        }
        else
        {
          do
          {
            unint64_t v193 = (char *)*((void *)v189 + 2);
            BOOL v194 = *(void *)v193 == (void)v189;
            uint64_t v189 = v193;
          }
          while (!v194);
        }
        uint64_t v189 = v193;
      }
      while (v193 != v190);
    }
    float v301 = (uint64_t *)((char *)this + 88);
    char v195 = v306;
    while (v195 != (uint64_t *)v307)
    {
      char v196 = v195;
      uint64_t v197 = *((unsigned __int16 *)v195 + 14);
      char v198 = 1;
      unsigned __int16 v199 = *((_WORD *)v195 + 14);
      while (*((unsigned __int16 *)v195 + 14) == v199)
      {
        BOOL v200 = *((_DWORD *)v195 + 8) == *((_DWORD *)v196 + 8);
        char v201 = (uint64_t *)v195[1];
        if (v201)
        {
          do
          {
            char v202 = v201;
            char v201 = (uint64_t *)*v201;
          }
          while (v201);
        }
        else
        {
          do
          {
            char v202 = (uint64_t *)v195[2];
            BOOL v194 = *v202 == (void)v195;
            char v195 = v202;
          }
          while (!v194);
        }
        v198 &= v200;
        ++v199;
        char v195 = v202;
        if (v202 == (uint64_t *)v307)
        {
          char v195 = (uint64_t *)v307;
          break;
        }
      }
      if (v198)
      {
        if (*((_DWORD *)v196 + 8) != 1000)
        {
          PDFDocumentPrintf(v168, (uint64_t)"%d", v182, v183, v184, v185, v186, v187, v197);
          PDFDocumentPrintf(v168, (uint64_t)"%d", v203, v204, v205, v206, v207, v208, v199 - 1);
          PDFDocumentPrintf(v168, (uint64_t)"%d", v209, v210, v211, v212, v213, v214, *((unsigned int *)v196 + 8));
        }
      }
      else
      {
        PDFDocumentPrintf(v168, (uint64_t)"%d [", v182, v183, v184, v185, v186, v187, v197);
        if (v196 != v195)
        {
          do
          {
            PDFDocumentPrintf(v168, (uint64_t)"%d", v215, v216, v217, v218, v219, v220, *((unsigned int *)v196 + 8));
            unsigned __int16 v221 = (uint64_t *)v196[1];
            if (v221)
            {
              do
              {
                char v222 = v221;
                unsigned __int16 v221 = (uint64_t *)*v221;
              }
              while (v221);
            }
            else
            {
              do
              {
                char v222 = (uint64_t *)v196[2];
                BOOL v194 = *v222 == (void)v196;
                char v196 = v222;
              }
              while (!v194);
            }
            char v196 = v222;
          }
          while (v222 != v195);
        }
        PDFDocumentPrintf(v168, (uint64_t)"]", v215, v216, v217, v218, v219, v220, v299);
      }
    }
    PDFDocumentPrintf(v168, (uint64_t)"]", v182, v183, v184, v185, v186, v187, v298);
    PDFDocumentEndObject(v168, v223, v224, v225, v226, v227, v228, v229);
    std::__tree<unsigned long>::destroy(v307[0]);
    uint64_t v230 = PDFXRefTableAddObject(*(void **)(v68 + 464));
    FontDescriptor::emit_definition((uint64_t)v304, (uint64_t)v301, v230, v231, v232, v233, v234, v235);
    char v236 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
    *(_DWORD *)char v236 = 1;
    char v237 = *v303;
    if (*v303 != v190)
    {
      do
      {
        CGFontIndexSetAddIndex(v236, *((unsigned __int16 *)v237 + 13));
        char v238 = (char *)*((void *)v237 + 1);
        if (v238)
        {
          do
          {
            char v239 = v238;
            char v238 = *(char **)v238;
          }
          while (v238);
        }
        else
        {
          do
          {
            char v239 = (char *)*((void *)v237 + 2);
            BOOL v194 = *(void *)v239 == (void)v237;
            char v237 = v239;
          }
          while (!v194);
        }
        char v237 = v239;
      }
      while (v239 != v190);
    }
    CFDataRef embedded_font = (const __CFData *)PDFFont::create_embedded_font(this, v301, (uint64_t)v236, 0, *((void *)this + 18));
    CGFontIndexSetRelease((void **)v236);
    if (embedded_font)
    {
      CFIndex Length = CFDataGetLength(embedded_font);
      if ((unint64_t)(Length - 0x80000000) >= 0xFFFFFFFF80000001)
      {
        uint64_t v242 = Length;
        uint64_t v243 = **((void **)this + 1);
        unsigned __int16 v244 = PDFStreamCreateWithObjectNumber(v243, v230);
        PDFDocumentBeginObject(*v244, v244[1], v245, v246, v247, v248, v249, v250);
        PDFDocumentPrintf(*v244, (uint64_t)"<<", v251, v252, v253, v254, v255, v256, v300);
        PDFDocumentPrintf(v243, (uint64_t)"/Length1 %d", v257, v258, v259, v260, v261, v262, v242);
        PDFStreamBeginData((CGDataConsumerRef)v244);
        BytePtr = CFDataGetBytePtr(embedded_font);
        CGDataConsumerPutBytes(v244[3], (uint64_t)BytePtr, v242);
        PDFStreamEndData(v244);
        PDFStreamEnd((CFDataRef *)v244);
        PDFStreamRelease((uint64_t)v244);
      }
      CFRelease(embedded_font);
    }
    if (v302)
    {
      uint64_t v264 = PDFStreamCreateWithObjectNumber(**((void **)this + 1), v302);
      PDFDocumentBeginObject(*v264, v264[1], v265, v266, v267, v268, v269, v270);
      PDFDocumentPrintf(*v264, (uint64_t)"<<", v271, v272, v273, v274, v275, v276, v300);
      PDFStreamBeginData((CGDataConsumerRef)v264);
      uint64_t v277 = (char *)*((void *)this + 16);
      if (v277)
      {
        do
        {
          uint64_t v278 = v277;
          uint64_t v277 = (char *)*((void *)v277 + 1);
        }
        while (v277);
      }
      else
      {
        do
        {
          uint64_t v278 = (char *)*((void *)v190 + 2);
          BOOL v194 = *(void *)v278 == (void)v190;
          uint64_t v190 = v278;
        }
        while (v194);
      }
      unsigned __int16 v279 = 0;
      unsigned int v280 = *((unsigned __int16 *)v278 + 13);
      do
      {
        unint64_t v281 = (unsigned __int16 *)*((void *)this + 18);
        if (v281)
        {
          if (v281 == (unsigned __int16 *)-1)
          {
            LOBYTE(v282) = HIBYTE(v279);
            LOBYTE(v283) = v279;
          }
          else
          {
            unint64_t v284 = atomic_load((unint64_t *)&v281[4 * (v279 >> 10) + 4]);
            if (v284) {
              unsigned int v283 = *(unsigned __int16 *)(v284 + 2 * (v279 & 0x3FF));
            }
            else {
              unsigned int v283 = *v281;
            }
            unsigned int v282 = v283 >> 8;
          }
        }
        else
        {
          LOBYTE(v283) = -1;
          LOBYTE(v282) = -1;
        }
        LOBYTE(v306) = v282;
        BYTE1(v306) = v283;
        CGDataConsumerPutBytes(v264[3], (uint64_t)&v306, 2);
        ++v279;
      }
      while (v280 >= v279);
      PDFStreamEndData(v264);
      PDFStreamEnd((CFDataRef *)v264);
      PDFStreamRelease((uint64_t)v264);
    }
  }
}

void sub_184DE6E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void *std::__tree<std::__value_type<unsigned short,int>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,int>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        unsigned int v8 = v5[14];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = (unsigned __int16 *)*v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = (unsigned __int16 *)v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = v7;
    uint64_t v7 = operator new(0x28uLL);
    *((_WORD *)v7 + 14) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = v9;
    char *v6 = v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void CIDFontType2::emit_references(CIDFontType2 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((void *)this + 17))
  {
    unsigned int v8 = (void *)((char *)this + 64);
    if (*((char *)this + 87) < 0) {
      unsigned int v8 = (void *)*v8;
    }
    PDFDocumentPrintNameReferencePair(**((void **)this + 1), (uint64_t)"/%N %R", (uint64_t)v8, *((void *)this + 14), a5, a6, a7, a8);
  }
}

uint64_t *CIDFontType2::add_glyphs_to_layout(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v4 = *(_WORD **)a3;
  CFStringRef v3 = *(_WORD **)(a3 + 8);
  if (v3 != *(_WORD **)a3)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v8 = ((uint64_t)v3 - *(void *)a3) >> 1;
    uint64_t v9 = result + 16;
    do
    {
      uint64_t v10 = *(uint64_t **)(v7 + 128);
      uint64_t v11 = v9;
      if (*(uint64_t **)(v7 + 120) == v9) {
        goto LABEL_9;
      }
      uint64_t v12 = *(uint64_t **)(v7 + 128);
      uint64_t v13 = v9;
      if (v10)
      {
        do
        {
          uint64_t v11 = v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v11 = (uint64_t *)v13[2];
          BOOL v14 = *v11 == (void)v13;
          uint64_t v13 = v11;
        }
        while (v14);
      }
      unsigned int v15 = (unsigned __int16)*v4;
      if (*((unsigned __int16 *)v11 + 13) < v15)
      {
LABEL_9:
        if (v10) {
          uint64_t v16 = (uint64_t **)v11;
        }
        else {
          uint64_t v16 = (uint64_t **)v9;
        }
        if (v10) {
          uint64_t v17 = (uint64_t **)(v11 + 1);
        }
        else {
          uint64_t v17 = (uint64_t **)v9;
        }
      }
      else
      {
        uint64_t v16 = (uint64_t **)v9;
        uint64_t v17 = (uint64_t **)v9;
        if (v10)
        {
          uint64_t v17 = (uint64_t **)v9;
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v10;
              unsigned int v21 = *((unsigned __int16 *)v10 + 13);
              if (v15 >= v21) {
                break;
              }
              uint64_t v10 = *v16;
              uint64_t v17 = v16;
              if (!*v16) {
                goto LABEL_16;
              }
            }
            if (v21 >= v15) {
              break;
            }
            uint64_t v17 = v16 + 1;
            uint64_t v10 = v16[1];
            if (!v10) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v17)
      {
LABEL_16:
        uint64_t v18 = operator new(0x20uLL);
        v18[13] = *v4;
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = v16;
        *uint64_t v17 = (uint64_t *)v18;
        uint64_t v19 = **(void **)(v7 + 120);
        if (v19)
        {
          *(void *)(v7 + 120) = v19;
          uint64_t v20 = *v17;
        }
        else
        {
          uint64_t v20 = (uint64_t *)v18;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 128), v20);
        ++*(void *)(v7 + 136);
      }
      ++v4;
    }
    while (v4 != v3);
    uint64_t v22 = *(_WORD **)a3;
    if (*(void *)(a3 + 8) == *(void *)a3)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = (char *)(v7 + 64);
      if (*(char *)(v7 + 87) < 0) {
        uint64_t v23 = *(char **)v23;
      }
      return layout_append_data(a2, v23, 2, v22, v8);
    }
  }
  return result;
}

uint64_t CIDFontType2::get_format(CIDFontType2 *this)
{
  return 5;
}

void CIDFontType2::~CIDFontType2(CIDFontType2 *this)
{
  CIDFontType2::~CIDFontType2(this);

  JUMPOUT(0x18532A2A0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED093758;
  CGFontIndexMapRelease(*((char **)this + 18));
  std::__tree<unsigned long>::destroy(*((void **)this + 16));
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }

  PDFFont::~PDFFont(this);
}

float *filterAngles(float *result)
{
  uint64_t v1 = *((void *)result + 16);
  int v2 = *(_DWORD *)v1;
  if (*(_DWORD *)v1)
  {
    CFStringRef v3 = result;
    uint64_t v4 = (float *)*((void *)result + 18);
    if (v2 < 1) {
      goto LABEL_11;
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(float **)(v1 + 8);
    do
    {
      int v7 = v5 + 1;
      if ((int)v5 + 1 >= v2) {
        int v8 = v2;
      }
      else {
        int v8 = 0;
      }
      uint64_t v9 = &v6[-2 * v8];
      float v10 = *v6;
      float v11 = v6[1];
      v6 += 2;
      float v12 = atan2((float)(v9[3] - v11), (float)(v9[2] - v10)) * 0.159154937;
      if (v12 < 0.0) {
        float v12 = v12 + 1.0;
      }
      v4[v5++] = v12;
    }
    while (v2 != v7);
    if (v2 > 23)
    {
      if (v2 > 0x37)
      {
        filterAngleBuffer(v4, *((float **)v3 + 22), v2, 3, v3[7]);
        uint64_t v16 = (float *)*((void *)v3 + 22);
        float v15 = v3[7];
        if (v2 > 0x77)
        {
          filterAngleBuffer(v16, *((float **)v3 + 23), v2, 7, v15);
          uint64_t v16 = (float *)*((void *)v3 + 23);
          BOOL v14 = (float *)*((void *)v3 + 19);
          float v15 = v3[7];
          int v17 = v2;
          int v18 = 15;
        }
        else
        {
          BOOL v14 = (float *)*((void *)v3 + 19);
          int v17 = v2;
          int v18 = 7;
        }
      }
      else
      {
        BOOL v14 = (float *)*((void *)v3 + 19);
        float v15 = v3[7];
        uint64_t v16 = v4;
        int v17 = v2;
        int v18 = 3;
      }
      return filterAngleBuffer(v16, v14, v17, v18, v15);
    }
    else
    {
LABEL_11:
      uint64_t v13 = (void *)*((void *)v3 + 19);
      return (float *)memmove(v13, v4, 4 * v2);
    }
  }
  return result;
}

float *filterAngleBuffer(float *result, float *a2, int a3, int a4, float a5)
{
  int v5 = 0;
  uint64_t v6 = result;
  do
  {
    float v7 = *v6;
    if (v5) {
      int v8 = 0;
    }
    else {
      int v8 = a3;
    }
    int v9 = v5 + v8;
    ++v5;
    int v10 = v9 - 1;
    if (v5 >= a3) {
      int v11 = a3;
    }
    else {
      int v11 = 0;
    }
    int v12 = v5 - v11;
    int v13 = 1;
    int v14 = a4;
    float v15 = *v6;
    do
    {
      float v16 = result[v12] - rintf(result[v12] - v7);
      if (vabds_f32(v16, v7) >= a5) {
        float v16 = -0.0;
      }
      else {
        ++v13;
      }
      float v17 = v15 + v16;
      float v18 = result[v10] - rintf(result[v10] - v7);
      if (vabds_f32(v18, v7) >= a5) {
        float v18 = -0.0;
      }
      else {
        ++v13;
      }
      float v15 = v17 + v18;
      int v19 = v12 + 1;
      if (v19 >= a3) {
        int v20 = a3;
      }
      else {
        int v20 = 0;
      }
      int v12 = v19 - v20;
      if (v10 <= 0) {
        int v21 = a3;
      }
      else {
        int v21 = 0;
      }
      int v10 = v10 + v21 - 1;
      --v14;
    }
    while (v14);
    *a2++ = (float)(v15 / (float)v13) - floorf(v15 / (float)v13);
    ++v6;
  }
  while (v5 != a3);
  return result;
}

void *CGPathCreateWithThresholdedImage(CGImage *a1, int a2, double a3, double a4)
{
  return createPath(a1, a2, 0, 0, 0, a3, a4);
}

void *createPath(CGImage *a1, int a2, uint64_t a3, uint64_t a4, int *a5, double a6, double a7)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  size_t v14 = *((void *)a1 + 5);
  size_t v15 = *((void *)a1 + 6);
  *(_OWORD *)whitePoint = xmmword_18520FAB8;
  uint64_t v123 = 0x3FEA6594AF4F0D84;
  CalibratedGraCGFloat y = CGColorSpaceCreateCalibratedGray(whitePoint, 0, 2.2);
  if (!CalibratedGray)
  {
    uint64_t v36 = "Error allocating color space";
LABEL_20:
    printf(" ***** %s in autoTrace\n", v36);
    return 0;
  }
  float v17 = CalibratedGray;
  float v18 = malloc_type_malloc(v15 * v14, 0xCCFBEA90uLL);
  int v19 = v18;
  if (!v18)
  {
    printf(" ***** %s in autoTrace\n", "Memory not allocated!");
    CGColorSpaceRelease(v17);
    return v19;
  }
  int v120 = v15 * v14;
  CGContextRef v20 = CGBitmapContextCreateWithData(v18, v14, v15, 8uLL, v14, v17, 0, 0, 0);
  if (!v20)
  {
    free(v19);
    CGColorSpaceRelease(v17);
    uint64_t v36 = "Context not created!";
    goto LABEL_20;
  }
  uint64_t v21 = (uint64_t)v20;
  CGColorSpaceRelease(v17);
  v126.size.CGFloat width = (double)v14;
  v126.size.CGFloat height = (double)v15;
  v126.origin.CGFloat x = 0.0;
  v126.origin.CGFloat y = 0.0;
  CGContextDrawImage((CGContextRef)v21, v126, a1);
  uint64_t v28 = (const void *)v21;
  if (*(_DWORD *)(v21 + 16) != 1129601108 || *(_DWORD *)(v21 + 24) != 4)
  {
    handle_invalid_context((char)"CGBitmapContextGetData", v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_17;
  }
  uint64_t v29 = *(char **)(*(void *)(v21 + 32) + 64);
  if (!v29 || (uint64_t v30 = malloc_type_malloc(0x100uLL, 0x10A00400CDB8DDBuLL)) == 0)
  {
LABEL_17:
    uint64_t v37 = v28;
LABEL_18:
    CFRelease(v37);
    return 0;
  }
  uint64_t v31 = (uint64_t)v30;
  float v32 = a7;
  v30[14] = 0u;
  v30[15] = 0u;
  v30[12] = 0u;
  v30[13] = 0u;
  v30[10] = 0u;
  v30[11] = 0u;
  v30[8] = 0u;
  v30[9] = 0u;
  v30[6] = 0u;
  v30[7] = 0u;
  v30[4] = 0u;
  v30[5] = 0u;
  v30[2] = 0u;
  v30[3] = 0u;
  _OWORD *v30 = 0u;
  v30[1] = 0u;
  *((_DWORD *)v30 + 9) = 1084227584;
  *((float *)v30 + 8) = v32;
  *((float *)v30 + 10) = v32;
  *((_DWORD *)v30 + 6) = v15;
  *((_DWORD *)v30 + 7) = 1034147594;
  uint64_t v33 = malloc_type_malloc(0xC80uLL, 0x1020040F48FCA59uLL);
  *(void *)(v31 + 64) = v33;
  if (!v33)
  {
    printf(" ***** %s in autoTrace\n", "could not allocate extract polygons point list");
LABEL_26:
    printf(" ***** %s in autoTrace\n", "could not initialize AutoTrace environment");
    termAutoTraceEnvironment(v31);
    goto LABEL_17;
  }
  *(void *)(v31 + 56) = 0x6400000000;
  *(_DWORD *)(v31 + 72) = -1;
  if (!initOpenEndList((void *)(v31 + 96)))
  {
LABEL_25:
    termPolygonList(v31);
    goto LABEL_26;
  }
  uint64_t v114 = (long long *)(v31 + 112);
  if (!initOpenEndList((void *)(v31 + 112)))
  {
    free(*(void **)(v31 + 104));
    goto LABEL_25;
  }
  *(unsigned char *)(v31 + 80) = 0;
  *(_DWORD *)(v31 + 92) = 0;
  *(void *)(v31 + 48) = CGPathCreateMutable();
  *(void *)uint64_t v31 = a3;
  *(void *)(v31 + 8) = a4;
  uint64_t v34 = (_DWORD *)(v31 + 16);
  uint64_t v117 = (void *)v31;
  CFTypeRef cf = v28;
  uint64_t v113 = (long long *)(v31 + 96);
  if (a5)
  {
    int v35 = *a5;
    *(unsigned char *)(v31 + 20) = *((unsigned char *)a5 + 4);
    *uint64_t v34 = v35;
  }
  else
  {
    *(unsigned char *)(v31 + 20) = 0;
    *uint64_t v34 = 0;
  }
  unint64_t v39 = (int)v14;
  unint64_t v40 = (int)v15;
  float v41 = a6;
  if (v41 == 1.0) {
    float v42 = 0.9999;
  }
  else {
    float v42 = a6;
  }
  bzero(v124, 0x400uLL);
  if (v15 << 32)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v29;
    do
    {
      if (v14 << 32)
      {
        uint64_t v45 = 0;
        do
          ++v124[v44[v45++]];
        while ((int)v14 != v45);
      }
      ++v43;
      v44 += (int)v14;
    }
    while (v43 != (int)v15);
  }
  uint64_t v46 = 0;
  int v47 = 0;
  int v48 = 0;
  uint64_t v49 = (void *)v31;
  do
  {
    int v50 = v124[v46];
    if (v50 > v47) {
      int v47 = v124[v46];
    }
    if (v50 > v48) {
      int v47 = v48;
    }
    else {
      int v50 = v48;
    }
    ++v46;
    int v48 = v50;
  }
  while (v46 != 256);
  uint64_t v51 = 0;
  int v52 = 0;
  if (a2) {
    int v53 = 255;
  }
  else {
    int v53 = 0;
  }
  signed int v54 = vcvtms_s32_f32(v42 * 255.0);
  uint64_t v55 = &v29[((int)v15 - 1) * v39];
  if (v39 + 1 > 1) {
    uint64_t v56 = v39 + 1;
  }
  else {
    uint64_t v56 = 1;
  }
  if ((unint64_t)((int)v15 + 1) > 1) {
    uint64_t v57 = (int)v15 + 1;
  }
  else {
    uint64_t v57 = 1;
  }
  uint64_t v118 = &v29[((int)v15 - 1) * v39];
  uint64_t v58 = v29;
  do
  {
    int v59 = 0;
    uint64_t v60 = 0;
    do
    {
      signed int v61 = v53;
      if (v51)
      {
        signed int v61 = v53;
        if (v39 != v60) {
          signed int v61 = v55[v60];
        }
      }
      signed int v62 = v53;
      if (v51 != (int)v15)
      {
        signed int v62 = v53;
        if (v39 != v60) {
          signed int v62 = v58[v60];
        }
      }
      BOOL v63 = v61 < v54;
      BOOL v64 = v61 <= v54;
      int v65 = !v63;
      BOOL v63 = v62 < v54;
      BOOL v66 = v62 <= v54;
      int v67 = !v63;
      if (!a2)
      {
        BOOL v66 = v67;
        BOOL v64 = v65;
      }
      if (v64) {
        int v68 = 4;
      }
      else {
        int v68 = 0;
      }
      int v69 = v68 | v66;
      int v70 = v69 | v59;
      if (v70 == 9 || v70 == 6) {
        int v72 = 2;
      }
      else {
        int v72 = 1;
      }
      int v73 = v72 + v52;
      if (v70) {
        BOOL v74 = v70 == 15;
      }
      else {
        BOOL v74 = 1;
      }
      if (!v74) {
        int v52 = v73;
      }
      int v59 = 2 * v69;
      ++v60;
    }
    while (v56 != v60);
    ++v51;
    uint64_t v55 = v58;
    v58 += v39;
  }
  while (v51 != v57);
  unint64_t v75 = 0;
  signed int v76 = vcvtms_s32_f32((float)(v42 * 4.0) * 255.0);
  *(unsigned char *)(v31 + 44) = (float)((float)(v120 - (v50 + v47)) / (float)v52) < 4.5;
  uint64_t v111 = v29;
  uint64_t v119 = v29;
  signed int v115 = v76;
  while (2)
  {
    int v77 = 0;
    int v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0;
    *((_DWORD *)v49 + 23) = 0;
    float v81 = (float)v75 + -0.5;
    float v82 = (float)v75 + 0.5;
    signed int v83 = v53;
    int v84 = v53;
    unint64_t v116 = v75;
    do
    {
      int v85 = v84;
      int v86 = v83;
      int v84 = v53;
      if (v75)
      {
        int v84 = v53;
        if (v39 != v80) {
          int v84 = v118[v80];
        }
      }
      signed int v83 = v53;
      if (v75 != v40)
      {
        signed int v83 = v53;
        if (v39 != v80) {
          signed int v83 = v119[v80];
        }
      }
      int v87 = v85 + v86 + v84 + v83;
      if (a2)
      {
        int v88 = v84 <= v54;
        int v89 = v83 <= v54;
        BOOL v90 = v87 <= v76;
      }
      else
      {
        int v88 = v84 >= v54;
        int v89 = v83 >= v54;
        BOOL v90 = v87 >= v76;
      }
      if (v88) {
        int v91 = 4;
      }
      else {
        int v91 = 0;
      }
      int v92 = v79 | v89 | v91;
      if (v92 && v92 != 15)
      {
        float v93 = 0.0;
        float v94 = 0.0;
        if (v77 != v88) {
          float v94 = (float)-(float)((float)v85 - (float)(v42 * 255.0)) / (float)(v84 - v85);
        }
        if (v77 != v78) {
          float v93 = (float)-(float)((float)v85 - (float)(v42 * 255.0)) / (float)(v86 - v85);
        }
        float v95 = 0.0;
        float v96 = 0.0;
        if (v89 != v88) {
          float v96 = (float)-(float)((float)v84 - (float)(v42 * 255.0)) / (float)(v83 - v84);
        }
        if (v78 != v89) {
          float v95 = (float)-(float)((float)v86 - (float)(v42 * 255.0)) / (float)(v83 - v86);
        }
        float v97 = (float)v80 + -0.5;
        float v98 = v97 + v94;
        float v99 = v81 + v93;
        float v100 = v81 + v96;
        float v101 = v97 + v95;
        int v121 = v88;
        switch(v92)
        {
          case 1:
            goto LABEL_123;
          case 2:
          case 13:
            unsigned __int8 v102 = actionD((uint64_t)v117, (float)v80 + -0.5, v99, v97 + v95, v82);
            goto LABEL_125;
          case 3:
          case 12:
            unsigned __int8 v102 = actionE((uint64_t)v117, (float)v80 + -0.5, v99, (float)v80 + 0.5, v81 + v96);
            goto LABEL_125;
          case 4:
          case 11:
            goto LABEL_119;
          case 5:
          case 10:
            unsigned __int8 v102 = actionC((uint64_t)v117, v97 + v94, v81, v97 + v95, v82);
            goto LABEL_125;
          case 6:
            if (!v90) {
              goto LABEL_118;
            }
            if (!actionA(v117, v97 + v94, v81, v97, v99)) {
              goto LABEL_129;
            }
            uint64_t v103 = (uint64_t)v117;
            float v104 = (float)v80 + 0.5;
            float v105 = v100;
            float v106 = v101;
            float v107 = v82;
            int v108 = 1;
            goto LABEL_124;
          case 7:
          case 8:
            unsigned __int8 v102 = actionA(v117, v97 + v94, v81, v97, v99);
            goto LABEL_125;
          case 9:
            if (v90)
            {
LABEL_118:
              if (!actionD((uint64_t)v117, (float)v80 + -0.5, v99, v97 + v95, v82)) {
                goto LABEL_129;
              }
LABEL_119:
              unsigned __int8 v102 = actionB((uint64_t)v117, v98, v81, (float)v80 + 0.5, v100);
            }
            else
            {
              if (!actionA(v117, v97 + v94, v81, v97, v99)) {
                goto LABEL_129;
              }
LABEL_123:
              uint64_t v103 = (uint64_t)v117;
              float v104 = (float)v80 + 0.5;
              float v105 = v100;
              float v106 = v101;
              float v107 = v82;
              int v108 = 0;
LABEL_124:
              unsigned __int8 v102 = actionF(v103, v108, v104, v105, v106, v107);
            }
LABEL_125:
            int v88 = v121;
            signed int v76 = v115;
            unint64_t v75 = v116;
            if (v102) {
              goto LABEL_126;
            }
LABEL_129:
            printf(" ***** %s in autoTrace\n", "errors during bitmapToPolygons");
            termAutoTraceEnvironment((uint64_t)v117);
            uint64_t v37 = cf;
            break;
          case 14:
            unsigned int v109 = actionF((uint64_t)v117, 1, (float)v80 + 0.5, v81 + v96, v97 + v95, v82);
            int v88 = v121;
            signed int v76 = v115;
            unint64_t v75 = v116;
            if (v109) {
              goto LABEL_126;
            }
            goto LABEL_129;
          default:
            goto LABEL_126;
        }
        goto LABEL_18;
      }
LABEL_126:
      int v79 = (2 * v92) & 0xA;
      ++v80;
      int v77 = v88;
      int v78 = v89;
    }
    while (v80 <= v39);
    long long v110 = *v113;
    *uint64_t v113 = *v114;
    *uint64_t v114 = v110;
    *(_DWORD *)uint64_t v114 = 0;
    ++v75;
    uint64_t v118 = v119;
    v119 += v39;
    uint64_t v49 = v117;
    if (v75 <= v40) {
      continue;
    }
    break;
  }
  CFRelease(cf);
  free(v111);
  int v19 = (void *)v117[6];
  v117[6] = 0;
  termAutoTraceEnvironment((uint64_t)v117);
  return v19;
}

BOOL initOpenEndList(void *a1)
{
  int v2 = malloc_type_malloc(0xFA0uLL, 0x100004090D0E795uLL);
  a1[1] = v2;
  if (v2) {
    *a1 = 0x1F400000000;
  }
  else {
    printf(" ***** %s in autoTrace\n", "could not allocate extract polygons open end list");
  }
  return v2 != 0;
}

void termPolygonList(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 64);
  if (*(int *)(a1 + 56) >= 1)
  {
    int v3 = 0;
    uint64_t v4 = v2 + 1;
    do
    {
      int v5 = *v4;
      v4 += 4;
      free(v5);
      ++v3;
    }
    while (v3 < *(_DWORD *)(a1 + 56));
    int v2 = *(void ***)(a1 + 64);
  }

  free(v2);
}

void termAutoTraceEnvironment(uint64_t a1)
{
  freeAutoTraceStructures(a1);
  termPolygonList(a1);
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 120));
  int v2 = *(void **)(a1 + 192);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  int v3 = *(void **)(a1 + 208);
  if (v3) {
    free(v3);
  }
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v4 = *(void **)(a1 + 224);
  if (v4) {
    free(v4);
  }
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  int v5 = *(void **)(a1 + 240);
  if (v5) {
    free(v5);
  }

  free((void *)a1);
}

float *actionF(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12 = *(int *)(a1 + 72);
  if (v12 == -1)
  {
    int v14 = *(_DWORD *)(a1 + 56);
    int v15 = *(_DWORD *)(a1 + 60);
    if (v14 >= v15)
    {
      float v17 = malloc_type_malloc(32 * (v15 + 100), 0x1020040F48FCA59uLL);
      if (!v17)
      {
        uint64_t v23 = "could not extend extract polygons list";
        goto LABEL_18;
      }
      float v16 = v17;
      memmove(v17, *(const void **)(a1 + 64), 32 * *(int *)(a1 + 60));
      *(_DWORD *)(a1 + 60) += 100;
      free(*(void **)(a1 + 64));
      *(void *)(a1 + 64) = v16;
      int v14 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      float v16 = *(void **)(a1 + 64);
    }
    uint64_t v13 = (uint64_t)v16 + 32 * v14;
    *(_DWORD *)(a1 + 56) = v14 + 1;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 64) + 32 * v12;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v13 + 24);
  }
  float v18 = malloc_type_malloc(0x190uLL, 0x100004000313F17uLL);
  *(void *)(v13 + 8) = v18;
  if (!v18)
  {
    uint64_t v23 = "could not allocate extract polygons point list";
    goto LABEL_18;
  }
  *(void *)uint64_t v13 = 0x3200000000;
  *(_DWORD *)(v13 + 16) = 25;
  *(unsigned char *)(v13 + 20) = 0;
  *(_DWORD *)(v13 + 24) = -2;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t result = (float *)addPointAtEnd((int *)v13);
  if (result)
  {
    uint64_t v21 = result;
    uint64_t result = (float *)addPointAtEnd((int *)v13);
    if (result)
    {
      if (a2)
      {
        *uint64_t v21 = a5;
        v21[1] = a6;
        char v22 = *(unsigned char *)(a1 + 80);
        if (!v22)
        {
          a5 = a3;
          a6 = a4;
          goto LABEL_21;
        }
      }
      else
      {
        *uint64_t v21 = a3;
        v21[1] = a4;
        if (!*(unsigned char *)(a1 + 80))
        {
          char v22 = 1;
LABEL_21:
          *(unsigned char *)(a1 + 80) = 1;
          unint64_t v24 = (unint64_t)(v13 - v19) >> 5;
          *(_DWORD *)(a1 + 84) = v24;
          *(unsigned char *)(a1 + 88) = v22;
          *uint64_t result = a5;
          result[1] = a6;
          uint64_t result = (float *)newOpenEnd((int *)(a1 + 112));
          if (result)
          {
            *(_DWORD *)uint64_t result = v24;
            *((unsigned char *)result + 4) = a2 == 1;
            return (float *)1;
          }
          return result;
        }
      }
      uint64_t v23 = "attempt to leave an open left end when a left end is already open";
LABEL_18:
      printf(" ***** %s in autoTrace\n", v23);
      return 0;
    }
  }
  return result;
}

float *actionD(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (!*(unsigned char *)(a1 + 80))
  {
    int v14 = "attempt to connect to a left end when there is no left end open";
    goto LABEL_8;
  }
  int v9 = *(_DWORD *)(a1 + 84);
  int v10 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 64);
  if (endPoint(v11, v9, v10) != a2 || v12 != a3)
  {
    int v14 = "left end point does not match connected point";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v14);
    return 0;
  }
  float v16 = (int *)(v11 + 32 * v9);
  if (v10)
  {
    uint64_t result = (float *)addPointAtStart(v16);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = (float *)addPointAtEnd(v16);
    if (!result) {
      return result;
    }
  }
  *uint64_t result = a4;
  result[1] = a5;
  *(unsigned char *)(a1 + 80) = 0;
  uint64_t result = (float *)newOpenEnd((int *)(a1 + 112));
  if (result)
  {
    *(_DWORD *)uint64_t result = v9;
    *((unsigned char *)result + 4) = v10;
    return (float *)1;
  }
  return result;
}

uint64_t actionE(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (!*(unsigned char *)(a1 + 80))
  {
    int v14 = "attempt to connect to a left end when there is no left end open";
    goto LABEL_8;
  }
  int v9 = *(_DWORD *)(a1 + 84);
  int v10 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 64);
  if (endPoint(v11, v9, v10) != a2 || v12 != a3)
  {
    int v14 = "left end point does not match connected point";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v14);
    return 0;
  }
  float v16 = (int *)(v11 + 32 * v9);
  if (v10)
  {
    uint64_t result = (uint64_t)addPointAtStart(v16);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)addPointAtEnd(v16);
    if (!result) {
      return result;
    }
  }
  *(float *)uint64_t result = a4;
  *(float *)(result + 4) = a5;
  uint64_t result = 1;
  *(unsigned char *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 84) = v9;
  *(unsigned char *)(a1 + 88) = v10;
  return result;
}

uint64_t actionB(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (*(unsigned char *)(a1 + 80))
  {
    int v5 = "no connection to open left end";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v5);
    return 0;
  }
  uint64_t v10 = *(int *)(a1 + 92);
  uint64_t v11 = *(void *)(a1 + 104) + 8 * v10;
  *(_DWORD *)(a1 + 92) = v10 + 1;
  int v12 = *(_DWORD *)v11;
  int v13 = *(unsigned __int8 *)(v11 + 4);
  uint64_t v14 = *(void *)(a1 + 64);
  if (endPoint(v14, *(_DWORD *)v11, *(unsigned char *)(v11 + 4)) != a2 || v15 != a3)
  {
    int v5 = "top open end point does not match connected point";
    goto LABEL_8;
  }
  float v18 = (int *)(v14 + 32 * v12);
  if (!v13)
  {
    uint64_t result = (uint64_t)addPointAtEnd(v18);
    if (!result) {
      return result;
    }
LABEL_14:
    *(float *)uint64_t result = a4;
    *(float *)(result + 4) = a5;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(_DWORD *)(a1 + 84) = v12;
    *(unsigned char *)(a1 + 88) = v13;
    return result;
  }
  uint64_t result = (uint64_t)addPointAtStart(v18);
  if (result) {
    goto LABEL_14;
  }
  return result;
}

float *actionC(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (*(unsigned char *)(a1 + 80))
  {
    int v5 = "no connection to open left end";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v5);
    return 0;
  }
  uint64_t v10 = *(int *)(a1 + 92);
  uint64_t v11 = *(void *)(a1 + 104) + 8 * v10;
  *(_DWORD *)(a1 + 92) = v10 + 1;
  int v12 = *(_DWORD *)v11;
  int v13 = *(unsigned __int8 *)(v11 + 4);
  uint64_t v14 = *(void *)(a1 + 64);
  if (endPoint(v14, *(_DWORD *)v11, *(unsigned char *)(v11 + 4)) != a2 || v15 != a3)
  {
    int v5 = "top open end point does not match connected point";
    goto LABEL_8;
  }
  float v18 = (int *)(v14 + 32 * v12);
  if (v13)
  {
    uint64_t result = (float *)addPointAtStart(v18);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = (float *)addPointAtEnd(v18);
    if (!result) {
      return result;
    }
  }
  *uint64_t result = a4;
  result[1] = a5;
  *(unsigned char *)(a1 + 80) = 0;
  uint64_t result = (float *)newOpenEnd((int *)(a1 + 112));
  if (result)
  {
    *(_DWORD *)uint64_t result = v12;
    *((unsigned char *)result + 4) = v13;
    return (float *)1;
  }
  return result;
}

float *actionA(void *a1, float a2, float a3, float a4, float a5)
{
  if (!*((unsigned char *)a1 + 80))
  {
    float v17 = "attempt to connect to a left end when there is no left end open";
    goto LABEL_115;
  }
  uint64_t v9 = *((int *)a1 + 23);
  uint64_t v10 = a1[13] + 8 * v9;
  *((_DWORD *)a1 + 23) = v9 + 1;
  int v11 = *(_DWORD *)v10;
  int v13 = (unsigned char *)(v10 + 4);
  int v12 = *(unsigned __int8 *)(v10 + 4);
  uint64_t v14 = a1[8];
  if (endPoint(v14, *(_DWORD *)v10, *(unsigned char *)(v10 + 4)) != a2 || v15 != a3)
  {
    float v17 = "top open end point does not match connected point";
LABEL_115:
    printf(" ***** %s in autoTrace\n", v17);
    return 0;
  }
  int v18 = *((unsigned __int8 *)a1 + 88);
  if (v18 == v12)
  {
    float v17 = "polygon front/back ends should be opposite on closure";
    goto LABEL_115;
  }
  if (*((_DWORD *)a1 + 21) != v11)
  {
    uint64_t v21 = (int *)(v14 + 32 * v11);
    if (v12)
    {
      uint64_t result = (float *)addPointAtStart(v21);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = (float *)addPointAtEnd(v21);
      if (!result) {
        return result;
      }
    }
    *uint64_t result = a4;
    result[1] = a5;
    int v34 = *v13;
    int v35 = *((unsigned __int8 *)a1 + 88);
    if (v34 == v35)
    {
      float v17 = "join polygons occurs at wrong ends";
      goto LABEL_115;
    }
    uint64_t v36 = a1[8];
    int v37 = *(_DWORD *)v10;
    float v38 = endPoint(v36, *(_DWORD *)v10, v34);
    float v40 = v39;
    int v41 = *((_DWORD *)a1 + 21);
    if (v38 != endPoint(v36, v41, v35) || v40 != v42)
    {
      float v17 = "join polygons point does not match connected point";
      goto LABEL_115;
    }
    uint64_t v44 = v37;
    uint64_t v45 = (int *)(v36 + 32 * v37);
    uint64_t v46 = (int *)(v36 + 32 * v41);
    int v47 = *v46 + *v45;
    int v334 = v47 + 99;
    int v48 = (char *)malloc_type_malloc(8 * (v47 + 99), 0x100004000313F17uLL);
    if (!v48)
    {
      float v17 = "could not extend extract polygons point list";
      goto LABEL_115;
    }
    uint64_t v49 = v48;
    int v332 = v47 - 1;
    int v50 = v48 + 400;
    if (*v13)
    {
      uint64_t v51 = v36 + 32 * v41;
      uint64_t v53 = *(void *)(v51 + 8);
      int v52 = (void *)(v51 + 8);
      signed int v54 = v52 + 1;
      memmove(v50, (const void *)(v53 + 8 * *((int *)v52 + 2)), 8 * *v46 - 8);
      uint64_t v55 = v36 + 32 * v44;
      uint64_t v56 = (void *)(v55 + 8);
      uint64_t v57 = (int *)(v55 + 16);
      uint64_t v58 = v45;
      int v59 = (int *)(v36 + 32 * v41);
    }
    else
    {
      memmove(v50, (const void *)(*(void *)(v36 + 32 * v44 + 8) + 8 * *(int *)(v36 + 32 * v44 + 16)), 8 * *v45 - 8);
      uint64_t v81 = v36 + 32 * v41;
      uint64_t v56 = (void *)(v81 + 8);
      uint64_t v57 = (int *)(v81 + 16);
      uint64_t v58 = (int *)(v36 + 32 * v41);
      int v59 = v45;
      signed int v54 = v57;
      int v52 = v56;
    }
    memmove(&v49[8 * *v59 + 392], (const void *)(*v56 + 8 * *v57), 8 * *v58);
    *signed int v54 = 50;
    *uint64_t v46 = v332;
    *(_DWORD *)(v36 + 32 * v41 + 4) = v334;
    free((void *)*v52);
    *int v52 = v49;
    uint64_t v82 = v36 + 32 * v44;
    *(_DWORD *)(v82 + 24) = *((_DWORD *)a1 + 18);
    *((_DWORD *)a1 + 18) = ((unint64_t)v45 - a1[8]) >> 5;
    free(*(void **)(v82 + 8));
    *(void *)uint64_t v45 = 0;
    *((void *)v45 + 1) = 0;
    int v83 = *((_DWORD *)a1 + 24);
    if (v83 >= 1)
    {
      int v84 = (int *)a1[13];
      do
      {
        if (*v84 == v44) {
          *int v84 = v41;
        }
        v84 += 2;
        --v83;
      }
      while (v83);
    }
    int v85 = *((_DWORD *)a1 + 28);
    if (v85 >= 1)
    {
      int v86 = (int *)a1[15];
      do
      {
        if (*v86 == v44) {
          *int v86 = v41;
        }
        v86 += 2;
        --v85;
      }
      while (v85);
    }
    if (*((_DWORD *)a1 + 21) == v44) {
      *((_DWORD *)a1 + 21) = v41;
    }
LABEL_47:
    *((unsigned char *)a1 + 80) = 0;
    return (float *)1;
  }
  if (endPoint(v14, v11, v18) != a4 || v19 != a5)
  {
    float v17 = "left end point does not match connected point";
    goto LABEL_115;
  }
  uint64_t v23 = (int *)(v14 + 32 * v11);
  uint64_t v25 = (void **)(v23 + 2);
  unint64_t v24 = (char *)*((void *)v23 + 1);
  uint64_t v26 = *v23;
  uint64_t v27 = (float *)malloc_type_malloc(8 * v26, 0x100004000313F17uLL);
  if (!v27)
  {
    float v17 = "could not trim extract polygons point list";
    goto LABEL_115;
  }
  uint64_t v28 = v27;
  memmove(v27, &v24[8 * v23[4]], 8 * v26);
  v23[4] = 0;
  v23[1] = v26;
  free(v24);
  *uint64_t v25 = v28;
  *((unsigned char *)v23 + 20) = 1;
  uint64_t v29 = *v23;
  if ((int)v29 >= 1)
  {
    uint64_t v30 = 0;
    int v31 = 0;
    float v32 = v28;
    while (v30)
    {
      if ((float)((float)((float)(v32[1] - *(v32 - 1)) * (float)(v32[1] - *(v32 - 1)))
                 + (float)((float)(*v32 - *(v32 - 2)) * (float)(*v32 - *(v32 - 2)))) > 0.1)
      {
        if (v30 != v31)
        {
          uint64_t v33 = *(void *)v32;
          goto LABEL_28;
        }
        goto LABEL_29;
      }
LABEL_30:
      ++v30;
      v32 += 2;
      if (v29 == v30) {
        goto LABEL_45;
      }
    }
    if (v31)
    {
      uint64_t v33 = *(void *)v28;
LABEL_28:
      *(void *)&v28[2 * v31] = v33;
    }
LABEL_29:
    ++v31;
    goto LABEL_30;
  }
  int v31 = 0;
LABEL_45:
  int v60 = v31
      - ((float)((float)((float)(v28[1] - v28[2 * (int)v29 - 1]) * (float)(v28[1] - v28[2 * (int)v29 - 1]))
               + (float)((float)(*v28 - v28[2 * (int)v29 - 2]) * (float)(*v28 - v28[2 * (int)v29 - 2]))) <= 0.1);
  *uint64_t v23 = v60;
  if (v60 <= 2)
  {
LABEL_46:
    *(_DWORD *)(v14 + 32 * v11 + 24) = *((_DWORD *)a1 + 18);
    *((_DWORD *)a1 + 18) = ((unint64_t)v23 - a1[8]) >> 5;
    free(*v25);
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    goto LABEL_47;
  }
  signed int v61 = (float32x2_t *)*v25;
  if (*((unsigned char *)a1 + 44))
  {
    float32x2_t v62 = (float32x2_t)vdup_n_s32(0x3FDCED92u);
    float32x2_t v63 = (float32x2_t)vdup_n_s32(0xC025B22E);
    float32x2_t v64 = (float32x2_t)vdup_n_s32(0x3FEE76C9u);
    int v65 = v60;
    BOOL v66 = (float32x2_t *)*v25;
    do
    {
      float32x2_t v67 = vrndm_f32(*v66);
      float32x2_t v68 = vsub_f32(*v66, v67);
      *v66++ = vadd_f32(v67, vmla_f32(vmla_f32(vmul_f32(v68, vmul_f32(v68, v63)), v68, vmul_f32(v68, vmul_f32(v68, v62))), v64, v68));
      --v65;
    }
    while (v65);
  }
  float32x2_t v69 = *v61;
  float32x2_t v70 = vsub_f32(v61[v60 - 1], *v61);
  float v71 = 0.0;
  int v72 = v60;
  do
  {
    float32x2_t v73 = *v61++;
    float32x2_t v74 = vsub_f32(v73, v69);
    float v71 = v71 + vmul_lane_f32(vsub_f32(v74, v70), vadd_f32(v74, v70), 1).f32[0] * 0.5;
    float32x2_t v70 = v74;
    --v72;
  }
  while (v72);
  if (v60 <= *((_DWORD *)a1 + 34))
  {
    a1[16] = v23;
LABEL_62:
    if (debug_auto_trace && *a1 && !((unsigned int (*)(void, void, void *))a1[1])(*a1, 0, a1)) {
      goto LABEL_46;
    }
    if (fabsf(v71) < 3.0)
    {
      CGPathMoveToPoint((CGMutablePathRef)a1[6], 0, *(float *)*v25, *((float *)*v25 + 1));
      LODWORD(v77) = *v23;
      if (*v23 >= 1)
      {
        uint64_t v78 = 0;
        uint64_t v79 = 1;
        do
        {
          LODWORD(v80) = ++v78;
          if (v79 >= (int)v77)
          {
            uint64_t v80 = v79 - (int)v77;
            if (v80 >= (int)v77) {
              v80 %= (int)v77;
            }
          }
          CGPathAddLineToPoint((CGMutablePathRef)a1[6], 0, *((float *)*v25 + 2 * (int)v80), *((float *)*v25 + 2 * (int)v80 + 1));
          uint64_t v77 = *v23;
          BOOL v203 = v79++ < v77;
        }
        while (v203);
      }
      CGPathCloseSubpath((CGMutablePathRef)a1[6]);
      goto LABEL_46;
    }
    filterAngles((float *)a1);
    if (!initInterestingPointList(a1 + 26))
    {
      float v17 = "failing initInterestingPointList";
      goto LABEL_115;
    }
    uint64_t v335 = (char **)(a1 + 26);
    int v87 = (unsigned int *)a1[16];
    int v88 = (float *)*((void *)v87 + 1);
    unint64_t v89 = *v87;
    unsigned int v333 = (char **)(a1 + 28);
    if (!initInterestingPointList(a1 + 28)) {
      goto LABEL_114;
    }
    LOBYTE(v337[1]) = 0;
    if ((int)v89 >= 1)
    {
      uint64_t v91 = 0;
      LODWORD(v90) = 0;
      int v92 = 0;
      int v93 = -1;
      do
      {
        int v94 = 0;
        uint64_t v95 = v91 + 1;
        if (v91 + 1 >= v89) {
          int v96 = v89;
        }
        else {
          int v96 = 0;
        }
        float v97 = &v88[-2 * v96];
        if (vabds_f32(v97[3], v88[1]) >= 0.001)
        {
          if (vabds_f32(v97[2], *v88) < 0.001) {
            int v94 = 1;
          }
          else {
            int v94 = -1;
          }
        }
        if (v94 == v93)
        {
          uint64_t v90 = (v90 + 1);
        }
        else
        {
          int v98 = v95 - v96;
          if (v93 == 1)
          {
            addVerticalLine((char *)a1, v92, v98, v90, v333, &v337[1]);
          }
          else if (!v93)
          {
            addHorizontalLine((char *)a1, v92, v98, v90, v333, &v337[1]);
          }
          if (LOBYTE(v337[1])) {
            goto LABEL_114;
          }
          uint64_t v90 = 1;
          int v92 = v91;
          int v93 = v94;
        }
        v88 += 2;
        ++v91;
      }
      while (v89 != v95);
      if (v93 == 1)
      {
        addVerticalLine((char *)a1, v92, 0, v90, v333, &v337[1]);
      }
      else if (!v93)
      {
        addHorizontalLine((char *)a1, v92, 0, v90, v333, &v337[1]);
      }
      if (LOBYTE(v337[1]))
      {
LABEL_114:
        float v17 = "failing findOrthogonalLines";
        goto LABEL_115;
      }
    }
    if (*((int *)a1 + 59) >= 1)
    {
      int v99 = 0;
      uint64_t v100 = 0;
      do
      {
        insertPairIntoInterestingPoints((uint64_t)a1, (int *)(a1[28] + v100), (int *)(a1[28] + v100 + 8), (uint64_t)v335, &v337[1]);
        if (LOBYTE(v337[1])) {
          goto LABEL_114;
        }
        v100 += 16;
        v99 += 2;
      }
      while (*((_DWORD *)a1 + 59) > v99);
    }
    if (*v333) {
      free(*v333);
    }
    char *v333 = 0;
    a1[29] = 0;
    if (debug_auto_trace && *a1) {
      ((void (*)(void, uint64_t, void *, uint64_t))a1[1])(*a1, 1, a1, v90);
    }
    if (debug_auto_trace_syntax) {
      checkSyntax((int *)a1, "findOrthogonalLines");
    }
    unint64_t v101 = *(unsigned int *)a1[16];
    if ((int)v101 >= 1)
    {
      uint64_t v102 = 0;
      uint64_t v103 = a1[18];
      uint64_t v104 = a1[22];
      do
      {
        if (v102) {
          int v105 = 0;
        }
        else {
          int v105 = v101;
        }
        int v106 = v102 + v105 - 1;
        uint64_t v107 = v102 + 1;
        if (v102 + 1 >= v101) {
          int v108 = v101;
        }
        else {
          int v108 = 0;
        }
        int v109 = v107 - v108;
        if (v106 <= 0) {
          int v110 = v101;
        }
        else {
          int v110 = 0;
        }
        float v111 = *(float *)(v103 + 4 * (v106 + v110 - 1));
        float v112 = -2.0;
        float v113 = -1.0;
        float v114 = 0.0;
        float v115 = 0.0;
        while (1)
        {
          float v116 = v111;
          float v111 = *(float *)(v103 + 4 * v106);
          float v117 = v111 - v116;
          float v118 = rintf(v111 - v116);
          float v119 = (float)(v111 - v116) - v118;
          float v120 = vabds_f32(v117, v118);
          if (v120 <= v113)
          {
            float v121 = v114;
            if (v120 <= v112)
            {
              float v119 = v115;
              float v122 = v113;
              float v120 = v112;
            }
            else
            {
              float v122 = v113;
            }
          }
          else
          {
            float v121 = v119;
            float v119 = v114;
            float v122 = v120;
            float v120 = v113;
          }
          if (v106 == v109) {
            break;
          }
          int v123 = v106 + 1;
          if (v123 >= (int)v101) {
            int v124 = v101;
          }
          else {
            int v124 = 0;
          }
          int v106 = v123 - v124;
          float v114 = v121;
          float v115 = v119;
          float v113 = v122;
          float v112 = v120;
        }
        *(float *)(v104 + 4 * v102++) = v121 + v119;
      }
      while (v107 != v101);
    }
    a1[25] = 100;
    uint64_t v125 = malloc_type_malloc(0x4B0uLL, 0x10000403E1C8BA9uLL);
    a1[24] = v125;
    if (!v125)
    {
      uint64_t v285 = "could not allocate corner list";
LABEL_418:
      printf(" ***** %s in autoTrace\n", v285);
      goto LABEL_419;
    }
    int v325 = (void **)(v23 + 2);
    if ((int)v101 < 1) {
      goto LABEL_370;
    }
    unint64_t v126 = 0;
    int32x2_t v328 = vdup_n_s32(v101 >> 1);
    int32x2_t v330 = vdup_n_s32(-(v101 >> 1));
    int8x8_t v326 = (int8x8_t)vdup_n_s32(v101);
    while (1)
    {
      uint64_t v127 = *(int *)a1[16];
      unint64_t v128 = v126 - 2;
      uint64_t v129 = v126 - 2 - v127;
      if ((uint64_t)(v126 - 2) >= v127)
      {
        if (v129 >= v127) {
          v129 %= v127;
        }
      }
      else if (v126 > 1)
      {
        LODWORD(v129) = v126 - 2;
      }
      else
      {
        LODWORD(v129) = v128 + v127;
        if ((uint64_t)(v128 + v127) < 0)
        {
          LODWORD(v129) = v126 - 2;
          if (v127) {
            uint64_t v129 = (uint64_t)(v128 + v127) % v127 + v127;
          }
        }
      }
      if (v126) {
        int v130 = 0;
      }
      else {
        int v130 = *(_DWORD *)a1[16];
      }
      int v131 = v126 + v130 - 1;
      unint64_t v132 = v126 + 1;
      if ((uint64_t)(v126 + 1) >= v127) {
        int v133 = *(_DWORD *)a1[16];
      }
      else {
        int v133 = 0;
      }
      int v134 = v132 - v133;
      uint64_t v135 = v126 + 2 - v127;
      if (v135 >= v127) {
        LODWORD(v135) = v135 % v127;
      }
      if ((uint64_t)(v126 + 2) < v127) {
        LODWORD(v135) = v126 + 2;
      }
      uint64_t v136 = a1[22];
      float v137 = fabsf(*(float *)(v136 + 4 * (int)v129));
      float v138 = fabsf(*(float *)(v136 + 4 * v131));
      float v139 = fabsf(*(float *)(v136 + 4 * v126));
      float v140 = fabsf(*(float *)(v136 + 4 * v134));
      if (v138 == v139 && v137 < v139 && v140 < v139)
      {
        float v161 = v139 * 0.75;
        if (v137 <= v161) {
          int v162 = v131;
        }
        else {
          int v162 = v129;
        }
        if (v140 <= v161) {
          int v163 = v126;
        }
        else {
          int v163 = v132 - v133;
        }
        uint64_t v144 = a1[18];
      }
      else
      {
        if (v138 >= v139 || v140 >= v139) {
          goto LABEL_368;
        }
        uint64_t v144 = a1[18];
        float v145 = *(float *)(v144 + 4 * v131);
        float v146 = *(float *)(v144 + 4 * (int)v129);
        float v147 = v145 - v146;
        float v148 = rintf(v145 - v146);
        float v149 = vabds_f32(v145 - v146, v148);
        float v150 = *(float *)(v144 + 4 * v126);
        float v151 = v150 - v145;
        float v152 = rintf(v150 - v145);
        float v153 = vabds_f32(v150 - v145, v152);
        float v154 = *(float *)(v144 + 4 * v134);
        float v155 = v154 - v150;
        float v156 = rintf(v155);
        float v157 = vabds_f32(v155, v156);
        if (v157 > v153 || (int v158 = v126, v149 > v153))
        {
          if (v149 <= v157) {
            int v158 = v134;
          }
          else {
            int v158 = v131;
          }
        }
        unint64_t v159 = v126 - 3;
        uint64_t v160 = v126 - 3 - v127;
        if ((uint64_t)(v126 - 3) >= v127)
        {
          if (v160 >= v127) {
            LODWORD(v160) = v160 % v127;
          }
        }
        else
        {
          LODWORD(v160) = v126 - 3;
          if (v126 <= 2)
          {
            uint64_t v160 = v159 + v127;
            if ((uint64_t)(v159 + v127) < 0) {
              uint64_t v160 = v160 % v127 + v127;
            }
          }
        }
        float v209 = v147 - v148;
        float v210 = v151 - v152;
        if (v158 == v131)
        {
          float v211 = v146 - *(float *)(v144 + 4 * (int)v160);
          float v212 = v138 * 0.75;
          if ((float)(v209 * (float)(v211 - rintf(v211))) <= 0.0 || v137 <= v212) {
            int v162 = v131;
          }
          else {
            int v162 = v129;
          }
          if ((float)(v209 * v210) <= 0.0 || v139 <= v212) {
            int v163 = v131;
          }
          else {
            int v163 = v126;
          }
        }
        else
        {
          float v215 = v155 - v156;
          if (v126 == v158)
          {
            float v216 = v139 * 0.75;
            if ((float)(v209 * v210) <= 0.0 || v138 <= v216) {
              int v162 = v126;
            }
            else {
              int v162 = v131;
            }
            if ((float)(v210 * v215) <= 0.0 || v140 <= v216) {
              int v163 = v126;
            }
            else {
              int v163 = v134;
            }
          }
          else
          {
            if (v158 != v134) {
              goto LABEL_368;
            }
            float v219 = fabsf(*(float *)(v136 + 4 * (int)v135));
            float v220 = *(float *)(v144 + 4 * (int)v135) - v154;
            float v221 = v220 - rintf(v220);
            float v222 = v140 * 0.75;
            if ((float)(v210 * v215) <= 0.0 || v139 <= v222) {
              int v162 = v134;
            }
            else {
              int v162 = v126;
            }
            if ((float)(v215 * v221) <= 0.0 || v219 <= v222) {
              int v163 = v134;
            }
            else {
              int v163 = v135;
            }
          }
        }
      }
      if (v162 <= 0) {
        int v164 = *(_DWORD *)a1[16];
      }
      else {
        int v164 = 0;
      }
      float v165 = *(float *)(v144 + 4 * v162);
      float v166 = v165 - *(float *)(v144 + 4 * (v162 + v164 - 1));
      float v167 = (float)(v166 - rintf(v166)) + 0.0;
      for (i = v162; i != v163; float v165 = *(float *)(v144 + 4 * i))
      {
        int v169 = i + 1;
        if (v169 >= (int)v127) {
          int v170 = *(_DWORD *)a1[16];
        }
        else {
          int v170 = 0;
        }
        int i = v169 - v170;
        float v171 = *(float *)(v144 + 4 * i) - v165;
        float v167 = v167 + (float)(v171 - rintf(v171));
      }
      uint64_t v172 = v163;
      uint64_t v173 = v163 + 1;
      uint64_t v174 = v162 + v127;
      float v176 = 0.0;
      uint64_t v177 = 5;
      float v178 = 0.0;
      float v179 = 0.0;
      float v180 = 0.0;
      do
      {
        uint64_t v181 = v162 + v177 - 6;
        if (v181 >= v127)
        {
          uint64_t v175 = v162 - v127;
          uint64_t v183 = v175 + v177 - 6;
          if (v183 >= v127) {
            uint64_t v181 = v183 % v127;
          }
          else {
            LODWORD(v181) = v175 + v177 - 6;
          }
        }
        else if (v181 < 0)
        {
          uint64_t v182 = v174 + v177 - 6;
          if (v182 >= 0) {
            LODWORD(v181) = v174 + v177 - 6;
          }
          if (v182 < 0) {
            uint64_t v181 = v182 % v127 + v127;
          }
        }
        if ((int)v181 <= 0) {
          int v184 = *(_DWORD *)a1[16];
        }
        else {
          int v184 = 0;
        }
        float v185 = *(float *)(v144 + 4 * (int)v181);
        float v186 = *(float *)(v144 + 4 * ((int)v181 + v184 - 1));
        if (v173 >= v127)
        {
          if (v173 - v127 >= v127) {
            LODWORD(v187) = v173;
          }
          else {
            LODWORD(v187) = v173 - v127;
          }
          if (v173 - v127 >= v127) {
            uint64_t v187 = (v173 - v127) % v127;
          }
        }
        else
        {
          LODWORD(v187) = v173;
          if (v173 < 0)
          {
            uint64_t v188 = v127 + v173;
            LODWORD(v187) = v127 + v173 < 0 ? v173 : (int)v127 + (int)v173;
            if (v188 < 0) {
              uint64_t v187 = v188 % v127 + v127;
            }
          }
        }
        float v180 = v180 + (float)((float)(v185 - v186) - rintf(v185 - v186));
        if ((int)v187 <= 0) {
          int v189 = *(_DWORD *)a1[16];
        }
        else {
          int v189 = 0;
        }
        float v190 = *(float *)(v144 + 4 * (int)v187) - *(float *)(v144 + 4 * ((int)v187 + v189 - 1));
        float v179 = v179 + (float)(v190 - rintf(v190));
        if (v177 == 3)
        {
          float v178 = v180;
          float v176 = v179;
        }
        ++v173;
        --v177;
      }
      while (v177);
      int v191 = v162 - 4;
      uint64_t v192 = v162 - 4;
      if (v162 - 4 >= (int)v127)
      {
        uint64_t v194 = v191 - v127;
        if (v192 - v127 >= v127) {
          uint64_t v192 = v194 % v127;
        }
        else {
          v192 -= v127;
        }
      }
      else if (v162 <= 3)
      {
        uint64_t v193 = v191 + v127;
        if (v192 + v127 < 0 == __OFADD__(v192, v127)) {
          v192 += v127;
        }
        if (v193 < 0) {
          uint64_t v192 = v193 % v127 + v127;
        }
      }
      v337[1] = 0.0;
      float v336 = 0.0;
      if (LRLine((uint64_t)a1, v192, &v337[1], &v336))
      {
        float v195 = v337[1];
        float v196 = straightLineDistanceDeltaToleranceAtAngle(v337[1]);
        if (v163 >= (int)v127)
        {
          uint64_t v172 = v163 - v127 >= v127 ? (v163 - v127) % v127 : v163 - v127;
        }
        else if (v163 < 0)
        {
          uint64_t v197 = v163 + v127;
          if (v197 < 0 == __OFADD__(v163, v127)) {
            uint64_t v172 = v163 + v127;
          }
          if (v197 < 0) {
            uint64_t v172 = v197 % v127 + v127;
          }
        }
        float v198 = v336;
        v337[0] = 0.0;
        if (LRLine((uint64_t)a1, v172, v337, &v336))
        {
          float v199 = straightLineDistanceDeltaToleranceAtAngle(v195);
          if (vabds_f32(v195 - v337[0], rintf(v195 - v337[0])) >= 0.0625)
          {
            float v200 = fabsf(v167);
            if (v200 >= 0.0625
              && (v198 < v196 || fabsf(v180) < (float)(v200 * 0.3) || (float)(v167 * v180) < 0.0)
              && (v336 < v199 || fabsf(v179) < (float)(v200 * 0.3) || (float)(v167 * v179) < 0.0))
            {
              float v201 = v200 * 0.6;
              float v202 = fabsf(v176);
              BOOL v203 = fabsf(v178) <= v201 && v202 <= v201;
              if (v203)
              {
                if (*((unsigned char *)a1 + 16)) {
                  printf("corner %4d to %4d turn %7.2f rel. turn before %7.4f rel. turn after %7.4f\n", v162, v163, (float)(v167 * 360.0), (float)(v178 / v167), (float)(v176 / v167));
                }
                int v204 = *((_DWORD *)a1 + 51);
                unsigned int v205 = v204 - 1;
                if (v204 < 1
                  || (uint64_t v206 = a1[24], *(_DWORD *)(v206 + 12 * v205 + 4) <= v162)
                  || *(_DWORD *)(v206 + 12 * v205) >= v162)
                {
                  int v207 = *((_DWORD *)a1 + 50);
                  if (v204 >= v207)
                  {
                    uint64_t v225 = (char *)malloc_type_malloc(12 * v207 + 1200, 0x10000403E1C8BA9uLL);
                    if (!v225)
                    {
                      uint64_t v285 = "could not extend corner list";
                      goto LABEL_418;
                    }
                    uint64_t v208 = v225;
                    memmove(v225, (const void *)a1[24], 12 * *((int *)a1 + 50));
                    *((_DWORD *)a1 + 50) += 100;
                    free((void *)a1[24]);
                    a1[24] = v208;
                    int v204 = *((_DWORD *)a1 + 51);
                  }
                  else
                  {
                    uint64_t v208 = (char *)a1[24];
                  }
                  uint64_t v226 = (int32x2_t *)&v208[12 * v204];
                  v226->i32[1] = v163;
                  v226->i32[0] = v162;
                  v226[1].i32[0] = -100;
                  *((_DWORD *)a1 + 51) = v204 + 1;
                  if (!findCorner((uint64_t)a1, v126, 0))
                  {
                    int32x2_t v227 = vsub_s32(*v226, vdup_n_s32(v126));
                    int32x2_t v228 = vabs_s32(vadd_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v330, v227), v326, (int8x8_t)vneg_s32((int32x2_t)vand_s8(v326, (int8x8_t)vcgt_s32(v227, v328)))), v227));
                    if (vcgt_u32((uint32x2_t)vdup_lane_s32(v228, 1), (uint32x2_t)v228).u8[0]) {
                      LODWORD(v126) = *v226;
                    }
                    else {
                      LODWORD(v126) = HIDWORD(*(unint64_t *)v226);
                    }
                  }
                  v226[1].i32[0] = v126;
                  uint64_t v229 = (char *)addInterestingPointAtIndex(v126, 1, (uint64_t)v335);
                  if (!v229) {
                    goto LABEL_419;
                  }
                  uint64_t v230 = v229;
                  if (*((_DWORD *)v229 + 1) == 1)
                  {
                    uint64_t v231 = (char *)a1[26];
                    uint64_t v232 = v230 - v231;
                    uint64_t v233 = (v230 - v231) >> 3;
                    uint64_t v234 = v233 - 1;
                    uint64_t v235 = *((unsigned int *)a1 + 55);
                    int64_t v236 = (int)v235;
                    if (v233 <= (int)v235)
                    {
                      if (v232 > 7)
                      {
                        LODWORD(v237) = v233 - 1;
                      }
                      else
                      {
                        LODWORD(v237) = v234 + v235;
                        if (v234 + (int)v235 < 0)
                        {
                          LODWORD(v237) = v233 - 1;
                          if (v235) {
                            uint64_t v237 = (v234 + (int)v235) % (int)v235 + (int)v235;
                          }
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v237) = v234 - v235;
                      if (v234 - (int)v235 >= (int)v235)
                      {
                        LODWORD(v237) = v233 - 1;
                        if (v235) {
                          uint64_t v237 = (v234 - (int)v235) % (int)v235;
                        }
                      }
                    }
                    uint64_t v238 = v233 + 1;
                    uint64_t v239 = v238 - (int)v235;
                    if (v238 >= (int)v235)
                    {
                      LODWORD(v240) = v238 - v235;
                      if (v239 >= (int)v235)
                      {
                        LODWORD(v240) = v238;
                        if (v235) {
                          uint64_t v240 = v239 % (int)v235;
                        }
                      }
                    }
                    else if (v232 > -9)
                    {
                      LODWORD(v240) = v238;
                    }
                    else
                    {
                      LODWORD(v240) = v238 + v235;
                      if (v238 + (int)v235 < 0)
                      {
                        LODWORD(v240) = v238;
                        if (v235) {
                          uint64_t v240 = (v238 + (int)v235) % (int)v235 + (int)v235;
                        }
                      }
                    }
                    uint64_t v241 = &v231[8 * (int)v237];
                    uint64_t v242 = (int *)(v241 + 4);
                    if ((v241[4] & 2) != 0)
                    {
                      uint64_t v243 = &v231[8 * (int)v240];
                      char v245 = v243[4];
                      unsigned __int16 v244 = (int *)(v243 + 4);
                      if ((v245 & 4) != 0)
                      {
                        uint64_t v246 = &v231[8 * (int)v240];
                        *((_DWORD *)v230 + 1) = 0;
                        if ((int)((v101 & ((*(_DWORD *)v230 - *(_DWORD *)v241) >> 31))
                                 + *(_DWORD *)v230
                                 - *(_DWORD *)v241) >= (int)((v101 & ((*(_DWORD *)v246 - *(_DWORD *)v230) >> 31))
                                                           + *(_DWORD *)v246
                                                           - *(_DWORD *)v230))
                        {
                          int v248 = *v244;
                          if (v240)
                          {
                            *unsigned __int16 v244 = v248 | 1;
                            *(_DWORD *)uint64_t v246 = v226->i32[0];
                          }
                          else
                          {
                            *((_DWORD *)v230 + 1) = v248;
                            *unsigned __int16 v244 = 0;
                          }
                        }
                        else
                        {
                          int v247 = *v242;
                          if (v230 == v231)
                          {
                            *((_DWORD *)v230 + 1) = v247;
                            *uint64_t v242 = 0;
                          }
                          else
                          {
                            *uint64_t v242 = v247 | 1;
                            *(_DWORD *)uint64_t v241 = v226->i32[1];
                          }
                        }
                      }
                    }
                    if ((int)v235 >= 1)
                    {
                      LODWORD(v249) = v235;
                      do
                      {
                        int64_t v250 = v236 - 1;
                        if (!*(_DWORD *)&(*v335)[8 * (v236 - 1) + 4])
                        {
                          if (v235 < (int)v249)
                          {
                            do
                            {
                              *(void *)(a1[26] + 8 * v236 - 8) = *(void *)(a1[26] + 8 * v236);
                              ++v236;
                              int64_t v249 = *((int *)a1 + 55);
                            }
                            while (v236 < v249);
                          }
                          LODWORD(v249) = v249 - 1;
                          *((_DWORD *)a1 + 55) = v249;
                        }
                        int64_t v236 = v250;
                        BOOL v203 = v235-- <= 1;
                      }
                      while (!v203);
                      uint64_t v231 = *v335;
                      int64_t v236 = (int)v249;
                    }
                    qsort(v231, v236, 8uLL, (int (__cdecl *)(const void *, const void *))ipCompare);
                  }
                }
              }
            }
          }
        }
      }
LABEL_368:
      unint64_t v126 = v132;
      if (v132 == v101)
      {
        uint64_t v125 = (void *)a1[24];
LABEL_370:
        qsort(v125, *((int *)a1 + 51), 0xCuLL, (int (__cdecl *)(const void *, const void *))cornerCompare);
        int v251 = *((_DWORD *)a1 + 51);
        if (v251 > 1)
        {
          uint64_t v252 = 0;
          int v253 = (int)v101 >> 1;
          do
          {
            uint64_t v254 = v252++;
            LODWORD(v255) = v252;
            if (v252 >= v251)
            {
              uint64_t v255 = v252 - v251;
              if (v255 >= v251) {
                v255 %= v251;
              }
            }
            uint64_t v256 = a1[24];
            int v257 = *(_DWORD *)(v256 + 12 * v254);
            int v258 = *(_DWORD *)(v256 + 12 * v254 + 4);
            int v259 = v257 - v253;
            int v260 = v257 + v253;
            if (v257 + v253 >= v258) {
              int v261 = 0;
            }
            else {
              int v261 = v101;
            }
            int v262 = v258 - v261;
            if (v259 > v258) {
              int v263 = v258 + v101;
            }
            else {
              int v263 = v262;
            }
            int v264 = *(_DWORD *)(v256 + 12 * (int)v255);
            int v265 = *(_DWORD *)(v256 + 12 * (int)v255 + 4);
            if (v260 >= v264) {
              int v266 = 0;
            }
            else {
              int v266 = v101;
            }
            int v267 = v264 - v266;
            if (v259 > v264) {
              int v268 = v264 + v101;
            }
            else {
              int v268 = v267;
            }
            if (v260 >= v265) {
              int v269 = 0;
            }
            else {
              int v269 = v101;
            }
            int v270 = v265 - v269;
            if (v259 > v265) {
              int v271 = v265 + v101;
            }
            else {
              int v271 = v270;
            }
            if (v268 <= v263 && v271 >= v257)
            {
              int v273 = *(_DWORD *)(v256 + 12 * (int)v255 + 8);
              int v274 = v255 + 1;
              if ((int)v255 + 1 < v251)
              {
                uint64_t v275 = v274;
                uint64_t v276 = 12 * v274;
                do
                {
                  uint64_t v277 = a1[24];
                  uint64_t v255 = v277 + 12 * (int)v255;
                  uint64_t v278 = (uint64_t *)(v277 + v276);
                  uint64_t v279 = *v278;
                  *(_DWORD *)(v255 + 8) = *((_DWORD *)v278 + 2);
                  *(void *)uint64_t v255 = v279;
                  LODWORD(v255) = v275++;
                  v276 += 12;
                }
                while (v275 < *((int *)a1 + 51));
                int v251 = *((_DWORD *)a1 + 51);
              }
              *((_DWORD *)a1 + 51) = --v251;
              uint64_t v280 = *((unsigned int *)a1 + 55);
              if ((int)v280 >= 1)
              {
                unint64_t v281 = *v335 + 4;
                do
                {
                  if (*(v281 - 1) == v273) {
                    *v281 &= ~1u;
                  }
                  v281 += 2;
                  --v280;
                }
                while (v280);
              }
            }
          }
          while (v252 < v251);
        }
        uint64_t v282 = *((unsigned int *)a1 + 55);
        if ((int)v282 < 1)
        {
          LODWORD(v283) = *((_DWORD *)a1 + 55);
        }
        else
        {
          LODWORD(v283) = *((_DWORD *)a1 + 55);
          do
          {
            if (!*(_DWORD *)&(*v335)[8 * (v282 - 1) + 4])
            {
              if (v282 < (int)v283)
              {
                uint64_t v284 = v282;
                do
                {
                  *(void *)(a1[26] + 8 * v284 - 8) = *(void *)(a1[26] + 8 * v284);
                  ++v284;
                  uint64_t v283 = *((int *)a1 + 55);
                }
                while (v284 < v283);
              }
              LODWORD(v283) = v283 - 1;
              *((_DWORD *)a1 + 55) = v283;
            }
            BOOL v203 = v282-- <= 1;
          }
          while (!v203);
        }
        if (v283 || addInterestingPointAtIndex(0, 64, (uint64_t)v335))
        {
          if (debug_auto_trace_syntax) {
            checkSyntax((int *)a1, "findCorners");
          }
          if (debug_auto_trace && *a1) {
            ((void (*)(void, uint64_t, void *))a1[1])(*a1, 2, a1);
          }
          *(void *)uint64_t v337 = 0;
          uint64_t v286 = *(unsigned int *)a1[16];
          if ((int)v286 >= 1)
          {
            uint64_t v287 = 0;
            uint64_t v288 = a1[19];
            uint64_t v289 = a1[20];
            do
            {
              if (v287) {
                uint64_t v290 = 0;
              }
              else {
                uint64_t v290 = v286;
              }
              float v291 = *(float *)(v288 + 4 * (v290 + v287) - 4) - *(float *)(v288 + 4 * v287);
              *(float *)(v289 + 4 * v287++) = v291 - rintf(v291);
            }
            while (v286 != v287);
          }
          if (initInterestingPointList(v333))
          {
            LODWORD(v293) = *((_DWORD *)a1 + 55);
            if ((int)v293 >= 1)
            {
              uint64_t v294 = 0;
              uint64_t v295 = 0;
              int v327 = (int)v286 >> 1;
              uint64_t v296 = 1;
              do
              {
                LODWORD(v297) = ++v295;
                if (v296 >= (int)v293)
                {
                  uint64_t v297 = v296 - (int)v293;
                  if (v297 >= (int)v293) {
                    v297 %= (int)v293;
                  }
                }
                uint64_t v298 = *v335;
                if ((*v335)[v294 + 4])
                {
                  uint64_t v299 = &v298[8 * (int)v297];
                  char v301 = v299[4];
                  uint64_t v300 = v299 + 4;
                  if (v301)
                  {
                    int v302 = *(_DWORD *)&v298[v294];
                    unsigned int v329 = (int *)&v298[8 * (int)v297];
                    uint64_t v331 = v295;
                    int v303 = *v329;
                    Corner = findCorner((uint64_t)a1, v302, 1);
                    if (!Corner) {
                      goto LABEL_498;
                    }
                    int v305 = Corner[1];
                    if (*v300)
                    {
                      int v307 = Corner[1];
                      unsigned int v308 = findCorner((uint64_t)a1, *v329, 1);
                      if (!v308) {
                        goto LABEL_498;
                      }
                      int v305 = v307;
                      int v306 = *v308;
                    }
                    else
                    {
                      int v306 = v303;
                    }
                    if (v303 > v302) {
                      goto LABEL_454;
                    }
                    int v309 = v305 - *(_DWORD *)&v298[v294];
                    if (v309 < 0) {
                      int v309 = *(_DWORD *)&v298[v294] - v305;
                    }
                    if (v309 > v327) {
                      goto LABEL_454;
                    }
                    int v310 = v306 - *v329;
                    if (v310 < 0) {
                      int v310 = *v329 - v306;
                    }
                    if (v310 <= v327) {
                      BOOL v311 = v306 <= v305 - (int)v286;
                    }
                    else {
LABEL_454:
                    }
                      BOOL v311 = v306 <= v305;
                    uint64_t v295 = v331;
                    if (!v311)
                    {
                      int v312 = v306 - v305;
                      int v313 = v306 <= v305 ? v286 : 0;
                      unsigned int v314 = v313 + v312;
                      if (v313 + v312 >= 1)
                      {
                        int v315 = v305;
                        computeAngleSumAndRange((uint64_t)a1, v305, v306, &v337[1], v337);
                        v292.n128_f32[0] = v337[0];
                        float v316 = fabsf(v337[1]);
                        if (v314 <= 0xF && v316 < 0.000027778 && v337[0] < 0.000027778)
                        {
                          if (!appendInterestingPointAtIndex(v315, 2, v333)) {
                            goto LABEL_498;
                          }
                          int v317 = v306;
                          int v318 = 4;
                          goto LABEL_472;
                        }
                        uint64_t v295 = v331;
                        if (v314 >= 0x15 && v316 > 0.0043056 && v316 < 0.027778)
                        {
                          v292.n128_f32[0] = v337[0] / fmaxf(v316, 0.01);
                          if (v292.n128_f32[0] > 0.965 && v292.n128_f32[0] < 1.17)
                          {
                            if (!appendInterestingPointAtIndex(v315, 8, v333)) {
                              goto LABEL_498;
                            }
                            int v317 = v306;
                            int v318 = 16;
LABEL_472:
                            uint64_t appended = appendInterestingPointAtIndex(v317, v318, v333);
                            uint64_t v295 = v331;
                            if (!appended) {
                              goto LABEL_498;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                uint64_t v293 = *((int *)a1 + 55);
                v294 += 8;
                BOOL v203 = v296++ < v293;
              }
              while (v203);
            }
            if (*((int *)a1 + 59) < 1)
            {
LABEL_480:
              if (*v333) {
                free(*v333);
              }
              char *v333 = 0;
              a1[29] = 0;
              if (debug_auto_trace_syntax) {
                checkSyntax((int *)a1, "findShortLinesAndShallowCurves");
              }
              if (debug_auto_trace && *a1) {
                ((void (*)(void, uint64_t, void *, __n128))a1[1])(*a1, 3, a1, v292);
              }
              if ((findNonOrthogonalLines((uint64_t)a1) & 1) == 0)
              {
                float v17 = "failing findNonOrthogonalLines";
                goto LABEL_115;
              }
              if ((findInflectionPoints(a1) & 1) == 0)
              {
                float v17 = "failing findInflectionPoints";
                goto LABEL_115;
              }
              if ((cutUpCurves((uint64_t)a1) & 1) == 0)
              {
                float v17 = "failing cutUpCurves";
                goto LABEL_115;
              }
              if ((coalesceStraightLines(a1) & 1) == 0)
              {
                float v17 = "failing coalesceStraightLines";
                goto LABEL_115;
              }
              if (!extractCurveRecords((uint64_t)a1))
              {
                float v17 = "failing extractCurveRecords";
                goto LABEL_115;
              }
              computeCurveTangents((uint64_t)a1);
              computePoints((uint64_t)a1);
              if ((findSubdividedCurves((uint64_t)a1, v322) & 1) == 0)
              {
                float v17 = "failing findSubdividedCurves";
                goto LABEL_115;
              }
              convertToPaths((uint64_t)a1);
              int v323 = (void *)a1[26];
              if (v323) {
                free(v323);
              }
              *uint64_t v335 = 0;
              a1[27] = 0;
              uint64_t v324 = (void *)a1[30];
              if (v324) {
                free(v324);
              }
              a1[30] = 0;
              a1[31] = 0;
              uint64_t v23 = (int *)(v14 + 32 * v11);
              uint64_t v25 = v325;
              goto LABEL_46;
            }
            int v320 = 0;
            uint64_t v321 = 0;
            LOBYTE(v336) = 0;
            while (1)
            {
              insertPairIntoInterestingPoints((uint64_t)a1, (int *)(a1[28] + v321), (int *)(a1[28] + v321 + 8), (uint64_t)v335, &v336);
              if (LOBYTE(v336)) {
                break;
              }
              v321 += 16;
              v320 += 2;
              if (*((_DWORD *)a1 + 59) <= v320) {
                goto LABEL_480;
              }
            }
          }
LABEL_498:
          float v17 = "failing findShortLinesAndShallowCurves";
          goto LABEL_115;
        }
LABEL_419:
        float v17 = "failing findCorners";
        goto LABEL_115;
      }
    }
  }
  freeAutoTraceStructures((uint64_t)a1);
  a1[16] = v23;
  uint64_t v75 = *v23;
  a1[18] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[22] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[23] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[19] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[20] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  signed int v76 = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[21] = v76;
  if (a1[18] && a1[22] && a1[23] && a1[19] && a1[20] && v76)
  {
    *((_DWORD *)a1 + 34) = v75;
    goto LABEL_62;
  }
  printf(" ***** %s in autoTrace\n", "could not allocate auto trace structures");
  freeAutoTraceStructures((uint64_t)a1);
  return 0;
}

float endPoint(uint64_t a1, int a2, char a3)
{
  int v3 = (_DWORD *)(a1 + 32 * a2);
  if (a3) {
    int v4 = v3[4];
  }
  else {
    int v4 = v3[4] + *v3 - 1;
  }
  return *(float *)(*(void *)(a1 + 32 * a2 + 8) + 8 * v4);
}

char *addPointAtStart(int *a1)
{
  int v2 = a1[4];
  if (v2)
  {
    int v3 = (char *)*((void *)a1 + 1);
LABEL_5:
    int v5 = v2 - 1;
    uint64_t result = &v3[8 * v5];
    ++*a1;
    a1[4] = v5;
    return result;
  }
  int v4 = (char *)malloc_type_malloc(8 * *a1 + 800, 0x100004000313F17uLL);
  if (v4)
  {
    int v3 = v4;
    memmove(v4 + 400, (const void *)(*((void *)a1 + 1) + 8 * a1[4]), 8 * *a1);
    a1[4] = 50;
    a1[1] = *a1 + 100;
    free(*((void **)a1 + 1));
    *((void *)a1 + 1) = v3;
    int v2 = a1[4];
    goto LABEL_5;
  }
  printf(" ***** %s in autoTrace\n", "could not extend extract polygons point list");
  return 0;
}

char *addPointAtEnd(int *a1)
{
  int v2 = *a1;
  int v3 = *a1 + a1[4];
  if (v3 != a1[1])
  {
    int v5 = (char *)*((void *)a1 + 1);
    goto LABEL_5;
  }
  int v4 = (char *)malloc_type_malloc(8 * (v2 + 100), 0x100004000313F17uLL);
  if (v4)
  {
    int v5 = v4;
    memmove(v4 + 400, (const void *)(*((void *)a1 + 1) + 8 * a1[4]), 8 * *a1);
    a1[4] = 50;
    a1[1] = *a1 + 100;
    free(*((void **)a1 + 1));
    *((void *)a1 + 1) = v5;
    int v2 = *a1;
    int v3 = *a1 + a1[4];
LABEL_5:
    uint64_t result = &v5[8 * v3];
    *a1 = v2 + 1;
    return result;
  }
  printf(" ***** %s in autoTrace\n", "could not extend extract polygons point list");
  return 0;
}

void freeAutoTraceStructures(uint64_t a1)
{
  int v2 = *(void **)(a1 + 144);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 144) = 0;
  }
  int v3 = *(void **)(a1 + 176);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 176) = 0;
  }
  int v4 = *(void **)(a1 + 184);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 184) = 0;
  }
  int v5 = *(void **)(a1 + 152);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 160);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 160) = 0;
  }
  float v7 = *(void **)(a1 + 168);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 168) = 0;
  }
  *(_DWORD *)(a1 + 136) = 0;
}

BOOL initInterestingPointList(void *a1)
{
  a1[1] = 100;
  int v2 = malloc_type_malloc(0x320uLL, 0x100004000313F17uLL);
  *a1 = v2;
  if (!v2) {
    printf(" ***** %s in autoTrace\n", "could not allocate interesting points list");
  }
  return v2 != 0;
}

char *addHorizontalLine(char *result, int a2, int a3, int a4, char **a5, unsigned char *a6)
{
  uint64_t v6 = *((void *)result + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(_DWORD *)v6;
  *a6 = 0;
  if (a4 >= 10)
  {
    int v9 = a3;
    int v10 = a3 <= 0 ? v8 : 0;
    if (vabds_f32(*(float *)(v7 + 8 * a2 + 4), *(float *)(v7 + 8 * (a3 + v10 - 1) + 4)) < 0.001)
    {
      if (a2 >= a3)
      {
        float v18 = NAN;
      }
      else
      {
        int v13 = 0;
        float v14 = 0.0;
        int v15 = a2;
        do
        {
          float v14 = v14 + *(float *)(v7 + 8 * v15 + 4);
          ++v13;
          int v16 = v15 + 1;
          if (v16 >= v8) {
            int v17 = v8;
          }
          else {
            int v17 = 0;
          }
          int v15 = v16 - v17;
        }
        while (v15 < a3);
        float v18 = v14 / (float)v13;
      }
      float v19 = v18 + -0.023;
      float v20 = v18 + 0.023;
      do
      {
        if (a2 <= 0) {
          int v21 = v8;
        }
        else {
          int v21 = 0;
        }
        int v22 = v21 + a2;
        a2 = v22 - 1;
        float v23 = *(float *)(v7 + 8 * (v22 - 1) + 4);
      }
      while (v23 >= v19 && v23 <= v20);
      if (v22 >= v8) {
        int v25 = v8;
      }
      else {
        int v25 = 0;
      }
      int v26 = v22 - v25;
      while (1)
      {
        float v27 = *(float *)(v7 + 8 * v9 + 4);
        if (v27 < v19 || v27 > v20) {
          break;
        }
        if (v9 + 1 >= v8) {
          int v29 = v8;
        }
        else {
          int v29 = 0;
        }
        int v9 = v9 + 1 - v29;
      }
      if (result[18]) {
        printf("found completely horizontal line from %d to %d (length %d)\n", v26, v9, a4);
      }
      uint64_t result = appendInterestingPointAtIndex(v26, 2, a5);
      if (!result || (uint64_t result = appendInterestingPointAtIndex(v9, 4, a5)) == 0) {
        *a6 = 1;
      }
    }
  }
  return result;
}

char *addVerticalLine(char *result, int a2, int a3, int a4, char **a5, unsigned char *a6)
{
  uint64_t v6 = *((void *)result + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(_DWORD *)v6;
  *a6 = 0;
  if (a4 >= 10)
  {
    int v9 = a3;
    int v10 = a3 <= 0 ? v8 : 0;
    if (vabds_f32(*(float *)(v7 + 8 * a2), *(float *)(v7 + 8 * (a3 + v10 - 1))) < 0.001)
    {
      if (a2 >= a3)
      {
        float v18 = NAN;
      }
      else
      {
        int v13 = 0;
        float v14 = 0.0;
        int v15 = a2;
        do
        {
          float v14 = v14 + *(float *)(v7 + 8 * v15);
          ++v13;
          int v16 = v15 + 1;
          if (v16 >= v8) {
            int v17 = v8;
          }
          else {
            int v17 = 0;
          }
          int v15 = v16 - v17;
        }
        while (v15 < a3);
        float v18 = v14 / (float)v13;
      }
      float v19 = v18 + -0.023;
      float v20 = v18 + 0.023;
      do
      {
        if (a2 <= 0) {
          int v21 = v8;
        }
        else {
          int v21 = 0;
        }
        int v22 = v21 + a2;
        a2 = v22 - 1;
        float v23 = *(float *)(v7 + 8 * (v22 - 1));
      }
      while (v23 >= v19 && v23 <= v20);
      if (v22 >= v8) {
        int v25 = v8;
      }
      else {
        int v25 = 0;
      }
      int v26 = v22 - v25;
      for (uint64_t i = 8 * a3; ; uint64_t i = 8 * v9)
      {
        float v28 = *(float *)(v7 + i);
        if (v28 < v19 || v28 > v20) {
          break;
        }
        if (v9 + 1 >= v8) {
          int v30 = v8;
        }
        else {
          int v30 = 0;
        }
        int v9 = v9 + 1 - v30;
      }
      if (result[18]) {
        printf("found completely vertical line from %d to %d (length %d)\n", v26, v9, a4);
      }
      uint64_t result = appendInterestingPointAtIndex(v26, 2, a5);
      if (!result || (uint64_t result = appendInterestingPointAtIndex(v9, 4, a5)) == 0) {
        *a6 = 1;
      }
    }
  }
  return result;
}

uint64_t insertPairIntoInterestingPoints(uint64_t result, int *a2, int *a3, uint64_t a4, unsigned char *a5)
{
  *a5 = 0;
  int v5 = *a2;
  int v6 = a2[1];
  int v7 = *a3;
  int v8 = a3[1];
  int v9 = (v8 & 4) == 0 || (a2[1] & 2) == 0;
  if (v5 == v7) {
    return result;
  }
  int64_t v11 = *(unsigned int *)(a4 + 12);
  if ((int)v11 < 1) {
    goto LABEL_156;
  }
  uint64_t v86 = result;
  int v85 = **(_DWORD **)(result + 128);
  __int16 v88 = 0;
  int v14 = indexOfNewInterestingPointAtPointIndex(v5, a4, (unsigned char *)&v88 + 1);
  uint64_t result = indexOfNewInterestingPointAtPointIndex(v7, a4, &v88);
  int v15 = result;
  uint64_t v16 = v14 + 1;
  uint64_t v17 = v16 - v11;
  if (v16 >= v11)
  {
    if (v17 >= v11) {
      v17 %= (unint64_t)v11;
    }
  }
  else
  {
    LODWORD(v17) = v14 + 1;
    if (v14 <= -2)
    {
      LODWORD(v17) = v16 + v11;
      if (v16 + v11 < 0) {
        LODWORD(v17) = v11 - -(int)v17 % v11;
      }
    }
  }
  uint64_t v18 = v14 - 1;
  uint64_t v19 = v18 - v11;
  if (v18 >= v11)
  {
    if (v19 >= v11) {
      v19 %= (unint64_t)v11;
    }
  }
  else
  {
    LODWORD(v19) = v14 - 1;
    if (v14 <= 0)
    {
      LODWORD(v19) = v18 + v11;
      if (v18 + v11 < 0) {
        LODWORD(v19) = v11 - -(int)v19 % v11;
      }
    }
  }
  uint64_t v20 = *(void *)a4;
  if (v14 != result)
  {
    int v22 = (int *)(v20 + 8 * v14);
    if (result == v17)
    {
      if (HIBYTE(v88) && !(_BYTE)v88)
      {
        unsigned int v23 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if ((v23 & 0xA) != 0)
        {
          if (((v23 >> 1) & 1 & ~v9) == 0 && (v23 & 2) == 0 && debug_auto_trace_syntax)
          {
            int v84 = "breaking 3";
            uint64_t v24 = v86;
            int v25 = a2;
            int v26 = v14;
            int v27 = 1;
            float v28 = a3;
LABEL_110:
            int v55 = 0;
LABEL_117:
            uint64_t result = pairInsertError(v24, v25, v26, v27, v28, v15, v55, a4, v84);
            goto LABEL_158;
          }
          goto LABEL_158;
        }
        goto LABEL_156;
      }
      if (HIBYTE(v88) && (_BYTE)v88)
      {
        int v32 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if (v9)
        {
          if ((v32 & 8) != 0) {
            goto LABEL_158;
          }
        }
        else if ((v32 & 2) != 0)
        {
          goto LABEL_158;
        }
        if ((v32 & 0xA) == 0) {
          goto LABEL_156;
        }
        if (!debug_auto_trace_syntax) {
          goto LABEL_158;
        }
        int v84 = "merge 1";
        uint64_t v24 = v86;
        int v25 = a2;
        int v26 = v14;
        int v27 = 1;
LABEL_115:
        float v28 = a3;
        goto LABEL_116;
      }
      if (!(HIBYTE(v88) | v88))
      {
        int v42 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if (v42 != 1)
        {
          if ((v42 & 4) != 0 && (*(_DWORD *)(v20 + 8 * (int)v19 + 4) & 2) != 0)
          {
            int v5 = *(_DWORD *)(v20 + 8 * (int)v19);
            *int v22 = v7;
          }
          else if ((v42 & 2) != 0)
          {
            goto LABEL_158;
          }
          goto LABEL_156;
        }
        uint64_t v43 = (int *)(v20 + 8 * v14);
        Corner = findCorner(v86, *v22, 1);
        int v34 = v43;
        int v45 = *v43 - v5;
        if (v85 >= 0) {
          int v46 = v85;
        }
        else {
          int v46 = v85 + 1;
        }
        int v47 = -(v46 >> 1);
        if (v45 >= v47) {
          int v48 = 0;
        }
        else {
          int v48 = v85;
        }
        int v49 = v48 + v45;
        if (v49 < 0) {
          int v49 = -v49;
        }
        int v50 = v7 - *v43;
        if (v50 >= v47) {
          int v51 = 0;
        }
        else {
          int v51 = v85;
        }
        int v52 = v51 + v50;
        if (v52 < 0) {
          int v52 = -v52;
        }
        if (v49 < v52)
        {
          if (Corner)
          {
LABEL_99:
            int v5 = Corner[2];
            goto LABEL_156;
          }
LABEL_147:
          *int v34 = v5;
          goto LABEL_156;
        }
LABEL_153:
        if (Corner)
        {
          int v7 = Corner[2];
          goto LABEL_156;
        }
LABEL_155:
        *int v34 = v7;
        goto LABEL_156;
      }
      if (!HIBYTE(v88) && (_BYTE)v88)
      {
        int v58 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if ((v58 & 2) != 0)
        {
          *int v22 = v5;
          goto LABEL_156;
        }
        if (v58 != 1)
        {
          if (!debug_auto_trace_syntax) {
            goto LABEL_158;
          }
          int v84 = "merge 2";
          uint64_t v24 = v86;
          int v25 = a2;
          int v26 = v14;
          int v27 = 0;
          goto LABEL_115;
        }
        int v59 = v22;
        Corner = findCorner(v86, *v22, 1);
        int v34 = v59;
        int v60 = *v59 - v5;
        if (v85 >= 0) {
          int v61 = v85;
        }
        else {
          int v61 = v85 + 1;
        }
        int v62 = -(v61 >> 1);
        if (v60 >= v62) {
          int v63 = 0;
        }
        else {
          int v63 = v85;
        }
        int v64 = v63 + v60;
        if (v64 < 0) {
          int v64 = -v64;
        }
        int v65 = v7 - *v59;
        if (v65 >= v62) {
          int v66 = 0;
        }
        else {
          int v66 = v85;
        }
        int v67 = v66 + v65;
        if (v67 < 0) {
          int v67 = -v67;
        }
        if (v64 < v67)
        {
          if (Corner) {
            goto LABEL_99;
          }
          goto LABEL_147;
        }
        goto LABEL_153;
      }
      if (!debug_auto_trace_syntax) {
        goto LABEL_158;
      }
      BOOL v36 = HIBYTE(v88) != 0;
      BOOL v53 = v88 != 0;
      signed int v54 = "syntax 2";
    }
    else
    {
      uint64_t v30 = (int)result - 1;
      uint64_t v31 = v30 - v11;
      if (v30 >= v11)
      {
        if (v31 >= v11) {
          v31 %= (unint64_t)v11;
        }
      }
      else
      {
        LODWORD(v31) = result - 1;
        if ((int)result <= 0)
        {
          LODWORD(v31) = v30 + v11;
          if (v30 + v11 < 0) {
            LODWORD(v31) = v11 - -(int)v31 % v11;
          }
        }
      }
      int v34 = (int *)(v20 + 8 * (int)v31);
      if (HIBYTE(v88) | v88) {
        char v35 = 1;
      }
      else {
        char v35 = v9;
      }
      if (v35)
      {
        BOOL v36 = HIBYTE(v88) != 0;
        BOOL v37 = HIBYTE(v88) == 0;
        if ((_BYTE)v88) {
          BOOL v37 = 1;
        }
        if ((v37 | v9))
        {
          if (HIBYTE(v88)) {
            BOOL v38 = 1;
          }
          else {
            BOOL v38 = v88 == 0;
          }
          if (v38) {
            char v39 = 1;
          }
          else {
            char v39 = v9;
          }
          if ((v39 & 1) == 0)
          {
            if ((*(unsigned char *)(v20 + 8 * (int)result + 4) & 4) != 0 && (*(unsigned char *)(v20 + 8 * v14 + 4) & 2) != 0)
            {
              *int v22 = v5;
              uint64_t v56 = v5 + 1;
              uint64_t v57 = v56 - v11;
              if (v56 >= v11)
              {
                if (v57 >= v11) {
                  v57 %= (unint64_t)v11;
                }
              }
              else
              {
                LODWORD(v57) = v5 + 1;
                if (v5 <= -2)
                {
                  uint64_t v57 = v11 + v56;
                  if (v11 + v56 < 0) {
                    uint64_t v57 = v57 % v11 + v11;
                  }
                }
              }
              while (result != v57)
              {
                uint64_t v74 = v20 + 8 * (int)v57;
                int v76 = *(_DWORD *)(v74 + 4);
                uint64_t v75 = (_DWORD *)(v74 + 4);
                if ((v76 & 0xFFFFFFF9) == 0) {
                  *uint64_t v75 = 0;
                }
                uint64_t v77 = (int)v57 + 1;
                uint64_t v78 = v77 - v11;
                if (v77 >= v11)
                {
                  LODWORD(v57) = v77 - v11;
                  if (v78 >= v11) {
                    uint64_t v57 = v78 % (unint64_t)v11;
                  }
                }
                else
                {
                  BOOL v71 = (int)v57 <= -2;
                  LODWORD(v57) = v57 + 1;
                  if (v71)
                  {
                    uint64_t v57 = v77 + v11;
                    if (v77 + v11 < 0) {
                      uint64_t v57 = v57 % v11 + v11;
                    }
                  }
                }
              }
            }
            goto LABEL_156;
          }
          if (HIBYTE(v88)) {
            BOOL v40 = v88 == 0;
          }
          else {
            BOOL v40 = 1;
          }
          if (v40) {
            char v41 = 1;
          }
          else {
            char v41 = v9;
          }
          if ((v41 & 1) == 0)
          {
            if ((*(unsigned char *)(v20 + 8 * v14 + 4) & 2) != 0 && (*(unsigned char *)(v20 + 8 * (int)result + 4) & 4) != 0)
            {
              uint64_t v72 = v5 + 1;
              uint64_t v73 = v72 - v11;
              if (v72 >= v11)
              {
                if (v73 >= v11) {
                  v73 %= (unint64_t)v11;
                }
              }
              else
              {
                LODWORD(v73) = v5 + 1;
                if (v5 <= -2)
                {
                  uint64_t v73 = v11 + v72;
                  if (v11 + v72 < 0) {
                    uint64_t v73 = v73 % v11 + v11;
                  }
                }
              }
              while (result != v73)
              {
                uint64_t v79 = v20 + 8 * (int)v73;
                int v81 = *(_DWORD *)(v79 + 4);
                uint64_t v80 = (_DWORD *)(v79 + 4);
                if ((v81 & 0xFFFFFFF9) == 0) {
                  *uint64_t v80 = 0;
                }
                uint64_t v82 = (int)v73 + 1;
                uint64_t v83 = v82 - v11;
                if (v82 >= v11)
                {
                  LODWORD(v73) = v82 - v11;
                  if (v83 >= v11) {
                    uint64_t v73 = v83 % (unint64_t)v11;
                  }
                }
                else
                {
                  BOOL v71 = (int)v73 <= -2;
                  LODWORD(v73) = v73 + 1;
                  if (v71)
                  {
                    uint64_t v73 = v82 + v11;
                    if (v82 + v11 < 0) {
                      uint64_t v73 = v73 % v11 + v11;
                    }
                  }
                }
              }
              goto LABEL_156;
            }
            BOOL v36 = 1;
          }
        }
        else if ((*(unsigned char *)(v20 + 8 * v14 + 4) & 2) != 0)
        {
          goto LABEL_155;
        }
      }
      else
      {
        if ((*(unsigned char *)(v20 + 8 * v14 + 4) & 2) != 0 && (*(unsigned char *)(v20 + 8 * (int)v31 + 4) & 4) != 0)
        {
          *int v22 = v5;
          *int v34 = v7;
          goto LABEL_158;
        }
        BOOL v36 = 0;
      }
      if ((v9 & 1) == 0 && (*(unsigned char *)(v20 + 8 * (int)v31 + 4) & 2) != 0 || !debug_auto_trace_syntax) {
        goto LABEL_158;
      }
      BOOL v53 = v88 != 0;
      signed int v54 = "breaking 4";
    }
    uint64_t result = pairInsertError(v86, a2, v14, v36, a3, result, v53, a4, v54);
    goto LABEL_158;
  }
  if (HIBYTE(v88) | v88)
  {
    if (!HIBYTE(v88) && (_BYTE)v88)
    {
      unsigned int v29 = *(_DWORD *)(v20 + 8 * (int)v19 + 4);
      if ((v29 & 0xA) == 0) {
        goto LABEL_156;
      }
      if (((v29 >> 1) & 1 & ~v9) != 0 || !debug_auto_trace_syntax) {
        goto LABEL_158;
      }
      int v84 = "breaking 2";
      uint64_t v24 = v86;
      int v25 = a2;
      int v26 = v14;
      int v27 = 0;
      float v28 = a3;
      int v15 = v14;
LABEL_116:
      int v55 = 1;
      goto LABEL_117;
    }
    if (*(_DWORD *)(v86 + 220) == 1)
    {
      int v33 = *(_DWORD *)(v20 + 8 * v14 + 4);
      if (v33 == 64)
      {
        a2[1] = v6 & 0xFFFFFFBF;
        goto LABEL_156;
      }
      if (v33 == 1) {
        goto LABEL_156;
      }
    }
    if (debug_auto_trace_syntax) {
      pairInsertError(v86, a2, v14, HIBYTE(v88) != 0, a3, v14, v88 != 0, a4, "syntax 1");
    }
LABEL_156:
    uint64_t result = (uint64_t)addInterestingPointAtIndex(v5, v6, a4);
    if (!result || (uint64_t result = (uint64_t)addInterestingPointAtIndex(v7, v8, a4)) == 0)
    {
      *a5 = 1;
      return result;
    }
    goto LABEL_158;
  }
  unsigned int v21 = *(_DWORD *)(v20 + 8 * (int)v19 + 4);
  if ((v21 & 0xA) == 0) {
    goto LABEL_156;
  }
  if (((v21 >> 1) & 1 & ~v9) != 0) {
    goto LABEL_158;
  }
  if (v9)
  {
    if ((v21 & 8) != 0 || (v21 & 2) != 0 || !debug_auto_trace_syntax) {
      goto LABEL_158;
    }
    goto LABEL_109;
  }
  if (debug_auto_trace_syntax && ((v21 & 8) == 0 || (*(unsigned char *)(v20 + 8 * v14 + 4) & 0x10) == 0))
  {
LABEL_109:
    int v84 = "breaking 1";
    uint64_t v24 = v86;
    int v25 = a2;
    int v26 = v14;
    int v27 = 0;
    float v28 = a3;
    int v15 = v14;
    goto LABEL_110;
  }
LABEL_158:
  uint64_t v68 = *(unsigned int *)(a4 + 12);
  if ((int)v68 >= 1)
  {
    LODWORD(v69) = *(_DWORD *)(a4 + 12);
    do
    {
      if (!*(_DWORD *)(*(void *)a4 + 8 * (v68 - 1) + 4))
      {
        if (v68 < (int)v69)
        {
          uint64_t v70 = v68;
          do
          {
            *(void *)(*(void *)a4 + 8 * v70 - 8) = *(void *)(*(void *)a4 + 8 * v70);
            ++v70;
            uint64_t v69 = *(int *)(a4 + 12);
          }
          while (v70 < v69);
        }
        LODWORD(v69) = v69 - 1;
        *(_DWORD *)(a4 + 12) = v69;
      }
      BOOL v71 = v68-- <= 1;
    }
    while (!v71);
  }
  return result;
}

int *checkSyntax(int *result, const char *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[55];
  if ((int)v2 < 1) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v36 = 1 - v2;
  uint64_t v7 = result[55] - 1;
  while (1)
  {
    LODWORD(v8) = v5 + 1;
    if (v5 + 1 >= v2)
    {
      uint64_t v8 = v36 + v5;
      if (v36 + v5 >= v2) {
        v8 %= v2;
      }
    }
    uint64_t v9 = *(void *)(v3 + 208);
    uint64_t v10 = v9 + v4;
    if (!*(_DWORD *)(v9 + v4 + 4))
    {
      __sprintf_chk(v37, 0, 0x100uLL, "zero mask (at %d)", v5);
      uint64_t result = (int *)printf(" ***** %s in autoTrace\n", v37);
      char v6 = 1;
    }
    int v11 = *(_DWORD *)(v9 + v4);
    int v12 = *(_DWORD *)(v9 + 8 * (int)v8);
    if (v11 >= v12)
    {
      if (v8)
      {
        if (v5) {
          goto LABEL_14;
        }
        if (v11 >= **(_DWORD **)(v3 + 128) + v12)
        {
          int v13 = 0;
LABEL_15:
          __sprintf_chk(v37, 0, 0x100uLL, "indexes out of order (at %d)", v13);
          uint64_t result = (int *)printf(" ***** %s in autoTrace\n", v37);
          char v6 = 1;
        }
      }
      else if (v11 >= **(_DWORD **)(v3 + 128) + v12)
      {
LABEL_14:
        int v13 = v5;
        goto LABEL_15;
      }
    }
    if (*(unsigned char *)(v10 + 4))
    {
      uint64_t result = findCorner(v3, *(_DWORD *)(v9 + v4), 0);
      if (!result)
      {
        __sprintf_chk(v37, 0, 0x100uLL, "corner at point index %d not found (at %d)", *(_DWORD *)(v9 + v4), v5);
        uint64_t result = (int *)printf(" ***** %s in autoTrace\n", v37);
        char v6 = 1;
      }
    }
    int v14 = *(_DWORD *)(v10 + 4);
    if ((v14 & 8) != 0 && (*(unsigned char *)(v9 + 8 * (int)v8 + 4) & 0x10) == 0)
    {
      __sprintf_chk(v37, 0, 0x100uLL, "missing curve end for curve begin (at %d)", v5);
      uint64_t result = (int *)printf(" ***** %s in autoTrace\n", v37);
      int v14 = *(_DWORD *)(v10 + 4);
      char v6 = 1;
    }
    if ((v14 & 2) != 0 && (*(unsigned char *)(v9 + 8 * (int)v8 + 4) & 4) == 0)
    {
      __sprintf_chk(v37, 0, 0x100uLL, "missing straight line end for straight line begin (at %d)", v5);
      uint64_t result = (int *)printf(" ***** %s in autoTrace\n", v37);
      int v14 = *(_DWORD *)(v10 + 4);
      char v6 = 1;
    }
    if (v5) {
      int v15 = 0;
    }
    else {
      int v15 = v2;
    }
    int v16 = v15 + v5 - 1;
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(v3 + 208);
    if ((v14 & 0x10) != 0 && (*(unsigned char *)(v18 + 8 * v16 + 4) & 8) == 0)
    {
      __sprintf_chk(v37, 0, 0x100uLL, "missing curve begin for curve end (at %d)", v5);
      uint64_t result = (int *)printf(" ***** %s in autoTrace\n", v37);
      int v14 = *(_DWORD *)(v10 + 4);
      char v6 = 1;
    }
    if ((v14 & 4) == 0 || (*(unsigned char *)(v18 + 8 * v17 + 4) & 2) != 0) {
      break;
    }
    __sprintf_chk(v37, 0, 0x100uLL, "missing straight line begin for straight line end (at %d)", v5);
    uint64_t result = (int *)printf(" ***** %s in autoTrace\n", v37);
    if (v7 == v5) {
      goto LABEL_38;
    }
    char v6 = 1;
LABEL_36:
    v4 += 8;
    ++v5;
  }
  if (v7 != v5) {
    goto LABEL_36;
  }
  if (v6)
  {
LABEL_38:
    int v19 = *(_DWORD *)(v3 + 220);
    putchar(10);
    printf("  ---- after %s ----\n", a2);
    if (v19 >= 1)
    {
      for (int i = 0; i != v19; ++i)
        printIPIndex(*(void *)(v3 + 208), i);
    }
    putchar(10);
    putchar(10);
    if (*(int *)(v3 + 204) >= 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      do
      {
        printf("  corner %d (%d-%d) cpi %d\n", v22++, *(_DWORD *)(*(void *)(v3 + 192) + v21), *(_DWORD *)(*(void *)(v3 + 192) + v21 + 4), *(_DWORD *)(*(void *)(v3 + 192) + v21 + 8));
        v21 += 12;
      }
      while (v22 < *(int *)(v3 + 204));
    }
    unsigned int v23 = *(unsigned int **)(v3 + 128);
    uint64_t v24 = *v23;
    int v25 = (float *)*((void *)v23 + 1);
    float v26 = *v25;
    float v27 = v25[1];
    if ((int)v24 >= 1)
    {
      float v28 = v25 + 1;
      uint64_t v29 = v24;
      float v30 = v27;
      float v31 = v26;
      while (1)
      {
        float v33 = *(v28 - 1);
        float v32 = *v28;
        float v34 = v33 > v26 ? *(v28 - 1) : v26;
        if (v33 >= v31) {
          float v26 = v34;
        }
        else {
          float v31 = *(v28 - 1);
        }
        if (v32 < v30) {
          break;
        }
        if (v32 <= v27) {
          goto LABEL_55;
        }
LABEL_56:
        v28 += 2;
        float v27 = v32;
        if (!--v29) {
          return (int *)printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v24, v31, v26, v30, v32);
        }
      }
      float v30 = *v28;
LABEL_55:
      float v32 = v27;
      goto LABEL_56;
    }
    float v31 = *v25;
    float v30 = v25[1];
    float v32 = v30;
    return (int *)printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v24, v31, v26, v30, v32);
  }
  return result;
}

uint64_t LRLine(uint64_t a1, uint64_t a2, _DWORD *a3, float *a4)
{
  BOOL v16 = 0;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  computeATRRecord((uint64_t)v13, *(int **)(a1 + 128), a2, 5);
  uint64_t v8 = ATRLinearRegression((uint64_t)v13, &v16, (float *)&v15 + 1, (float *)&v15);
  if (v8)
  {
    int v9 = v16;
    float v10 = *(float *)&v15;
    *a4 = ATRMaxDistanceFromLine(v13, v16, *((float *)&v15 + 1), *(float *)&v15);
    ATRAngleOfLine(v10, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), a2, 5, v9);
    *a3 = v11;
  }
  return v8;
}

float straightLineDistanceDeltaToleranceAtAngle(float a1)
{
  uint64_t v1 = 0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  float v2 = a1 - (float)((float)(int)floorf(a1 * 4.0) * 0.25);
  if (v2 > 0.125) {
    float v2 = 0.25 - v2;
  }
  float v3 = v2 * 360.0;
  while (1)
  {
    uint64_t v4 = v1 + 2;
    if (v1 == 14) {
      break;
    }
    uint64_t v5 = &SLDDT[v1];
    float v6 = *v5;
    float v7 = v5[2];
    BOOL v8 = *v5 > v3 || v3 > v7;
    uint64_t v1 = v4;
    if (!v8)
    {
      float v9 = SLDDT[((v4 - 2) & 0xFFFFFFFE) + 1];
      return v9 + (float)((float)((float)(v3 - v6) / (float)(v7 - v6)) * (float)(SLDDT[(v4 & 0xFFFFFFFE) + 1] - v9));
    }
  }
  __sprintf_chk(v11, 0, 0x100uLL, "angle %.3f not found in straightLineDistanceDeltaToleranceAtAngle", (float)(a1 * 360.0));
  printf(" ***** %s in autoTrace\n", v11);
  return 0.099;
}

int *findCorner(uint64_t a1, int a2, int a3)
{
  int v3 = **(_DWORD **)(a1 + 128);
  uint64_t v4 = *(_DWORD **)(a1 + 192);
  if (*v4 <= v4[1]) {
    int v5 = 0;
  }
  else {
    int v5 = **(_DWORD **)(a1 + 128);
  }
  int v6 = *v4 - v5;
  int v7 = *(_DWORD *)(a1 + 204);
  BOOL v8 = &v4[3 * v7];
  int v9 = *(v8 - 2);
  if (v7 > 1)
  {
    if (v9 >= *(v8 - 3)) {
      int v10 = 0;
    }
    else {
      int v10 = **(_DWORD **)(a1 + 128);
    }
    v9 += v10;
  }
  if (v3 + a2 <= v9) {
    int v11 = v3 + a2;
  }
  else {
    int v11 = a2;
  }
  if (a2 - v3 >= v6) {
    int v12 = a2 - v3;
  }
  else {
    int v12 = v11;
  }
  if (v7 < 1)
  {
LABEL_38:
    if (a3) {
      printf(" ***** %s in autoTrace\n", "find corner could not find index");
    }
    return 0;
  }
  else
  {
    int v13 = 0;
    int v14 = v3 >> 1;
    int v15 = *(_DWORD *)(a1 + 204);
    do
    {
      int v16 = (v15 + v13) >> 1;
      uint64_t v17 = (uint64_t)(v15 + v13) >> 1;
      uint64_t result = &v4[3 * v16];
      if ((v15 + v13) > 1)
      {
        int v23 = *result;
        int v24 = v4[3 * (int)v17 + 1];
        if (*result + v14 >= v24) {
          int v25 = 0;
        }
        else {
          int v25 = v3;
        }
        int v26 = v24 - v25;
        if (*result - v14 > v24) {
          int v19 = v24 + v3;
        }
        else {
          int v19 = v26;
        }
      }
      else
      {
        int v19 = v4[3 * (int)v17 + 1];
        int v20 = *result;
        if (v19 + v14 >= *result) {
          int v21 = 0;
        }
        else {
          int v21 = v3;
        }
        int v22 = v20 - v21;
        if (v19 - v14 > v20) {
          int v23 = v20 + v3;
        }
        else {
          int v23 = v22;
        }
      }
      if (v19 >= v12)
      {
        int v15 = (v15 + v13) >> 1;
        if (v23 <= v12) {
          return result;
        }
      }
      else
      {
        int v13 = v16 + 1;
      }
    }
    while (v13 < v15);
    while (v4[2] != v12)
    {
      v4 += 3;
      if (!--v7) {
        goto LABEL_38;
      }
    }
    return v4;
  }
}

_DWORD *addInterestingPointAtIndex(int a1, int a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 12);
  int v7 = *(_DWORD **)a3;
  if (v6 < 1)
  {
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    int v9 = *(_DWORD *)(a3 + 12);
    do
    {
      int v10 = (v9 + v8) >> 1;
      if (v7[2 * v10] >= a1) {
        int v9 = (v9 + v8) >> 1;
      }
      else {
        int v8 = v10 + 1;
      }
    }
    while (v8 < v9);
  }
  uint64_t v11 = v8;
  if (v8 < v6 && (int v12 = &v7[2 * v8], *v12 == a1))
  {
    v7[2 * v8 + 1] |= a2;
  }
  else
  {
    int v13 = *(_DWORD *)(a3 + 8);
    if (v6 >= v13)
    {
      int v14 = malloc_type_malloc(8 * (v13 + 100), 0x100004000313F17uLL);
      if (!v14)
      {
        printf(" ***** %s in autoTrace\n", "could not extend interesting points list");
        return 0;
      }
      int v7 = v14;
      memmove(v14, *(const void **)a3, 8 * *(int *)(a3 + 8));
      *(_DWORD *)(a3 + 8) += 100;
      free(*(void **)a3);
      *(void *)a3 = v7;
      int v6 = *(_DWORD *)(a3 + 12);
    }
    int v12 = &v7[2 * v11];
    memmove(v12 + 2, v12, 8 * (v6 - (int)v11));
    ++*(_DWORD *)(a3 + 12);
    *int v12 = a1;
    v12[1] = a2;
  }
  return v12;
}

float computeAngleSumAndRange(uint64_t a1, int a2, int a3, float *a4, float *a5)
{
  uint64_t v5 = *(void *)(a1 + 152);
  float v6 = *(float *)(v5 + 4 * a2);
  float v7 = 0.0;
  float v8 = v6;
  float v9 = v6;
  do
  {
    float v10 = *(float *)(v5 + 4 * a2) - rintf(*(float *)(v5 + 4 * a2) - v6);
    if (v10 >= v8)
    {
      if (v10 > v9) {
        float v9 = v10;
      }
    }
    else
    {
      float v8 = v10;
    }
    float v7 = v7 + *(float *)(*(void *)(a1 + 160) + 4 * a2);
    int v11 = a2 + 1;
    if (a2 + 1 >= **(_DWORD **)(a1 + 128)) {
      int v12 = **(_DWORD **)(a1 + 128);
    }
    else {
      int v12 = 0;
    }
    a2 = v11 - v12;
  }
  while (v11 - v12 != a3);
  *a4 = v7;
  float result = v9 - v8;
  *a5 = v9 - v8;
  return result;
}

char *appendInterestingPointAtIndex(int a1, int a2, char **a3)
{
  int v7 = *((_DWORD *)a3 + 2);
  int v6 = *((_DWORD *)a3 + 3);
  if (v6 < v7)
  {
    float v8 = *a3;
LABEL_5:
    *((_DWORD *)a3 + 3) = v6 + 1;
    float result = &v8[8 * v6];
    *(_DWORD *)float result = a1;
    *((_DWORD *)result + 1) = a2;
    return result;
  }
  float v9 = (char *)malloc_type_malloc(8 * (v7 + 100), 0x100004000313F17uLL);
  if (v9)
  {
    float v8 = v9;
    memmove(v9, *a3, 8 * *((int *)a3 + 2));
    *((_DWORD *)a3 + 2) += 100;
    free(*a3);
    *a3 = v8;
    int v6 = *((_DWORD *)a3 + 3);
    goto LABEL_5;
  }
  printf(" ***** %s in autoTrace\n", "could not extend interesting points list");
  return 0;
}

int *findNonOrthogonalLines(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(int **)(a1 + 128);
  uint64_t v103 = a1 + 224;
  float result = (int *)initInterestingPointList((void *)(a1 + 224));
  if (!result) {
    return result;
  }
  char v110 = 0;
  uint64_t v4 = (uint64_t *)(v1 + 208);
  LODWORD(v5) = *(_DWORD *)(v1 + 220);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    int v108 = 0;
    int v106 = 0;
    if ((int)v2 >= 0) {
      int v7 = v2;
    }
    else {
      int v7 = v2 + 1;
    }
    int v101 = v7 >> 1;
    int v102 = -(v7 >> 1);
    float v8 = 0.0;
    float v9 = 0.0;
    uint64_t v104 = (uint64_t *)(v1 + 208);
    int v105 = (int)v2 >> 1;
    do
    {
      uint64_t v10 = v1;
      uint64_t v11 = v6;
      LODWORD(v1) = v6 + 1;
      if (v6 + 1 >= (int)v5)
      {
        uint64_t v1 = v6 + 1 - (int)v5;
        if (v1 >= (int)v5) {
          v1 %= (int)v5;
        }
      }
      uint64_t v107 = v6 + 1;
      uint64_t v12 = *v4;
      int v13 = (int *)(*v4 + 8 * v6);
      int v14 = (int *)(*v4 + 8 * (int)v1);
      int v15 = *v13;
      int v16 = *v14;
      uint64_t v17 = *v4 + 8 * v11;
      char v19 = *(unsigned char *)(v17 + 4);
      uint64_t v18 = (unsigned char *)(v17 + 4);
      if (v19)
      {
        float result = findCorner(v10, *v13, 1);
        if (!result) {
          return result;
        }
        int v20 = result[1];
      }
      else
      {
        int v20 = *v13;
      }
      char v21 = *(unsigned char *)(v12 + 8 * (int)v1 + 4);
      int v22 = v16;
      uint64_t v1 = v10;
      if (v21)
      {
        int v23 = v20;
        float result = findCorner(v10, *v14, 1);
        if (!result) {
          return result;
        }
        int v22 = *result;
        int v20 = v23;
      }
      if (v16 <= v15)
      {
        int v24 = v20 - *v13;
        if (v24 < 0) {
          int v24 = *v13 - v20;
        }
        uint64_t v6 = v107;
        if (v24 > v105) {
          goto LABEL_26;
        }
        int v25 = v22 - *v14;
        if (v25 < 0) {
          int v25 = *v14 - v22;
        }
        if (v25 <= v105)
        {
          if (v22 <= v20 - (int)v2) {
            goto LABEL_43;
          }
        }
        else
        {
LABEL_26:
          if (v22 <= v20) {
            goto LABEL_43;
          }
        }
      }
      else
      {
        uint64_t v6 = v107;
        if (v22 <= v20) {
          goto LABEL_43;
        }
      }
      int v26 = v22 - v20;
      if (v22 == v20)
      {
        if (*(int *)(v10 + 220) >= 2)
        {
          __sprintf_chk(v111, 0, 0x100uLL, "zero length curve in findNonOrthogonalLines at point index %d");
          goto LABEL_211;
        }
      }
      else if (v26 >= 0xFFFFFFFE && (int)v2 >= 101 && *(int *)(v10 + 220) >= 3)
      {
        __sprintf_chk(v111, 0, 0x100uLL, "findNonOrthogonalLines with reversed point indexes %d and %d");
LABEL_211:
        printf(" ***** %s in autoTrace\n", v111);
        return (int *)1;
      }
      if (v26 <= 0) {
        int v27 = v2;
      }
      else {
        int v27 = 0;
      }
      int v28 = v27 + v26;
      if ((*v18 & 0xA) != 0 || v28 < 21)
      {
LABEL_43:
        uint64_t v4 = v104;
        goto LABEL_44;
      }
      int v30 = v20 + 10;
      uint64_t v31 = v20 + 10;
      uint64_t v4 = v104;
      if (v20 + 10 >= (int)v2)
      {
        uint64_t v33 = v30 - v2;
        if (v31 - v2 >= v2)
        {
          BOOL v34 = v2 == 0;
        }
        else
        {
          LODWORD(v31) = v31 - v2;
          BOOL v34 = 1;
        }
        if (!v34) {
          uint64_t v31 = v33 % v2;
        }
      }
      else if (v20 <= -11)
      {
        uint64_t v32 = v30 + v2;
        if (v31 + v2 < 0 == __OFADD__(v31, v2)) {
          LODWORD(v31) = v31 + v2;
        }
        if (v32 < 0 && v2) {
          uint64_t v31 = v32 % v2 + v2;
        }
      }
      int v35 = v22 - 11;
      LODWORD(v36) = v22 - 11;
      if (v22 - 11 >= (int)v2)
      {
        if (v35 - v2 >= v2)
        {
          if (v2) {
            uint64_t v36 = (v35 - v2) % v2;
          }
        }
        else
        {
          LODWORD(v36) = v36 - v2;
        }
      }
      else if (v22 <= 10)
      {
        uint64_t v37 = v35 + v2;
        if (v37 < 0 == __OFADD__(v35, v2)) {
          LODWORD(v36) = v36 + v2;
        }
        if (v37 < 0 && v2) {
          uint64_t v36 = v37 % v2 + v2;
        }
      }
      if (v31 != v36)
      {
        char v38 = 0;
        int v39 = -1;
        do
        {
          uint64_t v40 = *(void *)(v10 + 144);
          uint64_t v41 = v2 + (int)v31;
          uint64_t v42 = (int)v31 - v2;
          float v43 = 0.0;
          uint64_t v44 = -10;
          float v45 = *(float *)(v40 + 4 * (int)v31);
          float v46 = v45;
          do
          {
            uint64_t v47 = (int)v31 + v44;
            if (v47 >= v2)
            {
              if (v42 + v44 >= v2)
              {
                if (v2) {
                  uint64_t v47 = (v42 + v44) % v2;
                }
              }
              else
              {
                LODWORD(v47) = v42 + v44;
              }
            }
            else if (v47 < 0)
            {
              uint64_t v48 = v41 + v44;
              if (v41 + v44 >= 0) {
                LODWORD(v47) = v41 + v44;
              }
              if (v48 < 0 && v2) {
                uint64_t v47 = v48 % v2 + v2;
              }
            }
            float v49 = *(float *)(v40 + 4 * (int)v47)
                - rintf(*(float *)(v40 + 4 * (int)v47) - *(float *)(v40 + 4 * (int)v31));
            if (v49 > v45) {
              float v50 = v49;
            }
            else {
              float v50 = v45;
            }
            if (v49 >= v46) {
              float v45 = v50;
            }
            else {
              float v46 = v49;
            }
            float v43 = v43 + v49;
            ++v44;
          }
          while (v44 != 11);
          uint64_t v51 = 0;
          float v52 = v43 / 21.0;
          float v53 = (float)(v43 / 21.0) - (float)((float)(int)floorf((float)(v43 / 21.0) * 4.0) * 0.25);
          if (v53 > 0.125) {
            float v53 = 0.25 - v53;
          }
          float v54 = v53 * 360.0;
          do
          {
            uint64_t v55 = v51 + 2;
            if (v51 == 20)
            {
              __sprintf_chk(v111, 0, 0x100uLL, "angle %.3f not found in straightLineAngleDeltaToleranceAtAngle", (float)(v52 * 360.0));
              printf(" ***** %s in autoTrace\n", v111);
              float v62 = 12.235;
              goto LABEL_102;
            }
            uint64_t v56 = &SLADT[v51];
            float v57 = *v56;
            float v58 = v56[2];
            BOOL v59 = *v56 > v54 || v54 > v58;
            uint64_t v51 = v55;
          }
          while (v59);
          float v60 = (float)(v54 - v57) / (float)(v58 - v57);
          float v61 = SLADT[((v55 - 2) & 0xFFFFFFFE) + 1];
          float v62 = v61 + (float)(v60 * (float)(SLADT[(v55 & 0xFFFFFFFE) + 1] - v61));
          if (v62 < 3.1) {
            float v62 = 3.1;
          }
LABEL_102:
          float v63 = v45 - v52;
          if ((float)(v52 - v46) > (float)(v45 - v52)) {
            float v63 = v52 - v46;
          }
          if (v63 <= v62)
          {
            if (v38)
            {
              if (v39 + 1 >= (int)v2) {
                int v64 = v2;
              }
              else {
                int v64 = 0;
              }
              float v65 = v52;
              float v66 = v8;
              if (v52 >= v9)
              {
                float v65 = v9;
                float v66 = v8;
                if (v52 > v8)
                {
                  float v65 = v9;
                  float v66 = v52;
                }
              }
              uint64_t v67 = 0;
              int v68 = v39 + 1 - v64;
              while (1)
              {
                int v69 = v67 + 2;
                if (v67 == 6) {
                  break;
                }
                uint64_t v70 = &SLGADT[v67];
                float v71 = v70[2];
                BOOL v72 = *v70 > v54 || v54 > v71;
                v67 += 2;
                if (!v72)
                {
                  float v73 = (float)(v54 - *v70) / (float)(v71 - *v70);
                  float v74 = SLGADT[((v69 - 2) & 0xFFFFFFFE) + 1];
                  float v75 = v74 + (float)(v73 * (float)(SLGADT[(v69 & 0xFFFFFFFE) + 1] - v74));
                  goto LABEL_121;
                }
              }
              __sprintf_chk(v111, 0, 0x100uLL, "angle %.3f not found in straightLineGatheredAngleDeltaToleranceAtAngle", (float)(v52 * 360.0));
              printf(" ***** %s in autoTrace\n", v111);
              float v75 = 1.0;
LABEL_121:
              if (v31 == v68 && (float)(v66 - v65) <= v75)
              {
                ++v108;
                char v38 = 1;
                int v39 = v31;
                float v9 = v65;
                float v8 = v66;
              }
              else
              {
                int v76 = v106 - 10;
                uint64_t v77 = v106 - 10;
                if (v106 - 10 >= (int)v2)
                {
                  uint64_t v79 = v76 - v2;
                  if (v77 - v2 >= v2)
                  {
                    if (v2) {
                      uint64_t v77 = v79 % v2;
                    }
                  }
                  else
                  {
                    v77 -= v2;
                  }
                }
                else if (v106 <= 9)
                {
                  uint64_t v78 = v76 + v2;
                  if (v77 + v2 < 0 == __OFADD__(v77, v2)) {
                    v77 += v2;
                  }
                  if (v78 < 0 && v2) {
                    uint64_t v77 = v78 % v2 + v2;
                  }
                }
                uint64_t v80 = (v108 + 20);
                int v81 = v80 + v77;
                uint64_t v82 = (int)v80 + (int)v77;
                if ((int)v80 + (int)v77 >= (int)v2)
                {
                  uint64_t v84 = v81 - v2;
                  if (v82 - v2 >= v2)
                  {
                    if (v2) {
                      uint64_t v82 = v84 % v2;
                    }
                  }
                  else
                  {
                    LODWORD(v82) = v82 - v2;
                  }
                }
                else if ((v82 & 0x80000000) != 0)
                {
                  uint64_t v83 = v81 + v2;
                  if (v82 + v2 < 0 == __OFADD__(v82, v2)) {
                    LODWORD(v82) = v82 + v2;
                  }
                  if (v83 < 0 && v2) {
                    uint64_t v82 = v83 % v2 + v2;
                  }
                }
                int v109 = v82;
                if (outputLineAtIndex(v10, v77, v80, (char **)v103, &v109, &v110))
                {
                  int v85 = v36 - v109;
                  if ((int)v36 - v109 >= v101) {
                    int v86 = v2;
                  }
                  else {
                    int v86 = 0;
                  }
                  if (v85 >= v102) {
                    int v87 = -v86;
                  }
                  else {
                    int v87 = v2;
                  }
                  if (v85 + v87 < 9) {
                    goto LABEL_44;
                  }
                  uint64_t v31 = v109 + 9;
                  if (v109 + 9 >= (int)v2)
                  {
                    if (v31 - v2 >= v2)
                    {
                      if (v2) {
                        uint64_t v31 = (v31 - v2) % v2;
                      }
                    }
                    else
                    {
                      LODWORD(v31) = v31 - v2;
                    }
                  }
                  else if (v109 <= -10)
                  {
                    uint64_t v88 = v31 + v2;
                    if (v31 + v2 < 0 == __OFADD__(v31, v2)) {
                      LODWORD(v31) = v31 + v2;
                    }
                    if (v88 < 0 && v2) {
                      uint64_t v31 = v88 % v2 + v2;
                    }
                  }
                }
                char v38 = 0;
                float result = 0;
                if (v110) {
                  return result;
                }
              }
            }
            else
            {
              char v38 = 1;
              int v39 = v31;
              int v106 = v31;
              int v108 = 1;
              float v9 = v52;
              float v8 = v52;
            }
          }
          if ((int)v31 + 1 >= (int)v2) {
            int v89 = v2;
          }
          else {
            int v89 = 0;
          }
          if (v31 != v36) {
            LODWORD(v31) = v31 + 1 - v89;
          }
        }
        while (v31 != v36);
        if (v38)
        {
          int v90 = v106 - 10;
          uint64_t v91 = v106 - 10;
          if (v106 - 10 >= (int)v2)
          {
            uint64_t v93 = v90 - v2;
            if (v91 - v2 >= v2)
            {
              if (v2) {
                uint64_t v91 = v93 % v2;
              }
            }
            else
            {
              v91 -= v2;
            }
          }
          else if (v106 <= 9)
          {
            uint64_t v92 = v90 + v2;
            if (v91 + v2 < 0 == __OFADD__(v91, v2)) {
              v91 += v2;
            }
            if (v92 < 0 && v2) {
              uint64_t v91 = v92 % v2 + v2;
            }
          }
          uint64_t v94 = (v108 + 19);
          int v95 = v94 + v91;
          uint64_t v96 = (int)v94 + (int)v91;
          if ((int)v94 + (int)v91 >= (int)v2)
          {
            uint64_t v98 = v95 - v2;
            if (v96 - v2 >= v2)
            {
              if (v2) {
                uint64_t v96 = v98 % v2;
              }
            }
            else
            {
              LODWORD(v96) = v96 - v2;
            }
          }
          else if ((v96 & 0x80000000) != 0)
          {
            uint64_t v97 = v95 + v2;
            if (v96 + v2 < 0 == __OFADD__(v96, v2)) {
              LODWORD(v96) = v96 + v2;
            }
            if (v97 < 0 && v2) {
              uint64_t v96 = v97 % v2 + v2;
            }
          }
          int v109 = v96;
          outputLineAtIndex(v10, v91, v94, (char **)v103, &v109, &v110);
          if (v110) {
            return 0;
          }
        }
      }
LABEL_44:
      uint64_t v5 = *(int *)(v10 + 220);
    }
    while (v6 < v5);
  }
  if (debug_auto_trace_syntax) {
    checkSyntax((int *)v1, "findNonOrthogonalLines loop");
  }
  if (*(int *)(v1 + 236) < 1)
  {
LABEL_203:
    if (debug_auto_trace_syntax) {
      checkSyntax((int *)v1, "inserts in findNonOrthogonalLines");
    }
    if (*(void *)v103) {
      free(*(void **)v103);
    }
    *(void *)uint64_t v103 = 0;
    *(void *)(v103 + 8) = 0;
    if (debug_auto_trace)
    {
      if (*(void *)v1) {
        (*(void (**)(void, uint64_t, uint64_t))(v1 + 8))(*(void *)v1, 4, v1);
      }
    }
    return (int *)1;
  }
  int v99 = 0;
  uint64_t v100 = 0;
  while (1)
  {
    insertPairIntoInterestingPoints(v1, (int *)(*(void *)(v1 + 224) + v100), (int *)(*(void *)(v1 + 224) + v100 + 8), (uint64_t)v4, &v110);
    if (v110) {
      return 0;
    }
    v100 += 16;
    v99 += 2;
    if (*(_DWORD *)(v1 + 236) <= v99) {
      goto LABEL_203;
    }
  }
}

int *findInflectionPoints(void *a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)a1[16];
  int v3 = (void **)(a1 + 28);
  float result = (int *)initInterestingPointList(a1 + 28);
  if (result)
  {
    uint64_t v5 = a1 + 26;
    int v6 = *((_DWORD *)a1 + 55);
    if (v6 >= 1)
    {
      int v7 = 0;
      uint64_t v66 = (uint64_t)v3;
      while (1)
      {
        int v8 = v7 + 1;
        uint64_t v9 = v6;
        if (v7 + 1 >= v6)
        {
          uint64_t v12 = v8 - (uint64_t)v6;
          LODWORD(v11) = v8 - v9;
          if (v8 - v9 >= v9)
          {
            LODWORD(v11) = v7 + 1;
            if (v9) {
              uint64_t v11 = v12 % v9;
            }
          }
        }
        else if (v7 > -2)
        {
          LODWORD(v11) = v7 + 1;
        }
        else
        {
          uint64_t v10 = v6 + (uint64_t)v8;
          LODWORD(v11) = v9 + v8;
          if (v9 + v8 < 0)
          {
            LODWORD(v11) = v7 + 1;
            if (v9) {
              uint64_t v11 = v10 % v9 + v9;
            }
          }
        }
        uint64_t v13 = *v5;
        uint64_t v14 = *v5 + 8 * v7;
        int v17 = *(_DWORD *)(v14 + 4);
        int v16 = (int *)(v14 + 4);
        char v15 = v17;
        if ((v17 & 0xA) != 0) {
          goto LABEL_14;
        }
        uint64_t v18 = (int *)(v13 + 8 * (int)v11);
        int v19 = *(_DWORD *)(v13 + 8 * v7);
        int v20 = *v18;
        int v21 = *v18 - v19;
        int v22 = *v18 <= v19 ? v2 : 0;
        int v23 = v22 + v21;
        int v67 = v22 + v21;
        if (v15)
        {
          int v25 = v7;
          int v26 = v16;
          int v27 = (int *)(v13 + 8 * (int)v11);
          int v28 = v11;
          float result = findCorner((uint64_t)a1, v19, 1);
          if (!result) {
            return result;
          }
          int v29 = v19;
          LODWORD(v11) = v28;
          uint64_t v18 = v27;
          int v16 = v26;
          int v7 = v25;
          int v24 = result[1];
          while (v29 != v24)
          {
            int v30 = v29 + 1;
            if (v30 >= v2) {
              int v31 = v2;
            }
            else {
              int v31 = 0;
            }
            int v29 = v30 - v31;
            --v23;
            if (v29 == v20)
            {
              int v24 = v20;
              break;
            }
          }
        }
        else
        {
          int v24 = *(_DWORD *)(v13 + 8 * v7);
        }
        uint64_t v32 = (int)v11;
        if (v24 == v20 && !v23) {
          break;
        }
        uint64_t v38 = v13 + 8 * (int)v11;
        char v40 = *(unsigned char *)(v38 + 4);
        int v39 = (int *)(v38 + 4);
        if (v40)
        {
          float v65 = v39;
          int v41 = v11;
          float result = findCorner((uint64_t)a1, *v18, 1);
          if (!result) {
            return result;
          }
          if (v20 == v19)
          {
            int v20 = v19;
            LODWORD(v11) = v41;
            int v39 = v65;
          }
          else
          {
            LODWORD(v11) = v41;
            int v39 = v65;
            while (v20 != *result)
            {
              if (v20 <= 0) {
                int v42 = v2;
              }
              else {
                int v42 = 0;
              }
              int v20 = v20 + v42 - 1;
              --v23;
              if (v20 == v19)
              {
                int v20 = v19;
                goto LABEL_58;
              }
            }
            int v20 = *result;
          }
        }
LABEL_58:
        if (v23 <= 3)
        {
          int v46 = *v16;
          if (*v16)
          {
            int v58 = *v39;
            BOOL v59 = (v46 & 0xA) != 0 || (*v39 & 1) == 0;
            uint64_t v5 = a1 + 26;
            if (!v59)
            {
              if (v67 < 3)
              {
                if ((v46 & 0x10) != 0)
                {
                  v58 |= 0x10u;
                  *int v39 = v58;
                  int v46 = *v16;
                }
                if ((v46 & 4) != 0) {
                  *int v39 = v58 | 4;
                }
                int v60 = *((_DWORD *)a1 + 55);
                int v61 = v60 - 1;
                if (v7 != v60 - 1 && v60 > (int)v11)
                {
                  do
                  {
                    *(void *)(a1[26] + 8 * v32 - 8) = *(void *)(a1[26] + 8 * v32);
                    ++v32;
                    uint64_t v62 = *((int *)a1 + 55);
                  }
                  while (v32 < v62);
                  int v61 = v62 - 1;
                }
                *((_DWORD *)a1 + 55) = v61;
                if (debug_auto_trace_syntax)
                {
                  __sprintf_chk(v68, 0, 0x100uLL, "after delete ip index %d", v7 - 1);
                  checkSyntax((int *)a1, v68);
                }
                --v7;
              }
              else
              {
                *int v16 = v46 | 8;
                *v39 |= 0x10u;
              }
            }
            goto LABEL_100;
          }
          goto LABEL_60;
        }
        int v3 = (void **)v66;
        float result = addInterestingPointAtIndex(v24, 8, v66);
        if (!result) {
          return result;
        }
        int v47 = v7;
        LOBYTE(v48) = *(float *)(a1[20] + 4 * v24) > 0.0;
        int v49 = v24;
        do
        {
          uint64_t v50 = a1[20];
          float v51 = *(float *)(v50 + 4 * v49);
          int v52 = v48 & 1;
          if (v52 == v51 <= 0.0)
          {
            if (v49 <= 0) {
              int v54 = v2;
            }
            else {
              int v54 = 0;
            }
            float v55 = *(float *)(v50 + 4 * (v49 + v54 - 1));
            int v53 = v49 + 1;
            if (v49 + 1 >= v2) {
              int v56 = v2;
            }
            else {
              int v56 = 0;
            }
            int v48 = (float)((float)((float)(v51 + v55) + *(float *)(v50 + 4 * (v53 - v56))) * 0.33333) > 0.0;
            if (v52 != v48
              && (v2 & ((v49 - v24) >> 31)) + v49 - v24 >= 6
              && (v2 & ((v20 - v49) >> 31)) + v20 - v49 >= 6)
            {
              float result = addInterestingPointAtIndex(v49, 16, v66);
              if (!result) {
                return result;
              }
              float result = addInterestingPointAtIndex(v49, 32, v66);
              if (!result) {
                return result;
              }
              float result = addInterestingPointAtIndex(v49, 8, v66);
              if (!result) {
                return result;
              }
            }
          }
          else
          {
            int v53 = v49 + 1;
          }
          if (v53 >= v2) {
            int v57 = v2;
          }
          else {
            int v57 = 0;
          }
          int v49 = v53 - v57;
        }
        while (v53 - v57 != v20);
        float result = addInterestingPointAtIndex(v20, 16, v66);
        uint64_t v5 = a1 + 26;
        int v7 = v47;
        if (!result) {
          return result;
        }
LABEL_14:
        ++v7;
        int v6 = *((_DWORD *)a1 + 55);
        if (v7 >= v6) {
          goto LABEL_101;
        }
      }
      int v33 = *v16;
      if (*v16)
      {
        uint64_t v5 = a1 + 26;
        if ((v33 & 0xA) == 0)
        {
          uint64_t v34 = v13 + 8 * (int)v11;
          int v37 = *(_DWORD *)(v34 + 4);
          int v35 = (int *)(v34 + 4);
          int v36 = v37;
          if (v37)
          {
            if (v67 < 3)
            {
              if ((v33 & 0x10) != 0)
              {
                v36 |= 0x10u;
                *int v35 = v36;
                int v33 = *v16;
              }
              if ((v33 & 4) != 0) {
                *int v35 = v36 | 4;
              }
              int v43 = *((_DWORD *)a1 + 55);
              int v44 = v43 - 1;
              if (v7 != v43 - 1 && v43 > (int)v11)
              {
                do
                {
                  *(void *)(a1[26] + 8 * v32 - 8) = *(void *)(a1[26] + 8 * v32);
                  ++v32;
                  uint64_t v45 = *((int *)a1 + 55);
                }
                while (v32 < v45);
                int v44 = v45 - 1;
              }
              *((_DWORD *)a1 + 55) = v44;
              --v7;
              if (debug_auto_trace_syntax)
              {
                __sprintf_chk(v68, 0, 0x100uLL, "after delete ip index %d", v7);
                checkSyntax((int *)a1, v68);
              }
            }
            else
            {
              *int v16 = v33 | 8;
              *v35 |= 0x10u;
            }
          }
        }
LABEL_100:
        int v3 = (void **)v66;
        goto LABEL_14;
      }
LABEL_60:
      uint64_t v5 = a1 + 26;
      int v3 = (void **)v66;
      goto LABEL_14;
    }
LABEL_101:
    if (*((int *)a1 + 59) < 1)
    {
LABEL_105:
      if (*v3) {
        free(*v3);
      }
      *int v3 = 0;
      v3[1] = 0;
      if (debug_auto_trace_syntax) {
        checkSyntax((int *)a1, "find inflection points");
      }
      if (debug_auto_trace)
      {
        if (*a1) {
          ((void (*)(void, uint64_t, void *))a1[1])(*a1, 5, a1);
        }
      }
      return (int *)1;
    }
    else
    {
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      while (1)
      {
        float result = addInterestingPointAtIndex(*(_DWORD *)((char *)*v3 + v63), *(_DWORD *)((char *)*v3 + v63 + 4), (uint64_t)v5);
        if (!result) {
          break;
        }
        ++v64;
        v63 += 8;
        if (v64 >= *((int *)a1 + 59)) {
          goto LABEL_105;
        }
      }
    }
  }
  return result;
}

uint64_t cutUpCurves(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = **(unsigned int **)(a1 + 128);
  uint64_t v3 = a1 + 208;
  unsigned int v4 = *(_DWORD *)(a1 + 220);
  if (v4 == 1)
  {
    uint64_t v5 = *(_DWORD **)v3;
    BOOL v6 = *(_DWORD *)(*(void *)v3 + 4) != 64 || (int)v2 < 1;
    if (!v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(a1 + 152);
      while (1)
      {
        uint64_t v9 = v7 + 1;
        unsigned int v10 = v2 - 1 == v7 ? 0 : v7 + 1;
        float v11 = *(float *)(v8 + 4 * v7);
        if (v11 <= 0.5 && *(float *)(v8 + 4 * v10) >= 0.5) {
          break;
        }
        if (v11 >= 0.5 && *(float *)(v8 + 4 * v10) <= 0.5) {
          break;
        }
        ++v7;
        if (v2 == v9) {
          goto LABEL_17;
        }
      }
      *uint64_t v5 = v7;
      v5[1] = 24;
    }
  }
LABEL_17:
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "circle cut");
    unsigned int v4 = *(_DWORD *)(v1 + 220);
  }
  if ((int)v4 >= 1)
  {
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)(v1 + 208);
    do
    {
      unint64_t v14 = v12++;
      LODWORD(v15) = v12;
      uint64_t v16 = v12 - v4;
      if (v12 >= v4)
      {
        LODWORD(v15) = v12 - v4;
        if (v16 >= v4) {
          unint64_t v15 = v16 % (unint64_t)v4;
        }
      }
      int v17 = *(_DWORD *)(v13 + 8 * v14);
      int v18 = *(_DWORD *)(v13 + 8 * (int)v15);
      BOOL v19 = __OFSUB__(v18, v17);
      int v20 = v18 - v17;
      if ((v20 < 0) ^ v19 | (v20 == 0)) {
        int v21 = v2;
      }
      else {
        int v21 = 0;
      }
      if ((*(unsigned char *)(v13 + 8 * v14 + 4) & 8) != 0)
      {
        uint64_t v22 = (v21 + v20);
        if ((int)v22 >= 1)
        {
          unint64_t v23 = 0;
          uint64_t v24 = **(int **)(v1 + 128);
          uint64_t v25 = *(void *)(v1 + 160);
          uint64_t v26 = *(void *)(v1 + 168);
          do
          {
            uint64_t v27 = v17;
            float v28 = *(float *)(v25 + 4 * v17);
            if (v24 == v22)
            {
              uint64_t v29 = -1;
              uint64_t v30 = 1 - v24;
              uint64_t v31 = v24 + 1;
              uint64_t v32 = ~v24;
              uint64_t v33 = v24 - 1;
              uint64_t v34 = 1;
              do
              {
                LODWORD(v35) = v34 + v27 - v24;
                if (v34 + v27 >= v24)
                {
                  if (v27 + v30 >= v24) {
                    uint64_t v35 = (v27 + v30) % v24;
                  }
                }
                else
                {
                  LODWORD(v35) = v34 + v27;
                  if (v34 + v27 < 0)
                  {
                    uint64_t v35 = v27 + v31;
                    if (v27 + v31 < 0) {
                      uint64_t v35 = v35 % v24 + v24;
                    }
                  }
                }
                LODWORD(v36) = v27 - v34;
                if (v27 + v29 >= v24)
                {
                  if (v27 + v32 >= v24) {
                    uint64_t v36 = (v27 + v32) % v24;
                  }
                  else {
                    LODWORD(v36) = v36 - v24;
                  }
                }
                else if (v27 + v29 < 0)
                {
                  uint64_t v36 = v27 + v33;
                  if (v27 + v33 < 0) {
                    uint64_t v36 = v36 % v24 + v24;
                  }
                }
                ++v34;
                --v29;
                --v33;
                float v28 = (float)(v28 + *(float *)(v25 + 4 * (int)v35)) + *(float *)(v25 + 4 * (int)v36);
                --v32;
                ++v31;
                ++v30;
              }
              while (v29 != -5);
              int v37 = 9;
            }
            else
            {
              uint64_t v38 = 1;
              uint64_t v39 = -1;
              uint64_t v40 = 1 - v24;
              uint64_t v41 = v24 + 1;
              uint64_t v42 = ~v24;
              uint64_t v43 = v24 - 1;
              int v37 = 1;
              do
              {
                if (v38 < (uint64_t)(v22 - v23))
                {
                  uint64_t v44 = v17 + v38;
                  if (v44 >= v24)
                  {
                    if (v17 + v40 < v24) {
                      LODWORD(v44) = v17 + v40;
                    }
                    if (v24 && v17 + v40 >= v24) {
                      uint64_t v44 = (v17 + v40) % v24;
                    }
                  }
                  else if (v44 < 0)
                  {
                    uint64_t v45 = v17 + v41;
                    if (v45 >= 0) {
                      LODWORD(v44) = v17 + v41;
                    }
                    if (v45 < 0 && v24) {
                      uint64_t v44 = v45 % v24 + v24;
                    }
                  }
                  float v28 = v28 + *(float *)(v25 + 4 * (int)v44);
                  ++v37;
                }
                if (v23 >= v38)
                {
                  uint64_t v46 = v17 + v39;
                  if (v46 >= v24)
                  {
                    if (v17 + v42 < v24) {
                      LODWORD(v46) = v17 + v42;
                    }
                    if (v24 && v17 + v42 >= v24) {
                      uint64_t v46 = (v17 + v42) % v24;
                    }
                  }
                  else if (v46 < 0)
                  {
                    uint64_t v47 = v17 + v43;
                    if (v47 >= 0) {
                      LODWORD(v46) = v17 + v43;
                    }
                    if (v47 < 0 && v24) {
                      uint64_t v46 = v47 % v24 + v24;
                    }
                  }
                  float v28 = v28 + *(float *)(v25 + 4 * (int)v46);
                  ++v37;
                }
                ++v38;
                --v43;
                --v39;
                --v42;
                ++v41;
                ++v40;
              }
              while (v39 != -5);
            }
            *(float *)(v26 + 4 * v27) = v28 / (float)v37;
            int v48 = v27 + 1;
            if (v48 >= (int)v24) {
              int v49 = v24;
            }
            else {
              int v49 = 0;
            }
            int v17 = v48 - v49;
            ++v23;
          }
          while (v23 != v22);
        }
      }
    }
    while (v12 != v4);
  }
  uint64_t result = initInterestingPointList((void *)(v1 + 224));
  if (result)
  {
    int v80 = v2;
    uint64_t v81 = v1 + 224;
    LODWORD(v51) = *(_DWORD *)(v1 + 220);
    if ((int)v51 >= 1)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      int v82 = (int)v2 >> 1;
      uint64_t v54 = 1;
      uint64_t v83 = v3;
      do
      {
        uint64_t v55 = v1;
        uint64_t v56 = v53 + 1;
        LODWORD(v1) = v56;
        if (v54 >= (int)v51)
        {
          uint64_t v1 = v54 - (int)v51;
          if (v1 >= (int)v51) {
            v1 %= (int)v51;
          }
        }
        uint64_t v57 = *(void *)v3;
        int v58 = (int *)(v57 + 8 * (int)v1);
        uint64_t v59 = v57 + v52;
        int v60 = *(_DWORD *)(v57 + v52);
        uint64_t v61 = *v58;
        uint64_t v84 = v56;
        if (*(unsigned char *)(v57 + v52 + 4))
        {
          uint64_t result = (uint64_t)findCorner(v55, v60, 1);
          if (!result) {
            return result;
          }
          uint64_t v63 = *(unsigned int *)(result + 4);
          BOOL v62 = v63 == v60;
        }
        else
        {
          BOOL v62 = 1;
          uint64_t v63 = *(unsigned int *)(v57 + v52);
        }
        if (*(unsigned char *)(v57 + 8 * (int)v1 + 4))
        {
          BOOL v66 = v62;
          uint64_t result = (uint64_t)findCorner(v55, *v58, 1);
          if (!result) {
            return result;
          }
          uint64_t v65 = *(unsigned int *)result;
          BOOL v64 = v65 == v61;
          BOOL v62 = v66;
        }
        else
        {
          BOOL v64 = 1;
          uint64_t v65 = v61;
        }
        uint64_t v1 = v55;
        if ((int)v61 > v60) {
          goto LABEL_100;
        }
        int v67 = v63 - *(_DWORD *)(v57 + v52);
        if (v67 < 0) {
          int v67 = *(_DWORD *)(v57 + v52) - v63;
        }
        if (v67 <= v82)
        {
          int v69 = v65 - *v58;
          if (v69 < 0) {
            int v69 = *v58 - v65;
          }
          uint64_t v3 = v83;
          if (v69 <= v82)
          {
            if ((int)v65 <= (int)v63 - v80) {
              goto LABEL_114;
            }
          }
          else if ((int)v65 <= (int)v63)
          {
            goto LABEL_114;
          }
        }
        else
        {
LABEL_100:
          uint64_t v3 = v83;
          if ((int)v65 <= (int)v63) {
            goto LABEL_114;
          }
        }
        if ((v63 != v65 || v62 && v64) && (*(unsigned char *)(v59 + 4) & 8) != 0)
        {
          uint64_t result = cutUpCurve(v55, v63, v62, v65, v64, v81);
          if (!result) {
            return result;
          }
        }
LABEL_114:
        uint64_t v51 = *(int *)(v55 + 220);
        v52 += 8;
        BOOL v6 = v54++ < v51;
        uint64_t v53 = v84;
      }
      while (v6);
    }
    int v70 = *(_DWORD *)(v1 + 236);
    if (v70 >= 1)
    {
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      while (1)
      {
        char v85 = 0;
        float v73 = (int *)(*(void *)v81 + v71);
        int v75 = *v73;
        int v74 = v73[1];
        int v76 = indexOfNewInterestingPointAtPointIndex(*v73, v3, &v85);
        if (v85) {
          BOOL v77 = (v74 & 0x18) == 24;
        }
        else {
          BOOL v77 = 0;
        }
        if (!v77) {
          goto LABEL_128;
        }
        int v78 = *(_DWORD *)(*(void *)v3 + 8 * v76 + 4);
        if ((v78 & 0x18) != 8 && (v78 & 0x18) != 16) {
          break;
        }
LABEL_130:
        ++v72;
        v71 += 8;
        if (v72 >= v70) {
          goto LABEL_131;
        }
      }
      if ((v78 & 4) != 0) {
        int v74 = 8;
      }
LABEL_128:
      uint64_t result = (uint64_t)addInterestingPointAtIndex(v75, v74, v3);
      if (!result) {
        return result;
      }
      int v70 = *(_DWORD *)(v1 + 236);
      goto LABEL_130;
    }
LABEL_131:
    if (debug_auto_trace_syntax) {
      checkSyntax((int *)v1, "cut up curves");
    }
    if (*(void *)v81) {
      free(*(void **)v81);
    }
    *(void *)uint64_t v81 = 0;
    *(void *)(v81 + 8) = 0;
    if (debug_auto_trace)
    {
      if (*(void *)v1) {
        (*(void (**)(void, uint64_t, uint64_t))(v1 + 8))(*(void *)v1, 6, v1);
      }
    }
    return 1;
  }
  return result;
}

uint64_t coalesceStraightLines(void *a1)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  BOOL v151 = 0;
  float v150 = 0.0;
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  float v145 = 0.0;
  uint64_t v144 = 0;
  memset(v143, 0, sizeof(v143));
  uint64_t v2 = (int *)a1[16];
  uint64_t v133 = *((void *)v2 + 1);
  int v142 = *v2;
  uint64_t v3 = *((unsigned int *)a1 + 55);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    int64_t v6 = 0;
    float v7 = 0.0;
    uint64_t v8 = 1;
    uint64_t v9 = 12;
    do
    {
      unint64_t v10 = v6;
      uint64_t v11 = a1[26];
      uint64_t v12 = v11 + 8 * v6++;
      if ((*(unsigned char *)(v12 + 4) & 2) == 0) {
        goto LABEL_51;
      }
      LODWORD(v13) = v6;
      if (v6 < (int)v3)
      {
        unint64_t v14 = (int *)(v11 + v9);
        uint64_t v13 = v8;
        while (1)
        {
          int v15 = *v14;
          v14 += 2;
          if ((v15 & 7) != 6) {
            break;
          }
          if (v3 == ++v13)
          {
            LODWORD(v13) = v3;
            break;
          }
        }
      }
      if (v6 == v13 || v10 >= v13) {
        goto LABEL_51;
      }
      unint64_t v137 = v10;
      int64_t v139 = v6;
      unint64_t v16 = 0;
      int v140 = v5;
      uint64_t v135 = v13;
      uint64_t v17 = (v13 + v5);
      uint64_t v18 = v4;
      do
      {
        LODWORD(v10) = v10 + 1;
        uint64_t v19 = *((int *)a1 + 55);
        LODWORD(v20) = v10;
        uint64_t v21 = v8 + v16 - v19;
        if ((uint64_t)(v8 + v16) >= v19)
        {
          LODWORD(v20) = v8 + v16 - v19;
          if (v21 >= v19)
          {
            LODWORD(v20) = v10;
            if (v19) {
              uint64_t v20 = v21 % v19;
            }
          }
        }
        uint64_t v22 = a1[26];
        uint64_t v23 = *(unsigned int *)(v22 + v18);
        LODWORD(v22) = *(_DWORD *)(v22 + 8 * (int)v20) - v23;
        uint64_t v24 = (v142 & ((int)v22 >> 31)) + v22;
        computeATRRecord((uint64_t)v143, (int *)a1[16], v23, (v142 & ((int)v22 >> 31)) + v22);
        ATRLinearRegression((uint64_t)v143, &v151, (float *)&v148, (float *)&v147 + 1);
        if (v16 <= 0x12B)
        {
          ATRAngleOfLine(*((float *)&v147 + 1), *(unsigned int *)a1[16], *(void *)(a1[16] + 8), v23, v24, v151);
          v153[v16] = v25;
        }
        ++v16;
        v18 += 8;
      }
      while (v17 != v16);
      if (v17 < 0x12C)
      {
        float v27 = v153[0];
        int v5 = v140;
        unint64_t v28 = v137;
        int64_t v6 = v139;
        uint64_t v29 = v135;
        if (v17 < 2)
        {
          LODWORD(v30) = 1;
          char v33 = 1;
          float v32 = v153[0];
          goto LABEL_41;
        }
        float v26 = v153[0];
      }
      else
      {
        printf(" ***** %s in autoTrace\n", "too many straight lines in a row");
        float v26 = v153[0];
        float v27 = v153[0];
        int v5 = v140;
        unint64_t v28 = v137;
        int64_t v6 = v139;
        uint64_t v29 = v135;
      }
      uint64_t v30 = 1;
      float v31 = v26;
      float v32 = v26;
      char v33 = 1;
      while (1)
      {
        float v34 = v31 - rintf(v31 - v26);
        float v31 = v153[v30];
        float v35 = v31 - rintf(v31 - v26);
        float v36 = v35 > v32 ? v35 : v32;
        if (v35 >= v27) {
          float v32 = v36;
        }
        else {
          float v27 = v35;
        }
        float v37 = (float)(v35 - v34) >= 0.0 ? 1.0 : -1.0;
        if (v30 == 1)
        {
          float v7 = v37;
        }
        else if (v7 != v37)
        {
          char v33 = 0;
        }
        if (vabds_f32(v35, v34) > 0.0097222) {
          break;
        }
        if (v29 + v5 == ++v30)
        {
          LODWORD(v3) = *((_DWORD *)a1 + 55);
          goto LABEL_42;
        }
      }
LABEL_41:
      uint64_t v3 = *((unsigned int *)a1 + 55);
      if (v30 == v17)
      {
LABEL_42:
        int v38 = v3;
        if ((int)v29 < (int)v3)
        {
          uint64_t v39 = 0;
          do
          {
            *(void *)(a1[26] + v4 + 8 * v39 + 8) = *(void *)(a1[26] + 8 * v29 + 8 * v39);
            int v38 = *((_DWORD *)a1 + 55);
            ++v39;
          }
          while (v38 > (int)v29 + (int)v39);
        }
        uint64_t v3 = (v38 - (v17 - 1));
        *((_DWORD *)a1 + 55) = v3;
        if ((((float)(v32 - v27) > 0.00055556) & v33) == 1)
        {
          uint64_t v40 = a1[26];
          *(_DWORD *)(v40 + 8 * v28 + 4) = *(_DWORD *)(v40 + 8 * v28 + 4) & 0xFFFFFFF5 | 8;
          LODWORD(v28) = v6;
          if (v6 >= (int)v3)
          {
            int64_t v41 = v6 - (int)v3;
            LODWORD(v28) = v6 - v3;
            if (v41 >= (int)v3)
            {
              LODWORD(v28) = v6;
              if (v38 != v17 - 1) {
                unint64_t v28 = v41 % (int)v3;
              }
            }
          }
          *(_DWORD *)(v40 + 8 * (int)v28 + 4) = *(_DWORD *)(v40 + 8 * (int)v28 + 4) & 0xFFFFFFEB | 0x10;
        }
      }
LABEL_51:
      ++v8;
      --v5;
      v9 += 8;
      v4 += 8;
    }
    while (v6 < (int)v3);
  }
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "coalesce straight lines 1");
    uint64_t v3 = *((unsigned int *)a1 + 55);
  }
  if ((int)v3 >= 1)
  {
    uint64_t v42 = 0;
    do
    {
      uint64_t v43 = v42++;
      int v44 = v3;
      LODWORD(v45) = v42;
      if (v42 >= (int)v3)
      {
        uint64_t v45 = v42 - (int)v3;
        if (v45 >= (int)v3) {
          v45 %= (int)v3;
        }
      }
      uint64_t v46 = a1[26];
      uint64_t v47 = (int *)(v46 + 8 * v43);
      int v48 = (int *)(v46 + 8 * (int)v45);
      int v49 = *v47;
      int v50 = v47[1];
      if ((~v50 & 0x12) == 0 && (v142 & ((*v48 - v49) >> 31)) + *v48 - v49 <= 3)
      {
        int v52 = *(_DWORD *)(v46 + 8 * (int)v45 + 4);
        if ((v52 & 8) != 0 && ((v52 | v50) & 1) == 0)
        {
          if (v43) {
            int v44 = 0;
          }
          uint64_t v53 = *(unsigned int *)(v46 + 8 * ((int)v43 + v44 - 1));
          if ((v142 & ((v49 - (int)v53) >> 31)) + v49 - (int)v53 >= 3)
          {
            int v54 = v142;
            if (v49 > 0) {
              int v54 = 0;
            }
            findTangentBackwardsFrom((uint64_t)a1, v49 + v54 - 1, v53, &v150, (float *)&v149 + 1, &v151, (float *)&v148, (float *)&v147 + 1);
            LODWORD(v55) = v45 + 1;
            uint64_t v56 = (int)v45 + 1;
            uint64_t v57 = *((int *)a1 + 55);
            if ((int)v45 + 1 >= (int)v57)
            {
              LODWORD(v55) = v55 - v57;
              if (v56 - v57 >= v57)
              {
                LODWORD(v55) = v45 + 1;
                if (v57) {
                  uint64_t v55 = (v56 - v57) % v57;
                }
              }
            }
            else if ((int)v45 <= -2)
            {
              LODWORD(v55) = v57 + v55;
              if (v57 + v56 < 0)
              {
                LODWORD(v55) = v45 + 1;
                if (v57) {
                  uint64_t v55 = (v57 + v56) % v57 + v57;
                }
              }
            }
            int v58 = *(_DWORD *)(a1[26] + 8 * (int)v55);
            uint64_t v59 = *v48;
            if ((v142 & ((v58 - (int)v59) >> 31)) + v58 - (int)v59 >= 3)
            {
              findTangentForwardsFrom((uint64_t)a1, v59, v58, (float *)&v149, (float *)&v148 + 1, &v151, (float *)&v148, (float *)&v147 + 1);
              float v60 = atan2(*((float *)&v149 + 1), v150) * 0.159154937;
              float v61 = atan2(*((float *)&v148 + 1), *(float *)&v149) * 0.159154937;
              float v62 = v61 - rintf(v61 - v60);
              if (vabds_f32(v60, v62) <= 0.0083333)
              {
                int v63 = v142;
                if (*v48 > 0) {
                  int v63 = 0;
                }
                BOOL v64 = (float *)(v133 + 8 * (*v48 + v63 - 1));
                uint64_t v65 = (float *)(v133 + 8 * *v47);
                float v66 = v64[1] - v65[1];
                float v67 = *v64 - *v65;
                float v68 = atan2(v66, v67) * 0.159154937;
                float v69 = sin((float)(fabsf((float)(v68 - rintf(v68 - v60)) + (float)((float)(v62 + v60) * -0.5)) * 6.2832))
                    * sqrtf((float)(v66 * v66) + (float)(v67 * v67));
                if (v69 < 0.33333)
                {
                  if (v43 >= (int)v45)
                  {
                    if (v45 || (LODWORD(v70) = *((_DWORD *)a1 + 55), v43 != v70 - 1))
                    {
                      printf(" ***** %s in autoTrace\n", "our assumptions have failed");
                      LODWORD(v70) = *((_DWORD *)a1 + 55);
                    }
                    if ((int)v70 >= 2)
                    {
                      uint64_t v71 = 0;
                      do
                      {
                        *(void *)(a1[26] + 8 * v71) = *(void *)(a1[26] + 8 * v71 + 8);
                        uint64_t v72 = v71 + 2;
                        ++v71;
                      }
                      while (v72 < *((int *)a1 + 55));
                      LODWORD(v70) = *((_DWORD *)a1 + 55);
                    }
                  }
                  else
                  {
                    LODWORD(v70) = *((_DWORD *)a1 + 55);
                    if ((int)v56 < (int)v70)
                    {
                      do
                      {
                        *(void *)(a1[26] + 8 * v56 - 16) = *(void *)(a1[26] + 8 * v56);
                        ++v56;
                        uint64_t v70 = *((int *)a1 + 55);
                      }
                      while (v56 < v70);
                    }
                  }
                  *((_DWORD *)a1 + 55) = v70 - 2;
                }
              }
            }
          }
        }
      }
      uint64_t v3 = *((int *)a1 + 55);
    }
    while (v42 < v3);
  }
  uint64_t v73 = v3;
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "coalesce straight lines 2");
    uint64_t v73 = *((unsigned int *)a1 + 55);
  }
  if ((int)v73 >= 1)
  {
    for (int i = 0; i < (int)v73; ++i)
    {
      int v75 = i + 1;
      uint64_t v76 = i + 1;
      if (i + 1 >= (int)v73)
      {
        uint64_t v79 = v75 - (uint64_t)(int)v73;
        uint64_t v77 = v76 - (int)v73;
        if (v77 >= (int)v73)
        {
          uint64_t v77 = i + 1;
          if (v73) {
            uint64_t v77 = v79 % (int)v73;
          }
        }
      }
      else
      {
        uint64_t v77 = v75;
        if (i <= -2)
        {
          uint64_t v78 = (int)v73 + (uint64_t)v75;
          uint64_t v77 = (int)v73 + v76;
          if (v77 < 0)
          {
            uint64_t v77 = i + 1;
            if (v73) {
              uint64_t v77 = v78 % (int)v73 + (int)v73;
            }
          }
        }
      }
      uint64_t v80 = a1[26];
      uint64_t v81 = v80 + 8 * i;
      int v84 = *(_DWORD *)(v81 + 4);
      uint64_t v83 = (_DWORD *)(v81 + 4);
      int v82 = v84;
      if ((v84 & 8) != 0)
      {
        uint64_t v85 = v77 << 32;
        int v86 = *(_DWORD *)(v80 + 8 * (int)v77);
        int v87 = *(_DWORD *)(v80 + 8 * i);
        int v88 = (v142 & ((v86 - v87) >> 31)) + v86 - v87;
        if (v88 <= 34)
        {
          uint64_t v89 = v80 + 8 * (int)v77;
          unsigned int v92 = *(_DWORD *)(v89 + 4);
          uint64_t v91 = (unsigned int *)(v89 + 4);
          unsigned int v90 = v92;
          if ((v92 & 0x10) == 0)
          {
LABEL_184:
            __sprintf_chk(v152, 0, 0x100uLL, "curve (starting at %d) not balanced");
            printf(" ***** %s in autoTrace\n", v152);
            return 0;
          }
          if (v90 & 8 | v82 & 0x10 && ((v90 | v82) & 1) == 0)
          {
            int v130 = (int *)(v80 + 8 * (int)v77);
            uint64_t v131 = (int)v77;
            int v132 = v77;
            uint64_t v138 = (int)v73;
            uint64_t v141 = v73;
            int v134 = *(_DWORD *)(v80 + 8 * i);
            int v136 = *v130;
            computeAngleSumAndRange((uint64_t)a1, v87, v86, (float *)&v147, (float *)&v146 + 1);
            float v93 = 1.0 / (float)v88;
            if (fabsf(v93 * *(float *)&v147) <= 0.00027778)
            {
              uint64_t v73 = v141;
              if ((float)(v93 * *((float *)&v146 + 1)) > 0.00027778) {
                continue;
              }
              if ((v82 & 0x10) != 0)
              {
                uint64_t v97 = (v85 + 0x100000000) >> 32;
                uint64_t v98 = v97 - v138;
                if (v97 >= v138)
                {
                  LODWORD(v100) = v97 - v138;
                  int v99 = v136;
                  if (v98 >= v138)
                  {
                    uint64_t v100 = (v85 + 0x100000000) >> 32;
                    if (v141) {
                      uint64_t v100 = v98 % v138;
                    }
                  }
                }
                else
                {
                  int v99 = v136;
                  if (v85 + 0x100000000 < 0)
                  {
                    LODWORD(v100) = v97 + v138;
                    if (v97 + v138 < 0)
                    {
                      uint64_t v100 = (v85 + 0x100000000) >> 32;
                      if (v141) {
                        uint64_t v100 = (v97 + v138) % v138 + v138;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v100 = (v85 + 0x100000000) >> 32;
                  }
                }
                int v105 = *(_DWORD *)(v80 + 8 * (int)v100);
                int v106 = (v142 & ((v105 - v99) >> 31)) + v105 - v99;
                computeAngleSumAndRange((uint64_t)a1, v99, v105, (float *)&v146, &v145);
                float v107 = 1.0 / (float)v106;
                if (fabsf(*(float *)&v146 * v107) <= 0.00027778 && (float)(v107 * v145) <= 0.00027778)
                {
                  int v108 = v141;
                  if (v132 && (int)v141 > v132)
                  {
                    uint64_t v109 = v131;
                    do
                    {
                      *(void *)(a1[26] + 8 * v109 - 8) = *(void *)(a1[26] + 8 * v109);
                      ++v109;
                    }
                    while (v109 < *((int *)a1 + 55));
                    int v108 = *((_DWORD *)a1 + 55);
                  }
                  uint64_t v73 = (v108 - 1);
                  *((_DWORD *)a1 + 55) = v73;
                  --i;
                  continue;
                }
              }
              else
              {
                if ((v90 & 8) == 0) {
                  continue;
                }
                int v94 = i - 1;
                if (i <= 0)
                {
                  LODWORD(v95) = v138 + v94;
                  int v96 = v134;
                  if (v138 + v94 < 0)
                  {
                    LODWORD(v95) = i - 1;
                    if (v141) {
                      uint64_t v95 = (v138 + v94) % v138 + v138;
                    }
                  }
                }
                else
                {
                  LODWORD(v95) = i - 1;
                  int v96 = v134;
                }
                int v101 = *(_DWORD *)(v80 + 8 * (int)v95);
                int v102 = (v142 & ((v96 - v101) >> 31)) + v96 - v101;
                computeAngleSumAndRange((uint64_t)a1, v101, v96, (float *)&v146, &v145);
                float v103 = 1.0 / (float)v102;
                if (fabsf(*(float *)&v146 * v103) <= 0.00027778)
                {
                  uint64_t v73 = v141;
                  if ((float)(v103 * v145) <= 0.00027778)
                  {
                    *int v130 = v134;
                    if ((v82 & 4) != 0)
                    {
                      v90 |= 4u;
                      *uint64_t v91 = v90;
                      int v104 = *v83 & 0x10;
                    }
                    else
                    {
                      int v104 = 0;
                    }
                    *uint64_t v91 = v90 & 0xFFFFFFEF | v104;
                    if (i + 1 < (int)v141)
                    {
                      uint64_t v110 = i;
                      do
                      {
                        *(void *)(a1[26] + 8 * v110) = *(void *)(a1[26] + 8 * v110 + 8);
                        uint64_t v111 = v110 + 2;
                        ++v110;
                      }
                      while (v111 < *((int *)a1 + 55));
                      LODWORD(v73) = *((_DWORD *)a1 + 55);
                    }
                    uint64_t v73 = (v73 - 1);
                    *((_DWORD *)a1 + 55) = v73;
                    --i;
                  }
                  continue;
                }
              }
            }
            uint64_t v73 = v141;
          }
        }
      }
    }
  }
  LODWORD(v112) = v73;
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "coalesce straight lines 3");
    LODWORD(v112) = *((_DWORD *)a1 + 55);
  }
  if ((int)v112 >= 1)
  {
    uint64_t v113 = 0;
    while (1)
    {
      uint64_t v114 = v113++;
      uint64_t v115 = (int)v112;
      LODWORD(v116) = v113;
      if (v113 >= (int)v112)
      {
        uint64_t v116 = v113 - (int)v112;
        if (v116 >= (int)v112) {
          v116 %= (int)v112;
        }
      }
      uint64_t v117 = a1[26];
      float v118 = (int *)(v117 + 8 * v114);
      int v119 = v118[1];
      if ((v119 & 8) == 0) {
        goto LABEL_177;
      }
      float v120 = (_DWORD *)(v117 + 8 * (int)v116);
      int v121 = *v118;
      int v122 = (v142 & ((*v120 - v121) >> 31)) + *v120 - v121;
      if (v122 > 5) {
        goto LABEL_177;
      }
      uint64_t v123 = v117 + 8 * (int)v116;
      unsigned int v126 = *(_DWORD *)(v123 + 4);
      int v124 = (unsigned int *)(v123 + 4);
      unsigned int v125 = v126;
      if ((v126 & 0x10) == 0) {
        goto LABEL_184;
      }
      if (!(v125 & 8 | v118[1] & 0x10) || ((v125 | v119) & 1) != 0 || v122 > 2) {
        goto LABEL_177;
      }
      if ((v119 & 0x10) != 0) {
        break;
      }
      if ((v125 & 8) != 0)
      {
        *float v120 = v121;
        if ((v119 & 4) != 0)
        {
          v125 |= 4u;
          *int v124 = v125;
          int v127 = v118[1] & 0x10;
        }
        else
        {
          int v127 = 0;
        }
        *int v124 = v125 & 0xFFFFFFEF | v127;
        if (v113 < (int)v112)
        {
          do
          {
            *(void *)(a1[26] + 8 * v114) = *(void *)(a1[26] + 8 * v114 + 8);
            uint64_t v112 = *((int *)a1 + 55);
            uint64_t v128 = v114 + 2;
            ++v114;
          }
          while (v128 < v112);
        }
LABEL_176:
        LODWORD(v112) = v112 - 1;
        *((_DWORD *)a1 + 55) = v112;
        uint64_t v115 = (int)v112;
      }
LABEL_177:
      if (v113 >= v115) {
        goto LABEL_178;
      }
    }
    if ((v119 & 4) != 0) {
      *int v124 = v125 & 0xFFFFFFEB | 4;
    }
    memmove(v118, v118 + 2, 8 * ((int)v112 + ~v114));
    LODWORD(v112) = *((_DWORD *)a1 + 55);
    goto LABEL_176;
  }
LABEL_178:
  if (debug_auto_trace_syntax) {
    checkSyntax((int *)a1, "coalesce straight lines 4");
  }
  if (debug_auto_trace)
  {
    if (*a1) {
      ((void (*)(void, uint64_t, void *))a1[1])(*a1, 7, a1);
    }
  }
  return 1;
}

BOOL extractCurveRecords(uint64_t a1)
{
  int v43 = **(_DWORD **)(a1 + 128);
  *(void *)(a1 + 248) = 100;
  uint64_t v2 = malloc_type_malloc(0x2260uLL, 0x1000040A005BA8DuLL);
  uint64_t v3 = v2;
  *(void *)(a1 + 240) = v2;
  if (!v2)
  {
    printf(" ***** %s in autoTrace\n", "could not allocate curves list");
    return v3 != 0;
  }
  uint64_t v42 = v2;
  LODWORD(v4) = *(_DWORD *)(a1 + 220);
  if ((int)v4 < 1) {
    goto LABEL_52;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 1;
  do
  {
    LODWORD(v8) = ++v6;
    if (v7 >= (int)v4)
    {
      uint64_t v8 = v7 - (int)v4;
      if (v8 >= (int)v4) {
        v8 %= (int)v4;
      }
    }
    uint64_t v9 = *(void *)(a1 + 208);
    unint64_t v10 = (int *)(v9 + v5);
    int v11 = *(_DWORD *)(v9 + v5 + 4);
    if ((v11 & 0xA) != 0)
    {
      if (v11)
      {
        Corner = findCorner(a1, *v10, 0);
        uint64_t v12 = Corner + 1;
        if (!Corner) {
          uint64_t v12 = (int *)(v9 + v5);
        }
      }
      else
      {
        uint64_t v12 = (int *)(v9 + v5);
      }
      unint64_t v14 = (int *)(v9 + 8 * (int)v8);
      int v15 = *v12;
      unint64_t v16 = v14 + 1;
      if (v14[1])
      {
        uint64_t v17 = findCorner(a1, *v14, 0);
        if (v17) {
          unint64_t v14 = v17;
        }
      }
      if (*v14 == v15)
      {
        int v18 = v10[1];
        if ((v18 & 8) != 0)
        {
          int v19 = -17;
          int v20 = -9;
        }
        else
        {
          if ((v18 & 2) == 0) {
            goto LABEL_21;
          }
          int v19 = -5;
          int v20 = -3;
        }
        v10[1] = v18 & v20;
        *v16 &= v19;
      }
    }
LABEL_21:
    uint64_t v4 = *(int *)(a1 + 220);
    v5 += 8;
    BOOL v21 = v7++ < v4;
  }
  while (v21);
  if ((int)v4 >= 1)
  {
    uint64_t v22 = *(unsigned int *)(a1 + 220);
    do
    {
      if (!*(_DWORD *)(*(void *)(a1 + 208) + 8 * (v22 - 1) + 4))
      {
        if (v22 < (int)v4)
        {
          uint64_t v23 = v22;
          do
          {
            *(void *)(*(void *)(a1 + 208) + 8 * v23 - 8) = *(void *)(*(void *)(a1 + 208) + 8 * v23);
            ++v23;
            uint64_t v4 = *(int *)(a1 + 220);
          }
          while (v23 < v4);
        }
        LODWORD(v4) = v4 - 1;
        *(_DWORD *)(a1 + 220) = v4;
      }
      BOOL v21 = v22-- <= 1;
    }
    while (!v21);
    if ((int)v4 >= 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      while (2)
      {
        uint64_t v26 = v25++;
        LODWORD(v27) = v25;
        if (v25 >= (int)v4)
        {
          uint64_t v27 = v26 - (int)v4 + 1;
          if (v27 >= (int)v4) {
            v27 %= (int)v4;
          }
        }
        uint64_t v28 = *(void *)(a1 + 208);
        uint64_t v29 = (int *)(v28 + v24);
        int v30 = *(_DWORD *)(v28 + v24 + 4);
        if ((v30 & 0xA) == 0) {
          goto LABEL_51;
        }
        if (v30)
        {
          float v32 = findCorner(a1, *v29, 0);
          float v31 = v32 + 1;
          if (!v32) {
            float v31 = (int *)(v28 + v24);
          }
        }
        else
        {
          float v31 = (int *)(v28 + v24);
        }
        char v33 = (int *)(v28 + 8 * (int)v27);
        int v34 = *v31;
        if (v33[1])
        {
          float v35 = findCorner(a1, *v33, 0);
          if (v35) {
            char v33 = v35;
          }
        }
        int v36 = *v33;
        int v37 = *v33 - v34;
        if (v36 == v34) {
          goto LABEL_51;
        }
        int v38 = newCurveFromList((char **)(a1 + 240));
        int v39 = v29[1];
        if ((v39 & 8) != 0)
        {
          int v40 = 1;
LABEL_49:
          *(_DWORD *)int v38 = v40;
        }
        else if ((v39 & 2) != 0)
        {
          int v40 = 0;
          goto LABEL_49;
        }
        *((_DWORD *)v38 + 1) = v26;
        *((_DWORD *)v38 + 2) = v34;
        *((_DWORD *)v38 + 12) = v27;
        *((_DWORD *)v38 + 13) = v36;
        *((_DWORD *)v38 + 21) = (v43 & (v37 >> 31)) + v37;
LABEL_51:
        uint64_t v4 = *(int *)(a1 + 220);
        v24 += 8;
        if (v25 >= v4) {
          break;
        }
        continue;
      }
    }
  }
LABEL_52:
  if (debug_auto_trace && *(void *)a1) {
    (*(void (**)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)a1, 8, a1);
  }
  uint64_t v3 = v42;
  if (debug_auto_trace_uninitialized_testing) {
    checkCurves(a1, 8);
  }
  return v3 != 0;
}

void computeCurveTangents(uint64_t a1)
{
  uint64_t v1 = a1;
  char v198 = 0;
  uint64_t v196 = 0;
  unint64_t v197 = 0;
  __n128 v2 = 0uLL;
  memset(v195, 0, sizeof(v195));
  LODWORD(v3) = *(_DWORD *)(a1 + 252);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(int **)(a1 + 128);
    uint64_t v6 = *v5;
    uint64_t v189 = *((void *)v5 + 1);
    int v7 = (int)v6 / 8;
    if ((int)v6 / 8 <= 1) {
      int v7 = 1;
    }
    if ((int)v6 >= 48) {
      int v7 = 6;
    }
    int v186 = v7;
    do
    {
      uint64_t v8 = v4++;
      LODWORD(v9) = v4;
      if (v4 >= (int)v3)
      {
        uint64_t v9 = v4 - (int)v3;
        if (v9 >= (int)v3) {
          v9 %= (int)v3;
        }
      }
      uint64_t v10 = *(void *)(v1 + 240);
      int v11 = (_DWORD *)(v10 + 88 * v8);
      int v12 = v9;
      uint64_t v13 = (float *)(v10 + 88 * (int)v9);
      uint64_t v14 = *(void *)(v1 + 208);
      int v15 = v11 + 12;
      uint64_t v16 = (int)v11[12];
      uint64_t v17 = *((int *)v13 + 1);
      if (v16 == v17)
      {
        uint64_t v18 = v14 + 8 * v16;
      }
      else
      {
        LODWORD(v19) = v16 + 1;
        uint64_t v20 = (int)v16 + 1;
        uint64_t v21 = *(int *)(v1 + 220);
        if ((int)v16 + 1 >= (int)v21)
        {
          LODWORD(v19) = v19 - v21;
          if (v20 - v21 >= v21)
          {
            LODWORD(v19) = v16 + 1;
            if (v21) {
              uint64_t v19 = (v20 - v21) % v21;
            }
          }
        }
        else if ((int)v16 <= -2)
        {
          LODWORD(v19) = v21 + v19;
          if (v21 + v20 < 0)
          {
            LODWORD(v19) = v16 + 1;
            if (v21) {
              uint64_t v19 = (v21 + v20) % v21 + v21;
            }
          }
        }
        if (v17 == v19)
        {
          if (*(unsigned char *)(v14 + 8 * v16 + 4)) {
            goto LABEL_86;
          }
          uint64_t v18 = v14 + 8 * v17;
        }
        else
        {
          uint64_t v22 = v16 + 2;
          if ((int)v16 + 2 >= (int)v21)
          {
            LODWORD(v23) = v22 - v21;
            if (v22 - v21 >= v21)
            {
              LODWORD(v23) = v16 + 2;
              if (v21) {
                uint64_t v23 = (v22 - v21) % v21;
              }
            }
          }
          else if ((int)v16 > -3)
          {
            LODWORD(v23) = v16 + 2;
          }
          else
          {
            LODWORD(v23) = v21 + v22;
            if (v21 + v22 < 0)
            {
              LODWORD(v23) = v16 + 2;
              if (v21) {
                uint64_t v23 = (v21 + v22) % v21 + v21;
              }
            }
          }
          if (v17 != v23)
          {
            printf(" ***** %s in autoTrace\n", "too many interesting points in between curves/lines");
            break;
          }
          if ((int)v20 >= (int)v21)
          {
            LODWORD(v24) = v20 - v21;
            if (v20 - v21 >= v21)
            {
              LODWORD(v24) = v16 + 1;
              if (v21) {
                uint64_t v24 = (v20 - v21) % v21;
              }
            }
          }
          else if ((int)v16 > -2)
          {
            LODWORD(v24) = v16 + 1;
          }
          else
          {
            LODWORD(v24) = v21 + v20;
            if (v21 + v20 < 0)
            {
              LODWORD(v24) = v16 + 1;
              if (v21) {
                uint64_t v24 = (v21 + v20) % v21 + v21;
              }
            }
          }
          uint64_t v18 = v14 + 8 * (int)v24;
        }
      }
      if (*(unsigned char *)(v18 + 4))
      {
LABEL_86:
        int v193 = v12;
        if (*v11)
        {
          BOOL v202 = 0;
          uint64_t v201 = 0;
          int v199 = 0;
          int v200 = 0;
          uint64_t v51 = v10 + 88 * v8;
          findTangentBackwardsFrom(v1, *(_DWORD *)(v51 + 52), *(unsigned int *)(v51 + 8), (float *)&v200, (float *)&v199, &v202, (float *)&v201 + 1, (float *)&v201);
          int v52 = v199;
          *(_DWORD *)(v51 + 56) = v200;
          *(_DWORD *)(v51 + 60) = v52;
          *(unsigned char *)(v51 + 72) = v202;
          int v53 = v201;
          *(_DWORD *)(v51 + 76) = HIDWORD(v201);
          *(_DWORD *)(v51 + 80) = v53;
        }
        else
        {
          uint64_t v54 = v10 + 88 * v8;
          int v57 = *(_DWORD *)(v54 + 8);
          uint64_t v56 = (int *)(v54 + 8);
          int v55 = v57;
          int v58 = v56[19];
          if (v58 <= 2) {
            uint64_t v59 = 2;
          }
          else {
            uint64_t v59 = v58;
          }
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v55, v59);
          if (ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197))
          {
            float v60 = v13;
            char v61 = v198;
            float v62 = *(float *)&v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(void *)(*(void *)(v1 + 128) + 8), *v56, v59, v198);
            float v64 = v63 * 6.2832;
            float v65 = *((float *)&v197 + 1);
          }
          else
          {
            uint64_t v77 = *v56;
            uint64_t v78 = (float *)(v189 + 8 * v77);
            int v79 = v77 + 1;
            if (v79 >= (int)v6) {
              int v80 = v6;
            }
            else {
              int v80 = 0;
            }
            uint64_t v81 = (float *)(v189 + 8 * (v79 - v80));
            float v82 = *v81;
            float v83 = v81[1];
            float v84 = *v78;
            float v85 = v78[1];
            float v86 = *v81 - *v78;
            float v87 = v83 - v85;
            float v64 = atan2((float)(v83 - v85), v86);
            if (v64 < 0.0)
            {
              float v88 = v64 + 6.28318531;
              float v64 = v88;
            }
            float v60 = v13;
            if (vabds_f32(v82, v84) <= vabds_f32(v83, v85))
            {
              char v61 = 0;
              char v198 = 0;
              float v62 = v86 / v87;
              *(float *)&unint64_t v197 = v62;
              float v65 = v84 - (float)(v62 * v85);
            }
            else
            {
              char v61 = 1;
              char v198 = 1;
              float v62 = v87 / v86;
              *(float *)&unint64_t v197 = v62;
              float v65 = v85 - (float)(v62 * v84);
            }
            *((float *)&v197 + 1) = v65;
          }
          __double2 v122 = __sincos_stret(v64);
          float cosval = v122.__cosval;
          uint64_t v124 = v10 + 88 * v8;
          float sinval = v122.__sinval;
          *(float *)(v124 + 56) = cosval;
          *(float *)(v124 + 60) = sinval;
          *(unsigned char *)(v124 + 72) = v61;
          *(float *)(v124 + 76) = v65;
          *(float *)(v124 + 80) = v62;
          uint64_t v13 = v60;
        }
        if (debug_auto_trace_nan_inf_check) {
          numericalCheckCurveEnd((float *)(v10 + 88 * v8));
        }
        if (*(_DWORD *)v13)
        {
          v2.n128_f32[0] = computeCurveStartTangentAtCorner(v1, (uint64_t)v13);
        }
        else
        {
          unsigned int v126 = v13;
          uint64_t v127 = v10 + 88 * v193;
          int v130 = *(_DWORD *)(v127 + 8);
          uint64_t v129 = (int *)(v127 + 8);
          int v128 = v130;
          int v131 = v129[19];
          if (v131 <= 2) {
            uint64_t v132 = 2;
          }
          else {
            uint64_t v132 = v131;
          }
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v128, v132);
          if (ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197))
          {
            char v133 = v198;
            float v134 = *(float *)&v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(void *)(*(void *)(v1 + 128) + 8), *v129, v132, v198);
            float v136 = v135 * 6.2832;
            float v137 = *((float *)&v197 + 1);
          }
          else
          {
            uint64_t v138 = *v129;
            int64_t v139 = (float *)(v189 + 8 * v138);
            int v140 = v138 + 1;
            if (v140 >= (int)v6) {
              int v141 = v6;
            }
            else {
              int v141 = 0;
            }
            int v142 = (float *)(v189 + 8 * (v140 - v141));
            float v143 = *v142;
            float v144 = v142[1];
            float v145 = *v139;
            float v146 = v139[1];
            float v147 = *v142 - *v139;
            float v148 = v144 - v146;
            float v136 = atan2((float)(v144 - v146), v147);
            if (v136 < 0.0)
            {
              float v149 = v136 + 6.28318531;
              float v136 = v149;
            }
            if (vabds_f32(v143, v145) <= vabds_f32(v144, v146))
            {
              char v133 = 0;
              char v198 = 0;
              float v134 = v147 / v148;
              *(float *)&unint64_t v197 = v134;
              float v137 = v145 - (float)(v134 * v146);
            }
            else
            {
              char v133 = 1;
              char v198 = 1;
              float v134 = v148 / v147;
              *(float *)&unint64_t v197 = v134;
              float v137 = v146 - (float)(v134 * v145);
            }
            *((float *)&v197 + 1) = v137;
          }
          uint64_t v13 = v126;
          __double2 v150 = __sincos_stret(v136);
          v2.n128_u32[1] = HIDWORD(v150.__sinval);
          float v151 = v150.__cosval;
          uint64_t v152 = v10 + 88 * v193;
          v2.n128_f32[0] = v150.__sinval;
          *(float *)(v152 + 20) = v151;
          *(_DWORD *)(v152 + 24) = v2.n128_u32[0];
          *(unsigned char *)(v152 + 36) = v133;
          *(float *)(v152 + 40) = v137;
          *(float *)(v152 + 44) = v134;
        }
        if (!debug_auto_trace_nan_inf_check) {
          goto LABEL_178;
        }
        float v153 = v13;
        goto LABEL_170;
      }
      int v191 = (float *)(v10 + 88 * v8);
      if (*v11)
      {
        if (*(_DWORD *)v13)
        {
          uint64_t v25 = v13;
          uint64_t v26 = v10 + 88 * v8;
          int v27 = *(_DWORD *)(v26 + 84);
          uint64_t v28 = *(int *)(v26 + 52);
          int v192 = v12;
          uint64_t v29 = v10 + 88 * v12;
          int v30 = *(_DWORD *)(v29 + 84);
          uint64_t v31 = *(int *)(v29 + 8);
          int v32 = v186;
          do
          {
            if (v27 >= v32) {
              int v33 = v32;
            }
            else {
              int v33 = v27;
            }
            uint64_t v34 = v28 - v33;
            if ((int)v34 >= (int)v6)
            {
              uint64_t v36 = v34 - v6;
              if (v34 - v6 >= v6)
              {
                BOOL v37 = v6 == 0;
              }
              else
              {
                v34 -= v6;
                BOOL v37 = 1;
              }
              if (!v37) {
                uint64_t v34 = v36 % v6;
              }
            }
            else if ((v34 & 0x80000000) != 0)
            {
              uint64_t v35 = v34 + v6;
              if (v34 + v6 < 0 == __OFADD__(v34, v6)) {
                v34 += v6;
              }
              if (v35 < 0 && v6) {
                uint64_t v34 = v35 % v6 + v6;
              }
            }
            if (v30 > v32) {
              int v38 = v32 + 1;
            }
            else {
              int v38 = v30;
            }
            uint64_t v39 = v31 + v38;
            if ((int)v39 >= (int)v6)
            {
              if (v39 - v6 >= v6)
              {
                if (v6) {
                  uint64_t v39 = (v39 - v6) % v6;
                }
              }
              else
              {
                LODWORD(v39) = v39 - v6;
              }
            }
            else if ((v39 & 0x80000000) != 0)
            {
              uint64_t v40 = v39 + v6;
              if (v39 + v6 < 0 == __OFADD__(v39, v6)) {
                LODWORD(v39) = v39 + v6;
              }
              if (v40 < 0 && v6) {
                uint64_t v39 = v40 % v6 + v6;
              }
            }
            int v41 = v32 + 1;
            if (v41 - 1 < 3) {
              break;
            }
            float v42 = *(float *)(*(void *)(v1 + 152) + 4 * (int)v39)
                - *(float *)(*(void *)(v1 + 152) + 4 * (int)v34);
            int v32 = v41 - 2;
          }
          while (vabds_f32(v42, rintf(v42)) >= 0.055556);
          if ((int)v39 <= (int)v34) {
            int v43 = v6;
          }
          else {
            int v43 = 0;
          }
          int v44 = v43 + v39 - v34;
          if (v44 <= 2) {
            uint64_t v45 = 2;
          }
          else {
            uint64_t v45 = v44;
          }
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v34, v45);
          if (ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197))
          {
            char v46 = v198;
            LODWORD(v47) = v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(void *)(*(void *)(v1 + 128) + 8), v34, v45, v198);
            float v49 = v48 * 6.2832;
            float v50 = *((float *)&v197 + 1);
          }
          else
          {
            uint64_t v100 = (float *)(v189 + 8 * (int)v34);
            if ((int)v34 + 1 >= (int)v6) {
              int v101 = v6;
            }
            else {
              int v101 = 0;
            }
            int v102 = (float *)(v189 + 8 * ((int)v34 + 1 - v101));
            float v103 = *v102;
            float v104 = v102[1];
            float v105 = *v100;
            float v106 = v100[1];
            float v107 = *v102 - *v100;
            float v108 = v104 - v106;
            float v49 = atan2((float)(v104 - v106), v107);
            if (v49 < 0.0)
            {
              float v109 = v49 + 6.28318531;
              float v49 = v109;
            }
            if (vabds_f32(v103, v105) <= vabds_f32(v104, v106))
            {
              char v46 = 0;
              char v198 = 0;
              float v47 = v107 / v108;
              float v50 = v105 - (float)(v47 * v106);
            }
            else
            {
              char v46 = 1;
              char v198 = 1;
              float v47 = v108 / v107;
              float v50 = v106 - (float)(v47 * v105);
            }
            unint64_t v197 = __PAIR64__(LODWORD(v50), LODWORD(v47));
          }
          __double2 v166 = __sincos_stret(v49);
          v2.n128_u32[1] = HIDWORD(v166.__sinval);
          float v167 = v166.__cosval;
          uint64_t v168 = v10 + 88 * v192;
          v2.n128_f32[0] = v166.__sinval;
          *(float *)(v168 + 20) = v167;
          *(_DWORD *)(v168 + 24) = v2.n128_u32[0];
          uint64_t v169 = v168 + 20;
          *(unsigned char *)(v169 + 16) = v46;
          *(float *)(v169 + 20) = v50;
          *(float *)(v169 + 24) = v47;
          if (debug_auto_trace_nan_inf_check) {
            v2.n128_f32[0] = numericalCheckCurveStart(v25);
          }
          uint64_t v170 = v10 + 88 * v8;
          *(void *)(v170 + 56) = *(void *)v169;
          *(unsigned char *)(v170 + 72) = v46;
        }
        else
        {
          int v89 = v12;
          uint64_t v90 = v10 + 88 * v12;
          int v93 = *(_DWORD *)(v90 + 8);
          unsigned int v92 = (int *)(v90 + 8);
          int v91 = v93;
          int v94 = v92[19];
          if (v94 <= 2) {
            uint64_t v95 = 2;
          }
          else {
            uint64_t v95 = v94;
          }
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v91, v95);
          int v96 = v13;
          if (ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197))
          {
            char v97 = v198;
            LODWORD(v47) = v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(void *)(*(void *)(v1 + 128) + 8), *v92, v95, v198);
            float v99 = v98 * 6.2832;
            float v50 = *((float *)&v197 + 1);
          }
          else
          {
            uint64_t v154 = *v92;
            float v155 = (float *)(v189 + 8 * v154);
            int v156 = v154 + 1;
            if (v156 >= (int)v6) {
              int v157 = v6;
            }
            else {
              int v157 = 0;
            }
            int v158 = (float *)(v189 + 8 * (v156 - v157));
            float v159 = *v158;
            float v160 = v158[1];
            float v161 = *v155;
            float v162 = v155[1];
            float v163 = *v158 - *v155;
            float v164 = v160 - v162;
            float v99 = atan2((float)(v160 - v162), v163);
            if (v99 < 0.0)
            {
              float v165 = v99 + 6.28318531;
              float v99 = v165;
            }
            if (vabds_f32(v159, v161) <= vabds_f32(v160, v162))
            {
              char v97 = 0;
              char v198 = 0;
              float v47 = v163 / v164;
              *(float *)&unint64_t v197 = v47;
              float v50 = v161 - (float)(v47 * v162);
            }
            else
            {
              char v97 = 1;
              char v198 = 1;
              float v47 = v164 / v163;
              *(float *)&unint64_t v197 = v47;
              float v50 = v162 - (float)(v47 * v161);
            }
            *((float *)&v197 + 1) = v50;
          }
          __double2 v181 = __sincos_stret(v99);
          v2.n128_u32[1] = HIDWORD(v181.__sinval);
          float v182 = v181.__cosval;
          uint64_t v183 = v10 + 88 * v89;
          v2.n128_f32[0] = v181.__sinval;
          *(float *)(v183 + 20) = v182;
          *(_DWORD *)(v183 + 24) = v2.n128_u32[0];
          uint64_t v184 = v183 + 20;
          *(unsigned char *)(v184 + 16) = v97;
          *(float *)(v184 + 20) = v50;
          *(float *)(v184 + 24) = v47;
          if (debug_auto_trace_nan_inf_check) {
            v2.n128_f32[0] = numericalCheckCurveStart(v96);
          }
          uint64_t v170 = v10 + 88 * v8;
          *(void *)(v170 + 56) = *(void *)v184;
          *(unsigned char *)(v170 + 72) = v97;
        }
        *(float *)(v170 + 76) = v50;
        *(float *)(v170 + 80) = v47;
        if (debug_auto_trace_nan_inf_check) {
          v2.n128_f32[0] = numericalCheckCurveEnd(v191);
        }
        goto LABEL_178;
      }
      int v194 = v12;
      uint64_t v190 = (uint64_t)v13;
      uint64_t v66 = v10 + 88 * v8;
      int v69 = *(_DWORD *)(v66 + 8);
      float v68 = (int *)(v66 + 8);
      int v67 = v69;
      int v70 = v68[19];
      if (v70 <= 2) {
        uint64_t v71 = 2;
      }
      else {
        uint64_t v71 = v70;
      }
      computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v67, v71);
      uint64_t v188 = v4;
      if (ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197))
      {
        char v72 = v198;
        LODWORD(v73) = v197;
        ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(void *)(*(void *)(v1 + 128) + 8), *v68, v71, v198);
        float v75 = v74 * 6.2832;
        float v76 = *((float *)&v197 + 1);
      }
      else
      {
        uint64_t v110 = *v68;
        uint64_t v111 = (float *)(v189 + 8 * v110);
        int v112 = v110 + 1;
        if (v112 >= (int)v6) {
          int v113 = v6;
        }
        else {
          int v113 = 0;
        }
        uint64_t v114 = (float *)(v189 + 8 * (v112 - v113));
        float v115 = *v114;
        float v116 = v114[1];
        float v117 = *v111;
        float v118 = v111[1];
        float v119 = *v114 - *v111;
        float v120 = v116 - v118;
        float v75 = atan2((float)(v116 - v118), v119);
        if (v75 < 0.0)
        {
          float v121 = v75 + 6.28318531;
          float v75 = v121;
        }
        if (vabds_f32(v115, v117) <= vabds_f32(v116, v118))
        {
          char v72 = 0;
          char v198 = 0;
          float v73 = v119 / v120;
          float v76 = v117 - (float)(v73 * v118);
        }
        else
        {
          char v72 = 1;
          char v198 = 1;
          float v73 = v120 / v119;
          float v76 = v118 - (float)(v73 * v117);
        }
        unint64_t v197 = __PAIR64__(LODWORD(v76), LODWORD(v73));
      }
      __double2 v171 = __sincos_stret(v75);
      float v172 = v171.__cosval;
      uint64_t v173 = v10 + 88 * v8;
      *(float *)(v173 + 56) = v172;
      uint64_t v174 = v173 + 56;
      float v175 = v171.__sinval;
      *(float *)(v174 + 4) = v175;
      char v187 = v72;
      *(unsigned char *)(v174 + 16) = v72;
      *(float *)(v174 + 20) = v76;
      *(float *)(v174 + 24) = v73;
      if (debug_auto_trace_nan_inf_check) {
        numericalCheckCurveEnd(v191);
      }
      computeCurveStartTangentAtCorner(v1, v190);
      uint64_t v176 = v10 + 88 * v194;
      float v178 = *(float *)(v176 + 20);
      float v179 = *(float *)(v176 + 24);
      uint64_t v177 = (void *)(v176 + 20);
      v2.n128_f32[0] = fabsf(acosf((float)(v179 * *(float *)(v174 + 4)) + (float)(v178 * *(float *)v174))) * 0.15915;
      if (v2.n128_f32[0] >= 0.013889)
      {
        uint64_t v4 = v188;
        if (*(_DWORD *)(v10 + 88 * v8 + 52) != *(_DWORD *)(v10 + 88 * v194 + 8) && *v15 != -1) {
          *(_DWORD *)(v14 + 8 * v16 + 4) |= 1u;
        }
      }
      else
      {
        *uint64_t v177 = *(void *)v174;
        uint64_t v180 = v10 + 88 * v194;
        *(unsigned char *)(v180 + 36) = v187;
        *(float *)(v180 + 40) = v76;
        *(float *)(v180 + 44) = v73;
        uint64_t v4 = v188;
      }
      uint64_t v1 = a1;
      float v153 = (float *)v190;
      if (!debug_auto_trace_nan_inf_check) {
        goto LABEL_178;
      }
LABEL_170:
      v2.n128_f32[0] = numericalCheckCurveStart(v153);
LABEL_178:
      uint64_t v3 = *(int *)(v1 + 252);
    }
    while (v4 < v3);
  }
  if (debug_auto_trace && *(void *)v1) {
    (*(void (**)(void, uint64_t, uint64_t, __n128))(v1 + 8))(*(void *)v1, 9, v1, v2);
  }
  if (debug_auto_trace_uninitialized_testing)
  {
    checkCurves(v1, 9);
  }
}

uint64_t computePoints(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(v2) = *(_DWORD *)(result + 252);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 1;
    uint64_t v6 = *(void *)(*(void *)(result + 128) + 8);
    float v7 = -1.0;
    float v8 = 1.0;
    do
    {
      LODWORD(v9) = ++v4;
      if (v5 >= (int)v2)
      {
        uint64_t v9 = v5 - (int)v2;
        if (v9 >= (int)v2) {
          v9 %= (int)v2;
        }
      }
      uint64_t v10 = *(void *)(v1 + 240);
      int v11 = v9;
      uint64_t v12 = *(void *)(v1 + 208);
      uint64_t v13 = *(int *)(v10 + v3 + 48);
      uint64_t v14 = (int *)(v12 + 8 * v13);
      uint64_t v15 = *(int *)(v10 + 88 * (int)v9 + 4);
      if (v13 == v15)
      {
        if (v14[1]) {
          goto LABEL_50;
        }
      }
      else
      {
        LODWORD(v16) = v13 + 1;
        uint64_t v17 = (int)v13 + 1;
        uint64_t v18 = *(int *)(v1 + 220);
        if ((int)v13 + 1 >= (int)v18)
        {
          LODWORD(v16) = v16 - v18;
          if (v17 - v18 >= v18)
          {
            LODWORD(v16) = v13 + 1;
            if (v18) {
              uint64_t v16 = (v17 - v18) % v18;
            }
          }
        }
        else if ((int)v13 <= -2)
        {
          uint64_t v16 = v18 + (int)v16;
          if (v18 + v17 < 0)
          {
            uint64_t v16 = v16 % v18 + v18;
            if (!v18) {
              LODWORD(v16) = v13 + 1;
            }
          }
        }
        if (v15 == v16)
        {
          if (*(unsigned char *)(v12 + 8 * v13 + 4)) {
            goto LABEL_50;
          }
          if (*(unsigned char *)(v12 + 8 * v15 + 4))
          {
            uint64_t v14 = (int *)(v12 + 8 * v15);
LABEL_50:
            float v32 = *(float *)(v10 + v3 + 80);
            if (*(unsigned char *)(v10 + v3 + 72)) {
              float v33 = *(float *)(v10 + v3 + 80);
            }
            else {
              float v33 = v7;
            }
            if (*(unsigned char *)(v10 + v3 + 72)) {
              float v32 = v7;
            }
            float v34 = sqrtf((float)(v32 * v32) + (float)(v33 * v33));
            if (v34 == 0.0) {
              goto LABEL_75;
            }
            int v35 = *v14;
            float v36 = v8 / v34;
            float v37 = v33 * v36;
            float v38 = v32 * v36;
            float v39 = v36 * *(float *)(v10 + v3 + 76);
            if (*(unsigned char *)(v1 + 19))
            {
              uint64_t v40 = (float *)(v6 + 8 * v35);
              float v41 = *v40;
              float v42 = v40[1];
              printf("intersection at corner %d (%.2f, %.2f)\n", v35, *v40, v42);
              uint64_t result = printf("  incoming arc %d-%d end line equation %.6f*x + %.6f*y + %.2f = 0\n", *(_DWORD *)(v10 + v3 + 8), *(_DWORD *)(v10 + v3 + 52), v37, v38, v39);
            }
            else
            {
              float v41 = 0.0;
              float v42 = 0.0;
            }
            uint64_t v43 = v10 + 88 * v11;
            float v44 = *(float *)(v43 + 44);
            if (*(unsigned char *)(v43 + 36)) {
              float v45 = *(float *)(v43 + 44);
            }
            else {
              float v45 = v7;
            }
            if (*(unsigned char *)(v43 + 36)) {
              float v44 = v7;
            }
            float v46 = sqrtf((float)(v44 * v44) + (float)(v45 * v45));
            if (v46 == 0.0) {
              goto LABEL_75;
            }
            float v47 = v8 / v46;
            float v48 = v45 * v47;
            float v49 = v44 * v47;
            float v50 = v47 * *(float *)(v10 + 88 * v11 + 40);
            if (*(unsigned char *)(v1 + 19))
            {
              printf("  outgoing arc %d-%d end line equation %.6f*x + %.6f*y + %.2f = 0\n", *(_DWORD *)(v10 + 88 * v11 + 8), *(_DWORD *)(v10 + 88 * v11 + 52), v48, v49, v50);
              printf("  incoming line distance of corner vertex %.3f\n", (float)(v39 + (float)((float)(v38 * v42) + (float)(v37 * v41))));
              uint64_t result = printf("  outgoing line distance of corner vertex %.3f\n", (float)((float)((float)(v42 * v49) + (float)(v48 * v41)) + v50));
            }
            float v51 = (float)(v37 * v49) - (float)(v38 * v48);
            if (fabsf(v51) >= 0.08)
            {
              float v53 = 1.0 / v51;
              uint64_t v54 = v10 + 88 * v11;
              float v55 = v53 * (float)((float)(v39 * v48) - (float)(v37 * v50));
              *(float *)(v54 + 16) = v55;
              uint64_t v56 = (float *)(v54 + 16);
              float v57 = v53 * (float)((float)(v38 * v50) - (float)(v39 * v49));
              *(v56 - 1) = v57;
              int v58 = v56 - 1;
              *((_DWORD *)v56 - 2) = v35;
              if (*(unsigned char *)(v1 + 19))
              {
                uint64_t result = printf("  intersection (%.2f, %.2f)\n", v57, v55);
                float v57 = *v58;
              }
              float v7 = -1.0;
              float v8 = 1.0;
              uint64_t v59 = v6 + 8 * v35;
              if ((float)((float)((float)(*(float *)(v59 + 4) - *v56) * (float)(*(float *)(v59 + 4) - *v56))
                         + (float)((float)(*(float *)v59 - v57) * (float)(*(float *)v59 - v57))) > 16.0)
                *(void *)int v58 = *(void *)v59;
            }
            else
            {
              uint64_t v52 = v10 + 88 * v11;
              *(void *)(v52 + 12) = *(void *)(v6 + 8 * v35);
              *(_DWORD *)(v52 + 8) = v35;
              float v7 = -1.0;
              float v8 = 1.0;
            }
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v19 = v13 + 2;
          if ((int)v13 + 2 >= (int)v18)
          {
            LODWORD(v20) = v19 - v18;
            if (v19 - v18 >= v18)
            {
              LODWORD(v20) = v13 + 2;
              if (v18) {
                uint64_t v20 = (v19 - v18) % v18;
              }
            }
          }
          else if ((int)v13 > -3)
          {
            LODWORD(v20) = v13 + 2;
          }
          else
          {
            LODWORD(v20) = v18 + v19;
            if (v18 + v19 < 0)
            {
              LODWORD(v20) = v13 + 2;
              if (v18) {
                uint64_t v20 = (v18 + v19) % v18 + v18;
              }
            }
          }
          if (v15 != v20) {
            break;
          }
          if ((int)v17 >= (int)v18)
          {
            LODWORD(v13) = v17 - v18;
            if (v17 - v18 >= v18)
            {
              LODWORD(v13) = v17;
              if (v18) {
                uint64_t v13 = (v17 - v18) % v18;
              }
            }
          }
          else if ((int)v13 > -2)
          {
            LODWORD(v13) = v13 + 1;
          }
          else
          {
            LODWORD(v13) = v18 + v17;
            if (v18 + v17 < 0)
            {
              LODWORD(v13) = v17;
              if (v18) {
                uint64_t v13 = (v18 + v17) % v18 + v18;
              }
            }
          }
          if (*(unsigned char *)(v12 + 8 * (int)v13 + 4))
          {
            uint64_t v14 = (int *)(v12 + 8 * (int)v13);
            goto LABEL_50;
          }
        }
      }
      uint64_t v21 = v10 + 88 * v11;
      float v22 = *(float *)(v21 + 44);
      if (*(unsigned char *)(v21 + 36)) {
        float v23 = *(float *)(v21 + 44);
      }
      else {
        float v23 = v7;
      }
      if (*(unsigned char *)(v21 + 36)) {
        float v22 = v7;
      }
      float v24 = sqrtf((float)(v22 * v22) + (float)(v23 * v23));
      if (v24 == 0.0)
      {
LABEL_75:
        uint64_t result = printf(" ***** %s in autoTrace\n", "degenerate line");
        break;
      }
      uint64_t v25 = v10 + 88 * v11;
      uint64_t v26 = (float *)(v6 + 8 * *(int *)(v25 + 8));
      float v27 = v26[1];
      float v28 = v8 / v24;
      float v29 = v23 * v28;
      float v30 = v22 * v28;
      float v31 = (float)((float)(v27 * v30) + (float)(v29 * *v26)) + (float)(v28 * *(float *)(v25 + 40));
      *(float *)(v25 + 12) = *v26 - (float)(v31 * v29);
      *(float *)(v25 + 16) = v27 - (float)(v31 * v30);
LABEL_73:
      uint64_t v2 = *(int *)(v1 + 252);
      v3 += 88;
    }
    while (v5++ < v2);
  }
  if (debug_auto_trace)
  {
    uint64_t result = *(void *)v1;
    if (*(void *)v1) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 8))(result, 10, v1);
    }
  }
  if (debug_auto_trace_uninitialized_testing)
  {
    return checkCurves(v1, 10);
  }
  return result;
}

uint64_t findSubdividedCurves(uint64_t a1, __n128 a2)
{
  int v3 = *(_DWORD *)(a1 + 252);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if (*(_DWORD *)(*(void *)(a1 + 240) + 88 * (int)v4))
      {
        uint64_t result = makeCurve(a1, v4, 0, a2);
        if (!result) {
          return result;
        }
        int v6 = v4 - v3;
        int v3 = *(_DWORD *)(a1 + 252);
        LODWORD(v4) = v6 + v3;
      }
      uint64_t v4 = (v4 + 1);
    }
    while ((int)v4 < v3);
    if (v3 >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(a1 + 240);
        if (*(_DWORD *)(v8 + 88 * v7))
        {
          uint64_t v9 = v7 + 1;
        }
        else
        {
          *(void *)(v8 + 88 * v7 + 28) = *(void *)(v8 + 88 * v7 + 12);
          uint64_t v9 = v7 + 1;
          uint64_t v10 = *(int *)(a1 + 252);
          LODWORD(v11) = v7 + 1;
          uint64_t v12 = v7 + 1 - v10;
          if (v7 + 1 >= v10)
          {
            LODWORD(v11) = v7 + 1 - v10;
            if (v12 >= v10)
            {
              LODWORD(v11) = v7 + 1;
              if (v10) {
                uint64_t v11 = v12 % v10;
              }
            }
          }
          *(void *)(*(void *)(a1 + 240) + 88 * v7 + 64) = *(void *)(*(void *)(a1 + 240) + 88 * (int)v11 + 12);
          int v3 = *(_DWORD *)(a1 + 252);
        }
        uint64_t v7 = v9;
      }
      while (v9 < v3);
    }
  }
  if (debug_auto_trace && *(void *)a1) {
    (*(void (**)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)a1, 11, a1);
  }
  if (debug_auto_trace_uninitialized_testing) {
    checkCurves(a1, 11);
  }
  return 1;
}

void convertToPaths(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 252))
  {
    uint64_t v2 = *(void *)(a1 + 240);
    CGAffineTransform m = CGAffineTransformIdentity;
    CGPathMoveToPoint(*(CGMutablePathRef *)(a1 + 48), &m, *(float *)(v2 + 12), *(float *)(v2 + 16));
    LODWORD(v3) = *(_DWORD *)(a1 + 252);
    if ((int)v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = 1;
      do
      {
        LODWORD(v7) = ++v5;
        if (v6 >= (int)v3)
        {
          uint64_t v7 = v6 - (int)v3;
          if (v7 >= (int)v3) {
            v7 %= (int)v3;
          }
        }
        uint64_t v8 = *(void *)(a1 + 240);
        int v9 = *(_DWORD *)(v8 + v4);
        if (v9 == 1)
        {
          CGPathAddCurveToPoint(*(CGMutablePathRef *)(a1 + 48), &m, *(float *)(v8 + v4 + 28), *(float *)(v8 + v4 + 32), *(float *)(v8 + v4 + 64), *(float *)(v8 + v4 + 68), *(float *)(v8 + 88 * (int)v7 + 12), *(float *)(v8 + 88 * (int)v7 + 16));
        }
        else if (!v9)
        {
          CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 48), &m, *(float *)(v8 + 88 * (int)v7 + 12), *(float *)(v8 + 88 * (int)v7 + 16));
        }
        uint64_t v3 = *(int *)(a1 + 252);
        v4 += 88;
      }
      while (v6++ < v3);
    }
    CGPathCloseSubpath(*(CGMutablePathRef *)(a1 + 48));
    if (debug_auto_trace)
    {
      if (*(void *)a1) {
        (*(void (**)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)a1, 12, a1);
      }
    }
  }
}

uint64_t makeCurve(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v4 = a3;
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = *(void *)(a1 + 240);
  int v8 = a2;
  LODWORD(v9) = a2 + 1;
  uint64_t v10 = (int)a2 + 1;
  uint64_t v11 = *(int *)(a1 + 252);
  if ((int)a2 + 1 >= (int)v11)
  {
    uint64_t v9 = (int)v9 - v11;
    if (v9 >= v11) {
      LODWORD(v9) = (v10 - v11) % v11;
    }
  }
  else if ((int)a2 <= -2)
  {
    uint64_t v9 = v11 + v10;
    if (v11 + v10 < 0)
    {
      uint64_t v9 = v9 % v11 + v11;
      if (!v11) {
        LODWORD(v9) = a2 + 1;
      }
    }
  }
  uint64_t v12 = v7 + 88 * (int)a2;
  float v14 = *(float *)(v12 + 20);
  float v13 = *(float *)(v12 + 24);
  float v15 = *(float *)(v12 + 56);
  float v16 = *(float *)(v12 + 60);
  float v17 = (float)(v14 * v16) - (float)(v13 * v15);
  if (v17 == 0.0)
  {
    *(_DWORD *)(v7 + 88 * (int)a2) = 0;
    return 1;
  }
  uint64_t v148 = (int)a2 + 1;
  float v149 = (char **)(a1 + 240);
  uint64_t v19 = *(int **)(a1 + 128);
  uint64_t v20 = *((void *)v19 + 1);
  uint64_t v21 = *v19;
  uint64_t v22 = v7 + 88 * (int)v9;
  uint64_t v23 = v7 + 88 * (int)a2;
  uint64_t v24 = *(int *)(v23 + 8);
  float v155 = (int *)(v23 + 8);
  int v25 = *(_DWORD *)(v23 + 52);
  uint64_t v152 = (int *)(v23 + 52);
  if ((int)v24 + 1 >= (int)v21) {
    int v26 = *v19;
  }
  else {
    int v26 = 0;
  }
  int v27 = v24 + 1 - v26;
  float v28 = 0.0;
  if (v27 != v25)
  {
    uint64_t v29 = *(void *)(a1 + 144);
    float v30 = *(float *)(v29 + 4 * v24);
    do
    {
      float v31 = *(float *)(v29 + 4 * v27);
      float v28 = v28 + (float)((float)(v31 - v30) - rintf(v31 - v30));
      int v32 = v27 + 1;
      if (v32 >= (int)v21) {
        int v33 = v21;
      }
      else {
        int v33 = 0;
      }
      int v27 = v32 - v33;
      float v30 = v31;
    }
    while (v27 != v25);
  }
  float v34 = v28;
  a4.n128_u32[0] = *(_DWORD *)(v12 + 12);
  float v35 = *(float *)(v12 + 16);
  float v36 = *(float *)(v22 + 12);
  float v37 = *(float *)(v22 + 16);
  BOOL v182 = 0;
  float v150 = v34;
  uint64_t v38 = v7 + 88 * (int)a2;
  int v39 = *(_DWORD *)(v38 + 84);
  uint64_t v154 = (int *)(v38 + 84);
  if (fabsf(v34) > 0.25 && a3 <= 19 && v39 >= 2)
  {
    if (*(unsigned char *)(a1 + 20)) {
      printf(" -- subdividing curve %d-%d -- turn angle %.4f (limit %.4f)\n");
    }
    goto LABEL_85;
  }
  float v42 = v36 - a4.n128_f32[0];
  float v43 = v37 - v35;
  unsigned int v44 = v39 / 4;
  if (v39 / 4 <= 1) {
    unsigned int v44 = 1;
  }
  LODWORD(v45) = 3 * v39 / 4;
  int v153 = v39;
  if ((int)v45 >= v39) {
    uint64_t v45 = (v39 - 1);
  }
  else {
    uint64_t v45 = v45;
  }
  float v46 = v35;
  float v167 = a4.n128_f32[0];
  float v168 = v35;
  if ((int)v44 >= (int)v45)
  {
    float v165 = -v15;
    float v166 = -v16;
  }
  else
  {
    float v143 = v37 - v35;
    float v144 = v36 - a4.n128_f32[0];
    int v145 = a2;
    float v159 = (float)(v35 + v37) * 0.5;
    float v160 = (float)(a4.n128_f32[0] + v36) * 0.5;
    float v165 = -v15;
    float v166 = -v16;
    uint64_t v47 = v45 - v44;
    uint64_t v48 = v24 + v44;
    float v156 = 0.0;
    int v49 = -1;
    float v169 = *(float *)"";
    float v158 = 1.0 / v17;
    float v157 = 0.0;
    float v163 = v14;
    float v164 = v13;
    float v161 = v16;
    float v162 = v15;
    do
    {
      if (v48 >= v21)
      {
        if (v48 - v21 >= v21) {
          LODWORD(v50) = v48;
        }
        else {
          LODWORD(v50) = v48 - v21;
        }
        if (v48 - v21 >= v21 && v21) {
          uint64_t v50 = (v48 - v21) % v21;
        }
      }
      else
      {
        LODWORD(v50) = v48;
        if (v48 < 0)
        {
          uint64_t v51 = v21 + v48;
          LODWORD(v50) = v21 + v48 < 0 ? v48 : (int)v21 + (int)v48;
          if (v51 < 0 && v21) {
            uint64_t v50 = v51 % v21 + v21;
          }
        }
      }
      uint64_t v52 = (float *)(v20 + 8 * (int)v50);
      float v53 = (float)(*v52 - v160) * 2.6667;
      float v54 = (float)(v52[1] - v159) * -2.6667;
      float v55 = (float)(v14 * v54) + (float)(v53 * v13);
      float v56 = v158 * (float)((float)(v15 * v54) + (float)(v53 * v16));
      float v57 = v167 + (float)(v14 * v56);
      float v170 = v158 * v55;
      float v172 = v56;
      float v58 = v168 + (float)(v13 * v56);
      float v59 = v36 + (float)(v165 * (float)(v158 * v55));
      float v60 = v37 + (float)(v166 * (float)(v158 * v55));
      float v61 = evaluatePointOnCurve(v167, v168, v57, v58, v59, v60, v36, v37, 0.25);
      float v174 = v62;
      float v176 = v61;
      float v63 = evaluatePointOnCurve(v167, v168, v57, v58, v59, v60, v36, v37, 0.75);
      float v65 = v64;
      float v66 = squaredDistanceFromCurve(v21, v20, v24, v50, v176, v174);
      a4.n128_f32[0] = v66 + squaredDistanceFromCurve(v21, v20, v50, v25, v63, v65);
      if (a4.n128_f32[0] >= v169 || v172 < 0.0)
      {
        float v14 = v163;
        float v13 = v164;
        float v16 = v161;
        float v15 = v162;
      }
      else
      {
        float v14 = v163;
        float v13 = v164;
        float v16 = v161;
        float v15 = v162;
        if (v170 >= 0.0)
        {
          float v156 = v170;
          float v157 = v172;
          float v169 = a4.n128_f32[0];
          int v49 = v50;
        }
      }
      ++v48;
      --v47;
    }
    while (v47);
    if (v49 != -1 && (v150 >= 3.0 || v153 >= 20))
    {
      float v43 = v143;
      float v42 = v144;
      float v67 = sqrtf((float)(v43 * v43) + (float)(v42 * v42));
      uint64_t v6 = a1;
      uint64_t v5 = a2;
      int v8 = v145;
      int v4 = a3;
      a4.n128_f32[0] = v167;
      float v46 = v168;
      goto LABEL_63;
    }
    uint64_t v6 = a1;
    uint64_t v5 = a2;
    int v8 = v145;
    int v4 = a3;
    a4.n128_f32[0] = v167;
    float v46 = v168;
    float v43 = v143;
    float v42 = v144;
  }
  float v67 = sqrtf((float)(v43 * v43) + (float)(v42 * v42));
  float v156 = v67 / 3.0;
  float v157 = v67 / 3.0;
LABEL_63:
  if (v4 > 19
    || (float v68 = 1.0 / fmaxf(v67, 0.001),
        float v69 = v42 * v68,
        float v70 = (float)(v13 * (float)(v43 * v68)) + (float)(v14 * (float)(v42 * v68)),
        float v71 = (float)((float)(v16 * (float)(v43 * v68)) + (float)(v15 * v69)) * v156,
        a4.n128_f32[0] = v167,
        float v46 = v168,
        (float)(v71 + (float)(v157 * v70)) <= v67))
  {
    float v106 = a4.n128_f32[0] + (float)(v14 * v157);
    float v107 = v46 + (float)(v13 * v157);
    uint64_t v181 = 0;
    a4.n128_u64[0] = 0;
    goodnessOfFit(v6, v24, v153, (float *)&v181 + 1, (float *)&v181, a4, 0.0, v106, v107, v36 + (float)(v165 * v156), v37 + (float)(v166 * v156));
    if (*((float *)&v181 + 1) <= *(float *)(v6 + 36) || v4 > 19 || *(float *)&v181 <= *(float *)(v6 + 40))
    {
      float v108 = (float *)(v7 + 88 * v8);
      v108[7] = v106;
      v108[8] = v107;
      v108[16] = v36 + (float)(v165 * v156);
      v108[17] = v37 + (float)(v166 * v156);
      return 1;
    }
    if (*(unsigned char *)(v6 + 20)) {
      printf(" -- subdividing curve %d-%d -- point too far from curve %.4f (limit %.4f)\n");
    }
  }
  else
  {
    int v72 = v153;
    if (*(unsigned char *)(v6 + 20))
    {
      printf(" -- subdividing curve %d-%d -- wings go too far %.4f and %.4f (limit %.4f)\n", v24, v25, (float)(v70 * v157), v71, v67);
      a4.n128_f32[0] = v167;
      float v46 = v168;
      int v72 = *v154;
    }
    if (v72 <= 29)
    {
      float v73 = v67 / 3.0;
      float v74 = a4.n128_f32[0] + (float)(v14 * (float)(v67 / 3.0));
      float v75 = v46 + (float)(v13 * (float)(v67 / 3.0));
      float v76 = v36;
      float v77 = v36 + (float)(v165 * (float)(v67 / 3.0));
      float v78 = v37;
      float v79 = v37 + (float)(v166 * v73);
      float v80 = v46;
      float v81 = a4.n128_f32[0];
      float v82 = evaluatePointOnCurve(a4.n128_f32[0], v46, v74, v75, v77, v79, v76, v78, 0.25);
      float v175 = v83;
      float v177 = v82;
      float v84 = evaluatePointOnCurve(v81, v80, v74, v75, v77, v79, v76, v78, 0.5);
      float v171 = v85;
      float v173 = v84;
      float v86 = evaluatePointOnCurve(v81, v80, v74, v75, v77, v79, v76, v78, 0.75);
      float v88 = v87;
      uint64_t v89 = v7;
      int v90 = v8;
      int v91 = *v155;
      int v92 = *v152;
      uint64_t v93 = *(void *)(v6 + 128);
      int v94 = *(_DWORD *)v93;
      uint64_t v95 = v5;
      uint64_t v96 = *(void *)(v93 + 8);
      float v97 = squaredDistanceFromCurve(*(_DWORD *)v93, v96, *v155, *v152, v177, v175);
      float v98 = squaredDistanceFromCurve(v94, v96, v91, v92, v173, v171);
      uint64_t v99 = v96;
      uint64_t v5 = v95;
      int v100 = v91;
      int v8 = v90;
      float v101 = squaredDistanceFromCurve(v94, v99, v100, v92, v86, v88);
      float v102 = *(float *)(v6 + 40) * *(float *)(v6 + 40);
      BOOL v103 = v97 < v102 && v98 < v102;
      if (v103 && v101 < v102)
      {
        float v105 = (float *)(v89 + 88 * v90);
        v105[7] = v74;
        v105[8] = v75;
        v105[16] = v77;
        v105[17] = v79;
        return 1;
      }
    }
  }
LABEL_85:
  int v109 = *v154;
  if (*v154 >= 0) {
    int v110 = *v154;
  }
  else {
    int v110 = v109 + 1;
  }
  int v111 = *v155 + (v110 >> 1);
  uint64_t v112 = v111;
  if (v111 >= (int)v21)
  {
    uint64_t v114 = v111 - v21;
    LODWORD(v113) = v112 - v21;
    if (v112 - v21 >= v21)
    {
      LODWORD(v113) = v112;
      if (v21) {
        uint64_t v113 = v114 % v21;
      }
    }
  }
  else if (v111 < 0)
  {
    uint64_t v115 = v111 + v21;
    LODWORD(v113) = v112 + v21;
    if (v112 + v21 < 0)
    {
      LODWORD(v113) = v112;
      if (v21) {
        uint64_t v113 = v115 % v21 + v21;
      }
    }
  }
  else
  {
    LODWORD(v113) = *v155 + (v110 >> 1);
  }
  if (*v155 == v113 || *v152 == v113) {
    return 1;
  }
  uint64_t result = (uint64_t)newCurveFromList(v149);
  if (result)
  {
    int v116 = v8;
    int v117 = v110 >> 1;
    uint64_t v118 = v6;
    int v119 = v109 - (v110 >> 1);
    uint64_t v120 = *(void *)(v118 + 240) + 88 * v116;
    memmove((void *)(v120 + 88), (const void *)v120, 88 * (*(_DWORD *)(v118 + 252) + ~v5));
    uint64_t v121 = *(void *)(v118 + 240);
    uint64_t v122 = v121 + 88 * v116;
    *(_DWORD *)(v122 + 48) = -1;
    *(_DWORD *)(v122 + 52) = v113;
    *(_DWORD *)(v122 + 84) = v117;
    *(_DWORD *)(v122 + 92) = -1;
    *(_DWORD *)(v122 + 96) = v113;
    *(void *)(v122 + 100) = *(void *)(v20 + 8 * (int)v113);
    *(_DWORD *)(v122 + 172) = v119;
    if (v117 >= 6) {
      int v123 = 6;
    }
    else {
      int v123 = v117;
    }
    int v124 = v113 - v123;
    uint64_t v125 = (int)v113 - v123;
    if (v124 >= (int)v21)
    {
      uint64_t v127 = v124 - v21;
      uint64_t v126 = v125 - v21;
      if (v125 - v21 >= v21)
      {
        uint64_t v126 = v125;
        if (v21) {
          uint64_t v126 = v127 % v21;
        }
      }
    }
    else if ((v125 & 0x80000000) != 0)
    {
      uint64_t v128 = v124 + v21;
      uint64_t v126 = v125 + v21;
      if (v125 + v21 < 0)
      {
        uint64_t v126 = v125;
        if (v21) {
          uint64_t v126 = v128 % v21 + v21;
        }
      }
    }
    else
    {
      uint64_t v126 = v124;
    }
    if (v119 >= 7) {
      int v129 = 7;
    }
    else {
      int v129 = v119;
    }
    LODWORD(v130) = v129 + v113;
    uint64_t v131 = (int)v130;
    if ((int)v130 >= (int)v21)
    {
      LODWORD(v130) = v130 - v21;
      uint64_t v132 = v118;
      if (v131 - v21 >= v21)
      {
        LODWORD(v130) = v131;
        if (v21) {
          uint64_t v130 = (v131 - v21) % v21;
        }
      }
    }
    else
    {
      uint64_t v132 = v118;
      if ((v130 & 0x80000000) != 0)
      {
        LODWORD(v130) = v130 + v21;
        if (v131 + v21 < 0)
        {
          LODWORD(v130) = v131;
          if (v21) {
            uint64_t v130 = (v131 + v21) % v21 + v21;
          }
        }
      }
    }
    uint64_t v180 = 0;
    memset(v178, 0, sizeof(v178));
    uint64_t v179 = 0;
    uint64_t v133 = (v21 & (((int)v130 - (int)v126) >> 31)) + v130 - v126;
    computeATRRecord((uint64_t)v178, *(int **)(v132 + 128), v126, v133);
    ATRLinearRegression((uint64_t)v178, &v182, (float *)&v180 + 1, (float *)&v180);
    BOOL v134 = v182;
    int v135 = v180;
    ATRAngleOfLine(*(float *)&v180, **(unsigned int **)(v132 + 128), *(void *)(*(void *)(v132 + 128) + 8), v126, v133, v182);
    __double2 v137 = __sincos_stret((float)(v136 * 6.2832));
    float cosval = v137.__cosval;
    float sinval = v137.__sinval;
    *(float *)(v122 + 108) = cosval;
    *(float *)(v122 + 112) = sinval;
    *(unsigned char *)(v122 + 124) = v134;
    int v140 = HIDWORD(v180);
    *(_DWORD *)(v122 + 128) = HIDWORD(v180);
    *(_DWORD *)(v122 + 132) = v135;
    uint64_t v141 = v121 + 88 * v116;
    *(void *)(v141 + 56) = *(void *)(v122 + 108);
    *(unsigned char *)(v141 + 72) = v134;
    *(_DWORD *)(v141 + 76) = v140;
    *(_DWORD *)(v141 + 80) = v135;
    int Curve = makeCurve(v132, v148, (a3 + 1));
    return makeCurve(v132, v5, (a3 + 1)) & Curve;
  }
  return result;
}

uint64_t checkCurves(uint64_t result, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(int *)(result + 252) >= 1)
  {
    uint64_t v3 = result;
    int v4 = 0;
    uint64_t v5 = *(void *)(result + 240);
    do
    {
      switch(a2)
      {
        case 10:
          strcpy(v9, "compute points");
          break;
        case 9:
          uint64_t v6 = "compute curve tangents";
LABEL_10:
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v6;
          *(void *)&v9[15] = *(void *)(v6 + 15);
          break;
        case 8:
          strcpy(v9, "extract curve records");
          break;
        default:
          uint64_t v6 = "find subdivided curves";
          goto LABEL_10;
      }
      if (*(_DWORD *)v5 == -419)
      {
        strcpy(v8, "curve::type is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 4) == -419)
      {
        strcpy(v8, "curve::startIPIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 8) == -419)
      {
        strcpy(v8, "curve::startIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 10 && *(float *)(v5 + 12) == 1.379e-27)
      {
        strcpy(v8, "curve::startPoint.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 > 9 && *(float *)(v5 + 16) == 1.379e-27)
      {
        strcpy(v8, "curve::startPoint.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 20) == 1.379e-27)
      {
        strcpy(v8, "curve::startTangent.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 24) == 1.379e-27)
      {
        strcpy(v8, "curve::startTangent.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 28) == 1.379e-27)
      {
        strcpy(v8, "curve::startWing.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 32) == 1.379e-27)
      {
        strcpy(v8, "curve::startWing.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(unsigned char *)(v5 + 36) == 55)
      {
        strcpy(v8, "curve::startXMajor is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 40) == 1.379e-27)
      {
        strcpy(v8, "curve::startA is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 44) == 1.379e-27)
      {
        strcpy(v8, "curve::startB is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 48) == -419)
      {
        strcpy(v8, "curve::endIPIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 52) == -419)
      {
        strcpy(v8, "curve::endIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 56) == 1.379e-27)
      {
        strcpy(v8, "curve::endTangent.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 60) == 1.379e-27)
      {
        strcpy(v8, "curve::endTangent.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 64) == 1.379e-27)
      {
        strcpy(v8, "curve::endWing.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 68) == 1.379e-27)
      {
        strcpy(v8, "curve::endWing.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(unsigned char *)(v5 + 72) == 55)
      {
        strcpy(v8, "curve::endXMajor is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 76) == 1.379e-27)
      {
        strcpy(v8, "curve::endA is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 80) == 1.379e-27)
      {
        strcpy(v8, "curve::endB is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 84) == -419)
      {
        strcpy(v8, "curve::length is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        uint64_t result = printf(" ***** %s in autoTrace\n", v7);
      }
      ++v4;
      v5 += 88;
    }
    while (v4 < *(_DWORD *)(v3 + 252));
  }
  return result;
}

char *newCurveFromList(char **a1)
{
  int v2 = *((_DWORD *)a1 + 3);
  int v3 = *((_DWORD *)a1 + 2);
  if (v2 >= v3)
  {
    uint64_t v5 = (char *)malloc_type_malloc(88 * v3 + 8800, 0x1000040A005BA8DuLL);
    if (!v5)
    {
      printf(" ***** %s in autoTrace\n", "could not extend curves list");
      return 0;
    }
    int v4 = v5;
    memmove(v5, *a1, 88 * *((int *)a1 + 2));
    *((_DWORD *)a1 + 2) += 100;
    free(*a1);
    *a1 = v4;
    int v2 = *((_DWORD *)a1 + 3);
  }
  else
  {
    int v4 = *a1;
  }
  uint64_t result = &v4[88 * v2];
  *((void *)result + 10) = 0;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  if (debug_auto_trace_uninitialized_testing)
  {
    int32x2_t v7 = vdup_n_s32(0xFFFFFE5D);
    *(int32x2_t *)uint64_t result = v7;
    int v8 = &v4[88 * v2];
    *((_DWORD *)v8 + 2) = -419;
    int32x4_t v9 = vdupq_n_s32(0x12DA82E3u);
    *(int32x4_t *)(v8 + 12) = v9;
    *(void *)(v8 + 28) = v9.i64[0];
    v8[36] = 1;
    *((void *)v8 + 5) = v9.i64[0];
    *((int32x2_t *)v8 + 6) = v7;
    *(int32x4_t *)(v8 + 56) = v9;
    v8[72] = 1;
    *(void *)(v8 + 76) = v9.i64[0];
    *((_DWORD *)v8 + 21) = -419;
  }
  ++*((_DWORD *)a1 + 3);
  return result;
}

float evaluatePointOnCurve(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  BOOL v19 = a1 == a3 && a2 == a4 && a5 == a7 && a6 == a8;
  float v20 = a1
      + (float)((float)((float)((float)((float)((float)((float)(a7 + (float)((float)(a5 - a3) * -3.0)) - a1) * a9)
                                      + (float)((float)((float)(a1 + (float)(a3 * -2.0)) + a5) * 3.0))
                              * a9)
                      + (float)((float)(a3 - a1) * 3.0))
              * a9);
  float result = a1 + (float)((float)(a7 - a1) * a9);
  if (!v19) {
    return v20;
  }
  return result;
}

float squaredDistanceFromCurve(int a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  float v6 = (float)((float)(a6 - *(float *)(a2 + 8 * a3 + 4)) * (float)(a6 - *(float *)(a2 + 8 * a3 + 4)))
     + (float)((float)(a5 - *(float *)(a2 + 8 * a3)) * (float)(a5 - *(float *)(a2 + 8 * a3)));
  for (int i = a3 + 1; ; int i = v9 + 1)
  {
    int v8 = i >= a1 ? a1 : 0;
    int v9 = i - v8;
    if (v9 == a4) {
      break;
    }
    uint64_t v10 = (float *)(a2 + 8 * v9);
    float v11 = (float)(a6 - v10[1]) * (float)(a6 - v10[1]);
    if ((float)(v11 + (float)((float)(a5 - *v10) * (float)(a5 - *v10))) < v6) {
      float v6 = v11 + (float)((float)(a5 - *v10) * (float)(a5 - *v10));
    }
  }
  return v6;
}

void goodnessOfFit(uint64_t a1, int a2, int a3, float *a4, float *a5, __n128 a6, float a7, float a8, float a9, float a10, float a11)
{
  float v15 = *(int **)(a1 + 128);
  uint64_t v16 = *((void *)v15 + 1);
  uint64_t v17 = *v15;
  uint64_t v18 = (float *)(v16 + 8 * a2);
  LODWORD(v19) = a3 + a2;
  uint64_t v20 = a3 + a2;
  if (a3 + a2 >= (int)v17)
  {
    uint64_t v21 = (int)v19 - v17;
    LODWORD(v19) = v19 - v17;
    if (v20 - v17 >= v17)
    {
      LODWORD(v19) = a3 + a2;
      if (v17) {
        uint64_t v19 = v21 % v17;
      }
    }
  }
  else if ((v20 & 0x80000000) != 0)
  {
    uint64_t v22 = v17 + (int)v19;
    LODWORD(v19) = v17 + v19;
    if (v17 + v20 < 0)
    {
      LODWORD(v19) = a3 + a2;
      if (v17) {
        uint64_t v19 = v22 % v17 + v17;
      }
    }
  }
  float v24 = *v18;
  float v23 = v18[1];
  int v25 = (float *)(v16 + 8 * (int)v19);
  float v27 = *v25;
  float v26 = v25[1];
  if (a3 < 3) {
    goto LABEL_25;
  }
  float v28 = a8 - v24;
  float v29 = a9 - v23;
  float v30 = v26 - a11;
  float v31 = (float)((float)(v24 + (float)((float)(a8 + a10) * 3.0)) + v27) * 0.125;
  float v32 = (float)((float)(v23 + (float)((float)(a9 + a11) * 3.0)) + v26) * 0.125;
  float v33 = (float)((float)(a8 + (float)(v27 - a10)) - v24) * 0.25;
  float v34 = (float)((float)(a9 + (float)(v26 - a11)) - v23) * 0.25;
  int v35 = a2 + 1 >= (int)v17 ? v17 : 0;
  int v36 = a2 + 1 - v35;
  float v37 = (float *)(v16 + 8 * v36);
  int v38 = a3 - 2;
  float v40 = *v37;
  float v39 = v37[1];
  int v41 = -1;
  float v42 = 1.0e12;
  do
  {
    if (v36 + 1 >= (int)v17) {
      int v43 = v17;
    }
    else {
      int v43 = 0;
    }
    int v44 = v36 + 1 - v43;
    uint64_t v45 = (float *)(v16 + 8 * v44);
    float v46 = v45[1];
    float v47 = *v45 - v40;
    float v48 = (float)((float)(v46 - v39) * (float)(v46 - v39)) + (float)(v47 * v47);
    float v49 = fabsf((float)((float)((float)((float)(v46 - v39) * v31) - (float)(v47 * v32)) + (float)(*v45 * v39))- (float)(v46 * v40))/ sqrtf(v48);
    float v50 = sqrtf((float)((float)(v32 - v39) * (float)(v32 - v39)) + (float)((float)(v31 - v40) * (float)(v31 - v40)));
    if (v48 != 0.0) {
      float v50 = v49;
    }
    if (v50 < v42)
    {
      int v41 = v36;
      float v42 = v50;
    }
    float v39 = v45[1];
    float v40 = *v45;
    int v36 = v44;
    --v38;
  }
  while (v38);
  if (v41 == -1)
  {
LABEL_25:
    float v56 = sqrtf((float)((float)(v26 - v23) * (float)(v26 - v23)) + (float)((float)(v27 - v24) * (float)(v27 - v24)));
    float v57 = fmaxf(a6.n128_f32[0], a7);
  }
  else
  {
    float v51 = v31 + (float)(v33 * 0.5);
    float v52 = v32 + (float)(v34 * 0.5);
    float v53 = v27 + (float)((float)(v27 - a10) * -0.5);
    float v54 = v26 + (float)(v30 * -0.5);
    __n128 v55 = goodnessOfFit(a1, a6, v42, v24 + (float)(v28 * 0.5), v23 + (float)(v29 * 0.5), v31 + (float)(v33 * -0.5), v32 + (float)(v34 * -0.5));
    v55.n128_f32[0] = v42;
    goodnessOfFit(a1, v55, a7, v51, v52, v53, v54);
    float v56 = 0.0 + 0.0;
    float v57 = fmaxf(0.0, 0.0);
  }
  *a4 = v56;
  *a5 = v57;
}

void findTangentBackwardsFrom(uint64_t a1, int a2, uint64_t a3, float *a4, float *a5, BOOL *a6, float *a7, float *a8)
{
  int v8 = a8;
  int v9 = a7;
  int v10 = a3;
  v112[0] = 0;
  float v110 = 0.0;
  float v111 = 0.0;
  uint64_t v109 = 0;
  memset(v108, 0, sizeof(v108));
  float v13 = *(int **)(a1 + 128);
  uint64_t v14 = *((void *)v13 + 1);
  uint64_t v15 = *v13;
  if (a2 <= 0) {
    int v16 = *v13;
  }
  else {
    int v16 = 0;
  }
  LODWORD(v17) = a2 + v16 - 1;
  uint64_t v18 = (float32x2_t *)(v14 + 8 * (int)v17);
  uint64_t v19 = (float32x2_t *)(v14 + 8 * a2);
  float v20 = v18->f32[1];
  float v21 = v19->f32[0];
  float v22 = v19->f32[1];
  float v23 = vabds_f32(v18->f32[0], v19->f32[0]);
  float v24 = vabds_f32(v20, v22);
  if (v23 <= (float)(v24 * 4.0))
  {
    if (v24 <= (float)(v23 * 4.0)) {
      goto LABEL_42;
    }
    if (v17 == a3)
    {
      float v25 = v18->f32[0] - v21;
      goto LABEL_10;
    }
    do
    {
      if ((int)v17 <= 0) {
        int v29 = *v13;
      }
      else {
        int v29 = 0;
      }
      uint64_t v17 = (v17 + v29 - 1);
      float v25 = *(float *)(v14 + 8 * (int)v17) - v21;
    }
    while (v25 >= -1.0 && v25 <= 1.0 && v17 != a3);
  }
  else
  {
    if (v17 == a3)
    {
      float v25 = v20 - v22;
LABEL_10:
      uint64_t v17 = a3;
      goto LABEL_34;
    }
    do
    {
      if ((int)v17 <= 0) {
        int v26 = *v13;
      }
      else {
        int v26 = 0;
      }
      uint64_t v17 = (v17 + v26 - 1);
      float v25 = *(float *)(v14 + 8 * (int)v17 + 4) - v22;
    }
    while (v25 >= -1.0 && v25 <= 1.0 && v17 != a3);
  }
LABEL_34:
  if (v25 < -1.0 || v25 > 1.0)
  {
    if (a2 - (int)v17 >= -1) {
      int v33 = 0;
    }
    else {
      int v33 = *v13;
    }
    int v34 = a2 - v17 + v33;
    uint64_t v35 = (v34 + 1);
    int v36 = a4;
    float v37 = a6;
    int v38 = a5;
    computeATRRecord((uint64_t)v108, v13, v17, v34 + 1);
    ATRLinearRegression((uint64_t)v108, v112, &v111, &v110);
    BOOL v39 = v112[0];
    float v40 = v110;
    ATRAngleOfLine(v110, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), v17, v35, v112[0]);
    __double2 v42 = __sincos_stret((float)(v41 * 6.2832));
    float cosval = v42.__cosval;
    float sinval = v42.__sinval;
    *int v36 = cosval;
    *int v38 = sinval;
    *float v37 = v39;
    float v45 = v111;
    goto LABEL_117;
  }
LABEL_42:
  int v46 = (v15 & ((a2 - (int)a3) >> 31)) + a2 - a3;
  if (v46 <= 10) {
    goto LABEL_65;
  }
  int v47 = a2 - 10;
  uint64_t v48 = a2 - 10;
  float v104 = a4;
  float v105 = a5;
  float v106 = a6;
  if (a2 - 10 >= (int)v15)
  {
    uint64_t v51 = v47 - v15;
    uint64_t v50 = v48 - v15;
    if (v48 - v15 >= v15)
    {
      uint64_t v50 = a2 - 10;
      if (v15) {
        uint64_t v50 = v51 % v15;
      }
    }
  }
  else if (a2 > 9)
  {
    uint64_t v50 = v47;
  }
  else
  {
    uint64_t v49 = v15 + v47;
    uint64_t v50 = v15 + v48;
    if (v15 + v48 < 0)
    {
      uint64_t v50 = a2 - 10;
      if (v15) {
        uint64_t v50 = v49 % v15 + v15;
      }
    }
  }
  computeATRRecord((uint64_t)v108, v13, v50, 10);
  ATRLinearRegression((uint64_t)v108, v112, &v111, &v110);
  int v52 = v112[0];
  float v40 = v110;
  float v45 = v111;
  float v53 = ATRMaxDistanceFromLine(v108, v112[0], v111, v110);
  ATRAngleOfLine(v40, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), v50, 10, v52);
  float v55 = v54;
  float v56 = straightLineDistanceDeltaToleranceAtAngle(v54);
  int v8 = a8;
  a4 = v104;
  a5 = v105;
  a6 = v106;
  if (v53 >= v56) {
    goto LABEL_65;
  }
  if (v46 < 0x15) {
    goto LABEL_64;
  }
  int v57 = a2 - 20;
  uint64_t v58 = a2 - 20;
  if (a2 - 20 >= (int)v15)
  {
    uint64_t v61 = v57 - v15;
    uint64_t v60 = v58 - v15;
    if (v58 - v15 >= v15)
    {
      uint64_t v60 = a2 - 20;
      if (v15) {
        uint64_t v60 = v61 % v15;
      }
    }
  }
  else if (a2 > 19)
  {
    uint64_t v60 = v57;
  }
  else
  {
    uint64_t v59 = v15 + v57;
    uint64_t v60 = v15 + v58;
    if (v15 + v58 < 0)
    {
      uint64_t v60 = a2 - 20;
      if (v15) {
        uint64_t v60 = v59 % v15 + v15;
      }
    }
  }
  computeATRRecord((uint64_t)v108, *(int **)(a1 + 128), v60, 20);
  ATRLinearRegression((uint64_t)v108, v112, &v111, &v110);
  int v52 = v112[0];
  float v40 = v110;
  float v45 = v111;
  float v62 = ATRMaxDistanceFromLine(v108, v112[0], v111, v110);
  ATRAngleOfLine(v40, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), v60, 20, v52);
  float v55 = v63;
  float v64 = straightLineDistanceDeltaToleranceAtAngle(v63);
  int v8 = a8;
  a4 = v104;
  a5 = v105;
  a6 = v106;
  if (v62 >= v64)
  {
LABEL_65:
    uint64_t v68 = 0;
    int v69 = 0;
    int8x8_t v70 = 0;
    int v9 = a7;
    do
    {
      uint64_t v71 = a2 - v68;
      uint64_t v72 = v71 - v15;
      if (v71 >= v15)
      {
        if (v72 >= v15)
        {
          BOOL v74 = v15 == 0;
        }
        else
        {
          LODWORD(v71) = a2 - v68 - v15;
          BOOL v74 = 1;
        }
        if (!v74) {
          uint64_t v71 = v72 % v15;
        }
      }
      else if (v71 < 0)
      {
        uint64_t v73 = v71 + v15;
        if (v71 + v15 < 0 == __OFADD__(v71, v15)) {
          LODWORD(v71) = v71 + v15;
        }
        if (v73 < 0 && v15) {
          uint64_t v71 = v73 % v15 + v15;
        }
      }
      if (v71 == v10)
      {
        unsigned int v75 = 0;
      }
      else
      {
        unsigned int v76 = 0;
        uint64_t v77 = (int)v71;
        int v78 = v71;
        while (1)
        {
          int v79 = v78 <= 0 ? v15 : 0;
          int v78 = v78 + v79 - 1;
          unsigned int v75 = v76 + 1;
          float32x2_t v80 = vsub_f32(*(float32x2_t *)(v14 + 8 * (int)v71), *(float32x2_t *)(v14 + 8 * v78));
          float v81 = fabsf(v80.f32[0]);
          float v82 = fabsf(v80.f32[1]);
          if (v81 == 2.0 || v82 == 2.0) {
            break;
          }
          BOOL v84 = v81 != 1.0;
          if (v82 == 1.0) {
            BOOL v84 = 0;
          }
          int v85 = v84 | v69;
          v69 |= v85 ^ 1;
          if (v85) {
            unsigned int v86 = -1;
          }
          else {
            unsigned int v86 = 0;
          }
          int8x8_t v70 = vbsl_s8((int8x8_t)vdup_n_s32(v86), v70, (int8x8_t)v80);
          unsigned int v76 = v75;
          if (v78 == v10) {
            goto LABEL_100;
          }
        }
        if (v78 != v10 && v76 < 4) {
          goto LABEL_103;
        }
      }
LABEL_100:
      ++v68;
    }
    while (v68 != 3);
    if (v69)
    {
      uint64_t v77 = (int)v71;
      float32x2_t v80 = (float32x2_t)v70;
LABEL_103:
      _D0 = *(float32x2_t *)(v14 + 8 * v77);
      goto LABEL_105;
    }
    _D0 = *v19;
    float32x2_t v80 = vsub_f32(*v19, *v18);
    LODWORD(v71) = a2;
LABEL_105:
    float32x2_t v89 = vmul_n_f32(v80, 1.0 / fmaxf(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v80, v80).i32[1]), v80.f32[0], v80.f32[0])), 0.001));
    if (v75 == 2)
    {
      if ((int)v71 <= 0) {
        int v90 = v15;
      }
      else {
        int v90 = 0;
      }
      _D0 = vmul_f32(vadd_f32(_D0, *(float32x2_t *)(v14 + 8 * ((int)v71 + v90 - 1))), (float32x2_t)0x3F0000003F000000);
    }
    float32x2_t v91 = vabs_f32(v89);
    unsigned __int8 v92 = vcgt_f32(v91, (float32x2_t)vdup_lane_s32((int32x2_t)v91, 1)).u8[0];
    float32x2_t v93 = (float32x2_t)vdup_lane_s32((int32x2_t)v89, 1);
    _S3 = _D0.i32[1];
    _S4 = vdiv_f32(v89, v93).u32[0];
    __asm { FMLS            S5, S3, V4.S[0] }
    _S2 = vdiv_f32(v93, v89).u32[0];
    __asm { FMLS            S3, S0, V2.S[0] }
    BOOL v101 = (v92 & 1) == 0;
    BOOL v102 = (v92 & 1) != 0;
    if (v101) {
      float v40 = *(float *)&_S4;
    }
    else {
      float v40 = *(float *)&_S2;
    }
    *a4 = v89.f32[0];
    if (v101) {
      float v45 = _S5;
    }
    else {
      float v45 = _S3;
    }
    *a5 = v89.f32[1];
    *a6 = v102;
  }
  else
  {
LABEL_64:
    __double2 v65 = __sincos_stret((float)(v55 * 6.2832));
    float v66 = v65.__cosval;
    *float v104 = v66;
    float v67 = v65.__sinval;
    *float v105 = v67;
    int v9 = a7;
    *float v106 = v52;
  }
LABEL_117:
  *int v9 = v45;
  *int v8 = v40;
}

float numericalCheckCurveEnd(float *a1)
{
  if (fabsf(a1[14]) == INFINITY || fabsf(a1[15]) == INFINITY) {
    printf(" ***** %s in autoTrace\n", "infinity tangent found");
  }
  if (fabsf(a1[19]) == INFINITY || fabsf(a1[20]) == INFINITY) {
    printf(" ***** %s in autoTrace\n", "infinity line equation found");
  }
  return a1[20];
}

float computeCurveStartTangentAtCorner(uint64_t a1, uint64_t a2)
{
  BOOL v9 = 0;
  float v8 = 0.0;
  uint64_t v7 = 0;
  int v6 = 0;
  findTangentForwardsFrom(a1, *(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 52), (float *)&v7, (float *)&v6, &v9, &v8, (float *)&v7 + 1);
  int v3 = v6;
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 24) = v3;
  *(unsigned char *)(a2 + 36) = v9;
  int v5 = HIDWORD(v7);
  float result = v8;
  *(float *)(a2 + 40) = v8;
  *(_DWORD *)(a2 + 44) = v5;
  return result;
}

float numericalCheckCurveStart(float *a1)
{
  if (fabsf(a1[5]) == INFINITY || fabsf(a1[6]) == INFINITY) {
    printf(" ***** %s in autoTrace\n", "infinity tangent found");
  }
  if (fabsf(a1[10]) == INFINITY || fabsf(a1[11]) == INFINITY) {
    printf(" ***** %s in autoTrace\n", "infinity line equation found");
  }
  return a1[11];
}

void findTangentForwardsFrom(uint64_t a1, uint64_t a2, int a3, float *a4, float *a5, BOOL *a6, float *a7, float *a8)
{
  float v8 = a8;
  BOOL v9 = a7;
  v114[0] = 0;
  float v112 = 0.0;
  float v113 = 0.0;
  uint64_t v111 = 0;
  memset(v110, 0, sizeof(v110));
  uint64_t v14 = *(int **)(a1 + 128);
  uint64_t v15 = *((void *)v14 + 1);
  uint64_t v16 = *v14;
  if ((int)a2 + 1 >= (int)v16) {
    int v17 = *v14;
  }
  else {
    int v17 = 0;
  }
  int v18 = a2 + 1 - v17;
  uint64_t v19 = (float32x2_t *)(v15 + 8 * v18);
  float v20 = (float32x2_t *)(v15 + 8 * (int)a2);
  float v21 = v19->f32[0];
  float v22 = v19->f32[1];
  float v23 = v20->f32[0];
  float v24 = v20->f32[1];
  float v25 = vabds_f32(v19->f32[0], v20->f32[0]);
  float v26 = vabds_f32(v22, v24);
  if (v25 <= (float)(v26 * 4.0))
  {
    if (v26 <= (float)(v25 * 4.0)) {
      goto LABEL_58;
    }
    float v32 = v21 - v23;
    int v28 = a3;
    if ((float)(v21 - v23) >= 0.0)
    {
      if (v18 != a3)
      {
        int v28 = v18;
        do
        {
          int v53 = v28 + 1;
          if (v53 >= (int)v16) {
            int v54 = *v14;
          }
          else {
            int v54 = 0;
          }
          int v28 = v53 - v54;
          float v32 = *(float *)(v15 + 8 * v28) - v23;
        }
        while (v32 <= 1.0 && v28 != a3);
      }
      if (v32 > 1.0) {
        goto LABEL_43;
      }
    }
    else
    {
      if (v18 != a3)
      {
        int v28 = v18;
        do
        {
          int v33 = v28 + 1;
          if (v33 >= (int)v16) {
            int v34 = *v14;
          }
          else {
            int v34 = 0;
          }
          int v28 = v33 - v34;
          float v32 = *(float *)(v15 + 8 * v28) - v23;
        }
        while (v32 >= -1.0 && v28 != a3);
      }
      if (v32 < -1.0) {
        goto LABEL_43;
      }
    }
  }
  else
  {
    float v27 = v22 - v24;
    int v28 = a3;
    if ((float)(v22 - v24) < 0.0)
    {
      if (v18 != a3)
      {
        int v28 = v18;
        do
        {
          int v29 = v28 + 1;
          if (v29 >= (int)v16) {
            int v30 = *v14;
          }
          else {
            int v30 = 0;
          }
          int v28 = v29 - v30;
          float v27 = *(float *)(v15 + 8 * v28 + 4) - v24;
        }
        while (v27 >= -1.0 && v28 != a3);
      }
      if (v27 >= -1.0) {
        goto LABEL_58;
      }
LABEL_43:
      int v39 = v28 - a2;
      if (v39 >= -1) {
        int v40 = 0;
      }
      else {
        int v40 = *v14;
      }
      int v41 = v39 + v40;
      uint64_t v42 = (v41 + 1);
      int v43 = a4;
      int v44 = a5;
      computeATRRecord((uint64_t)v110, v14, a2, v41 + 1);
      ATRLinearRegression((uint64_t)v110, v114, &v113, &v112);
      float v45 = *(unsigned int **)(a1 + 128);
      BOOL v46 = v114[0];
      float v47 = v112;
      ATRAngleOfLine(v112, *v45, *((void *)v45 + 1), a2, v42, v114[0]);
      __double2 v49 = __sincos_stret((float)(v48 * 6.2832));
      float cosval = v49.__cosval;
      *int v43 = cosval;
      float sinval = v49.__sinval;
      *int v44 = sinval;
      *a6 = v46;
      float v52 = v113;
      goto LABEL_115;
    }
    if (v18 != a3)
    {
      int v28 = v18;
      do
      {
        int v36 = v28 + 1;
        if (v36 >= (int)v16) {
          int v37 = *v14;
        }
        else {
          int v37 = 0;
        }
        int v28 = v36 - v37;
        float v27 = *(float *)(v15 + 8 * v28 + 4) - v24;
      }
      while (v27 <= 1.0 && v28 != a3);
    }
    if (v27 > 1.0) {
      goto LABEL_43;
    }
  }
LABEL_58:
  int v57 = (v16 & ((a3 - (int)a2) >> 31)) + a3 - a2;
  if (v57 < 11) {
    goto LABEL_63;
  }
  float v106 = a4;
  float v107 = a5;
  computeATRRecord((uint64_t)v110, v14, a2, 10);
  ATRLinearRegression((uint64_t)v110, v114, &v113, &v112);
  int v58 = v114[0];
  float v47 = v112;
  float v52 = v113;
  float v59 = ATRMaxDistanceFromLine(v110, v114[0], v113, v112);
  ATRAngleOfLine(v47, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), a2, 10, v58);
  float v61 = v60;
  float v62 = straightLineDistanceDeltaToleranceAtAngle(v60);
  a4 = v106;
  a5 = v107;
  if (v59 >= v62) {
    goto LABEL_63;
  }
  if (v57 < 0x15) {
    goto LABEL_62;
  }
  computeATRRecord((uint64_t)v110, *(int **)(a1 + 128), a2, 20);
  ATRLinearRegression((uint64_t)v110, v114, &v113, &v112);
  int v58 = v114[0];
  float v47 = v112;
  float v52 = v113;
  float v63 = ATRMaxDistanceFromLine(v110, v114[0], v113, v112);
  ATRAngleOfLine(v47, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), a2, 20, v58);
  float v61 = v64;
  float v65 = straightLineDistanceDeltaToleranceAtAngle(v64);
  a4 = v106;
  a5 = v107;
  if (v63 >= v65)
  {
LABEL_63:
    uint64_t v69 = 0;
    int v70 = 0;
    int8x8_t v71 = 0;
    float v8 = a8;
    BOOL v9 = a7;
    do
    {
      uint64_t v72 = v69 + (int)a2;
      uint64_t v73 = v72 - v16;
      if (v72 >= v16)
      {
        if (v73 >= v16)
        {
          BOOL v75 = v16 == 0;
        }
        else
        {
          LODWORD(v72) = v69 + a2 - v16;
          BOOL v75 = 1;
        }
        if (!v75) {
          uint64_t v72 = v73 % v16;
        }
      }
      else if (v72 < 0)
      {
        uint64_t v74 = v72 + v16;
        if (v72 + v16 < 0 == __OFADD__(v72, v16)) {
          LODWORD(v72) = v72 + v16;
        }
        if (v74 < 0 && v16) {
          uint64_t v72 = v74 % v16 + v16;
        }
      }
      if (v72 == a3)
      {
        unsigned int v76 = 0;
      }
      else
      {
        unsigned int v77 = 0;
        uint64_t v78 = (int)v72;
        int v79 = v72;
        while (1)
        {
          int v80 = v79 + 1;
          int v81 = v79 + 1 >= (int)v16 ? v16 : 0;
          int v79 = v80 - v81;
          unsigned int v76 = v77 + 1;
          float32x2_t v82 = vsub_f32(*(float32x2_t *)(v15 + 8 * v79), *(float32x2_t *)(v15 + 8 * (int)v72));
          float v83 = fabsf(v82.f32[0]);
          float v84 = fabsf(v82.f32[1]);
          if (v83 == 2.0 || v84 == 2.0) {
            break;
          }
          BOOL v86 = v83 != 1.0;
          if (v84 == 1.0) {
            BOOL v86 = 0;
          }
          int v87 = v86 | v70;
          v70 |= v87 ^ 1;
          if (v87) {
            unsigned int v88 = -1;
          }
          else {
            unsigned int v88 = 0;
          }
          int8x8_t v71 = vbsl_s8((int8x8_t)vdup_n_s32(v88), v71, (int8x8_t)v82);
          unsigned int v77 = v76;
          if (v79 == a3) {
            goto LABEL_98;
          }
        }
        if (v79 != a3 && v77 < 4) {
          goto LABEL_101;
        }
      }
LABEL_98:
      ++v69;
    }
    while (v69 != 3);
    if (v70)
    {
      uint64_t v78 = (int)v72;
      float32x2_t v82 = (float32x2_t)v71;
LABEL_101:
      _D0 = *(float32x2_t *)(v15 + 8 * v78);
      goto LABEL_103;
    }
    _D0 = *v20;
    float32x2_t v82 = vsub_f32(*v19, *v20);
    LODWORD(v72) = a2;
LABEL_103:
    float32x2_t v91 = vmul_n_f32(v82, 1.0 / fmaxf(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v82, v82).i32[1]), v82.f32[0], v82.f32[0])), 0.001));
    if (v76 == 2)
    {
      int v92 = v72 + 1;
      if (v92 >= (int)v16) {
        int v93 = v16;
      }
      else {
        int v93 = 0;
      }
      _D0 = vmul_f32(vadd_f32(_D0, *(float32x2_t *)(v15 + 8 * (v92 - v93))), (float32x2_t)0x3F0000003F000000);
    }
    float32x2_t v94 = vabs_f32(v91);
    unsigned __int8 v95 = vcgt_f32(v94, (float32x2_t)vdup_lane_s32((int32x2_t)v94, 1)).u8[0];
    float32x2_t v96 = (float32x2_t)vdup_lane_s32((int32x2_t)v91, 1);
    _S3 = _D0.i32[1];
    _S4 = vdiv_f32(v91, v96).u32[0];
    __asm { FMLS            S5, S3, V4.S[0] }
    _S2 = vdiv_f32(v96, v91).u32[0];
    __asm { FMLS            S3, S0, V2.S[0] }
    BOOL v104 = (v95 & 1) == 0;
    BOOL v105 = (v95 & 1) != 0;
    if (v104) {
      float v47 = *(float *)&_S4;
    }
    else {
      float v47 = *(float *)&_S2;
    }
    *a4 = v91.f32[0];
    if (v104) {
      float v52 = _S5;
    }
    else {
      float v52 = _S3;
    }
    *a5 = v91.f32[1];
    *a6 = v105;
  }
  else
  {
LABEL_62:
    __double2 v66 = __sincos_stret((float)(v61 * 6.2832));
    float v67 = v66.__cosval;
    *float v106 = v67;
    float v68 = v66.__sinval;
    *float v107 = v68;
    *a6 = v58;
    float v8 = a8;
    BOOL v9 = a7;
  }
LABEL_115:
  *BOOL v9 = v52;
  *float v8 = v47;
}

uint64_t cutUpCurve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = **(int **)(a1 + 128);
  int v13 = a4 - a2;
  if (a4 == a2)
  {
    if (*(int *)(a1 + 220) >= 2)
    {
      __sprintf_chk(v46, 0, 0x100uLL, "zero length curve in cutUpCurve at point index %d");
LABEL_8:
      printf(" ***** %s in autoTrace\n", v46);
      return 1;
    }
  }
  else if (v13 >= 0xFFFFFFFE && (int)v12 >= 101 && *(int *)(a1 + 220) >= 3)
  {
    __sprintf_chk(v46, 0, 0x100uLL, "cutUpCurve with reversed point indexes %d and %d");
    goto LABEL_8;
  }
  *(_DWORD *)BOOL v46 = 0;
  if (v13 <= 0) {
    int v14 = v12;
  }
  else {
    int v14 = 0;
  }
  computeAngleSumAndRange(a1, a2, a4, (float *)v46, &v45);
  if (fabsf(*(float *)v46) <= 0.16667) {
    return 1;
  }
  int v15 = v14 + v13;
  uint64_t v16 = *(void *)(a1 + 168);
  float v17 = fabsf(*(float *)(v16 + 4 * (int)a2));
  unsigned int v18 = a2;
  LODWORD(v19) = a2;
  float v20 = v17;
  do
  {
    float v21 = fabsf(*(float *)(v16 + 4 * (int)v18));
    float v17 = v17 + v21;
    if (v21 <= v20) {
      uint64_t v19 = v19;
    }
    else {
      uint64_t v19 = v18;
    }
    if (v21 > v20) {
      float v20 = v21;
    }
    int v22 = v18 + 1;
    if (v22 >= (int)v12) {
      int v23 = v12;
    }
    else {
      int v23 = 0;
    }
    unsigned int v18 = v22 - v23;
  }
  while (v18 != a4);
  float v24 = v20 / (float)(v17 / (float)v15);
  BOOL v25 = v24 < 2.2 || v19 == a2;
  if (v25 || v24 <= 1.9) {
    goto LABEL_28;
  }
  LODWORD(v41) = v19 - a2;
  uint64_t v42 = (int)v19 - (int)a2;
  if ((int)v19 - (int)a2 >= (int)v12)
  {
    LODWORD(v41) = v41 - v12;
    if (v42 - v12 >= v12)
    {
      LODWORD(v41) = v19 - a2;
      if (v12) {
        uint64_t v41 = (v42 - v12) % v12;
      }
    }
  }
  else if ((v42 & 0x80000000) != 0)
  {
    LODWORD(v41) = v41 + v12;
    if (v42 + v12 < 0)
    {
      LODWORD(v41) = v19 - a2;
      if (v12) {
        uint64_t v41 = (v42 + v12) % v12 + v12;
      }
    }
  }
  if (v15 / 5 >= (int)v41 || 4 * v15 / 5 <= (int)v41)
  {
LABEL_28:
    if ((int)a2 + 1 >= (int)v12) {
      int v26 = v12;
    }
    else {
      int v26 = 0;
    }
    int v27 = a2 + 1 - v26;
    if (v27 == a4) {
      return 1;
    }
    int v28 = a2;
    while (1)
    {
      int v29 = v28;
      int v28 = v27;
      uint64_t v30 = *(void *)(a1 + 152);
      float v31 = *(float *)(v30 + 4 * v29);
      float v32 = *(float *)(v30 + 4 * v28) - rintf(*(float *)(v30 + 4 * v28) - v31);
      int v33 = ((v29 == a2) & a3) != 0 ? 8 : 24;
      if (v31 <= 0.0 && v32 >= 0.0
        || v31 >= 0.0 && v32 <= 0.0
        || (v31 <= 0.25 ? (BOOL v34 = v32 < 0.25) : (BOOL v34 = 1),
            !v34
         || (v31 >= 0.25 ? (BOOL v35 = v32 > 0.25) : (BOOL v35 = 1),
             !v35
          || (v31 <= 0.5 ? (BOOL v36 = v32 < 0.5) : (BOOL v36 = 1),
              !v36
           || (v31 >= 0.5 ? (BOOL v37 = v32 > 0.5) : (BOOL v37 = 1),
               !v37
            || (v31 <= 0.75 ? (BOOL v38 = v32 < 0.75) : (BOOL v38 = 1),
                !v38 || v31 >= 0.75 && v32 <= 0.75 || v31 <= 1.0 && v32 >= 1.0 || v31 >= 1.0 && v32 <= 1.0))))))
      {
        uint64_t result = (uint64_t)addInterestingPointAtIndex(v29, v33, a6);
        if (!result) {
          break;
        }
      }
      if (v28 + 1 >= (int)v12) {
        int v40 = v12;
      }
      else {
        int v40 = 0;
      }
      int v27 = v28 + 1 - v40;
      if (v27 == a4) {
        return 1;
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)addInterestingPointAtIndex(v19, 16, a6);
    if (result)
    {
      uint64_t result = (uint64_t)addInterestingPointAtIndex(v19, 8, a6);
      if (result)
      {
        uint64_t v43 = v19 == a4 ? a5 : 0;
        uint64_t result = cutUpCurve(a1, a2, a3, v19, v43, a6);
        if (result)
        {
          char v44 = cutUpCurve(a1, v19, 0, a4, a5, a6);
          uint64_t result = 0;
          if (v44) {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t indexOfNewInterestingPointAtPointIndex(int a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
  {
    uint64_t result = 0;
  }
  else
  {
    LODWORD(result) = 0;
    int v6 = *(_DWORD *)(a2 + 12);
    do
    {
      int v7 = (v6 + (int)result) >> 1;
      int v8 = *(_DWORD *)(*(void *)a2 + 8 * v7);
      if (v8 < a1) {
        uint64_t result = (v7 + 1);
      }
      else {
        uint64_t result = result;
      }
      if (v8 >= a1) {
        int v6 = v7;
      }
    }
    while ((int)result < v6);
  }
  if ((int)result < v4 && *(_DWORD *)(*(void *)a2 + 8 * (int)result) == a1)
  {
    *a3 = 1;
  }
  else if (result == v4)
  {
    return 0;
  }
  else
  {
    return result;
  }
  return result;
}

uint64_t outputLineAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, _DWORD *a5, char *a6)
{
  int v10 = *(int **)(a1 + 128);
  uint64_t v11 = *v10;
  int v12 = a3 + a2;
  uint64_t v13 = (int)a3 + (int)a2;
  if ((int)a3 + (int)a2 >= (int)v11)
  {
    uint64_t v15 = v12 - v11;
    LODWORD(v14) = v13 - v11;
    if (v13 - v11 >= v11)
    {
      LODWORD(v14) = a3 + a2;
      if (v11) {
        uint64_t v14 = v15 % v11;
      }
    }
  }
  else if ((v13 & 0x80000000) != 0)
  {
    uint64_t v16 = v11 + v12;
    LODWORD(v14) = v11 + v13;
    if (v11 + v13 < 0)
    {
      LODWORD(v14) = a3 + a2;
      if (v11) {
        uint64_t v14 = v16 % v11 + v11;
      }
    }
  }
  else
  {
    LODWORD(v14) = a3 + a2;
  }
  uint64_t v163 = 0;
  long long v158 = 0u;
  float64x2_t v159 = 0u;
  float64x2_t v160 = 0u;
  long long v161 = 0u;
  uint64_t v162 = 0;
  BOOL v164 = 0;
  computeATRRecord((uint64_t)&v158, v10, a2, a3);
  ATRLinearRegression((uint64_t)&v158, &v164, (float *)&v163 + 1, (float *)&v163);
  BOOL v17 = v164;
  float v18 = *(float *)&v163;
  float v19 = ATRMaxDistanceFromLine(&v158, v164, *((float *)&v163 + 1), *(float *)&v163);
  int v20 = v17;
  unsigned int v21 = a3;
  ATRAngleOfLine(v18, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), a2, a3, v20);
  float v23 = v22;
  float v24 = *(float *)(*(void *)(a1 + 144) + 4 * (int)a2) - *(float *)(*(void *)(a1 + 144) + 4 * (int)v14);
  float v25 = v24 - rintf(v24);
  float v26 = straightLineDistanceDeltaToleranceAtAngle(v23);
  float v27 = v26;
  if ((int)a3 >= 51 && v19 > v26)
  {
    float v139 = v25;
    BOOL v134 = a4;
    BOOL v157 = 0;
    float v155 = 0.0;
    float v156 = 0.0;
    float v147 = (int *)v158;
    float64x2_t v29 = v159;
    float64x2_t v28 = v160;
    int v136 = a2;
    int v138 = v14;
    int v141 = v11;
    int v30 = v14;
    LODWORD(v14) = a2;
    LODWORD(v31) = v30;
    uint64_t v32 = v11;
    int v34 = DWORD2(v158);
    int v33 = HIDWORD(v158);
    while (1)
    {
      unsigned int v35 = v21;
      BOOL v36 = (float *)*((void *)v147 + 1);
      int v37 = *v147;
      float32x2_t v38 = *(float32x2_t *)&v36[2 * v34];
      int v39 = v34 + 1;
      if (v34 + 1 >= *v147) {
        int v40 = *v147;
      }
      else {
        int v40 = 0;
      }
      int v142 = v40;
      int v143 = v34;
      int v34 = v39 - v40;
      DWORD2(v158) = v39 - v40;
      uint64_t v41 = &v36[2 * (v39 - v40)];
      int v42 = v33 - 2;
      if (v33 >= 2)
      {
        int v43 = 1;
        char v44 = &v36[2 * v34];
        int v45 = v34;
        do
        {
          float v47 = *v44;
          float v46 = v44[1];
          if (v43 == 1)
          {
            *(float *)&uint64_t v162 = *v44;
            *((float *)&v161 + 2) = v47;
            float v48 = (float *)&v161 + 3;
            *((float *)&v162 + 1) = v46;
          }
          else
          {
            __double2 v49 = (float *)&v161 + 2;
            if (v47 < *((float *)&v161 + 2) || (__double2 v49 = (float *)&v162, v47 > *(float *)&v162)) {
              float *v49 = v47;
            }
            float v48 = (float *)&v161 + 3;
            if (v46 >= *((float *)&v161 + 3))
            {
              float v48 = (float *)&v162 + 1;
              if (v46 <= *((float *)&v162 + 1)) {
                goto LABEL_26;
              }
            }
          }
          *float v48 = v46;
LABEL_26:
          int v50 = v45 + 1;
          v44 += 2;
          if (v45 + 1 < v37) {
            ++v45;
          }
          else {
            int v45 = 0;
          }
          if (v50 >= v37) {
            char v44 = v36;
          }
          ++v43;
        }
        while (v33 != v43);
      }
      _Q0 = vcvtq_f64_f32(v38);
      float64x2_t v52 = vsubq_f64(v29, _Q0);
      float64x2_t v53 = vmlsq_f64(v28, _Q0, _Q0);
      _D2 = _Q0.f64[1];
      __asm { FMLS            D14, D2, V0.D[0] }
      int v60 = (int)v14 + 1 >= (int)v32 ? v32 : 0;
      int v61 = v42 + v34 >= v37 ? v37 : 0;
      _Q0 = vcvtq_f64_f32(*(float32x2_t *)&v36[2 * (v42 + v34 - v61)]);
      float64x2_t v63 = vsubq_f64(v52, _Q0);
      float64x2_t v64 = vmlsq_f64(v53, _Q0, _Q0);
      float64x2_t v159 = v63;
      float64x2_t v160 = v64;
      _D1 = _Q0.f64[1];
      __asm { FMLS            D14, D1, V0.D[0] }
      *(double *)&long long v161 = _D14;
      HIDWORD(v158) = v33 - 2;
      if (v33 - 1 >= 2) {
        break;
      }
LABEL_54:
      uint64_t v74 = (v14 + 1 - v60);
      if ((int)v31 <= 0) {
        int v75 = v32;
      }
      else {
        int v75 = 0;
      }
      int v76 = v31 + v75 - 1;
      v21 -= 2;
      int v148 = v42;
      uint64_t v77 = v32;
      float64x2_t v149 = v63;
      float64x2_t v152 = v64;
      ATRLinearRegression((uint64_t)&v158, &v157, &v156, &v155);
      BOOL v78 = v157;
      float v79 = v155;
      float v80 = ATRMaxDistanceFromLine(&v158, v157, v156, v155);
      int v81 = v78;
      LODWORD(v31) = v76;
      ATRAngleOfLine(v79, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), v74, v35 - 2, v81);
      float v83 = v82;
      uint64_t v84 = *(void *)(a1 + 144);
      uint64_t v14 = v74;
      float v85 = *(float *)(v84 + 4 * (int)v74);
      float v86 = *(float *)(v84 + 4 * v76);
      float v87 = straightLineDistanceDeltaToleranceAtAngle(v82);
      int v88 = v148;
      float64x2_t v29 = v149;
      float64x2_t v28 = v152;
      if (v80 > v87)
      {
        uint64_t v32 = v77;
        int v33 = v148;
        if (v35 > 0x34) {
          continue;
        }
      }
      int v145 = v34;
      LODWORD(a2) = v136;
      if (v35 >= 0x35)
      {
        unsigned int v140 = v21;
        uint64_t v137 = v14;
        uint64_t v89 = (int)v14;
        float v90 = (float)(v85 - v86) - rintf(v85 - v86);
        int v91 = v143 - v142 + 1;
        int v92 = 1;
        do
        {
          int v93 = v31;
          float v27 = v87;
          float v23 = v83;
          float v19 = v80;
          uint64_t v94 = *((void *)v147 + 1);
          int v95 = *v147;
          HIDWORD(v158) = v88 + v92;
          if (v88 + v91 < v95) {
            int v95 = 0;
          }
          float32x2_t v96 = *(float32x2_t *)(v94 + 8 * (v88 + v91 - v95));
          float v97 = v90;
          float64x2_t v98 = vcvtq_f64_f32(v96);
          float64x2_t v99 = vaddq_f64(v29, v98);
          float64x2_t v100 = vmlaq_f64(v28, v98, v98);
          float64x2_t v159 = v99;
          float64x2_t v160 = v100;
          _D14 = vmlad_n_f64(_D14, v98.f64[1], v98.f64[0]);
          *(double *)&long long v161 = _D14;
          BOOL v101 = (uint64_t *)&v161 + 1;
          if (v96.f32[0] < *((float *)&v161 + 2) || (BOOL v101 = &v162, v96.f32[0] > *(float *)&v162)) {
            *(_DWORD *)BOOL v101 = v96.i32[0];
          }
          float64x2_t v150 = v99;
          float64x2_t v153 = v100;
          BOOL v102 = (char *)&v161 + 12;
          if (v96.f32[1] < *((float *)&v161 + 3) || (BOOL v102 = (char *)&v162 + 4, v96.f32[1] > *((float *)&v162 + 1))) {
            *(_DWORD *)BOOL v102 = v96.i32[1];
          }
          if ((int)v31 + 1 >= v141) {
            int v103 = v141;
          }
          else {
            int v103 = 0;
          }
          uint64_t v104 = (v31 + 1 - v103);
          ATRLinearRegression((uint64_t)&v158, &v157, &v156, &v155);
          BOOL v105 = v157;
          float v106 = v155;
          float v80 = ATRMaxDistanceFromLine(&v158, v157, v156, v155);
          int v107 = v105;
          uint64_t v31 = v104;
          ATRAngleOfLine(v106, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), v137, v140 + v92, v107);
          float v83 = v108;
          float v109 = *(float *)(*(void *)(a1 + 144) + 4 * v89) - *(float *)(*(void *)(a1 + 144) + 4 * (int)v104);
          float v90 = v109 - rintf(v109);
          float v87 = straightLineDistanceDeltaToleranceAtAngle(v83);
          ++v92;
          ++v91;
          float64x2_t v29 = v150;
          float64x2_t v28 = v153;
          int v88 = v148;
        }
        while (v80 <= v87);
        int v138 = v93;
        uint64_t v144 = (int)v104;
        uint64_t v110 = v140 + v92;
        int v111 = v148 + v92;
        for (LODWORD(a2) = v137; ; LODWORD(a2) = v122)
        {
          int v112 = v145 - 1;
          if (v145 <= 0) {
            int v112 = *v147 + v145 - 1;
          }
          uint64_t v113 = *((void *)v147 + 1);
          *((void *)&v158 + 1) = __PAIR64__(v111, v112);
          int v145 = v112;
          float32x2_t v114 = *(float32x2_t *)(v113 + 8 * v112);
          float64x2_t v115 = vcvtq_f64_f32(v114);
          float64x2_t v116 = vaddq_f64(v29, v115);
          float64x2_t v117 = vmlaq_f64(v28, v115, v115);
          float64x2_t v159 = v116;
          float64x2_t v160 = v117;
          _D14 = vmlad_n_f64(_D14, v115.f64[1], v115.f64[0]);
          *(double *)&long long v161 = _D14;
          uint64_t v118 = (uint64_t *)&v161 + 1;
          if (v114.f32[0] < *((float *)&v161 + 2) || (uint64_t v118 = &v162, v114.f32[0] > *(float *)&v162)) {
            *(_DWORD *)uint64_t v118 = v114.i32[0];
          }
          uint64_t v119 = v31;
          float64x2_t v151 = v116;
          float64x2_t v154 = v117;
          float v139 = v97;
          uint64_t v120 = (char *)&v161 + 12;
          if (v114.f32[1] < *((float *)&v161 + 3) || (uint64_t v120 = (char *)&v162 + 4, v114.f32[1] > *((float *)&v162 + 1))) {
            *(_DWORD *)uint64_t v120 = v114.i32[1];
          }
          int v121 = (int)a2 <= 0 ? v141 : 0;
          uint64_t v122 = (a2 + v121 - 1);
          ATRLinearRegression((uint64_t)&v158, &v157, &v156, &v155);
          int v123 = v157;
          float v124 = v155;
          float v125 = ATRMaxDistanceFromLine(&v158, v157, v156, v155);
          ATRAngleOfLine(v124, **(unsigned int **)(a1 + 128), *(void *)(*(void *)(a1 + 128) + 8), v122, v110, v123);
          float v127 = v126;
          uint64_t v128 = *(void *)(a1 + 144);
          float v129 = *(float *)(v128 + 4 * (int)v122);
          float v130 = *(float *)(v128 + 4 * v144);
          float v131 = straightLineDistanceDeltaToleranceAtAngle(v126);
          float64x2_t v29 = v151;
          float64x2_t v28 = v154;
          if (v125 > v131) {
            break;
          }
          uint64_t v31 = v119;
          ++v111;
          uint64_t v110 = (v110 + 1);
          int v138 = v119;
          float v97 = (float)(v129 - v130) - rintf(v129 - v130);
          float v19 = v125;
          float v23 = v127;
          float v27 = v131;
        }
      }
      a4 = v134;
      LODWORD(v14) = v138;
      float v25 = v139;
      goto LABEL_88;
    }
    int v67 = 2;
    int v68 = v34;
    while (1)
    {
      float v70 = *v41;
      float v69 = v41[1];
      if (v67 == 2)
      {
        *(float *)&uint64_t v162 = *v41;
        *((float *)&v161 + 2) = v70;
        int8x8_t v71 = (float *)&v161 + 3;
        *((float *)&v162 + 1) = v69;
      }
      else
      {
        uint64_t v72 = (float *)&v161 + 2;
        if (v70 < *((float *)&v161 + 2) || (uint64_t v72 = (float *)&v162, v70 > *(float *)&v162)) {
          float *v72 = v70;
        }
        int8x8_t v71 = (float *)&v161 + 3;
        if (v69 >= *((float *)&v161 + 3))
        {
          int8x8_t v71 = (float *)&v162 + 1;
          if (v69 <= *((float *)&v162 + 1)) {
            goto LABEL_48;
          }
        }
      }
      *int8x8_t v71 = v69;
LABEL_48:
      int v73 = v68 + 1;
      v41 += 2;
      if (v68 + 1 < v37) {
        ++v68;
      }
      else {
        int v68 = 0;
      }
      if (v73 >= v37) {
        uint64_t v41 = v36;
      }
      if (v33 == ++v67) {
        goto LABEL_54;
      }
    }
  }
LABEL_88:
  if (v19 <= v27)
  {
    if (*(unsigned char *)(a1 + 17)) {
      printf("   *****   line from %d to %d angle %.2f dist %.2f angle sum %.2f\n", a2, v14, v23, v19, v25);
    }
    uint64_t result = (uint64_t)appendInterestingPointAtIndex(a2, 2, a4);
    if (result && (uint64_t result = (uint64_t)appendInterestingPointAtIndex(v14, 4, a4)) != 0)
    {
      char v132 = 0;
      *a5 = v14;
      uint64_t result = 1;
    }
    else
    {
      char v132 = 1;
    }
  }
  else
  {
    char v132 = 0;
    uint64_t result = 0;
  }
  *a6 = v132;
  return result;
}

uint64_t cornerCompare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t ipCompare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t printIPIndex(uint64_t a1, int a2)
{
  int v2 = (int *)(a1 + 8 * a2);
  printf("  %d ", a2);
  printIndexAndMask(*v2, v2[1]);

  return putchar(10);
}

uint64_t printIndexAndMask(int a1, char a2)
{
  uint64_t result = printf("%3d ", a1);
  if ((a2 & 2) == 0)
  {
    if ((a2 & 4) == 0)
    {
      if ((a2 & 8) == 0)
      {
        if ((a2 & 0x10) == 0)
        {
          if ((a2 & 1) == 0)
          {
            if ((a2 & 0x20) == 0)
            {
              if ((a2 & 0x40) == 0) {
                return result;
              }
              goto LABEL_27;
            }
            goto LABEL_25;
          }
LABEL_23:
          uint64_t result = printf("co");
          if ((a2 & 0x20) != 0) {
            goto LABEL_24;
          }
          goto LABEL_14;
        }
LABEL_21:
        uint64_t result = printf("ce");
        if (a2) {
          goto LABEL_22;
        }
        goto LABEL_13;
      }
LABEL_19:
      uint64_t result = printf("cb");
      if ((a2 & 0x10) != 0) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
LABEL_17:
    uint64_t result = printf("se");
    if ((a2 & 8) != 0) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  uint64_t result = printf("sb");
  if ((a2 & 4) != 0)
  {
    putchar(124);
    goto LABEL_17;
  }
  if ((a2 & 8) != 0)
  {
LABEL_18:
    putchar(124);
    goto LABEL_19;
  }
LABEL_11:
  if ((a2 & 0x10) != 0)
  {
LABEL_20:
    putchar(124);
    goto LABEL_21;
  }
LABEL_12:
  if (a2)
  {
LABEL_22:
    putchar(124);
    goto LABEL_23;
  }
LABEL_13:
  if ((a2 & 0x20) != 0)
  {
LABEL_24:
    putchar(124);
LABEL_25:
    uint64_t result = putchar(105);
    if ((a2 & 0x40) == 0) {
      return result;
    }
    goto LABEL_26;
  }
LABEL_14:
  if ((a2 & 0x40) == 0) {
    return result;
  }
LABEL_26:
  putchar(124);
LABEL_27:

  return printf("ph");
}

uint64_t pairInsertError(uint64_t a1, int *a2, int a3, int a4, int *a5, int a6, int a7, uint64_t a8, const char *a9)
{
  putchar(10);
  printf("***** %s *****\n", a9);
  puts("  inserting:");
  printf("    ");
  printIndexAndMask(*a2, a2[1]);
  printf(" (insertion index %d merge: %d)\n", a3, a4);
  printf("    ");
  printIndexAndMask(*a5, a5[1]);
  printf(" (insertion index %d merge: %d)\n", a6, a7);
  puts("  into:");
  uint64_t v17 = *(int *)(a8 + 12);
  uint64_t v18 = a3 - 1;
  if ((int)v17 >= a3)
  {
    if (a3 <= 0)
    {
      LODWORD(v19) = v17 + v18;
      if (v17 + v18 < 0)
      {
        LODWORD(v19) = a3 - 1;
        if (v17) {
          uint64_t v19 = (v17 + v18) % v17 + v17;
        }
      }
    }
    else
    {
      LODWORD(v19) = a3 - 1;
    }
  }
  else
  {
    LODWORD(v19) = v18 - v17;
    if (v18 - v17 >= v17)
    {
      LODWORD(v19) = a3 - 1;
      if (v17) {
        uint64_t v19 = (v18 - v17) % v17;
      }
    }
  }
  int v20 = a6 + 2;
  BOOL v21 = a6 > -3;
  uint64_t v22 = v17 + a6 + 2;
  if (v22 < 0)
  {
    int v23 = a6 + 2;
  }
  else
  {
    BOOL v21 = 1;
    int v23 = v17 + v20;
  }
  if (a6 <= -3) {
    int v24 = v23;
  }
  else {
    int v24 = a6 + 2;
  }
  if (v20 - v17 >= v17) {
    int v25 = a6 + 2;
  }
  else {
    int v25 = v20 - v17;
  }
  if (v17) {
    BOOL v26 = v20 - v17 < v17;
  }
  else {
    BOOL v26 = 1;
  }
  if (v17) {
    char v27 = v21;
  }
  else {
    char v27 = 1;
  }
  uint64_t v28 = v22 % v17;
  LODWORD(v29) = v19;
  do
  {
    printIPIndex(*(void *)(a1 + 208), v29);
    int v30 = v29 + 1;
    uint64_t v31 = (int)v29 + 1;
    if ((int)v29 + 1 >= (int)v17)
    {
      uint64_t v34 = v30 - v17;
      if (v31 - v17 >= v17) {
        LODWORD(v29) = v29 + 1;
      }
      else {
        LODWORD(v29) = v31 - v17;
      }
      if (v31 - v17 >= v17 && v17 != 0) {
        uint64_t v29 = v34 % v17;
      }
    }
    else
    {
      BOOL v32 = (int)v29 <= -2;
      LODWORD(v29) = v29 + 1;
      if (v32)
      {
        uint64_t v33 = v30 + v17;
        LODWORD(v29) = v31 + v17 < 0 != __OFADD__(v31, v17) ? v31 : (int)v31 + (int)v17;
        if (v33 < 0) {
          uint64_t v29 = v33 % v17 + v17;
        }
      }
    }
    if (v20 >= (int)v17)
    {
      int v36 = v25;
      if (!v26) {
        int v36 = (v20 - v17) % v17;
      }
    }
    else
    {
      int v36 = v24;
      if ((v27 & 1) == 0) {
        int v36 = v28 + v17;
      }
    }
  }
  while (v29 != v36);
  int v37 = *(unsigned int **)(a1 + 128);
  uint64_t v38 = *v37;
  int v39 = (float *)*((void *)v37 + 1);
  float v40 = *v39;
  float v41 = v39[1];
  if ((int)v38 >= 1)
  {
    int v42 = v39 + 1;
    uint64_t v43 = v38;
    float v44 = v41;
    float v45 = v40;
    while (1)
    {
      float v47 = *(v42 - 1);
      float v46 = *v42;
      float v48 = v47 > v40 ? *(v42 - 1) : v40;
      if (v47 >= v45) {
        float v40 = v48;
      }
      else {
        float v45 = *(v42 - 1);
      }
      if (v46 < v44) {
        break;
      }
      if (v46 <= v41) {
        goto LABEL_59;
      }
LABEL_60:
      v42 += 2;
      float v41 = v46;
      if (!--v43) {
        return printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v38, v45, v40, v44, v46);
      }
    }
    float v44 = *v42;
LABEL_59:
    float v46 = v41;
    goto LABEL_60;
  }
  float v45 = *v39;
  float v44 = v39[1];
  float v46 = v44;
  return printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v38, v45, v40, v44, v46);
}

char *newOpenEnd(int *a1)
{
  int v2 = *a1;
  int v3 = a1[1];
  if (*a1 < v3)
  {
    int v4 = (char *)*((void *)a1 + 1);
LABEL_5:
    uint64_t result = &v4[8 * v2];
    *a1 = v2 + 1;
    return result;
  }
  int v5 = (char *)malloc_type_malloc(8 * (v3 + 100), 0x100004090D0E795uLL);
  if (v5)
  {
    int v4 = v5;
    memmove(v5, *((const void **)a1 + 1), 8 * a1[1]);
    a1[1] += 100;
    free(*((void **)a1 + 1));
    *((void *)a1 + 1) = v4;
    int v2 = *a1;
    goto LABEL_5;
  }
  printf(" ***** %s in autoTrace\n", "could not extend extract open ends list");
  return 0;
}

void *CGPathCreateWithThresholdedImageDebug(CGImage *a1, int a2, uint64_t a3, uint64_t a4, int *a5, double a6, double a7)
{
  if (CGPathCreateWithThresholdedImageDebug_debug_predicate != -1) {
    dispatch_once(&CGPathCreateWithThresholdedImageDebug_debug_predicate, &__block_literal_global_4528);
  }
  if (debug_auto_trace)
  {
    uint64_t v14 = a3;
    uint64_t v15 = a4;
    uint64_t v16 = a5;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }

  return createPath(a1, a2, v14, v15, v16, a6, a7);
}

const void *__CGPathCreateWithThresholdedImageDebug_block_invoke()
{
  get_BOOLean_property("DEBUG_AUTO_TRACE", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&debug_auto_trace);
  get_BOOLean_property("DEBUG_AUTO_TRACE_SYNTAX", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&debug_auto_trace_syntax);
  get_BOOLean_property("DEBUG_AUTO_TRACE_NAN_INF_CHECK", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&debug_auto_trace_nan_inf_check);

  return get_BOOLean_property("DEBUG_AUTO_TRACE_UNINITIALIZED_TESTING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&debug_auto_trace_uninitialized_testing);
}

void url_error(char a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theString) {
    goto LABEL_8;
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v11 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFMutableStringRef Mutable = CFDataCreateMutable(0, v11);
  if (!Mutable) {
    goto LABEL_8;
  }
  uint64_t v13 = Mutable;
  CFDataSetLength(Mutable, v11);
  MutableBytePtr = (char *)CFDataGetMutableBytePtr(v13);
  if (!CFStringGetCString(theString, MutableBytePtr, v11, 0x8000100u))
  {
    CFRelease(v13);
LABEL_8:
    CGPostError((uint64_t)"missing or invalid %s.", (uint64_t)theString, a3, a4, a5, a6, a7, a8, a1);
    return;
  }
  CFDataGetBytePtr(v13);
  CGPostError((uint64_t)"unrecognized %s: %s.", v15, v16, v17, v18, v19, v20, v21, a1);

  CFRelease(v13);
}

BOOL expand_parameters(__CFDictionary *a1, const __CFString *a2)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, a2, @";");
  if (!ArrayBySeparatingStrings) {
    return 0;
  }
  CFArrayRef v4 = ArrayBySeparatingStrings;
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count)
  {
    CFIndex v6 = Count;
    if (Count >= 1)
    {
      for (CFIndex i = 0; v6 != i; ++i)
      {
        ValueAtIndeCGFloat x = (const __CFString *)CFArrayGetValueAtIndex(v4, i);
        CFArrayRef v9 = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, @"=");
        BOOL v10 = v9 != 0;
        if (!v9) {
          goto LABEL_34;
        }
        CFArrayRef v11 = v9;
        if (CFArrayGetCount(v9) != 2) {
          goto LABEL_32;
        }
        CFStringRef v12 = (const __CFString *)CFArrayGetValueAtIndex(v11, 0);
        CFStringRef v13 = (const __CFString *)CFArrayGetValueAtIndex(v11, 1);
        if (CFEqual(v12, @"postscript-name"))
        {
          CFDictionarySetValue(a1, @"postscript-name", v13);
        }
        else
        {
          if (!CFStringHasPrefix(v12, @"var:"))
          {
LABEL_32:
            CFRelease(v11);
            goto LABEL_33;
          }
          CFIndex Length = CFStringGetLength(v12);
          if (Length != 4)
          {
            v26.CFIndex location = 4;
            v26.uint64_t length = Length - 4;
            CFStringRef v15 = CFStringCreateWithSubstring(0, v12, v26);
            if (v15)
            {
              CFStringRef v16 = v15;
              int Value = (void *)CFDictionaryGetValue(a1, @"variations");
              if (!Value)
              {
                int Value = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFDictionarySetValue(a1, @"variations", Value);
                if (Value) {
                  CFRelease(Value);
                }
              }
              if (!v13) {
                goto LABEL_29;
              }
              CFIndex v18 = CFStringGetLength(v13);
              CFIndex v19 = CFStringGetMaximumSizeForEncoding(v18, 0x8000100u) + 1;
              uint64_t v20 = (char *)malloc_type_malloc(v19, 0x2062DE7BuLL);
              if (!CFStringGetCString(v13, v20, v19, 0x8000100u)) {
                goto LABEL_23;
              }
              int v24 = 0;
              uint64_t valuePtr = strtol_l(v20, &v24, 10, 0);
              if (v24 == v20 || *v24)
              {
                double v23 = strtod_l(v20, &v24, 0);
                if (v24 == v20 || *v24)
                {
LABEL_23:
                  free(v20);
LABEL_29:
                  CFRelease(v16);
                  goto LABEL_9;
                }
                free(v20);
                CFNumberRef v21 = CFNumberCreate(0, kCFNumberDoubleType, &v23);
              }
              else
              {
                free(v20);
                CFNumberRef v21 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
              }
              if (v21)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)Value, v16, v21);
                CFRelease(v21);
              }
              goto LABEL_29;
            }
          }
        }
LABEL_9:
        CFRelease(v11);
      }
    }
    BOOL v10 = 1;
  }
  else
  {
LABEL_33:
    BOOL v10 = 0;
  }
LABEL_34:
  CFRelease(v4);
  return v10;
}

CFStringRef color_transform_base_copy_debug_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CGColorTransformBase %p>", a1);
}

CFStringRef color_transform_base_copy_format_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CGColorTransformBase %p>", a1);
}

void CIDFontType0::emit_definitions(CIDFontType0 *this)
{
  if (*((void *)this + 17))
  {
    int v2 = (uint64_t *)*((void *)this + 1);
    uint64_t v3 = *v2;
    uint64_t v4 = PDFXRefTableAddObject(*(void **)(*v2 + 464));
    PDFDocumentBeginObject(v3, *((void *)this + 14), v5, v6, v7, v8, v9, v10);
    PDFDocumentPrintf(v3, (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v266);
    PDFDocumentPrintf(v3, (uint64_t)"/Type /Font", v17, v18, v19, v20, v21, v22, v267);
    PDFDocumentPrintf(v3, (uint64_t)"/Subtype /Type0", v23, v24, v25, v26, v27, v28, v268);
    PDFDocumentPrintf(v3, (uint64_t)"/Encoding /Identity-H", v29, v30, v31, v32, v33, v34, v269);
    PDFDocumentPrintReference(v3, (uint64_t)"/DescendantFonts [%R]", v4, v35, v36, v37, v38, v39);
    float v46 = (uint64_t *)((char *)this + 88);
    float v47 = (char *)this + 88;
    if (*((char *)this + 111) < 0) {
      float v47 = (char *)*v46;
    }
    PDFDocumentPrintf(v3, (uint64_t)"/BaseFont /%N", v40, v41, v42, v43, v44, v45, (uint64_t)v47);
    BOOL v284 = 0;
    uint64_t v54 = 0;
    if (GetSubsetRegistryOrderingSupplement(*((CGFont **)this + 2), 0, 0, 0, &v284) && v284)
    {
      uint64_t v54 = PDFXRefTableAddObject(*(void **)(v3 + 464));
      PDFDocumentPrintReference(v3, (uint64_t)"/ToUnicode %R", v54, v55, v56, v57, v58, v59);
    }
    PDFDocumentPrintf(v3, (uint64_t)">>", v48, v49, v50, v51, v52, v53, v270);
    PDFDocumentEndObject(v3, v60, v61, v62, v63, v64, v65, v66);
    uint64_t v283 = (uint64_t *)((char *)this + 88);
    if (v54)
    {
      uint64_t v287 = 0;
      uint64_t v288 = 0;
      uint64_t v286 = (__CFString *)&v287;
      int v73 = (CIDFontType0 *)*((void *)this + 15);
      if (v73 != (CIDFontType0 *)((char *)this + 128))
      {
        do
        {
          unsigned int v74 = *((unsigned __int16 *)v73 + 14);
          int v75 = &v287;
          int v76 = &v287;
          if (v287)
          {
            uint64_t v77 = v287;
            while (1)
            {
              while (1)
              {
                int v76 = (uint64_t **)v77;
                unsigned int v78 = *((unsigned __int16 *)v77 + 13);
                if (v74 >= v78) {
                  break;
                }
                uint64_t v77 = *v76;
                int v75 = v76;
                if (!*v76) {
                  goto LABEL_17;
                }
              }
              if (v78 >= v74) {
                break;
              }
              uint64_t v77 = v76[1];
              if (!v77)
              {
                int v75 = v76 + 1;
                goto LABEL_17;
              }
            }
          }
          else
          {
LABEL_17:
            float v79 = operator new(0x20uLL);
            v79[13] = v74;
            *(void *)float v79 = 0;
            *((void *)v79 + 1) = 0;
            *((void *)v79 + 2) = v76;
            *int v75 = (uint64_t *)v79;
            if (v286->isa)
            {
              uint64_t v286 = (__CFString *)v286->isa;
              float v79 = *v75;
            }
            std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v287, (uint64_t *)v79);
            ++v288;
          }
          float v80 = (CIDFontType0 *)*((void *)v73 + 1);
          if (v80)
          {
            do
            {
              int v81 = v80;
              float v80 = *(CIDFontType0 **)v80;
            }
            while (v80);
          }
          else
          {
            do
            {
              int v81 = (CIDFontType0 *)*((void *)v73 + 2);
              BOOL v82 = *(void *)v81 == (void)v73;
              int v73 = v81;
            }
            while (!v82);
          }
          int v73 = v81;
        }
        while (v81 != (CIDFontType0 *)((char *)this + 128));
      }
      v285[0] = (__CFString *)this;
      ToUnicode::write<std::set<unsigned short>>((uint64_t)v285, v54, &v286);
      std::__tree<unsigned long>::destroy(v287);
      float v46 = (uint64_t *)((char *)this + 88);
    }
    uint64_t v83 = **((void **)this + 1);
    PDFDocumentBeginObject(v83, v4, v67, v68, v69, v70, v71, v72);
    PDFDocumentPrintf(v83, (uint64_t)"<<", v84, v85, v86, v87, v88, v89, v271);
    PDFDocumentPrintf(v83, (uint64_t)"/Type /Font", v90, v91, v92, v93, v94, v95, v272);
    PDFDocumentPrintf(v83, (uint64_t)"/Subtype /CIDFontType0", v96, v97, v98, v99, v100, v101, v273);
    uint64_t v108 = (uint64_t)v46;
    if (*((char *)this + 111) < 0) {
      uint64_t v108 = *v46;
    }
    PDFDocumentPrintf(v83, (uint64_t)"/BaseFont /%N", v102, v103, v104, v105, v106, v107, v108);
    int advances = 0;
    uint64_t v286 = 0;
    v285[0] = 0;
    if (GetSubsetRegistryOrderingSupplement(*((CGFont **)this + 2), (CFTypeRef *)&v286, (CFTypeRef *)v285, &advances, 0))
    {
      uint64_t v115 = **((void **)this + 1);
      PDFDocumentPrintf(v115, (uint64_t)"/CIDSystemInfo <<", v109, v110, v111, v112, v113, v114, v274);
      PDFDocumentPrintf(v115, (uint64_t)"/Registry %T", v116, v117, v118, v119, v120, v121, (uint64_t)v286);
      PDFDocumentPrintf(v115, (uint64_t)"/Ordering %T", v122, v123, v124, v125, v126, v127, (uint64_t)v285[0]);
      PDFDocumentPrintf(v115, (uint64_t)"/Supplement %d", v128, v129, v130, v131, v132, v133, advances);
      PDFDocumentPrintf(v115, (uint64_t)">>", v134, v135, v136, v137, v138, v139, v275);
    }
    uint64_t v140 = PDFXRefTableAddObject(*(void **)(v83 + 464));
    PDFDocumentPrintReference(v83, (uint64_t)"/W %R", v140, v141, v142, v143, v144, v145);
    PDFDocumentPrintf(v83, (uint64_t)"/DW %d", v146, v147, v148, v149, v150, v151, 1000);
    FontDescriptor::FontDescriptor((FontDescriptor *)v285, this, 0);
    PDFDocumentPrintReference(v83, (uint64_t)"/FontDescriptor %R", (uint64_t)v285[1], v152, v153, v154, v155, v156);
    PDFDocumentPrintf(v83, (uint64_t)">>", v157, v158, v159, v160, v161, v162, v276);
    PDFDocumentEndObject(v83, v163, v164, v165, v166, v167, v168, v169);
    uint64_t v170 = **((void **)this + 1);
    PDFDocumentBeginObject(v170, v140, v171, v172, v173, v174, v175, v176);
    PDFDocumentPrintf(v170, (uint64_t)"[", v177, v178, v179, v180, v181, v182, v277);
    uint64_t v287 = 0;
    uint64_t v288 = 0;
    uint64_t v286 = (__CFString *)&v287;
    font_info = (int *)get_font_info(*((void **)this + 2));
    uint64_t v282 = v83;
    if (font_info) {
      float v190 = (float)font_info[2];
    }
    else {
      float v190 = 0.0;
    }
    int v191 = (char *)*((void *)this + 15);
    int v192 = (char *)this + 128;
    if (v191 != (char *)this + 128)
    {
      do
      {
        int advances = 0;
        unsigned __int16 v290 = *((_WORD *)v191 + 13);
        unsigned __int16 v193 = v290;
        CGGlyph glyphs = *((_WORD *)v191 + 14);
        CGFontGetGlyphAdvances(*((CGFontRef *)this + 2), &glyphs, 1uLL, &advances);
        int v194 = advances;
        *((_DWORD *)std::__tree<std::__value_type<unsigned short,int>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,int>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)&v286, v193, &v290)+ 8) = (int)((float)((float)(1000 * v194) / v190) + 0.5);
        float v195 = (char *)*((void *)v191 + 1);
        if (v195)
        {
          do
          {
            uint64_t v196 = v195;
            float v195 = *(char **)v195;
          }
          while (v195);
        }
        else
        {
          do
          {
            uint64_t v196 = (char *)*((void *)v191 + 2);
            BOOL v82 = *(void *)v196 == (void)v191;
            int v191 = v196;
          }
          while (!v82);
        }
        int v191 = v196;
      }
      while (v196 != v192);
    }
    unint64_t v197 = v286;
    while (v197 != (__CFString *)&v287)
    {
      char v198 = v197;
      uint64_t v199 = WORD2(v197->length);
      char v200 = 1;
      unsigned __int16 v201 = WORD2(v197->length);
      while (WORD2(v197->length) == v201)
      {
        BOOL v202 = LODWORD(v197[1].isa) == LODWORD(v198[1].isa);
        info = (uint64_t *)v197->info;
        if (info)
        {
          do
          {
            data = (uint64_t **)info;
            info = (uint64_t *)*info;
          }
          while (info);
        }
        else
        {
          do
          {
            data = (uint64_t **)v197->data;
            BOOL v82 = *data == (uint64_t *)v197;
            unint64_t v197 = (__CFString *)data;
          }
          while (!v82);
        }
        v200 &= v202;
        ++v201;
        unint64_t v197 = (__CFString *)data;
        if (data == &v287)
        {
          unint64_t v197 = (__CFString *)&v287;
          break;
        }
      }
      if (v200)
      {
        if (LODWORD(v198[1].isa) != 1000)
        {
          PDFDocumentPrintf(v170, (uint64_t)"%d", v184, v185, v186, v187, v188, v189, v199);
          PDFDocumentPrintf(v170, (uint64_t)"%d", v205, v206, v207, v208, v209, v210, v201 - 1);
          PDFDocumentPrintf(v170, (uint64_t)"%d", v211, v212, v213, v214, v215, v216, LODWORD(v198[1].isa));
        }
      }
      else
      {
        PDFDocumentPrintf(v170, (uint64_t)"%d [", v184, v185, v186, v187, v188, v189, v199);
        if (v198 != v197)
        {
          do
          {
            PDFDocumentPrintf(v170, (uint64_t)"%d", v217, v218, v219, v220, v221, v222, LODWORD(v198[1].isa));
            uint64_t v223 = (__CFString *)v198->info;
            if (v223)
            {
              do
              {
                uint64_t v224 = v223;
                uint64_t v223 = (__CFString *)v223->isa;
              }
              while (v223);
            }
            else
            {
              do
              {
                uint64_t v224 = (__CFString *)v198->data;
                BOOL v82 = v224->isa == v198;
                char v198 = v224;
              }
              while (!v82);
            }
            char v198 = v224;
          }
          while (v224 != v197);
        }
        PDFDocumentPrintf(v170, (uint64_t)"]", v217, v218, v219, v220, v221, v222, v279);
      }
    }
    PDFDocumentPrintf(v170, (uint64_t)"]", v184, v185, v186, v187, v188, v189, v278);
    PDFDocumentEndObject(v170, v225, v226, v227, v228, v229, v230, v231);
    std::__tree<unsigned long>::destroy(v287);
    uint64_t v232 = PDFXRefTableAddObject(*(void **)(v282 + 464));
    FontDescriptor::emit_definition((uint64_t)v285, (uint64_t)v283, v232, v233, v234, v235, v236, v237);
    uint64_t v238 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
    *(_DWORD *)uint64_t v238 = 1;
    uint64_t v239 = (char *)*((void *)this + 15);
    if (v239 != v192)
    {
      do
      {
        CGFontIndexSetAddIndex(v238, *((unsigned __int16 *)v239 + 14));
        uint64_t v240 = (char *)*((void *)v239 + 1);
        if (v240)
        {
          do
          {
            uint64_t v241 = v240;
            uint64_t v240 = *(char **)v240;
          }
          while (v240);
        }
        else
        {
          do
          {
            uint64_t v241 = (char *)*((void *)v239 + 2);
            BOOL v82 = *(void *)v241 == (void)v239;
            uint64_t v239 = v241;
          }
          while (!v82);
        }
        uint64_t v239 = v241;
      }
      while (v241 != v192);
    }
    CFDataRef embedded_font = (const __CFData *)PDFFont::create_embedded_font(this, v283, (uint64_t)v238, 0, 0);
    CGFontIndexSetRelease((void **)v238);
    if (embedded_font)
    {
      CFIndex Length = CFDataGetLength(embedded_font);
      if ((unint64_t)(Length - 0x80000000) >= 0xFFFFFFFF80000001)
      {
        uint64_t v244 = Length;
        uint64_t v245 = **((void **)this + 1);
        uint64_t v246 = PDFStreamCreateWithObjectNumber(v245, v232);
        PDFDocumentBeginObject(*v246, v246[1], v247, v248, v249, v250, v251, v252);
        PDFDocumentPrintf(*v246, (uint64_t)"<<", v253, v254, v255, v256, v257, v258, v280);
        PDFDocumentPrintf(v245, (uint64_t)"/Subtype /CIDFontType0C", v259, v260, v261, v262, v263, v264, v281);
        PDFStreamBeginData((CGDataConsumerRef)v246);
        BytePtr = CFDataGetBytePtr(embedded_font);
        CGDataConsumerPutBytes(v246[3], (uint64_t)BytePtr, v244);
        PDFStreamEndData(v246);
        PDFStreamEnd((CFDataRef *)v246);
        PDFStreamRelease((uint64_t)v246);
      }
      CFRelease(embedded_font);
    }
  }
}

void sub_184DF3BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

BOOL GetSubsetRegistryOrderingSupplement(CGFont *a1, CFTypeRef *a2, CFTypeRef *a3, int *a4, BOOL *a5)
{
  if (a1)
  {
    CFArrayRef v10 = (const __CFArray *)(*(uint64_t (**)(void))(*((void *)a1 + 2) + 416))(*((void *)a1 + 14));
    if (v10)
    {
      CFArrayRef v11 = v10;
      CFIndex Count = CFArrayGetCount(v10);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        CFIndex v14 = 0;
        while (CFArrayGetValueAtIndex(v11, v14) != (const void *)1667851367)
        {
          if (v13 == ++v14) {
            goto LABEL_7;
          }
        }
        CFRelease(v11);
        if (a2) {
          *a2 = @"Adobe";
        }
        if (a3) {
          *a3 = @"Identity";
        }
        if (a4) {
          *a4 = 0;
        }
        BOOL RegistryOrderingSupplement = 1;
        if (a5) {
          *a5 = 1;
        }
        return RegistryOrderingSupplement;
      }
LABEL_7:
      CFRelease(v11);
    }
  }
  if (a5)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    if (!a2) {
      a2 = (CFTypeRef *)&v19;
    }
    if (!a3) {
      a3 = (CFTypeRef *)&v18;
    }
    BOOL RegistryOrderingSupplement = CGFontGetRegistryOrderingSupplement(a1, a2, a3, a4);
    if (RegistryOrderingSupplement)
    {
      if (CFEqual(*a2, @"Adobe")) {
        BOOL v16 = CFEqual(*a3, @"Identity") != 0;
      }
      else {
        BOOL v16 = 0;
      }
      *a5 = v16;
    }
    return RegistryOrderingSupplement;
  }

  return CGFontGetRegistryOrderingSupplement(a1, a2, a3, a4);
}

void CIDFontType0::emit_references(CIDFontType0 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((void *)this + 17))
  {
    uint64_t v8 = (void *)((char *)this + 64);
    if (*((char *)this + 87) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    PDFDocumentPrintNameReferencePair(**((void **)this + 1), (uint64_t)"/%N %R", (uint64_t)v8, *((void *)this + 14), a5, a6, a7, a8);
  }
}

void CIDFontType0::add_glyphs_to_layout(void **a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8) - *(void *)a3;
  if (v3)
  {
    unint64_t v7 = v3 >> 1;
    std::vector<unsigned short>::vector(&__p, v3 >> 1);
    if (*(void *)(a3 + 8) != *(void *)a3 && v30 != __p)
    {
      uint64_t v27 = v7;
      uint64_t v28 = a2;
      if (CGFontGetCIDsForGlyphs(a1[2], *(unsigned __int16 **)a3, v7, __p))
      {
        if (v7 <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v7;
        }
LABEL_15:
        unint64_t v15 = 0;
        BOOL v16 = a1 + 15;
        uint64_t v26 = a1;
        uint64_t v17 = a1 + 16;
        while (v15 < (v30 - (unsigned char *)__p) >> 1 && v15 < (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1)
        {
          unsigned int v18 = *((unsigned __int16 *)__p + v15);
          __int16 v19 = *(_WORD *)(*(void *)a3 + 2 * v15);
          uint64_t v20 = v17;
          uint64_t v21 = v17;
          uint64_t v22 = *v17;
          if (*v17)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v21 = (uint64_t **)v22;
                unsigned int v23 = *((unsigned __int16 *)v22 + 13);
                if (v18 >= v23) {
                  break;
                }
                uint64_t v22 = *v21;
                uint64_t v20 = v21;
                if (!*v21) {
                  goto LABEL_25;
                }
              }
              if (v23 >= v18) {
                break;
              }
              uint64_t v22 = v21[1];
              if (!v22)
              {
                uint64_t v20 = v21 + 1;
                goto LABEL_25;
              }
            }
          }
          else
          {
LABEL_25:
            uint64_t v24 = (uint64_t *)operator new(0x20uLL);
            *((_WORD *)v24 + 13) = v18;
            *((_WORD *)v24 + 14) = v19;
            std::__tree<unsigned long>::__insert_node_at(v16, (uint64_t)v21, v20, v24);
          }
          if (++v15 == v8)
          {
            if (v30 == __p) {
              break;
            }
            uint64_t v25 = (char *)(v26 + 8);
            if (*((char *)v26 + 87) < 0) {
              uint64_t v25 = *(char **)v25;
            }
            layout_append_data(v28, v25, 2, __p, v27);
            if (__p)
            {
              uint64_t v30 = __p;
              operator delete(__p);
            }
            return;
          }
        }
      }
      else
      {
        uint64_t v9 = *(__int16 **)a3;
        uint64_t v10 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1;
        CFArrayRef v11 = __p;
        uint64_t v12 = (v30 - (unsigned char *)__p) >> 1;
        if (v7 <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v7;
        }
        uint64_t v13 = v8;
        while (v10 && v12)
        {
          __int16 v14 = *v9++;
          *v11++ = v14;
          --v12;
          --v10;
          if (!--v13) {
            goto LABEL_15;
          }
        }
      }
    }
    __break(1u);
  }
}

void sub_184DF3F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CIDFontType0::get_format(CIDFontType0 *this)
{
  return 4;
}

void CIDFontType0::~CIDFontType0(CIDFontType0 *this)
{
  *(void *)this = &unk_1ED093718;
  std::__tree<unsigned long>::destroy(*((void **)this + 16));
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  PDFFont::~PDFFont(this);

  JUMPOUT(0x18532A2A0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED093718;
  std::__tree<unsigned long>::destroy(*((void **)this + 16));
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }

  PDFFont::~PDFFont(this);
}

uint64_t CGGlyphGetTrimRegion(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8 = 0;
  if (a3)
  {
    while (!a2)
    {
LABEL_6:
      if (++v8 == a3)
      {
        uint64_t v8 = a3;
        goto LABEL_8;
      }
    }
    uint64_t v9 = (_WORD *)(result + v8 * a4);
    uint64_t v10 = a2;
    while ((*v9 & 0x7BDE) == 0)
    {
      ++v9;
      if (!--v10) {
        goto LABEL_6;
      }
    }
  }
LABEL_8:
  *a5 = v8;
  uint64_t v11 = result + v8 * a4;
  uint64_t v12 = 0;
  uint64_t v13 = a3 - v8;
  if (v13)
  {
    while (!a2)
    {
LABEL_13:
      if (++v12 == v13)
      {
        uint64_t v12 = v13;
        goto LABEL_15;
      }
    }
    __int16 v14 = (_WORD *)(v11 + (v13 + ~v12) * a4);
    uint64_t v15 = a2;
    while ((*v14 & 0x7BDE) == 0)
    {
      ++v14;
      if (!--v15) {
        goto LABEL_13;
      }
    }
  }
LABEL_15:
  *a6 = v12;
  uint64_t v16 = 0;
  if (a2)
  {
    while (v13 == v12)
    {
LABEL_20:
      if (++v16 == a2)
      {
        uint64_t v16 = a2;
        goto LABEL_22;
      }
    }
    uint64_t v17 = (_WORD *)(v11 + 2 * a2 - 2 - 2 * v16);
    uint64_t v18 = v13 - v12;
    while ((*v17 & 0x7BDE) == 0)
    {
      uint64_t v17 = (_WORD *)((char *)v17 + a4);
      if (!--v18) {
        goto LABEL_20;
      }
    }
  }
LABEL_22:
  *a8 = v16;
  uint64_t v19 = a2 - v16;
  if (a2 == v16)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    while (v13 == v12)
    {
LABEL_28:
      if (++v20 == v19)
      {
        uint64_t v20 = v19;
        goto LABEL_31;
      }
    }
    uint64_t v21 = (_WORD *)(v11 + 2 * v20);
    uint64_t v22 = v13 - v12;
    while ((*v21 & 0x7BDE) == 0)
    {
      uint64_t v21 = (_WORD *)((char *)v21 + a4);
      if (!--v22) {
        goto LABEL_28;
      }
    }
  }
LABEL_31:
  *a7 = v20;
  return result;
}

BOOL CGSBoundsEqualToBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = HIDWORD(a1) == HIDWORD(a3) && a2 == a4 && HIDWORD(a2) == HIDWORD(a4);
  return a1 == a3 && v6;
}

void CGSConvertW8toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0)
  {
    uint64_t v21 = "width >= 0";
    uint64_t v22 = "width (%d) < 0";
    goto LABEL_28;
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0)
  {
    uint64_t v21 = "height >= 0";
    uint64_t v22 = "height (%d) < 0";
LABEL_28:
    _CGHandleAssert("CGSConvertW8toRGBA8888", 125, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", v21, v22, a6, a7, a8, a5);
  }
  if (a4 < 0) {
    uint64_t v10 = &a3[((int)a6 - 1) * a4];
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = -a4;
  }
  if (a4 >= 0) {
    size_t v12 = a2;
  }
  else {
    size_t v12 = -a2;
  }
  if (a4 < 0) {
    uint64_t v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  }
  else {
    uint64_t v13 = a1;
  }
  if ((v12 & 0x80000000) != 0)
  {
    __int16 v14 = (char *)malloc_type_malloc((int)v11 * (int)a6, 0xB05E455uLL);
    uint64_t v15 = v14;
    if (v9 >= 1)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          uint64_t v17 = &v14[i * v11];
          int v18 = a5;
          uint64_t v19 = &v13[i * (int)v12];
          do
          {
            char v20 = *v19++;
            *uint64_t v17 = v20;
            v17[1] = v20;
            _OWORD v17[2] = v20;
            v17[3] = -1;
            v17 += 4;
            --v18;
          }
          while (v18);
        }
      }
    }
    CGBlt_copyBytes(4 * a5, v9, v14, v10, v11, v11);
    free(v15);
  }
  else
  {
    red.data = v13;
    red.CGFloat height = (int)a6;
    red.CGFloat width = a5;
    red.rowBytes = v12;
    dest.data = v10;
    dest.CGFloat height = (int)a6;
    dest.CGFloat width = a5;
    dest.rowBytes = v11;
    vImageConvert_Planar8ToBGRX8888(&red, &red, &red, 0xFFu, &dest, 0);
  }
}

void CGSConvertXRGB8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0) {
    _CGHandleAssert("CGSConvertXRGB8888toRGBA8888", 230, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0) {
    _CGHandleAssert("CGSConvertXRGB8888toRGBA8888", 230, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  }
  if (a4 < 0) {
    uint64_t v10 = &a3[((int)a6 - 1) * a4];
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = -a4;
  }
  if (a4 >= 0) {
    size_t v12 = a2;
  }
  else {
    size_t v12 = -a2;
  }
  if (a4 < 0) {
    uint64_t v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  }
  else {
    uint64_t v13 = a1;
  }
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v10 + 3;
      do
      {
        if (a5 >= 1)
        {
          int v16 = a5;
          uint64_t v17 = v15;
          do
          {
            char v18 = *v17;
            *(_WORD *)(v17 - 3) = *((_WORD *)v17 - 1);
            *(v17 - 1) = v18;
            *uint64_t v17 = -1;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v15 += v11;
      }
      while (v14 != v9);
    }
  }
  else
  {
    src.data = v13;
    src.CGFloat height = (int)a6;
    src.CGFloat width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.CGFloat height = (int)a6;
    dest.CGFloat width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 197121;
    *(_DWORD *)backgroundColor = -1;
    vImagePermuteChannelsWithMaskedInsert_ARGB8888(&src, &dest, permuteMap, 1u, backgroundColor, 0);
  }
}

void CGSConvertARGB8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0) {
    _CGHandleAssert("CGSConvertARGB8888toRGBA8888", 264, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0) {
    _CGHandleAssert("CGSConvertARGB8888toRGBA8888", 264, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  }
  if (a4 < 0) {
    uint64_t v10 = &a3[((int)a6 - 1) * a4];
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = -a4;
  }
  if (a4 >= 0) {
    size_t v12 = a2;
  }
  else {
    size_t v12 = -a2;
  }
  if (a4 < 0) {
    uint64_t v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  }
  else {
    uint64_t v13 = a1;
  }
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          int v16 = (__int32 *)&v10[i * v11];
          int v17 = a5;
          do
          {
            v14.i32[0] = *v16;
            int16x8_t v18 = (int16x8_t)vmovl_u8(v14);
            *(int8x8_t *)v18.i8 = vext_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v18.i8, 2uLL);
            uint8x8_t v14 = (uint8x8_t)vmovn_s16(v18);
            *v16++ = v14.i32[0];
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  else
  {
    src.data = v13;
    src.CGFloat height = (int)a6;
    src.CGFloat width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.CGFloat height = (int)a6;
    dest.CGFloat width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 197121;
    vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
  }
}

void CGSConvertRGBX8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0) {
    _CGHandleAssert("CGSConvertRGBX8888toRGBA8888", 297, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0) {
    _CGHandleAssert("CGSConvertRGBX8888toRGBA8888", 297, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  }
  if (a4 < 0) {
    uint64_t v10 = &a3[((int)a6 - 1) * a4];
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = -a4;
  }
  if (a4 >= 0) {
    size_t v12 = a2;
  }
  else {
    size_t v12 = -a2;
  }
  if (a4 < 0) {
    uint64_t v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  }
  else {
    uint64_t v13 = a1;
  }
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v10 + 3;
      do
      {
        if (a5 >= 1)
        {
          int v16 = a5;
          int v17 = v15;
          do
          {
            *int v17 = -1;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v15 += v11;
      }
      while (v14 != v9);
    }
  }
  else
  {
    src.data = v13;
    src.CGFloat height = (int)a6;
    src.CGFloat width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.CGFloat height = (int)a6;
    dest.CGFloat width = a5;
    dest.rowBytes = v11;
    vImageOverwriteChannelsWithScalar_ARGB8888(0xFFu, &src, &dest, 1u, 0);
  }
}

void CGSConvertXBGR8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0) {
    _CGHandleAssert("CGSConvertXBGR8888toRGBA8888", 329, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0) {
    _CGHandleAssert("CGSConvertXBGR8888toRGBA8888", 329, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  }
  if (a4 < 0) {
    uint64_t v10 = &a3[((int)a6 - 1) * a4];
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = -a4;
  }
  if (a4 >= 0) {
    size_t v12 = a2;
  }
  else {
    size_t v12 = -a2;
  }
  if (a4 < 0) {
    uint64_t v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  }
  else {
    uint64_t v13 = a1;
  }
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v10 + 3;
      do
      {
        if (a5 >= 1)
        {
          int v16 = a5;
          int v17 = v15;
          do
          {
            char v18 = *(v17 - 2);
            char v19 = *(v17 - 1);
            *(v17 - 3) = *v17;
            *(v17 - 2) = v19;
            *(v17 - 1) = v18;
            *int v17 = -1;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v15 += v11;
      }
      while (v14 != v9);
    }
  }
  else
  {
    src.data = v13;
    src.CGFloat height = (int)a6;
    src.CGFloat width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.CGFloat height = (int)a6;
    dest.CGFloat width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 66051;
    *(_DWORD *)backgroundColor = -1;
    vImagePermuteChannelsWithMaskedInsert_ARGB8888(&src, &dest, permuteMap, 1u, backgroundColor, 0);
  }
}

void CGSConvertBGRX8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0) {
    _CGHandleAssert("CGSConvertBGRX8888toRGBA8888", 396, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0) {
    _CGHandleAssert("CGSConvertBGRX8888toRGBA8888", 396, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  }
  if (a4 < 0) {
    uint64_t v10 = &a3[((int)a6 - 1) * a4];
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = -a4;
  }
  if (a4 >= 0) {
    size_t v12 = a2;
  }
  else {
    size_t v12 = -a2;
  }
  if (a4 < 0) {
    uint64_t v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  }
  else {
    uint64_t v13 = a1;
  }
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          uint64_t v15 = &v10[i * v11];
          int v16 = a5;
          do
          {
            char v17 = *v15;
            char *v15 = v15[2];
            v15[2] = v17;
            v15[3] = -1;
            v15 += 4;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  else
  {
    src.data = v13;
    src.CGFloat height = (int)a6;
    src.CGFloat width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.CGFloat height = (int)a6;
    dest.CGFloat width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 50331906;
    *(_DWORD *)backgroundColor = -1;
    vImagePermuteChannelsWithMaskedInsert_ARGB8888(&src, &dest, permuteMap, 1u, backgroundColor, 0);
  }
}

void CGSConvertW16toRGBA8888(uint64_t a1, int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0) {
    _CGHandleAssert("CGSConvertW16toRGBA8888", 705, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0) {
    _CGHandleAssert("CGSConvertW16toRGBA8888", 705, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  }
  uint64_t v10 = (int)a6 - 1;
  if (a4 < 0) {
    size_t v11 = &a3[v10 * a4];
  }
  else {
    size_t v11 = a3;
  }
  if (a4 >= 0) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = -a4;
  }
  if (a4 >= 0) {
    int v13 = a2;
  }
  else {
    int v13 = -a2;
  }
  if (a4 < 0) {
    uint64_t v14 = a1 + (int)v10 * (uint64_t)a2;
  }
  else {
    uint64_t v14 = a1;
  }
  unint64_t v15 = v14 + (int)((v13 * v10) & (v13 >> 31));
  int v16 = v11;
  if (v15 <= (unint64_t)&v11[(int)a6 * (uint64_t)(int)v12])
  {
    int v17 = v13 >= 0 ? v13 : -v13;
    int v16 = v11;
    if (v15 + (int)a6 * (uint64_t)v17 >= (unint64_t)v11) {
      int v16 = (char *)malloc_type_malloc((int)a6 * (uint64_t)(int)v12, 0xD49198B2uLL);
    }
  }
  if (v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (a5 >= 1)
      {
        char v19 = &v16[i * v12];
        int v20 = a5;
        uint64_t v21 = (char *)(v14 + i * v13);
        do
        {
          char v22 = *v21;
          v21 += 2;
          *char v19 = v22;
          v19[1] = v22;
          v19[2] = v22;
          _OWORD v19[3] = -1;
          v19 += 4;
          --v20;
        }
        while (v20);
      }
    }
  }
  if (v16 != v11)
  {
    CGBlt_copyBytes(4 * a5, v9, v16, v11, v12, v12);
    free(v16);
  }
}

void CGSConvertw16toRGBA8888(uint64_t a1, int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 < 0) {
    _CGHandleAssert("CGSConvertw16toRGBA8888", 1131, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  }
  int v9 = a6;
  if ((a6 & 0x80000000) != 0) {
    _CGHandleAssert("CGSConvertw16toRGBA8888", 1131, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  }
  uint64_t v10 = (int)a6 - 1;
  if (a4 < 0) {
    size_t v11 = &a3[v10 * a4];
  }
  else {
    size_t v11 = a3;
  }
  if (a4 >= 0) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = -a4;
  }
  if (a4 >= 0) {
    int v13 = a2;
  }
  else {
    int v13 = -a2;
  }
  if (a4 < 0) {
    uint64_t v14 = a1 + (int)v10 * (uint64_t)a2;
  }
  else {
    uint64_t v14 = a1;
  }
  unint64_t v15 = v14 + (int)((v13 * v10) & (v13 >> 31));
  int v16 = v11;
  if (v15 <= (unint64_t)&v11[(int)a6 * (uint64_t)(int)v12])
  {
    int v17 = v13 >= 0 ? v13 : -v13;
    int v16 = v11;
    if (v15 + (int)a6 * (uint64_t)v17 >= (unint64_t)v11) {
      int v16 = (char *)malloc_type_malloc((int)a6 * (uint64_t)(int)v12, 0xE5F1A741uLL);
    }
  }
  if (v9 >= 1)
  {
    uint64_t v18 = 0;
    char v19 = (char *)(v14 + 1);
    do
    {
      if (a5 >= 1)
      {
        int v20 = &v16[v18 * v12];
        int v21 = a5;
        char v22 = v19;
        do
        {
          char v23 = *v22;
          v22 += 2;
          *int v20 = v23;
          v20[1] = v23;
          v20[2] = v23;
          v20[3] = -1;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      ++v18;
      v19 += v13;
    }
    while (v18 != v9);
  }
  if (v16 != v11)
  {
    CGBlt_copyBytes(4 * a5, v9, v16, v11, v12, v12);
    free(v16);
  }
}

uint64_t CPPDFClipBufferPush(unsigned int a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 <= v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (unsigned int *)(v4 + 52 * v2);
  BOOL v6 = v5 + 2;
  if (!v5[2])
  {
    if (v2 == a1) {
      a1 = *v5;
    }
    if (v3 <= a1)
    {
      *uint64_t v5 = a1;
      _DWORD *v6 = 0;
      uint64_t v10 = (_DWORD *)(v4 + 52 * v2 + 4);
      goto LABEL_15;
    }
    *uint64_t v5 = a1;
    uint64_t v5 = (unsigned int *)(v4 + 52 * a1);
    goto LABEL_12;
  }
  unsigned int v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 + 3 >= v3) {
    return 0;
  }
  *(_DWORD *)a2 = v7 + 3;
  *(_DWORD *)(a2 + 4) = v7;
  if (v3 > v7)
  {
    uint64_t v8 = (unsigned int *)(v4 + 52 * v7);
    *uint64_t v8 = v2;
    BOOL v6 = v8 + 2;
    unsigned int v2 = v7;
LABEL_12:
    _DWORD *v6 = 0;
    *(_DWORD *)(v4 + 52 * v2 + 4) = 0;
  }
  uint64_t v10 = v5 + 1;
LABEL_15:
  *uint64_t v10 = 0;
  return 1;
}

const void *CGFontGetProperty(uint64_t a1, const void *a2)
{
  if (a1 && a2 && (uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 88), memory_order_acquire)) != 0) {
    return CGPropertiesGetProperty(explicit, a2);
  }
  else {
    return 0;
  }
}

void CGFontSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = (atomic_ullong *)(a1 + 88);
    uint64_t explicit = (CFTypeRef *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 88), memory_order_acquire);
    if (!explicit)
    {
      uint64_t explicit = (CFTypeRef *)CGPropertiesCreate();
      unsigned int v7 = 0;
      atomic_compare_exchange_strong(v5, (unint64_t *)&v7, (unint64_t)explicit);
      if (v7)
      {
        CGPropertiesRelease(explicit);
        uint64_t explicit = v7;
      }
    }
    CGPropertiesSetProperty((uint64_t)explicit, a2, a3);
  }
}

CFNumberRef CGFontGetIntProperty(uint64_t a1, const void *a2, void *a3)
{
  CFNumberRef result = 0;
  if (a1)
  {
    if (a2)
    {
      CFNumberRef result = (const __CFNumber *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 88), memory_order_acquire);
      if (result)
      {
        CFNumberRef result = (const __CFNumber *)CGPropertiesGetProperty((uint64_t)result, a2);
        if (result)
        {
          CFNumberRef v6 = result;
          CFTypeID v7 = CFGetTypeID(result);
          if (v7 == CFNumberGetTypeID()) {
            return (const __CFNumber *)(CFNumberGetValue(v6, kCFNumberIntType, a3) != 0);
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void CGFontSetIntProperty(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CGFontSetProperty(a1, @"com.apple.CoreGraphics.CGPDFFontFormat", v3);
  CFRelease(v3);
}

void std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 16);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1ED09B170[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void PDFStructureElement::SetAttribute(PDFStructureElement *this, __CFString *a2, const void *a3)
{
  CFStringRef v5 = a2;
  CFNumberRef v6 = (void *)*((void *)this + 5);
  CFTypeID v7 = (__CFString *)v5;
  if (a3) {
    [v6 setObject:a3 forKey:v5];
  }
  else {
    [v6 removeObjectForKey:v5];
  }
}

void sub_184DF57AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  CFNumberRef v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = v6 - 16;
    do
    {
      uint64_t v8 = v4 - 16;
      *(unsigned char *)uint64_t v7 = 0;
      *(_DWORD *)(v7 + 8) = -1;
      uint64_t v9 = *(unsigned int *)(v4 - 8);
      if (v9 != -1)
      {
        CFNumberRef result = (uint64_t *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1ED09B180[v9])(&v13, v7, v8);
        *(_DWORD *)(v7 + 8) = v9;
      }
      v7 -= 16;
      uint64_t v4 = v8;
    }
    while (v8 != v5);
    uint64_t v6 = v7 + 16;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  *CFNumberRef v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>,(std::__variant_detail::_Trait)1>::~__dtor(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGPDFStructureElement *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void PDFStructureElement::Emit(PDFStructureElement *this, PDFDocument *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((void *)this + 6) = a4;
  uint64_t v10 = &v98;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = &v98;
  uint64_t v11 = (_DWORD *)*((void *)this + 2);
  uint64_t v12 = (_DWORD *)*((void *)this + 3);
  if (v11 == v12) {
    goto LABEL_31;
  }
  uint64_t v13 = 0;
  do
  {
    if (v11 && v11[2] == 1)
    {
      unint64_t v14 = *(void *)(*(void *)v11 + 24);
      unint64_t v15 = &v98;
      int v16 = &v98;
      if (v98)
      {
        int v17 = v98;
        while (1)
        {
          while (1)
          {
            int v16 = (uint64_t **)v17;
            unint64_t v18 = v17[4];
            if (v14 >= v18) {
              break;
            }
            int v17 = *v16;
            unint64_t v15 = v16;
            if (!*v16) {
              goto LABEL_13;
            }
          }
          if (v18 >= v14) {
            break;
          }
          int v17 = v16[1];
          if (!v17)
          {
            unint64_t v15 = v16 + 1;
            goto LABEL_13;
          }
        }
        char v19 = (uint64_t *)v16;
      }
      else
      {
LABEL_13:
        char v19 = (uint64_t *)operator new(0x30uLL);
        v19[4] = v14;
        v19[5] = 0;
        *char v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v16;
        char *v15 = v19;
        int v20 = v19;
        if (*v97)
        {
          uint64_t v97 = (uint64_t **)*v97;
          int v20 = *v15;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v98, v20);
        uint64_t v13 = ++v99;
      }
      ++v19[5];
    }
    v11 += 4;
  }
  while (v11 != v12);
  if (!v13)
  {
LABEL_31:
    uint64_t v26 = 0;
  }
  else
  {
    int v21 = v97;
    if (v97 != &v98)
    {
      char v22 = v97;
      while (1)
      {
        char v23 = v22[1];
        uint64_t v24 = v22;
        if (v23)
        {
          do
          {
            char v22 = (uint64_t **)v23;
            char v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            char v22 = (uint64_t **)v24[2];
            BOOL v25 = *v22 == (uint64_t *)v24;
            uint64_t v24 = v22;
          }
          while (!v25);
        }
        if (v22 == &v98) {
          break;
        }
        if (v21[5] < v22[5]) {
          int v21 = v22;
        }
      }
      uint64_t v10 = v21;
    }
    uint64_t v26 = (uint64_t)v10[4];
  }
  uint64_t v92 = a3;
  uint64_t v27 = *((void *)this + 2);
  uint64_t v28 = *((void *)this + 3);
  if (v27 == v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    do
    {
      if ((unint64_t)v30 >= v31)
      {
        uint64_t v32 = v30 - v29;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
        }
        if ((uint64_t)(v31 - (void)v29) >> 2 > v33) {
          unint64_t v33 = (uint64_t)(v31 - (void)v29) >> 2;
        }
        if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34) {
          unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v34);
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v36 = (uint64_t *)(v34 + 8 * v32);
        *uint64_t v36 = 0;
        uint64_t v37 = v36 + 1;
        while (v30 != v29)
        {
          uint64_t v38 = *--v30;
          *--uint64_t v36 = v38;
        }
        unint64_t v31 = v34 + 8 * v35;
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v36;
        uint64_t v30 = v37;
      }
      else
      {
        *v30++ = 0;
      }
      v96[0] = a2;
      v96[1] = a4;
      v96[2] = v30 - 1;
      v96[3] = a2;
      v96[4] = v26;
      v96[5] = v30 - 1;
      uint64_t v39 = *(unsigned int *)(v27 + 8);
      if (v39 == -1) {
        std::__throw_bad_variant_access[abi:fe180100]();
      }
      uint64_t v100 = v96;
      ((void (*)(void **, uint64_t))off_1ED09B190[v39])(&v100, v27);
      v27 += 16;
    }
    while (v27 != v28);
  }
  PDFDocumentBeginObject((uint64_t)a2, a4, a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"<<", v40, v41, v42, v43, v44, v45, v88);
  Name = CGPDFTagTypeGetName((CGPDFTagType)*(_DWORD *)this);
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/S %s", v47, v48, v49, v50, v51, v52, (uint64_t)Name);
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/P %R", v53, v54, v55, v56, v57, v58, v92);
  uint64_t v59 = (void *)*((void *)this + 5);
  v95[0] = MEMORY[0x1E4F143A8];
  v95[1] = 3221225472;
  v95[2] = ___ZN19PDFStructureElement4EmitEP11PDFDocumentmm_block_invoke;
  v95[3] = &__block_descriptor_40_e35_v32__0__NSString_8__NSString_16_B24l;
  v95[4] = a2;
  [v59 enumerateKeysAndObjectsUsingBlock:v95];
  if (v26) {
    PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/Pg %R", v60, v61, v62, v63, v64, v65, v26);
  }
  if (*((void *)this + 2) == *((void *)this + 3)) {
    goto LABEL_78;
  }
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/K", v60, v61, v62, v63, v64, v65, v89);
  uint64_t v72 = (char *)*((void *)this + 2);
  int v73 = (char *)*((void *)this + 3);
  if (v73 - v72 == 16)
  {
    if (v72 != v73 && v29 != v30)
    {
      uint64_t v74 = *v29;
      if (*v29)
      {
        int v75 = "%R";
      }
      else
      {
        if (*((_DWORD *)v72 + 2) != 1) {
          std::__throw_bad_variant_access[abi:fe180100]();
        }
        uint64_t v74 = *(void *)(*(void *)v72 + 32);
        int v75 = "%d";
      }
      uint64_t v91 = v74;
      goto LABEL_77;
    }
LABEL_85:
    __break(1u);
    return;
  }
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"[", v66, v67, v68, v69, v70, v71, v90);
  uint64_t v76 = *((void *)this + 2);
  if (*((void *)this + 3) != v76)
  {
    uint64_t v77 = 0;
    unint64_t v78 = 0;
    while (v30 - v29 != v78)
    {
      uint64_t v79 = v29[v78];
      if (v79)
      {
        float v80 = "%R";
      }
      else
      {
        if (*(_DWORD *)(v76 + v77 + 8) != 1) {
          std::__throw_bad_variant_access[abi:fe180100]();
        }
        uint64_t v79 = *(void *)(*(void *)(v76 + v77) + 32);
        float v80 = "%d";
      }
      PDFDocumentPrintf((uint64_t)a2, (uint64_t)v80, v66, v67, v68, v69, v70, v71, v79);
      ++v78;
      uint64_t v76 = *((void *)this + 2);
      v77 += 16;
      if (v78 >= (*((void *)this + 3) - v76) >> 4) {
        goto LABEL_73;
      }
    }
    goto LABEL_85;
  }
LABEL_73:
  int v75 = "]";
LABEL_77:
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)v75, v66, v67, v68, v69, v70, v71, v91);
LABEL_78:
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)">>", v60, v61, v62, v63, v64, v65, v89);
  PDFDocumentEndObject((uint64_t)a2, v81, v82, v83, v84, v85, v86, v87);
  if (v29) {
    operator delete(v29);
  }
  std::__tree<unsigned long>::destroy(v98);
}

void sub_184DF5E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  operator delete(v25);
  std::__tree<unsigned long>::destroy(a25);
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:fe180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

void ___ZN19PDFStructureElement4EmitEP11PDFDocumentmm_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_1,PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(unsigned char *result, uint64_t *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *a2;
  if (*(_DWORD *)(*a2 + 16) || *(void *)(v3 + 24) != *(void *)(v2 + 32))
  {
    unint64_t v4 = PDFXRefTableAddObject(*(void **)(*(void *)(v2 + 24) + 464));
    **(void **)(v2 + 40) = v4;
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v6 = *(void *)(v2 + 32);
    PDFDocumentBeginObject(v5, v4, v7, v8, v9, v10, v11, v12);
    PDFDocumentPrintf(v5, (uint64_t)"<<", v13, v14, v15, v16, v17, v18, v47);
    if (*(void *)(v3 + 24) != v6) {
      PDFDocumentPrintf(v5, (uint64_t)"/Pg %R", v19, v20, v21, v22, v23, v24, *(void *)(v3 + 24));
    }
    int v25 = *(_DWORD *)(v3 + 16);
    if (v25) {
      uint64_t v26 = "/Type /OBJR";
    }
    else {
      uint64_t v26 = "/Type /MCR";
    }
    if (v25) {
      uint64_t v27 = "/Obj %R";
    }
    else {
      uint64_t v27 = "/MCID %d";
    }
    PDFDocumentPrintf(v5, (uint64_t)v26, v19, v20, v21, v22, v23, v24, v48);
    PDFDocumentPrintf(v5, (uint64_t)v27, v28, v29, v30, v31, v32, v33, *(void *)(v3 + 32));
    PDFDocumentPrintf(v5, (uint64_t)">>", v34, v35, v36, v37, v38, v39, v49);
    return PDFDocumentEndObject(v5, v40, v41, v42, v43, v44, v45, v46);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_1,PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = PDFXRefTableAddObject(*(void **)(*(void *)*a1 + 464));
  **(void **)(v3 + 16) = v4;
  uint64_t v9 = (PDFStructureElement *)(*a2 + 16);
  uint64_t v10 = *(PDFDocument **)v3;
  uint64_t v11 = *(void *)(v3 + 8);

  PDFStructureElement::Emit(v9, v10, v11, v4, v5, v6, v7, v8);
}

void PDFStructureElement::EnumerateMarkedContentItemsRecursively(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v4 != v5)
  {
    do
    {
      v7[0] = &v8;
      v7[1] = &v8;
      uint64_t v6 = *(unsigned int *)(v4 + 8);
      if (v6 == -1) {
        std::__throw_bad_variant_access[abi:fe180100]();
      }
      uint64_t v9 = v7;
      ((void (*)(void **, uint64_t))off_1ED09B1A0[v6])(&v9, v4);
      v4 += 16;
    }
    while (v4 != v5);
    id v3 = v8;
  }
}

void sub_184DF6104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_0,PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(*(void *)a1 + 8) + 16))(*(void **)(*(void *)a1 + 8));
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_0,PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(void ****a1, void *a2)
{
}

CFTypeRef CGPDFSourceRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CGPDFSourceRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CGPDFSourceGetLength(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    CFNumberRef result = *(void *)(result + 16);
    if (result == -1) {
      _CGHandleAssert("CGPDFSourceGetLength", 179, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->length != (pdf_off_t)-1", "source length would overflow", a6, a7, a8, vars0);
    }
  }
  return result;
}

uint64_t CGPDFSourceRewind(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    id v8 = (void *)result;
    *(unsigned char *)(result + 208) = 0;
    if (*(uint64_t *)(result + 112) > 0 || *(void *)(result + 104))
    {
      if (*(void *)(result + 40))
      {
        *(void *)(result + 32) = 0;
      }
      else
      {
        uint64_t v9 = *(uint64_t (**)(void))(result + 48);
        if (!v9) {
          _CGHandleAssert("CGPDFSourceRewind", 333, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->filter_callbacks.rewind != NULL", "filter rewind callback is missing", a6, a7, a8, v11);
        }
        CFNumberRef result = v9(*(void *)(result + 80));
      }
      v8[13] = 0;
      v8[14] = 0;
    }
    uint64_t v10 = v8[11];
    v8[15] = 0;
    v8[16] = v10;
  }
  return result;
}

uint64_t CGPDFSourceGetPosition(void *a1)
{
  if (!a1) {
    return -1;
  }
  uint64_t v1 = a1[11];
  if (a1[18])
  {
    uint64_t v2 = a1[24];
    v1 += a1[15];
  }
  else
  {
    uint64_t v2 = a1[16];
  }
  return v2 - v1 + a1[14];
}

BOOL CGPDFSourceIsAtEOF(uint64_t a1)
{
  return !a1 || *(unsigned char *)(a1 + 208) != 0;
}

CFStringRef CGPDFPageCopyPageLabel(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!v1) {
    return 0;
  }
  CGPDFDictionaryRef value = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(void **)(*(void *)(v2 + 16) + 16));
  }
  else
  {
    catalog = 0;
  }
  DictionarCGFloat y = CGPDFDictionaryGetDictionary(catalog, "PageLabels", &value);
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (Dictionary)
  {
    CGPDFInteger v7 = v1 - 1;
    CGPDFArrayRef nums_for_number = get_nums_for_number(value, v1 - 1);
    if (nums_for_number)
    {
      uint64_t v9 = nums_for_number;
      size_t v10 = *((void *)nums_for_number + 2);
      if (v10)
      {
LABEL_32:
        pdf_error("invalid page label dictionary: invalid /Nums entry.");
      }
      else
      {
        CGPDFDictionaryRef dict = 0;
        if (v10)
        {
          CGPDFInteger v11 = 0;
          size_t v12 = 0;
          CGPDFStringRef string = 0;
          uint64_t v28 = 0;
          CGPDFInteger v26 = 0;
          CGPDFInteger v30 = 0;
          do
          {
            if (!CGPDFArrayGetInteger(v9, v12, &v30)) {
              goto LABEL_32;
            }
            CGPDFInteger v13 = v30;
            if (v30 > v7) {
              break;
            }
            size_t v14 = v12 + 1;
            if (!CGPDFArrayGetDictionary(v9, v14, &dict)) {
              goto LABEL_32;
            }
            size_t v12 = v14 + 1;
            CGPDFInteger v11 = v13;
          }
          while (v12 < v10);
          uint64_t v15 = dict;
          if (!dict) {
            return CFStringCreateWithFormat(*v6, 0, @"%lu", v1);
          }
          if (!CGPDFDictionaryGetName(dict, "S", (const char **)&v28)) {
            uint64_t v28 = 0;
          }
          if (!CGPDFDictionaryGetString(v15, "P", &string)) {
            CGPDFStringRef string = 0;
          }
          if (!CGPDFDictionaryGetInteger(v15, "St", &v26)) {
            CGPDFInteger v26 = 1;
          }
          CFMutableStringRef Mutable = CFStringCreateMutable(*v6, 0);
          if (string)
          {
            CFStringRef v16 = CGPDFStringCopyTextString(string);
            if (v16)
            {
              CFStringRef v17 = v16;
              CFStringAppend(Mutable, v16);
              CFRelease(v17);
            }
          }
          if (!v28)
          {
LABEL_44:
            if (Mutable) {
              return Mutable;
            }
            return CFStringCreateWithFormat(*v6, 0, @"%lu", v1);
          }
          CGPDFInteger v18 = v26 + v7 - v11;
          int v19 = *v28;
          if (v19 <= 81)
          {
            if (v19 != 65)
            {
              if (v19 == 68)
              {
                CFStringAppendFormat(Mutable, 0, @"%ld", v26 + v7 - v11);
                goto LABEL_44;
              }
LABEL_43:
              goto LABEL_44;
            }
            uint64_t v23 = Mutable;
            int v24 = 1;
          }
          else
          {
            if (v19 == 82)
            {
              uint64_t v20 = Mutable;
              uint64_t v21 = 1;
              goto LABEL_39;
            }
            if (v19 != 97)
            {
              if (v19 == 114)
              {
                uint64_t v20 = Mutable;
                uint64_t v21 = 0;
LABEL_39:
                append_roman(v20, v21, v18);
                goto LABEL_44;
              }
              goto LABEL_43;
            }
            uint64_t v23 = Mutable;
            int v24 = 0;
          }
          append_alpha(v23, v24, v18);
          goto LABEL_44;
        }
      }
    }
  }
  return CFStringCreateWithFormat(*v6, 0, @"%lu", v1);
}

CGPDFArrayRef get_nums_for_number(CGPDFDictionary *a1, CGPDFInteger a2)
{
  CGPDFArrayRef value = 0;
  CGPDFDictionaryRef dict = a1;
  CGPDFArrayRef v11 = 0;
  if (CGPDFDictionaryGetArray(a1, "Kids", &value))
  {
    if (value)
    {
      uint64_t v4 = *((void *)value + 2);
      if (v4)
      {
        size_t v5 = 0;
        while (1)
        {
          if (!CGPDFArrayGetDictionary(value, v5, &dict))
          {
            pdf_error("missing or invalid number table dictionary.", v11);
            return 0;
          }
          CGPDFInteger v15 = 0;
          arraCGFloat y = 0;
          CGPDFInteger v14 = 0;
          BOOL v6 = CGPDFDictionaryGetArray(dict, "Limits", &array);
          CGPDFInteger v7 = "invalid number table: missing /Limits entry.";
          if (!v6) {
            goto LABEL_15;
          }
          if (!array) {
            break;
          }
          CGPDFInteger v7 = "invalid number table: invalid /Limits entry.";
          if (*((void *)array + 2) != 2) {
            goto LABEL_15;
          }
          BOOL Integer = CGPDFArrayGetInteger(array, 0, &v15);
          CGPDFInteger v7 = "invalid number table: invalid /Limits entry.";
          if (!Integer) {
            goto LABEL_15;
          }
          BOOL v9 = CGPDFArrayGetInteger(array, 1uLL, &v14);
          CGPDFInteger v7 = "invalid number table: invalid /Limits entry.";
          if (!v9) {
            goto LABEL_15;
          }
          if (v15 <= a2 && v14 >= a2) {
            return (CGPDFArrayRef)get_nums_for_number(dict, a2);
          }
LABEL_16:
          if (v4 == ++v5) {
            return 0;
          }
        }
        CGPDFInteger v7 = "invalid number table: invalid /Limits entry.";
LABEL_15:
        pdf_error(v7, v11);
        goto LABEL_16;
      }
    }
    return 0;
  }
  else
  {
    if (!CGPDFDictionaryGetArray(a1, "Nums", &v11))
    {
      pdf_error("invalid number table: no /Kids or /Nums entry.", v11);
      return 0;
    }
    return v11;
  }
}

void append_roman(CFMutableStringRef theString, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a3 - 5000 > 0xFFFFFFFFFFFFEC78)
  {
    cStr[0] = 0;
    if (a3 >= 0x3E8)
    {
      __int16 v5 = (unsigned __int16)a3 / 0x3E8u;
      __strcat_chk();
      unint64_t v3 = (unsigned __int16)(v3 - 1000 * v5);
    }
    if (v3 >= 0x64)
    {
      __strcat_chk();
      unint64_t v3 = (unsigned __int16)v3 % 0x64u;
    }
    if (v3 >= 0xA)
    {
      __strcat_chk();
      unint64_t v3 = v3 % 0xAu;
    }
    if (v3) {
      __strcat_chk();
    }
    CFStringAppendCString(theString, cStr, 0x600u);
  }
  else
  {
    pdf_error("Cannot convert %ld to Roman numerals.", a3);
  }
}

void append_alpha(__CFString *a1, int a2, uint64_t a3)
{
  CFIndex v4 = (a3 - 1) / 26 + 1;
  unsigned int v5 = append_alpha_alphabet[(a3 - 1) % 26];
  if (!a2) {
    unsigned int v5 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v5 + 1084);
  }
  BOOL v6 = (const UniChar *)malloc_type_malloc(2 * v4, 0x1000040BDFB0063uLL);
  uint64_t v7 = (UniChar *)v6;
  if (v4)
  {
    id v8 = (UniChar *)v6;
    CFIndex v9 = v4;
    do
    {
      *v8++ = v5;
      --v9;
    }
    while (v9);
  }
  CFStringAppendCharacters(a1, v6, v4);

  free(v7);
}

int *resample_byte_h_3cpp_armv7(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, void *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        uint64_t v10 = *a6 + *a7 * (uint64_t)(int)v8;
        uint64_t v11 = *(void *)(a5 + 8 * v8);
        int v12 = a4;
        CGPDFInteger v13 = result;
        do
        {
          int v14 = v13[1];
          CGPDFInteger v15 = (const __int16 *)(v13 + 2);
          uint64_t v16 = v10 + 3 * *v13;
          if (v14 < 8)
          {
            v30.i64[0] = 0x200000002000;
            v30.i64[1] = 0x200000002000;
            v22.i64[0] = 0;
          }
          else
          {
            int32x4_t v17 = (int32x4_t)xmmword_1850CDAD0;
            int32x4_t v18 = (int32x4_t)xmmword_1850CDAD0;
            int32x4_t v19 = (int32x4_t)xmmword_1850CDAD0;
            do
            {
              int8x8x3_t v34 = vld3_s8((const char *)v16);
              v16 += 24;
              int16x8_t v20 = *(int16x8_t *)v15;
              v15 += 8;
              unsigned int v21 = v14;
              int16x8_t v22 = (int16x8_t)vmovl_u8((uint8x8_t)v34.val[0]);
              int16x8_t v23 = (int16x8_t)vmovl_u8((uint8x8_t)v34.val[1]);
              *(uint16x8_t *)v34.val[0].i8 = vmovl_u8((uint8x8_t)v34.val[2]);
              int32x4_t v17 = vmlal_high_s16(vmlal_s16(v17, *(int16x4_t *)v22.i8, *(int16x4_t *)v20.i8), v22, v20);
              int32x4_t v18 = vmlal_high_s16(vmlal_s16(v18, *(int16x4_t *)v23.i8, *(int16x4_t *)v20.i8), v23, v20);
              int32x4_t v19 = vmlal_high_s16(vmlal_s16(v19, (int16x4_t)v34.val[0], *(int16x4_t *)v20.i8), *(int16x8_t *)v34.val[0].i8, v20);
              v14 -= 8;
            }
            while (v21 > 0xF);
            if (v21 >= 0xC)
            {
              unint64_t v24 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
              do
              {
                int16x4_t v25 = *(int16x4_t *)v15;
                v15 += 4;
                int16x4_t v26 = *(int16x4_t *)v22.i8;
                int16x4_t v27 = (int16x4_t)v24;
                int16x4_t v28 = *(int16x4_t *)v23.i8;
                v26.i8[0] = *(unsigned char *)v16;
                v27.i8[0] = *(unsigned char *)(v16 + 1);
                v28.i8[0] = *(unsigned char *)(v16 + 2);
                v26.i8[2] = *(unsigned char *)(v16 + 3);
                v27.i8[2] = *(unsigned char *)(v16 + 4);
                v28.i8[2] = *(unsigned char *)(v16 + 5);
                v26.i8[4] = *(unsigned char *)(v16 + 6);
                v27.i8[4] = *(unsigned char *)(v16 + 7);
                v28.i8[4] = *(unsigned char *)(v16 + 8);
                unsigned int v29 = v14;
                v26.i8[6] = *(unsigned char *)(v16 + 9);
                v27.i8[6] = *(unsigned char *)(v16 + 10);
                v28.i8[6] = *(unsigned char *)(v16 + 11);
                v16 += 12;
                int32x4_t v17 = vmlal_s16(v17, v26, v25);
                int32x4_t v18 = vmlal_s16(v18, v27, v25);
                int32x4_t v19 = vmlal_s16(v19, v28, v25);
                v14 -= 4;
              }
              while (v29 > 7);
            }
            *(int32x2_t *)v30.i8 = vpadd_s32(vadd_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), vadd_s32(*(int32x2_t *)v18.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)));
            v30.i64[1] = vpaddl_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v19, v19));
          }
          if (v14 >= 1)
          {
            unsigned int v31 = v14 + 1;
            do
            {
              v22.i8[0] = *(unsigned char *)v16;
              v22.i8[2] = *(unsigned char *)(v16 + 1);
              v22.i8[4] = *(unsigned char *)(v16 + 2);
              int16x4_t v32 = vld1_dup_s16(v15++);
              int32x4_t v30 = vmlal_s16(v30, *(int16x4_t *)v22.i8, v32);
              --v31;
              v16 += 3;
            }
            while (v31 > 1);
          }
          uint32x4_t v33 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v30, 0xEuLL), v30, 0xEuLL))));
          *(void *)uint64_t v11 = v33.i64[0];
          *(_DWORD *)(v11 + 8) = v33.i32[2];
          v11 += 12;
          CGPDFInteger v13 = (int *)((char *)v13 + v9);
          --v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_byte_h_4cpp_armv7(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, void *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        uint64_t v10 = *a6 + *a7 * (uint64_t)(int)v8;
        uint64_t v11 = *(uint32x4_t **)(a5 + 8 * v8);
        int v12 = a4;
        CGPDFInteger v13 = result;
        do
        {
          int v14 = v13[1];
          CGPDFInteger v15 = (const __int16 *)(v13 + 2);
          uint64_t v16 = (const char *)(v10 + 4 * *v13);
          v17.i64[0] = 0x200000002000;
          v17.i64[1] = 0x200000002000;
          if (v14 >= 8)
          {
            int32x4_t v18 = (int32x4_t)xmmword_1850CDAD0;
            int32x4_t v19 = (int32x4_t)xmmword_1850CDAD0;
            int32x4_t v20 = (int32x4_t)xmmword_1850CDAD0;
            int32x4_t v21 = (int32x4_t)xmmword_1850CDAD0;
            do
            {
              int8x8x4_t v35 = vld4_s8(v16);
              v16 += 32;
              unsigned int v22 = v14;
              int16x8_t v23 = *(int16x8_t *)v15;
              v15 += 8;
              int16x8_t v24 = (int16x8_t)vmovl_u8((uint8x8_t)v35.val[0]);
              int16x8_t v25 = (int16x8_t)vmovl_u8((uint8x8_t)v35.val[1]);
              int16x8_t v26 = (int16x8_t)vmovl_u8((uint8x8_t)v35.val[2]);
              *(uint16x8_t *)v35.val[0].i8 = vmovl_u8((uint8x8_t)v35.val[3]);
              int32x4_t v21 = vmlal_high_s16(vmlal_s16(v21, *(int16x4_t *)v24.i8, *(int16x4_t *)v23.i8), v24, v23);
              int32x4_t v20 = vmlal_high_s16(vmlal_s16(v20, *(int16x4_t *)v25.i8, *(int16x4_t *)v23.i8), v25, v23);
              int32x4_t v19 = vmlal_high_s16(vmlal_s16(v19, *(int16x4_t *)v26.i8, *(int16x4_t *)v23.i8), v26, v23);
              int32x4_t v18 = vmlal_high_s16(vmlal_s16(v18, (int16x4_t)v35.val[0], *(int16x4_t *)v23.i8), *(int16x8_t *)v35.val[0].i8, v23);
              v14 -= 8;
            }
            while (v22 > 0xF);
            int32x2_t v27 = vadd_s32(*(int32x2_t *)v18.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL));
            *(int32x2_t *)v17.i8 = vpadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)));
            v17.u64[1] = (unint64_t)vpadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), v27);
          }
          if (v14 < 2)
          {
            int v30 = v14;
          }
          else
          {
            do
            {
              uint8x8_t v28 = *(uint8x8_t *)v16;
              v16 += 8;
              int16x4x2_t v34 = vld2_dup_s16(v15);
              v15 += 2;
              int8x16_t v29 = (int8x16_t)vmovl_u8(v28);
              int32x4_t v17 = vmlal_s16(vmlal_s16(v17, *(int16x4_t *)v29.i8, v34.val[0]), (int16x4_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v34.val[1]);
              int v30 = v14 - 2;
              BOOL v31 = v14 > 3;
              v14 -= 2;
            }
            while (v31);
          }
          if (v30 == 1)
          {
            uint8x8_t v32 = (uint8x8_t)vld1_dup_f32((const float *)v16);
            int16x4_t v33 = vld1_dup_s16(v15);
            int32x4_t v17 = vmlal_s16(v17, (int16x4_t)*(_OWORD *)&vmovl_u8(v32), v33);
          }
          *v11++ = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v17, 0xEuLL), v17, 0xEuLL))));
          CGPDFInteger v13 = (int *)((char *)v13 + v9);
          --v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

uint64_t resample_byte_v_3cpp_af_armv7(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, int8x16_t **a5, uint64_t *a6)
{
  BOOL v6 = *a5;
  int v7 = *(_DWORD *)(result + 4);
  int v8 = a3 * a4;
  if (v8 >= 16 && (v8 & 0xFFFFFFF0) != 0)
  {
    unint64_t v9 = 0;
    do
    {
      if (v7)
      {
        v10.i64[0] = 0x200000002000;
        v10.i64[1] = 0x200000002000;
        uint64_t v11 = a6;
        int v12 = v7;
        CGPDFInteger v13 = (const __int16 *)(result + 8);
        v14.i64[0] = 0x200000002000;
        v14.i64[1] = 0x200000002000;
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        do
        {
          int16x4_t v17 = vld1_dup_s16(v13++);
          uint64_t v18 = *v11++;
          int32x4_t v19 = (int32x4_t *)(v18 + 4 * v9);
          int32x4_t v10 = vmlal_s16(v10, vmovn_s32(*v19), v17);
          int32x4_t v14 = vmlal_s16(v14, vmovn_s32(v19[1]), v17);
          int32x4_t v15 = vmlal_s16(v15, vmovn_s32(v19[2]), v17);
          int32x4_t v16 = vmlal_s16(v16, vmovn_s32(v19[3]), v17);
          --v12;
        }
        while (v12);
      }
      else
      {
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v14.i64[0] = 0x200000002000;
        v14.i64[1] = 0x200000002000;
        v10.i64[0] = 0x200000002000;
        v10.i64[1] = 0x200000002000;
      }
      uint8x8_t v20 = vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v10, 0xEuLL), v14, 0xEuLL));
      uint16x8_t v21 = (uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v15, 0xEuLL), v16, 0xEuLL);
      uint8x8_t v22 = vpmax_u8(v20, vqmovn_u16(v21));
      *v6++ = vorrq_s8((int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vmovl_u8(vpmax_u8(v22, v22))), (int8x16_t)(*(_OWORD *)&vqmovn_high_u16(v20, v21) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)));
      v9 += 16;
    }
    while (v9 < (v8 & 0xFFFFFFF0));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  signed int v23 = v8 & 0xFFFFFFFC;
  if ((int)v9 < v23)
  {
    unint64_t v9 = v9;
    do
    {
      v24.i64[0] = 0x200000002000;
      v24.i64[1] = 0x200000002000;
      if (v7)
      {
        int16x8_t v25 = a6;
        int v26 = v7;
        int32x2_t v27 = (const __int16 *)(result + 8);
        do
        {
          uint64_t v28 = *v25++;
          int16x4_t v29 = vld1_dup_s16(v27++);
          int32x4_t v24 = vmlal_s16(v24, vmovn_s32(*(int32x4_t *)(v28 + 4 * v9)), v29);
          --v26;
        }
        while (v26);
      }
      int32x2_t v30 = (int32x2_t)vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v24, 0xEuLL), v24, 0xEuLL));
      uint8x8_t v31 = vpmax_u8((uint8x8_t)v30, (uint8x8_t)v30);
      int32x2_t v32 = (int32x2_t)vand_s8((int8x8_t)vzip1_s32((int32x2_t)vpmax_u8(v31, v31), v30), (int8x8_t)0xFFFFFF00000000FFLL);
      v6->i32[0] = vorr_s8((int8x8_t)v32, (int8x8_t)vdup_lane_s32(v32, 1)).u32[0];
      BOOL v6 = (int8x16_t *)((char *)v6 + 4);
      v9 += 4;
    }
    while ((uint64_t)v9 < v23);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp_armv7(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, uint8x16_t **a5, uint64_t *a6)
{
  BOOL v6 = *a5;
  int v7 = *(_DWORD *)(result + 4);
  int v8 = (const __int16 *)(result + 8);
  uint64_t v9 = a3 * a4;
  if ((int)v9 >= 16 && (v9 & 0xFFFFFFF0) != 0)
  {
    unint64_t v10 = 0;
    do
    {
      if (v7)
      {
        v11.i64[0] = 0x200000002000;
        v11.i64[1] = 0x200000002000;
        int v12 = a6;
        int v13 = v7;
        int32x4_t v14 = (const __int16 *)(result + 8);
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        v17.i64[0] = 0x200000002000;
        v17.i64[1] = 0x200000002000;
        do
        {
          int16x4_t v18 = vld1_dup_s16(v14++);
          uint64_t v19 = *v12++;
          uint8x8_t v20 = (int32x4_t *)(v19 + 4 * v10);
          int32x4_t v11 = vmlal_s16(v11, vmovn_s32(*v20), v18);
          int32x4_t v15 = vmlal_s16(v15, vmovn_s32(v20[1]), v18);
          int32x4_t v16 = vmlal_s16(v16, vmovn_s32(v20[2]), v18);
          int32x4_t v17 = vmlal_s16(v17, vmovn_s32(v20[3]), v18);
          --v13;
        }
        while (v13);
      }
      else
      {
        v17.i64[0] = 0x200000002000;
        v17.i64[1] = 0x200000002000;
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v11.i64[0] = 0x200000002000;
        v11.i64[1] = 0x200000002000;
      }
      *v6++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v11, 0xEuLL), v15, 0xEuLL)), (uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v16, 0xEuLL), v17, 0xEuLL));
      v10 += 16;
    }
    while (v10 < (v9 & 0xFFFFFFF0));
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((int)v10 < (v9 & 0xFFFFFFFC))
  {
    unint64_t v10 = v10;
    do
    {
      v21.i64[0] = 0x200000002000;
      v21.i64[1] = 0x200000002000;
      if (v7)
      {
        uint8x8_t v22 = a6;
        int v23 = v7;
        int32x4_t v24 = v8;
        do
        {
          uint64_t v25 = *v22++;
          int16x4_t v26 = vld1_dup_s16(v24++);
          CFNumberRef result = 4 * v10;
          int32x4_t v21 = vmlal_s16(v21, vmovn_s32(*(int32x4_t *)(v25 + 4 * v10)), v26);
          --v23;
        }
        while (v23);
      }
      *(int16x4_t *)v21.i8 = vqshrun_n_s32(v21, 0xEuLL);
      v6->i32[0] = vqmovn_u16((uint16x8_t)v21).u32[0];
      BOOL v6 = (uint8x16_t *)((char *)v6 + 4);
      v10 += 4;
    }
    while ((uint64_t)v10 < (int)(v9 & 0xFFFFFFFC));
  }
  if ((int)v10 < (int)v9)
  {
    unint64_t v10 = v10;
    do
    {
      int v27 = 0x2000;
      if (v7)
      {
        uint64_t v28 = a6;
        int v29 = v7;
        int32x2_t v30 = v8;
        do
        {
          unsigned int v31 = *v30++;
          CFNumberRef result = v31;
          uint64_t v32 = *v28++;
          v27 += *(_DWORD *)(v32 + 4 * v10) * result;
          --v29;
        }
        while (v29);
      }
      int v33 = v27 >> 14;
      if (v33 >= 255) {
        int v33 = 255;
      }
      v6->i8[0] = v33 & ~(v33 >> 31);
      BOOL v6 = (uint8x16_t *)((char *)v6 + 1);
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t type4_lexer_scan(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  a1[2] = 0;
LABEL_2:
  while (2)
  {
    uint64_t v10 = CGPDFSourceGetc((uint64_t)*a1, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v11 = v10;
    if ((int)v10 > 90)
    {
      if ((int)v10 > 122)
      {
        if (v10 == 123 || v10 == 125) {
          return v11;
        }
      }
      else if (v10 == 91 || v10 == 93)
      {
LABEL_18:
        return 0xFFFFFFFFLL;
      }
LABEL_60:
      uint64_t v31 = a2;
      while (1)
      {
        char v32 = v11 + 1;
        if ((v11 + 1) <= 0x3F)
        {
          if (((1 << v32) & 0x200006C03) != 0) {
            goto LABEL_72;
          }
          if (((1 << v32) & 0xA001064000000000) != 0) {
            break;
          }
        }
        if ((v11 - 91) <= 0x22 && ((1 << (v11 - 91)) & 0x500000005) != 0) {
          break;
        }
        int v33 = a1[2];
        int16x4x2_t v34 = a1[3];
        if (v33 >= v34)
        {
          a1[3] = (void *)(2 * (void)v34 + 64);
          int8x8x4_t v35 = malloc_type_realloc(a1[1], 2 * (void)v34 + 68, 0x768CAC5CuLL);
          a1[1] = v35;
          int v33 = a1[2];
        }
        else
        {
          int8x8x4_t v35 = a1[1];
        }
        a1[2] = (void *)((char *)v33 + 1);
        *((unsigned char *)v33 + (void)v35) = v11;
        LODWORD(v11) = CGPDFSourceGetc((uint64_t)*a1, a2, a3, a4, a5, a6, a7, a8);
      }
      CGPDFSourceUngetc(*a1, v11);
LABEL_72:
      *((unsigned char *)a1[2] + (void)a1[1]) = 0;
      size_t v36 = (size_t)a1[2];
      if (v36 == 5)
      {
        uint64_t v37 = (const char *)a1[1];
        if (!strcmp(v37, "false"))
        {
          uint64_t v11 = 256;
          *(_DWORD *)a2 = 256;
          *(unsigned char *)(a2 + 8) = 0;
          return v11;
        }
      }
      else if (v36 == 4)
      {
        uint64_t v37 = (const char *)a1[1];
        if (!strcmp(v37, "true"))
        {
          uint64_t v11 = 256;
          *(_DWORD *)a2 = 256;
          *(unsigned char *)(a2 + 8) = 1;
          return v11;
        }
      }
      else
      {
        uint64_t v37 = (const char *)a1[1];
        if (!v36) {
          size_t v36 = strlen(v37);
        }
        if (v36 > 0xFFFFFFFE || (v36 - 2) > 6)
        {
LABEL_89:
          return 0xFFFFFFFFLL;
        }
        if (v36 == 2)
        {
          int v38 = 2;
          goto LABEL_78;
        }
      }
      int v38 = v36 + hash_asso_values[*((unsigned __int8 *)v37 + 2)];
LABEL_78:
      uint64_t v39 = *(unsigned __int8 *)v37;
      uint64_t v40 = v38 + hash_asso_values[*((unsigned __int8 *)v37 + 1)] + hash_asso_values[v39];
      if (v40 <= 0x2F)
      {
        uint64_t v41 = (const char *)*((void *)&wordlist
                            + 2 * v38
                            + 2 * hash_asso_values[*((unsigned __int8 *)v37 + 1)]
                            + 2 * hash_asso_values[v39]);
        if (v39 == *(unsigned __int8 *)v41
          && !strcmp(v37 + 1, v41 + 1)
          && ((0x165000004003uLL >> v40) & 1) == 0)
        {
          uint64_t v42 = *((void *)&wordlist + 2 * v40 + 1);
          uint64_t v11 = 260;
          *(_DWORD *)uint64_t v31 = 260;
          *(void *)(v31 + 8) = v42;
          return v11;
        }
      }
      goto LABEL_89;
    }
    switch((int)v10)
    {
      case -1:
        return v11;
      case 0:
      case 9:
      case 10:
      case 12:
      case 13:
      case 32:
        continue;
      case 37:
        while (1)
        {
          int v12 = CGPDFSourceGetc((uint64_t)*a1, a2, a3, a4, a5, a6, a7, a8);
          if (v12 == -1 || v12 == 10) {
            goto LABEL_2;
          }
          if (v12 == 13)
          {
            int v14 = CGPDFSourceGetc((uint64_t)*a1, a2, a3, a4, a5, a6, a7, a8);
            if (v14 != 10) {
              CGPDFSourceUngetc(*a1, v14);
            }
            goto LABEL_2;
          }
        }
      case 40:
      case 41:
      case 47:
      case 60:
      case 62:
        goto LABEL_18;
      case 43:
      case 45:
      case 46:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        uint64_t v43 = 0;
        if (v10 == 45 || v10 == 43)
        {
          int32x4_t v15 = a1[2];
          int32x4_t v16 = a1[3];
          if (v15 >= v16)
          {
            a1[3] = (void *)(2 * (void)v16 + 64);
            int32x4_t v17 = malloc_type_realloc(a1[1], 2 * (void)v16 + 68, 0x768CAC5CuLL);
            a1[1] = v17;
            int32x4_t v15 = a1[2];
          }
          else
          {
            int32x4_t v17 = a1[1];
          }
          a1[2] = (void *)((char *)v15 + 1);
          *((unsigned char *)v15 + (void)v17) = v11;
          int v18 = CGPDFSourceGetc((uint64_t)*a1, a2, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          int v18 = v10;
          LODWORD(v11) = 43;
        }
        int v19 = 0;
        int v20 = 0;
        char v21 = 0;
        char v22 = 1;
        while (2)
        {
          if ((v18 - 48) < 0xA)
          {
            int v20 = v18 + 10 * v20 - 48;
            ++v19;
LABEL_25:
            int v23 = a1[2];
            int32x4_t v24 = a1[3];
            if (v23 >= v24)
            {
              a1[3] = (void *)(2 * (void)v24 + 64);
              uint64_t v25 = malloc_type_realloc(a1[1], 2 * (void)v24 + 68, 0x768CAC5CuLL);
              a1[1] = v25;
              int v23 = a1[2];
            }
            else
            {
              uint64_t v25 = a1[1];
            }
            a1[2] = (void *)((char *)v23 + 1);
            *((unsigned char *)v23 + (void)v25) = v18;
            int v18 = CGPDFSourceGetc((uint64_t)*a1, a2, a3, a4, a5, a6, a7, a8);
            continue;
          }
          break;
        }
        uint64_t v26 = (v18 + 1);
        if (v26 > 0x3F) {
          goto LABEL_34;
        }
        if (v26 == 47)
        {
          char v21 = v22;
LABEL_37:
          char v22 = 0;
          goto LABEL_25;
        }
        if (((1 << (v18 + 1)) & 0x200006C03) == 0)
        {
          if (((1 << (v18 + 1)) & 0xA001064000000000) == 0)
          {
LABEL_34:
            if ((v18 - 91) > 0x22 || ((1 << (v18 - 91)) & 0x500000005) == 0)
            {
              char v21 = 0;
              goto LABEL_37;
            }
          }
          CGPDFSourceUngetc(*a1, v18);
        }
        *((unsigned char *)a1[2] + (void)a1[1]) = 0;
        if ((v22 & (v19 > 0)) != 1) {
          goto LABEL_51;
        }
        if (v19 > 9)
        {
          *__error() = 0;
          uint64_t v28 = strtol_l((const char *)a1[1], &v43, 10, 0);
          if (v43 == (char *)a1[1] || *v43) {
            goto LABEL_55;
          }
          char v21 = 1;
          if (*__error() != 34 && v28 >= (uint64_t)0xFFFFFFFF80000000 && v28 <= 0x7FFFFFFF)
          {
            uint64_t v11 = 257;
            *(_DWORD *)a2 = 257;
            *(_DWORD *)(a2 + 8) = v28;
            return v11;
          }
LABEL_51:
          if ((v21 & 1) == 0
            || v19 < 1
            || (double v29 = strtod_l((const char *)a1[1], &v43, 0), v43 == (char *)a1[1])
            || *v43)
          {
LABEL_55:
            return 0xFFFFFFFFLL;
          }
          uint64_t v11 = 258;
          *(_DWORD *)a2 = 258;
          *(double *)(a2 + 8) = v29;
        }
        else
        {
          if (v11 == 45) {
            int v27 = -v20;
          }
          else {
            int v27 = v20;
          }
          uint64_t v11 = 257;
          *(_DWORD *)a2 = 257;
          *(_DWORD *)(a2 + 8) = v27;
        }
        break;
      default:
        goto LABEL_60;
    }
    return v11;
  }
}

uint64_t CG::DisplayListRecorder::EndPage(CFArrayRef *a1)
{
  return CG::DisplayListRecorder::recordAction(a1, 4, 0, 0);
}

uint64_t CG::DisplayListRecorder::BeginPage(CFArrayRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  return CG::DisplayListRecorder::recordAction(a1, 3, 0, a5);
}

uint64_t dlRecorder_DrawImageApplyingToneMapping(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, CGFloat a10, double a11, double a12)
{
  CFDictionaryRef v20 = CGCreatePayloadForToneMapping(a5, a6, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
  if (!v20) {
    return 1000;
  }
  CFDictionaryRef v21 = v20;
  if (a4) {
    CFRetain(a4);
  }
  CopCGFloat y = CGImageCreateCopy((CGImageRef)a4);
  if (CGImageSetColorConversionInfoPayload((uint64_t)Copy, v21))
  {
    if (a4) {
      CFRelease(a4);
    }
    uint64_t v27 = dlRecorder_DrawImage(a1, a2, a3, Copy, v23, v24, v25, v26, a9, a10, a11, a12);
    if (!Copy) {
      return v27;
    }
LABEL_13:
    CFRelease(Copy);
    return v27;
  }
  if (Copy) {
    CFRelease(Copy);
  }
  uint64_t v27 = 1000;
  CopCGFloat y = (CGImage *)a4;
  if (a4) {
    goto LABEL_13;
  }
  return v27;
}

const void **applesauce::CF::ObjectRef<CGImage *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGDataProvider *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<__CFData const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CGFloat dlRecorder_GetTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, CGAffineTransform *a9@<X8>)
{
  if (!a1 || !*(void *)(a1 + 288)) {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_GetTransform");
  }
  *a9 = CGAffineTransformIdentity;
  return CGAffineTransformIdentity.tx;
}

CGImageRef dlRecorder_CreateImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || (int v8 = *(CFArrayRef **)(a1 + 288)) == 0)
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_CreateImage");
    return 0;
  }
  uint64_t v9 = (char *)CG::DisplayListRecorder::currentDisplayList(v8);
  if (!v9)
  {
    CGPostError((uint64_t)"%s: recorder->currentDisplayList() returned NULL", v10, v11, v12, v13, v14, v15, v16, (char)"dlRecorder_CreateImage");
    return 0;
  }
  int32x4_t v17 = (CG::DisplayList *)(v9 + 16);

  return CG::DisplayList::createImage(v17);
}

uint64_t dlRecorder_GetLayer(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  if (a1 && (uint64_t v12 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    int v18 = CG::DisplayListRecorder::currentDisplayList(v12);
    if (v18)
    {
      int v19 = CG::DisplayListRecorder::initializeGroupInfoDictionary((uint64_t)v18, a4);
      *(double *)uint64_t v28 = a9;
      *(double *)&v28[1] = a10;
      *(double *)&v28[2] = a11;
      *(double *)&v28[3] = a12;
      uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(v19, (const __CFDictionary *)v28, v20, v21, v22, v23, v24, v25);
      if (v19) {
        CFRelease(v19);
      }
      if (CGDisplayList) {
        CG::DisplayList::createContextDelegate();
      }
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_GetLayer");
  }
  return 0;
}

void ___ZN2CG19DisplayListRecorder29initializeGroupInfoDictionaryEP13CGDisplayListPK14__CFDictionary_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t dlRecorder_EndPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (a4 = a3, a3 = a2, a2 = a1, (uint64_t v8 = *(void *)(a1 + 288)) != 0))
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 32);
    return v9();
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_EndPage");
    return 1000;
  }
}

uint64_t dlRecorder_BeginPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (a5 = a4, a4 = a3, a3 = a2, a2 = a1, (uint64_t v8 = *(void *)(a1 + 288)) != 0))
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 24);
    return v9();
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_BeginPage");
    return 1000;
  }
}

uint64_t dlRecorder_DrawDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (uint64_t v8 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    return CG::DisplayListRecorder::DrawDisplayList(v8, a2, a3, a4);
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_DrawDisplayList");
    return 1000;
  }
}

uint64_t dlRecorder_DrawConicGradient(uint64_t a1, uint64_t a2, uint64_t a3, CGGradient *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11)
{
  if (a1 && (uint64_t v11 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    int v13 = 2;
    double v14 = a9;
    double v15 = a10;
    double v16 = a11;
    return CG::DisplayListRecorder::DrawGradient(v11, a2, a3, a4, 0, &v13);
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawConicGradient");
    return 1000;
  }
}

uint64_t CG::DisplayListEntry::getSize(CG::DisplayListEntry *this)
{
  return 80;
}

void CG::DisplayListEntry::~DisplayListEntry(CG::DisplayListEntry *this)
{
}

uint64_t dlRecorder_DrawRadialGradient(uint64_t a1, uint64_t a2, uint64_t a3, CGGradient *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  if (a1 && (double v14 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    int v16 = 1;
    double v17 = a9;
    double v18 = a10;
    double v19 = a11;
    double v20 = a12;
    double v21 = a13;
    double v22 = a14;
    return CG::DisplayListRecorder::DrawGradient(v14, a2, a3, a4, a5, &v16);
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawRadialGradient");
    return 1000;
  }
}

void dlRecorder_DrawLines(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (uint64_t v8 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    int v13 = (double *)CG::DisplayListRecorder::currentDisplayList(v8);
    if (v13)
    {
      double v14 = v13;
      BOOL v15 = v13[5] == INFINITY || v13[6] == INFINITY;
      if (!v15 && v13[7] != 0.0 && v13[8] != 0.0)
      {
        if (!*((unsigned char *)v13 + 73)) {
          goto LABEL_37;
        }
        double v16 = 0.0;
        double v17 = 0.0;
        double v18 = 0.0;
        double v19 = 0.0;
        if (a4 && a5)
        {
          double v20 = *a4;
          double v21 = a4[1];
          if (a5 >= 2)
          {
            unint64_t v22 = a5 - 1;
            uint64_t v23 = a4 + 3;
            double v17 = *a4;
            double v16 = a4[1];
            while (1)
            {
              double v25 = *(v23 - 1);
              double v24 = *v23;
              double v26 = v25 > v20 ? *(v23 - 1) : v20;
              if (v25 >= v17) {
                double v20 = v26;
              }
              else {
                double v17 = *(v23 - 1);
              }
              if (v24 < v16) {
                break;
              }
              if (v24 <= v21) {
                goto LABEL_24;
              }
LABEL_25:
              v23 += 2;
              double v21 = v24;
              if (!--v22) {
                goto LABEL_30;
              }
            }
            double v16 = *v23;
LABEL_24:
            double v24 = v21;
            goto LABEL_25;
          }
          double v16 = a4[1];
          double v17 = *a4;
          double v24 = v16;
LABEL_30:
          double v18 = v20 - v17;
          double v19 = v24 - v16;
        }
        long long v27 = *(_OWORD *)(a3 + 40);
        *(_OWORD *)&v49.a = *(_OWORD *)(a3 + 24);
        *(_OWORD *)&v49.c = v27;
        *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a3 + 56);
        CGRect v50 = CGRectApplyAffineTransform(*(CGRect *)&v17, &v49);
        v50.origin.CGFloat x = CG::DisplayListRecorder::adjustBoundingBoxToIncludeStroke(&v50, a3);
        v50.origin.CGFloat y = v28;
        v50.size.CGFloat width = v29;
        v50.size.CGFloat height = v30;
        CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v50.origin.x, a2, *(double **)(a3 + 112), *(void *)(*(void *)(a3 + 120) + 16));
        v50.origin.CGFloat x = v34;
        v50.origin.CGFloat y = v31;
        v50.size.CGFloat width = v32;
        v50.size.CGFloat height = v33;
        BOOL v35 = v34 == INFINITY || v31 == INFINITY;
        if (!v35 && v32 != 0.0 && v33 != 0.0)
        {
LABEL_37:
          EntryDrawingState = (void *)CG::DisplayList::getEntryDrawingState((uint64_t)(v14 + 2), (void *)a3, a2);
          uint64_t v37 = EntryDrawingState[1];
          if (v37)
          {
            int v38 = *(_DWORD *)(v37 + 8);
            uint64_t v39 = EntryDrawingState[2];
            if (v39) {
              v38 |= *(_DWORD *)(v39 + 8);
            }
            int v40 = v38 & 0x1000;
            uint64_t v41 = EntryDrawingState[3];
            if (v41) {
              v40 |= *(_DWORD *)(v41 + 8) & 0x3400;
            }
            uint64_t StrokeColor = CGGStateGetStrokeColor(a3);
            uint64_t v43 = (*(uint64_t (**)(double *, uint64_t))(*((void *)v14 + 2) + 8))(v14 + 2, StrokeColor);
            if (v43) {
              int v44 = *(_DWORD *)(v43 + 8) & 0x3400 | 0x200;
            }
            else {
              LOWORD(v44) = 512;
            }
            __int16 v45 = v44 | v40;
            uint64_t v46 = *(void *)(a3 + 120);
            __int16 v47 = v44 | v40 | 0x1000;
            if (*(double *)(v46 + 8) >= 1.0) {
              __int16 v48 = v45;
            }
            else {
              __int16 v48 = v47;
            }
            if ((v48 & 0x1000) == 0 && (((int)(*(_DWORD *)(v46 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE) {
              __int16 v48 = v47;
            }
            if ((v48 & 0x3000) != 0) {
              *((_DWORD *)v14 + 20) |= v48 & 0x3000;
            }
            if (*((unsigned char *)v14 + 74))
            {
              if ((v48 & 0x400) != 0) {
                CG::DisplayList::getEntryPatternState((uint64_t)(v14 + 2), a3, a2);
              }
              if ((v48 & 0x100) != 0) {
                CG::DisplayList::getEntryFillState((CG::DisplayList *)(v14 + 2), 0);
              }
              if ((v48 & 0x200) != 0) {
                CG::DisplayList::getEntryStrokeState((uint64_t)(v14 + 2), a3);
              }
              operator new();
            }
          }
        }
      }
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawLines");
  }
}

void sub_184DF7FC8(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x10E1C40AEE7E256);
  _Unwind_Resume(a1);
}

__CFString *image_copy_format_description(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = *(void *)(a1 + 208);
  if (!v4) {
    goto LABEL_5;
  }
  PropertCGFloat y = *(const void **)(v4 + 120);
  if (Property) {
    PropertCGFloat y = CGPropertiesGetProperty((uint64_t)Property, @"kCGImageWrappingIOSurface");
  }
  if (Property == (const void *)*MEMORY[0x1E4F1CFD0]) {
    BOOL v6 = "(IP-S)";
  }
  else {
LABEL_5:
  }
    BOOL v6 = "(IP)";
  if (!*(void *)(a1 + 208)) {
    BOOL v6 = "(DP)";
  }
  CFStringAppendFormat(Mutable, 0, @"<CGImage %p> %s", a1, v6);
  uint64_t v7 = *(void *)(a1 + 216);
  if (v7)
  {
    uint64_t v8 = CGPropertiesGetProperty(v7, @"kCGImageFileFormat");
    if (v8)
    {
      uint64_t v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFStringGetTypeID()) {
        CFStringAppendFormat(Mutable, 0, @" <%@>", v9);
      }
    }
    uint64_t v11 = *(void *)(a1 + 216);
    if (v11)
    {
      uint64_t v12 = CGPropertiesGetProperty(v11, @"kCGImageHDRFileFormat");
      if (v12)
      {
        int v13 = v12;
        CFTypeID v14 = CFGetTypeID(v12);
        if (v14 == CFStringGetTypeID()) {
          CFStringAppendFormat(Mutable, 0, @" <%@>", v13);
        }
      }
    }
  }
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  CFStringRef v16 = CFCopyDescription(ColorSpace);
  CFStringAppendFormat(Mutable, 0, @"\n\t<%@>", v16);
  if (v16) {
    CFRelease(v16);
  }
  int v39 = 0;
  float HeadroomInfo = CGImageGetHeadroomInfo((CGImage *)a1, &v39);
  if (v39 && HeadroomInfo != 0.0)
  {
    if (v39 == 2) {
      double v18 = " (estimated)";
    }
    else {
      double v18 = " ";
    }
    CFStringAppendFormat(Mutable, 0, @"\n\t\theadrooCGAffineTransform m = %f %s", HeadroomInfo, v18);
  }
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 72);
  CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo((CGImageRef)a1);
  if ((BitmapInfo & 0x1F) <= 7) {
    __sprintf_chk(__s, 0, 0x100uLL, "%s | ", off_1E52CC648[BitmapInfo & 0x1F]);
  }
  size_t v25 = strlen(__s);
  unsigned int v26 = (BitmapInfo >> 12) & 7;
  if (v26 > 4) {
    long long v27 = "? (unknown byte order)";
  }
  else {
    long long v27 = off_1E52CC6E8[v26];
  }
  sprintf(&__s[v25], "%s ", v27);
  size_t v28 = strlen(__s);
  unsigned int v29 = HIWORD(BitmapInfo) & 0xF;
  if (v29 > 4) {
    CGFloat v30 = " | ? (unknown pixel format)";
  }
  else {
    CGFloat v30 = off_1E52B3618[v29];
  }
  sprintf(&__s[v28], "%s ", v30);
  if ((BitmapInfo & 0x100) != 0)
  {
    size_t v31 = strlen(__s);
    sprintf(&__s[v31], "%s ", "| kCGBitmapFloatComponents");
  }
  CFStringAppendFormat(Mutable, 0, @"\n\t\tCGFloat width = %ld, height = %ld, bpc = %ld, bpp = %ld, row bytes = %ld \n\t\t%s", v19, v20, v21, v22, v23, __s);
  int v32 = *(_DWORD *)(a1 + 36);
  if ((v32 & 0x2000000) != 0) {
    double v33 = "Yes";
  }
  else {
    double v33 = "No";
  }
  if (*(void *)(a1 + 168)) {
    double v34 = "Yes";
  }
  else {
    double v34 = "No";
  }
  if (*(void *)(a1 + 176)) {
    BOOL v35 = "Yes";
  }
  else {
    BOOL v35 = "No";
  }
  if (*(void *)(a1 + 184)) {
    size_t v36 = "Yes";
  }
  else {
    size_t v36 = "No";
  }
  if ((v32 & 0x1000000) != 0) {
    uint64_t v37 = "Yes";
  }
  else {
    uint64_t v37 = "No";
  }
  CFStringAppendFormat(Mutable, 0, @"\n\t\tis mask? %s, has masking color? %s, has soft mask? %s, has matte? %s, should interpolate? %s", v33, v34, v35, v36, v37);
  return Mutable;
}

BOOL linked_on_sydro_or_later()
{
  if (linked_on_sydro_or_later_predicate != -1) {
    dispatch_once(&linked_on_sydro_or_later_predicate, &__block_literal_global_302);
  }
  if (linked_on_sydro_or_later_linked_on_rome_or_later) {
    BOOL v0 = 0;
  }
  else {
    BOOL v0 = linked_on_sydro_or_later_linked_on_sydney_or_later == 0;
  }
  return !v0
      || linked_on_sydro_or_later_linked_on_paris_or_later != 0
      || linked_on_sydro_or_later_linked_on_kincaid_or_later != 0
      || linked_on_sydro_or_later_linked_on_borealis_or_later != 0;
}

uint64_t __linked_on_dawnburst_or_later_block_invoke()
{
  linked_on_dawnburst_or_later_linked_on_macOS14_or_later = dyld_program_sdk_at_least();
  linked_on_dawnburst_or_later_linked_on_iOS17_or_later = dyld_program_sdk_at_least();
  linked_on_dawnburst_or_later_linked_on_tvOS17_or_later = dyld_program_sdk_at_least();
  linked_on_dawnburst_or_later_linked_on_watchOS10_or_later = dyld_program_sdk_at_least();
  uint64_t result = dyld_program_sdk_at_least();
  linked_on_dawnburst_or_later_linked_on_borealis_or_later = result;
  return result;
}

uint64_t __linked_on_sydro_or_later_block_invoke()
{
  linked_on_sydro_or_later_linked_on_rome_or_later = dyld_program_sdk_at_least();
  linked_on_sydro_or_later_linked_on_sydney_or_later = dyld_program_sdk_at_least();
  linked_on_sydro_or_later_linked_on_paris_or_later = dyld_program_sdk_at_least();
  linked_on_sydro_or_later_linked_on_kincaid_or_later = dyld_program_sdk_at_least();
  uint64_t result = dyld_program_sdk_at_least();
  linked_on_sydro_or_later_linked_on_borealis_or_later = result;
  return result;
}

__CFData *compress_data(char *a1, vImagePixelCount a2, vImagePixelCount a3, uint64_t a4, uint64_t a5, size_t a6, int a7)
{
  CFMutableStringRef Mutable = CFDataCreateMutable(0, 0);
  BOOL v15 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, ((a4 * a2 + 7) >> 3) * a3);
    MutableBytePtr = CFDataGetMutableBytePtr(v15);
    switch(a4)
    {
      case 1:
        uint64_t v20 = (uint64_t)a1;
        uint64_t v21 = a2;
        uint64_t v22 = a3;
        int v23 = 1;
        uint64_t v24 = a6;
        unint64_t v25 = (a4 * a2 + 7) >> 3;
        char v26 = 7;
        goto LABEL_13;
      case 2:
        uint64_t v20 = (uint64_t)a1;
        uint64_t v21 = a2;
        uint64_t v22 = a3;
        int v23 = 2;
        uint64_t v24 = a6;
        unint64_t v25 = (a4 * a2 + 7) >> 3;
        char v26 = 6;
        goto LABEL_13;
      case 4:
        uint64_t v20 = (uint64_t)a1;
        uint64_t v21 = a2;
        uint64_t v22 = a3;
        int v23 = 4;
        uint64_t v24 = a6;
        unint64_t v25 = (a4 * a2 + 7) >> 3;
        char v26 = 4;
LABEL_13:
        compress_data_with_shift((uint64_t)MutableBytePtr, v20, v21, v22, v23, v24, v25, v26);
        break;
      case 8:
        if (a5 == 32)
        {
          src.data = a1;
          src.CGFloat height = a3;
          src.CGFloat width = a2;
          src.rowBytes = a6;
          dest.data = MutableBytePtr;
          dest.CGFloat height = a3;
          if ((a7 & 0xFFFFFFFD) == 1) {
            uint64_t v32 = 3;
          }
          else {
            uint64_t v32 = 0;
          }
          dest.CGFloat width = a2;
          dest.rowBytes = a2;
          vImage_Error v33 = vImageExtractChannel_ARGB8888(&src, &dest, v32, 0);
          if (v33) {
            _CGHandleAssert("compress_data_to_8_bit", 903, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "err == kvImageNoError", "Unhandled vImage error %ld", v34, v35, v36, v33);
          }
        }
        else
        {
          if (a5 != 16) {
            _CGHandleAssert("compress_data_to_8_bit", 905, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "", "Unimplemented", v17, v18, v19, v37);
          }
          uint64_t v27 = 0;
          do
          {
            size_t v28 = (UInt8 *)&a1[v27 * a6];
            vImagePixelCount v29 = a2;
            do
            {
              UInt8 v30 = *v28;
              v28 += 2;
              *MutableBytePtr++ = v30;
              --v29;
            }
            while (v29);
            ++v27;
          }
          while (v27 != a3);
        }
        break;
      default:
        _CGHandleAssert("compress_data", 943, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "", "Unimplemented", v17, v18, v19, v37);
    }
  }
  return v15;
}

uint64_t compress_data_with_shift(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = (unsigned char *)(result + v8 * a7);
    int v13 = (unsigned __int8 *)(a2 + v8 * a6);
    do
    {
      unsigned int v15 = *v13++;
      unsigned int v14 = v15;
      uint64_t v16 = v10 - 8;
      if (v10 >= 8)
      {
        do
        {
          *v12++ = v11 >> v16;
          v16 -= 8;
          v10 -= 8;
        }
        while (v10 > 7);
      }
      unint64_t v11 = (v11 << a5) | (v14 >> a8) & ~(-1 << a5);
      v10 += a5;
      ++v9;
    }
    while (v9 != a3);
    if (v12 && v10)
    {
      do
      {
        unsigned int v17 = v10;
        uint64_t v18 = v10 - 8;
        if (v10 >= 8)
        {
          do
          {
            *v12++ = v11 >> v18;
            v18 -= 8;
            v17 -= 8;
          }
          while (v17 > 7);
        }
        int v19 = -v10 & 7;
        v11 <<= v19;
        unsigned int v10 = v17 + v19;
      }
      while (v10);
    }
    ++v8;
  }
  while (v8 != a4);
  return result;
}

float calculate_headroom(uint64_t a1, int *a2)
{
  CGImageSetCachingFlags((unsigned char *)a1, 1);
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  if (ColorSpace && *(unsigned char *)(*((void *)ColorSpace + 3) + 13))
  {
    size_t v5 = *(void *)(a1 + 40);
    size_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = CGBitmapContextCreateWithData(0, v5, v6, 0x10uLL, 0, ColorSpace, 0x1105u, 0, 0);
    v28.size.CGFloat width = (double)v5;
    v28.size.CGFloat height = (double)v6;
    v28.origin.CGFloat x = 0.0;
    v28.origin.CGFloat y = 0.0;
    CGContextDrawImage(v7, v28, (CGImageRef)a1);
    uint64_t Data = (short float *)CGBitmapContextGetData(v7);
    size_t BytesPerRow = CGBitmapContextGetBytesPerRow(v7);
    if (!Data)
    {
      CGPostError((uint64_t)"%s: failed to evaluate content headroom", v10, v11, v12, v13, v14, v15, v16, (char)"calculate_headroom");
      _S8 = 0.0;
      if (!v7) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    if (v6)
    {
      uint64_t v17 = 0;
      LOWORD(_H0) = 0;
      do
      {
        if (v5)
        {
          size_t v19 = 0;
          short float v20 = *Data;
          short float v21 = Data[1];
          if (v21 <= Data[2]) {
            short float v21 = Data[2];
          }
          do
          {
            if (v20 <= v21)
            {
              if (_H0 <= v21) {
                _H0 = v21;
              }
            }
            else if (_H0 <= v20)
            {
              _H0 = *Data;
            }
            v19 += 4;
          }
          while (v19 < v5);
        }
        uint64_t Data = (short float *)((char *)Data + BytesPerRow);
        ++v17;
      }
      while (v17 != v6);
    }
    else
    {
      LOWORD(_H0) = 0;
    }
    __asm { FCVT            S8, H0 }
    *a2 = 1;
    if (v7) {
LABEL_22:
    }
      CFRelease(v7);
  }
  else
  {
    _S8 = CGColorSpaceGetHeadroomInfo(ColorSpace, a2);
  }
LABEL_23:
  CGImageSetCachingFlags((unsigned char *)a1, 0);
  return _S8;
}

uint64_t verify_headroom_and_colorspace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (a9 != 0.0 && a9 < 1.0)
  {
    CGPostError((uint64_t)"%s: invalid headroom value: %f", a2, a3, a4, a5, a6, a7, a8, (char)"verify_headroom_and_colorspace");
    return 0;
  }
  if (!a1 || (uint64_t v10 = *(unsigned char **)(a1 + 24), !v10[16]) && !v10[17] && !v10[13])
  {
    CGPostError((uint64_t)"%s: invalid color space for image with headroom", a2, a3, a4, a5, a6, a7, a8, (char)"verify_headroom_and_colorspace");
    return 0;
  }
  uint64_t result = 1;
  if (a9 != 0.0 && a9 != 1.0 && !(v10[13] | v10[16]) && !v10[17])
  {
    CGPostError((uint64_t)"%s: specified color space cannot be used for CGImage with content headroom %f", a2, a3, a4, a5, a6, a7, a8, a2);
    return 0;
  }
  return result;
}

CGImageRef CGImageCreateWithCGPDFStream(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (CGImage *)CGPDFImageCreate(a1);
  CGImageRef ImageForRenderingSize = CGPDFImageCreateImageForRenderingSize(v3, a2, 0.0, 0.0);
  if (v3) {
    CFRelease(v3);
  }
  return ImageForRenderingSize;
}

uint64_t CGImageIsOptimizedForSharing(void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
  }
  if (v2 != CGImageGetTypeID_image_type_id) {
    return 0;
  }
  if (CGImageIsOptimizedForSharing_predicate != -1) {
    dispatch_once(&CGImageIsOptimizedForSharing_predicate, &__block_literal_global_5096);
  }
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  if (CGColorSpaceEqualToColorSpace((uint64_t)ColorSpace, CGImageIsOptimizedForSharing_sRGB)) {
    return 1;
  }
  CFDataRef v6 = CGColorSpaceCopyICCData(ColorSpace);
  if (CGImageIsOptimizedForSharing_cglibrarypredicate != -1) {
    dispatch_once(&CGImageIsOptimizedForSharing_cglibrarypredicate, &__block_literal_global_51_5097);
  }
  IsOptimizedForSharing_f = (const void *)CGImageIsOptimizedForSharing_f(v6, 0);
  if (CGImageIsOptimizedForSharing_cglibrarypredicate_54 != -1) {
    dispatch_once(&CGImageIsOptimizedForSharing_cglibrarypredicate_54, &__block_literal_global_57);
  }
  uint64_t IsOptimizedForSharing_f_53 = CGImageIsOptimizedForSharing_f_53(IsOptimizedForSharing_f, @"aapy");
  if (v6) {
    CFRelease(v6);
  }
  if (IsOptimizedForSharing_f) {
    CFRelease(IsOptimizedForSharing_f);
  }
  return IsOptimizedForSharing_f_53;
}

uint64_t colorsync_smart_null_5103()
{
  return 0;
}

CGColorSpaceRef __CGImageIsOptimizedForSharing_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName(@"kCGColorSpaceSRGB");
  CGImageIsOptimizedForSharing_sRGB = (uint64_t)result;
  return result;
}

uint64_t *CGImageCreateWithContentHeadroom(size_t a1, size_t a2, size_t a3, size_t a4, size_t a5, CGColorSpace *a6, uint64_t a7, CGDataProvider *a8, float a9, CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  CGBitmapInfo v13 = a7;
  float v20 = a9;
  if (!verify_headroom_and_colorspace((uint64_t)a6, (uint64_t)"CGImageCreateWithContentHeadroom", a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a9))return 0; {
  CGImageRef v21 = CGImageCreate(a1, a2, a3, a4, a5, a6, v13, a8, decode, shouldInterpolate, intent);
  }
  uint64_t v22 = (uint64_t *)v21;
  if (v21)
  {
    BOOL v25 = v20 != 0.0;
    if (v20 == 0.0)
    {
      float v20 = calculate_headroom((uint64_t)v21, (int *)&v25);
      int v23 = v25;
    }
    else
    {
      int v23 = 1;
    }
    CGImageSetHeadroom(v22, v23, v20);
  }
  return v22;
}

uint64_t *CGImageCreateCopyWithContentHeadroom(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 208);
  if (v4)
  {
    size_t v5 = (CGDataProvider *)CGDataProviderCreateWithImageProvider(v4);
  }
  else
  {
    size_t v5 = *(CGDataProvider **)(a1 + 152);
    CGDataProviderRetain(v5);
  }
  CFDataRef v6 = CGImageCreateWithContentHeadroom(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(CGColorSpace **)(a1 + 144), *(unsigned int *)(a1 + 32), v5, a2, *(CGFloat **)(a1 + 160), *(_DWORD *)(a1 + 36) & 0x1000000, (CGColorRenderingIntent)((__int16)*(_DWORD *)(a1 + 36) >> 8));
  CGDataProviderRelease(v5);
  return v6;
}

uint64_t CGImageCreateCopyWithImageProvider(char *image, uint64_t a2)
{
  if (!image || (image[39] & 2) != 0) {
    return 0;
  }
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)image);
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 120);
    if (!v5 || (PropertCGFloat y = CGPropertiesGetProperty(v5, @"kCGImageProviderColorSpaceChangedOnImageCopy")) == 0) {
      PropertCGFloat y = *(const void **)(a2 + 40);
    }
  }
  else
  {
    PropertCGFloat y = 0;
  }
  if (!CGColorSpaceEqualToColorSpace((uint64_t)ColorSpace, (uint64_t)Property)) {
    return 0;
  }
  uint64_t v7 = CGImageCreateWithImageProvider(a2, *((void *)image + 20), HIBYTE(*((_DWORD *)image + 9)) & 1, ((__int16)*((_DWORD *)image + 9) >> 8));
  if (!v7) {
    return v7;
  }
  CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo((CGImageRef)image);
  if (BitmapInfo != CGImageGetBitmapInfo((CGImageRef)v7)) {
    goto LABEL_38;
  }
  if (!*((void *)image + 21)) {
    goto LABEL_19;
  }
  uint64_t v9 = *(void *)(v7 + 144);
  uint64_t v10 = v9 ? *(void *)(*(void *)(v9 + 24) + 48) : 0;
  uint64_t v11 = malloc_type_malloc(16 * v10, 0x705560E0uLL);
  *(void *)(v7 + 168) = v11;
  if (!v11)
  {
LABEL_38:
    CFRelease((CFTypeRef)v7);
    return 0;
  }
  uint64_t v12 = 2 * v10;
  if (2 * v10)
  {
    CGBitmapInfo v13 = (uint64_t *)*((void *)image + 21);
    do
    {
      uint64_t v14 = *v13++;
      *v11++ = v14;
      --v12;
    }
    while (v12);
  }
LABEL_19:
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v7 + 36) & 0xF7FFFFFF | (((*((_DWORD *)image + 9) >> 27) & 1) << 27);
  uint64_t v15 = *((void *)image + 22);
  if (v15) {
    CFRetain(*((CFTypeRef *)image + 22));
  }
  *(void *)(v7 + 176) = v15;
  if (!*((void *)image + 23)) {
    goto LABEL_29;
  }
  uint64_t v16 = *(void *)(v7 + 144);
  if (v16) {
    uint64_t v17 = *(void *)(*(void *)(v16 + 24) + 48);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = malloc_type_malloc(8 * v17, 0x705560E0uLL);
  *(void *)(v7 + 184) = v18;
  if (!v18) {
    goto LABEL_38;
  }
  if (v17)
  {
    size_t v19 = (uint64_t *)*((void *)image + 23);
    do
    {
      uint64_t v20 = *v19++;
      *v18++ = v20;
      --v17;
    }
    while (v17);
  }
LABEL_29:
  uint64_t v21 = *((void *)image + 24);
  if (v21) {
    CFRetain(*((CFTypeRef *)image + 24));
  }
  *(void *)(v7 + 192) = v21;
  uint64_t v22 = *((void *)image + 25);
  if (v22) {
    CFRetain(*((CFTypeRef *)image + 25));
  }
  *(void *)(v7 + 200) = v22;
  uint64_t v23 = *((void *)image + 30);
  if (v23) {
    CFRetain(*((CFTypeRef *)image + 30));
  }
  *(void *)(v7 + 240) = v23;
  *(_OWORD *)(v7 + 248) = *(_OWORD *)(image + 248);
  uint64_t v24 = (atomic_uint *)*((void *)image + 27);
  if (v24) {
    atomic_fetch_add_explicit(v24, 1u, memory_order_relaxed);
  }
  *(void *)(v7 + 216) = v24;
  return v7;
}

CGImageRef CGImageCreateCopyWithClipPath(CGImageRef image, CFTypeRef cf)
{
  CopCGFloat y = 0;
  if (image && cf)
  {
    if (CGPathDisableTypeValidation || (CFTypeID v5 = CFGetTypeID(cf), v5 == CGPathGetTypeID()))
    {
      CopCGFloat y = CGImageCreateCopy(image);
      if (Copy)
      {
        CFDataRef v6 = (const void *)*((void *)image + 25);
        if (v6) {
          CFRelease(v6);
        }
        CFRetain(cf);
        *((void *)image + 25) = cf;
      }
    }
    else
    {
      return 0;
    }
  }
  return Copy;
}

CGImageRef CGImageCreateCopyWithRenderingIntent(CGImageRef cf, unsigned int a2)
{
  if (cf)
  {
    char v2 = a2;
    unint64_t v3 = cf;
    CFTypeRef cf = 0;
    if (a2 <= 4)
    {
      int v4 = v3[9];
      if ((v4 & 0x2000000) == 0)
      {
        if (a2 == (__int16)v4 >> 8)
        {
          CFRetain(v3);
          return (CGImageRef)v3;
        }
        else
        {
          CFTypeRef cf = CGImageCreateCopy((CGImageRef)v3);
          if (cf) {
            *((unsigned char *)cf + 37) = v2;
          }
        }
      }
    }
  }
  return cf;
}

unsigned __int8 *CGImageCreateCopyWithOrientation(unsigned __int8 *cf, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = cf;
  if (cf)
  {
    char v9 = a2;
    if (cf[38] == a2)
    {
      CFRetain(cf);
    }
    else if ((a2 - 9) > 0xFFFFFFF7)
    {
      CopCGFloat y = CGImageCreateCopy((CGImageRef)cf);
      uint64_t v8 = (unsigned __int8 *)Copy;
      if (Copy) {
        *((unsigned char *)Copy + 38) = v9;
      }
    }
    else
    {
      CGLog(1, (uint64_t)"%s %s", a3, a4, a5, a6, a7, a8, (char)"CGImageCreateCopyWithOrientation");
      return 0;
    }
  }
  return v8;
}

const void *__use_protected_copy_block_invoke()
{
  return get_BOOLean_property("CG_USE_PROTECTED_COPY", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_protected_copy_status);
}

CGImageRef CGImageCreateCopyByApplyingxtendedRangeToneMapping(void *a1, CGColorSpace *a2, const void *a3)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
  }
  CGImageRef v7 = 0;
  if (a3 && v6 == CGImageGetTypeID_image_type_id)
  {
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == CFDictionaryGetTypeID())
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a3, @"kCGImageExtendedRangeToneMappingInfo");
      CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
      __int16 v11 = CGImageGetBitmapInfo((CGImageRef)a1);
      if (ColorSpace)
      {
        CGImageRef v7 = 0;
        if (!*(unsigned char *)(*((void *)ColorSpace + 3) + 13) || (v11 & 0xF00) != 0x100) {
          return v7;
        }
        Linearized = CGColorSpaceCreateLinearized(ColorSpace);
        if (Linearized)
        {
          CGImageRef v7 = 0;
          if (!CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks((uint64_t)ColorSpace, Linearized, 0, (uint64_t)&__block_literal_global_34_22971, 0, 0, 0, 5u, 0))return v7; {
          CFDictionaryRef ResolveExtendedRangeToneMappingOptions = CGColorTransformCreateResolveExtendedRangeToneMappingOptions(Value);
          }
          if (ResolveExtendedRangeToneMappingOptions)
          {
            CFRelease(ResolveExtendedRangeToneMappingOptions);
            DataProviderInternal = CGImageGetDataProviderInternal((char *)a1, 0);
            if (DataProviderInternal)
            {
              CFDataRef v15 = CGDataProviderCopyData((CGDataProviderRef)DataProviderInternal);
              if (v15)
              {
                CFDataRef v16 = v15;
                size_t v18 = a1[5];
                size_t v17 = a1[6];
                uint64_t v19 = a1[9];
                size_t v20 = a1[7];
                size_t v33 = a1[8];
                uint64_t NumberOfComponents = CGImageGetNumberOfComponents((uint64_t)a1);
                CGBitmapInfo bitmapInfo = CGImageGetBitmapInfo((CGImageRef)a1);
                uint64_t v22 = CGImageGetColorSpace((CGImageRef)a1);
                size_t v34 = v18;
                size_t v23 = (v20 >> 3) * v18 * NumberOfComponents;
                size_t v24 = v23 * v17;
                BOOL v25 = malloc_type_calloc(1uLL, v23 * v17, 0xEEA816AFuLL);
                if (v25)
                {
                  char v26 = v25;
                  size_t v32 = v23;
                  if (a2) {
                    CopyWithStandarduint64_t Range = 0;
                  }
                  else {
                    CopyWithStandarduint64_t Range = CGColorSpaceCreateCopyWithStandardRange(v22);
                  }
                  if (CopyWithStandardRange) {
                    a2 = CopyWithStandardRange;
                  }
                  BytePtr = CFDataGetBytePtr(v16);
                  uint64_t v48 = 0;
                  uint64_t v49 = 0;
                  uint64_t v41 = 0;
                  uint64_t v42 = 0;
                  v43[0] = 0;
                  v43[1] = a2;
                  CGBitmapInfo v44 = bitmapInfo;
                  int v45 = 0;
                  size_t v46 = v20;
                  uint64_t v47 = v19;
                  v36[0] = 0;
                  v36[1] = v22;
                  CGBitmapInfo v37 = bitmapInfo;
                  int v38 = 0;
                  size_t v39 = v20;
                  uint64_t v40 = v19;
                  CGImageRef v7 = 0;
                  if (convert_color_data_with_format(0, v34, (CGDataProvider *)v17, (char *)v26, (uint64_t)v43, BytePtr, (uint64_t)v36, (const __CFDictionary *)a3))
                  {
                    UInt8 v30 = CGDataProviderCreateWithData(0, v26, v24, (CGDataProviderReleaseDataCallback)free_data);
                    if (v30)
                    {
                      size_t v31 = v30;
                      CGImageRef v7 = CGImageCreate(v34, v17, v20, v33, v32, a2, bitmapInfo, v30, 0, 0, kCGRenderingIntentDefault);
                      CFRelease(v31);
                    }
                    else
                    {
                      CGImageRef v7 = 0;
                    }
                  }
                  CGColorSpaceRelease(CopyWithStandardRange);
                }
                else
                {
                  CGImageRef v7 = 0;
                }
                CFRelease(v16);
                return v7;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return v7;
}

void free_data(int a1, void *a2)
{
}

CGImageRef CGImageCreateCopyByApplyingSoftMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGImageRef v8 = (CGImageRef)a1;
  if (!a1) {
    return v8;
  }
  int v9 = *(_DWORD *)(a1 + 32) & 0x1F;
  if ((v9 - 7) <= 0xFFFFFFFD || *(void *)(a1 + 56) != 8 || *(void *)(a1 + 64) != 32)
  {
LABEL_22:
    CGLog(1, (uint64_t)"%s %s", a3, a4, a5, a6, a7, a8, (char)"CGImageCreateCopyByApplyingSoftMask");
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 176);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void *)(v10 + 64);
  if (v11 != 1 && v11 != 8) {
    goto LABEL_22;
  }
  size_t v13 = *(void *)(a1 + 48) * *(void *)(a1 + 72);
  uint64_t v14 = (char *)malloc_type_calloc(v13, 1uLL, 0x4F4452D4uLL);
  if (!v14) {
    return 0;
  }
  CFDataRef v15 = v14;
  DataProviderInternal = CGImageGetDataProviderInternal((char *)v8, 0);
  size_t v17 = CGAccessSessionCreate((CGDataProvider *)DataProviderInternal);
  unint64_t v18 = (*((void *)v8 + 6) - 1) * *((void *)v8 + 9)
      + ((unint64_t)(*((void *)v8 + 8) * *((void *)v8 + 5) + 7) >> 3);
  uint64_t Bytes = CGAccessSessionGetBytes(v17, v15, v18, v19, v20, v21, v22, v23);
  CGAccessSessionRelease(v17);
  if (Bytes != v18) {
    goto LABEL_25;
  }
  if (v9 == 6)
  {
    LODWORD(permuteMap.data) = 66051;
    dest.data = v15;
    *(int8x16_t *)&dest.CGFloat height = vextq_s8(*(int8x16_t *)((char *)v8 + 40), *(int8x16_t *)((char *)v8 + 40), 8uLL);
    dest.rowuint64_t Bytes = *((void *)v8 + 9);
    vImagePermuteChannels_ARGB8888(&dest, &dest, (const uint8_t *)&permuteMap, 0x10u);
  }
  uint64_t v25 = *(void *)(v10 + 72);
  size_t v26 = *(void *)(v10 + 48) * v25;
  uint64_t v27 = (char *)malloc_type_calloc(v26, 1uLL, 0x9E402AE5uLL);
  if (!v27)
  {
LABEL_25:
    int v45 = v15;
LABEL_26:
    free(v45);
    return 0;
  }
  CGRect v28 = v27;
  *(void *)CGBitmapInfo bitmapInfo = v25;
  vImagePixelCount v29 = CGImageGetDataProviderInternal((char *)v10, 0);
  UInt8 v30 = CGAccessSessionCreate((CGDataProvider *)v29);
  unint64_t v31 = (*(void *)(v10 + 48) - 1) * *(void *)(v10 + 72)
      + ((unint64_t)(*(void *)(v10 + 64) * *(void *)(v10 + 40) + 7) >> 3);
  uint64_t v37 = CGAccessSessionGetBytes(v30, v28, v31, v32, v33, v34, v35, v36);
  CGAccessSessionRelease(v30);
  if (v37 != v31)
  {
    free(v15);
    int v45 = v28;
    goto LABEL_26;
  }
  if (*(void *)(v10 + 56) == 1)
  {
    if (v26)
    {
      int v38 = v28;
      do
      {
        *int v38 = ~*v38;
        ++v38;
        --v26;
      }
      while (v26);
    }
    size_t v39 = *(void *)(v10 + 40);
    uint64_t v40 = malloc_type_calloc(*(void *)(v10 + 48) * v39, 1uLL, 0x17DE9B4uLL);
    vImagePixelCount v42 = *(void *)(v10 + 40);
    vImagePixelCount v41 = *(void *)(v10 + 48);
    dest.data = v28;
    dest.CGFloat height = v41;
    size_t v43 = *(void *)(v10 + 72);
    dest.size_t width = v42;
    dest.rowuint64_t Bytes = v43;
    permuteMap.data = v40;
    permuteMap.CGFloat height = v41;
    permuteMap.size_t width = v42;
    permuteMap.rowuint64_t Bytes = v39;
    vImageConvert_Planar1toPlanar8(&dest, &permuteMap, 0x10u);
    free(v28);
    CGRect v28 = (char *)v40;
  }
  else
  {
    size_t v39 = *(void *)bitmapInfo;
  }
  vImagePixelCount v46 = *(void *)(v10 + 40);
  uint64_t v48 = *((void *)v8 + 5);
  vImagePixelCount v47 = *((void *)v8 + 6);
  if (v46 != v48 || *(void *)(v10 + 48) != v47)
  {
    uint64_t v49 = malloc_type_calloc(v47 * v48, 1uLL, 0x4037E65DuLL);
    dest.data = v28;
    *(int8x16_t *)&dest.CGFloat height = vextq_s8(*(int8x16_t *)(v10 + 40), *(int8x16_t *)(v10 + 40), 8uLL);
    dest.rowuint64_t Bytes = v39;
    permuteMap.data = v49;
    int8x16_t v50 = *(int8x16_t *)((char *)v8 + 40);
    *(int8x16_t *)&permuteMap.CGFloat height = vextq_s8(v50, v50, 8uLL);
    permuteMap.rowuint64_t Bytes = v50.i64[0];
    size_t v39 = v50.i64[0];
    vImageScale_Planar8(&dest, &permuteMap, 0, 0x10u);
    free(v28);
    vImagePixelCount v46 = *((void *)v8 + 5);
    vImagePixelCount v47 = *((void *)v8 + 6);
    CGRect v28 = (char *)v49;
  }
  dest.data = v15;
  dest.CGFloat height = v47;
  size_t v51 = *((void *)v8 + 9);
  dest.size_t width = v46;
  dest.rowuint64_t Bytes = v51;
  permuteMap.data = v28;
  permuteMap.CGFloat height = v47;
  permuteMap.size_t width = v46;
  permuteMap.rowuint64_t Bytes = v39;
  vImageOverwriteChannels_ARGB8888(&permuteMap, &dest, &dest, 1u, 0x10u);
  vImagePremultiplyData_RGBA8888(&dest, &dest, 0x10u);
  uint64_t v52 = CGImageGetBitmapInfo(v8);
  if (v9 == 6) {
    int v53 = 2;
  }
  else {
    int v53 = 1;
  }
  CGBitmapInfo bitmapInfoa = v52 & 0xFFFFFFE0 | v53;
  uint64_t v54 = CGDataProviderCreateWithDataNoCopy(v52, v15, v13, (uint64_t)release_provider_data);
  size_t v55 = *((void *)v8 + 6);
  size_t width = *((void *)v8 + 5);
  size_t v56 = *((void *)v8 + 7);
  size_t v57 = *((void *)v8 + 8);
  size_t v58 = *((void *)v8 + 9);
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(v8);
  decode = CGImageGetDecode(v8);
  BOOL shouldInterpolate = CGImageGetShouldInterpolate(v8);
  CGColorRenderingIntent RenderingIntent = CGImageGetRenderingIntent(v8);
  CGImageRef v8 = CGImageCreate(width, v55, v56, v57, v58, ColorSpace, bitmapInfoa, v54, decode, shouldInterpolate, RenderingIntent);
  CGDataProviderRelease(v54);
  free(v28);
  return v8;
}

void release_provider_data(int a1, void *a2)
{
}

CGImageRef CGImageCreateWithJPEGDataProvider2(uint64_t a1, CGColorSpace *a2, double *a3, int a4, unsigned __int8 a5)
{
  if (CGImageCreateWithJPEGDataProvider2_predicate != -1) {
    dispatch_once(&CGImageCreateWithJPEGDataProvider2_predicate, &__block_literal_global_102);
  }
  uint64_t v10 = CGImageCreateWithJPEGDataProvider2_f(a1, 0);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (const void *)v10;
  if (CGImageCreateWithJPEGDataProvider2_predicate_105 != -1) {
    dispatch_once(&CGImageCreateWithJPEGDataProvider2_predicate_105, &__block_literal_global_108);
  }
  uint64_t v12 = (const void *)CGImageCreateWithJPEGDataProvider2_f_104(v11);
  if (!v12 || !CFEqual(v12, @"public.jpeg"))
  {
    CFRelease(v11);
    return 0;
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F1CFC8];
  keys = @"kCGImageSourceShouldCache";
  CFDictionaryRef v13 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, &v20, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (CGImageCreateWithJPEGDataProvider2_predicate_114 != -1) {
    dispatch_once(&CGImageCreateWithJPEGDataProvider2_predicate_114, &__block_literal_global_117);
  }
  uint64_t v14 = CGImageCreateWithJPEGDataProvider2_f_113(v11, 0, v13);
  CFRelease(v13);
  CFRelease(v11);
  if (v14)
  {
    if (a4) {
      int v15 = 0x1000000;
    }
    else {
      int v15 = 0;
    }
    *(_DWORD *)(v14 + 36) = v15 & 0xFFFF00FF | (a5 << 8) | *(_DWORD *)(v14 + 36) & 0xFEFF00FF;
    if (a2)
    {
      cgimage_set_decode_array((void **)v14, a3, *(void *)(*((void *)a2 + 3) + 48));
      CopyWithCGColorSpaceRef ColorSpace = CGImageCreateCopyWithColorSpace((CGImageRef)v14, a2);
      CFRelease((CFTypeRef)v14);
      return CopyWithColorSpace;
    }
    if (a3 || !*(void *)(v14 + 160))
    {
      CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)v14);
      if (ColorSpace) {
        unint64_t v19 = *(void *)(*((void *)ColorSpace + 3) + 48);
      }
      else {
        unint64_t v19 = 0;
      }
      cgimage_set_decode_array((void **)v14, a3, v19);
    }
  }
  return (CGImageRef)v14;
}

BOOL is_jpg_image(uint64_t a1)
{
  BOOL result = 0;
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 216);
    if (v1)
    {
      PropertCGFloat y = CGPropertiesGetProperty(v1, @"com.apple.ImageIO.imageSourceTypeIdentifier");
      if (Property)
      {
        if (CFEqual(Property, @"public.jpeg")) {
          return 1;
        }
      }
    }
  }
  return result;
}

void *copy_image_mask_and_matte(uint64_t a1, uint64_t **image)
{
  BOOL result = CGImageGetColorSpace((CGImageRef)image);
  if (result) {
    uint64_t v5 = *(void *)(result[3] + 48);
  }
  else {
    uint64_t v5 = 0;
  }
  if (image[21])
  {
    BOOL result = malloc_type_malloc(16 * v5, 0x100004000313F17uLL);
    *(void *)(a1 + 168) = result;
    if (result)
    {
      uint64_t v6 = 2 * v5;
      if (2 * v5)
      {
        CGImageRef v7 = image[21];
        do
        {
          uint64_t v8 = *v7++;
          *result++ = v8;
          --v6;
        }
        while (v6);
      }
    }
  }
  if (image[23])
  {
    BOOL result = malloc_type_malloc(8 * v5, 0x100004000313F17uLL);
    *(void *)(a1 + 184) = result;
    if (result)
    {
      if (v5)
      {
        int v9 = image[23];
        do
        {
          uint64_t v10 = *v9++;
          *result++ = v10;
          --v5;
        }
        while (v5);
      }
    }
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 36) & 0xF7FFFFFF | (((*((_DWORD *)image + 9) >> 27) & 1) << 27);
  uint64_t v11 = image[22];
  if (v11) {
    BOOL result = CFRetain(v11);
  }
  *(void *)(a1 + 176) = v11;
  return result;
}

BOOL CGImageSetColorConversionInfoOptions(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
  }
  if (v4 != CGImageGetTypeID_image_type_id) {
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 80));
  if (!*(void *)(a1 + 224))
  {
    uint64_t v5 = (CFTypeRef *)CGPropertiesCreate();
    uint64_t v6 = 0;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 224), (unint64_t *)&v6, (unint64_t)v5, memory_order_relaxed, memory_order_relaxed);
    if (v6) {
      CGPropertiesRelease(v5);
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 80));
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  __int16 BitmapInfo = CGImageGetBitmapInfo((CGImageRef)a1);
  CFDictionaryRef v9 = CGColorConversionInfoResolveOptions((uint64_t)ColorSpace, BitmapInfo, a2);
  CFDictionaryRef v10 = v9;
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = a2 == 0;
  }
  if (v11) {
    CFDictionaryRef v12 = v9;
  }
  else {
    CFDictionaryRef v12 = 0;
  }
  BOOL v13 = v12 != 0;
  uint64_t v14 = *(void *)(a1 + 224);
  if (v12)
  {
    CGPropertiesSetProperty(v14, @"kCGColorConversionInfoOptions", v12);
    if (!v10) {
      return v13;
    }
    goto LABEL_19;
  }
  CGPropertiesRemoveProperty(v14, @"kCGColorConversionInfoOptions");
  if (v10) {
LABEL_19:
  }
    CFRelease(v10);
  return v13;
}

uint64_t CGImageSetColorConversionInfoPayload(uint64_t result, const void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    CFTypeID v4 = CFGetTypeID((CFTypeRef)result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
    }
    if (v4 == CGImageGetTypeID_image_type_id)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 80));
      if (!*(void *)(v3 + 224))
      {
        uint64_t v5 = (CFTypeRef *)CGPropertiesCreate();
        uint64_t v6 = 0;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 224), (unint64_t *)&v6, (unint64_t)v5, memory_order_relaxed, memory_order_relaxed);
        if (v6) {
          CGPropertiesRelease(v5);
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v3 + 80));
      uint64_t v7 = *(void *)(v3 + 224);
      if (a2)
      {
        CGPropertiesSetProperty(v7, @"kCGColorConversionInfoPayload", a2);
        return 1;
      }
      CGPropertiesRemoveProperty(v7, @"kCGColorConversionInfoPayload");
    }
    return 0;
  }
  return result;
}

void *__CGImageCreateWithJPEGDataProvider2_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  CGImageCreateWithJPEGDataProvider2_f_113 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CGImageCreateWithJPEGDataProvider2_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithDataProvider");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithDataProvider");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithDataProvider");
  }
  CGImageCreateWithJPEGDataProvider2_f = (uint64_t (*)(void, void))result;
  return result;
}

void *__CGImageCreateCopyWithResolvedOptions_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationAddImage");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationAddImage");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationAddImage");
  }
  CGImageCreateCopyWithResolvedOptions_f_82 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CGImageCreateCopyWithResolvedOptions_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationCreateWithData");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationCreateWithData");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationCreateWithData");
  }
  CGImageCreateCopyWithResolvedOptions_f = (uint64_t (*)(void, void, void, void))result;
  return result;
}

CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return CGImageCreateWithJPEGDataProvider2((uint64_t)source, 0, (double *)decode, shouldInterpolate, intent);
}

CGImageRef CGImageCreateWithMaskAndMatte(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CGImageRef v3 = 0;
  decode[2] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (!a1 || !a2) {
    return v3;
  }
  if ((*(unsigned char *)(a1 + 39) & 0xA) != 0 || *(void *)(a1 + 192)) {
    return 0;
  }
  int v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x2000000) != 0)
  {
    CFDictionaryRef v12 = *(CGFloat **)(a2 + 160);
    if (v12)
    {
      decode[0] = v12[1];
      CGFloat v13 = *v12;
    }
    else
    {
      decode[0] = 1.0;
      CGFloat v13 = 0.0;
    }
    decode[1] = v13;
    DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
    CopyWithCGColorSpaceRef ColorSpace = CGImageCreate(*(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 72), DeviceGray, 0, *(CGDataProviderRef *)(a2 + 152), decode, *(_DWORD *)(a2 + 36) & 0x1000000, kCGRenderingIntentDefault);
    goto LABEL_17;
  }
  if ((v8 & 0xC000000) != 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 144);
  if (!v9 || *(_DWORD *)(*(void *)(v9 + 24) + 28)) {
    return 0;
  }
  DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
  if (!CGColorSpaceEqualToColorSpace(*(void *)(a2 + 144), (uint64_t)DeviceGray))
  {
    CopyWithCGColorSpaceRef ColorSpace = CGImageCreateCopyWithColorSpace((CGImageRef)a2, DeviceGray);
LABEL_17:
    CGImageRef v11 = CopyWithColorSpace;
    goto LABEL_18;
  }
  CFRetain((CFTypeRef)a2);
  CGImageRef v11 = (CGImageRef)a2;
LABEL_18:
  CGColorSpaceRelease(DeviceGray);
  if (a3 && (*(void *)(a1 + 40) != *(void *)(a2 + 40) || *(void *)(a1 + 48) != *(void *)(a2 + 48))
    || (CopCGFloat y = CGImageCreateCopy((CGImageRef)a1)) == 0)
  {
    if (v11) {
      CFRelease(v11);
    }
    return 0;
  }
  CGImageRef v3 = Copy;
  *((void *)Copy + 22) = v11;
  *((_DWORD *)Copy + 9) |= 0x8000000u;
  if (a3)
  {
    uint64_t v16 = *((void *)Copy + 18);
    if (v16) {
      uint64_t v17 = *(void *)(*(void *)(v16 + 24) + 48);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = malloc_type_malloc(8 * v17, 0x705560E0uLL);
    for (*((void *)v3 + 23) = v18; v17; --v17)
    {
      uint64_t v19 = *a3++;
      *v18++ = v19;
    }
  }
  return v3;
}

CGImageRef CGImageCreateWithMaskingColor(CGImage *a1, uint64_t a2, __n128 a3)
{
  CGImageRef v3 = 0;
  v16[1] = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2) {
    return v3;
  }
  if (*((void *)a1 + 24)) {
    return 0;
  }
  uint64_t v6 = *((void *)a1 + 18);
  if (v6)
  {
    unint64_t v7 = *(void *)(*(void *)(v6 + 24) + 48);
    if (v7 >> 61)
    {
      MEMORY[0x1F4188790](a1, a3);
      int v8 = (CGFloat *)&v15;
      uint64_t v9 = 0;
      goto LABEL_17;
    }
    uint64_t v10 = 8 * v7;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  size_t v11 = MEMORY[0x1F4188790](v10, a3);
  int v8 = (CGFloat *)((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v7 <= 0x1FFFFFFFFFFFFFFELL) {
    uint64_t v9 = (CGFloat *)((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v7 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000022)
  {
    uint64_t v9 = (CGFloat *)malloc_type_malloc(v11, 0x1CD51F6uLL);
  }
  else if (!v7)
  {
    goto LABEL_19;
  }
LABEL_17:
  uint64_t v13 = 0;
  do
  {
    v9[v13] = (double)*(int *)(a2 + 4 * v13);
    ++v13;
  }
  while (v7 != v13);
LABEL_19:
  CGImageRef v3 = CGImageCreateWithMaskingColors(a1, v9);
  if (v9 != v8) {
    free(v9);
  }
  return v3;
}

CGImageRef CGImageCreateWithMaskingColors(CGImageRef image, const CGFloat *components)
{
  CGImageRef v2 = 0;
  if (image)
  {
    CGImageRef v3 = components;
    if (components)
    {
      if ((*((unsigned char *)image + 39) & 0xE) != 0 || *((void *)image + 24)) {
        return 0;
      }
      CopCGFloat y = CGImageCreateCopy(image);
      CGImageRef v2 = Copy;
      if (!Copy) {
        return v2;
      }
      uint64_t v6 = *((void *)Copy + 18);
      if (v6) {
        uint64_t v7 = *(void *)(*(void *)(v6 + 24) + 48);
      }
      else {
        uint64_t v7 = 0;
      }
      int v8 = malloc_type_malloc(16 * v7, 0x705560E0uLL);
      if (!v8)
      {
        CFRelease(v2);
        return 0;
      }
      uint64_t v9 = 2 * v7;
      if (2 * v7)
      {
        uint64_t v10 = v8;
        do
        {
          uint64_t v11 = *(void *)v3++;
          *v10++ = v11;
          --v9;
        }
        while (v9);
      }
      *((void *)v2 + 21) = v8;
      *((_DWORD *)v2 + 9) |= 0x8000000u;
    }
  }
  return v2;
}

void *__CGImageCreateWithJPEGDataProvider3_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  CGImageCreateWithJPEGDataProvider3_f_166 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CGImageCreateWithJPEGDataProvider3_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithDataProvider");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithDataProvider");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithDataProvider");
  }
  CGImageCreateWithJPEGDataProvider3_f = (uint64_t (*)(void, void))result;
  return result;
}

void *__CGImageCreateWithJPEG2000DataProvider_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  CGImageCreateWithJPEG2000DataProvider_f_185 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CGImageCreateWithJPEG2000DataProvider_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithDataProvider");
  }
  BOOL result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithDataProvider");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithDataProvider");
  }
  CGImageCreateWithJPEG2000DataProvider_f = (uint64_t (*)(void, void))result;
  return result;
}

uint64_t CGImageCreateWithEPSDataProvider(CGDataProvider *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if ((*(unsigned char *)(a2 + 39) & 2) != 0) {
    return 0;
  }
  if (*(void *)(a2 + 192)) {
    return 0;
  }
  CFTypeID v4 = (double *)CGImageEPSRepCreate(a1, (const void *)a2);
  if (!v4) {
    return 0;
  }
  uint64_t v12 = v4;
  uint64_t image_base = create_image_base((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11);
  if (image_base)
  {
    double v13 = v12[6];
    double v14 = v12[7];
    if (v13 < 0.0 || v14 < 0.0)
    {
      uint64_t v15 = *((void *)v12 + 4);
      uint64_t v16 = *((void *)v12 + 5);
      *(CGRect *)(&v13 - 2) = CGRectStandardize(*(CGRect *)(&v13 - 2));
    }
    *(void *)(image_base + 40) = (unint64_t)v13;
    *(void *)(image_base + 48) = (unint64_t)v14;
    *(_DWORD *)(image_base + 32) = 0;
    *(void *)(image_base + 192) = v12;
    *(_WORD *)(image_base + 36) = 1;
    *(_OWORD *)(image_base + 232) = 0u;
    *(_OWORD *)(image_base + 248) = 0u;
  }
  else
  {
    CFRelease(v12);
  }
  return image_base;
}

CGImageRef CGImageCreateWithMask(CGImageRef image, CGImageRef mask)
{
  return CGImageCreateWithMaskAndMatte((uint64_t)image, (uint64_t)mask, 0);
}

uint64_t create_subsampled_image_provider(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v12 = *(void *)(a4 + 120);
    if (!v12) {
      goto LABEL_10;
    }
    double v13 = @"kCGImageProviderAlphaIsNotPremultiplied";
    values = (void *)CGPropertiesGetProperty(v12, @"kCGImageProviderAlphaIsNotPremultiplied");
    if (values
      || (uint64_t v15 = *(void *)(a4 + 120)) != 0
      && ((double v13 = @"kCGImageProviderAlphaIsPremultiplied",
           (values = (void *)CGPropertiesGetProperty(v15, @"kCGImageProviderAlphaIsPremultiplied")) != 0)
       || (uint64_t v16 = *(void *)(a4 + 120)) != 0
       && (double v13 = @"kCGImageProviderAlphaIsOne",
           (values = (void *)CGPropertiesGetProperty(v16, @"kCGImageProviderAlphaIsOne")) != 0)))
    {
      keys[0] = v13;
      CFDictionaryRef v14 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    else
    {
LABEL_10:
      CFDictionaryRef v14 = 0;
    }
    int v17 = *(_DWORD *)(a4 + 36);
    int valuePtr = v17;
    if (!v14)
    {
      if (v17)
      {
        CFNumberRef v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        values = v18;
        keys[0] = @"kCGImageProviderBitmapInfo";
        CFDictionaryRef v14 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v18) {
          CFRelease(v18);
        }
      }
    }
  }
  else
  {
    CFDictionaryRef v14 = 0;
    int valuePtr = 0;
  }
  uint64_t v19 = (const CGSize *)(a1 + 16);
  if (!a1) {
    uint64_t v19 = &CGSizeZero;
  }
  double v20 = fabs(round(v19->width));
  p_CGFloat height = (double *)(a1 + 24);
  if (!a1) {
    p_CGFloat height = &CGSizeZero.height;
  }
  uint64_t v22 = CGImageProviderCreate(a2, a3, a1, (uint64_t)&subsampled_image_callbacks, v14, a6, a7, a8, (double)(unint64_t)v20, (double)(unint64_t)fabs(round(*p_height)));
  if (v14)
  {
    CFIndex Count = CFDictionaryGetCount(v14);
    if (Count)
    {
      CFIndex v25 = Count;
      unint64_t v26 = 8 * Count;
      MEMORY[0x1F4188790](Count, v24);
      unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
      CGRect v28 = (const void **)&v37[-v27];
      if (v26 >= 0x200) {
        size_t v29 = 512;
      }
      else {
        size_t v29 = v26;
      }
      bzero(&v37[-v27], v29);
      MEMORY[0x1F4188790](v30, v31);
      uint64_t v32 = (const void **)&v37[-v27];
      bzero(&v37[-v27], v29);
      CFDictionaryGetKeysAndValues(v14, (const void **)&v37[-v27], (const void **)&v37[-v27]);
      do
      {
        uint64_t v34 = *v28++;
        uint64_t v33 = v34;
        uint64_t v35 = *v32++;
        CGImageProviderSetProperty(v22, v33, v35);
        --v25;
      }
      while (v25);
    }
    CFRelease(v14);
  }
  return v22;
}

atomic_uint *subsampled_image_copy_image_block_set(atomic_uint *a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  if (a2 && !a3)
  {
    if (a1)
    {
      atomic_fetch_add_explicit(a1, 1u, memory_order_relaxed);
      return a1;
    }
  }
  return result;
}

CFDictionaryRef __block_set_options_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"kCGImageBlockSingletonRequest";
  values = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryRef result = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  block_set_options_options_singleton = (uint64_t)result;
  return result;
}

CFStringRef CGImageGetUTType(CGImageRef image)
{
  if (!image) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(image);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
  }
  if (v2 != CGImageGetTypeID_image_type_id) {
    return 0;
  }
  uint64_t v3 = *((void *)image + 27);
  if (!v3) {
    return 0;
  }

  return (CFStringRef)CGPropertiesGetProperty(v3, @"com.apple.ImageIO.imageSourceTypeIdentifier");
}

char *CGImageGetData(char *result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v10 = result;
    CFTypeID v11 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
    }
    if (v11 != CGImageGetTypeID_image_type_id) {
      return 0;
    }
    CFDictionaryRef result = 0;
    unint64_t v12 = *((void *)v10 + 7);
    if (v12 > a4 || v12 - 9 < 0xFFFFFFFFFFFFFFF8) {
      return result;
    }
    if (*((void *)v10 + 6) <= a3) {
      return 0;
    }
    if (*((void *)v10 + 19) || (CFDictionaryRef result = CGImageGetDataProviderInternal(v10, 0)) != 0)
    {
      if ((*((_DWORD *)v10 + 8) & 0x7000) == 0x2000)
      {
        double v13 = (CGDataProvider *)*((void *)v10 + 19);
        int v14 = 4;
      }
      else
      {
        if ((*((_DWORD *)v10 + 8) & 0x7000) != 0x1000)
        {
          uint64_t v15 = (CGDataProvider *)*((void *)v10 + 19);
          CGDataProviderRetain(v15);
          goto LABEL_18;
        }
        double v13 = (CGDataProvider *)*((void *)v10 + 19);
        int v14 = 2;
      }
      uint64_t v15 = CGDataProviderCreateWithSwappedProvider(v13, v14);
LABEL_18:
      for (uint64_t i = CGAccessSessionCreate(v15); a3; --a3)
        CGAccessSessionSkipForward((uint64_t)i, *((void *)v10 + 9));
      if ((v10[39] & 2) != 0)
      {
        uint64_t v22 = 1;
      }
      else
      {
        uint64_t v17 = *((void *)v10 + 18);
        if (v17) {
          uint64_t v17 = *(void *)(*(void *)(v17 + 24) + 48);
        }
        unsigned int v18 = *((_DWORD *)v10 + 8) & 0x1F;
        BOOL v19 = v18 > 6;
        int v20 = (1 << v18) & 0x61;
        if (v19 || v20 == 0) {
          uint64_t v22 = v17 + 1;
        }
        else {
          uint64_t v22 = v17;
        }
      }
      CGRect v28 = (char *)malloc_type_malloc(*((void *)v10 + 9), 0x2062DE7BuLL);
      if (!a2) {
        goto LABEL_86;
      }
      uint64_t v29 = 0;
      while (1)
      {
        CGAccessSessionGetBytes(i, v28, *((void *)v10 + 9), v23, v24, v25, v26, v27);
        unint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = *((void *)v10 + 7);
        unint64_t v33 = 0xFFFFFFFF >> -(char)v32;
        do
        {
          v60[v31++] = v30 / v33;
          v30 += 0xFFFFFFFF >> -(char)a4;
        }
        while (v33 + 1 != v31);
        if (!*((void *)v10 + 5)) {
          goto LABEL_85;
        }
        unint64_t v34 = 0;
        unint64_t v35 = 0;
        unsigned int v36 = 0;
        unint64_t v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = v32 * v22;
        uint64_t v40 = *((void *)v10 + 8);
        unint64_t v41 = v40 - v32 * v22;
        vImagePixelCount v42 = &v28[*((void *)v10 + 9)];
        size_t v43 = (unsigned char *)(a6 + v29 * a5);
        CGBitmapInfo v44 = v28;
        do
        {
          if (v22)
          {
            uint64_t v45 = 0;
            while (1)
            {
              unint64_t v46 = *((void *)v10 + 7);
              if (v46 < 0x19) {
                break;
              }
              if (v37 > 0x17)
              {
                unint64_t v48 = v37;
              }
              else
              {
                do
                {
                  v38 <<= 8;
                  if (v44 < v42)
                  {
                    int v47 = *v44++;
                    v38 |= v47;
                  }
                  unint64_t v48 = v37 + 8;
                  BOOL v49 = v37 >= 0x10;
                  v37 += 8;
                }
                while (!v49);
              }
              v46 -= 24;
              unint64_t v37 = v48 - 24;
              int v50 = ((v38 >> (v48 - 24)) & 0xFFFFFF) << v46;
              if (v46) {
                goto LABEL_53;
              }
LABEL_55:
              unsigned int v52 = v60[v46 | v50];
              if (a4 >= 0x19)
              {
                if (v34 >= 8)
                {
                  do
                  {
                    v34 -= 8;
                    *v43++ = v36 >> v34;
                  }
                  while (v34 > 7);
                }
                unsigned int v36 = (v52 >> (a4 - 24)) | (v36 << 24);
                v34 |= 0x18uLL;
                uint64_t v24 = a4 - 24;
                do
                {
LABEL_60:
                  v34 -= 8;
                  *v43++ = v36 >> v34;
                }
                while (v34 > 7);
                uint64_t v25 = 0xFFFFFFFF >> -(char)v24;
                uint64_t v26 = v24;
                goto LABEL_62;
              }
              uint64_t v24 = a4;
              uint64_t v25 = 0xFFFFFFFF >> -(char)a4;
              uint64_t v26 = a4;
              if (v34 >= 8) {
                goto LABEL_60;
              }
LABEL_62:
              uint64_t v23 = v25 & v52;
              unsigned int v36 = (v36 << v26) | v23;
              v34 += v24;
              if (++v45 == v22) {
                goto LABEL_63;
              }
            }
            int v50 = 0;
            if (!v46) {
              goto LABEL_55;
            }
LABEL_53:
            while (v37 < v46)
            {
              v38 <<= 8;
              if (v44 < v42)
              {
                int v51 = *v44++;
                v38 |= v51;
              }
              v37 += 8;
            }
            v37 -= v46;
            LODWORD(v46) = (v38 >> v37) & (0xFFFFFFFF >> -(char)v46);
            goto LABEL_55;
          }
LABEL_63:
          if (v40 != v39)
          {
            if (v41 < 0x19)
            {
              unint64_t v55 = v41;
              if (!v41) {
                goto LABEL_80;
              }
LABEL_75:
              while (v37 < v55)
              {
                v38 <<= 8;
                if (v44 < v42)
                {
                  unsigned int v56 = *v44++;
                  uint64_t v23 = v56;
                  v38 |= v56;
                }
                v37 += 8;
              }
              v37 -= v55;
              goto LABEL_80;
            }
            if (v37 > 0x17)
            {
              unint64_t v54 = v37;
            }
            else
            {
              do
              {
                v38 <<= 8;
                if (v44 < v42)
                {
                  int v53 = *v44++;
                  v38 |= v53;
                }
                unint64_t v54 = v37 + 8;
                BOOL v49 = v37 >= 0x10;
                v37 += 8;
              }
              while (!v49);
            }
            unint64_t v37 = v54 - 24;
            unint64_t v55 = v40 - v39 - 24;
            if (v40 - v39 != 24) {
              goto LABEL_75;
            }
          }
LABEL_80:
          ++v35;
        }
        while (v35 < *((void *)v10 + 5));
        for (; v34; unint64_t v34 = v57 + v58)
        {
          unint64_t v57 = v34;
          if (v34 >= 8)
          {
            do
            {
              v57 -= 8;
              *v43++ = v36 >> v57;
            }
            while (v57 > 7);
          }
          uint64_t v58 = -(int)v34 & 7;
          v36 <<= v58;
        }
LABEL_85:
        if (++v29 == a2)
        {
LABEL_86:
          free(v28);
          CGAccessSessionRelease(i);
          CGDataProviderRelease(v15);
          return (char *)a2;
        }
      }
    }
  }
  return result;
}

uint64_t CGImageGetCachingFlags(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 36);
  }
  return result;
}

uint64_t CGImageGetOrientation(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 38);
  }
  else {
    return 1;
  }
}

double CGImageGetTransformForOrientation@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, CGAffineTransform *a8@<X8>)
{
  if (a1) {
    return CGImageGetTransformForOrientationAndSize(*(unsigned __int8 *)(a1 + 38), a2, a3, a4, a5, a6, a7, (uint64_t)a8, (double)*(unint64_t *)(a1 + 40), (double)*(unint64_t *)(a1 + 48));
  }
  *a8 = CGAffineTransformIdentity;
  return CGAffineTransformIdentity.tx;
}

double CGImageGetTransformForOrientationAndSize@<D0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if ((a1 - 9) <= 0xFFFFFFF7 || a9 == 0.0 || a10 == 0.0)
  {
    CGLog(1, (uint64_t)"%s %s", a2, a3, a4, a5, a6, a7, (char)"CGImageGetTransformForOrientationAndSize");
    *(CGAffineTransform *)a8 = CGAffineTransformIdentity;
    *(CGFloat *)&long long v13 = CGAffineTransformIdentity.tx;
  }
  else
  {
    v16[0] = 0x3FF0000000000000;
    v16[1] = 0;
    void v16[2] = 0;
    v16[3] = 0x3FF0000000000000;
    v16[4] = 0;
    v16[5] = 0;
    v16[6] = 0xBFF0000000000000;
    v16[7] = 0;
    v16[8] = 0;
    v16[9] = 0x3FF0000000000000;
    *(double *)&v16[10] = a9;
    long long v17 = xmmword_1850CDAE0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0xBFF0000000000000;
    double v21 = a9;
    double v22 = a10;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0x3FF0000000000000;
    long long v26 = xmmword_1850CDAF0;
    double v27 = a10;
    long long v28 = xmmword_1850CDAE0;
    long long v29 = xmmword_1850CDAF0;
    double v30 = a10;
    double v31 = a9;
    long long v32 = xmmword_1850CDAE0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v33 = 0x3FF0000000000000;
    double v36 = a9;
    long long v37 = xmmword_1850CD8C0;
    long long v40 = 0u;
    long long v39 = 0u;
    uint64_t v38 = 0x3FF0000000000000;
    uint64_t v41 = 0x3FF0000000000000;
    long long v42 = xmmword_1850CDAF0;
    double v43 = a10;
    uint64_t v44 = 0;
    CFTypeID v11 = (long long *)&v16[6 * (a1 - 1)];
    long long v12 = v11[2];
    long long v14 = *v11;
    long long v13 = v11[1];
    *(_OWORD *)(a8 + 16) = v13;
    *(_OWORD *)(a8 + 32) = v12;
    *(_OWORD *)a8 = v14;
  }
  return *(double *)&v13;
}

double CGImageGetSizeAfterOrientation(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  double result = (double)*(unint64_t *)(a1 + 40);
  if (*(unsigned __int8 *)(a1 + 38) << 16 > 0x40000u) {
    return (double)*(unint64_t *)(a1 + 48);
  }
  return result;
}

uint64_t CGClassifyRectilinearTransform(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)&v6.a = *a1;
  *(_OWORD *)&v6.c = v1;
  *(_OWORD *)&v6.tCGFloat x = a1[2];
  memset(&v7, 0, sizeof(v7));
  CGAffineTransformDecompose(&v7, &v6);
  double v2 = (v7.rotation + v7.rotation) / 3.14159265;
  float v3 = v2;
  float v4 = rintf(v3);
  if (vabdd_f64(v2, v4) <= 1.42108547e-14 && fabs(v7.horizontalShear) <= 1.42108547e-14) {
    return CGClassifyRectilinearTransform_rotations[2 * ((int)v4 & 3) + (v7.scale.width < 0.0)];
  }
  else {
    return 0;
  }
}

const void *CGImageGetColorConversionInfoOptions(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 224)) != 0) {
    return CGPropertiesGetProperty(v1, @"kCGColorConversionInfoOptions");
  }
  else {
    return 0;
  }
}

const void *CGImageGetColorConversionInfoPayload(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 224)) != 0) {
    return CGPropertiesGetProperty(v1, @"kCGColorConversionInfoPayload");
  }
  else {
    return 0;
  }
}

CFStringRef CGImageCreateFileNameForBufferReader(CGImage *a1, char *__s)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!__s) {
    return 0;
  }
  size_t v4 = strlen(__s);
  __strlcpy_chk();
  unsigned int v5 = filename_ends_with_br2_extension(__s);
  if (v5) {
    v34[v4 - 4] = 0;
  }
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(a1);
  if (ColorSpace)
  {
    uint64_t v7 = *((void *)ColorSpace + 3);
    int v8 = *(_DWORD *)(v7 + 20);
    int v9 = *(_DWORD *)(v7 + 28);
  }
  else
  {
    int v8 = 0;
    int v9 = -1;
  }
  CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo(a1);
  if (CGImageGetPixelFormatInfo(a1) == kCGImagePixelFormatRGBCIF10 && CGImageGetMask(a1))
  {
    unsigned int v11 = BitmapInfo & 0xFFFFFFE0;
    Matte = (double *)CGImageGetMatte(a1);
    if (!Matte)
    {
      CGBitmapInfo BitmapInfo = v11 | 9;
      if (a1) {
        goto LABEL_15;
      }
LABEL_20:
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = "ID";
      if (v8)
      {
        int v20 = v8;
      }
      else
      {
        uint64_t v19 = "";
        int v20 = v9;
      }
      goto LABEL_23;
    }
    if (*Matte != 0.0 || Matte[1] != 0.0 || Matte[2] != 0.0) {
      _CGHandleAssert("CGImageCreateFileNameForBufferReader", 4160, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "matte[0] == 0.0 && matte[1] == 0.0 && matte[2] == 0.0", "matte: {%f, %f, %f}", v13, v14, v15, *(void *)Matte);
    }
    CGBitmapInfo BitmapInfo = v11 | 8;
  }
  if (!a1) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v16 = *((void *)a1 + 5);
  uint64_t v17 = *((void *)a1 + 6);
  uint64_t v18 = *((void *)a1 + 9);
  uint64_t v19 = "ID";
  if (v8)
  {
    int v20 = v8;
  }
  else
  {
    uint64_t v19 = "";
    int v20 = v9;
  }
  uint64_t v21 = *((void *)a1 + 7);
LABEL_23:
  int v22 = snprintf(__str, 0x400uLL, "%s_w=%ld,h=%ld,rb=%ld,cs%s=%ld,bpc=%ld,bmi=0x%08X", v34, v16, v17, v18, v19, v20, v21, BitmapInfo);
  if (v22 >= 1025)
  {
    double v30 = "Failed to format string because name is too long";
LABEL_30:
    CGPostError((uint64_t)v30, v23, v24, v25, v26, v27, v28, v29, v32);
    return 0;
  }
  if (v22 < 0)
  {
    double v30 = "snprintf failed";
    goto LABEL_30;
  }
  if (v5) {
    __strlcat_chk();
  }
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], __str, 0x8000100u);
}

const char *filename_ends_with_br2_extension(const char *result)
{
  if (result)
  {
    uint64_t v1 = result;
    size_t v2 = strlen(result);
    if (v2 < 4) {
      return 0;
    }
    else {
      return (const char *)(strcmp(&v1[v2 - 4], ".br2") == 0);
    }
  }
  return result;
}

void CGImageDumpToFile(uint64_t a1, char *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  bzero(__str, 0x401uLL);
  if (!a2) {
    goto LABEL_31;
  }
  CFTypeID v10 = CFGetTypeID((CFTypeRef)a1);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
  }
  if (v10 != CGImageGetTypeID_image_type_id)
  {
LABEL_31:
    CGLog(1, (uint64_t)"%s %s %s", v4, v5, v6, v7, v8, v9, (char)"CGImageDumpToFile");
    return;
  }
  if (*a2 == 42 && a2[1] == 47)
  {
    if (CGGetTempDirPath_predicate != -1) {
      dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_119);
    }
    unsigned int v56 = a2 + 2;
    a2 = __str;
    snprintf(__str, 0x400uLL, "%s%s", &CGGetTempDirPath_tempDirPath, v56);
  }
  if ((uint64_t)strlen(a2) >= 5
    && filename_ends_with_br2_extension(a2)
    && !strstr(a2, "w=")
    && (CFStringRef FileNameForBufferReader = CGImageCreateFileNameForBufferReader((CGImage *)a1, a2)) != 0)
  {
    CFStringRef v43 = FileNameForBufferReader;
    uint64_t v17 = (std::__fs::filesystem::path *)buffer;
    CFStringGetCString(FileNameForBufferReader, buffer, 1024, 0x8000100u);
    CFRelease(v43);
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (!*(void *)(a1 + 208))
  {
    if (*(void *)(a1 + 152))
    {
      double v31 = (char *)malloc_type_calloc(*(void *)(a1 + 72), *(void *)(a1 + 48), 0x113F5BFBuLL);
      if (v31)
      {
        char v32 = v31;
        uint64_t v33 = CGAccessSessionCreate(*(CGDataProvider **)(a1 + 152));
        CGAccessSessionGetBytes(v33, v32, *(void *)(a1 + 48) * *(void *)(a1 + 72), v34, v35, v36, v37, v38);
        CGAccessSessionRelease(v33);
        if (v17) {
          long long v39 = (const char *)v17;
        }
        else {
          long long v39 = a2;
        }
        long long v40 = fopen(v39, "w");
        if (v40)
        {
          uint64_t v41 = v40;
          fwrite(v32, *(void *)(a1 + 48), *(void *)(a1 + 72), v40);
          fclose(v41);
        }
        free(v32);
      }
    }
    goto LABEL_52;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"kCGImageBlockSingletonRequest", (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t v19 = CGImageProviderCopyImageBlockSetWithOptions(*(void *)(a1 + 208), (uint64_t)Mutable);
  if (v19 || (uint64_t v19 = CGImageProviderCopyImageBlockSetWithOptions(*(void *)(a1 + 208), 0)) != 0)
  {
    if (*(void *)(v19 + 120) == 1)
    {
      uint64_t v20 = *(void *)(v19 + 128);
      if (v20)
      {
        uint64_t v21 = v17 ? v17 : (std::__fs::filesystem::path *)a2;
        int v22 = fopen((const char *)v21, "w");
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = *(const void **)v20;
          if (*(void *)v20)
          {
            unint64_t v25 = *(void *)(v20 + 40);
            size_t v26 = (unint64_t)((*(double *)(v20 + 24) * (double)*(unint64_t *)(a1 + 64) + 7.0) * 0.125
                                   + (*(double *)(v20 + 32) + -1.0) * (double)v25);
            size_t v27 = fwrite(v24, 1uLL, v26, v23);
            fclose(v23);
            if (v27 == v26)
            {
              uint64_t v28 = *(void *)(a1 + 72);
              if (v25 != v28)
              {
                long long v59 = 0u;
                long long v60 = 0u;
                *(_OWORD *)float64x2_t __s2 = 0u;
                long long v58 = 0u;
                snprintf(__s2, 0x3FuLL, "rb=%zu", v28);
                if (strstr((char *)v21, __s2))
                {
                  strlen(__s2);
                  __s[0].__pn_.__r_.__value_.__s.__data_[0] = 0;
                  __strncat_chk();
                  snprintf(__s2, 0x3FuLL, "rb=%zu", v25);
                  strlen((const char *)__s);
                  __strncat_chk();
                  strlen((const char *)__s);
                  __strncat_chk();
                  rename(v21, __s, v29);
                  if (!v30) {
                    uint64_t v17 = __s;
                  }
                }
              }
            }
          }
          else
          {
            fclose(v23);
          }
        }
      }
    }
    CGImageBlockSetRelease(v19);
  }
  else
  {
    uint64_t v44 = (__IOSurface *)CGImageProviderCopyIOSurface(*(void *)(a1 + 208));
    if (!v44)
    {
      CFRelease(Mutable);
      goto LABEL_52;
    }
    uint64_t v45 = v44;
    if (IOSurfaceGetPixelFormat(v44) == 1279340600)
    {
      size_t BytesPerRow = IOSurfaceGetBytesPerRow(v45);
      size_t Height = IOSurfaceGetHeight(v45);
      if (!IOSurfaceLock(v45, 1u, 0))
      {
        BaseAddress = IOSurfaceGetBaseAddress(v45);
        if (v17) {
          int v53 = (const char *)v17;
        }
        else {
          int v53 = a2;
        }
        int v54 = open(v53, 1538, 511);
        if (v54 != -1)
        {
          int v55 = v54;
          write(v54, BaseAddress, Height * BytesPerRow);
          close(v55);
        }
        IOSurfaceUnlock(v45, 1u, 0);
      }
    }
    CFRelease(v45);
  }
  CFRelease(Mutable);
LABEL_52:
  CGLog(1, (uint64_t)"%s %s %s", v11, v12, v13, v14, v15, v16, (char)"CGImageDumpToFile");
  if (CGImageGetPixelFormatInfo((CGImageRef)a1) == kCGImagePixelFormatRGBCIF10)
  {
    if (CGImageGetMask((void *)a1))
    {
      Mask = (CGImage *)CGImageGetMask((void *)a1);
      BOOL v49 = strstr((char *)v17, "w=");
      if (v49)
      {
        snprintf(v49, buffer - v49 + 1024, "(alpha).br2");
        CFStringRef v50 = CGImageCreateFileNameForBufferReader(Mask, (char *)v17);
        if (v50)
        {
          CFStringRef v51 = v50;
          CFStringGetCString(v50, buffer, 1024, 0x8000100u);
          CFRelease(v51);
          CGImageDumpToFile(Mask, buffer);
        }
      }
    }
  }
}

uint64_t CGImageWriteToFile(const void *a1, char *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  memset(__dst, 0, 7);
  bzero(__str, 0x401uLL);
  uint64_t v4 = 0;
  if (a1 && a2)
  {
    CFTypeID v5 = CFGetTypeID(a1);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
    }
    if (v5 == CGImageGetTypeID_image_type_id)
    {
      if (*a2 == 42 && a2[1] == 47)
      {
        if (CGGetTempDirPath_predicate != -1) {
          dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_119);
        }
        uint64_t v28 = a2 + 2;
        a2 = __str;
        snprintf(__str, 0x400uLL, "%s%s", &CGGetTempDirPath_tempDirPath, v28);
      }
      uint64_t v6 = strrchr(a2, 46);
      if (v6)
      {
        uint64_t v7 = v6;
        size_t v8 = strlen(v6);
        if (v8 <= 5)
        {
          unint64_t v9 = v8;
          strncpy(__dst, v7, 6uLL);
          if (v9 >= 2)
          {
            unint64_t v10 = v9 - 1;
            uint64_t v11 = &__dst[1];
            do
            {
              *uint64_t v11 = __tolower(*v11);
              ++v11;
              --v10;
            }
            while (v10);
          }
        }
      }
      if (!(*(_DWORD *)__dst ^ 0x6669742E | __dst[4])
        || (*(_DWORD *)__dst == 1718187054 ? (BOOL v12 = *(unsigned __int16 *)&__dst[4] == 102) : (BOOL v12 = 0), v12))
      {
        uint64_t v16 = @"public.tiff";
      }
      else if (!(*(_DWORD *)__dst ^ 0x67706A2E | __dst[4]) {
             || (*(_DWORD *)__dst == 1701866030 ? (BOOL v13 = *(unsigned __int16 *)&__dst[4] == 103) : (BOOL v13 = 0), v13))
      }
      {
        uint64_t v16 = @"public.jpeg";
      }
      else
      {
        if (*(_DWORD *)__dst ^ 0x676E702E | __dst[4])
        {
          if (*(_DWORD *)__dst ^ 0x6664702E | __dst[4])
          {
            char v32 = 0;
            int v31 = 0;
            strncpy(__s, a2, 0x3FCuLL);
            strcat(__s, ".pdf");
            uint64_t v14 = __s;
            uint64_t v15 = (uint64_t)a1;
          }
          else
          {
            uint64_t v15 = (uint64_t)a1;
            uint64_t v14 = a2;
          }
          if (write_to_pdf_context(v15, v14))
          {
LABEL_48:
            uint64_t v4 = 1;
LABEL_49:
            CGLog(1, (uint64_t)"%s %s %s", v18, v19, v20, v21, v22, v23, (char)"CGImageWriteToFile");
            return v4;
          }
LABEL_43:
          uint64_t v4 = 0;
          goto LABEL_49;
        }
        uint64_t v16 = @"public.png";
      }
      size_t v17 = strlen(a2);
      uint64_t v4 = (uint64_t)CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)a2, v17, 0);
      if (!v4) {
        goto LABEL_49;
      }
      if (CGImageWriteToFile_predicate != -1) {
        dispatch_once(&CGImageWriteToFile_predicate, &__block_literal_global_244_5316);
      }
      uint64_t v24 = CGImageWriteToFile_f(v4, v16, 1, 0);
      if (v24)
      {
        unint64_t v25 = (const void *)v24;
        if (CGImageWriteToFile_predicate_247 != -1) {
          dispatch_once(&CGImageWriteToFile_predicate_247, &__block_literal_global_250);
        }
        CGImageWriteToFile_f_246(v25, a1, 0);
        if (CGImageWriteToFile_predicate_252 != -1) {
          dispatch_once(&CGImageWriteToFile_predicate_252, &__block_literal_global_255_5317);
        }
        int v26 = CGImageWriteToFile_f_251(v25);
        CFRelease(v25);
        CFRelease((CFTypeRef)v4);
        if (v26) {
          goto LABEL_48;
        }
      }
      else
      {
        CFRelease((CFTypeRef)v4);
      }
      goto LABEL_43;
    }
    return 0;
  }
  return v4;
}

BOOL write_to_pdf_context(uint64_t a1, char *cStr)
{
  CGSize v3 = (CGSize)vcvtq_f64_u64(*(uint64x2_t *)(a1 + 40));
  v7.origin.CGFloat x = 0.0;
  v7.origin.CGFloat y = 0.0;
  v7.std::string::size_type size = v3;
  uint64_t v4 = CGPDFContextCreateWithFilename(cStr, &v7, 0);
  CFTypeID v5 = v4;
  if (v4)
  {
    CGContextBeginPage(v4, 0);
    CGContextDrawImage(v5, v7, (CGImageRef)a1);
    CGContextEndPage(v5);
    CFRelease(v5);
  }
  return v5 != 0;
}

void *__CGImageWriteToFile_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationAddImage");
  }
  double result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationAddImage");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationAddImage");
  }
  CGImageWriteToFile_f_246 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CGImageWriteToFile_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationCreateWithURL");
  }
  double result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationCreateWithURL");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationCreateWithURL");
  }
  CGImageWriteToFile_f = (uint64_t (*)(void, void, void, void))result;
  return result;
}

__CFData *CGImageCreateMaskFromAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = (__CFData *)a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 39) & 4) != 0)
    {
      if (*(void *)(a1 + 56) == 8 && *(void *)(a1 + 64) == 32)
      {
        if (*(void *)(a1 + 152) || CGImageGetDataProviderInternal((char *)a1, 0))
        {
          if ((*((_DWORD *)v8 + 8) & 0x7000) == 0x2000)
          {
            uint64_t v9 = (CGDataProvider *)*((void *)v8 + 19);
            int v10 = 4;
          }
          else
          {
            if ((*((_DWORD *)v8 + 8) & 0x7000) != 0x1000)
            {
              uint64_t v11 = (CGDataProvider *)*((void *)v8 + 19);
              CGDataProviderRetain(v11);
              goto LABEL_15;
            }
            uint64_t v9 = (CGDataProvider *)*((void *)v8 + 19);
            int v10 = 2;
          }
          uint64_t v11 = CGDataProviderCreateWithSwappedProvider(v9, v10);
LABEL_15:
          long long v13 = xmmword_185293280;
          size_t v8 = mask_create(*((void *)v8 + 5), *((void *)v8 + 6), *((void *)v8 + 7), *((void *)v8 + 8), *((void *)v8 + 9), v11, (double *)&v13, 0, *((_DWORD *)v8 + 8) & 0x1F);
          CGDataProviderRelease(v11);
          return v8;
        }
      }
      else
      {
        CGPostError((uint64_t)"%s: Unsupported bitsPerComponent (%zu, must be 8) or bitsPerPixel (%zu, must be 32)", a2, a3, a4, a5, a6, a7, a8, (char)"CGImageCreateMaskFromAlpha");
      }
    }
    return 0;
  }
  return v8;
}

BOOL CGImageShouldToneMap(CGImage *a1)
{
  return CGImageGetHeadroomInfo(a1, 0) > 1.0;
}

BOOL CGImageContainsImageSpecificToneMappingMetadata(CGImage *a1)
{
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(a1);

  return CGColorSpaceContainsFlexGTCInfo((BOOL)ColorSpace);
}

uint64_t CGImageGetEDRHeadroomDefault()
{
  if (CGImageGetEDRHeadroomDefault_predicate != -1) {
    dispatch_once(&CGImageGetEDRHeadroomDefault_predicate, &__block_literal_global_265);
  }
  return CGImageGetEDRHeadroomDefault_default_headroom;
}

CFNumberRef __CGImageGetEDRHeadroomDefault_block_invoke()
{
  int valuePtr = 1084072622;
  CFNumberRef result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CGImageGetEDRHeadroomDefault_default_headrooCGAffineTransform m = (uint64_t)result;
  return result;
}

uint64_t CGImageDefaultReferenceWhite()
{
  if (CGImageDefaultReferenceWhite_once != -1) {
    dispatch_once(&CGImageDefaultReferenceWhite_once, &__block_literal_global_268);
  }
  return CGImageDefaultReferenceWhite_media_white;
}

CFNumberRef __CGImageDefaultReferenceWhite_block_invoke()
{
  int valuePtr = 1128988672;
  CFNumberRef result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CGImageDefaultReferenceWhite_media_white = (uint64_t)result;
  return result;
}

uint64_t CGImageGetDecodeType(CGImage *a1)
{
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(a1);
  CGSize v3 = ColorSpace;
  if (ColorSpace) {
    uint64_t v4 = *(void *)(*((void *)ColorSpace + 3) + 48);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = (uint64_t)CGImageGetDecode(a1);
  if (!result) {
    return result;
  }
  uint64_t v6 = (double *)result;
  if ((unint64_t)(v4 - 3) >= 2)
  {
    if (v4 == 1)
    {
      if (CGColorSpaceGetType(v3) == 7)
      {
        if (v3 && (uint64_t v9 = v3[3], *(_DWORD *)(v9 + 28) == 5)) {
          double v10 = (double)*(unint64_t *)(*(void *)(v9 + 96) + 8);
        }
        else {
          double v10 = 1.84467441e19;
        }
        if (*v6 == 0.0 && v6[1] == v10) {
          return 0;
        }
        if (*v6 == v10)
        {
LABEL_31:
          if (v6[1] == 0.0) {
            return 1;
          }
        }
      }
      else
      {
        if (*v6 == 0.0 && v6[1] == 1.0) {
          return 0;
        }
        if (*v6 == 1.0) {
          goto LABEL_31;
        }
      }
    }
    return 2;
  }
  unint64_t v7 = 0;
  uint64_t result = 2;
  do
  {
    double v8 = v6[v7];
    if (v8 == 0.0 && v6[v7 + 1] == 1.0)
    {
      if (result == 1) {
        return 2;
      }
      uint64_t result = 0;
    }
    else if (v8 == 1.0 && v6[v7 + 1] == 0.0)
    {
      if (!result) {
        return 2;
      }
      uint64_t result = 1;
    }
    v7 += 2;
  }
  while (v7 < 2 * v4 - 1);
  return result;
}

uint64_t Wf_sample_W8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v86 = *(void *)(result + 80);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v12 = *(void *)(result + 144) - 1;
  if (v5) {
    int v13 = 0;
  }
  else {
    int v13 = -16777216;
  }
  int v14 = *(_DWORD *)(result + 260) - 1;
  uint64_t v15 = *(unsigned int *)(result + 256);
  uint64_t v16 = (unsigned __int8 *)(v5 + (v15 - 1) + (v14 * v7));
  unint64_t v17 = v4 + v15 + (v14 * v6) - 1;
  uint64_t v87 = *(void *)(result + 64);
  int v85 = *(_DWORD *)(result + 188);
  uint64_t v89 = *(void *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v89)
      {
        if (a3 <= v88)
        {
          uint64_t v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          unsigned int v27 = 0x3FFFFFFF;
          uint64_t v28 = a3;
          uint64_t v29 = v87;
        }
        else
        {
          uint64_t v22 = *(void *)(result + 216);
          uint64_t v23 = *(void *)(result + 224) + v88;
          uint64_t v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1) {
            goto LABEL_43;
          }
          if (v24 >= v22) {
            LODWORD(v25) = 0x3FFFFFFF;
          }
          else {
            unint64_t v25 = (unint64_t)(*(void *)(result + 232) * v24) >> 32;
          }
          uint64_t v29 = v87;
          unsigned int v27 = v25 | v85;
          uint64_t v28 = v23 - 0x1000000;
          uint64_t v26 = 448;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = v89 - *(void *)(result + 224);
        uint64_t v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_43;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        uint64_t v29 = v87;
        unsigned int v27 = v21 | v85;
        uint64_t v28 = v19 + 0x1000000;
        uint64_t v26 = 512;
      }
      if (a2 >= v29) {
        break;
      }
      uint64_t v30 = *(void *)(result + 192);
      uint64_t v31 = v29 - *(void *)(result + 200);
      uint64_t v32 = a2 - v31 + (v30 >> 1);
      if (v32 >= 1)
      {
        if (v32 < v30) {
          unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v85;
        }
        uint64_t v33 = v31 + 0x1000000;
        uint64_t v34 = 32;
        goto LABEL_29;
      }
LABEL_43:
      --a4;
      a2 += v10;
      a3 += v9;
      v11 += 8;
      *(unsigned char *)++uint64_t v12 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v86)
    {
      uint64_t v34 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v33 = a2;
      goto LABEL_29;
    }
    uint64_t v35 = *(void *)(result + 192);
    uint64_t v36 = *(void *)(result + 200) + v86;
    uint64_t v37 = v36 - a2 + (v35 >> 1);
    if (v37 < 1) {
      goto LABEL_43;
    }
    if (v37 < v35) {
      unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v37) >> 32) >> 15)) | v85;
    }
    uint64_t v33 = v36 - 0x1000000;
    uint64_t v34 = 28;
LABEL_29:
    if (v27 < 0x400000) {
      goto LABEL_43;
    }
    uint64_t v38 = v28 >> 32;
    unint64_t v39 = v4 + (int)v38 * (uint64_t)v6 + (v33 >> 32);
    long long v40 = *(unsigned __int8 **)(result + 32);
    if (v17 >= v39) {
      uint64_t v41 = (unsigned __int8 *)(v4 + (int)v38 * (uint64_t)v6 + (v33 >> 32));
    }
    else {
      uint64_t v41 = (unsigned __int8 *)v17;
    }
    if (v41 < v40) {
      uint64_t v41 = *(unsigned __int8 **)(result + 32);
    }
    unsigned int v42 = *v41;
    if (v5)
    {
      unint64_t v43 = v5 + (int)v38 * (uint64_t)v7 + (v33 >> 32);
      uint64_t v44 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v16 >= v43) {
        uint64_t v45 = (unsigned __int8 *)v43;
      }
      else {
        uint64_t v45 = v16;
      }
      if (v45 >= v44) {
        uint64_t v44 = v45;
      }
      v42 |= *v44 << 24;
      if (!v8) {
        goto LABEL_103;
      }
    }
    else
    {
      unint64_t v43 = 0;
      if (!v8) {
        goto LABEL_103;
      }
    }
    unsigned int v46 = *(_DWORD *)(v8 + (v34 | v26));
LABEL_48:
    int v47 = v46 & 0xF;
    switch(v47)
    {
      case 1:
        uint64_t v67 = (unsigned __int8 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
        if (v17 < (unint64_t)v67) {
          uint64_t v67 = (unsigned __int8 *)v17;
        }
        if (v67 < v40) {
          uint64_t v67 = v40;
        }
        unsigned int v68 = *v67;
        if (v5)
        {
          uint64_t v69 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
          if (v16 < v69) {
            uint64_t v69 = v16;
          }
          if ((unint64_t)v69 < *(void *)(result + 40)) {
            uint64_t v69 = *(unsigned __int8 **)(result + 40);
          }
          v68 |= *v69 << 24;
        }
        unsigned int v42 = v42
            - ((interpolate_8888_21358[HIBYTE(v46) & 3] & v42) >> ((HIBYTE(v46) & 3) + 1))
            + ((interpolate_8888_21358[HIBYTE(v46) & 3] & v68) >> ((HIBYTE(v46) & 3) + 1));
        break;
      case 2:
        uint64_t v70 = (unsigned __int8 *)(v39 + SBYTE2(v46));
        if (v17 < (unint64_t)v70) {
          uint64_t v70 = (unsigned __int8 *)v17;
        }
        if (v70 < v40) {
          uint64_t v70 = v40;
        }
        int v71 = *v70;
        if (v5)
        {
          uint64_t v72 = (unsigned __int8 *)(v43 + SBYTE2(v46));
          if (v16 < v72) {
            uint64_t v72 = v16;
          }
          if ((unint64_t)v72 < *(void *)(result + 40)) {
            uint64_t v72 = *(unsigned __int8 **)(result + 40);
          }
          v71 |= *v72 << 24;
        }
        int v73 = (v46 >> 28) & 3;
        int v74 = interpolate_8888_21358[v73];
        char v64 = v73 + 1;
        unsigned int v65 = v42 - ((v74 & v42) >> v64);
        unsigned int v66 = v74 & v71;
        goto LABEL_102;
      case 3:
        int v83 = HIBYTE(v46) & 3;
        unint64_t v48 = (unsigned __int8 *)(v39 + SBYTE2(v46));
        if (v17 < (unint64_t)v48) {
          unint64_t v48 = (unsigned __int8 *)v17;
        }
        if (v48 < v40) {
          unint64_t v48 = v40;
        }
        unsigned int v49 = *v48;
        CFStringRef v50 = (unsigned __int8 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
        if (v17 >= (unint64_t)v50) {
          CFStringRef v51 = v50;
        }
        else {
          CFStringRef v51 = (unsigned __int8 *)v17;
        }
        if (v51 < v40) {
          CFStringRef v51 = v40;
        }
        unsigned int v84 = *v51;
        unsigned int v52 = &v50[SBYTE2(v46)];
        if (v17 < (unint64_t)v52) {
          unsigned int v52 = (unsigned __int8 *)v17;
        }
        if (v52 < v40) {
          unsigned int v52 = v40;
        }
        unsigned int v53 = *v52;
        if (v5)
        {
          int v54 = (unsigned __int8 *)(v43 + SBYTE2(v46));
          int v55 = *(unsigned __int8 **)(result + 40);
          if (v16 < v54) {
            int v54 = v16;
          }
          if (v54 < v55) {
            int v54 = *(unsigned __int8 **)(result + 40);
          }
          v49 |= *v54 << 24;
          unint64_t v56 = v43 + SBYTE1(v46) * (uint64_t)v7;
          if ((unint64_t)v16 >= v56) {
            unint64_t v57 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
          }
          else {
            unint64_t v57 = v16;
          }
          if (v57 < v55) {
            unint64_t v57 = *(unsigned __int8 **)(result + 40);
          }
          v84 |= *v57 << 24;
          long long v58 = (unsigned __int8 *)(v56 + SBYTE2(v46));
          if (v16 < v58) {
            long long v58 = v16;
          }
          if (v58 >= v55) {
            int v55 = v58;
          }
          v53 |= *v55 << 24;
        }
        int v59 = interpolate_8888_21358[v83];
        unsigned int v60 = v42 - ((v59 & v42) >> (v83 + 1)) + ((v59 & v84) >> (v83 + 1));
        unsigned int v61 = v49 - ((v59 & v49) >> (v83 + 1)) + ((v59 & v53) >> (v83 + 1));
        int v62 = (v46 >> 28) & 3;
        int v63 = interpolate_8888_21358[v62];
        char v64 = v62 + 1;
        unsigned int v65 = v60 - ((v60 & v63) >> v64);
        unsigned int v66 = v61 & v63;
LABEL_102:
        unsigned int v42 = v65 + (v66 >> v64);
        break;
    }
LABEL_103:
    *(_DWORD *)(v11 + 8) = _blt_float[v42];
    *(_DWORD *)(v11 + 12) = _blt_float[(v42 | v13) >> 24];
    *(unsigned char *)(v12 + 1) = v27 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v75 = 0;
    uint64_t v76 = (_DWORD *)(v11 + 20);
    a2 += v10;
    uint64_t v77 = v86 - a2;
    a3 += v9;
    uint64_t v78 = v88 - a3;
    while ((((a2 - v87) | v77 | (a3 - v89) | v78) & 0x8000000000000000) == 0)
    {
      unint64_t v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + (a2 >> 32);
      long long v40 = *(unsigned __int8 **)(result + 32);
      if (v17 >= v39) {
        uint64_t v79 = (unsigned __int8 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + (a2 >> 32));
      }
      else {
        uint64_t v79 = (unsigned __int8 *)v17;
      }
      if (v79 < v40) {
        uint64_t v79 = *(unsigned __int8 **)(result + 32);
      }
      unsigned int v42 = *v79;
      if (v5)
      {
        unint64_t v43 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
        float v80 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v16 >= v43) {
          unint64_t v81 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
        }
        else {
          unint64_t v81 = (unint64_t)v16;
        }
        if (v81 >= (unint64_t)v80) {
          float v80 = (unsigned __int8 *)v81;
        }
        v42 |= *v80 << 24;
      }
      if (v8)
      {
        unsigned int v46 = *(_DWORD *)(v8 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        if ((v46 & 0xF) != 0)
        {
          v12 += v75 + 1;
          uint64_t v11 = (uint64_t)(v76 - 3);
          a4 += ~v75;
          unsigned int v27 = -1;
          goto LABEL_48;
        }
      }
      *(v76 - 1) = _blt_float[v42];
      *uint64_t v76 = _blt_float[(v42 | v13) >> 24];
      v76 += 2;
      uint64_t v82 = v12 + v75++;
      a2 += v10;
      *(unsigned char *)(v82 + 2) = -1;
      v77 -= v10;
      a3 += v9;
      v78 -= v9;
      if (a4 - 1 == v75) {
        return result;
      }
    }
    v12 += v75 + 1;
    uint64_t v11 = (uint64_t)(v76 - 3);
    a4 += ~v75;
  }
  while (a4);
  return result;
}