void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __destroy_helper_block_ea8_40c21_ZTSN8dispatch5queueE(uint64_t a1)
{
  v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t MCC::getIntValue(MCC *this)
{
  return this->var0;
}

void __copy_helper_block_ea8_40c21_ZTSN8dispatch5queueE(uint64_t a1, uint64_t a2)
{
  v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

uint64_t MCC::operator=(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  return a1;
}

void sub_18444C1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444C35C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444C458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444C528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444C5F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444C7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18444CA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18444CC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_18444CD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444CEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18444CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }

  _Unwind_Resume(a1);
}

void sub_18444D0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444D1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444D278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTSubscriptionSlotAsUUID(char a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, 15);
  v3[15] = a1;
  v1 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:v3];

  return v1;
}

void sub_18444D678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18444D8B4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18444D978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18444DB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444DCEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_18444DE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444E0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::sCopyInvocationShallow(_anonymous_namespace_ *this, NSInvocation *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  v2 = this;
  v3 = (void *)[(_anonymous_namespace_ *)v2 copy];
  uint64_t v4 = [(_anonymous_namespace_ *)v2 methodSignature];
  uint64_t v5 = [v4 numberOfArguments];
  uint64_t v6 = [v4 frameLength];
  if (v5)
  {
    size_t v7 = v6;
    for (uint64_t i = 0; i != v5; ++i)
    {
      MEMORY[0x1F4188790]();
      bzero((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      [(_anonymous_namespace_ *)v2 getArgument:(char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) atIndex:i];
      [v3 setArgument:(char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) atIndex:i];
    }
  }

  return v3;
}

void sub_18444E264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444E2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientMux sink:handleNotification:]::$_2>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<objc_selector *,objc_selector *>::map[abi:nn180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__emplace_hint_unique_key_args<objc_selector *,std::pair<objc_selector * const,objc_selector *> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_18444E354(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__emplace_hint_unique_key_args<objc_selector *,std::pair<objc_selector * const,objc_selector *> const&>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = (void **)std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__find_equal<objc_selector *>(a1, a2, &v11, &v10, a3);
  size_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    size_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__find_equal<objc_selector *>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_18444EB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, id *a16, uint64_t a17, uint64_t a18, dispatch_object_t object, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  *(void *)(v28 - 96) = &a25;
  std::vector<Protocol * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)(v28 - 96));

  a25 = &a22;
  std::vector<Protocol * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&a25);

  objc_destroyWeak(a16);
  if (object) {
    dispatch_release(object);
  }

  std::unique_ptr<-[CoreTelephonyClientMux addDelegate:queue:]::$_0>::~unique_ptr[abi:nn180100](&a18);
  _Unwind_Resume(a1);
}

id std::vector<Protocol * {__strong}>::push_back[abi:nn180100](char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      BOOL v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v4, v13);
    }
    else {
      BOOL v14 = 0;
    }
    unint64_t v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    uint64_t v24 = v16;
    *(void *)unint64_t v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    unint64_t v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    uint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)std::__split_buffer<Protocol * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)unint64_t v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<Protocol * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<Protocol * {__strong}>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            char *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_18444F584(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 88));

  _Unwind_Resume(a1);
}

void sub_18444F870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444FA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CTLogClient()
{
  if (CTLogClient_once != -1) {
    dispatch_once(&CTLogClient_once, &__block_literal_global_16);
  }
  return CTLogClient_logger;
}

uint64_t isFrameworkLoggingSupported()
{
  if (isFrameworkLoggingSupported_once != -1) {
    dispatch_once(&isFrameworkLoggingSupported_once, &__block_literal_global_1);
  }
  return isFrameworkLoggingSupported_supported;
}

void sub_18444FC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18444FCA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8dispatch9sync_implIZ54__CoreTelephonyClientMux_proxyWithQueue_errorHandler__E3__3EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  objc_msgSend(**(id **)v1, "_setReconnectError_sync:", 0);
  objc_msgSend(**(id **)v1, "_ensureConnectionSetup_sync");
  v2 = [CoreTelephonyClientRemoteAsyncProxy alloc];
  uint64_t v3 = *(void *)(**(void **)v1 + 72);
  uint64_t v4 = **(NSObject ***)(v1 + 16);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = [(CoreTelephonyClientRemoteAsyncProxy *)v2 initWithXPCObject:v3 userQueue:&object errorHandler:**(void **)(v1 + 24)];
  int v6 = *(void ***)(v1 + 8);
  uint64_t v7 = *v6;
  *int v6 = (void *)v5;

  if (object) {
    dispatch_release(object);
  }
}

void sub_18444FD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8dispatch9sync_implIZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__E3__4EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  objc_msgSend(*(id *)v1, "_setReconnectError_sync:", 0);
  v2 = (void *)MEMORY[0x18531FC50](objc_msgSend(*(id *)v1, "_ensureConnectionSetup_sync"));
  uint64_t v3 = *(void **)(*(void *)v1 + 72);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__ENK3__4clEv_block_invoke;
  v7[3] = &unk_1E5260CB8;
  id v8 = *(id *)(v1 + 16);
  uint64_t v4 = [v3 synchronousRemoteObjectProxyWithErrorHandler:v7];
  uint64_t v5 = *(void ***)(v1 + 8);
  int v6 = *v5;
  *uint64_t v5 = (void *)v4;
}

void sub_18444FE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18444FFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  _Unwind_Resume(a1);
}

void sub_1844500A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844501CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  _Unwind_Resume(a1);
}

void sub_1844503CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844505A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844510F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184451318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844513A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184451438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844514C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844515A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184451964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object, xpc_object_t a14)
{
}

const char *CTSubscriptionSlotAsString(uint64_t a1)
{
  uint64_t v1 = "CTSubscriptionSlotUnknown";
  if (a1 == 2) {
    uint64_t v1 = "CTSubscriptionSlotTwo";
  }
  if (a1 == 1) {
    return "CTSubscriptionSlotOne";
  }
  else {
    return v1;
  }
}

uint64_t CTLogMessageCenter()
{
  if (CTLogMessageCenter_once != -1) {
    dispatch_once(&CTLogMessageCenter_once, &__block_literal_global_28);
  }
  return CTLogMessageCenter_logger;
}

void sub_184451CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184451DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184451E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184451F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18445206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18445217C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184452278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184452388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18445241C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184452644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844529BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184452AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184452B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTStewieServiceStatusReasonAsString(unint64_t a1)
{
  if (a1 > 0xB) {
    return "???";
  }
  else {
    return off_1E52634E8[a1];
  }
}

void sub_1844535F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18445368C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSNumber>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    uint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184453958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184453AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184453E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSString>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    uint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184453F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *indicatorToString(unsigned int a1)
{
  if (a1 > 0x13) {
    return "unknown";
  }
  else {
    return off_1E52632C0[a1];
  }
}

const char *dataModeToString(int a1)
{
  if ((a1 + 2) > 0x14) {
    return "Unknown";
  }
  else {
    return off_1E5263360[a1 + 2];
  }
}

void sub_184454EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void MCC::MCC(MCC *this, const MCC *a2)
{
  this->var0 = a2->var0;
  p_var1 = (std::string *)&this->var1;
  if (*((char *)&a2->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(p_var1, a2->var1.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    long long v3 = *(_OWORD *)a2->var1.var0.var0.var0.var0.var0;
    p_var1->__r_.__value_.__r.__words[2] = *((void *)&a2->var1.var0.var0.var0.var1 + 2);
    *(_OWORD *)&p_var1->__r_.__value_.__l.__data_ = v3;
  }
}

{
  std::string *p_var1;
  long long v3;

  this->var0 = a2->var0;
  p_var1 = (std::string *)&this->var1;
  if (*((char *)&a2->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(p_var1, a2->var1.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    long long v3 = *(_OWORD *)a2->var1.var0.var0.var0.var0.var0;
    p_var1->__r_.__value_.__r.__words[2] = *((void *)&a2->var1.var0.var0.var0.var1 + 2);
    *(_OWORD *)&p_var1->__r_.__value_.__l.__data_ = v3;
  }
}

void MCC::MCC(MCC *this)
{
  this->var0 = -1;
  *(_OWORD *)&this->var1.var0.var0.var0.var1.var1 = 0uLL;
  this->var1.var0.var0.var0.var1.var0 = 0;
}

{
  this->var0 = -1;
  *(_OWORD *)&this->var1.var0.var0.var0.var1.var1 = 0uLL;
  this->var1.var0.var0.var0.var1.var0 = 0;
}

void MNC::MNC(MNC *this)
{
  *(_WORD *)this = -1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
}

{
  *(_WORD *)this = -1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
}

BOOL MNC::isThreeDigit(MNC *this)
{
  if (*((char *)this + 31) < 0) {
    uint64_t v1 = *((void *)this + 2);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 31);
  }
  return v1 == 3;
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *this)
{
}

{
  CSIPhoneNumber::CSIPhoneNumber(this, "");
}

void __destroy_helper_block_8_32c74_ZTSN8dispatch5blockIU13block_pointerFvPK10__CFStringPK14__CFDictionaryEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void *_CTServerConnectionCreate(uint64_t a1, uint64_t a2, void *a3)
{
  return _CTServerConnectionCreateWithIdentifier(a1, 0, a2, a3);
}

void __isFrameworkLoggingSupported_block_invoke()
{
  isFrameworkLoggingSupported_supported = 1;
}

void __destroy_helper_block_8_40c21_ZTSN8dispatch5queueE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

void ___ZZ44__CoreTelephonyClientMux_addDelegate_queue__ENK3__0clEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (isFrameworkLoggingSupported())
    {
      long long v3 = CTLogClient();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        ___ZZ44__CoreTelephonyClientMux_addDelegate_queue__ENK3__0clEv_block_invoke_cold_1();
      }
    }
  }
}

void sub_184455914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_8_48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

void sub_184455A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_8_32c74_ZTSN8dispatch5blockIU13block_pointerFvPK10__CFStringPK14__CFDictionaryEEE(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a2 + 32);
  if (result) {
    id result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __copy_helper_block_8_40c21_ZTSN8dispatch5queueE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

uint64_t MCCAndMNC::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t result = MCC::operator==(a1, a2);
  if (result)
  {
    return MCC::operator==(a1 + 16, a2 + 16);
  }
  return result;
}

uint64_t MCC::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return MCC::operator==(a1, a2) ^ 1;
}

uint64_t MCC::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = *((unsigned __int8 *)a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)a1 + 31);
  }
  else {
    uint64_t v3 = *((void *)a1 + 2);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 2);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = (const void **)(a1 + 4);
  v9 = (unsigned __int8 *)*((void *)a2 + 1);
  id v7 = (unsigned __int8 *)(a2 + 4);
  id v8 = v9;
  if (v5 < 0) {
    id v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *((void *)a1 + 2)) == 0;
  }
  if (!*((unsigned char *)a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    uint64_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

void sub_184455D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  id v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        id v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        id v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

xpc_object_t __copy_helper_block_8_48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3)
  {
    return xpc_retain(v3);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *(void *)(a1 + 48) = result;
  }
  return result;
}

os_log_t __CTLogClient_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "Client");
  CTLogClient_logger = (uint64_t)result;
  return result;
}

void ___ZL26_CTServerConnectionDestroyPKv_block_invoke(uint64_t a1)
{
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 32);

  xpc_release(v2);
}

void sub_184456058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184456134(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184456200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844562DC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844563A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184456484(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184456550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18445662C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184456848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184456980(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184456A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184456B40(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184456C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184456CE8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184456EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void MCC::getStringValue(MCC *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, this->var1.var0.var0.var0.var1.var0, this->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this->var1.var0.var0.var0.var0.var0;
    a2->__r_.__value_.__r.__words[2] = *((void *)&this->var1.var0.var0.var0.var1 + 2);
  }
}

void ___ZZ41__CoreTelephonyClientMux_removeDelegate__ENK3__1clEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (isFrameworkLoggingSupported())
    {
      uint64_t v3 = CTLogClient();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        ___ZZ41__CoreTelephonyClientMux_removeDelegate__ENK3__1clEv_block_invoke_cold_1();
      }
    }
  }
}

void sub_18445706C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZZ41__CoreTelephonyClientMux_removeDelegate__ENK3__1clEv_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_2_2(&dword_18444A000, v0, v1, "Updating selectors after delegate removal failed with: %@", v2, v3, v4, v5, v6);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_2_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2_3(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2080;
  *(void *)(a2 + 14) = result;
  return result;
}

void OUTLINED_FUNCTION_2_4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, 0, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_184457368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionCopyISOForMCC(uint64_t a1, ctu *a2, void *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v7 = xdict;
    xpc_object_t v18 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v8);
    xpc_dictionary_set_value(v7, "kRegistrationISOForMCC", value);
    xpc_object_t v9 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v9);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v18, &xdict);
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kRegistrationISOForMCC"))
    {
      uint64_t v15 = 0;
      object[0] = &xdict;
      object[1] = "kRegistrationISOForMCC";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v13);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v13, v10);
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v15, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v13);
      *a3 = v15;
    }
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v3;
}

void *ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2 && (CFTypeID v4 = CFGetTypeID(*a2), v4 == CFStringGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

{
  CFTypeRef v4;
  CFTypeID v5;

  CFTypeID v4 = *a2;
  if (*a2 && (uint64_t v5 = CFGetTypeID(*a2), v5 == CFStringGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2) {
      CFRelease(*a2);
    }
  }
  return a1;
}

uint64_t _CTServerConnectionGetCarrierEntitlements(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetEntitlements", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementResults"))
    {
      uint64_t v10 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierEntitlementResults";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

void sub_1844578D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
  xpc_release(object);
  xpc_release(a12);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

unint64_t anonymous namespace'::GetRadioModuleProperty<unsigned char>(uint64_t a1, const char *a2, unsigned char *a3)
{
  unsigned int v3 = 1;
  LODWORD(v4) = 22;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", &object, "kRequest", &v17);
    xpc_release(object);
    xpc_object_t v8 = v17;
    xpc_object_t v18 = v17;
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v17);
    xpc_object_t v9 = xpc_int64_create(*a3);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, a2, v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v17 = xpc_null_create();
    unint64_t v11 = SendXpcMessage(a1, &v18, &v17);
    unsigned int v3 = v11;
    unint64_t v4 = HIDWORD(v11);
    *a3 = 0;
    if (MEMORY[0x1853203E0](v17) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v17;
      uint64_t v15 = "kRadioModuleValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
      int v12 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
      xpc_release(v16);
      if (v12)
      {
        xpc_object_t object = &v17;
        uint64_t v15 = a2;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
        xpc_release(v16);
      }
      else
      {
        unsigned int v3 = 1;
        LODWORD(v4) = 45;
      }
    }
    xpc_release(v17);
    xpc_release(v18);
  }
  return v3 | ((unint64_t)v4 << 32);
}

unint64_t _CTServerConnectionCopyDualSimCapability(uint64_t a1, CFNumberRef *a2)
{
  unint64_t v2 = 0x1600000000;
  unsigned int v3 = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetDualSimCapability", object, "kRequest", &v10);
    xpc_release(object[0]);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t v10 = xpc_null_create();
    unint64_t v6 = SendXpcMessage(a1, &v11, &v10);
    if (HIDWORD(v6))
    {
      unsigned int v3 = v6;
      unint64_t v2 = v6 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      object[0] = &v10;
      object[1] = "kSubscriberDualSimCapabilityKey";
      xpc_object_t v9 = 0;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      if (MEMORY[0x1853203E0](v9) == MEMORY[0x1E4F145D8])
      {
        unint64_t v2 = 0x2300000000;
        unsigned int v3 = 1;
      }
      else
      {
        LODWORD(object[0]) = xpc::dyn_cast_or_default((xpc *)&v9, (const object *)4);
        unsigned int v3 = 0;
        unint64_t v2 = 0;
        *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, object);
      }
      xpc_release(v9);
    }
    else
    {
      unint64_t v2 = 0x500000000;
      unsigned int v3 = 1;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2 | v3;
}

void sInitializeCTFrameworkStuff(void *a1)
{
  _CTServerConnectionTypeID = _CFRuntimeRegisterClass();
  CCMonitor::instance(&v2);
  uint64_t v1 = v3;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t _CTServerConnectionVerifyCarrierEntitlements(uint64_t a1, ctu *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsQueryEntitlements", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v5 = v11;
    xpc_object_t object = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v6);
    xpc_dictionary_set_value(v5, "kCarrierEntitlementsEntitlements", value);
    xpc_object_t v7 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v7);
    xpc_release(value);
    xpc_object_t value = 0;
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionSetActiveAudioSystemConfiguration(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetActiveAudioSystemConfiguration", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v5 = v11;
    xpc_object_t object = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    CFRetain(a2);
    ctu::cf_to_xpc((uint64_t *)&value, (ctu *)a2, v6);
    xpc_dictionary_set_value(v5, "kAudioIOState", value);
    xpc_object_t v7 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v7);
    xpc_release(value);
    xpc_object_t value = 0;
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v8);
    CFRelease(a2);
    xpc_release(object);
  }
  return v2;
}

uint64_t SendXpcMessage(uint64_t a1, xpc_object_t *a2, uint64_t a3, uint64_t a4)
{
  return SendXpcMessageIf(*(unsigned __int8 *)(*(void *)(a1 + 24) + 136), a1, a2, a4, 1);
}

void dispatch::async<CCMonitor::initialize(void)::$_0>(dispatch_queue_s *,std::unique_ptr<CCMonitor::initialize(void)::$_0,std::default_delete<CCMonitor::initialize(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  CCMonitor::instance(&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  if (a1)
  {
    JUMPOUT(0x18531F680);
  }
}

uint64_t _CTServerConnectionIsUserIdentityModuleRequired(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierSettingsIsUimRequired", object, "kRequest", &v8);
    xpc_release(object[0]);
    xpc_object_t v9 = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
    {
      object[0] = &v8;
      object[1] = "kCarrierSettingsIsUimRequired";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)1);
      xpc_release(v7);
    }
    else
    {
      *a2 = 1;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

CFStringRef CTSettingCopyMyPhoneNumber()
{
  CFStringRef v3 = 0;
  Default = (const void *)CTTelephonyCenterGetDefault();
  CFTypeRef cf = 0;
  _CTServerConnectionCopyPhoneNumber(Default, 0, (CFStringRef *)&cf, &v3, 0, 0);
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

unint64_t _CTServerConnectionCopyPhoneNumber(const void *a1, int a2, CFStringRef *a3, CFStringRef *a4, void *a5, void *a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    *a4 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetPhoneNumber", &object, "kRequest", v33);
    xpc_release(object);
    xpc_object_t v13 = v33[0];
    xpc_object_t v36 = v33[0];
    v33[0] = xpc_null_create();
    xpc_release(v33[0]);
    xpc_object_t v14 = xpc_int64_create(a2);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(v13, "kSettingsModelIndex", v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    xpc_object_t v35 = xpc_null_create();
    unint64_t v6 = SendXpcMessage((uint64_t)a1, &v36, &v35);
    int v16 = 0;
    int v17 = 0;
    if (!HIDWORD(v6))
    {
      if (MEMORY[0x1853203E0](v35) == MEMORY[0x1E4F14590])
      {
        xpc_object_t object = &v35;
        *(void *)&long long v38 = "kSettingsModelValid";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v33);
        int v18 = xpc::dyn_cast_or_default((xpc *)v33, 0);
        xpc_release(v33[0]);
        xpc_object_t object = &v35;
        *(void *)&long long v38 = "kSettingsModelFound";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v33);
        int v16 = xpc::dyn_cast_or_default((xpc *)v33, 0);
        xpc_release(v33[0]);
        xpc_object_t object = &v35;
        *(void *)&long long v38 = "kSettingsModelEdit";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v33);
        int v17 = xpc::dyn_cast_or_default((xpc *)v33, 0);
        xpc_release(v33[0]);
        if (v18)
        {
          v33[0] = 0;
          v33[1] = 0;
          uint64_t v34 = 0;
          __p = &v35;
          v31 = "kSettingsModelLabel";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, v28);
          xpc_object_t object = 0;
          long long v38 = 0uLL;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v38) < 0) {
            operator delete(object);
          }
          xpc_release(v28[0]);
          __p = 0;
          v31 = 0;
          uint64_t v32 = 0;
          v28[0] = &v35;
          v28[1] = "kSettingsModelNumber";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)v28, &v29);
          xpc_object_t object = 0;
          long long v38 = 0uLL;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v38) < 0) {
            operator delete(object);
          }
          xpc_release(v29);
          CFAllocatorRef v19 = CFGetAllocator(a1);
          if (v34 >= 0) {
            int64x2_t v20 = v33;
          }
          else {
            int64x2_t v20 = (xpc_object_t *)v33[0];
          }
          *a3 = CFStringCreateWithCString(v19, (const char *)v20, 0x8000100u);
          CFAllocatorRef v21 = CFGetAllocator(a1);
          if (v32 >= 0) {
            p_p = (const char *)&__p;
          }
          else {
            p_p = (const char *)__p;
          }
          *a4 = CFStringCreateWithCString(v21, p_p, 0x8000100u);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            int64x2_t v23 = &__p;
            if (v32 < 0) {
              int64x2_t v23 = __p;
            }
            LODWORD(object) = 67109378;
            HIDWORD(object) = a2;
            LOWORD(v38) = 2080;
            *(void *)((char *)&v38 + 2) = v23;
            _os_log_impl(&dword_18444A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Phone number index %d: %s", (uint8_t *)&object, 0x12u);
          }
          if (SHIBYTE(v32) < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v34) < 0) {
            operator delete(v33[0]);
          }
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
        {
          _CTServerConnectionCopyPhoneNumber_cold_1(a2);
        }
      }
      else
      {
        int v16 = 0;
        int v17 = 0;
      }
    }
    uint64_t v24 = (void *)MEMORY[0x1E4F1CFD0];
    uint64_t v25 = (void *)MEMORY[0x1E4F1CFC8];
    if (a5)
    {
      if (v16) {
        v26 = (void *)MEMORY[0x1E4F1CFD0];
      }
      else {
        v26 = (void *)MEMORY[0x1E4F1CFC8];
      }
      *a5 = *v26;
    }
    if (a6)
    {
      if (!v17) {
        uint64_t v24 = v25;
      }
      *a6 = *v24;
    }
    xpc_release(v35);
    xpc_release(v36);
  }
  return v6;
}

uint64_t _CTServerConnectionCopyDataStatus(const void *a1, int a2, const __CFDictionary **a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc_object_t v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)v57);
    xpc::dict_creator::operator()<char const*>("kGetDataStatus", v7, "kRequest", (xpc_object_t *)buf);
    xpc_release(v57[0]);
    xpc_object_t xdict = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v8 = xpc_int64_create(a2);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, "kPacketContextIdentifer", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t v40 = xpc_null_create();
    uint64_t v3 = SendXpcMessage((uint64_t)a1, &xdict, &v40);
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)v57 = 0u;
    long long v58 = 0u;
    *a3 = 0;
    if (MEMORY[0x1853203E0](v40) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = 0;
      *(void *)buf = &v40;
      *(void *)&buf[8] = "kGetDataStatusInfo";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &object);
      if (MEMORY[0x1853203E0](object) == MEMORY[0x1E4F14568])
      {
        size_t count = xpc_array_get_count(object);
        if (count)
        {
          unint64_t v19 = count;
          for (uint64_t i = 0; i != v19; ++i)
          {
            *(void *)buf = &object;
            *(void *)&buf[8] = i;
            xpc::array::object_proxy::operator xpc::object((uint64_t)buf, values);
            v57[i] = (xpc_object_t)xpc::dyn_cast_or_default((xpc *)values, 0);
            xpc_release(values[0]);
          }
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          memset(buf, 0, sizeof(buf));
          long long v49 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          *(_OWORD *)values = 0u;
          CFAllocatorRef v21 = CFGetAllocator(a1);
          CFIndex v22 = _FillDictionaryKeysAndValuesForDataStatus(v21, v19, (uint64_t *)v57, (const __CFString **)buf, (CFNumberRef *)values);
          CFDictionaryRef v23 = CFDictionaryCreate(v21, (const void **)buf, (const void **)values, v22, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v22)
          {
            uint64_t v24 = values;
            do
            {
              uint64_t v25 = *v24++;
              CFRelease(v25);
              --v22;
            }
            while (v22);
          }
          if (v23) {
            v26 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            v26 = 0;
          }
          if (v26)
          {
            CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v21, 0, v23);
            CFDictionaryRef v28 = MutableCopy;
            if (MutableCopy) {
              xpc_object_t v29 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
            }
            else {
              xpc_object_t v29 = 0;
            }
            if (v29)
            {
              Value = CFDictionaryGetValue(MutableCopy, @"kCTRegistrationDataActive");
              if (Value)
              {
                v31 = Value;
                CFTypeID v32 = CFGetTypeID(Value);
                if (v32 == CFBooleanGetTypeID()) {
                  v33 = v31;
                }
                else {
                  v33 = 0;
                }
              }
              else
              {
                v33 = 0;
              }
              uint64_t v34 = CFDictionaryGetValue(v28, @"kCTRegistrationDataAttached");
              if (v34)
              {
                xpc_object_t v35 = v34;
                CFTypeID v36 = CFGetTypeID(v34);
                if (v36 == CFBooleanGetTypeID()) {
                  v37 = v35;
                }
                else {
                  v37 = 0;
                }
              }
              else
              {
                v37 = 0;
              }
              if (v37 == (const void *)*MEMORY[0x1E4F1CFD0]) {
                long long v38 = kCTRegistrationDataStatusAttached;
              }
              else {
                long long v38 = kCTRegistrationDataStatusUnattached;
              }
              if (v33 == (const void *)*MEMORY[0x1E4F1CFD0]) {
                long long v38 = kCTRegistrationDataStatusAttachedAndActive;
              }
              CFDictionaryAddValue(v28, @"kCTRegistrationDataStatus", *v38);
              *a3 = v28;
            }
            else if (MutableCopy)
            {
              CFRelease(MutableCopy);
            }
          }
          if (v23) {
            CFRelease(v23);
          }
        }
      }
      xpc_release(object);
    }
    CFDictionaryRef v10 = *a3;
    xpc_object_t v11 = CTLogPacket();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        CFDictionaryRef v13 = *a3;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = a2;
        *(_WORD *)&buf[8] = 2112;
        *(void *)&buf[10] = v13;
        xpc_object_t v14 = "Calling _CTServerConnectionCopyDataStatus(): for %d: Data status: %@";
        xpc_object_t v15 = v11;
        uint32_t v16 = 18;
LABEL_13:
        _os_log_impl(&dword_18444A000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
      }
    }
    else if (v12)
    {
      *(_WORD *)buf = 0;
      xpc_object_t v14 = "Calling _CTServerConnectionCopyDataStatus(): Missing data status";
      xpc_object_t v15 = v11;
      uint32_t v16 = 2;
      goto LABEL_13;
    }
    xpc_release(v40);
    xpc_release(xdict);
  }
  return v3;
}

xpc_object_t xpc::array::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  *a2 = value;
  if (value)
  {
    return xpc_retain(value);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *a2 = result;
  }
  return result;
}

uint64_t CTCellularDataPlanGetIsEnabled()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unsigned __int8 v2 = 1;
  _CTServerConnectionGetCellularDataIsEnabled(Default, &v2);
  return v2;
}

uint64_t _CTServerConnectionGetCellularDataIsEnabled(uint64_t a1, unsigned char *a2)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v13);
    xpc_release(object[0]);
    xpc_object_t v5 = v13;
    xpc_object_t v14 = v13;
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v13);
    xpc_object_t v6 = xpc_BOOL_create(0);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kEnableCellularData", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v13 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v14, &v13);
    if (MEMORY[0x1853203E0](v13) == MEMORY[0x1E4F14590])
    {
      object[0] = &v13;
      object[1] = "kEnableCellularData";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
      xpc_object_t v9 = CTLogPacket();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *a2;
        LODWORD(object[0]) = 67109120;
        HIDWORD(object[0]) = v10;
        _os_log_impl(&dword_18444A000, v9, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetCellularDataIsEnabled(): isEnabled = %d", (uint8_t *)object, 8u);
      }
    }
    else
    {
      xpc_object_t v8 = CTLogPacket();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        _CTServerConnectionGetCellularDataIsEnabled_cold_1(v2, SHIDWORD(v2), v8);
      }
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v2;
}

uint64_t CTLogPacket()
{
  if (CTLogPacket_once != -1) {
    dispatch_once(&CTLogPacket_once, &__block_literal_global_40);
  }
  return CTLogPacket_logger;
}

uint64_t CTTelephonyCenterGetDefault()
{
  uint64_t result = _CTTelephonyCenterDefault;
  if (!_CTTelephonyCenterDefault)
  {
    pthread_mutex_lock(&_CTTelephonyCreateMutex);
    if (!_CTTelephonyCenterDefault)
    {
      Current = CFRunLoopGetCurrent();
      uint64_t v2 = CTTelephonyCenterCreateOnRunloop(Current, (const __CFString *)*MEMORY[0x1E4F1D418]);
      _CTTelephonyCenteruint64_t Default = (uint64_t)v2;
      if (v2) {
        *(unsigned char *)(v2[3] + 138) = 1;
      }
    }
    pthread_mutex_unlock(&_CTTelephonyCreateMutex);
    return _CTTelephonyCenterDefault;
  }
  return result;
}

void *CTTelephonyCenterCreateOnRunloop(__CFRunLoop *a1, const __CFString *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  xpc_object_t v5 = getprogname();
  CFStringRef v6 = CFStringCreateWithFormat(v4, 0, @"%s-CTTelephonyCenter", v5);
  xpc_object_t v7 = _CTServerConnectionCreateOnRunLoop((uint64_t)v4, (uint64_t)v6, a1, a2, &__block_literal_global_9);
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CTTelephonyCenterSetup(v7);
  }
  return v7;
}

void CTTelephonyCenterSetup(const void *a1)
{
  _CTServerConnectionSetDefaultConnection((uint64_t)a1);
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)_DaemonReady, @"kCTDaemonReadyLocalNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

uint64_t _CTServerConnectionSetDefaultConnection(uint64_t result)
{
  if (result) {
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

uint64_t _FillDictionaryKeysAndValuesForDataStatus(const __CFAllocator *a1, unint64_t a2, uint64_t *a3, const __CFString **a4, CFNumberRef *a5)
{
  v37[20] = *MEMORY[0x1E4F143B8];
  if (a2 < 3) {
    return 0;
  }
  LODWORD(valuePtr[0]) = *a3;
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberIntType, valuePtr);
  *a5 = v10;
  if (!v10) {
    return 0;
  }
  *a4 = @"kCTRegistrationDataContextID";
  a4[1] = @"kCTRegistrationDataActive";
  xpc_object_t v11 = (const void *)*MEMORY[0x1E4F1CFC8];
  xpc_object_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (a3[1]) {
    xpc_object_t v13 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    xpc_object_t v13 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  a5[1] = (CFNumberRef)CFRetain(v13);
  a4[2] = @"kCTRegistrationDataAttached";
  if (a3[2]) {
    xpc_object_t v14 = v12;
  }
  else {
    xpc_object_t v14 = v11;
  }
  a5[2] = (CFNumberRef)CFRetain(v14);
  v37[0] = @"kCTRegistrationDataIndicatorNone";
  v37[1] = @"kCTRegistrationDataIndicator2G";
  v37[2] = @"kCTRegistrationDataIndicator2_5G";
  v37[3] = @"kCTRegistrationDataIndicator3G";
  v37[4] = @"kCTRegistrationDataIndicator3_5G";
  v37[5] = @"kCTRegistrationDataIndicator3_75G";
  v37[6] = @"kCTRegistrationDataIndicatorH_Plus";
  v37[7] = @"kCTRegistrationDataIndicator4G";
  v37[8] = @"kCTRegistrationDataIndicator5G";
  v37[9] = @"kCTRegistrationDataIndicator6G";
  v37[10] = @"kCTRegistrationDataIndicator7G";
  v37[11] = @"kCTRegistrationDataIndicator8G";
  v37[12] = @"kCTRegistrationDataIndicator9G";
  v37[13] = @"kCTRegistrationDataIndicator4G_5GE";
  v37[14] = @"kCTRegistrationDataIndicator4G_LTEA";
  v37[15] = @"kCTRegistrationDataIndicator4G_LTEPlus";
  v37[16] = @"kCTRegistrationDataIndicator5G_Plus";
  v37[17] = @"kCTRegistrationDataIndicator5G_Uwb";
  v37[18] = @"kCTRegistrationDataIndicator5G_UC";
  v37[19] = @"kCTRegistrationDataIndicator5G_CA";
  if (a2 < 5) {
    return 3;
  }
  unint64_t v15 = a3[3];
  if (v15 > 0x13)
  {
    uint64_t v16 = 3;
  }
  else
  {
    a4[3] = @"kCTRegistrationDataIndicator";
    a5[3] = (CFNumberRef)v37[v15];
    uint64_t v16 = 4;
  }
  if (a3[4]) {
    CFNumberRef v19 = (const __CFNumber *)v12;
  }
  else {
    CFNumberRef v19 = (const __CFNumber *)v11;
  }
  a5[v16] = v19;
  uint64_t v17 = v16 + 1;
  a4[v16] = @"kCTRegistrationDataStatusInternationalRoaming";
  if (a2 >= 6)
  {
    CFAllocatorRef allocator = a1;
    CFNumberRef v32 = (const __CFNumber *)v12;
    CFIndex v20 = 0;
    uint64_t v21 = 0;
    unint64_t v22 = a3[5] & 0x7FFFFFFFFFFFD67FLL;
    memset(valuePtr, 0, sizeof(valuePtr));
    do
    {
      if ((v22 >> v21)) {
        *((void *)valuePtr + v20++) = kCTDataConnectionServiceTypeFromIndex(v21);
      }
      ++v21;
    }
    while (v21 != 36);
    if (v20)
    {
      a5[v17] = CFArrayCreate(allocator, (const void **)valuePtr, v20, MEMORY[0x1E4F1D510]);
      a4[v17] = @"kCTRegistrationDataConnectionServices";
      uint64_t v17 = v16 + 2;
    }
    if (a2 >= 7)
    {
      a5[v17] = (CFNumberRef)RadioAccessTechnologyToRadioAccessTechnologyString(*((_DWORD *)a3 + 12));
      uint64_t v23 = v17 + 1;
      a4[v17] = @"kCTRegistrationRadioAccessTechnology";
      if (a2 == 8)
      {
        uint64_t v24 = 0;
        unsigned int v25 = 0;
        v35[0] = @"kCTDataFamilyTypeIPv4";
        v35[1] = @"kCTDataFamilyTypeIPv6";
        values[0] = 0;
        values[1] = 0;
        int v26 = *((_DWORD *)a3 + 14);
        int v27 = 1;
        do
        {
          if ((v27 & v26) != 0) {
            values[v25++] = (void *)v35[v24];
          }
          int v27 = 1 << ++v24;
        }
        while (v24 != 2);
        if (v25)
        {
          a5[v23] = CFArrayCreate(allocator, (const void **)values, v25, MEMORY[0x1E4F1D510]);
          a4[v23] = @"kCTRegistrationDataFamilyActive";
          uint64_t v23 = v17 + 2;
        }
      }
      if (a2 <= 8)
      {
        return v23;
      }
      else
      {
        a4[v23] = @"kCTRegistrationDataAttachOverride";
        CFNumberRef v28 = (const __CFNumber *)v11;
        if (a3[8]) {
          CFNumberRef v29 = v32;
        }
        else {
          CFNumberRef v29 = (const __CFNumber *)v11;
        }
        uint64_t v17 = v23 + 1;
        a5[v23] = v29;
        if (a2 != 9)
        {
          a4[v17] = @"kCTRegistrationDataContextSuspended";
          if (a3[9]) {
            CFNumberRef v28 = v32;
          }
          uint64_t v30 = v23 + 2;
          a5[v17] = v28;
          if (a2 >= 0xB && (uint64_t v31 = a3[10]) != 0)
          {
            a4[v30] = @"kCTRegistrationDataIndicatorOverride";
            uint64_t v17 = v23 + 3;
            a5[v30] = (CFNumberRef)v37[v31];
          }
          else
          {
            return v23 + 2;
          }
        }
      }
    }
  }
  return v17;
}

__CFString *RadioAccessTechnologyToRadioAccessTechnologyString(int a1)
{
  if ((a1 + 1) > 0xC) {
    uint64_t v1 = kCTRegistrationRadioAccessTechnologyUnknown;
  }
  else {
    uint64_t v1 = off_1E5265488[a1 + 1];
  }
  return *v1;
}

uint64_t _CTServerConnectionCopyCellularUsagePolicy(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    *a3 = 0;
    ctu::cf::assign();
  }
  return 0x1600000001;
}

void setDisallowedCellularDataPolicy(CFMutableDictionaryRef *a1, xpc_object_t *a2)
{
  p_xpc_object_t xarray = a2;
  xpc_object_t v12 = "kCUPolicyKeyDisallowedPolicies";
  xpc_object_t xarray = 0;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xarray, &xarray);
  uint64_t v3 = MEMORY[0x1853203E0](xarray);
  uint64_t v4 = MEMORY[0x1E4F14568];
  if (v3 == MEMORY[0x1E4F14568])
  {
    if (MEMORY[0x1853203E0](xarray) == v4)
    {
      size_t count = xpc_array_get_count(xarray);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (count)
      {
        for (uint64_t i = 0; i != (const char *)count; ++i)
        {
          p_xpc_object_t xarray = &xarray;
          xpc_object_t v12 = i;
          xpc::array::object_proxy::operator xpc::object((uint64_t)&p_xarray, &object);
          unsigned __int8 v8 = xpc::dyn_cast_or_default((xpc *)&object, 0);
          xpc_release(object);
          CellularDataUsagePolicyForEnum = getCellularDataUsagePolicyForEnum(v8);
          CFArrayAppendValue(Mutable, CellularDataUsagePolicyForEnum);
        }
      }
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    }
    CFDictionarySetValue(*a1, @"kCTCellularDataUsageDisallowedPolicies", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  xpc_release(xarray);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
LABEL_5:
      *a2 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v4) != MEMORY[0x1E4F14568]) {
    goto LABEL_5;
  }
  xpc_retain(v4);
LABEL_7:

  xpc_release(v4);
}

void setLegacyCellularDataPolicy(CFMutableDictionaryRef *a1, uint64_t a2)
{
  v5[0] = a2;
  v5[1] = "kCUPolicyKeyDataAllowed";
  xpc_object_t object = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
  if (MEMORY[0x1853203E0](object) != MEMORY[0x1E4F145D8])
  {
    char v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_object_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if ((v3 & 0xFE) != 0) {
      xpc_object_t v4 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(*a1, @"kCTCellularUsagePolicyDataAllowed", *v4);
  }
  xpc_release(object);
}

void setCellularDataPolicy(CFMutableDictionaryRef *a1, uint64_t a2)
{
  v5[0] = a2;
  v5[1] = "kCUPolicyKeyDataAllowed";
  xpc_object_t object = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
  if (MEMORY[0x1853203E0](object) != MEMORY[0x1E4F145D8])
  {
    unsigned __int8 v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    CellularDataUsagePolicyForEnum = getCellularDataUsagePolicyForEnum(v3);
    if (CellularDataUsagePolicyForEnum) {
      CFDictionarySetValue(*a1, @"kCTCellularDataUsagePolicy", CellularDataUsagePolicyForEnum);
    }
  }
  xpc_release(object);
}

void setWiFiDataPolicy(CFMutableDictionaryRef *a1, uint64_t a2)
{
  v5[0] = a2;
  v5[1] = "kCUPolicyKeyWiFiAllowed";
  xpc_object_t object = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
  if (MEMORY[0x1853203E0](object) != MEMORY[0x1E4F145D8])
  {
    unsigned __int8 v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    CellularDataUsagePolicyForEnum = getCellularDataUsagePolicyForEnum(v3);
    if (CellularDataUsagePolicyForEnum) {
      CFDictionarySetValue(*a1, @"kCTWiFiDataUsagePolicy", CellularDataUsagePolicyForEnum);
    }
  }
  xpc_release(object);
}

__CFString *getCellularDataUsagePolicyForEnum(int a1)
{
  uint64_t v1 = @"kCTCellularDataUsagePolicyAllowWhileInHome";
  if (!a1) {
    uint64_t v1 = @"kCTCellularDataUsagePolicyAlwaysAllow";
  }
  if (a1 == 2) {
    return @"kCTCellularDataUsagePolicyDeny";
  }
  else {
    return v1;
  }
}

unint64_t _CTServerConnectionSendEnhancedLinkQualityTrafficInfo(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = 0x1600000000;
  unsigned int v4 = 1;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMSendTrafficInfo", object, "kRequest", &v17);
    xpc_release(object[0]);
    xpc_object_t v7 = v17;
    xpc_object_t v18 = v17;
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v17);
    unsigned __int8 v8 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v8) {
      unsigned __int8 v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kRadioEnhancedLQMSendTrafficInfoPayload", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t v10 = xpc_int64_create(a2);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kRadioEnhancedLQMSendTrafficInfoType", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t v17 = xpc_null_create();
    uint64_t v12 = SendXpcMessage(a1, &v18, &v17);
    unint64_t v3 = 0x400000000;
    if (MEMORY[0x1853203E0](v17) == MEMORY[0x1E4F14590])
    {
      object[0] = &v17;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v16);
      int v13 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
      xpc_release(v16);
      if (v13)
      {
        unint64_t v3 = v12 & 0xFFFFFFFF00000000;
        unsigned int v4 = v12;
      }
      else
      {
        unsigned int v4 = 2;
      }
    }
    else
    {
      unsigned int v4 = 2;
    }
    xpc_release(v17);
    xpc_release(v18);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

uint64_t _CTServerConnectionCellMonitorCopyCellInfo(uint64_t a1, unsigned char *a2, void *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetCellInfo", &object, "kRequest", &v15);
    xpc_release(object);
    xpc_object_t v16 = v15;
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v15);
    xpc_object_t object = &v16;
    int v13 = "kCellMonitorCellAll";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v14);
    xpc_release(v14);
    xpc_object_t v14 = 0;
    xpc_object_t v15 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v16, &v15);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v15) == MEMORY[0x1E4F14590])
    {
      xpc_object_t v11 = 0;
      xpc_object_t object = &v15;
      int v13 = "kCellMonitorCellInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v11);
      if (MEMORY[0x1853203E0](v11) != MEMORY[0x1E4F145D8])
      {
        xpc_object_t object = 0;
        uint64_t v10 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v10);
        xpc_object_t v7 = object;
        if (object) {
          unsigned __int8 v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
        }
        else {
          unsigned __int8 v8 = 0;
        }
        if (v8)
        {
          *a2 = 1;
          *a3 = v7;
        }
        else if (object)
        {
          CFRelease(object);
        }
      }
      xpc_release(v11);
    }
    xpc_release(v15);
    xpc_release(v16);
  }
  return v3;
}

uint64_t _CTServerConnectionGetRegistrationStatus(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v12);
    xpc_release(object);
    xpc_object_t v13 = v12;
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v12);
    xpc_object_t object = &v13;
    uint64_t v10 = "kRegistrationStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_object_t v12 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v13, &v12);
    int v5 = 0;
    if (MEMORY[0x1853203E0](v12) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v12;
      uint64_t v10 = "kRegistrationStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      int v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    *a2 = registrationStatusToRegistrationStatusString(v5);
    CFStringRef v6 = CTLogRegistration();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      _CTServerConnectionGetRegistrationStatus_cold_1();
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value)
  {
    return xpc_retain(value);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *a2 = result;
  }
  return result;
}

void xpc::dict_creator::operator()<char const*>(char *string@<X2>, xpc_object_t *a2@<X0>, const char *a3@<X1>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v7 = xpc_string_create(string);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    xpc_retain(v7);
    xpc_object_t v8 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, a3, v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = *a2;
  *a4 = *a2;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *a4 = xpc_null_create();
  }

  xpc_release(v7);
}

xpc::dict_creator *xpc::dict_creator::dict_creator(xpc::dict_creator *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if ((v2 || (xpc_object_t v2 = xpc_null_create()) != 0) && MEMORY[0x1853203E0](v2) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v2);
    xpc_object_t v3 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_release(v2);
  *(void *)this = v3;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  return this;
}

uint64_t SendXpcMessage(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  return SendXpcMessageIf((*(unsigned char *)(*(void *)(a1 + 24) + 136) != 0) & (sInternalDeadFlag ^ 1u), a1, a2, a3);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_null_create();
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v4);
  *a2 = v4;
  xpc_object_t v5 = xpc_null_create();

  xpc_release(v5);
}

__CFString *registrationStatusToRegistrationStatusString(int a1)
{
  if ((a1 - 1) > 5) {
    uint64_t v1 = kCTRegistrationStatusUnknown;
  }
  else {
    uint64_t v1 = off_1E5265530[a1 - 1];
  }
  return *v1;
}

uint64_t CTLogRegistration()
{
  if (CTLogRegistration_once != -1) {
    dispatch_once(&CTLogRegistration_once, &__block_literal_global_36);
  }
  return CTLogRegistration_logger;
}

void *ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v4 = *a2;
  if (*a2 && (CFTypeID v5 = CFGetTypeID(*a2), v5 == CFArrayGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2) {
      CFRelease(*a2);
    }
  }
  return a1;
}

{
  CFTypeRef v3;
  CFTypeID v4;

  xpc_object_t v3 = *a2;
  if (*a2 && (CFTypeRef v4 = CFGetTypeID(*a2), v4 == CFArrayGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unint64_t _CTServerConnectionRegisterForEvent(uint64_t a1, int a2, uint64_t a3)
{
  if (a1 && *(void *)(a1 + 16))
  {
    CCMonitor::instance(&v16);
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 136) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v17);
    }
    if (v7)
    {
      CCMonitor::instance(&v16);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v17);
      }
      unsigned int v8 = 1;
      LODWORD(v9) = 1;
      goto LABEL_14;
    }
    unsigned int v8 = v10;
    unint64_t v9 = HIDWORD(v10);
    if (!HIDWORD(v10))
    {
LABEL_14:
      xpc_object_t v11 = *(NSObject **)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___CTServerConnectionRegisterForEvent_block_invoke;
      block[3] = &unk_1E5265B58;
      int v15 = a2;
      block[4] = a3;
      block[5] = v12;
      dispatch_async(v11, block);
    }
  }
  else
  {
    unsigned int v8 = 1;
    LODWORD(v9) = 22;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t anonymous namespace'::RegisterClientForEvent(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(void *)(a1 + 16)) {
    return 0x1600000001;
  }
  if (a2 < -1) {
    return 0;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7)
  {
    xpc_object_t v8 = v7;
    xpc_object_t v16 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v16 = v8;
    if (!v8) {
      goto LABEL_9;
    }
  }
  if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v8);
    xpc_object_t v9 = v8;
    goto LABEL_11;
  }
LABEL_9:
  xpc_object_t v9 = xpc_null_create();
  xpc_object_t v16 = v9;
LABEL_11:
  xpc_release(v8);
  xpc_object_t v10 = xpc_string_create("kRegisterNotification");
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, "kRequest", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(a2);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, "kEvent", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v4 = SendXpcMessageIf(1, a1, &v16, v14, a3);
  xpc_release(v9);
  return v4;
}

uint64_t SendXpcMessageIf(int a1, uint64_t a2, xpc_object_t *a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 0;
  }
  CCMonitor::instance(&v12);
  v9 = !a2 || (uint64_t v8 = *(void *)(a2 + 24)) == 0 || *(unsigned char *)(v8 + 136) == 0;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v13);
  }
  if (v9) {
    return 0x100000001;
  }
  xpc_object_t v11 = *a3;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  _HandlePrepWorkBeforeSend(a2, a5);
  xpc_connection_send_message(*(xpc_connection_t *)(a2 + 40), v11);
  xpc_release(v11);
  return 0;
}

uint64_t SendXpcMessageIf(int a1, uint64_t a2, xpc_object_t *a3, xpc_object_t *a4)
{
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (a1)
  {
    CCMonitor::instance(&v21);
    v9 = !a2 || (uint64_t v8 = *(void *)(a2 + 24)) == 0 || *(unsigned char *)(v8 + 136) == 0;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v22);
    }
    if (v9)
    {
      uint64_t v12 = 1;
      uint64_t v13 = 1;
      return v12 | (v13 << 32);
    }
    xpc_object_t v14 = *a3;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    _HandlePrepWorkBeforeSend(a2, 1);
    xpc_object_t v15 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a2 + 40), v14);
    if ((v15 || (xpc_object_t v15 = xpc_null_create()) != 0) && MEMORY[0x1853203E0](v15) == v5)
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t v18 = *a4;
    *a4 = v16;
    xpc_release(v18);
    xpc_release(v17);
  }
  else
  {
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    if ((v10 || (xpc_object_t v10 = xpc_null_create()) != 0) && MEMORY[0x1853203E0](v10) == v5)
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_release(v10);
    xpc_object_t v14 = xpc_null_create();
    xpc_object_t v15 = *a4;
    *a4 = v11;
  }
  xpc_release(v15);
  xpc_release(v14);
  if (MEMORY[0x1853203E0](*a4) == v5)
  {
    if (xpc_dictionary_get_value(*a4, "kPosixError"))
    {
      uint64_t v21 = a4;
      unint64_t v22 = (std::__shared_weak_count *)"kPosixError";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v21, &object);
      uint64_t v13 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      uint64_t v12 = 1;
      return v12 | (v13 << 32);
    }
    if (!xpc_dictionary_get_value(*a4, "kMachError"))
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      return v12 | (v13 << 32);
    }
    uint64_t v21 = a4;
    unint64_t v22 = (std::__shared_weak_count *)"kMachError";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v21, &object);
    uint64_t v13 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    uint64_t v13 = 5;
  }
  uint64_t v12 = 2;
  return v12 | (v13 << 32);
}

void CCMonitor::instance(void *a1@<X8>)
{
  {
    CCMonitor::instance(void)::sInstance = 0;
    qword_1EB287F38 = 0;
  }
  {
    if (CCMonitor::instance(void)::sOnceToken == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    CCMonitor::instance(void)::sOnceToken = 0;
  }
  dispatch_once(&CCMonitor::instance(void)::sOnceToken, &__block_literal_global_11);
LABEL_5:
  uint64_t v3 = qword_1EB287F38;
  *a1 = CCMonitor::instance(void)::sInstance;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void _HandlePrepWorkBeforeSend(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (*(_DWORD *)(v3 + 140) != 1)
      {
        _CTServerConnectionCheckIn(a1);
        if (a2)
        {
          {
            CCMonitor::instance(&v5);
            if (v6) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v6);
            }
          }
        }
      }
    }
  }
}

unint64_t anonymous namespace'::ReregisterClientForAllEvents(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    CCMonitor::instance(&v15);
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      BOOL v3 = *(unsigned __int8 *)(v2 + 136) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v16);
    }
    if (v3)
    {
      CCMonitor::instance(&v15);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v16);
      }
      uint64_t v5 = 1;
      unsigned int v4 = 1;
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 24);
      xpc_object_t v7 = *(void **)(v6 + 32);
      uint64_t v8 = (void *)(v6 + 40);
      if (v7 == (void *)(v6 + 40))
      {
        uint64_t v5 = 0;
        unsigned int v4 = 0;
      }
      else
      {
        unsigned int v4 = 0;
        uint64_t v5 = 0;
        do
        {
          int v9 = *((_DWORD *)v7 + 8);
          if (v9 >= -1)
          {
            uint64_t v5 = HIDWORD(v10) ? HIDWORD(v10) : v5;
            if (HIDWORD(v10)) {
              unsigned int v4 = v10;
            }
          }
          xpc_object_t v11 = (void *)v7[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              xpc_object_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v7[2];
              BOOL v13 = *v12 == (void)v7;
              xpc_object_t v7 = v12;
            }
            while (!v13);
          }
          xpc_object_t v7 = v12;
        }
        while (v12 != v8);
      }
    }
  }
  else
  {
    unsigned int v4 = 1;
    uint64_t v5 = 22;
  }
  return v4 | (unint64_t)(v5 << 32);
}

void _CTServerConnectionCheckIn(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v1 + 136))
  {
    if (*(char *)(v1 + 111) < 0)
    {
      if (!*(void *)(v1 + 96)) {
        return;
      }
    }
    else if (!*(unsigned char *)(v1 + 111))
    {
      return;
    }
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    if ((v3 || (xpc_object_t v3 = xpc_null_create()) != 0) && MEMORY[0x1853203E0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
    xpc_release(v3);
    xpc_object_t v5 = xpc_string_create("kWhois");
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kRequest", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = (const char *)(v7 + 88);
    if (*(char *)(v7 + 111) < 0) {
      uint64_t v8 = *(const char **)v8;
    }
    xpc_object_t v9 = xpc_string_create(v8);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kName", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v11 = getprogname();
    if (v11)
    {
      xpc_object_t v12 = xpc_string_create(v11);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_dictionary_set_value(v4, "kProgName", v12);
      xpc_object_t v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
    }
    uint64_t v14 = *(void *)(a1 + 24);
    *(unsigned char *)(v14 + 137) = 0;
    if (*(_DWORD *)(v14 + 140) != 1) {
      *(_DWORD *)(v14 + 140) = 1;
    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), v4);
    xpc_release(v4);
  }
}

void CSIPhoneNumber::getFullNumber(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 8);
  }
  CSIPhoneNumber::getFullNumberHelper(&__p, (uint64_t)this, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void CSIPhoneNumber::getFullNumberHelper(std::string *__s@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  if ((*(_DWORD *)(a2 + 4) & 0x70) != 0x10) {
    goto LABEL_36;
  }
  uint64_t v5 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  std::string::size_type size = __s->__r_.__value_.__l.__size_;
  std::string::size_type v7 = (v5 & 0x80u) == 0 ? HIBYTE(__s->__r_.__value_.__r.__words[2]) : __s->__r_.__value_.__l.__size_;
  if (!v7) {
    goto LABEL_36;
  }
  uint64_t v8 = __s;
  uint64_t v9 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80) != 0)
  {
    uint64_t v8 = (std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t v9 = __s->__r_.__value_.__l.__size_;
  }
  if (v9 >= 4)
  {
    xpc_object_t v10 = (std::string *)((char *)v8 + v9);
    xpc_object_t v11 = v8;
    do
    {
      xpc_object_t v12 = (std::string *)memchr(v11, 43, v9 - 3);
      if (!v12) {
        break;
      }
      if (LODWORD(v12->__r_.__value_.__l.__data_) == 825307179)
      {
        if (v12 == v10 || v12 != v8) {
          break;
        }
        std::string::size_type v18 = v7 - 1;
        CFNumberRef v19 = __s;
        std::string::size_type v20 = 4;
LABEL_30:
        std::string::basic_string(&v24, v19, v20, v18, (std::allocator<char> *)&v25);
        if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s->__r_.__value_.__l.__data_);
        }
        *__s = v24;
        goto LABEL_33;
      }
      xpc_object_t v11 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      uint64_t v9 = (char *)v10 - (char *)v11;
    }
    while ((char *)v10 - (char *)v11 >= 4);
  }
  xpc_object_t v13 = __s;
  if ((v5 & 0x80) != 0)
  {
    xpc_object_t v13 = (std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t v5 = size;
  }
  if (v5 >= 3)
  {
    uint64_t v14 = (std::string *)((char *)v13 + v5);
    uint64_t v15 = v13;
    do
    {
      xpc_object_t v16 = (std::string *)memchr(v15, 48, v5 - 2);
      if (!v16) {
        break;
      }
      if (LOWORD(v16->__r_.__value_.__l.__data_) == 12592 && v16->__r_.__value_.__s.__data_[2] == 49)
      {
        if (v16 != v14 && v16 == v13)
        {
          std::string::size_type v18 = v7 - 1;
          CFNumberRef v19 = __s;
          std::string::size_type v20 = 3;
          goto LABEL_30;
        }
        break;
      }
      uint64_t v15 = (std::string *)((char *)&v16->__r_.__value_.__l.__data_ + 1);
      uint64_t v5 = (char *)v14 - (char *)v15;
    }
    while ((char *)v14 - (char *)v15 >= 3);
  }
LABEL_33:
  uint64_t v21 = __s;
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v21 = (std::string *)__s->__r_.__value_.__r.__words[0];
  }
  if (v21->__r_.__value_.__s.__data_[0] != 43)
  {
    unint64_t v22 = std::string::insert(__s, 0, "+", 1uLL);
    if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, v22->__r_.__value_.__l.__data_, v22->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v23;
    }
  }
  else
  {
LABEL_36:
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = __s->__r_.__value_.__r.__words[2];
    __s->__r_.__value_.__l.__size_ = 0;
    __s->__r_.__value_.__r.__words[2] = 0;
    __s->__r_.__value_.__r.__words[0] = 0;
  }
}

void sub_18445ADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sMsgCtrLog(void)
{
  if (sMsgCtrLog(void)::once != -1) {
    dispatch_once(&sMsgCtrLog(void)::once, &__block_literal_global_35);
  }
  return sMsgCtrLog(void)::logger;
}

void *_CTServerConnectionCreateOnRunLoop(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t v5 = 0;
  if (a3 && a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    if (a2)
    {
      long long v17 = 0uLL;
      uint64_t v18 = 0;
      ctu::cf::assign();
      *(_OWORD *)std::string __p = 0uLL;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v9 = (char *)getprogname();
      std::string::basic_string[abi:nn180100]<0>(__p, v9);
    }
    uint64_t v5 = (void *)sCTServerConnectionCreate();
    if (v5)
    {
      if (a5) {
        xpc_object_t v10 = _Block_copy(a5);
      }
      else {
        xpc_object_t v10 = 0;
      }
      uint64_t v11 = v5[3];
      xpc_object_t v12 = *(const void **)(v11 + 112);
      *(void *)(v11 + 112) = v10;
      if (v12) {
        _Block_release(v12);
      }
      CFRetain(a3);
      CFRetain(a4);
      uint64_t v13 = v5[3];
      *(void *)(v13 + 16) = a3;
      *(void *)(v13 + 24) = a4;
      sCTServerConnectionStart(v5);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  return v5;
}

void MCCAndMNC::MCCAndMNC(MCCAndMNC *this)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  MCCAndMNC::MCCAndMNC((uint64_t)this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:nn180100]<0>(__p, "");
  MCCAndMNC::MCCAndMNC((uint64_t)this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

CTServerState *sConnectionStateDelete(CTServerState *result)
{
  if (result)
  {
    CTServerState::~CTServerState(result);
    JUMPOUT(0x18531F680);
  }
  return result;
}

void CTServerState::~CTServerState(CTServerState *this)
{
  uint64_t v2 = (const void *)*((void *)this + 15);
  if (v2) {
    _Block_release(v2);
  }
  char v3 = (const void *)*((void *)this + 14);
  if (v3) {
    _Block_release(v3);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  std::unique_ptr<ctu::OsLogLogger>::reset[abi:nn180100]((uint64_t *)this + 10, 0);
  std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  xpc_object_t v4 = *((void *)this + 1);
  if (v4) {
    dispatch_release(v4);
  }
  xpc_release(*(xpc_object_t *)this);
  *(void *)this = 0;
}

void *_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, NSObject *a3, const void *a4)
{
  if (!a3) {
    return 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  if (a2)
  {
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    ctu::cf::assign();
    *(_OWORD *)std::string __p = 0uLL;
    uint64_t v15 = 0;
  }
  else
  {
    std::string::size_type v7 = (char *)getprogname();
    std::string::basic_string[abi:nn180100]<0>(__p, v7);
  }
  xpc_object_t v6 = (void *)sCTServerConnectionCreate();
  if (v6)
  {
    if (a4) {
      uint64_t v8 = _Block_copy(a4);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v6[3];
    xpc_object_t v10 = *(const void **)(v9 + 112);
    *(void *)(v9 + 112) = v8;
    if (v10) {
      _Block_release(v10);
    }
    dispatch_retain(a3);
    uint64_t v11 = v6[3];
    xpc_object_t v12 = *(NSObject **)(v11 + 8);
    *(void *)(v11 + 8) = a3;
    if (v12) {
      dispatch_release(v12);
    }
    sCTServerConnectionStart(v6);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void *_CTServerConnectionCreateWithIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  if (a2)
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    ctu::cf::assign();
    long long v24 = 0uLL;
    uint64_t v25 = 0;
  }
  else
  {
    xpc_object_t v6 = (char *)getprogname();
    std::string::basic_string[abi:nn180100]<0>(&v24, v6);
  }
  uint64_t v7 = sCTServerConnectionCreate();
  uint64_t v8 = (void *)v7;
  if (v7)
  {
    if (a4)
    {
      uint64_t v9 = a4[1];
      if (v9)
      {
        xpc_object_t v10 = (uint64_t (*)(void))a4[2];
        if (v10) {
          uint64_t v9 = v10(a4[1]);
        }
      }
      if (a3)
      {
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___CTServerConnectionCreateWithIdentifier_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_28;
        aBlock[4] = a3;
        aBlock[5] = v8;
        aBlock[6] = v9;
        uint64_t v11 = _Block_copy(aBlock);
        uint64_t v12 = v8[3];
        uint64_t v13 = *(const void **)(v12 + 112);
        *(void *)(v12 + 112) = v11;
        if (v13) {
          _Block_release(v13);
        }
      }
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v14 = a4[3];
      if (!v14) {
        goto LABEL_19;
      }
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      v22[2] = ___CTServerConnectionCreateWithIdentifier_block_invoke_2;
      v22[3] = &__block_descriptor_tmp_29;
      v22[4] = v14;
      v22[5] = v9;
      uint64_t v15 = _Block_copy(v22);
      uint64_t v16 = v8[3];
      uint64_t v17 = *(const void **)(v16 + 120);
      *(void *)(v16 + 120) = v15;
      if (!v17) {
        goto LABEL_19;
      }
    }
    else
    {
      if (!a3) {
        goto LABEL_19;
      }
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 0x40000000;
      v21[2] = ___CTServerConnectionCreateWithIdentifier_block_invoke_3;
      v21[3] = &__block_descriptor_tmp_30_0;
      v21[4] = a3;
      v21[5] = v7;
      uint64_t v18 = _Block_copy(v21);
      uint64_t v19 = v8[3];
      uint64_t v17 = *(const void **)(v19 + 112);
      *(void *)(v19 + 112) = v18;
      if (!v17) {
        goto LABEL_19;
      }
    }
    _Block_release(v17);
LABEL_19:
    sCTServerConnectionStart(v8);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  return v8;
}

uint64_t sCTServerConnectionCreate()
{
  if (sFrameworkInit != -1) {
    dispatch_once_f(&sFrameworkInit, 0, (dispatch_function_t)sInitializeCTFrameworkStuff);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(void *)(Instance + 16) = dispatch_queue_create("CTServerConnection.callback", 0);
    operator new();
  }
  return 0;
}

uint64_t std::unique_ptr<ctu::OsLogLogger>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x18531F300]();
    JUMPOUT(0x18531F680);
  }
  return result;
}

void sCTServerConnectionStart(void *a1)
{
  uint64_t v2 = (xpc_connection_t *)a1[3];
  char v3 = a1[2];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___Z24sCTServerConnectionStartP20__CTServerConnection_block_invoke;
  v5[3] = &__block_descriptor_tmp_23;
  v5[4] = a1;
  v5[5] = v2;
  _CTServerConnectXpc_sync(v2, v3, (uint64_t)v5);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)DispatchReEstablish, @"kCTDaemonReadyLocalNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _CTServerConnectXpc_sync(xpc_connection_t *a1, NSObject *a2, uint64_t a3)
{
  mach_service = xpc_connection_create_mach_service("com.apple.commcenter.xpc", a2, 2uLL);
  if (!mach_service) {
    mach_service = (_xpc_connection_s *)xpc_null_create();
  }
  xpc_object_t v6 = xpc_null_create();
  xpc_connection_t v7 = *a1;
  *a1 = mach_service;
  xpc_release(v7);
  xpc_release(v6);
  uint64_t v8 = *a1;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = ___ZL24_CTServerConnectXpc_syncP13CTServerStateP16dispatch_queue_sU13block_pointerFvvE_block_invoke;
  handler[3] = &__block_descriptor_tmp_63;
  handler[4] = a1;
  xpc_connection_set_event_handler(v8, handler);
  if (a3) {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  }
  xpc_connection_resume(*a1);
}

xpc_object_t ___Z24sCTServerConnectionStartP20__CTServerConnection_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 40) = **(void **)(a1 + 40);
  return xpc_retain(*(xpc_object_t *)(*(void *)(a1 + 32) + 40));
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *this, char *a2)
{
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  CSIPhoneNumber::CSIPhoneNumber(this, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  CSIPhoneNumber::CSIPhoneNumber(this, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    xpc_object_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    xpc_object_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *this, long long *a2)
{
  *(void *)this = 0x8100000001;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  char v3 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 60) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_DWORD *)((char *)this + 111) = 0;
  *(void *)((char *)this + 116) = 0x400000000;
  *((unsigned char *)this + 124) = 0;
  *((unsigned char *)this + 128) = 0;
  CSIPhoneNumber::convertLettersToPhoneNumber(this);
}

std::string *CSIPhoneNumber::convertLettersToPhoneNumber(CSIPhoneNumber *this)
{
  uint64_t v1 = (char *)this + 32;
  if (*((char *)this + 55) < 0) {
    uint64_t v1 = (unsigned char *)*((void *)this + 4);
  }
  uint64_t v15 = (std::string *)((char *)this + 32);
  BOOL v2 = *v1 == 43;
  if (*v1 == 43) {
    int v3 = 145;
  }
  else {
    int v3 = 129;
  }
  *((_DWORD *)this + 1) = v3;
  long long v4 = (std::string *)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    *((void *)this + 2) = 0;
    size_t v5 = (unsigned char *)*((void *)this + 1);
  }
  else
  {
    *((unsigned char *)this + 31) = 0;
    size_t v5 = (char *)this + 8;
  }
  *size_t v5 = 0;
  LOBYTE(v6) = v1[v2];
  if ((_BYTE)v6)
  {
    uint64_t v7 = &v1[v2 + 1];
    uint64_t v8 = MEMORY[0x1E4F14390];
    while ((v6 & 0x80) == 0)
    {
      int v9 = *(_DWORD *)(v8 + 4 * (char)v6 + 60);
      if ((v9 & 0x100) != 0) {
        goto LABEL_16;
      }
      if ((v9 & 0x400) == 0) {
        goto LABEL_18;
      }
LABEL_27:
      std::string::push_back(v4, v6);
LABEL_28:
      int v13 = *v7++;
      LOBYTE(v6) = v13;
      if (!v13) {
        goto LABEL_29;
      }
    }
    if (!__maskrune((char)v6, 0x100uLL))
    {
LABEL_18:
      if (v6 > 0x3Fu || ((1 << v6) & 0x88001C0800000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_16:
    __darwin_ct_rune_t v10 = __toupper((char)v6) << 24;
    if (v10 > 1342177279)
    {
      unsigned int v11 = v10 >> 26;
      if (HIBYTE(v10) < 0x57u) {
        char v12 = 56;
      }
      else {
        char v12 = 57;
      }
      if (v11 >= 0x15) {
        LOBYTE(v6) = v12;
      }
      else {
        LOBYTE(v6) = 55;
      }
    }
    else
    {
      unsigned int v6 = ((21846 * ((v10 >> 24) - 65)) >> 16) + ((21846 * ((v10 >> 24) - 65)) >> 31) + 50;
    }
    goto LABEL_27;
  }
LABEL_29:

  return std::string::operator=(v15, v4);
}

void ___ZL26_CTServerConnectionDestroyPKv_block_invoke_2(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  int v3 = (const void *)v2[3];
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1 + 32) + 24) = 0;
    BOOL v2 = *(void **)(a1 + 32);
  }
  if (MEMORY[0x1853203E0](*v2) == MEMORY[0x1E4F14578])
  {
    long long v4 = *(xpc_object_t **)(a1 + 32);
    xpc_object_t v5 = *v4;
    if (*v4) {
      xpc_retain(*v4);
    }
    else {
      xpc_object_t v5 = xpc_null_create();
    }
    barrier[0] = MEMORY[0x1E4F143A8];
    barrier[1] = 1174405120;
    barrier[2] = ___ZL26_CTServerConnectionDestroyPKv_block_invoke_3;
    barrier[3] = &__block_descriptor_tmp_56;
    xpc_object_t object = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc_connection_send_barrier((xpc_connection_t)v5, barrier);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 120);
  if (v7)
  {
    CTServerState::dispatchToClient_sync(v6, v7);
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = *(const void **)(v8 + 120);
    *(void *)(v8 + 120) = 0;
    if (v9) {
      _Block_release(v9);
    }
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unsigned int v11 = *(const void **)(v10 + 112);
  *(void *)(v10 + 112) = 0;
  if (v11) {
    _Block_release(v11);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  int v13 = *(NSObject **)(v12 + 8);
  *(void *)(v12 + 8) = 0;
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = (void *)v14[5];
  v14 += 5;
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy((uint64_t)(v14 - 1), v15);
  *(v14 - 1) = v14;
  *uint64_t v14 = 0;
  v14[1] = 0;
  xpc_object_t v16 = xpc_null_create();
  uint64_t v17 = *(void ***)(a1 + 32);
  xpc_object_t v18 = xpc_null_create();
  uint64_t v19 = *v17;
  const void *v17 = v16;
  xpc_release(v19);
  xpc_release(v18);
}

void std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy(a1, a2[1]);
    long long v4 = (const void *)a2[5];
    if (v4) {
      _Block_release(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t MCCAndMNC::MCCAndMNC(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = -1;
  *(void *)(a1 + 8) = 0;
  int v3 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = 0;
  long long v4 = (std::string *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 >= 4)
  {
    std::string::basic_string(&v8, (const std::string *)a2, 0, 3uLL, (std::allocator<char> *)&v9);
    MCC::MCC((uint64_t)&v9, (long long *)&v8);
    *(_WORD *)a1 = v9;
    std::string::operator=(v3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    std::string::basic_string(&v8, (const std::string *)a2, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
    MCC::MCC((uint64_t)&v9, (long long *)&v8);
    *(_WORD *)(a1 + 32) = v9;
    std::string::operator=(v4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<objc_object *,anonymous namespace'::DelegateContext>,std::__map_value_compare<anonymous namespace',std::__map_value_compare,std::less<anonymous namespace'>,true>,std::allocator<std::__map_value_compare>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    operator delete(a2);
  }
}

void sub_18445C224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void ___Z11hasBasebandv_block_invoke()
{
  CFTypeRef cf = 0;
  uint64_t v1 = MGCopyAnswer();
  ctu::cf::CFSharedRef<__CFBoolean const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&v1);
  LOBYTE(v1) = 0;
  ctu::cf::assign((ctu::cf *)&v1, (BOOL *)cf, v0);
  hasBaseband(void)::hasBaseband = v1;
  if (cf) {
    CFRelease(cf);
  }
}

void *ctu::cf::CFSharedRef<__CFBoolean const>::CFSharedRef<void const,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v4 = *a2;
  if (*a2 && (CFTypeID v5 = CFGetTypeID(*a2), v5 == CFBooleanGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2) {
      CFRelease(*a2);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_18445C5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18445C930(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18445CA78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18445CB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientMux removeDelegate:]::$_1>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

void sub_18445CBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CoreTelephonyClient;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_18445CD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CoreTelephonyClientMux;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_18445CF44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18445D0E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

uint64_t CTLogClientCache()
{
  if (CTLogClientCache_once != -1) {
    dispatch_once(&CTLogClientCache_once, &__block_literal_global_24);
  }
  return CTLogClientCache_logger;
}

void std::__tree<std::__value_type<objc_selector *,anonymous namespace'::CachePolicy>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,anonymous namespace'::CachePolicy>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,anonymous namespace'::CachePolicy>>>::destroy(void *a1)
{
  if (a1)
  {
    operator delete(a1);
  }
}

uint64_t **std::map<objc_selector *,anonymous namespace'::CachePolicy>::map[abi:nn180100](uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  CFTypeRef v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    CFTypeID v5 = a2;
    uint64_t v6 = &a2[2 * a3];
    while (1)
    {
      uint64_t v7 = a1[1];
      std::string v8 = v4;
      if (*a1 != v4)
      {
        __int16 v9 = a1[1];
        uint64_t v10 = v4;
        if (v7)
        {
          do
          {
            std::string v8 = v9;
            __int16 v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            std::string v8 = (uint64_t *)v10[2];
            BOOL v11 = *v8 == (void)v10;
            uint64_t v10 = v8;
          }
          while (v11);
        }
        unint64_t v12 = *v5;
        if (v8[4] >= *v5) {
          break;
        }
      }
      if (v7) {
        int v13 = v8;
      }
      else {
        int v13 = v4;
      }
      if (v7) {
        uint64_t v14 = v8 + 1;
      }
      else {
        uint64_t v14 = v4;
      }
      if (!*v14) {
        goto LABEL_25;
      }
LABEL_28:
      v5 += 2;
      if (v5 == v6) {
        return a1;
      }
    }
    uint64_t v14 = v4;
    int v13 = v4;
    if (v7)
    {
      uint64_t v15 = a1[1];
      while (1)
      {
        while (1)
        {
          int v13 = v15;
          unint64_t v16 = v15[4];
          if (v12 >= v16) {
            break;
          }
          uint64_t v15 = (uint64_t *)*v13;
          uint64_t v14 = v13;
          if (!*v13) {
            goto LABEL_25;
          }
        }
        if (v16 >= v12) {
          goto LABEL_28;
        }
        uint64_t v15 = (uint64_t *)v13[1];
        if (!v15)
        {
          uint64_t v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_25:
    uint64_t v17 = operator new(0x30uLL);
    v17[2] = *(_OWORD *)v5;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v13;
    *uint64_t v14 = (uint64_t)v17;
    xpc_object_t v18 = (uint64_t *)**a1;
    if (v18)
    {
      *a1 = v18;
      uint64_t v17 = (_OWORD *)*v14;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    goto LABEL_28;
  }
  return a1;
}

void sub_18445D450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<objc_object *,anonymous namespace'::DelegateContext>,std::__map_value_compare<anonymous namespace',std::__map_value_compare,std::less<anonymous namespace'>,true>,std::allocator<std::__map_value_compare>>::erase(uint64_t **a1, uint64_t *a2)
{
  int v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      CFTypeRef v4 = v3;
      int v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    CFTypeID v5 = a2;
    do
    {
      CFTypeRef v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      CFTypeID v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, a2);
  operator delete(a2);
  return v4;
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<objc_object *,anonymous namespace'::DelegateContext>,void *>>>::destroy[abi:nn180100]<std::pair<objc_object * const,std::__value_type<objc_object *,anonymous namespace'::DelegateContext>>,void,void>(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 16));
  BOOL v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_release(v2);
  }
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    CFTypeRef v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      CFTypeRef v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      unint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        unint64_t v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      long long v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *long long v24 = v23;
      goto LABEL_72;
    }
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  std::string::size_type v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    std::string::size_type v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  long long v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void _CTServerConnectionDestroy(uint64_t a1)
{
  _CTServerConnectionCleanup(a1);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  *(void *)(v2 + 128) = 0;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, (const void *)a1);
  CFTypeRef v4 = *(_xpc_connection_s **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 40) = 0;
    barrier[0] = MEMORY[0x1E4F143A8];
    barrier[1] = 0x40000000;
    barrier[2] = ___ZL26_CTServerConnectionDestroyPKv_block_invoke;
    barrier[3] = &__block_descriptor_tmp_55;
    void barrier[4] = v4;
    xpc_connection_send_barrier(v4, barrier);
  }
  mach_port_name_t v5 = *(_DWORD *)(a1 + 36);
  if (v5)
  {
    BOOL v6 = (ipc_space_t *)MEMORY[0x1E4F14960];
    mach_port_mod_refs(*MEMORY[0x1E4F14960], v5, 1u, -1);
    mach_port_deallocate(*v6, *(_DWORD *)(a1 + 36));
    *(_DWORD *)(a1 + 36) = 0;
  }
  uint64_t v7 = *(NSObject **)(a1 + 16);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZL26_CTServerConnectionDestroyPKv_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_57;
  v8[4] = v2;
  dispatch_async(v7, v8);
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
}

void _CTServerConnectionCleanup(uint64_t a1)
{
  mach_port_t v1 = *(_DWORD *)(a1 + 36);
  if (v1)
  {
    uint64_t v2 = CFMachPortCreateWithPort(0, v1, 0, 0, 0);
    if (v2)
    {
      int v3 = v2;
      CFMachPortInvalidate(v2);
      CFRelease(v3);
    }
  }
}

void sub_18445DBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18445DC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18445DD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18445E0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18445E2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18445E3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  unint64_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_18445E474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18445E67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18445E76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL MCC::valid(MCC *this)
{
  if ((__int16)this->var0 == -1) {
    return 0;
  }
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0) {
    unint64_t var1 = this->var1.var0.var0.var0.var1.var1;
  }
  else {
    unint64_t var1 = *((unsigned __int8 *)&this->var1.var0.var0.var0.var1 + 23);
  }
  return var1 != 0;
}

unint64_t _CTServerConnectionGetRadioModuleIsDead(uint64_t a1, unsigned char *a2)
{
  if (hasBaseband())
  {
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("GetRadioModuleIsDead");
    return 0x1300000001;
  }
}

uint64_t hasBaseband(void)
{
  if (hasBaseband(void)::onceToken != -1) {
    dispatch_once(&hasBaseband(void)::onceToken, &__block_literal_global_15);
  }
  return hasBaseband(void)::hasBaseband;
}

void ___ZN9CCMonitor8instanceEv_block_invoke()
{
}

void CCMonitor::CCMonitor(CCMonitor *this)
{
  *(void *)this = dispatch_queue_create("CCMonitor", 0);
  *((_DWORD *)this + 2) = -1;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = -1;
  *((unsigned char *)this + 28) = 1;
  *((void *)this + 4) = 850045863;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  BOOL v2 = os_log_type_enabled(0, OS_LOG_TYPE_DEBUG);
  if (v2) {
    CCMonitor::CCMonitor(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_18445EB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

os_log_t ___Z10sMsgCtrLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.CoreTelephony", "msg.ctr");
  sMsgCtrLog(void)::logger = (uint64_t)result;
  return result;
}

os_log_t __CTLogPacket_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "Packet");
  CTLogPacket_logger = (uint64_t)result;
  return result;
}

os_log_t __CTLogMessageCenter_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "MessageCenter");
  CTLogMessageCenter_logger = (uint64_t)result;
  return result;
}

void sub_18445ECD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CTTelephonyCenterSetDefaultRunloop(__CFRunLoop *a1, __CFString *a2)
{
  return sCTTelephonyCenterSetDefaultRunloop(0, a1, a2);
}

uint64_t MNC::getIntegerWidth(MNC *this)
{
  if (*((char *)this + 31) < 0) {
    uint64_t v1 = *((void *)this + 2);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 31);
  }
  if (v1 == 3) {
    return 3;
  }
  else {
    return 2;
  }
}

void sub_18445F0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 96), 8);

  _Unwind_Resume(a1);
}

void _CTServerConnectionSetTargetQueue(void *a1, NSObject *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = a1[3];
    CFRetain(a1);
    dispatch_retain(a2);
    uint64_t v5 = a1[2];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___CTServerConnectionSetTargetQueue_block_invoke;
    block[3] = &__block_descriptor_tmp_32;
    block[4] = v4;
    dispatch_object_t object = a2;
    dispatch_retain(a2);
    uint64_t v8 = a1;
    dispatch_async(v5, block);
    if (object) {
      dispatch_release(object);
    }
    dispatch_release(a2);
  }
}

os_log_t __CTLogClientCache_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "ClientCache");
  CTLogClientCache_logger = (uint64_t)result;
  return result;
}

void sub_18445F380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  unint64_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_18445F554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18445F61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18445F760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18445F880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18445F914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTXPCServiceSubscriptionContext>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    uint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_18445FA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CCMonitor::initialize(CCMonitor *this)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, this, (CFNotificationCallback)CCMonitor::sHandleDaemonReady, @"kCTDaemonReadyNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  *((void *)this + 2) = 1;
  operator new();
}

unint64_t _CTServerConnectionRegisterBlockForNotification(uint64_t a1, CFStringRef theString2, uint64_t a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  int v5 = sCTEventForNotificationString(theString2);
  if (!v5) {
    return 0;
  }

  return _CTServerConnectionRegisterForEvent(a1, v5, a3);
}

unint64_t _CTServerConnectionRegisterForNotification(uint64_t a1, CFStringRef theString2)
{
  if (!a1) {
    return 0x1600000001;
  }
  int v3 = sCTEventForNotificationString(theString2);
  if (!v3) {
    return 0;
  }

  return _CTServerConnectionRegisterForEvent(a1, v3, 0);
}

uint64_t sCTEventForNotificationString(CFStringRef theString2)
{
  {
    unk_1EB2879E0 = @"CTPhoneNumberRegistrationRequestFinishedNotification";
    qword_1EB2879E8 = @"CTPhoneNumberRegistrationResponseNotification";
    unk_1EB2879F0 = @"CTPhoneNumberRegistrationStateNotification";
    qword_1EB2879F8 = @"RadioTransmitSpeedNotification";
    unk_1EB287A00 = @"kCTAudioCallDropToneCompleteNotification";
    qword_1EB287A08 = @"kCTAudioSampleRateSwitchCompleteNotification";
    unk_1EB287A10 = @"kCTAudioTTYModeStatusNotification";
    qword_1EB287A18 = @"kCTAudioVocoderInfoNotification";
    unk_1EB287A20 = @"kCTAudioVoiceMuteStatusNotification";
    qword_1EB287A28 = @"kCTBBKeepAliveOffloadStartNotification";
    unk_1EB287A30 = @"kCTBBKeepAliveOffloadStopNotification";
    qword_1EB287A38 = @"kCTCallAlternateStatusChangeNotification";
    unk_1EB287A40 = @"kCTCallAudioToneRelayNotification";
    qword_1EB287A48 = @"kCTCallBarredNotification";
    unk_1EB287A50 = @"kCTCallCauseCodeNotification";
    qword_1EB287A58 = @"kCTCallControlFailureNotification";
    unk_1EB287A60 = @"kCTCallDeflectedNotification";
    qword_1EB287A68 = @"kCTCallForwardedNotification";
    unk_1EB287A70 = @"kCTCallForwardingActiveNotification";
    qword_1EB287A78 = @"kCTCallHandoverEndedNotification";
    unk_1EB287A80 = @"kCTCallHandoverLikelyNotification";
    qword_1EB287A88 = @"kCTCallHandoverStartedNotification";
    unk_1EB287A90 = @"kCTCallIdentificationChangeNotification";
    qword_1EB287A98 = @"kCTCallIdentificationSuppressionRejectedNotification";
    unk_1EB287AA0 = @"kCTCallInputFrequencyLevelChangeNotification";
    qword_1EB287AA8 = @"kCTCallManagementStateChangeNotification";
    unk_1EB287AB0 = @"kCTCallMediaStatusActiveNotification";
    qword_1EB287AB8 = @"kCTCallMediaStatusInactiveNotification";
    unk_1EB287AC0 = @"kCTCallOutputFrequencyLevelChangeNotification";
    qword_1EB287AC8 = @"kCTCallServiceRequestAnswerNotification";
    unk_1EB287AD0 = @"kCTCallServiceRequestDialNotification";
    qword_1EB287AD8 = @"kCTCallStatusBecameAlertingNotification";
    unk_1EB287AE0 = @"kCTCallStatusChangeNotification";
    qword_1EB287AE8 = @"kCTCallSubTypeChangeNotification";
    unk_1EB287AF0 = @"kCTCarrierEntitlementsAuthTokenAvailable";
    qword_1EB287AF8 = @"kCTCarrierEntitlementsInfoAvailableNotification";
    unk_1EB287B00 = @"kCTCarrierSettingsNewCarrierNotification";
    qword_1EB287B08 = @"kCTCarrierSettingsNewOperatorNotification";
    unk_1EB287B10 = @"kCTCellMonitorUpdateNotification";
    qword_1EB287B18 = @"kCTCellularDataPlanStatusNotification";
    unk_1EB287B20 = @"kCTCellularDataSettingsChangeNotification";
    qword_1EB287B28 = @"kCTCellularDataUsageInfoNotfication";
    unk_1EB287B30 = @"kCTCellularPlanSimSubscriptionStatusNotification";
    qword_1EB287B38 = @"kCTConnectionInvalidatedNotification";
    unk_1EB287B40 = @"kCTDTMFDigitsChangedNotification";
    qword_1EB287B48 = @"kCTDaemonReadyNotification";
    unk_1EB287B50 = @"kCTDataServiceAvailabilityNotification";
    qword_1EB287B58 = @"kCTEMBMSUpdateNotification";
    unk_1EB287B60 = @"kCTEmergencyCallBackModeStatusNotification";
    qword_1EB287B68 = @"kCTEmergencyCallContextNotification";
    unk_1EB287B70 = @"kCTEmergencyCallStatusChangeNotification";
    qword_1EB287B78 = @"kCTEntitlementsDiagnosticsNotification";
    unk_1EB287B80 = @"kCTEventSMSMessageCellBroadcastStringGeofencingStarted";
    qword_1EB287B88 = @"kCTIMSConnectionChangedNotification";
    unk_1EB287B90 = @"kCTIndicatorRadioTransmitNotification";
    qword_1EB287B98 = @"kCTIndicatorsBeginStateDumpNotification";
    unk_1EB287BA0 = @"kCTIndicatorsDstUpdateNotification";
    qword_1EB287BA8 = @"kCTIndicatorsEndStateDumpNotification";
    unk_1EB287BB0 = @"kCTIndicatorsSUPLINITNotification";
    qword_1EB287BB8 = @"kCTIndicatorsSignalStrengthNotification";
    unk_1EB287BC0 = @"kCTIndicatorsTimeUpdateNotification";
    qword_1EB287BC8 = @"kCTIndicatorsUnconditionalCallForwardingNotification";
    unk_1EB287BD0 = @"kCTIndicatorsVoiceMailNotification";
    qword_1EB287BD8 = @"kCTMMSConfigurationChangeNotification";
    qword_1EB287BE0 = @"kCTMessageReceiveDeferredNotification";
    qword_1EB287BE8 = @"kCTMessageReceivedNotification";
    qword_1EB287BF0 = @"kCTMessageSendErrorNotification";
    qword_1EB287BF8 = @"kCTMessageSendProgressNotification";
    qword_1EB287C00 = @"kCTMessageSentNotification";
    qword_1EB287C08 = @"kCTOtaspStatusChangeNotification";
    qword_1EB287C10 = @"kCTPerAppNetworkDataAccessPolicyChangedNotification";
    qword_1EB287C18 = @"kCTPhoneBookErrorNotification";
    qword_1EB287C20 = @"kCTPhoneBookFetchNotification";
    qword_1EB287C28 = @"kCTPhoneBookSelectedNotification";
    qword_1EB287C30 = @"kCTPhoneBookWriteNotification";
    qword_1EB287C38 = @"kCTPostponementStatusChangeNotification";
    qword_1EB287C40 = @"kCTPowerRadioModuleDeadNotification";
    qword_1EB287C48 = @"kCTPowerRadioModuleEnterLowPowerNotification";
    qword_1EB287C50 = @"kCTPowerRadioModuleEnteredLowPowerNotification";
    qword_1EB287C58 = @"kCTPowerRadioModuleExitLowPowerNotification";
    qword_1EB287C60 = @"kCTPowerRadioModuleNotReadyErrorNotification";
    qword_1EB287C68 = @"kCTPowerRadioModuleReadyNotification";
    qword_1EB287C70 = @"kCTPullCallIsPossibleChangeNotification";
    qword_1EB287C78 = @"kCTQualityOfServiceFlowStatusChangeNotification";
    qword_1EB287C80 = @"kCTRadioBasebandOperatingModeChangedNotification";
    qword_1EB287C88 = @"kCTRadioEnhancedLinkQualityNotification";
    qword_1EB287C90 = @"kCTRadioEnhancedLinkQualitySupportedMetricsNotification";
    qword_1EB287C98 = @"kCTRadioModuleUplinkChangedNotification";
    qword_1EB287CA0 = @"kCTRadioStateChangedNotification";
    qword_1EB287CA8 = @"kCTRadioVoiceLinkQualityNotification";
    qword_1EB287CB0 = @"kCTRegistrationCauseCodeNotification";
    qword_1EB287CB8 = @"kCTRegistrationCellChangedNotification";
    qword_1EB287CC0 = @"kCTRegistrationCellularDataPlanActivateFailedNotification";
    qword_1EB287CC8 = @"kCTRegistrationCellularDataPlanHideIndicatorNotification";
    qword_1EB287CD0 = @"kCTRegistrationCustomerServiceProfileUpdateNotification";
    qword_1EB287CD8 = @"kCTRegistrationDataActivateFailedNotification";
    qword_1EB287CE0 = @"kCTRegistrationDataStatusChangedNotification";
    qword_1EB287CE8 = @"kCTRegistrationDisplayStatusChangedNotification";
    qword_1EB287CF0 = @"kCTRegistrationNetworkListAvailableNotification";
    qword_1EB287CF8 = @"kCTRegistrationNetworkListFailedNotification";
    qword_1EB287D00 = @"kCTRegistrationNewServingNetworkNotification";
    qword_1EB287D08 = @"kCTRegistrationOperatorNameChangedNotification";
    qword_1EB287D10 = @"kCTRegistrationStatusChangedNotification";
    qword_1EB287D18 = @"kCTReliableNetworkFallbackToCellularChangedNotification";
    qword_1EB287D20 = @"kCTRestrictedForegroundResumeNotification";
    qword_1EB287D28 = @"kCTSIMSupportSIMNewInsertionNotification";
    qword_1EB287D30 = @"kCTSIMSupportSIMPINEntryErrorNotification";
    qword_1EB287D38 = @"kCTSIMSupportSIMPUKEntryErrorNotification";
    qword_1EB287D40 = @"kCTSIMSupportSIMStatusChangeNotification";
    qword_1EB287D48 = @"kCTSIMToolkitCallSetUpNotification";
    qword_1EB287D50 = @"kCTSIMToolkitControlCallNotification";
    qword_1EB287D58 = @"kCTSIMToolkitControlSSNotification";
    qword_1EB287D60 = @"kCTSIMToolkitControlUSSDNotification";
    qword_1EB287D68 = @"kCTSIMToolkitDisplayListNotification";
    qword_1EB287D70 = @"kCTSIMToolkitDisplayTextNotification";
    qword_1EB287D78 = @"kCTSIMToolkitGetInputNotification";
    qword_1EB287D80 = @"kCTSIMToolkitIdleTextNotification";
    qword_1EB287D88 = @"kCTSIMToolkitLanguageNotification";
    qword_1EB287D90 = @"kCTSIMToolkitLocalInformationNotification";
    qword_1EB287D98 = @"kCTSIMToolkitPlayToneNotification";
    qword_1EB287DA0 = @"kCTSIMToolkitRequestUserAttentionNotification";
    qword_1EB287DA8 = @"kCTSIMToolkitSentDTMFNotification";
    qword_1EB287DB0 = @"kCTSIMToolkitSentSMSMessageNotification";
    qword_1EB287DB8 = @"kCTSIMToolkitSentSSNotification";
    qword_1EB287DC0 = @"kCTSIMToolkitSentUSSDNotification";
    qword_1EB287DC8 = @"kCTSIMToolkitSessionCompleteNotification";
    qword_1EB287DD0 = @"kCTSMSCellBroadcastStringReceivedNotification";
    qword_1EB287DD8 = @"kCTSMSCellBroadcastTelemetryNotification";
    qword_1EB287DE0 = @"kCTSMSClass0StringReceivedNotification";
    qword_1EB287DE8 = @"kCTSMSDatabaseFullNotification";
    qword_1EB287DF0 = @"kCTSMSMessageReceivedNotification";
    qword_1EB287DF8 = @"kCTSMSMessageSendErrorNotificiation";
    qword_1EB287E00 = @"kCTSMSMessageSentNotification";
    qword_1EB287E08 = @"kCTSMSReadyStateNotification";
    qword_1EB287E10 = @"kCTSMSSignificantChangeNotification";
    qword_1EB287E18 = @"kCTSMSTestMessageReceivedNotification";
    qword_1EB287E20 = @"kCTSPCUnlockSuccessfulNotification";
    qword_1EB287E28 = @"kCTServiceProvisioningFailedNotification";
    qword_1EB287E30 = @"kCTServiceProvisioningStartedNotification";
    qword_1EB287E38 = @"kCTServiceProvisioningSuccessfulNotification";
    qword_1EB287E40 = @"kCTSettingCallCapabilitiesChangedNotification";
    qword_1EB287E48 = @"kCTSettingChangedNotification";
    qword_1EB287E50 = @"kCTSettingPhoneNumberAvailableNotification";
    qword_1EB287E58 = @"kCTSettingPhoneNumberChangedNotification";
    qword_1EB287E60 = @"kCTSettingRequestErrorNotification";
    qword_1EB287E68 = @"kCTSettingRequestSuccessNotification";
    qword_1EB287E70 = @"kCTSettingSaveErrorNotification";
    qword_1EB287E78 = @"kCTSettingSaveSuccessNotification";
    qword_1EB287E80 = @"kCTSetupAudioInterruptionsChangedNotification";
    qword_1EB287E88 = @"kCTSimSupportUICCAuthenticationInfoNotification";
    qword_1EB287E90 = @"kCTTimeAvailabilityNotification";
    qword_1EB287E98 = @"kCTTimeUpdateNotification";
    qword_1EB287EA0 = @"kCTTimezoneUpdateNotification";
    qword_1EB287EA8 = @"kCTUSSDSessionBeginNotification";
    qword_1EB287EB0 = @"kCTUSSDSessionEndNotification";
    qword_1EB287EB8 = @"kCTUSSDSessionErrorNotification";
    qword_1EB287EC0 = @"kCTUSSDSessionStringNotification";
    qword_1EB287EC8 = @"kCTUSSDSessionTerminatedNotification";
    qword_1EB287ED0 = @"kCTVVMAssertionActiveNotification";
    qword_1EB287ED8 = @"kCTVoicePrivacyStatusChangeNotification";
    qword_1EB287EE0 = @"kCTVoicemailDatabaseResetNotification";
    qword_1EB287EE8 = @"kCTVoicemailWakeupNotification";
  }
  unint64_t v2 = 163;
  do
  {
    uint64_t v4 = (const __CFString **)&v3[v2 >> 1];
    CFStringRef v6 = *v4;
    int v5 = (uint64_t *)(v4 + 1);
    if (CFStringCompare(v6, theString2, 0) == kCFCompareLessThan)
    {
      int v3 = v5;
      v2 += ~(v2 >> 1);
    }
    else
    {
      v2 >>= 1;
    }
  }
  while (v2);
  if (v3 == &-[CoreTelephonyClient supportsCellular]::onceToken) {
    return 0;
  }
  uint64_t result = CFEqual((CFTypeRef)*v3, theString2);
  if (!result) {
    return result;
  }
    return 0;
  else {
    return *(unsigned int *)((char *)&sCTEventForNotificationString(__CFString const*)::kRightMappedValues
  }
                           + (((char *)v3
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
LABEL_5:
      *a2 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v4) != MEMORY[0x1E4F14590]) {
    goto LABEL_5;
  }
  xpc_retain(v4);
LABEL_7:

  xpc_release(v4);
}

void CTServerState::sendNotification_sync(void *a1, int a2, const void *a3, const void *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a1[16])
  {
    if (a1[2] || a1[1])
    {
      {
        CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog = @"kCTRegistrationDisplayStatusChangedNotification";
      }
      uint64_t v7 = a1[5];
      if (!v7) {
        goto LABEL_25;
      }
      uint64_t v8 = a1 + 5;
      do
      {
        int v9 = *(_DWORD *)(v7 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          uint64_t v11 = (uint64_t *)v7;
        }
        else {
          uint64_t v11 = (uint64_t *)(v7 + 8);
        }
        if (!v10) {
          uint64_t v8 = (void *)v7;
        }
        uint64_t v7 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 5 && *((_DWORD *)v8 + 8) <= a2 && (uint64_t v12 = (const void *)v8[5]) != 0)
      {
        int v13 = _Block_copy(v12);
        if (a4)
        {
          CFRetain(a4);
          uint64_t v14 = &CTLogPacket_logger;
          if ((const void *)CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog == a3) {
            uint64_t v14 = &CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog;
          }
          if ((char *)v14
             - (char *)&CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog != 8
            && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v42 = a3;
            __int16 v43 = 2112;
            long long v44 = a4;
            _os_log_impl(&dword_18444A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Processing %@: %@", buf, 0x16u);
          }
        }
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 1174405120;
        v38[2] = ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke;
        v38[3] = &__block_descriptor_tmp_3;
        if (v13) {
          uint64_t v15 = _Block_copy(v13);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v39 = v15;
        xpc_object_t v40 = a4;
        CTServerState::dispatchToClient_sync((uint64_t)a1, v38);
        uint64_t v26 = v39;
        if (!v39) {
          goto LABEL_39;
        }
      }
      else
      {
LABEL_25:
        unint64_t v16 = (const void *)a1[14];
        if (!v16) {
          return;
        }
        int v13 = _Block_copy(v16);
        CFRetain(a3);
        if (a4)
        {
          CFRetain(a4);
          uint64_t v17 = &CTLogPacket_logger;
          if ((const void *)CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog == a3) {
            uint64_t v17 = &CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog;
          }
          if ((char *)v17
             - (char *)&CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog != 8
            && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v42 = a3;
            __int16 v43 = 2112;
            long long v44 = a4;
            _os_log_impl(&dword_18444A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Processing %@: %@", buf, 0x16u);
          }
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke_4;
        block[3] = &__block_descriptor_tmp_5;
        if (v13) {
          uint64_t v18 = _Block_copy(v13);
        }
        else {
          uint64_t v18 = 0;
        }
        aBlock = v18;
        CFTypeID v36 = a3;
        v37 = a4;
        CTServerState::dispatchToClient_sync((uint64_t)a1, block);
        uint64_t v26 = aBlock;
        if (!aBlock) {
          goto LABEL_39;
        }
      }
      _Block_release(v26);
LABEL_39:
      if (v13) {
        _Block_release(v13);
      }
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      CTServerState::sendNotification_sync((uint64_t)a3, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    CTServerState::sendNotification_sync((uint64_t)a3, v19, v20, v21, v22, v23, v24, v25);
  }
}

void ___ZL24_CTServerConnectXpc_syncP13CTServerStateP16dispatch_queue_sU13block_pointerFvvE_block_invoke(uint64_t a1, void *a2)
{
  xpc_object_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = MEMORY[0x1853203E0](a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 == MEMORY[0x1E4F14590])
  {
    if (v2)
    {
      xpc_retain(v2);
      xpc_object_t v14 = v2;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      if (!v14)
      {
        xpc_object_t v27 = xpc_null_create();
        xpc_release(0);
        goto LABEL_37;
      }
    }
    if (MEMORY[0x1853203E0](v14) == v5)
    {
      xpc_retain(v14);
      xpc_object_t v27 = v14;
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
    }
    xpc_release(v14);
    if (v2)
    {
      xpc_retain(v2);
LABEL_38:
      if (MEMORY[0x1853203E0](v2) == v5)
      {
        xpc_retain(v2);
        xpc_object_t v28 = v2;
        goto LABEL_41;
      }
LABEL_39:
      xpc_object_t v28 = xpc_null_create();
LABEL_41:
      uint64_t v29 = *(const void **)(v3 + 128);
      if (v29)
      {
        CFRetain(*(CFTypeRef *)(v3 + 128));
        uint64_t v38 = MEMORY[0x1E4F143A8];
        uint64_t v39 = 1174405120;
        xpc_object_t v40 = ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke;
        v41 = &__block_descriptor_tmp_89;
        uint64_t v42 = v3;
        __int16 v43 = v29;
        xpc_object_t object = v28;
        if (v28) {
          xpc_retain(v28);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        CTServerState::dispatchToClient_sync(v3, &v38);
        xpc_release(object);
      }
      xpc_release(v28);
      xpc_release(v2);
      xpc_release(v27);
      return;
    }
LABEL_37:
    xpc_object_t v2 = xpc_null_create();
    if (!v2) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v2 == (xpc_object_t)MEMORY[0x1E4F14528])
  {
    if (MEMORY[0x1853203E0](*(void *)v3) != MEMORY[0x1E4F14578]) {
      return;
    }
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = xpc_null_create();
    uint64_t v17 = *(void **)v3;
    *(void *)uint64_t v3 = v15;
    xpc_release(v17);
    xpc_release(v16);
    if (sNeverReconnect == 1) {
      *(unsigned char *)(v3 + 136) = 0;
    }
    if (*(_DWORD *)(v3 + 140) != 2) {
      *(_DWORD *)(v3 + 140) = 2;
    }
    uint64_t v18 = *(uint64_t **)(v3 + 40);
    if (!v18) {
      return;
    }
    uint64_t v19 = *(uint64_t **)(v3 + 40);
    while (1)
    {
      int v20 = *((_DWORD *)v19 + 8);
      if (v20 < 0)
      {
        if (v20 == -1)
        {
          char v21 = 0;
          while (1)
          {
LABEL_77:
            int v37 = *((_DWORD *)v18 + 8);
            if (v37 <= -2)
            {
              if (v37 == -2) {
                goto LABEL_82;
              }
              ++v18;
            }
            uint64_t v18 = (uint64_t *)*v18;
            if (!v18)
            {
              if (v21) {
                return;
              }
LABEL_82:
              if (*(unsigned char *)(v3 + 136))
              {
                CTServerState::sendNotification_sync((void *)v3, -2, @"kCTConnectionInvalidatedNotification", 0);
              }
              return;
            }
          }
        }
        ++v19;
      }
      uint64_t v19 = (uint64_t *)*v19;
      if (!v19)
      {
        char v21 = 1;
        goto LABEL_77;
      }
    }
  }
  if (v2 != (xpc_object_t)MEMORY[0x1E4F14520])
  {
    if (v2 == (xpc_object_t)MEMORY[0x1E4F14550]) {
      return;
    }
    CFStringRef v6 = (void *)MEMORY[0x185320300](v2);
    uint64_t v7 = **(NSObject ***)(v3 + 80);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      ___ZL24_CTServerConnectXpc_syncP13CTServerStateP16dispatch_queue_sU13block_pointerFvvE_block_invoke_cold_1((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
      if (!v6) {
        return;
      }
    }
    else if (!v6)
    {
      return;
    }
    free(v6);
    return;
  }
  uint64_t v22 = *(void *)(v3 + 48);
  if (!v22) {
    goto LABEL_65;
  }
  uint64_t v23 = *(uint64_t **)(v3 + 40);
  if (!v23)
  {
    int v30 = 1;
    goto LABEL_64;
  }
  uint64_t v24 = *(uint64_t **)(v3 + 40);
  while (1)
  {
    int v25 = *((_DWORD *)v24 + 8);
    if (v25 < 0) {
      break;
    }
LABEL_28:
    uint64_t v24 = (uint64_t *)*v24;
    if (!v24)
    {
      char v26 = 1;
      goto LABEL_50;
    }
  }
  if (v25 != -1)
  {
    ++v24;
    goto LABEL_28;
  }
  char v26 = 0;
LABEL_50:
  uint64_t v31 = *(uint64_t **)(v3 + 40);
  while (2)
  {
    int v32 = *((_DWORD *)v31 + 8);
    if (v32 > -3)
    {
LABEL_54:
      uint64_t v31 = (uint64_t *)*v31;
      if (!v31)
      {
        int v30 = 1;
        goto LABEL_57;
      }
      continue;
    }
    break;
  }
  if (v32 != -3)
  {
    ++v31;
    goto LABEL_54;
  }
  int v30 = 0;
  do
  {
LABEL_57:
    int v33 = *((_DWORD *)v23 + 8);
    if (v33 <= -2)
    {
      if (v33 == -2) {
        goto LABEL_62;
      }
      ++v23;
    }
    uint64_t v23 = (uint64_t *)*v23;
  }
  while (v23);
  if (v26) {
    goto LABEL_64;
  }
LABEL_62:
  if (*(unsigned char *)(v3 + 136)) {
    CTServerState::sendNotification_sync((void *)v3, -2, @"kCTConnectionInvalidatedNotification", 0);
  }
LABEL_64:
  if (v22 == (v30 ^ 1)) {
LABEL_65:
  }
    BOOL v34 = *(void *)(v3 + 72) == 0;
  else {
    BOOL v34 = 0;
  }
  if (sNeverReconnect == 1)
  {
    *(unsigned char *)(v3 + 136) = 0;
  }
  else
  {
    if (!*(unsigned char *)(v3 + 136)) {
      BOOL v34 = 1;
    }
    if (!v34)
    {
      xpc_object_t v35 = *(const void **)(v3 + 128);
      if (v35)
      {
        CFTypeID v36 = **(NSObject ***)(v3 + 80);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v38) = 0;
          _os_log_impl(&dword_18444A000, v36, OS_LOG_TYPE_DEFAULT, "#I Connection interrupted. Attempting to reestablish connection", (uint8_t *)&v38, 2u);
        }
        CFRetain(v35);
        uint64_t v38 = MEMORY[0x1E4F143A8];
        uint64_t v39 = 0x40000000;
        xpc_object_t v40 = ___ZL12_XpcCallbackPvP13CTServerState_block_invoke;
        v41 = &__block_descriptor_tmp_64_0;
        uint64_t v42 = v3;
        __int16 v43 = v35;
        CTServerState::dispatchToClient_sync(v3, &v38);
      }
    }
  }
}

void CTServerState::dispatchToClient_sync(uint64_t a1, dispatch_block_t block)
{
  uint64_t v3 = *(__CFRunLoop **)(a1 + 16);
  if (v3)
  {
    if (*(void *)(a1 + 24)) {
      uint64_t v4 = *(const void **)(a1 + 24);
    }
    else {
      uint64_t v4 = (const void *)*MEMORY[0x1E4F1D418];
    }
    CFRunLoopPerformBlock(*(CFRunLoopRef *)(a1 + 16), v4, block);
    CFRunLoopWakeUp(v3);
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    if (v5)
    {
      dispatch_async(v5, block);
    }
  }
}

const __CFString *SymbolMapping::getSymbolMapping(const __CFString *this, const __CFString *a2)
{
  CFStringRef result = (const __CFString *)sGetCanonicalizedNotificationString(this);
  if (!result) {
    return this;
  }
  return result;
}

uint64_t sGetCanonicalizedNotificationString(CFStringRef theString2)
{
  {
    *(void *)algn_1EB286CE8 = @"kCFSIMToolkitNextAction";
    qword_1EB286CF0 = @"kCFSIMToolkitNextActionDisplayList";
    unk_1EB286CF8 = @"kCFSIMToolkitNextActionDisplayText";
    qword_1EB286D00 = @"kCFSIMToolkitNextActionGetInput";
    unk_1EB286D08 = @"kCFSIMToolkitNextActionLaunchBrowser";
    qword_1EB286D10 = @"kCFSIMToolkitNextActionOther";
    unk_1EB286D18 = @"kCFSIMToolkitNextActionPlayTone";
    qword_1EB286D20 = @"kCFSIMToolkitNextActionSendSMS";
    unk_1EB286D28 = @"kCFSIMToolkitNextActionSendSS";
    qword_1EB286D30 = @"kCFSIMToolkitNextActionSendUSSD";
    unk_1EB286D38 = @"kCFSIMToolkitNextActionSetUpCall";
    qword_1EB286D40 = @"kCTCallBarringSettingAvailableNotification";
    unk_1EB286D48 = @"kCTCallBarringSettingReqeustErrorNotification";
    qword_1EB286D50 = @"kCTCallBarringSettingSaveErrorNotification";
    unk_1EB286D58 = @"kCTCallBarringSettingSavedNotification";
    qword_1EB286D60 = @"kCTCallForwardingSettingAvailableNotification";
    unk_1EB286D68 = @"kCTCallForwardingSettingReqeustErrorNotification";
    qword_1EB286D70 = @"kCTCallForwardingSettingSaveErrorNotification";
    unk_1EB286D78 = @"kCTCallForwardingSettingSavedNotification";
    qword_1EB286D80 = @"kCTCallWaitingSettingAvailableNotification";
    unk_1EB286D88 = @"kCTCallWaitingSettingReqeustErrorNotification";
    qword_1EB286D90 = @"kCTCallWaitingSettingSaveErrorNotification";
    unk_1EB286D98 = @"kCTCallWaitingSettingSavedNotification";
    qword_1EB286DA0 = @"kCTCallingLineIdRestrictionSettingAvailableNotification";
    unk_1EB286DA8 = @"kCTCallingLineIdRestrictionSettingReqeustErrorNotification";
    qword_1EB286DB0 = @"kCTCallingLineIdRestrictionSettingSaveErrorNotification";
    unk_1EB286DB8 = @"kCTCallingLineIdRestrictionSettingSavedNotification";
    qword_1EB286DC0 = @"kCTCallingLinePresentationSettingAvailableNotification";
    unk_1EB286DC8 = @"kCTCallingLinePresentationSettingReqeustErrorNotification";
    qword_1EB286DD0 = @"kCTCampOnly";
    unk_1EB286DD8 = @"kCTCapabilityAgent3";
    qword_1EB286DE0 = @"kCTCapabilityBrandedCallingInfo";
    unk_1EB286DE8 = @"kCTCapabilityCanChangeSetting";
    qword_1EB286DF0 = @"kCTCapabilityCanChangeSettingEnableStillProvisioning";
    unk_1EB286DF8 = @"kCTCapabilityCannotChangeSettingNeedToCallCarrier";
    qword_1EB286E00 = @"kCTCapabilityNetworkSlicing";
    unk_1EB286E08 = @"kCTCapabilityPhoneServices";
    qword_1EB286E10 = @"kCTCapabilitySatellite";
    unk_1EB286E18 = @"kCTCapabilityTurnOffCellular";
    qword_1EB286E20 = @"kCTCapabilityVoLTE";
    unk_1EB286E28 = @"kCTCapabilityWiFiCalling";
    qword_1EB286E30 = @"kCTConnectedLineIdRestrictionSettingAvailableNotification";
    unk_1EB286E38 = @"kCTConnectedLineIdRestrictionSettingReqeustErrorNotification";
    qword_1EB286E40 = @"kCTConnectedLinePresentationSettingAvailableNotification";
    unk_1EB286E48 = @"kCTConnectedLinePresentationSettingReqeustErrorNotification";
    qword_1EB286E50 = @"kCTEmergencyCallBackMode";
    unk_1EB286E58 = @"kCTEncryptedIdentityWiFiCalling";
    qword_1EB286E60 = @"kCTEncryptedIdentityWiFiHotspot";
    unk_1EB286E68 = @"kCTIMSConnectionType";
    qword_1EB286E70 = @"kCTIMSConnectionTypeCellular";
    unk_1EB286E78 = @"kCTIMSConnectionTypeWifi";
    qword_1EB286E80 = @"kCTIMSIsConnectionUp";
    unk_1EB286E88 = @"kCTIMSTransportType";
    qword_1EB286E90 = @"kCTIMSTransportTypeCellular";
    unk_1EB286E98 = @"kCTIMSTransportTypeWiFi";
    qword_1EB286EA0 = @"kCTIndicatorsDstUpdateDstIsInEffect";
    unk_1EB286EA8 = @"kCTIndicatorsGradedSignalStrength";
    qword_1EB286EB0 = @"kCTIndicatorsRawSignalStrength";
    unk_1EB286EB8 = @"kCTIndicatorsSignalStrength";
    qword_1EB286EC0 = @"kCTIndicatorsSignalStrengthDisplayValue";
    unk_1EB286EC8 = @"kCTIndicatorsSignalStrengthMaxDisplayValue";
    qword_1EB286ED0 = @"kCTIndicatorsTimeUpdateAbsoluteTime";
    unk_1EB286ED8 = @"kCTIndicatorsTimeUpdateTimeZoneOffset";
    qword_1EB286EE0 = @"kCTIndicatorsUnconditionalCallForwarding";
    qword_1EB286EE8 = @"kCTLTEWithCDRXStateKey";
    qword_1EB286EF0 = @"kCTLTEWithCDRXStateOff";
    qword_1EB286EF8 = @"kCTLTEWithCDRXStateOn";
    qword_1EB286F00 = @"kCTLTEWithCDRXStateUnknown";
    qword_1EB286F08 = @"kCTNetworkSlicingCategories";
    qword_1EB286F10 = @"kCTNetworkSlicingCategoryID";
    qword_1EB286F18 = @"kCTNetworkSlicingCategoryName";
    qword_1EB286F20 = @"kCTNetworkSlicingCategoryState";
    qword_1EB286F28 = @"kCTRegistrationAbbreviatedOperatorName";
    qword_1EB286F30 = @"kCTRegistrationBandActive";
    qword_1EB286F38 = @"kCTRegistrationBandSupported";
    qword_1EB286F40 = @"kCTRegistrationC2KBaseId";
    qword_1EB286F48 = @"kCTRegistrationC2KBaseLat";
    qword_1EB286F50 = @"kCTRegistrationC2KBaseLong";
    qword_1EB286F58 = @"kCTRegistrationC2KNetworkId";
    qword_1EB286F60 = @"kCTRegistrationC2KSystemId";
    qword_1EB286F68 = @"kCTRegistrationCauseCode";
    qword_1EB286F70 = @"kCTRegistrationCellularDataPlanAccountURL";
    qword_1EB286F78 = @"kCTRegistrationCellularDataPlanNewAccount";
    qword_1EB286F80 = @"kCTRegistrationChangedDueToSimRemoval";
    qword_1EB286F88 = @"kCTRegistrationDataActivateFailure";
    qword_1EB286F90 = @"kCTRegistrationDataActivateFailureString";
    qword_1EB286F98 = @"kCTRegistrationDataActivationPreventionNotSupported";
    qword_1EB286FA0 = @"kCTRegistrationDataActivationPreventionReason";
    qword_1EB286FA8 = @"kCTRegistrationDataActivationPreventionReasonIntlRoamingOff";
    qword_1EB286FB0 = @"kCTRegistrationDataActivationPreventionReasonOff";
    qword_1EB286FB8 = @"kCTRegistrationDataActivationPreventionReasonSilentIntlRoamingOff";
    qword_1EB286FC0 = @"kCTRegistrationDataActivationWasForMMS";
    qword_1EB286FC8 = @"kCTRegistrationDataActive";
    qword_1EB286FD0 = @"kCTRegistrationDataAttachOverride";
    qword_1EB286FD8 = @"kCTRegistrationDataAttached";
    qword_1EB286FE0 = @"kCTRegistrationDataConnectionServices";
    qword_1EB286FE8 = @"kCTRegistrationDataContextID";
    qword_1EB286FF0 = @"kCTRegistrationDataContextSuspended";
    qword_1EB286FF8 = @"kCTRegistrationDataFamilyActive";
    qword_1EB287000 = @"kCTRegistrationDataFamilyInactive";
    qword_1EB287008 = @"kCTRegistrationDataHideIndicator";
    qword_1EB287010 = @"kCTRegistrationDataIndicator";
    qword_1EB287018 = @"kCTRegistrationDataIndicator2G";
    qword_1EB287020 = @"kCTRegistrationDataIndicator2_5G";
    qword_1EB287028 = @"kCTRegistrationDataIndicator3G";
    qword_1EB287030 = @"kCTRegistrationDataIndicator3_5G";
    qword_1EB287038 = @"kCTRegistrationDataIndicator3_75G";
    qword_1EB287040 = @"kCTRegistrationDataIndicator4G";
    qword_1EB287048 = @"kCTRegistrationDataIndicator4G_5GE";
    qword_1EB287050 = @"kCTRegistrationDataIndicator4G_LTEA";
    qword_1EB287058 = @"kCTRegistrationDataIndicator4G_LTEPlus";
    qword_1EB287060 = @"kCTRegistrationDataIndicator5G";
    qword_1EB287068 = @"kCTRegistrationDataIndicator5G_CA";
    qword_1EB287070 = @"kCTRegistrationDataIndicator5G_Plus";
    qword_1EB287078 = @"kCTRegistrationDataIndicator5G_UC";
    qword_1EB287080 = @"kCTRegistrationDataIndicator5G_Uwb";
    qword_1EB287088 = @"kCTRegistrationDataIndicator6G";
    qword_1EB287090 = @"kCTRegistrationDataIndicator7G";
    qword_1EB287098 = @"kCTRegistrationDataIndicator8G";
    qword_1EB2870A0 = @"kCTRegistrationDataIndicator9G";
    qword_1EB2870A8 = @"kCTRegistrationDataIndicatorH_Plus";
    qword_1EB2870B0 = @"kCTRegistrationDataIndicatorNone";
    qword_1EB2870B8 = @"kCTRegistrationDataIndicatorOverride";
    qword_1EB2870C0 = @"kCTRegistrationDataRate2G";
    qword_1EB2870C8 = @"kCTRegistrationDataRate3G";
    qword_1EB2870D0 = @"kCTRegistrationDataRate4G";
    qword_1EB2870D8 = @"kCTRegistrationDataRate5G";
    qword_1EB2870E0 = @"kCTRegistrationDataRate6G";
    qword_1EB2870E8 = @"kCTRegistrationDataRate7G";
    qword_1EB2870F0 = @"kCTRegistrationDataRate8G";
    qword_1EB2870F8 = @"kCTRegistrationDataRate9G";
    qword_1EB287100 = @"kCTRegistrationDataRateUnknown";
    qword_1EB287108 = @"kCTRegistrationDataStatus";
    qword_1EB287110 = @"kCTRegistrationDataStatusAttached";
    qword_1EB287118 = @"kCTRegistrationDataStatusAttachedAndActive";
    qword_1EB287120 = @"kCTRegistrationDataStatusInternationalRoaming";
    qword_1EB287128 = @"kCTRegistrationDataStatusUnattached";
    qword_1EB287130 = @"kCTRegistrationDisplayStatus";
    qword_1EB287138 = @"kCTRegistrationGsmCellId";
    qword_1EB287140 = @"kCTRegistrationGsmLac";
    qword_1EB287148 = @"kCTRegistrationIMSContext";
    qword_1EB287150 = @"kCTRegistrationIMSContextCellular";
    qword_1EB287158 = @"kCTRegistrationIMSContextWiFi";
    qword_1EB287160 = @"kCTRegistrationIMSStatus";
    qword_1EB287168 = @"kCTRegistrationIMSStatusSMS";
    qword_1EB287170 = @"kCTRegistrationIMSStatusVoice";
    qword_1EB287178 = @"kCTRegistrationIMSTransportType";
    qword_1EB287180 = @"kCTRegistrationIMSTransportTypeCellular";
    qword_1EB287188 = @"kCTRegistrationIMSTransportTypeWiFi";
    qword_1EB287190 = @"kCTRegistrationInHomeCountry";
    qword_1EB287198 = @"kCTRegistrationIsFemtoCell";
    qword_1EB2871A0 = @"kCTRegistrationIsForcedRegisteredHome";
    qword_1EB2871A8 = @"kCTRegistrationMobileCountryCode";
    qword_1EB2871B0 = @"kCTRegistrationMobileNetworkCode";
    qword_1EB2871B8 = @"kCTRegistrationNetworkCode";
    qword_1EB2871C0 = @"kCTRegistrationNetworkList";
    qword_1EB2871C8 = @"kCTRegistrationNetworkListComplete";
    qword_1EB2871D0 = @"kCTRegistrationNetworkName";
    qword_1EB2871D8 = @"kCTRegistrationNetworkSelectionMenu";
    qword_1EB2871E0 = @"kCTRegistrationNetworkSelectionModeAutomatic";
    qword_1EB2871E8 = @"kCTRegistrationNetworkSelectionModeDisabled";
    qword_1EB2871F0 = @"kCTRegistrationNetworkSelectionModeManual";
    qword_1EB2871F8 = @"kCTRegistrationNetworkSelectionStateChosen";
    qword_1EB287200 = @"kCTRegistrationNetworkSelectionStateIdle";
    qword_1EB287208 = @"kCTRegistrationNetworkSelectionStateJoinedOnManual";
    qword_1EB287210 = @"kCTRegistrationNetworkSelectionStateJoining";
    qword_1EB287218 = @"kCTRegistrationNetworkSelectionStateScanned";
    qword_1EB287220 = @"kCTRegistrationNetworkSelectionStateScanning";
    qword_1EB287228 = @"kCTRegistrationNetworkSelectionStateUnknown";
    qword_1EB287230 = @"kCTRegistrationOperatorName";
    qword_1EB287238 = @"kCTRegistrationRATSelection12";
    qword_1EB287240 = @"kCTRegistrationRATSelection13";
    qword_1EB287248 = @"kCTRegistrationRATSelection14";
    qword_1EB287250 = @"kCTRegistrationRATSelectionAutomatic";
    qword_1EB287258 = @"kCTRegistrationRATSelectionCDMA1x";
    qword_1EB287260 = @"kCTRegistrationRATSelectionCDMA1xEVDO";
    qword_1EB287268 = @"kCTRegistrationRATSelectionCDMAHybrid";
    qword_1EB287270 = @"kCTRegistrationRATSelectionDual";
    qword_1EB287278 = @"kCTRegistrationRATSelectionGSM";
    qword_1EB287280 = @"kCTRegistrationRATSelectionLTE";
    qword_1EB287288 = @"kCTRegistrationRATSelectionNR";
    qword_1EB287290 = @"kCTRegistrationRATSelectionNRNonStandAlone";
    qword_1EB287298 = @"kCTRegistrationRATSelectionNRStandAlone";
    qword_1EB2872A0 = @"kCTRegistrationRATSelectionTDSCDMA";
    qword_1EB2872A8 = @"kCTRegistrationRATSelectionUMTS";
    qword_1EB2872B0 = @"kCTRegistrationRATSelectionUnknown";
    qword_1EB2872B8 = @"kCTRegistrationRadioAccessTechnology";
    qword_1EB2872C0 = @"kCTRegistrationRadioAccessTechnologyCDMA1x";
    qword_1EB2872C8 = @"kCTRegistrationRadioAccessTechnologyCDMAEVDO";
    qword_1EB2872D0 = @"kCTRegistrationRadioAccessTechnologyCDMAHybrid";
    qword_1EB2872D8 = @"kCTRegistrationRadioAccessTechnologyGSM";
    qword_1EB2872E0 = @"kCTRegistrationRadioAccessTechnologyGSMCompact";
    qword_1EB2872E8 = @"kCTRegistrationRadioAccessTechnologyLTE";
    qword_1EB2872F0 = @"kCTRegistrationRadioAccessTechnologyNR";
    qword_1EB2872F8 = @"kCTRegistrationRadioAccessTechnologyTDSCDMA";
    qword_1EB287300 = @"kCTRegistrationRadioAccessTechnologyUTRAN";
    qword_1EB287308 = @"kCTRegistrationRadioAccessTechnologyUnknown";
    qword_1EB287310 = @"kCTRegistrationRadioAccessTechnologyeHRPD";
    qword_1EB287318 = @"kCTRegistrationStatus";
    qword_1EB287320 = @"kCTRegistrationStatusDenied";
    qword_1EB287328 = @"kCTRegistrationStatusEmergencyOnly";
    qword_1EB287330 = @"kCTRegistrationStatusNotRegistered";
    qword_1EB287338 = @"kCTRegistrationStatusRegisteredHome";
    qword_1EB287340 = @"kCTRegistrationStatusRegisteredRoaming";
    qword_1EB287348 = @"kCTRegistrationStatusSearching";
    qword_1EB287350 = @"kCTRegistrationStatusUnknown";
    qword_1EB287358 = @"kCTRegistrationSuppressRatIndicator";
    qword_1EB287360 = @"kCTReturnUnknownError";
    qword_1EB287368 = @"kCTSIMSupportIntegratedCircuitCardIdentity";
    qword_1EB287370 = @"kCTSIMSupportMobileSubscriberIdentity";
    qword_1EB287378 = @"kCTSIMSupportSIMPINEntryAttemptsRemainingCount";
    qword_1EB287380 = @"kCTSIMSupportSIMPUKEntryAttemptsRemainingCount";
    qword_1EB287388 = @"kCTSIMSupportSIMStatus";
    qword_1EB287390 = @"kCTSIMSupportSIMStatusCorporateLocked";
    qword_1EB287398 = @"kCTSIMSupportSIMStatusInserted";
    qword_1EB2873A0 = @"kCTSIMSupportSIMStatusMemoryFailure";
    qword_1EB2873A8 = @"kCTSIMSupportSIMStatusNetworkLocked";
    qword_1EB2873B0 = @"kCTSIMSupportSIMStatusNotInserted";
    qword_1EB2873B8 = @"kCTSIMSupportSIMStatusNotReady";
    qword_1EB2873C0 = @"kCTSIMSupportSIMStatusOperatorLocked";
    qword_1EB2873C8 = @"kCTSIMSupportSIMStatusOperatorSubsetLocked";
    qword_1EB2873D0 = @"kCTSIMSupportSIMStatusPINLocked";
    qword_1EB2873D8 = @"kCTSIMSupportSIMStatusPUKLocked";
    qword_1EB2873E0 = @"kCTSIMSupportSIMStatusPermanentlyLocked";
    qword_1EB2873E8 = @"kCTSIMSupportSIMStatusReady";
    qword_1EB2873F0 = @"kCTSIMSupportSIMStatusServiceProviderLocked";
    qword_1EB2873F8 = @"kCTSIMSupportSIMTrayAbsent";
    qword_1EB287400 = @"kCTSIMSupportSIMTrayInsertedNoSIM";
    qword_1EB287408 = @"kCTSIMSupportSIMTrayInsertedWithSIM";
    qword_1EB287410 = @"kCTSIMSupportSIMTrayStatusUnknown";
    qword_1EB287418 = @"kCTSIMToolkitCallSetUpInCallIcon";
    qword_1EB287420 = @"kCTSIMToolkitCallSetUpInCallText";
    qword_1EB287428 = @"kCTSIMToolkitCallSetUpPhoneNumber";
    qword_1EB287430 = @"kCTSIMToolkitCallSetUpPriority";
    qword_1EB287438 = @"kCTSIMToolkitCallSetUpPriorityHigh";
    qword_1EB287440 = @"kCTSIMToolkitCallSetUpPriorityLow";
    qword_1EB287448 = @"kCTSIMToolkitCallSetUpPriorityMedium";
    qword_1EB287450 = @"kCTSIMToolkitCallSetUpRedial";
    qword_1EB287458 = @"kCTSIMToolkitControlAllowed";
    qword_1EB287460 = @"kCTSIMToolkitControlModified";
    qword_1EB287468 = @"kCTSIMToolkitControlRejected";
    qword_1EB287470 = @"kCTSIMToolkitControlResult";
    qword_1EB287478 = @"kCTSIMToolkitDisplayListCount";
    qword_1EB287480 = @"kCTSIMToolkitDisplayListStyle";
    qword_1EB287488 = @"kCTSIMToolkitDisplayListStyleMenu";
    qword_1EB287490 = @"kCTSIMToolkitDisplayListStylePicker";
    qword_1EB287498 = @"kCTSIMToolkitDisplayTextOrderOutBehavior";
    qword_1EB2874A0 = @"kCTSIMToolkitDisplayTextOrderOutBehaviorClose";
    qword_1EB2874A8 = @"kCTSIMToolkitDisplayTextOrderOutBehaviorSendOK";
    qword_1EB2874B0 = @"kCTSIMToolkitDisplayTextPriority";
    qword_1EB2874B8 = @"kCTSIMToolkitDisplayTextPriorityHigh";
    qword_1EB2874C0 = @"kCTSIMToolkitDisplayTextPriorityNormal";
    qword_1EB2874C8 = @"kCTSIMToolkitDisplayTextTerminalDelay";
    qword_1EB2874D0 = @"kCTSIMToolkitDisplayTextTerminalDelayDisabled";
    qword_1EB2874D8 = @"kCTSIMToolkitDisplayTextTerminalDelayEnabled";
    qword_1EB2874E0 = @"kCTSIMToolkitGetInputDefaultText";
    qword_1EB2874E8 = @"kCTSIMToolkitGetInputIsEditable";
    qword_1EB2874F0 = @"kCTSIMToolkitGetInputIsSecret";
    qword_1EB2874F8 = @"kCTSIMToolkitGetInputMaximumLength";
    qword_1EB287500 = @"kCTSIMToolkitGetInputMinimumLength";
    qword_1EB287508 = @"kCTSIMToolkitGetInputType";
    qword_1EB287510 = @"kCTSIMToolkitGetInputTypeBoolean";
    qword_1EB287518 = @"kCTSIMToolkitGetInputTypeDigits";
    qword_1EB287520 = @"kCTSIMToolkitGetInputTypeString";
    qword_1EB287528 = @"kCTSIMToolkitHelpAvailable";
    qword_1EB287530 = @"kCTSIMToolkitIcon";
    qword_1EB287538 = @"kCTSIMToolkitLanguage";
    qword_1EB287540 = @"kCTSIMToolkitMenuItems";
    qword_1EB287548 = @"kCTSIMToolkitNoDisplay";
    qword_1EB287550 = @"kCTSIMToolkitNotificationResponseBack";
    qword_1EB287558 = @"kCTSIMToolkitNotificationResponseBusy";
    qword_1EB287560 = @"kCTSIMToolkitNotificationResponseCancelled";
    qword_1EB287568 = @"kCTSIMToolkitNotificationResponseHelp";
    qword_1EB287570 = @"kCTSIMToolkitNotificationResponseNotSupported";
    qword_1EB287578 = @"kCTSIMToolkitNotificationResponseRefused";
    qword_1EB287580 = @"kCTSIMToolkitNotificationResponseSuccess";
    qword_1EB287588 = @"kCTSIMToolkitNotificationResponseSuccessNoIcon";
    qword_1EB287590 = @"kCTSIMToolkitNotificationResponseTimeout";
    qword_1EB287598 = @"kCTSIMToolkitPlayTone";
    qword_1EB2875A0 = @"kCTSIMToolkitPlayToneBusy";
    qword_1EB2875A8 = @"kCTSIMToolkitPlayToneCallDropped";
    qword_1EB2875B0 = @"kCTSIMToolkitPlayToneCallWaiting";
    qword_1EB2875B8 = @"kCTSIMToolkitPlayToneCongestion";
    qword_1EB2875C0 = @"kCTSIMToolkitPlayToneDial";
    qword_1EB2875C8 = @"kCTSIMToolkitPlayToneDuration";
    qword_1EB2875D0 = @"kCTSIMToolkitPlayToneError";
    qword_1EB2875D8 = @"kCTSIMToolkitPlayToneGeneralBeep";
    qword_1EB2875E0 = @"kCTSIMToolkitPlayToneNegativeAck";
    qword_1EB2875E8 = @"kCTSIMToolkitPlayTonePositiveAck";
    qword_1EB2875F0 = @"kCTSIMToolkitPlayToneRadioPathAck";
    qword_1EB2875F8 = @"kCTSIMToolkitPlayToneRinging";
    qword_1EB287600 = @"kCTSIMToolkitPlayToneSMS";
    qword_1EB287608 = @"kCTSIMToolkitPlayToneUserRing";
    qword_1EB287610 = @"kCTSIMToolkitSentSSString";
    qword_1EB287618 = @"kCTSIMToolkitSentUSSDString";
    qword_1EB287620 = @"kCTSIMToolkitSession";
    qword_1EB287628 = @"kCTSIMToolkitSimSlot";
    qword_1EB287630 = @"kCTSIMToolkitText";
    qword_1EB287638 = @"kCTSIMToolkitTimeout";
    qword_1EB287640 = @"kCTSettingCallBarringFacility";
    qword_1EB287648 = @"kCTSettingCallBarringFacilityAllIncoming";
    qword_1EB287650 = @"kCTSettingCallBarringFacilityAllIncomingServices";
    qword_1EB287658 = @"kCTSettingCallBarringFacilityAllOutgoing";
    qword_1EB287660 = @"kCTSettingCallBarringFacilityAllOutgoingServices";
    qword_1EB287668 = @"kCTSettingCallBarringFacilityAllServices";
    qword_1EB287670 = @"kCTSettingCallBarringFacilityIncomingNotOnSim";
    qword_1EB287678 = @"kCTSettingCallBarringFacilityIncomingWhileRoamingOutsideHomeCountry";
    qword_1EB287680 = @"kCTSettingCallBarringFacilityOutgoingInternational";
    qword_1EB287688 = @"kCTSettingCallBarringFacilityOutgoingInternationalExceptHomeCountry";
    qword_1EB287690 = @"kCTSettingCallClass";
    qword_1EB287698 = @"kCTSettingCallClassData";
    qword_1EB2876A0 = @"kCTSettingCallClassDataCircuitAsync";
    qword_1EB2876A8 = @"kCTSettingCallClassDataCircuitSync";
    qword_1EB2876B0 = @"kCTSettingCallClassFax";
    qword_1EB2876B8 = @"kCTSettingCallClassPADAccess";
    qword_1EB2876C0 = @"kCTSettingCallClassPacketAccess";
    qword_1EB2876C8 = @"kCTSettingCallClassShortMessageSerice";
    qword_1EB2876D0 = @"kCTSettingCallClassVoice";
    qword_1EB2876D8 = @"kCTSettingCallForwardingNoReplyTime";
    qword_1EB2876E0 = @"kCTSettingCallForwardingNumber";
    qword_1EB2876E8 = @"kCTSettingCallForwardingReason";
    qword_1EB2876F0 = @"kCTSettingCallForwardingReasonAll";
    qword_1EB2876F8 = @"kCTSettingCallForwardingReasonAllConditional";
    qword_1EB287700 = @"kCTSettingCallForwardingReasonMobileBusy";
    qword_1EB287708 = @"kCTSettingCallForwardingReasonNoReply";
    qword_1EB287710 = @"kCTSettingCallForwardingReasonNotReachable";
    qword_1EB287718 = @"kCTSettingCallForwardingReasonUnconditional";
    qword_1EB287720 = @"kCTSettingCallingLineIdRestriction";
    qword_1EB287728 = @"kCTSettingCallingLineIdRestrictionDisabled";
    qword_1EB287730 = @"kCTSettingCallingLineIdRestrictionEnabled";
    qword_1EB287738 = @"kCTSettingCallingLineIdRestrictionModifiable";
    qword_1EB287740 = @"kCTSettingCallingLineIdRestrictionModification";
    qword_1EB287748 = @"kCTSettingCallingLineIdRestrictionNetworkControlled";
    qword_1EB287750 = @"kCTSettingCallingLineIdRestrictionNotAvailable";
    qword_1EB287758 = @"kCTSettingCallingLineIdRestrictionNotModifiable";
    qword_1EB287760 = @"kCTSettingCallingLineIdRestrictionTemporarilyDisabled";
    qword_1EB287768 = @"kCTSettingCallingLineIdRestrictionTemporarilyEnabled";
    qword_1EB287770 = @"kCTSettingCallingLineIdRestrictionUnknown";
    qword_1EB287778 = @"kCTSettingCallingLinePresentation";
    qword_1EB287780 = @"kCTSettingCallingLinePresentationDisabled";
    qword_1EB287788 = @"kCTSettingCallingLinePresentationEnabled";
    qword_1EB287790 = @"kCTSettingCallingLinePresentationNotAvailable";
    qword_1EB287798 = @"kCTSettingCallingLinePresentationUnknown";
    qword_1EB2877A0 = @"kCTSettingCallingNamePresentation";
    qword_1EB2877A8 = @"kCTSettingCallingNamePresentationDisabled";
    qword_1EB2877B0 = @"kCTSettingCallingNamePresentationEnabled";
    qword_1EB2877B8 = @"kCTSettingCallingNamePresentationUnknown";
    qword_1EB2877C0 = @"kCTSettingConnectedLineIdRestriction";
    qword_1EB2877C8 = @"kCTSettingConnectedLineIdRestrictionAvailable";
    qword_1EB2877D0 = @"kCTSettingConnectedLineIdRestrictionNotAvailable";
    qword_1EB2877D8 = @"kCTSettingConnectedLineIdRestrictionUnknown";
    qword_1EB2877E0 = @"kCTSettingConnectedLinePresentation";
    qword_1EB2877E8 = @"kCTSettingConnectedLinePresentationDisabled";
    qword_1EB2877F0 = @"kCTSettingConnectedLinePresentationEnabled";
    qword_1EB2877F8 = @"kCTSettingConnectedLinePresentationNotAvailable";
    qword_1EB287800 = @"kCTSettingConnectedLinePresentationUnknown";
    qword_1EB287808 = @"kCTSettingEnabled";
    qword_1EB287810 = @"kCTSettingMMIProcedure";
    qword_1EB287818 = @"kCTSettingMMIProcedureActivation";
    qword_1EB287820 = @"kCTSettingMMIProcedureDeactivation";
    qword_1EB287828 = @"kCTSettingMMIProcedureErasure";
    qword_1EB287830 = @"kCTSettingMMIProcedureInterrogation";
    qword_1EB287838 = @"kCTSettingMMIProcedureRegistration";
    qword_1EB287840 = @"kCTSettingMyEffectivePhoneNumber";
    qword_1EB287848 = @"kCTSettingMyPhoneNumber";
    qword_1EB287850 = @"kCTSettingMyPhoneNumberEditable";
    qword_1EB287858 = @"kCTSettingMyPhoneNumberExists";
    qword_1EB287860 = @"kCTSettingNewPassword";
    qword_1EB287868 = @"kCTSettingPIN2ErrorCode";
    qword_1EB287870 = @"kCTSettingPIN2ErrorCodeAsString";
    qword_1EB287878 = @"kCTSettingPINErrorCode";
    qword_1EB287880 = @"kCTSettingPINErrorCodeAsString";
    qword_1EB287888 = @"kCTSettingPassword";
    qword_1EB287890 = @"kCTSettingServiceCenterAddress";
    qword_1EB287898 = @"kCTSettingServiceCenterAddressAvailableNotification";
    qword_1EB2878A0 = @"kCTSettingServiceCenterAddressRequestErrorNotification";
    qword_1EB2878A8 = @"kCTSettingServiceCenterAddressSaveErrorNotification";
    qword_1EB2878B0 = @"kCTSettingServiceCenterAddressSavedNotification";
    qword_1EB2878B8 = @"kCTSettingSupplementaryServiceType";
    qword_1EB2878C0 = @"kCTSettingType";
    qword_1EB2878C8 = @"kCTSettingTypeCallBarring";
    qword_1EB2878D0 = @"kCTSettingTypeCallForwarding";
    qword_1EB2878D8 = @"kCTSettingTypeCallWaiting";
    qword_1EB2878E0 = @"kCTSettingTypeCallingLineIdRestriction";
    qword_1EB2878E8 = @"kCTSettingTypeCallingLinePresentation";
    qword_1EB2878F0 = @"kCTSettingTypeCallingNamePresentation";
    qword_1EB2878F8 = @"kCTSettingTypeConnectedLineIdRestriction";
    qword_1EB287900 = @"kCTSettingTypeConnectedLinePresentation";
    qword_1EB287908 = @"kCTSettingTypePIN";
    qword_1EB287910 = @"kCTSettingTypePIN2";
    qword_1EB287918 = @"kCTSettingTypeSIMLock";
    qword_1EB287920 = @"kCTSettingTypeServiceCenterAddress";
    qword_1EB287928 = @"kCTSettingTypeSupplementaryServicePassword";
    qword_1EB287930 = @"kCTUSSDSessionErrorCode";
    qword_1EB287938 = @"kCTUSSDSessionErrorString";
    qword_1EB287940 = @"kCTWirelessTechnologyCDMA2000";
    qword_1EB287948 = @"kCTWirelessTechnologyLTE";
    qword_1EB287950 = @"kCTWirelessTechnologyNR";
    qword_1EB287958 = @"kCTWirelessTechnologyType";
    qword_1EB287960 = @"kCTWirelessTechnologyUMTS";
    qword_1EB287968 = @"kCTWirelessTechnologyUnknown";
  }
  unint64_t v2 = 402;
  do
  {
    uint64_t v4 = (const __CFString **)&v3[v2 >> 1];
    CFStringRef v6 = *v4;
    uint64_t v5 = (uint64_t *)(v4 + 1);
    if (CFStringCompare(v6, theString2, 0) == kCFCompareLessThan)
    {
      uint64_t v3 = v5;
      v2 += ~(v2 >> 1);
    }
    else
    {
      v2 >>= 1;
    }
  }
  while (v2);
  if (v3 == &CTLogCoreAnalytics_once || !CFEqual((CFTypeRef)*v3, theString2)) {
    return 0;
  }
    return 0;
  return *v3;
}

void SymbolMapping::mapAllSymbols(SymbolMapping *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeRef cf = Mutable;
    CFIndex Count = CFDictionaryGetCount(this);
    keys = 0;
    int v33 = 0;
    uint64_t v34 = 0;
    if (Count)
    {
      unint64_t v7 = Count;
      std::vector<void const*>::__vallocate[abi:nn180100](&keys, Count);
      uint64_t v8 = (char *)v33;
      bzero(v33, 8 * v7);
      int v33 = &v8[8 * v7];
      values = 0;
      int v30 = 0;
      uint64_t v31 = 0;
      std::vector<void const*>::__vallocate[abi:nn180100](&values, v7);
      uint64_t v9 = (char *)v30;
      bzero(v30, 8 * v7);
      int v30 = &v9[8 * v7];
      CFDictionaryGetKeysAndValues(this, (const void **)keys, (const void **)values);
      for (uint64_t i = 0; i != v7; ++i)
      {
        CFStringRef v11 = (const __CFString *)keys[i];
        if (v11)
        {
          CFTypeID v12 = CFGetTypeID(keys[i]);
          if (v12 != CFStringGetTypeID()) {
            CFStringRef v11 = 0;
          }
        }
        uint64_t CanonicalizedNotificationString = sGetCanonicalizedNotificationString(v11);
        if (CanonicalizedNotificationString) {
          CFStringRef v11 = (const __CFString *)CanonicalizedNotificationString;
        }
        CFTypeID v14 = CFGetTypeID(values[i]);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        uint64_t v17 = (SymbolMapping *)values[i];
        if (v14 == TypeID)
        {
          if (v17)
          {
            CFTypeID v18 = CFGetTypeID(values[i]);
            if (v18 == CFDictionaryGetTypeID()) {
              uint64_t v19 = v17;
            }
            else {
              uint64_t v19 = 0;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
          xpc_object_t value = 0;
          SymbolMapping::mapAllSymbols((uint64_t *)&value, v19, v16);
          CFDictionarySetValue(Mutable, v11, value);
          if (value) {
            CFRelease(value);
          }
        }
        else
        {
          CFTypeID v20 = CFGetTypeID(values[i]);
          CFTypeID v21 = CFStringGetTypeID();
          CFStringRef v22 = (const __CFString *)values[i];
          if (v20 == v21)
          {
            if (v22)
            {
              CFTypeID v23 = CFGetTypeID(values[i]);
              if (v23 != CFStringGetTypeID()) {
                CFStringRef v22 = 0;
              }
            }
            uint64_t v24 = sGetCanonicalizedNotificationString(v22);
            if (v24) {
              int v25 = (const void *)v24;
            }
            else {
              int v25 = v22;
            }
            char v26 = Mutable;
            CFStringRef v27 = v11;
          }
          else
          {
            char v26 = Mutable;
            CFStringRef v27 = v11;
            int v25 = values[i];
          }
          CFDictionarySetValue(v26, v27, v25);
        }
      }
    }
    else
    {
      values = 0;
      int v30 = 0;
      uint64_t v31 = 0;
      CFDictionaryGetKeysAndValues(this, 0, 0);
    }
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(a2, &cf);
    if (values)
    {
      int v30 = values;
      operator delete(values);
    }
    if (keys)
    {
      int v33 = keys;
      operator delete(keys);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = 0;
  }
}

__CFString *sNotificationStringForCTEvent(int a1)
{
  CFStringRef result = 0;
  switch(a1)
  {
    case -3:
      uint64_t v3 = kCTDaemonReadyNotification;
      goto LABEL_165;
    case -2:
      uint64_t v3 = kCTConnectionInvalidatedNotification;
      goto LABEL_165;
    case 1:
      uint64_t v3 = kCTCallStatusChangeNotification;
      goto LABEL_165;
    case 2:
      uint64_t v3 = kCTCallStatusBecameAlertingNotification;
      goto LABEL_165;
    case 3:
      uint64_t v3 = kCTCallSubTypeChangeNotification;
      goto LABEL_165;
    case 4:
      uint64_t v3 = kCTCallIdentificationChangeNotification;
      goto LABEL_165;
    case 5:
      uint64_t v3 = kCTCallForwardedNotification;
      goto LABEL_165;
    case 6:
      uint64_t v3 = kCTCallControlFailureNotification;
      goto LABEL_165;
    case 7:
      uint64_t v3 = kCTCallCauseCodeNotification;
      goto LABEL_165;
    case 8:
      uint64_t v3 = kCTCallAudioToneRelayNotification;
      goto LABEL_165;
    case 9:
      uint64_t v3 = kCTCallMediaStatusActiveNotification;
      goto LABEL_165;
    case 10:
      uint64_t v3 = kCTCallMediaStatusInactiveNotification;
      goto LABEL_165;
    case 11:
      uint64_t v3 = kCTUSSDSessionBeginNotification;
      goto LABEL_165;
    case 12:
      uint64_t v3 = kCTUSSDSessionStringNotification;
      goto LABEL_165;
    case 13:
      uint64_t v3 = kCTUSSDSessionEndNotification;
      goto LABEL_165;
    case 14:
      uint64_t v3 = kCTUSSDSessionErrorNotification;
      goto LABEL_165;
    case 15:
      uint64_t v3 = kCTUSSDSessionTerminatedNotification;
      goto LABEL_165;
    case 16:
      uint64_t v3 = kCTIndicatorsSignalStrengthNotification;
      goto LABEL_165;
    case 18:
      uint64_t v3 = kCTIndicatorsVoiceMailNotification;
      goto LABEL_165;
    case 19:
      uint64_t v3 = kCTIndicatorsSUPLINITNotification;
      goto LABEL_165;
    case 20:
      uint64_t v3 = kCTIndicatorsUnconditionalCallForwardingNotification;
      goto LABEL_165;
    case 21:
      uint64_t v3 = kCTIndicatorsTimeUpdateNotification;
      goto LABEL_165;
    case 22:
      uint64_t v3 = kCTIndicatorsDstUpdateNotification;
      goto LABEL_165;
    case 23:
      uint64_t v3 = kCTSMSMessageReceivedNotification;
      goto LABEL_165;
    case 24:
      uint64_t v3 = kCTSMSMessageSentNotification;
      goto LABEL_165;
    case 25:
      uint64_t v3 = kCTSMSMessageSendErrorNotificiation;
      goto LABEL_165;
    case 26:
      uint64_t v3 = kCTSMSClass0StringReceivedNotification;
      goto LABEL_165;
    case 27:
      uint64_t v3 = kCTSMSCellBroadcastStringReceivedNotification;
      goto LABEL_165;
    case 28:
      uint64_t v3 = kCTSMSCellBroadcastTelemetryNotification;
      goto LABEL_165;
    case 29:
      uint64_t v3 = kCTEventSMSMessageCellBroadcastStringGeofencingStarted;
      goto LABEL_165;
    case 30:
      uint64_t v3 = kCTSMSTestMessageReceivedNotification;
      goto LABEL_165;
    case 31:
      uint64_t v3 = kCTMessageReceivedNotification;
      goto LABEL_165;
    case 32:
      uint64_t v3 = kCTMessageReceiveDeferredNotification;
      goto LABEL_165;
    case 33:
      uint64_t v3 = kCTMessageSentNotification;
      goto LABEL_165;
    case 34:
      uint64_t v3 = kCTMessageSendErrorNotification;
      goto LABEL_165;
    case 35:
      uint64_t v3 = kCTMessageSendProgressNotification;
      goto LABEL_165;
    case 36:
      uint64_t v3 = kCTMMSConfigurationChangeNotification;
      goto LABEL_165;
    case 37:
      uint64_t v3 = kCTPhoneBookSelectedNotification;
      goto LABEL_165;
    case 38:
      uint64_t v3 = kCTPhoneBookFetchNotification;
      goto LABEL_165;
    case 39:
      uint64_t v3 = kCTPhoneBookWriteNotification;
      goto LABEL_165;
    case 40:
      uint64_t v3 = kCTPhoneBookErrorNotification;
      goto LABEL_165;
    case 41:
      uint64_t v3 = kCTPowerRadioModuleNotReadyErrorNotification;
      goto LABEL_165;
    case 43:
      uint64_t v3 = kCTRegistrationCellChangedNotification;
      goto LABEL_165;
    case 44:
      uint64_t v3 = kCTRegistrationNewServingNetworkNotification;
      goto LABEL_165;
    case 45:
      uint64_t v3 = kCTRegistrationOperatorNameChangedNotification;
      goto LABEL_165;
    case 46:
      uint64_t v3 = kCTRegistrationStatusChangedNotification;
      goto LABEL_165;
    case 47:
      uint64_t v3 = kCTRegistrationDisplayStatusChangedNotification;
      goto LABEL_165;
    case 48:
      uint64_t v3 = kCTRegistrationCauseCodeNotification;
      goto LABEL_165;
    case 49:
      uint64_t v3 = kCTRegistrationNetworkListAvailableNotification;
      goto LABEL_165;
    case 50:
      uint64_t v3 = kCTRegistrationNetworkListFailedNotification;
      goto LABEL_165;
    case 51:
      uint64_t v3 = kCTRegistrationDataStatusChangedNotification;
      goto LABEL_165;
    case 52:
      uint64_t v3 = kCTRegistrationDataActivateFailedNotification;
      goto LABEL_165;
    case 53:
      uint64_t v3 = kCTSettingRequestSuccessNotification;
      goto LABEL_165;
    case 54:
      uint64_t v3 = kCTSettingRequestErrorNotification;
      goto LABEL_165;
    case 55:
      uint64_t v3 = kCTSettingSaveSuccessNotification;
      goto LABEL_165;
    case 56:
      uint64_t v3 = kCTSettingSaveErrorNotification;
      goto LABEL_165;
    case 57:
      uint64_t v3 = kCTSettingChangedNotification;
      goto LABEL_165;
    case 58:
      uint64_t v3 = kCTSIMSupportSIMStatusChangeNotification;
      goto LABEL_165;
    case 59:
      uint64_t v3 = kCTSIMSupportSIMPINEntryErrorNotification;
      goto LABEL_165;
    case 60:
      uint64_t v3 = kCTSIMSupportSIMPUKEntryErrorNotification;
      goto LABEL_165;
    case 61:
      uint64_t v3 = kCTCellMonitorUpdateNotification;
      goto LABEL_165;
    case 62:
      uint64_t v3 = kCTPowerRadioModuleDeadNotification;
      goto LABEL_165;
    case 63:
      uint64_t v3 = kCTSIMSupportSIMNewInsertionNotification;
      goto LABEL_165;
    case 64:
      uint64_t v3 = kCTSIMToolkitControlCallNotification;
      goto LABEL_165;
    case 65:
      uint64_t v3 = kCTSIMToolkitControlSSNotification;
      goto LABEL_165;
    case 66:
      uint64_t v3 = kCTSIMToolkitControlUSSDNotification;
      goto LABEL_165;
    case 67:
      uint64_t v3 = kCTSIMToolkitDisplayTextNotification;
      goto LABEL_165;
    case 68:
      uint64_t v3 = kCTSIMToolkitGetInputNotification;
      goto LABEL_165;
    case 69:
      uint64_t v3 = kCTSIMToolkitPlayToneNotification;
      goto LABEL_165;
    case 70:
      uint64_t v3 = kCTSIMToolkitDisplayListNotification;
      goto LABEL_165;
    case 71:
      uint64_t v3 = kCTSIMToolkitSentSMSMessageNotification;
      goto LABEL_165;
    case 72:
      uint64_t v3 = kCTSIMToolkitSentSSNotification;
      goto LABEL_165;
    case 73:
      uint64_t v3 = kCTSIMToolkitSentUSSDNotification;
      goto LABEL_165;
    case 74:
      uint64_t v3 = kCTSIMToolkitCallSetUpNotification;
      goto LABEL_165;
    case 75:
      uint64_t v3 = kCTSIMToolkitLocalInformationNotification;
      goto LABEL_165;
    case 76:
      uint64_t v3 = kCTSIMToolkitRequestUserAttentionNotification;
      goto LABEL_165;
    case 77:
      uint64_t v3 = kCTSIMToolkitIdleTextNotification;
      goto LABEL_165;
    case 78:
      uint64_t v3 = kCTSIMToolkitSentDTMFNotification;
      goto LABEL_165;
    case 79:
      uint64_t v3 = kCTSIMToolkitLanguageNotification;
      goto LABEL_165;
    case 80:
      uint64_t v3 = kCTAudioVoiceMuteStatusNotification;
      goto LABEL_165;
    case 81:
      uint64_t v3 = kCTAudioTTYModeStatusNotification;
      goto LABEL_165;
    case 82:
      uint64_t v3 = kCTSettingCallCapabilitiesChangedNotification;
      goto LABEL_165;
    case 83:
      uint64_t v3 = kCTSettingPhoneNumberChangedNotification;
      goto LABEL_165;
    case 84:
      uint64_t v3 = kCTSMSSignificantChangeNotification;
      goto LABEL_165;
    case 85:
      uint64_t v3 = kCTAudioCallDropToneCompleteNotification;
      goto LABEL_165;
    case 86:
      uint64_t v3 = kCTSIMToolkitSessionCompleteNotification;
      goto LABEL_165;
    case 87:
      uint64_t v3 = kCTSMSDatabaseFullNotification;
      goto LABEL_165;
    case 88:
      uint64_t v3 = kCTCallDeflectedNotification;
      goto LABEL_165;
    case 89:
      uint64_t v3 = kCTCallBarredNotification;
      goto LABEL_165;
    case 90:
      uint64_t v3 = kCTCallIdentificationSuppressionRejectedNotification;
      goto LABEL_165;
    case 91:
      uint64_t v3 = kCTCallForwardingActiveNotification;
      goto LABEL_165;
    case 92:
      uint64_t v3 = kCTEmergencyCallStatusChangeNotification;
      goto LABEL_165;
    case 93:
      uint64_t v3 = kCTEmergencyCallContextNotification;
      goto LABEL_165;
    case 94:
      uint64_t v3 = kCTRegistrationCustomerServiceProfileUpdateNotification;
      goto LABEL_165;
    case 95:
      uint64_t v3 = kCTCellularDataPlanStatusNotification;
      goto LABEL_165;
    case 96:
      uint64_t v3 = kCTPhoneNumberRegistrationResponseNotification;
      goto LABEL_165;
    case 97:
      uint64_t v3 = kCTRegistrationCellularDataPlanActivateFailedNotification;
      goto LABEL_165;
    case 98:
      uint64_t v3 = kCTRegistrationCellularDataPlanHideIndicatorNotification;
      goto LABEL_165;
    case 99:
      uint64_t v3 = kCTIndicatorRadioTransmitNotification;
      goto LABEL_165;
    case 100:
      uint64_t v3 = kCTRadioTransmitSpeedNotification;
      goto LABEL_165;
    case 101:
      uint64_t v3 = kCTCarrierSettingsNewCarrierNotification;
      goto LABEL_165;
    case 102:
      uint64_t v3 = kCTCarrierSettingsNewOperatorNotification;
      goto LABEL_165;
    case 103:
      uint64_t v3 = kCTPhoneNumberRegistrationRequestFinishedNotification;
      goto LABEL_165;
    case 104:
      uint64_t v3 = kCTCallAlternateStatusChangeNotification;
      goto LABEL_165;
    case 105:
      uint64_t v3 = kCTCallServiceRequestDialNotification;
      goto LABEL_165;
    case 106:
      uint64_t v3 = kCTCallServiceRequestAnswerNotification;
      goto LABEL_165;
    case 108:
      uint64_t v3 = kCTVoicePrivacyStatusChangeNotification;
      goto LABEL_165;
    case 109:
      uint64_t v3 = kCTOtaspStatusChangeNotification;
      goto LABEL_165;
    case 110:
      uint64_t v3 = kCTEmergencyCallBackModeStatusNotification;
      goto LABEL_165;
    case 111:
      uint64_t v3 = kCTCallManagementStateChangeNotification;
      goto LABEL_165;
    case 112:
      uint64_t v3 = kCTDTMFDigitsChangedNotification;
      goto LABEL_165;
    case 113:
      uint64_t v3 = kCTPostponementStatusChangeNotification;
      goto LABEL_165;
    case 114:
      uint64_t v3 = kCTServiceProvisioningStartedNotification;
      goto LABEL_165;
    case 115:
      uint64_t v3 = kCTServiceProvisioningSuccessfulNotification;
      goto LABEL_165;
    case 116:
      uint64_t v3 = kCTServiceProvisioningFailedNotification;
      goto LABEL_165;
    case 117:
      uint64_t v3 = kCTSPCUnlockSuccessfulNotification;
      goto LABEL_165;
    case 118:
      uint64_t v3 = kCTPowerRadioModuleEnterLowPowerNotification;
      goto LABEL_165;
    case 119:
      uint64_t v3 = kCTPowerRadioModuleEnteredLowPowerNotification;
      goto LABEL_165;
    case 120:
      uint64_t v3 = kCTPowerRadioModuleExitLowPowerNotification;
      goto LABEL_165;
    case 121:
      uint64_t v3 = kCTIndicatorsBeginStateDumpNotification;
      goto LABEL_165;
    case 122:
      uint64_t v3 = kCTIndicatorsEndStateDumpNotification;
      goto LABEL_165;
    case 123:
      uint64_t v3 = kCTQualityOfServiceFlowStatusChangeNotification;
      goto LABEL_165;
    case 124:
      uint64_t v3 = kCTCarrierEntitlementsInfoAvailableNotification;
      goto LABEL_165;
    case 125:
      uint64_t v3 = kCTCarrierEntitlementsAuthTokenAvailable;
      goto LABEL_165;
    case 126:
      uint64_t v3 = kCTPowerRadioModuleReadyNotification;
      goto LABEL_165;
    case 127:
      uint64_t v3 = kCTPhoneNumberRegistrationStateNotification;
      goto LABEL_165;
    case 128:
      uint64_t v3 = kCTSettingPhoneNumberAvailableNotification;
      goto LABEL_165;
    case 129:
      uint64_t v3 = kCTAudioVocoderInfoNotification;
      goto LABEL_165;
    case 130:
      uint64_t v3 = kCTAudioSampleRateSwitchCompleteNotification;
      goto LABEL_165;
    case 131:
      uint64_t v3 = kCTTimeUpdateNotification;
      goto LABEL_165;
    case 132:
      uint64_t v3 = kCTTimezoneUpdateNotification;
      goto LABEL_165;
    case 133:
      uint64_t v3 = kCTTimeAvailabilityNotification;
      goto LABEL_165;
    case 134:
      uint64_t v3 = kCTVoicemailDatabaseResetNotification;
      goto LABEL_165;
    case 135:
      uint64_t v3 = kCTVoicemailWakeupNotification;
      goto LABEL_165;
    case 136:
      uint64_t v3 = kCTSimSupportUICCAuthenticationInfoNotification;
      goto LABEL_165;
    case 137:
      uint64_t v3 = kCTCellularDataUsageInfoNotfication;
      goto LABEL_165;
    case 138:
      uint64_t v3 = kCTRadioVoiceLinkQualityNotification;
      goto LABEL_165;
    case 141:
      uint64_t v3 = kCTDataServiceAvailabilityNotification;
      goto LABEL_165;
    case 142:
      uint64_t v3 = kCTCellularTransmitStateNotification;
      goto LABEL_165;
    case 143:
      uint64_t v3 = kCTCallHandoverStartedNotification;
      goto LABEL_165;
    case 144:
      uint64_t v3 = kCTCallHandoverEndedNotification;
      goto LABEL_165;
    case 145:
      uint64_t v3 = kCTCallHandoverLikelyNotification;
      goto LABEL_165;
    case 146:
      uint64_t v3 = kCTCallInputFrequencyLevelChangeNotification;
      goto LABEL_165;
    case 147:
      uint64_t v3 = kCTCallOutputFrequencyLevelChangeNotification;
      goto LABEL_165;
    case 148:
      uint64_t v3 = kCTPullCallIsPossibleChangeNotification;
      goto LABEL_165;
    case 149:
      uint64_t v3 = kCTRadioEnhancedLinkQualityNotification;
      goto LABEL_165;
    case 150:
      uint64_t v3 = kCTRadioEnhancedLinkQualitySupportedMetricsNotification;
      goto LABEL_165;
    case 151:
      uint64_t v3 = kCTVVMAssertionActiveNotification;
      goto LABEL_165;
    case 152:
      uint64_t v3 = kCTSMSReadyStateNotification;
      goto LABEL_165;
    case 153:
      uint64_t v3 = kCTSetupAudioInterruptionsChangedNotification;
      goto LABEL_165;
    case 154:
      uint64_t v3 = kCTRestrictedForegroundResumeNotification;
      goto LABEL_165;
    case 155:
      uint64_t v3 = kCTReliableNetworkFallbackToCellularChangedNotification;
      goto LABEL_165;
    case 162:
      uint64_t v3 = kCTIMSConnectionChangedNotification;
      goto LABEL_165;
    case 163:
      uint64_t v3 = kCTBBKeepAliveOffloadStartNotification;
      goto LABEL_165;
    case 164:
      uint64_t v3 = kCTBBKeepAliveOffloadStopNotification;
      goto LABEL_165;
    case 165:
      uint64_t v3 = kCTCellularPlanSimSubscriptionStatusNotification;
      goto LABEL_165;
    case 166:
      uint64_t v3 = kCTPerAppNetworkDataAccessPolicyChangedNotification;
      goto LABEL_165;
    case 167:
      uint64_t v3 = kCTEntitlementsDiagnosticsNotification;
      goto LABEL_165;
    case 168:
      uint64_t v3 = kCTRadioBasebandOperatingModeChangedNotification;
      goto LABEL_165;
    case 169:
      uint64_t v3 = kCTRadioStateChangedNotification;
      goto LABEL_165;
    case 170:
      uint64_t v3 = kCTCellularDataSettingsChangeNotification;
      goto LABEL_165;
    case 171:
      uint64_t v3 = kCTEMBMSUpdateNotification;
      goto LABEL_165;
    case 172:
      uint64_t v3 = kCTRadioModuleUplinkChangedNotification;
LABEL_165:
      CFStringRef result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

char *std::vector<void const*>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  CFStringRef result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2 && (CFTypeID v4 = CFGetTypeID(*a2), v4 == CFDictionaryGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

{
  CFTypeRef v4;
  CFTypeID v5;

  CFTypeID v4 = *a2;
  if (*a2 && (uint64_t v5 = CFGetTypeID(*a2), v5 == CFDictionaryGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2) {
      CFRelease(*a2);
    }
  }
  return a1;
}

void sub_184463468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184463654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844638B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184463B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184463D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184463EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

unint64_t CTTelephonyCenterAddObserver(uint64_t a1, const void *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef), const __CFString *cf1, const void *a5, CFNotificationSuspensionBehavior a6)
{
  if (!cf1
    || CFEqual(cf1, @"kCTCallCauseCodeNotification")
    || CFEqual(cf1, @"kCTCallForwardedNotification")
    || CFEqual(cf1, @"kCTCallDeflectedNotification")
    || CFEqual(cf1, @"kCTCallBarredNotification")
    || CFEqual(cf1, @"kCTCallStatusChangeNotification")
    || CFEqual(cf1, @"kCTCallSubTypeChangeNotification")
    || CFEqual(cf1, @"kCTCallAlternateStatusChangeNotification")
    || CFEqual(cf1, @"kCTCallIdentificationChangeNotification")
    || CFEqual(cf1, @"kCTCallIdentificationSuppressionRejectedNotification")
    || CFEqual(cf1, @"kCTCallControlFailureNotification")
    || CFEqual(cf1, @"kCTSIMToolkitControlCallNotification"))
  {
    pthread_once(&_CTTelephonyCenterRegisterTimeChangeNotificationOnce, _CTTelephonyCenterRegisterTimeChangeNotification);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a2, a3, cf1, a5, a6);
  if (cf1)
  {
    return _CTServerConnectionRegisterForNotification(a1, cf1);
  }
  else
  {
    return _CTServerConnectionRegisterForEvent(a1, -1, 0);
  }
}

void sub_1844642E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18446444C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t MCCAndMNC::operator<(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = (std::string *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  uint64_t v5 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  char v6 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
  }
  if (size == v8)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v19 = memcmp(v26.__r_.__value_.__l.__data_, p_p, v26.__r_.__value_.__l.__size_) == 0;
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v11 = HIBYTE(v26.__r_.__value_.__r.__words[2]) - 1;
      CFTypeID v12 = &v26;
      do
      {
        int v14 = v12->__r_.__value_.__s.__data_[0];
        CFTypeID v12 = (std::string *)((char *)v12 + 1);
        int v13 = v14;
        int v16 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v15 = v16;
        BOOL v18 = v11-- != 0;
        BOOL v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((v6 & 0x80) == 0) {
          goto LABEL_26;
        }
LABEL_31:
        operator delete(v26.__r_.__value_.__l.__data_);
        if (v19) {
          goto LABEL_27;
        }
        goto LABEL_32;
      }
    }
    else
    {
      BOOL v19 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    BOOL v19 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_31;
  }
LABEL_26:
  if (v19)
  {
LABEL_27:
    if (*(char *)(a1 + 63) < 0) {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else {
      std::string v26 = *(std::string *)(a1 + 40);
    }
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
      std::string::size_type v20 = *(void *)(a2 + 56);
LABEL_42:
      __p.__r_.__value_.__r.__words[2] = v20;
      goto LABEL_46;
    }
    CFTypeID v21 = *(const std::string::value_type **)(a2 + 40);
    std::string::size_type v22 = *(void *)(a2 + 48);
    goto LABEL_45;
  }
LABEL_32:
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string v26 = *v4;
  }
  if ((*(char *)(a2 + 31) & 0x80000000) == 0)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
    std::string::size_type v20 = *(void *)(a2 + 24);
    goto LABEL_42;
  }
  CFTypeID v21 = *(const std::string::value_type **)(a2 + 8);
  std::string::size_type v22 = *(void *)(a2 + 16);
LABEL_45:
  std::string::__init_copy_ctor_external(&__p, v21, v22);
LABEL_46:
  unsigned int v23 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v26, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return (v23 >> 7) & 1;
}

uint64_t std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:nn180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:nn180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void sub_184464B48(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v5);

  _Unwind_Resume(a1);
}

void sub_184464D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_184464EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184465060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MCCAndMNC::MCCAndMNC(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v5 = MCC::MCC(a1, a2);
  MCC::MCC(v5 + 32, a3);
  return a1;
}

{
  uint64_t v5;

  uint64_t v5 = MCC::MCC(a1, a2);
  MCC::MCC(v5 + 32, a3);
  return a1;
}

uint64_t MCC::MCC(uint64_t a1, long long *a2)
{
  *(_WORD *)a1 = -1;
  size_t v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = std::string::find(v3, 0, 0);
  if (v5 != -1)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      if (*(void *)(a1 + 16) >= v5)
      {
        size_t v6 = *(std::string **)(a1 + 8);
        *(void *)(a1 + 16) = v5;
        goto LABEL_10;
      }
    }
    else if (v5 <= *(unsigned __int8 *)(a1 + 31))
    {
      *(unsigned char *)(a1 + 31) = v5 & 0x7F;
      size_t v6 = v3;
LABEL_10:
      v6->__r_.__value_.__s.__data_[v5] = 0;
      goto LABEL_11;
    }
    abort();
  }
LABEL_11:
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  long long v10 = 0u;
  long long v11 = 0u;
  std::istringstream::basic_istringstream[abi:nn180100]((uint64_t *)&v10, v3, 8);
  unsigned int v9 = 0;
  MEMORY[0x18531F530](&v10, &v9);
  int v7 = *(_DWORD *)((char *)v12 + *(void *)(v10 - 24));
  if ((v7 & 5) == 0 && (v7 & 2) != 0 && v9 <= 0xFFFE) {
    *(_WORD *)a1 = v9;
  }
  *(void *)&long long v10 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v10 + *(void *)(v10 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v11 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v14) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x18531F630]((char *)v15 + 8);
  return a1;
}

uint64_t *std::istringstream::basic_istringstream[abi:nn180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA490] + 24;
  uint64_t v7 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v10;
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 24)) = v9;
  a1[1] = 0;
  long long v11 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:nn180100](v8, a2, a3 | 8);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:nn180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(a1 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:nn180100](a1);
  return a1;
}

void std::stringbuf::__init_buf_ptrs[abi:nn180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  size_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    long long v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    long long v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        long long v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t sCTTelephonyCenterSetDefaultRunloop(uint64_t result, __CFRunLoop *a2, const __CFString *a3)
{
  int v5 = result;
  uint64_t v6 = _CTTelephonyCenterDefault;
  if (_CTTelephonyCenterDefault) {
    goto LABEL_6;
  }
  pthread_mutex_lock(&_CTTelephonyCreateMutex);
  BOOL v7 = _CTTelephonyCenterDefault != 0;
  if (!_CTTelephonyCenterDefault)
  {
    uint64_t v8 = CTTelephonyCenterCreateOnRunloop(a2, a3);
    _CTTelephonyCenteruint64_t Default = (uint64_t)v8;
    if (v8) {
      *((unsigned char *)v8 + 33) = v5;
    }
  }
  CFStringRef result = pthread_mutex_unlock(&_CTTelephonyCreateMutex);
  uint64_t v6 = _CTTelephonyCenterDefault;
  if (v7)
  {
LABEL_6:
    if (v6)
    {
      pthread_mutex_lock(&_CTTelephonyCreateMutex);
      if (!*(unsigned char *)(_CTTelephonyCenterDefault + 33))
      {
        _CTServerConnectionAddToRunLoop((void *)_CTTelephonyCenterDefault, a2, a3);
        if (v5) {
          *(unsigned char *)(_CTTelephonyCenterDefault + 33) = 1;
        }
      }
      return pthread_mutex_unlock(&_CTTelephonyCreateMutex);
    }
  }
  return result;
}

void _CTServerConnectionAddToRunLoop(void *a1, CFTypeRef cf, const void *a3)
{
  if (a1 && a3 && cf)
  {
    if (a1[2])
    {
      CFRetain(cf);
      CFRetain(a3);
      uint64_t v6 = a1[3];
      CFRetain(a1);
      BOOL v7 = a1[2];
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 0x40000000;
      v8[2] = ___CTServerConnectionAddToRunLoop_block_invoke;
      v8[3] = &__block_descriptor_tmp_31;
      v8[4] = v6;
      void v8[5] = cf;
      v8[6] = a3;
      v8[7] = a1;
      dispatch_async(v7, v8);
    }
  }
}

void sub_184465930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184465AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184465CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184465EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844661F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12)
{
}

uint64_t _is3DigitMNCWithIMSI(int a1, unsigned char *a2)
{
  if (a1 <= 343)
  {
    if (a1 == 330)
    {
      if (!a2 || a2[3] != 49 || a2[4] - 49 > 1) {
        return 0;
      }
      return a2[5] == 48;
    }
    if (a1 == 334)
    {
      if (a2)
      {
        int v5 = a2[3];
        if (v5 != 49)
        {
          if (v5 != 48) {
            return 0;
          }
          int v6 = a2[4];
          if (v6 != 50 && v6 != 57 && v6 != 53) {
            return 0;
          }
          return a2[5] == 48;
        }
        if (a2[4] == 52) {
          return a2[5] == 48;
        }
      }
      return 0;
    }
    goto LABEL_32;
  }
  if (a1 == 344)
  {
    if (a2 && a2[3] == 48 && a2[4] == 51)
    {
      int v7 = a2[5];
LABEL_86:
      BOOL v12 = v7 == 48;
      return !v12;
    }
    return 1;
  }
  if (a1 == 738)
  {
    if (!a2 || a2[3] != 48 || a2[4] != 48) {
      return 0;
    }
    int v8 = a2[5];
    return v8 == 50;
  }
  if (a1 != 405)
  {
LABEL_32:
    if (a1 == 722 && a2 && a2[3] == 48 && a2[4] == 55) {
      return 0;
    }
    if (a1) {
      BOOL v10 = a1 == 101;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10 && a2 && a2[3] == 70 && a2[4] == 65 && a2[5] == 67) {
      return 1;
    }
    if (a1 > 543)
    {
      switch(a1)
      {
        case 544:
          if (!a2 || a2[3] != 49 || a2[4] != 49) {
            return 0;
          }
          return a2[5] == 48;
        case 708:
          if (!a2 || a2[3] != 48 || a2[4] != 48) {
            return 0;
          }
          return a2[5] == 49;
        case 714:
          if (!a2 || a2[3] != 48) {
            return 0;
          }
LABEL_71:
          if (a2[4] == 50) {
            return a2[5] == 48;
          }
          return 0;
      }
      return _is3DigitMNC(a1);
    }
    if (a1 == 262)
    {
      if (!a2 || a2[3] != 56) {
        return 0;
      }
      goto LABEL_71;
    }
    if (a1 != 502) {
      return _is3DigitMNC(a1);
    }
    if (!a2 || a2[3] != 49 || a2[4] != 53) {
      return 0;
    }
    int v8 = a2[5] & 0xFE;
    return v8 == 50;
  }
  if (!a2) {
    return 1;
  }
  uint64_t result = 0;
  switch(a2[3])
  {
    case '0':
      unsigned int v3 = a2[4];
      BOOL v11 = v3 >= 0x3A;
      unint64_t v4 = (0x1DFFFFFFFFFFFFuLL >> v3) & 1;
      if (v11) {
        return 1;
      }
      else {
        return v4;
      }
    case '1':
      return result;
    case '2':
      BOOL v11 = __CFADD__(a2[4] - 53, 5);
      goto LABEL_81;
    case '4':
      BOOL v12 = a2[4] == 56;
      return !v12;
    case '5':
      BOOL v11 = __CFADD__(a2[4] - 55, 6);
LABEL_81:
      uint64_t result = !v11;
      break;
    case '6':
      BOOL v12 = (a2[4] & 0xFE) == 54;
      return !v12;
    case '7':
      int v7 = a2[4];
      goto LABEL_86;
    default:
      return 1;
  }
  return result;
}

void ___ZL32CTTelephonyCenterCreateOnRunloopP11__CFRunLoopPK10__CFString_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void MCCAndMNC::MCCAndMNC(MCCAndMNC *this, const MCC *a2, const MNC *a3)
{
  *(_WORD *)this = a2->var0;
  int v5 = (std::string *)((char *)this + 8);
  if (*((char *)&a2->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, a2->var1.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    long long v6 = *(_OWORD *)a2->var1.var0.var0.var0.var0.var0;
    v5->__r_.__value_.__r.__words[2] = *((void *)&a2->var1.var0.var0.var0.var1 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_WORD *)this + 16) = *(_WORD *)a3;
  std::string::size_type v7 = (std::string *)((char *)this + 40);
  if (*((char *)a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 1), *((void *)a3 + 2));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a3 + 8);
    *((void *)this + 7) = *((void *)a3 + 3);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

uint64_t CCMonitor::addToCache(CCMonitor *this, const xpc::object *a2, const xpc::object *a3)
{
  CFTypeRef v7 = 0;
  xpc::bridge((uint64_t *)&v7, a2, (const object *)a2);
  CFTypeRef cf = 0;
  xpc::bridge((uint64_t *)&cf, a3, v4);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  return 0;
}

uint64_t _CTServerConnectionCopyCurrentOperatorName(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v21 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v21;
    BOOL v18 = "kRegistrationOperatorName";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v19);
    xpc_release(v19);
    xpc_object_t v19 = 0;
    unsigned int v7 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    xpc_object_t v8 = xpc_int64_create(v7);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v21, "kRegistrationLocalize", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v21, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationOperatorName"))
    {
      CFTypeRef v16 = 0;
      xpc_object_t object = &xdict;
      BOOL v18 = "kRegistrationOperatorName";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v14, v11);
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v16, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v14);
      CFTypeRef v12 = v16;
      CFTypeRef v16 = 0;
      *a2 = v12;
      int v13 = CTLogRegistration();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        _CTServerConnectionCopyCurrentOperatorName();
      }
      if (v16) {
        CFRelease(v16);
      }
    }
    xpc_release(xdict);
    xpc_release(v21);
  }
  return v3;
}

void _ServerConnectionCallback(const __CFString *a1, CFDictionaryRef theDict)
{
  if (@"kCTIndicatorsSignalStrengthNotification" == a1)
  {
    _CTIndicatorsHandleSignalStrengthNotification(a1, theDict);
  }
  else if (@"kCTIndicatorsVoiceMailNotification" == a1)
  {
    _CTIndicatorsHandleVoiceMailAvailableNotification(a1, theDict);
  }
  else if (@"kCTUSSDSessionStringNotification" == a1)
  {
    _CTCallHandleUSSDSessionStringNotification(a1, theDict);
  }
  else if (@"kCTIndicatorsUnconditionalCallForwardingNotification" == a1)
  {
    _CTIndicatorsHandleUnconditionalCallForwardingNotification(a1, theDict);
  }
  else if (@"kCTRegistrationDataStatusChangedNotification" == a1 {
         || @"kCTRegistrationDataActivateFailedNotification" == a1)
  }
  {
    _CTRegistrationHandleDataStatusChangedNotification(a1, theDict);
  }
  else if (@"kCTCallStatusChangeNotification" == a1 {
         || @"kCTCallSubTypeChangeNotification" == a1
  }
         || @"kCTCallAlternateStatusChangeNotification" == a1
         || @"kCTCallStatusBecameAlertingNotification" == a1
         || @"kCTCallIdentificationChangeNotification" == a1
         || @"kCTCallForwardedNotification" == a1
         || @"kCTCallCauseCodeNotification" == a1
         || @"kCTCallAudioToneRelayNotification" == a1
         || @"kCTSetupAudioInterruptionsChangedNotification" == a1)
  {
    _CTCallHandleChangeNotification(a1, theDict);
  }
  else if (@"kCTCallControlFailureNotification" == a1)
  {
    _CTCallHandleCallControlErrorNotification(a1, theDict);
  }
  else if (@"kCTRestrictedForegroundResumeNotification" == a1)
  {
    _CTCallInvalidateCallCache();
  }
  else if (a1)
  {
    if (@"kCTConnectionInvalidatedNotification" == a1) {
      _CTCallInvalidateCallCache();
    }
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, a1, 0, theDict, 1u);
  }
}

uint64_t _is3DigitMNC(int a1)
{
  if ((a1 - 301) >= 0x63 && (a1 - 701) > 0x62) {
    return 0;
  }
  uint64_t result = 0;
  if (a1 > 364)
  {
    if ((a1 - 365) <= 0xB && ((1 << (a1 - 109)) & 0x803) != 0 || a1 == 732 || a1 == 722) {
      return 1;
    }
  }
  else
  {
    unsigned int v3 = a1 - 302;
    if (v3 <= 0x3A && ((1 << v3) & 0x405511000007F01) != 0) {
      return 1;
    }
  }
  return result;
}

void formPLMN(const MCC *a1@<X0>, const MNC *a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)&a1->var1.var0.var0.var0.var1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&var0, a1->var1.var0.var0.var0.var1.var0, a1->var1.var0.var0.var0.var1.var1);
  }
  else {
    std::string var0 = (std::string)a1->var1.var0.var0;
  }
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 8);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned int v7 = std::string::append(&var0, (const std::string::value_type *)p_p, size);
  *a3 = *v7;
  v7->__r_.__value_.__r.__words[0] = 0;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(var0.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(var0.__r_.__value_.__l.__data_);
  }
}

unint64_t SendXpcMessageWithCaching(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  unint64_t v5 = SendXpcMessageIf((*(unsigned char *)(*(void *)(a1 + 24) + 136) != 0) & (sInternalDeadFlag ^ 1u), a1, a2, a3);
  unint64_t v6 = HIDWORD(v5);
  if (!v5)
  {
    if (MEMORY[0x1853203E0](*a3) != MEMORY[0x1E4F14590])
    {
LABEL_29:
      LODWORD(v6) = 0;
      LODWORD(v5) = 0;
      return v5 | ((unint64_t)v6 << 32);
    }
    CCMonitor::instance(&v20);
    xpc_object_t v9 = *a2;
    xpc_object_t v19 = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_object_t v15 = *a3;
    xpc_object_t object = v15;
    if (v15)
    {
      xpc_object_t v16 = xpc_retain(v15);
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
      xpc_object_t object = v16;
    }
    CCMonitor::addToCache((CCMonitor *)v16, (const xpc::object *)&v19, (const xpc::object *)&object);
    xpc_release(object);
    xpc_release(v19);
LABEL_27:
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v21);
    }
    goto LABEL_29;
  }
  if (v5 == 1 && HIDWORD(v5) == 1)
  {
    CCMonitor::instance(&v20);
    xpc_object_t v8 = *a2;
    xpc_object_t object = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    CCMonitor::findCachedValue((const xpc::object *)&object, &v19);
    xpc_object_t v10 = v19;
    uint64_t v11 = MEMORY[0x1E4F14590];
    if (v19 && MEMORY[0x1853203E0](v19) == v11)
    {
      xpc_retain(v10);
      xpc_object_t v12 = v10;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v14 = *a3;
    *a3 = v12;
    xpc_release(v14);
    xpc_release(v13);
    xpc_release(v10);
    xpc_release(object);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v21);
    }
    if (MEMORY[0x1853203E0](*a3) != v11)
    {
      LODWORD(v6) = 1;
      LODWORD(v5) = 1;
      return v5 | ((unint64_t)v6 << 32);
    }
    CCMonitor::instance(&v20);
    goto LABEL_27;
  }
  return v5 | ((unint64_t)v6 << 32);
}

uint64_t _CTServerConnectionGetRadioAccessTechnology(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    xpc_object_t object = &v12;
    xpc_object_t v9 = "kRegistrationRAT";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v10);
    xpc_release(v10);
    xpc_object_t v10 = 0;
    xpc_object_t v11 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &v11);
    if (MEMORY[0x1853203E0](v11) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v11;
      xpc_object_t v9 = "kRegistrationRAT";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      int v5 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)0xB);
      xpc_release(v7);
    }
    else
    {
      int v5 = 11;
    }
    *a2 = RadioAccessTechnologyToRadioAccessTechnologyString(v5);
    xpc_release(v11);
    xpc_release(v12);
  }
  return v2;
}

unint64_t _CTServerConnectionGetCapabilityStatusExtended(uint64_t a1, CFTypeRef cf1, unsigned char *a3, xpc_object_t *a4)
{
  unint64_t v4 = 0x1600000000;
  LODWORD(v5) = 1;
  if (cf1 && a1 && a3)
  {
    if (!CFEqual(cf1, @"kCTCapabilityVoLTE")
      && !CFEqual(cf1, @"kCTCapabilityWiFiCalling")
      && !CFEqual(cf1, @"kCTCapabilityPhoneServices"))
    {
      LODWORD(v5) = 1;
      return v4 & 0xFFFFFFFF00000000 | v5;
    }
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v10 = xdict;
    xpc_object_t v23 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "kTelephonyCapability", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t object = &v23;
    uint64_t v20 = "kTelephonyCapabilityStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v21);
    xpc_release(v21);
    xpc_object_t v21 = 0;
    xpc_object_t xdict = xpc_null_create();
    unint64_t v5 = SendXpcMessageWithCaching(a1, &v23, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      *a3 = 0;
      if (!xpc_dictionary_get_value(xdict, "kTelephonyCapabilityStatus"))
      {
        unint64_t v4 = 0x2300000000;
        LODWORD(v5) = 1;
        goto LABEL_11;
      }
      xpc_object_t object = &xdict;
      uint64_t v20 = "kTelephonyCapabilityStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v18);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      xpc_release(v18);
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kTelephonyCapabilityInformation");
      if (a4 && value)
      {
        xpc_object_t v18 = 0;
        xpc_object_t object = &xdict;
        uint64_t v20 = "kTelephonyCapabilityInformation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        xpc::bridge((uint64_t *)&cf, (xpc *)&v16, v15);
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v18, &cf);
        if (cf) {
          CFRelease(cf);
        }
        xpc_release(v16);
        *a4 = v18;
      }
    }
    unint64_t v4 = v5 & 0xFFFFFFFF00000000;
LABEL_11:
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionCopyOperatorName(uint64_t a1, void *a2)
{
  return _CTServerConnectionCopyCurrentOperatorName(a1, a2, (const void *)*MEMORY[0x1E4F1CFC8]);
}

CFStringRef CTRegistrationCopyOperatorName(const __CFAllocator *a1)
{
  CFStringRef theString = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyOperatorName(Default, &theString);
  if (!theString) {
    return 0;
  }
  CFStringRef Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

void sub_1844673D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184467528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844675F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18446777C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184467A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184467CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184468014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184468300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844685CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184468714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184468828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844688E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844689F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184468A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184468C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184468CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184468DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_184468F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844691C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446927C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844693E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446949C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184469630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844696E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844697B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_184469930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184469AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_184469B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184469C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184469CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184469E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18446A010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18446A0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446A170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18446A248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18446A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18446A544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446A5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446A760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18446A8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_18446AAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18446AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18446AE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18446AFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446B084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18446B3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446B48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446B580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18446B758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446B810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446B8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446B960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446BA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446BAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18446BC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446BD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446BED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446BF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446C024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446C0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18446C24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446C308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446C3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18446C688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18446C7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18446C988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446CA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446CC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446CE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446CEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446D0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446D170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446D390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18446D45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446D504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446D668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446D878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446D930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18446DD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18446DDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446DEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18446DFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18446E290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18446E4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18446E864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, id location)
{
  uint64_t v20 = v18;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);

  _Block_object_dispose((const void *)(v19 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18446EAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void sub_18446EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void CTGetRootVersionString(std::string *a1@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&v3, "CoreTelephony-");
  uint64_t v2 = std::string::append(&v3, "12214.4", 7uLL);
  *a1 = *v2;
  v2->__r_.__value_.__r.__words[0] = 0;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *a1, long long *a2, int a3)
{
  CSIPhoneNumber::CSIPhoneNumber(a1, a2);
  *unint64_t v4 = a3;
}

{
  _DWORD *v4;

  CSIPhoneNumber::CSIPhoneNumber(a1, a2);
  *unint64_t v4 = a3;
}

uint64_t CSIPhoneNumber::CSIPhoneNumber(uint64_t a1, int a2, long long *a3)
{
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  unint64_t v5 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 111) = 0;
  *(void *)(a1 + 116) = 0x400000000;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  return a1;
}

BOOL CSIPhoneNumber::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  long long v8 = (const void **)(a1 + 8);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      long long v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
  }
  return 0;
}

BOOL CSIPhoneNumber::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 1;
  }
  long long v8 = (const void **)(a1 + 8);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return 1;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      long long v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 1;
  }
LABEL_16:
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4);
  }
  return 1;
}

std::string *CSIPhoneNumber::setBaseNumber(CSIPhoneNumber *this, const char *a2)
{
  return std::string::__assign_external((std::string *)((char *)this + 8), a2);
}

std::string *CSIPhoneNumber::setBaseNumber(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

BOOL CSIPhoneNumber::hasSameBaseNumber(CSIPhoneNumber *this, const CSIPhoneNumber *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v3 = *((void *)this + 2);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 2);
  }
  if (v3 != v4) {
    return 0;
  }
  long long v6 = (const void **)((char *)this + 8);
  uint64_t v9 = (unsigned __int8 *)*((void *)a2 + 1);
  uint64_t v7 = (unsigned __int8 *)a2 + 8;
  long long v8 = v9;
  if (v5 < 0) {
    uint64_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *((void *)this + 2)) == 0;
  }
  if (!*((unsigned char *)this + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    long long v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    BOOL result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t CSIPhoneNumber::setTypeOfAddress(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

uint64_t CSIPhoneNumber::setEmergencyCategory(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  *(unsigned char *)(this + 60) = 1;
  return this;
}

uint64_t CSIPhoneNumber::getEmergencyCategory(CSIPhoneNumber *this)
{
  if (*((unsigned char *)this + 60)) {
    return *((unsigned int *)this + 14);
  }
  else {
    return 0;
  }
}

uint64_t CSIPhoneNumber::hasEmergencyCategorySet(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 60);
}

uint64_t CSIPhoneNumber::getTypeOfAddress(CSIPhoneNumber *this)
{
  return *((unsigned int *)this + 1);
}

void CSIPhoneNumber::getFormatted(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (_OWORD *)((char *)this + 8);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    std::string::size_type v5 = *((unsigned __int8 *)this + 31);
    if (*((unsigned __int8 *)this + 31) >= 0xBu)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
      return;
    }
LABEL_9:
    int v7 = 0;
    if (v5 <= 7) {
      long long v8 = "nnn-nnnn";
    }
    else {
      long long v8 = "(nnn) nnn-nnnn";
    }
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    while (1)
    {
      int v10 = *(unsigned __int8 *)v8++;
      LODWORD(v9) = v10;
      if (v10 == 110)
      {
        int v11 = v4;
        if (*((char *)this + 31) < 0) {
          int v11 = *(_OWORD **)v4;
        }
        uint64_t v9 = v7;
        if (!*((unsigned char *)v11 + v7)) {
          return;
        }
        int v12 = v4;
        if (*((char *)this + 31) < 0) {
          int v12 = *(_OWORD **)v4;
        }
        ++v7;
        LOBYTE(v9) = *((unsigned char *)v12 + v9);
      }
      else if (!v9)
      {
        return;
      }
      std::string::push_back(a2, v9);
    }
  }
  std::string::size_type v5 = *((void *)this + 2);
  if (v5 <= 0xA) {
    goto LABEL_9;
  }
  long long v6 = *(const std::string::value_type **)v4;

  std::string::__init_copy_ctor_external(a2, v6, v5);
}

void CSIPhoneNumber::getFullOriginalNumber(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 32);
  }
  CSIPhoneNumber::getFullNumberHelper(&__p, (uint64_t)this, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

std::string *CSIPhoneNumber::getBaseNumberNoPauseDigits@<X0>(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (const std::string *)((char *)this + 8);
  std::string::size_type v4 = std::string::find((const std::string *)((char *)this + 8), 44, 0);
  return std::string::basic_string(a2, v3, 0, v4, (std::allocator<char> *)&v6);
}

void CSIPhoneNumber::getFullNumberNoPauseDigits(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (const std::string *)((char *)this + 8);
  std::string::size_type v5 = std::string::find((const std::string *)((char *)this + 8), 44, 0);
  std::string::basic_string(&__p, v4, 0, v5, (std::allocator<char> *)&v7);
  CSIPhoneNumber::getFullNumberHelper(&__p, (uint64_t)this, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void CSIPhoneNumber::getBaseNumber(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

uint64_t CSIPhoneNumber::getCLIRRequestState(CSIPhoneNumber *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t CSIPhoneNumber::setCLIRRequestState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  return result;
}

void CSIPhoneNumber::getDtmfString(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 10);
  }
}

std::string *CSIPhoneNumber::setDtmfString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

uint64_t CSIPhoneNumber::getTypeOfNumber(CSIPhoneNumber *this)
{
  return *(unsigned int *)this;
}

_DWORD *CSIPhoneNumber::setTypeOfNumber(_DWORD *result, int a2)
{
  *BOOL result = a2;
  return result;
}

uint64_t CSIPhoneNumber::setIsListedAsEmergency(uint64_t this, char a2)
{
  *(unsigned char *)(this + 112) = a2;
  return this;
}

uint64_t CSIPhoneNumber::getIsListedAsEmergency(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t CSIPhoneNumber::setIsEmSMSTextSupported(uint64_t this, char a2)
{
  *(unsigned char *)(this + 113) = a2;
  return this;
}

uint64_t CSIPhoneNumber::getIsEmSMSTextSupported(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 113);
}

uint64_t CSIPhoneNumber::setIsEmVoiceSupported(uint64_t this, char a2)
{
  *(unsigned char *)(this + 114) = a2;
  return this;
}

uint64_t CSIPhoneNumber::getIsEmVoiceSupported(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 114);
}

uint64_t CSIPhoneNumber::getMMIValidity(CSIPhoneNumber *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t CSIPhoneNumber::setMMIValidity(uint64_t result, int a2)
{
  *(_DWORD *)(result + 116) = a2;
  return result;
}

BOOL CSIPhoneNumber::getIsMMI(CSIPhoneNumber *this)
{
  id v1 = (char *)this + 8;
  if (*((char *)this + 31) < 0) {
    id v1 = (char *)*((void *)this + 1);
  }
  int v2 = 0;
  int v3 = 0;
  int v4 = 0;
  while (2)
  {
    std::string::size_type v5 = (char *)this + 8;
    uint64_t v6 = *((unsigned __int8 *)this + 31);
    if ((*((unsigned char *)this + 31) & 0x80) != 0)
    {
      std::string::size_type v5 = (char *)*((void *)this + 1);
      uint64_t v6 = *((void *)this + 2);
    }
    char v7 = (unsigned __int8 *)&v5[v6];
    if (v1 != (char *)v7)
    {
      switch(v4)
      {
        case 0:
          int v8 = *v1;
          if (v8 == 35)
          {
            int v4 = 2;
            goto LABEL_39;
          }
          if (v8 == 42)
          {
            int v4 = 1;
            goto LABEL_39;
          }
          int v4 = 0;
          break;
        case 1:
          uint64_t v9 = *v1;
          if ((*v1 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v9 + 60) & 0x400) != 0) {
            goto LABEL_22;
          }
          int v4 = 3;
          if (v9 == 35 || v9 == 42) {
            goto LABEL_39;
          }
          int v4 = 1;
          break;
        case 2:
          if ((*v1 & 0x80000000) == 0)
          {
            uint64_t v10 = *v1;
            if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v10 + 60) & 0x400) != 0) {
              goto LABEL_22;
            }
            if (v10 == 35)
            {
              int v4 = 3;
              goto LABEL_39;
            }
          }
          int v4 = 2;
          break;
        case 3:
          if ((*v1 & 0x80000000) == 0
            && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v1 + 60) & 0x400) != 0)
          {
LABEL_22:
            --v1;
            int v4 = 4;
            goto LABEL_39;
          }
          int v4 = 3;
          break;
        case 4:
          uint64_t v11 = *v1;
          if (v11 == 35) {
            goto LABEL_30;
          }
          if (v11 == 42)
          {
            int v4 = 5;
            goto LABEL_39;
          }
          if ((v11 & 0x80) != 0)
          {
            int v4 = 4;
          }
          else
          {
            int v13 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v11 + 60);
            int v4 = 4;
            if ((v13 & 0x400) != 0 && ++v2 != 4) {
              goto LABEL_39;
            }
          }
          break;
        case 5:
          uint64_t v12 = *v1;
          if (v12 == 35)
          {
LABEL_30:
            int v4 = 6;
            goto LABEL_39;
          }
          if (v12 == 42)
          {
            ++v3;
            int v4 = 5;
            if (v3 != 4) {
              goto LABEL_39;
            }
          }
          else
          {
            int v4 = 5;
            if ((v12 & 0x80) == 0
              && (v12 == 43 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v12 + 60) & 0x400) != 0))
            {
              goto LABEL_39;
            }
          }
          break;
        case 6:
          return v1 == (char *)v7 && v4 == 6;
        default:
LABEL_39:
          ++v1;
          continue;
      }
    }
    return v1 == (char *)v7 && v4 == 6;
  }
}

uint64_t CSIPhoneNumber::getIsUSSD(CSIPhoneNumber *this)
{
  int v2 = (const std::string *)((char *)this + 8);
  unsigned int v3 = *((unsigned __int8 *)this + 31);
  uint64_t v4 = *((unsigned __int8 *)this + 31);
  if ((v3 & 0x80u) == 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v5 = *((void *)this + 2);
  }
  if (v5 == 5)
  {
    uint64_t v6 = (v3 & 0x80u) == 0 ? (CSIPhoneNumber *)((char *)this + 8) : (CSIPhoneNumber *)v2->__r_.__value_.__r.__words[0];
    if (*(_DWORD *)v6 == 909124394 && *((unsigned char *)v6 + 4) == 35) {
      return 1;
    }
    int v8 = *(_DWORD *)v6;
    int v9 = *((unsigned __int8 *)v6 + 4);
    if (v8 == 925901610 && v9 == 35) {
      return 1;
    }
  }
  uint64_t v11 = (char *)this + 8;
  if ((v3 & 0x80) != 0)
  {
    uint64_t v11 = (char *)v2->__r_.__value_.__r.__words[0];
    uint64_t v4 = *((void *)this + 2);
  }
  if (v11[v4 - 1] == 35)
  {
    std::string::size_type v12 = std::string::find((const std::string *)((char *)this + 8), 59, 0);
    std::string::size_type v13 = std::string::find(v2, 44, 0);
    if (v12 != -1 || v13 != -1)
    {
      unsigned int v3 = *((unsigned __int8 *)this + 31);
      goto LABEL_22;
    }
    return 1;
  }
LABEL_22:
  if ((v3 & 0x80) != 0) {
    unint64_t v14 = *((void *)this + 2);
  }
  else {
    unint64_t v14 = v3;
  }
  if (v14 > 2) {
    return 0;
  }
  uint64_t v15 = *((void *)this + 2);
  uint64_t v16 = v3;
  if ((v3 & 0x80u) == 0) {
    uint64_t v17 = v3;
  }
  else {
    uint64_t v17 = v15;
  }
  if (v17 == 2)
  {
    if ((v3 & 0x80u) == 0) {
      uint64_t v20 = v2;
    }
    else {
      uint64_t v20 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    }
    uint64_t result = memcmp(v20, "00", 2uLL);
    if (!result) {
      return result;
    }
  }
  else if (v17 == 1)
  {
    xpc_object_t v18 = (v3 & 0x80u) == 0 ? v2 : (const std::string *)v2->__r_.__value_.__r.__words[0];
    if (v18->__r_.__value_.__s.__data_[0] == 48) {
      return 0;
    }
  }
  if ((v3 & 0x80) != 0)
  {
    if (v15 == 1 || (result = 0, int v22 = *(unsigned __int8 *)v2->__r_.__value_.__l.__data_, v22 != 35) && v22 != 42)
    {
      int v21 = *(unsigned __int8 *)v2->__r_.__value_.__l.__data_;
      uint64_t v16 = v15;
LABEL_49:
      if (v21 == 49) {
        return v16 != 2;
      }
      return 1;
    }
  }
  else
  {
    int v21 = v2->__r_.__value_.__s.__data_[0];
    if (v3 == 1) {
      goto LABEL_49;
    }
    uint64_t result = 0;
    if (v21 != 35 && v21 != 42)
    {
      int v21 = v2->__r_.__value_.__s.__data_[0];
      goto LABEL_49;
    }
  }
  return result;
}

BOOL CSIPhoneNumber::isOriginalNumberSame(CSIPhoneNumber *this, const CSIPhoneNumber *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 55);
  if (*((char *)this + 55) < 0) {
    unint64_t v3 = *((void *)this + 5);
  }
  else {
    unint64_t v3 = *((unsigned __int8 *)this + 55);
  }
  int v4 = *((char *)a2 + 55);
  unint64_t v5 = *((void *)a2 + 5);
  if (v4 >= 0) {
    unint64_t v5 = *((unsigned __int8 *)a2 + 55);
  }
  if (v5 >= v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6 < 5) {
    return 0;
  }
  int v8 = (unsigned __int8 *)this + 32;
  int v9 = (unsigned __int8 *)a2 + 32;
  if (v5 >= v3)
  {
    if (v4 >= 0) {
      uint64_t v16 = (unsigned __int8 *)a2 + 32;
    }
    else {
      uint64_t v16 = *(unsigned __int8 **)v9;
    }
    uint64_t v17 = (unsigned __int8 *)*((void *)this + 4);
    if ((v2 & 0x80u) != 0) {
      uint64_t v2 = *((void *)this + 5);
    }
    else {
      uint64_t v17 = (unsigned __int8 *)this + 32;
    }
    xpc_object_t v18 = &v16[v5];
    if (v2)
    {
      uint64_t v19 = v16;
      uint64_t v20 = (char *)&v16[v5];
      do
      {
        if (*v19 == *v17)
        {
          uint64_t v21 = 1;
          while (v2 != v21)
          {
            if (&v19[v21] == v18) {
              goto LABEL_49;
            }
            int v22 = v19[v21];
            int v23 = v17[v21++];
            if (v22 != v23) {
              goto LABEL_36;
            }
          }
          uint64_t v20 = (char *)v19;
        }
LABEL_36:
        ++v19;
      }
      while (v19 != v18);
    }
    else
    {
      uint64_t v20 = (char *)&v16[v5];
    }
LABEL_49:
    int64_t v26 = v20 - (char *)v16;
    if (v2) {
      BOOL v27 = v20 == (char *)v18;
    }
    else {
      BOOL v27 = 0;
    }
    BOOL v25 = v27 || v26 == -1;
  }
  else
  {
    if ((v2 & 0x80) != 0)
    {
      int v8 = (unsigned __int8 *)*((void *)this + 4);
      uint64_t v2 = *((void *)this + 5);
    }
    if (v4 < 0) {
      int v9 = *(unsigned __int8 **)v9;
    }
    uint64_t v10 = &v8[v2];
    if (v2)
    {
      uint64_t v11 = v8;
      std::string::size_type v12 = (char *)&v8[v2];
      do
      {
        if (*v11 == *v9)
        {
          uint64_t v13 = 1;
          while (v5 != v13)
          {
            if (&v11[v13] == v10) {
              goto LABEL_45;
            }
            int v14 = v11[v13];
            int v15 = v9[v13++];
            if (v14 != v15) {
              goto LABEL_19;
            }
          }
          std::string::size_type v12 = (char *)v11;
        }
LABEL_19:
        ++v11;
      }
      while (v11 != v10);
    }
    else
    {
      std::string::size_type v12 = (char *)v8;
    }
LABEL_45:
    int64_t v24 = v12 - (char *)v8;
    BOOL v25 = v12 == (char *)v10 || v24 == -1;
  }
  return !v25;
}

uint64_t CSIPhoneNumber::setMatchedEmMetricListType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 124) = a2;
  *(unsigned char *)(result + 128) = 1;
  return result;
}

uint64_t CSIPhoneNumber::getMatchedEmMetricListType(CSIPhoneNumber *this)
{
  return *(void *)((char *)this + 124);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    char v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    char v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void std::vector<MMSHeaderEncoding const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<MMSHeaderEncoding const*>::__append((void **)a1, a2 - v2);
  }
}

void MMSHeaderEncodingMap::MMSHeaderEncodingMap(MMSHeaderEncodingMap *this)
{
  uint64_t v2 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony", "msg.mms.pdu.hdr.encmap");
  *(void *)(v2 + 56) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  std::vector<MMSHeaderEncoding const*>::resize(v2 + 8, 1uLL);
}

void MMSHeaderEncodingMap::addEncoding(MMSHeaderEncodingMap *this, unsigned __int8 a2, const char *a3, MMSBinaryHeader *a4)
{
  size_t v4 = a4;
  operator new();
}

unsigned __int8 *MMSHeaderEncodingMap::addEncoding(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (uint64_t *)(a1 + 8);
  if (v4 >= (*(void *)(a1 + 16) - v5) >> 3)
  {
    int v8 = 0;
    std::vector<MMSHeaderEncoding const*>::resize(a1 + 8, v4 + 1, &v8);
    fflush((FILE *)*MEMORY[0x1E4F143C8]);
    unint64_t v4 = *a2;
    uint64_t v5 = *v6;
  }
  *(void *)(v5 + 8 * v4) = a2;
  int v8 = (long long *)(a2 + 8);
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 32, (uint64_t)(a2 + 8), (uint64_t)&std::piecewise_construct, &v8);
  *((void *)result + 5) = a2;
  return result;
}

void std::vector<MMSHeaderEncoding const*>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<MMSHeaderEncoding const*>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t MMSHeaderEncodingMap::encodingForNumber(MMSHeaderEncodingMap *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (a2 >= (unint64_t)((*((void *)this + 2) - v2) >> 3)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * a2);
  }
}

uint64_t MMSHeaderEncodingMap::encodingForName(MMSHeaderEncodingMap *this, char *a2)
{
  if ("Content-Disposition" == a2)
  {
    uint64_t v5 = *((void *)this + 1)
       + 8 * MMSContentDispositionHeader::getContentDispositionEncodingByte(this);
    return *(void *)v5;
  }
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::find<std::string>((void *)this + 4, (uint64_t)__p);
  unint64_t v4 = v3;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      goto LABEL_4;
    }
  }
  else if (v3)
  {
LABEL_4:
    uint64_t v5 = (uint64_t)(v4 + 40);
    return *(void *)v5;
  }
  return 0;
}

uint64_t MMSHeaderEncodingMap::createHeader(MMSHeaderEncodingMap *this, char *a2)
{
  uint64_t v2 = MMSHeaderEncodingMap::encodingForName(this, a2);
  if (!v2) {
    operator new();
  }
  unint64_t v3 = *(uint64_t (**)(void))(**(void **)(v2 + 32) + 96);

  return v3();
}

void std::vector<MMSHeaderEncoding const*>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v10];
    int v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    xpc_object_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void std::vector<MMSHeaderEncoding const*>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  char v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v6, v14);
    }
    else {
      int v15 = 0;
    }
    xpc_object_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    int v22 = &v15[8 * v14];
    int64_t v24 = (char *)*a1;
    int v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      int v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v27, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    int v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, i + 16, v5)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  memset(v27, 0, sizeof(v27));
  std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  int64_t v24 = *(void **)(*(void *)a1 + 8 * v14);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *int64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11) {
          v25 %= v11;
        }
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  ++*(void *)(a1 + 24);
  return i;
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  a4[2] = 0;
  unint64_t v8 = operator new(0x30uLL);
  *a4 = v8;
  a4[1] = v7;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  void v8[5] = 0;
  *((unsigned char *)a4 + 16) = 1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:nn180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v15 = *((void *)v13 + 1);
      if (v8 == v15)
      {
        if (std::equal_to<std::string>::operator()[abi:nn180100](v14, v13 + 16, v2)) {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v7) {
            v15 %= *(void *)&v7;
          }
        }
        else
        {
          v15 &= *(void *)&v7 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      unint64_t v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

void sub_184470D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v19 = v18;

  _Unwind_Resume(a1);
}

void sub_184470E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1844710A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18447130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844716B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471740(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844717E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447182C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844718F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471AFC(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184471B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184471FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447206C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844720D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447215C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184472278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844724F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844725A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447272C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184472828(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844728EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844729D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472A64(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184472B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184472FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184473038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844730C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844731E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844732D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184473448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184473520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844735D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447362C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844736A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184473808(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184473960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184473BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184473F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, char a15, void *a16, uint64_t a17, void *a18, void *a19, int a20,char a21,void *a22,void *a23,void *a24)
{
  if (a15)
  {
  }
  if (!a22) {

  }
  if (a21)
  {
  }
  if (!*(void *)(v31 - 96)) {

  }
  _Unwind_Resume(a1);
}

void sub_18447412C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844741C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447429C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844744A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184474644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447485C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844749C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184474AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184474B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184474B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184474CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184474DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184474F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447512C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18447536C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184475450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844755D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447588C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184475A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184475F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184476024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184476148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184476258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844763A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447642C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844764CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184476518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844765E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184476678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  return CTDTMFPlayStart();
}

uint64_t CTDTMFPlayStart(int a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionStartDTMFTone(Default, a1);
}

uint64_t CTDTMFPlayStop()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionStopDTMFTone(Default);
}

uint64_t CTDTMFSendDigitsNow()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionSendDTMFDigitsNow(Default);
}

xpc_object_t CTDTMFCopyHardPauseDigits(unsigned char *a1)
{
  xpc_object_t v4 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyHardPauseDigits(Default, &v4, a1);
  return v4;
}

uint64_t CTDTMFCancelHardPause()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionCancelHardPause(Default);
}

uint64_t CTUSSDSessionSendResponse(uint64_t a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionSendUSSDResponse(Default, a1);
}

uint64_t CTUSSDSessionCancel()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionCancelUSSDSession(Default);
}

uint64_t CTCallGetTypeID()
{
  return _kCTCallTypeID;
}

void *_CTCallRegisterClass()
{
  uint64_t result = malloc_type_calloc(1uLL, 0x60uLL, 0x10D00408820D60FuLL);
  _kCTCallClass = (uint64_t)result;
  if (result)
  {
    *uint64_t result = 0;
    result[1] = "CTCall";
    result[4] = _CallDestroy;
    result[5] = _CallEqual;
    result[6] = _CallHash;
    result[8] = _CallCopyDescription;
    _kCTCallCFTypeID TypeID = _CFRuntimeRegisterClass();
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    _UuidToCallMap = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &_CTCallRegisterClass_kDictionaryNoRetainKeyCallBacks, &_CTCallRegisterClass_kDictionaryNoRetainValueCallBacks);
    uint64_t result = CFArrayCreateMutable(v1, 0, MEMORY[0x1E4F1D510]);
    _CurrentCalls = (uint64_t)result;
  }
  return result;
}

CFArrayRef CTCopyCurrentCalls(const __CFAllocator *a1)
{
  return _CTCallCopyCurrentCallsWithTypes(a1, 3u, 1);
}

CFArrayRef _CTCallCopyCurrentCallsWithTypes(const __CFAllocator *a1, unsigned int a2, int a3)
{
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  pthread_mutex_lock(&_GlobalCallsLock);
  if (!a3 || (_CurrentCallsUpToDate & 1) == 0)
  {
    pthread_mutex_unlock(&_GlobalCallsLock);
    uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
    CFTypeRef cf = 0;
    _CTServerConnectionCopyAllCallsWithTypes(Default, a2, (CFArrayRef *)&cf);
    if (cf) {
      CFRelease(cf);
    }
    pthread_mutex_lock(&_GlobalCallsLock);
    _CurrentCallsUpToDate = 1;
  }
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy(a1, 0, (CFArrayRef)_CurrentCalls);
  pthread_mutex_unlock(&_GlobalCallsLock);
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    unint64_t v9 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v9 - 2);
      if (CTCallGetStatus((uint64_t)ValueAtIndex) == 5 || (ValueAtIndex[18] & a2) == 0) {
        CFArrayRemoveValueAtIndex(MutableCopy, v9 - 2);
      }
      --v9;
    }
    while (v9 > 1);
  }
  return MutableCopy;
}

CFArrayRef CTCopyCurrentCallsWithTypes(const __CFAllocator *a1, const __CFArray *a2)
{
  unsigned int v3 = _ExtractCallTypes(a2);

  return _CTCallCopyCurrentCallsWithTypes(a1, v3, 1);
}

CFIndex CTGetCurrentCallCount()
{
  return _CTGetCurrentCallCountWithTypes(3u);
}

CFIndex _CTGetCurrentCallCountWithTypes(unsigned int a1)
{
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  CFArrayRef v2 = _CTCallCopyCurrentCallsWithTypes((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a1, 1);
  CFIndex Count = CFArrayGetCount(v2);
  CFRelease(v2);
  return Count;
}

CFIndex CTGetCurrentCallCountWithTypes(const __CFArray *a1)
{
  unsigned int v1 = _ExtractCallTypes(a1);

  return _CTGetCurrentCallCountWithTypes(v1);
}

void *CTCallDialEmergency(const void *a1)
{
  return _CTCallDial(a1, 0, 2u, 0, 0);
}

void *_CTCallDial(const void *a1, void *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  xpc_object_t value = 0;
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  _CTServerConnectionCreateCall(Default, a1, a2, a3, a4, a5, (uint64_t *)&value);
  if (!value) {
    return 0;
  }
  pthread_mutex_lock(&_GlobalCallsLock);
  CFArrayRef v11 = (const __CFArray *)_CurrentCalls;
  v14.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
  v14.location = 0;
  if (CFArrayGetFirstIndexOfValue(v11, v14, value) == -1) {
    CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, value);
  }
  pthread_mutex_unlock(&_GlobalCallsLock);
  return value;
}

void *CTCallDialWithSourceIdentifier(const void *a1, uint64_t a2)
{
  return _CTCallDial(a1, 0, 0, a2, 0);
}

void *CTCallDialWithIDAndSourceIdentifier(const void *a1, uint64_t a2)
{
  return _CTCallDial(a1, 0, 0, a2, 0);
}

void *CTCallDialWithID(const void *a1)
{
  return _CTCallDial(a1, 0, 0, 0, 0);
}

void *CTCallDialVoicemail()
{
  return _CTCallDial(0, 0, 1u, 0, 0);
}

void *CTCallDialWithAssist(const void *a1, void *a2)
{
  return _CTCallDial(a1, a2, 0, 0, 0);
}

void *CTCallDial(const void *a1)
{
  return _CTCallDial(a1, 0, 0, 0, 0);
}

CFDictionaryRef CTCallDialWithOptions(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    Value = CFDictionaryGetValue(result, @"kCTCallPhoneNumber");
    CFStringRef v3 = (const __CFString *)CFDictionaryGetValue(v1, @"kCTCallType");
    CFStringRef v4 = v3;
    if (v3)
    {
      if (CFStringCompare(v3, @"kCTCallTypeNormal", 0))
      {
        if (CFStringCompare(v4, @"kCTCallTypeVoicemail", 0))
        {
          if (CFStringCompare(v4, @"kCTCallTypeEmergency", 0))
          {
            if (CFStringCompare(v4, @"kCTCallTypeVideoConference", 0))
            {
              if (CFStringCompare(v4, @"kCTCallTypeAudioConference", 0))
              {
                if (CFStringCompare(v4, @"kCTCallTypeVOIP", 0)) {
                  LODWORD(v4) = 7;
                }
                else {
                  LODWORD(v4) = 5;
                }
              }
              else
              {
                LODWORD(v4) = 4;
              }
            }
            else
            {
              LODWORD(v4) = 3;
            }
          }
          else
          {
            LODWORD(v4) = 2;
          }
        }
        else
        {
          LODWORD(v4) = 1;
        }
      }
      else
      {
        LODWORD(v4) = 0;
      }
    }
    CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(v1, @"kCTCallSourceMode");
    if (v5) {
      unsigned int v6 = CTCallSourceToCCCallSourceMode(v5);
    }
    else {
      unsigned int v6 = 0;
    }
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(v1, @"kCTCallId");
    int valuePtr = -1;
    if (v7) {
      CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
    }
    unint64_t v8 = CFDictionaryGetValue(v1, @"kCTCallAudioSourceId");
    return (const __CFDictionary *)_CTCallDial(Value, 0, v4, (uint64_t)v8, v6);
  }
  return result;
}

uint64_t CTCallSourceToCCCallSourceMode(const __CFString *a1)
{
  if (CFEqual(a1, @"kCTCallSourceModeRelay")) {
    return 1;
  }
  CFStringCompare(a1, @"kCTCallSourceModeNormal", 0);
  return 0;
}

BOOL CTCallAnswer(uint64_t a1)
{
  return CTCallAnswerWithSourceIdentifier(a1, 0);
}

BOOL CTCallAnswerWithSourceIdentifier(uint64_t a1, uint64_t a2)
{
  if (CTCallGetStatus(a1) != 4) {
    return 0;
  }
  uint64_t Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionAnswerCall(Default, a1, a2, 0) >> 32 == 0;
}

uint64_t CTCallGetStatus(uint64_t a1)
{
  _os_nospin_lock_lock();
  unsigned int v2 = *(_DWORD *)(a1 + 68);
  _os_nospin_lock_unlock();
  if (v2 == 196608) {
    unsigned int v3 = 3;
  }
  else {
    unsigned int v3 = v2;
  }
  if (v2 == 0x40000) {
    return 4;
  }
  else {
    return v3;
  }
}

CFDictionaryRef CTCallAnswerWithOptions(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"kCTCall");
    if (result)
    {
      uint64_t v2 = (uint64_t)result;
      Value = CFDictionaryGetValue(v1, @"kCTCallAudioSourceId");
      CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(v1, @"kCTCallSourceMode");
      unsigned int v5 = v4 ? CTCallSourceToCCCallSourceMode(v4) : 0;
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v1, @"kCTCallAnswerBehavior");
      if (result)
      {
        CFStringRef v6 = (const __CFString *)result;
        if (CFStringCompare((CFStringRef)result, @"kCTCallAnswerAndEndActive", 0))
        {
          if (CFStringCompare(v6, @"kCTCallAnswerAndEndHeld", 0))
          {
            if (CFStringCompare(v6, @"kCTCallAnswerOnly", 0) || CTCallGetStatus(v2) != 4)
            {
              return 0;
            }
            else
            {
              uint64_t Default = CTTelephonyCenterGetDefault();
              return (const __CFDictionary *)((unint64_t)_CTServerConnectionAnswerCall(Default, v2, (uint64_t)Value, v5) >> 32 == 0);
            }
          }
          else
          {
            return (const __CFDictionary *)_endHeldCallAndAnswer(v2, v5);
          }
        }
        else
        {
          return (const __CFDictionary *)_endActiveCallAndAnswer(v2, (uint64_t)Value, v5);
        }
      }
    }
  }
  return result;
}

BOOL _endActiveCallAndAnswer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (CTCallGetStatus(a1) != 4) {
    return 0;
  }
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  CFAllocatorRef v6 = CFGetAllocator(Default);
  BOOL v7 = 1;
  CFArrayRef v8 = _CTCallCopyCurrentCallsWithTypes(v6, 3u, 1);
  CFIndex Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
      if (CTCallGetStatus((uint64_t)ValueAtIndex) == 1) {
        break;
      }
      if (v10 == ++v11)
      {
        BOOL v7 = 1;
        goto LABEL_9;
      }
    }
    BOOL v7 = (unint64_t)_CTServerConnectionEndCall((uint64_t)Default, a2, a3) >> 32 == 0;
  }
LABEL_9:
  CFRelease(v8);
  return v7;
}

BOOL _endHeldCallAndAnswer(uint64_t a1, unsigned int a2)
{
  if (CTCallGetStatus(a1) != 4) {
    return 0;
  }
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  CFAllocatorRef v4 = CFGetAllocator(Default);
  BOOL v5 = 1;
  CFArrayRef v6 = _CTCallCopyCurrentCallsWithTypes(v4, 3u, 1);
  CFIndex Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
      if (CTCallGetStatus((uint64_t)ValueAtIndex) == 2) {
        break;
      }
      if (v8 == ++v9)
      {
        BOOL v5 = 1;
        goto LABEL_9;
      }
    }
    BOOL v5 = (unint64_t)_CTServerConnectionAnswerWaitingCallEndingHeld((uint64_t)Default, a2) >> 32 == 0;
  }
LABEL_9:
  CFRelease(v6);
  return v5;
}

BOOL CTCallAnswerEndingActiveWithSourceIdentifier(uint64_t a1, uint64_t a2)
{
  return _endActiveCallAndAnswer(a1, a2, 0);
}

BOOL CTCallAnswerEndingActive(uint64_t a1)
{
  return _endActiveCallAndAnswer(a1, 0, 0);
}

BOOL CTCallAnswerEndingHeld(uint64_t a1)
{
  return _endHeldCallAndAnswer(a1, 0);
}

BOOL CTCallSwitchCallSource(BOOL result, const __CFString *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (a2) {
      unsigned int v3 = CTCallSourceToCCCallSourceMode(a2);
    }
    else {
      unsigned int v3 = 0;
    }
    CFUUIDRef v4 = _CopyCallUUIDSync((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v2);
    uint64_t Default = CTTelephonyCenterGetDefault();
    unint64_t v6 = _CTServerConnectionSwitchCallSource(Default, v4, v3);
    if (v4) {
      CFRelease(v4);
    }
    return HIDWORD(v6) == 0;
  }
  return result;
}

CFUUIDRef _CopyCallUUIDSync(const __CFAllocator *a1, uint64_t a2)
{
  CFUUIDRef result = *(const __CFUUID **)(a2 + 24);
  if (result)
  {
    CFUUIDBytes v4 = CFUUIDGetUUIDBytes(result);
    return CFUUIDCreateFromUUIDBytes(a1, v4);
  }
  return result;
}

BOOL CTCallSwitchCallSourceAll(const __CFString *a1)
{
  if (a1) {
    unsigned int v1 = CTCallSourceToCCCallSourceMode(a1);
  }
  else {
    unsigned int v1 = 0;
  }
  uint64_t Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionSwitchCallSourceAll(Default, v1) >> 32 == 0;
}

BOOL CTCallDisconnect(uint64_t a1)
{
  int Status = CTCallGetStatus(a1);
  _os_nospin_lock_lock();
  int v3 = *(_DWORD *)(a1 + 72);
  _os_nospin_lock_unlock();
  if (Status == 5) {
    return 0;
  }
  uint64_t Default = CTTelephonyCenterGetDefault();
  if (Status == 4 && (v3 & 3) != 0) {
    unint64_t v6 = _CTServerConnectionSendToVoicemail(Default, a1);
  }
  else {
    unint64_t v6 = _CTServerConnectionEndThisCall(Default, a1);
  }
  return HIDWORD(v6) == 0;
}

BOOL CTCallDisconnectWithCauseCode(BOOL result, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (CTCallGetStatus(result) == 5)
    {
      return 0;
    }
    else
    {
      uint64_t Default = CTTelephonyCenterGetDefault();
      return (unint64_t)_CTServerConnectionEndCallWithCauseCode(Default, v3, a2) >> 32 == 0;
    }
  }
  return result;
}

BOOL CTCallListDisconnect()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionEndCall(Default, 0, 0) >> 32 == 0;
}

BOOL CTCallListDisconnectAll()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionEndAllCalls(Default) >> 32 == 0;
}

BOOL CTCallHold(uint64_t a1)
{
  unsigned int Status = CTCallGetStatus(a1);
  if ((*(_DWORD *)(a1 + 72) & 0x1C) != 0 || Status <= 5 && ((1 << Status) & 0x25) != 0) {
    return 0;
  }
  uint64_t Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionHoldActiveCall(Default, a1) >> 32 == 0;
}

uint64_t CTCallResume(uint64_t a1)
{
  unsigned __int8 v6 = 0;
  int Status = CTCallGetStatus(a1);
  unsigned __int8 v3 = 0;
  if (Status == 2)
  {
    uint64_t Default = CTTelephonyCenterGetDefault();
    if (_CTServerConnectionResumeHeldCall(Default, &v6, a1) >> 32) {
      return 0;
    }
    else {
      return v6;
    }
  }
  return v3;
}

uint64_t CTCallSwap(uint64_t a1)
{
  unsigned __int8 v5 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  if (_CTServerConnectionSwapCalls(Default, &v5, a1) >> 32) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t CTCallJoinConference(uint64_t a1)
{
  unsigned __int8 v5 = 0;
  int Status = CTCallGetStatus(a1);
  unsigned __int8 v2 = 0;
  if (Status == 2)
  {
    uint64_t Default = CTTelephonyCenterGetDefault();
    if (_CTServerConnectionAddHeldToMultiPartyCall(Default, &v5) >> 32) {
      return 0;
    }
    else {
      return v5;
    }
  }
  return v2;
}

BOOL CTCallLeaveConference(uint64_t a1)
{
  int Status = CTCallGetStatus(a1);
  BOOL result = 0;
  if (Status)
  {
    if (Status != 5)
    {
      uint64_t Default = CTTelephonyCenterGetDefault();
      return (unint64_t)_CTServerConnectionCreatePrivateConversation(Default, a1) >> 32 == 0;
    }
  }
  return result;
}

CFTypeRef CTCallStartVideoConference(const void *a1, int a2, double a3)
{
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  CFTypeRef cf = 0;
  if (CTCallCreateCallRef(*MEMORY[0x1E4F1CF80], @"kCTCallTypeVideoConference", (uint64_t *)&cf, 0)
    && CTCallSetCallInfo((uint64_t)cf, a1, 0, 0, v6, 0)
    && CTCallSetCallStartTime((uint64_t)cf, 0, a3))
  {
    int v7 = a2 ? 3 : 4;
    if (CTCallSetCallStatus((uint64_t)cf, v7, 0)
      && CTCallSetCallStatus((uint64_t)cf, 1, 0))
    {
      return cf;
    }
  }
  CFTypeRef result = cf;
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t CTCallCreateCallRef(uint64_t a1, const void *a2, uint64_t *a3, __CFString **a4)
{
  int v6 = _GetCallTypeFlagForString(a2);
  if (!a3 || (int v7 = v6) == 0)
  {
    if (!a4) {
      return 0;
    }
    CFIndex v10 = kCTCallErrorInvalidArgument;
LABEL_12:
    CFIndex v11 = *v10;
    *a4 = *v10;
    CFRetain(v11);
    return 0;
  }
  if ((v6 & 0x1C) == 0)
  {
    if (!a4) {
      return 0;
    }
    CFIndex v10 = kCTCallErrorOperationNotAllowed;
    goto LABEL_12;
  }
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    if (a4)
    {
      CFIndex v10 = kCTCallErrorNoMemory;
      goto LABEL_12;
    }
    return 0;
  }
  *(_DWORD *)(Instance + 16) = 0;
  *(_WORD *)(Instance + 66) = 256;
  *(_OWORD *)(Instance + 24) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 49) = 0u;
  *(void *)(Instance + 84) = 2;
  *(_DWORD *)(Instance + 68) = 0;
  *(_DWORD *)(Instance + 72) = v7;
  *(void *)(Instance + 112) = 0;
  *(void *)(Instance + 120) = 0;
  *(void *)(Instance + 96) = 0;
  *(void *)(Instance + 104) = 0;
  *(_WORD *)(Instance + 80) = 0;
  *(unsigned char *)(Instance + 82) = 0;
  uint64_t v9 = 1;
  *a3 = Instance;
  return v9;
}

uint64_t CTCallSetCallInfo(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, void *a6)
{
  _os_nospin_lock_lock();
  if ((*(unsigned char *)(a1 + 72) & 0x1C) != 0)
  {
    CFIndex v11 = *(const void **)(a1 + 32);
    if (v11) {
      CFRelease(v11);
    }
    *(void *)(a1 + 32) = a2;
    if (a2) {
      CFRetain(a2);
    }
    unint64_t v12 = *(const void **)(a1 + 40);
    if (v12) {
      CFRelease(v12);
    }
    *(void *)(a1 + 40) = a3;
    if (a3) {
      CFRetain(a3);
    }
    unint64_t v13 = *(const void **)(a1 + 120);
    if (v13) {
      CFRelease(v13);
    }
    *(void *)(a1 + 120) = a4;
    if (a4) {
      CFRetain(a4);
    }
    uint64_t v14 = 1;
  }
  else
  {
    if (a6)
    {
      *a6 = @"Operation not allowed";
      CFRetain(@"Operation not allowed");
    }
    uint64_t v14 = 0;
  }
  _os_nospin_lock_unlock();
  return v14;
}

uint64_t CTCallSetCallStartTime(uint64_t a1, uint64_t a2, double a3)
{
  if ((*(unsigned char *)(a1 + 72) & 0x1C) != 0)
  {
    *(double *)(a1 + 96) = a3;
    *(double *)(a1 + 112) = a3;
    a2 = 1;
  }
  else if (a2)
  {
    *(void *)a2 = @"Operation not allowed";
    CFRetain(@"Operation not allowed");
    a2 = 0;
  }
  _os_nospin_lock_unlock();
  return a2;
}

uint64_t CTCallSetCallStatus(uint64_t a1, int a2, void *a3)
{
  _os_nospin_lock_lock();
  if ((*(unsigned char *)(a1 + 72) & 0x1C) == 0)
  {
    if (a3)
    {
      *a3 = @"Operation not allowed";
      CFRetain(@"Operation not allowed");
    }
    goto LABEL_9;
  }
  int v6 = *(_DWORD *)(a1 + 68);
  if (v6 != a2)
  {
    if (a2 != 5)
    {
      switch(v6)
      {
        case 0:
          if ((a2 - 3) >= 2) {
            goto LABEL_9;
          }
          pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
          int v12 = *(_DWORD *)(a1 + 72);
          if (v12 == 4) {
            int v13 = 3;
          }
          else {
            int v13 = 7;
          }
          if (v12 == 8) {
            int v14 = 5;
          }
          else {
            int v14 = v13;
          }
          *(void *)&v23.byte0 = 0;
          *(void *)&v23.byte8 = 0;
          if (v12 == 16) {
            int v15 = 4;
          }
          else {
            int v15 = v14;
          }
          signed int v22 = 0;
          unsigned __int8 v21 = 0;
          unsigned int v16 = convertToCallStatus(a2);
          _os_nospin_lock_unlock();
          uint64_t Default = CTTelephonyCenterGetDefault();
          unint64_t v18 = _CTServerConnectionAddCall(Default, v15, v16, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 120), &v21, (uint64_t *)&v23, *(double *)(a1 + 96), &v22);
          int IsDefaultConnection = _CTServerConnectionIsDefaultConnection(Default);
          if (HIDWORD(v18) || !v21)
          {
            _os_nospin_lock_lock();
          }
          else
          {
            int v20 = IsDefaultConnection;
            if (IsDefaultConnection)
            {
              pthread_mutex_lock(&_GlobalCallsLock);
              _os_nospin_lock_lock();
              _CTCallUpdateFromCallInfo(v20, (char *)a1, &v23, v22);
              pthread_mutex_unlock(&_GlobalCallsLock);
            }
            else
            {
              _os_nospin_lock_lock();
              _CTCallUpdateFromCallInfo(0, (char *)a1, &v23, v22);
            }
          }
          uint64_t v10 = v21;
          goto LABEL_10;
        case 1:
          if (a2 != 2) {
            goto LABEL_9;
          }
          break;
        case 2:
          if (a2 != 1) {
            goto LABEL_9;
          }
          break;
        case 3:
        case 4:
          goto LABEL_27;
        case 5:
          if (!a2) {
            break;
          }
          goto LABEL_9;
        default:
          if (v6 != 0x40000) {
            goto LABEL_9;
          }
LABEL_27:
          if ((a2 - 1) >= 2) {
            goto LABEL_9;
          }
          break;
      }
    }
    pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
    unsigned int v7 = convertToCallStatus(a2);
    _os_nospin_lock_unlock();
    uint64_t v8 = CTTelephonyCenterGetDefault();
    unint64_t v9 = _CTServerConnectionUpdateCallStatus(v8, *(const __CFUUID **)(a1 + 24), v7, *(double *)(a1 + 96), *(double *)(a1 + 104));
    _os_nospin_lock_lock();
    if (!HIDWORD(v9))
    {
      *(_DWORD *)(a1 + 68) = a2;
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v10 = 1;
LABEL_10:
  _os_nospin_lock_unlock();
  return v10;
}

uint64_t CTCallEndVideoConference(uint64_t a1, double a2)
{
  if (CTCallGetStatus(a1) == 5 || !CTCallSetCallEndTime(a1, 0, a2)) {
    return 0;
  }

  return CTCallSetCallStatus(a1, 5, 0);
}

uint64_t CTCallSetCallEndTime(uint64_t a1, uint64_t a2, double a3)
{
  _os_nospin_lock_lock();
  if ((*(unsigned char *)(a1 + 72) & 0x1C) != 0)
  {
    if (*(double *)(a1 + 96) <= a3)
    {
      *(double *)(a1 + 104) = a3;
      a2 = 1;
      goto LABEL_9;
    }
    if (a2)
    {
      int v6 = kCTCallErrorInvalidArgument;
LABEL_7:
      unsigned int v7 = *v6;
      *(void *)a2 = *v6;
      CFRetain(v7);
      a2 = 0;
    }
  }
  else if (a2)
  {
    int v6 = kCTCallErrorOperationNotAllowed;
    goto LABEL_7;
  }
LABEL_9:
  _os_nospin_lock_unlock();
  return a2;
}

uint64_t CTCallShouldPlayAudioTone(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    _os_nospin_lock_lock();
    uint64_t v1 = *(unsigned __int8 *)(v1 + 80);
    _os_nospin_lock_unlock();
  }
  return v1;
}

uint64_t CTCallShouldSetupAudioInterruption(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    _os_nospin_lock_lock();
    uint64_t v1 = *(unsigned __int8 *)(v1 + 81);
    _os_nospin_lock_unlock();
  }
  return v1;
}

uint64_t CTCallDidDeviceOriginateEnd(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    _os_nospin_lock_lock();
    uint64_t v1 = *(unsigned __int8 *)(v1 + 82);
    _os_nospin_lock_unlock();
  }
  return v1;
}

uint64_t CTCallIsOutgoing(uint64_t a1)
{
  _os_nospin_lock_lock();
  uint64_t v2 = *(unsigned __int8 *)(a1 + 64);
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t CTCallIsConferenced(uint64_t a1)
{
  _os_nospin_lock_lock();
  uint64_t v2 = *(unsigned __int8 *)(a1 + 65);
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t CTCallIsToVoicemail(uint64_t a1)
{
  _os_nospin_lock_lock();
  uint64_t v2 = *(unsigned __int8 *)(a1 + 66);
  _os_nospin_lock_unlock();
  return v2;
}

__CFString *CTCallGetCallType(uint64_t a1)
{
  _os_nospin_lock_lock();
  uint64_t v2 = _GetCallTypeStringForFlag(*(_DWORD *)(a1 + 72));
  _os_nospin_lock_unlock();
  return v2;
}

__CFString *CTCallGetCallSubType(uint64_t a1)
{
  _os_nospin_lock_lock();
  uint64_t v2 = _GetCallSubTypeString(*(_DWORD *)(a1 + 76));
  _os_nospin_lock_unlock();
  return v2;
}

CFStringRef CTCallCopyAddress(const __CFAllocator *a1, uint64_t a2)
{
  _os_nospin_lock_lock();
  CFStringRef v4 = *(const __CFString **)(a2 + 32);
  if (v4) {
    CFStringRef Copy = CFStringCreateCopy(a1, v4);
  }
  else {
    CFStringRef Copy = 0;
  }
  _os_nospin_lock_unlock();
  return Copy;
}

CFStringRef CTCallCopyName(const __CFAllocator *a1, uint64_t a2)
{
  _os_nospin_lock_lock();
  CFStringRef v4 = *(const __CFString **)(a2 + 40);
  if (v4) {
    CFStringRef Copy = CFStringCreateCopy(a1, v4);
  }
  else {
    CFStringRef Copy = 0;
  }
  _os_nospin_lock_unlock();
  return Copy;
}

CFStringRef CTCallCopyCountryCode(const __CFAllocator *a1, uint64_t a2)
{
  _os_nospin_lock_lock();
  CFStringRef v4 = *(const __CFString **)(a2 + 48);
  if (v4) {
    goto LABEL_8;
  }
  _os_nospin_lock_unlock();
  CFTypeRef cf = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyCountryCode(Default, &cf);
  _os_nospin_lock_lock();
  CFStringRef v4 = *(const __CFString **)(a2 + 48);
  CFTypeRef v6 = cf;
  if (!v4 && cf)
  {
    CFRetain(cf);
    CFStringRef v4 = (const __CFString *)cf;
    *(void *)(a2 + 48) = cf;
    CFTypeRef v6 = v4;
  }
  if (v6)
  {
    CFRelease(v6);
    CFStringRef v4 = *(const __CFString **)(a2 + 48);
  }
  if (v4) {
LABEL_8:
  }
    CFStringRef Copy = CFStringCreateCopy(a1, v4);
  else {
    CFStringRef Copy = 0;
  }
  _os_nospin_lock_unlock();
  return Copy;
}

CFStringRef CTCallCopyNetworkCode(const __CFAllocator *a1, uint64_t a2)
{
  _os_nospin_lock_lock();
  CFStringRef v4 = *(const __CFString **)(a2 + 56);
  if (v4) {
    CFStringRef Copy = CFStringCreateCopy(a1, v4);
  }
  else {
    CFStringRef Copy = 0;
  }
  _os_nospin_lock_unlock();
  return Copy;
}

BOOL CTCallAddressBlocked(uint64_t a1)
{
  _os_nospin_lock_lock();
  BOOL v2 = *(_DWORD *)(a1 + 84) == 1;
  _os_nospin_lock_unlock();
  return v2;
}

BOOL CTCallIsAlerting(uint64_t a1)
{
  _os_nospin_lock_lock();
  BOOL v2 = *(_DWORD *)(a1 + 68) == 196608;
  _os_nospin_lock_unlock();
  return v2;
}

BOOL CTCallIsWaiting(uint64_t a1)
{
  _os_nospin_lock_lock();
  BOOL v2 = *(_DWORD *)(a1 + 68) == 0x40000;
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t CTCallGetStartTime(uint64_t a1, double *a2)
{
  _os_nospin_lock_lock();
  double v4 = *(double *)(a1 + 96);
  if (v4 == 2.22507386e-308)
  {
    uint64_t v5 = 0;
  }
  else
  {
    *a2 = v4;
    uint64_t v5 = 1;
  }
  _os_nospin_lock_unlock();
  return v5;
}

uint64_t CTCallGetDuration(double *a1, double *a2)
{
  _os_nospin_lock_lock();
  double v4 = a1[12];
  if (v4 == 2.22507386e-308)
  {
    uint64_t v7 = 0;
  }
  else
  {
    double v5 = a1[13];
    if (v5 == 2.22507386e-308) {
      double v6 = CFAbsoluteTimeGetCurrent() - a1[14];
    }
    else {
      double v6 = v5 - v4;
    }
    *a2 = v6;
    uint64_t v7 = 1;
  }
  _os_nospin_lock_unlock();
  return v7;
}

uint64_t CTCallGetCauseCode(uint64_t a1)
{
  _os_nospin_lock_lock();
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  _os_nospin_lock_unlock();
  return v2;
}

__CFString *CTCallGetCauseCodeString(uint64_t a1)
{
  _os_nospin_lock_lock();
  int v2 = *(_DWORD *)(a1 + 88);
  if (v2 <= 79)
  {
    if (!v2)
    {
      unsigned __int8 v3 = @"kCTCallDisconnectNoError";
      goto LABEL_13;
    }
    if (v2 == 28)
    {
      unsigned __int8 v3 = @"kCTCallDisconnectUserBusy";
      goto LABEL_13;
    }
LABEL_12:
    unsigned __int8 v3 = @"kCTCallDisconnectOtherReason";
    goto LABEL_13;
  }
  if (v2 == 80)
  {
    unsigned __int8 v3 = @"kCTCallDisconnectSecondaryDeviceAlreadyInUse";
    goto LABEL_13;
  }
  if (v2 == 81)
  {
    unsigned __int8 v3 = @"kCTCallDisconnectAnsweredElsewhere";
    goto LABEL_13;
  }
  if (v2 != 82) {
    goto LABEL_12;
  }
  unsigned __int8 v3 = @"kCTCallDisconnectCallHandedToAnotherDevice";
LABEL_13:
  _os_nospin_lock_unlock();
  return v3;
}

uint64_t CTCallGetMultiPartyCallCountMax()
{
  uint64_t v2 = 5;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetMultiPartyCallCountMaximum(Default, &v2);
  return v2;
}

CFUUIDRef CTCallCopyUUID(const __CFAllocator *a1, uint64_t a2)
{
  _os_nospin_lock_lock();
  CFUUIDRef v4 = _CopyCallUUIDSync(a1, a2);
  _os_nospin_lock_unlock();
  return v4;
}

CFStringRef CTCallCopyUniqueStringID(const __CFAllocator *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  _os_nospin_lock_lock();
  CFUUIDRef v4 = *(const __CFUUID **)(a2 + 24);
  if (v4) {
    CFStringRef v5 = CFUUIDCreateString(a1, v4);
  }
  else {
    CFStringRef v5 = @"<Unknown>";
  }
  _os_nospin_lock_unlock();
  return v5;
}

uint64_t _CTCallGetIdentifier(uint64_t a1)
{
  _os_nospin_lock_lock();
  uint64_t v2 = *(_OWORD *)&CFUUIDGetUUIDBytes((CFUUIDRef)*(void *)(a1 + 24));
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t _CTCallGetCallStatusFromFlags(char a1, int a2)
{
  unsigned int v2 = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a1 & 0xF];
  if (v2 == 196608) {
    int v3 = 3;
  }
  else {
    int v3 = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a1 & 0xF];
  }
  if (v2 == 0x40000) {
    unsigned int v4 = 4;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a2) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t _CTCallCreateFromCallInfo(const void *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, const char *a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, char *cStr, unsigned __int8 a13)
{
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  CFAllocatorRef v20 = CFGetAllocator(a1);
  *(void *)&v44.byte0 = a2;
  *(void *)&v44.byte8 = a3;
  CFUUIDRef v21 = CFUUIDCreateFromUUIDBytes(v20, v44);
  int IsDefaultConnection = _CTServerConnectionIsDefaultConnection((uint64_t)a1);
  if (IsDefaultConnection)
  {
    pthread_mutex_lock(&_GlobalCallsLock);
    if (!v21)
    {
      uint64_t v24 = 0;
      goto LABEL_76;
    }
    Value = CFDictionaryGetValue((CFDictionaryRef)_UuidToCallMap, v21);
    if (Value)
    {
      uint64_t v24 = (uint64_t)Value;
      CFRetain(Value);
      goto LABEL_8;
    }
  }
  else if (!v21)
  {
    return 0;
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v24 = Instance;
  if (!Instance)
  {
    CFRelease(v21);
    goto LABEL_75;
  }
  *(_DWORD *)(Instance + 16) = 0;
  *(void *)(Instance + 24) = CFRetain(v21);
  *(unsigned char *)(v24 + 67) = 0;
  *(void *)(v24 + 136) = 0;
  *(_WORD *)(v24 + 80) = 0;
  *(unsigned char *)(v24 + 82) = 0;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(void *)(v24 + 112) = 0;
  *(void *)(v24 + 120) = 0;
LABEL_8:
  CFRelease(v21);
  if (a4 && !*(void *)(v24 + 32) && *a4) {
    *(void *)(v24 + 32) = CFStringCreateWithCString(v20, a4, 0x8000100u);
  }
  if (a5 && *a5)
  {
    uint64_t v26 = *(const void **)(v24 + 40);
    if (v26) {
      CFRelease(v26);
    }
    *(void *)(v24 + 40) = CFStringCreateWithCString(v20, a5, 0x8000100u);
  }
  if (a11 != 0xFFFF)
  {
    uint64_t v27 = *(const void **)(v24 + 48);
    if (v27) {
      CFRelease(v27);
    }
    *(void *)(v24 + 48) = CFStringCreateWithFormat(v20, 0, @"%03d", a11);
  }
  if (cStr && *cStr)
  {
    uint64_t v28 = *(const void **)(v24 + 136);
    if (v28) {
      CFRelease(v28);
    }
    *(void *)(v24 + 136) = CFStringCreateWithCString(v20, cStr, 0x8000100u);
  }
  if (a6 && *a6)
  {
    uint64_t v29 = *(const void **)(v24 + 120);
    if (v29) {
      CFRelease(v29);
    }
    *(void *)(v24 + 120) = CFStringCreateWithCString(v20, a6, 0x8000100u);
  }
  *(unsigned char *)(v24 + 64) = (a9 & 0x80000000) == 0;
  if ((a9 & 0xF) != 9) {
    *(_DWORD *)(v24 + 68) = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a9 & 0xF];
  }
  *(_DWORD *)(v24 + 84) = HIWORD(a9) & 3;
  *(unsigned char *)(v24 + 65) = (a9 & 0x40000000) != 0;
  *(unsigned char *)(v24 + 66) = (a9 & 0x20000000) != 0;
  int v30 = 2;
  if ((a9 & 0x20000000) == 0)
  {
    if ((a9 & 0x10000000) != 0)
    {
      int v30 = 4;
    }
    else if ((a9 & 0x1000000) != 0)
    {
      int v30 = 16;
    }
    else if ((a9 & 0x8000000) != 0)
    {
      int v30 = 8;
    }
    else
    {
      int v30 = 1;
    }
  }
  if ((a9 & 0x80000) != 0) {
    int v31 = 4;
  }
  else {
    int v31 = 1;
  }
  if ((a9 & 0x40000) != 0) {
    int v32 = 2;
  }
  else {
    int v32 = v31;
  }
  *(_DWORD *)(v24 + 72) = v30;
  *(_DWORD *)(v24 + 76) = v32;
  if ((a9 & 0x19000000) != 0)
  {
    if (*(unsigned char *)(v24 + 67)) {
      goto LABEL_62;
    }
    double v33 = (double)a7 - *MEMORY[0x1E4F1CF78];
    *(double *)(v24 + 96) = v33;
  }
  else
  {
    int v34 = *(_DWORD *)(v24 + 68);
    double v33 = 2.22507386e-308;
    if ((v34 - 3) >= 2 && v34 != 196608 && v34 != 0x40000) {
      double v33 = (double)a7 - *MEMORY[0x1E4F1CF78];
    }
    *(double *)(v24 + 96) = v33;
    if (v34 != 5 && v34)
    {
      double v35 = 2.22507386e-308;
      goto LABEL_61;
    }
  }
  double v35 = v33 + (double)a8;
LABEL_61:
  *(double *)(v24 + 104) = v35;
LABEL_62:
  if (a10) {
    *(double *)(v24 + 112) = (double)a10 - *MEMORY[0x1E4F1CF78];
  }
  *(_DWORD *)(v24 + 88) = BYTE1(a9);
  if (IsDefaultConnection) {
    int v36 = a13;
  }
  else {
    int v36 = 0;
  }
  if ((a9 & 0xF) != 6)
  {
    if (v36)
    {
      CFDictionaryAddValue((CFMutableDictionaryRef)_UuidToCallMap, *(const void **)(v24 + 24), (const void *)v24);
      CFArrayRef v41 = (const __CFArray *)_CurrentCalls;
      v46.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
      v46.location = 0;
      if (CFArrayGetFirstIndexOfValue(v41, v46, (const void *)v24) == -1) {
        CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, (const void *)v24);
      }
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (!v36)
  {
LABEL_75:
    if (!IsDefaultConnection) {
      return v24;
    }
LABEL_76:
    pthread_mutex_unlock(&_GlobalCallsLock);
    return v24;
  }
  CFArrayRef v37 = (const __CFArray *)_CurrentCalls;
  v45.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
  v45.location = 0;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v37, v45, (const void *)v24);
  if (FirstIndexOfValue == -1) {
    goto LABEL_76;
  }
  CFIndex v39 = FirstIndexOfValue;
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)_CurrentCalls, FirstIndexOfValue);
  CFRetain(ValueAtIndex);
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)_CurrentCalls, v39);
  pthread_mutex_unlock(&_GlobalCallsLock);
  if (ValueAtIndex) {
    CFRelease(ValueAtIndex);
  }
  return v24;
}

void _CTCallHandleChangeNotification(const __CFString *cf1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, @"kCTCall");
    if (Value)
    {
      CFStringRef v5 = Value;
      uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
      CFAllocatorRef v7 = CFGetAllocator(Default);
      uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v8 == CFDictionaryGetValue(theDict, @"kCTCallIsTheOnlyCall"))
      {
        CFAllocatorRef v15 = CFGetAllocator(v5);
        pthread_mutex_lock(&_GlobalCallsLock);
        CFArrayRef Copy = CFArrayCreateCopy(v15, (CFArrayRef)_CurrentCalls);
        CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
        CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, v5);
        _CurrentCallsUpToDate = 1;
        pthread_mutex_unlock(&_GlobalCallsLock);
        CFArrayRef v11 = Copy;
      }
      else
      {
        pthread_mutex_lock(&_GlobalCallsLock);
        CFArrayRef v9 = CFArrayCreateCopy(v7, (CFArrayRef)_CurrentCalls);
        CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
        _CurrentCallsUpToDate = 0;
        pthread_mutex_unlock(&_GlobalCallsLock);
        CFRelease(v9);
        CFAllocatorRef v10 = CFGetAllocator(v5);
        CFArrayRef v11 = _CTCallCopyCurrentCallsWithTypes(v10, 0xFFFFFFFF, 0);
        if (!v11) {
          goto LABEL_12;
        }
      }
      CFRelease(v11);
LABEL_12:
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFStringRef v13 = cf1;
      int v14 = v5;
      goto LABEL_13;
    }
  }
  if (!CFEqual(cf1, @"kCTCallForwardedNotification")
    && !CFEqual(cf1, @"kCTCallDeflectedNotification")
    && !CFEqual(cf1, @"kCTCallBarredNotification"))
  {
    return;
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFStringRef v13 = cf1;
  int v14 = 0;
LABEL_13:

  CFNotificationCenterPostNotification(LocalCenter, v13, v14, theDict, 1u);
}

void _CTCallHandleUSSDSessionStringNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  Value = CFDictionaryGetValue(theDict, @"kCTUSSDSessionString");
  if (Value)
  {
    CFStringRef v5 = Value;
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, a1, v5, theDict, 1u);
  }
}

void _CTCallHandleCallControlErrorNotification(const __CFString *a1, const __CFDictionary *a2)
{
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  CFAllocatorRef v5 = CFGetAllocator(Default);
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  pthread_mutex_lock(&_GlobalCallsLock);
  CFArrayRef Copy = CFArrayCreateCopy(v5, (CFArrayRef)_CurrentCalls);
  CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
  _CurrentCallsUpToDate = 0;
  pthread_mutex_unlock(&_GlobalCallsLock);
  CFRelease(Copy);
  CFAllocatorRef v7 = (const void *)CTTelephonyCenterGetDefault();
  CFAllocatorRef v8 = CFGetAllocator(v7);
  CFArrayRef v9 = _CTCallCopyCurrentCallsWithTypes(v8, 0xFFFFFFFF, 0);
  if (v9) {
    CFRelease(v9);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, a1, 0, a2, 1u);
}

void _CTCallInvalidateCallCache()
{
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  pthread_mutex_lock(&_GlobalCallsLock);
  CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)_CurrentCalls);
  CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
  _CurrentCallsUpToDate = 0;
  pthread_mutex_unlock(&_GlobalCallsLock);

  CFRelease(Copy);
}

uint64_t CTCallGetEmergencyStatus()
{
  unsigned __int8 v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetEmergencyCallStatus(Default, &v2);
  return v2;
}

uint64_t CTCopyCallManagementState()
{
  uint64_t v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyCallManagementState(Default, &v2);
  return v2;
}

uint64_t CTGetEmergencyWiFiConfig()
{
  uint64_t v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetEmergencyConfig(Default, &v2);
  return v2;
}

uint64_t CTStartOTASP()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionStartOTASP(Default, 0);
}

uint64_t CTStartManualOTASP(unsigned int a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionStartOTASP(Default, a1);
}

uint64_t CTCallSetAudioToneRelayFlag(uint64_t result, char a2)
{
  if (result)
  {
    uint64_t v3 = result;
    _os_nospin_lock_lock();
    *(unsigned char *)(v3 + 80) = a2;
    return _os_nospin_lock_unlock();
  }
  return result;
}

uint64_t CTCallSetSetupAudioInterruptionFlag(uint64_t result, char a2)
{
  if (result)
  {
    uint64_t v3 = result;
    _os_nospin_lock_lock();
    *(unsigned char *)(v3 + 81) = a2;
    return _os_nospin_lock_unlock();
  }
  return result;
}

uint64_t CTCallSetDeviceOriginatedEndFlag(uint64_t result, char a2)
{
  if (result)
  {
    uint64_t v3 = result;
    _os_nospin_lock_lock();
    *(unsigned char *)(v3 + 82) = a2;
    return _os_nospin_lock_unlock();
  }
  return result;
}

BOOL CTCallDialService(const __CFDictionary *a1, void *a2)
{
  Value = CFDictionaryGetValue(a1, @"kCTCallDialServiceAddress");
  CFAllocatorRef v5 = CFDictionaryGetValue(a1, @"kCTCallDialServiceCallType");
  double v6 = CFDictionaryGetValue(a1, @"kCTCallDialServiceProvider");
  CFAllocatorRef v7 = CFDictionaryGetValue(a1, @"kCTCallDialServiceSource");
  uint64_t Default = CTTelephonyCenterGetDefault();
  if (Value) {
    BOOL v9 = v5 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && v6 != 0) {
    return _CTServerConnectionDialService(Default, (uint64_t)Value, (uint64_t)v7, v5, v6) >> 32 == 0;
  }
  if (a2)
  {
    *a2 = @"Invalid argument";
    CFRetain(@"Invalid argument");
  }
  return 0;
}

CFStringRef CTCallCopyISOCountryCode(const __CFAllocator *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  _os_nospin_lock_lock();
  CFStringRef v4 = *(const __CFString **)(a2 + 136);
  if (v4) {
    CFStringRef Copy = CFStringCreateCopy(a1, v4);
  }
  else {
    CFStringRef Copy = 0;
  }
  _os_nospin_lock_unlock();
  return Copy;
}

CFDictionaryRef CTCallPullCallFromOtherDevice(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"kCTCallStartTime");
    if (result)
    {
      int valuePtr = 0;
      CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
      unsigned int v5 = llround(CFAbsoluteTimeGetCurrent() - (double)valuePtr);
      CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v5);
      if (v2) {
        CFDictionaryAddValue(v1, @"kCTCallDuration", v2);
      }
      uint64_t v4 = 0;
      uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
      if ((unint64_t)_CTServerConnectionPullCallFromOtherDevice(Default, v1, &v4) >> 32) {
        uint64_t v4 = 0;
      }
      if (v2) {
        CFRelease(v2);
      }
      return (const __CFDictionary *)v4;
    }
  }
  return result;
}

__CFDictionary *CTCreateCallInfoForHandoffCall(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  _os_nospin_lock_lock();
  CFStringRef v4 = *(const __CFString **)(a1 + 32);
  if (v4) {
    CFStringRef Copy = CFStringCreateCopy(v2, v4);
  }
  else {
    CFStringRef Copy = 0;
  }
  CFStringRef v6 = *(const __CFString **)(a1 + 40);
  if (v6) {
    CFStringRef v7 = CFStringCreateCopy(v2, v6);
  }
  else {
    CFStringRef v7 = 0;
  }
  double Current = *(double *)(a1 + 96);
  if (Current == 2.22507386e-308 || Current <= 0.0) {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  unsigned int valuePtr = llround(Current);
  CFNumberRef v9 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  int v10 = *(unsigned __int8 *)(a1 + 64);
  CFStringRef v11 = CFUUIDCreateString(v2, *(CFUUIDRef *)(a1 + 24));
  if (Copy) {
    CFDictionaryAddValue(Mutable, @"kCTCallPhoneNumber", Copy);
  }
  if (v7) {
    CFDictionaryAddValue(Mutable, @"kCTCallCallerName", v7);
  }
  if (v9) {
    CFDictionaryAddValue(Mutable, @"kCTCallStartTime", v9);
  }
  if (v10) {
    int v12 = @"kCTCallDirectionOutgoing";
  }
  else {
    int v12 = @"kCTCallDirectionIncoming";
  }
  CFDictionaryAddValue(Mutable, @"kCTCallDirection", v12);
  if (v11) {
    CFDictionaryAddValue(Mutable, @"kCTCallId", v11);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11) {
    CFRelease(v11);
  }
  _os_nospin_lock_unlock();
  return Mutable;
}

uint64_t CTCallIsCallHandoffPossible()
{
  unsigned __int8 v3 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionPullCallIsPossible(Default, &v3) >> 32) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t CTCallCreateFromSerializedData(uint64_t result)
{
  if (result)
  {
    CFDataRef v1 = (const __CFData *)result;
    uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
    return _CTCallCreateFromSerializedData(Default, v1);
  }
  return result;
}

void *CTCallPhoneNumberIsMmiOrUssd(void *result)
{
  if (result)
  {
    CFDataRef v1 = result;
    uint64_t Default = CTTelephonyCenterGetDefault();
    BOOL v6 = 0;
    unint64_t v3 = _CTServerConnectionPhoneNumberIsMmiOrUssd(Default, v1, &v6) >> 32;
    BOOL v4 = v6 && v3 == 0;
    uint64_t v5 = MEMORY[0x1E4F1CFC8];
    if (v4) {
      uint64_t v5 = MEMORY[0x1E4F1CFD0];
    }
    return *(void **)v5;
  }
  return result;
}

uint64_t CTCallMediaStatusIsActive()
{
  char v5 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  unint64_t IsActive = _CTServerConnectionMediaStatusIsActive(Default, &v5);
  if (v5) {
    CFAllocatorRef v2 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFAllocatorRef v2 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v3 = *v2;
  if (HIDWORD(IsActive)) {
    return 0;
  }
  else {
    return v3;
  }
}

void _CallDestroy(uint64_t a1)
{
  pthread_mutex_lock(&_GlobalCallsLock);
  _os_nospin_lock_lock();
  CFAllocatorRef v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    if (CFDictionaryGetValue((CFDictionaryRef)_UuidToCallMap, v2) == (const void *)a1) {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)_UuidToCallMap, *(const void **)(a1 + 24));
    }
    CFRelease(*(CFTypeRef *)(a1 + 24));
  }
  pthread_mutex_unlock(&_GlobalCallsLock);
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  BOOL v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  char v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  BOOL v6 = *(const void **)(a1 + 136);
  if (v6) {
    CFRelease(v6);
  }
  CFStringRef v7 = *(const void **)(a1 + 56);
  if (v7) {
    CFRelease(v7);
  }
  CFAllocatorRef v8 = *(const void **)(a1 + 120);
  if (v8)
  {
    CFRelease(v8);
  }
}

BOOL _CallEqual(unint64_t a1, unint64_t a2)
{
  if (a1 >= a2) {
    unint64_t v2 = a2;
  }
  else {
    unint64_t v2 = a1;
  }
  if (a1 >= a2) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = a2;
  }
  _os_nospin_lock_lock();
  _os_nospin_lock_lock();
  CFUUIDRef v4 = *(const __CFUUID **)(v2 + 24);
  if (v4 && *(void *)(v3 + 24))
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v6 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4);
    CFStringRef v7 = CFUUIDCreateString(v5, *(CFUUIDRef *)(v3 + 24));
    CFStringRef v8 = v7;
    if (v6) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      BOOL v11 = 0;
      BOOL v10 = 0;
      if (!v6)
      {
        if (!v7) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v11 = CFEqual(v6, v7);
    }
    CFRelease(v6);
    BOOL v10 = v11;
    if (v8) {
LABEL_19:
    }
      CFRelease(v8);
  }
  else
  {
    BOOL v10 = 0;
  }
LABEL_20:
  _os_nospin_lock_unlock();
  _os_nospin_lock_unlock();
  return v10;
}

CFHashCode _CallHash(uint64_t a1)
{
  _os_nospin_lock_lock();
  CFHashCode v2 = CFHash(*(CFTypeRef *)(a1 + 24));
  _os_nospin_lock_unlock();
  return v2;
}

CFStringRef _CallCopyDescription(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  _os_nospin_lock_lock();
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFAllocatorRef v3 = v2;
  uint64_t v11 = 0;
  *(_OWORD *)buffer = 0u;
  long long v10 = 0u;
  CFUUIDRef v4 = *(const __CFUUID **)(a1 + 24);
  if (v4)
  {
    CFStringRef v5 = CFUUIDCreateString(v2, v4);
    if (v5)
    {
      CFStringRef v6 = v5;
      CFStringGetCString(v5, buffer, 40, 0x8000100u);
      CFRelease(v6);
    }
  }
  CFStringRef v7 = CFStringCreateWithFormat(v3, 0, @"<CTCall %p [%p]>{status = %d, type = 0x%x, subtype = 0x%x, uuid = %p [%s], address = %p, start = %g, session start = %g, end = %g, audioToneRelay = %u, setupAudioInterruption = %u, deviceOriginatedEnd = %u}", a1, v3, *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), *(void *)(a1 + 24), buffer, *(void *)(a1 + 32), *(void *)(a1 + 96), *(void *)(a1 + 112), *(void *)(a1 + 104), *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81), *(unsigned __int8 *)(a1 + 82));
  _os_nospin_lock_unlock();
  return v7;
}

uint64_t convertToCallStatus(int a1)
{
  switch(a1)
  {
    case 1:
      uint64_t result = 0;
      break;
    case 2:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      uint64_t result = 5;
      break;
    default:
      if (a1 == 0x40000) {
        unsigned int v2 = 8;
      }
      else {
        unsigned int v2 = 6;
      }
      if (a1 == 196608) {
        uint64_t result = 7;
      }
      else {
        uint64_t result = v2;
      }
      break;
  }
  return result;
}

CFUUIDRef _CTCallUpdateFromCallInfo(int a1, char *cf, CFUUIDBytes *a3, signed int a4)
{
  CFAllocatorRef v8 = CFGetAllocator(cf);
  CFUUIDRef result = CFUUIDCreateFromUUIDBytes(v8, *a3);
  *((void *)cf + 3) = result;
  if (result)
  {
    cf[64] = a4 >= 0;
    *((_DWORD *)cf + 17) = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a4 & 0xF];
    cf[65] = (a4 & 0x40000000) != 0;
    cf[66] = (a4 & 0x20000000) != 0;
    *(int8x8_t *)(cf + 84) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a4), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF00000003);
    if (a1)
    {
      _os_nospin_lock_unlock();
      CFDictionaryAddValue((CFMutableDictionaryRef)_UuidToCallMap, *((const void **)cf + 3), cf);
      CFArrayRef v10 = (const __CFArray *)_CurrentCalls;
      v12.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
      v12.location = 0;
      if (CFArrayGetFirstIndexOfValue(v10, v12, cf) == -1) {
        CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, cf);
      }
      return (CFUUIDRef)_os_nospin_lock_lock();
    }
  }
  return result;
}

uint64_t CTTelephonyCenterGetRunLoop(uint64_t a1)
{
  uint64_t v5 = 0;
  CFStringRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  CFDataRef v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __CTTelephonyCenterGetRunLoop_block_invoke;
  v4[3] = &unk_1E52609C8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __CTTelephonyCenterGetRunLoop_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(*(void *)(*(void *)(result + 40)
                                                                                          + 24)
                                                                              + 16);
  return result;
}

uint64_t CTTelephonyCenterSetDefaultDispatchQueue(NSObject *a1)
{
  return sCTTelephonyCenterSetDefaultDispatchQueue(0, a1);
}

uint64_t sCTTelephonyCenterSetDefaultDispatchQueue(uint64_t result, NSObject *a2)
{
  int v3 = result;
  uint64_t v4 = _CTTelephonyCenterDefault;
  if (_CTTelephonyCenterDefault) {
    goto LABEL_9;
  }
  pthread_mutex_lock(&_CTTelephonyCreateMutex);
  BOOL v5 = _CTTelephonyCenterDefault != 0;
  if (!_CTTelephonyCenterDefault)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v7 = getprogname();
    CFStringRef v8 = CFStringCreateWithFormat(v6, 0, @"%s-CTTelephonyCenter", v7);
    BOOL v9 = _CTServerConnectionCreateOnTargetQueue((uint64_t)v6, (uint64_t)v8, a2, &__block_literal_global_0);
    if (v8) {
      CFRelease(v8);
    }
    if (v9)
    {
      CTTelephonyCenterSetup(v9);
      _CTTelephonyCenteruint64_t Default = (uint64_t)v9;
      v9[33] = v3;
    }
    else
    {
      _CTTelephonyCenteruint64_t Default = 0;
    }
  }
  CFUUIDRef result = pthread_mutex_unlock(&_CTTelephonyCreateMutex);
  uint64_t v4 = _CTTelephonyCenterDefault;
  if (v5)
  {
LABEL_9:
    if (v4)
    {
      pthread_mutex_lock(&_CTTelephonyCreateMutex);
      if (!*(unsigned char *)(_CTTelephonyCenterDefault + 33))
      {
        _CTServerConnectionSetTargetQueue((void *)_CTTelephonyCenterDefault, a2);
        if (v3) {
          *(unsigned char *)(_CTTelephonyCenterDefault + 33) = 1;
        }
      }
      return pthread_mutex_unlock(&_CTTelephonyCreateMutex);
    }
  }
  return result;
}

uint64_t CTTelephonyCenterSetDefaultRunloopPermanently(__CFRunLoop *a1, __CFString *a2)
{
  return sCTTelephonyCenterSetDefaultRunloop(1, a1, a2);
}

uint64_t CTTelephonyCenterSetDefaultDispatchQueuePermanently(NSObject *a1)
{
  return sCTTelephonyCenterSetDefaultDispatchQueue(1, a1);
}

void _CTTelephonyCenterRegisterTimeChangeNotification(void)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFDataRef v1 = (const void *)_CTTelephonyCenterDefault;

  CFNotificationCenterAddObserver(DarwinNotifyCenter, v1, (CFNotificationCallback)_SignificantTimeChange, @"SignificantTimeChangeNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void CTTelephonyCenterRemoveObserver(uint64_t a1, const void *a2, const __CFString *a3, const void *a4)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterRemoveObserver(LocalCenter, a2, a3, a4);
}

void CTTelephonyCenterRemoveEveryObserver(uint64_t a1, const void *a2)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterRemoveEveryObserver(LocalCenter, a2);
}

uint64_t CTTelephonyCenterSendBarrier(uint64_t a1)
{
  return _CTServerConnectionSendBarrier(a1, 0);
}

void ___ZL38CTTelephonyCenterCreateOnDispatchQueueP16dispatch_queue_s_block_invoke(int a1, __CFString *a2, CFDictionaryRef theDict)
{
}

void _DaemonReady(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"kCTTelephonyCenterDaemonRestartNotification", 0, 0, 1u);
}

void _SignificantTimeChange(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  global_queue = dispatch_get_global_queue(0, 0);

  dispatch_async(global_queue, &__block_literal_global_15);
}

void ___ZL22_SignificantTimeChangeP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke()
{
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  if (Default) {
    CFAllocatorRef v1 = CFGetAllocator(Default);
  }
  else {
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  CFArrayRef v2 = _CTCallCopyCurrentCallsWithTypes(v1, 0xFFFFFFFF, 0);
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_18447AA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18447AD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18447AEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18447B024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18447B0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18447B254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18447B310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18447B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18447B6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18447BB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18447BDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientDelegateProxy forwardInvocation:]::$_0>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

uint64_t CTGetSignalStrength()
{
  LODWORD(var4) = 0;
  CTIndicatorsGetSignalStrength(0, &var4, 0);
  return var4;
}

uint64_t CTIndicatorsGetSignalStrength(_DWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v12 = 0;
  int v11 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  if (a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = (_DWORD *)&v12 + 1;
  }
  if (a2) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = &v12;
  }
  if (a3) {
    BOOL v9 = a3;
  }
  else {
    BOOL v9 = &v11;
  }
  int *v9 = 0;
  *(_DWORD *)uint64_t v8 = 0;
  *uint64_t v7 = 0;
  return _CTServerConnectionGetSignalStrength(Default, v7, v8, v9);
}

void CTIndicatorsCopyVoicemailStatus(char *a1, int *a2, CFURLRef *a3)
{
  int v12 = 0;
  char v11 = 0;
  CFTypeRef cf = 0;
  char v9 = 0;
  if (a1) {
    int v3 = a1;
  }
  else {
    int v3 = &v11;
  }
  if (a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = &v12;
  }
  char *v3 = 0;
  if (a3) {
    p_CFTypeRef cf = a3;
  }
  else {
    p_CFTypeRef cf = (CFURLRef *)&cf;
  }
  *uint64_t v4 = 0;
  *p_CFTypeRef cf = 0;
  char v6 = 1;
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  do
  {
    uint64_t VoiceMailAvailable = _CTServerConnectionGetVoiceMailAvailable(Default, v3, &v9, v4, p_cf);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
  }
  while (VoiceMailAvailable == 0x500000002);
  if (!v9) {
    *uint64_t v4 = -1;
  }
  if (cf) {
    CFRelease(cf);
  }
}

void _CTIndicatorsHandleSignalStrengthNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"kCTIndicatorsSignalStrength");
  if (Value)
  {
    CFNumberRef v5 = Value;
    int valuePtr = 0;
    if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, a1, v5, theDict, 1u);
    }
  }
}

void _CTIndicatorsHandleVoiceMailAvailableNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"kCTIndicatorsVoiceMailAvailable");
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, a1, Value, theDict, 1u);
}

void _CTIndicatorsHandleUnconditionalCallForwardingNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"kCTIndicatorsUnconditionalCallForwarding");
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, a1, Value, theDict, 1u);
}

unint64_t CTSettingRequest(const __CFDictionary *a1)
{
  unint64_t result = (unint64_t)CFDictionaryGetValue(a1, @"kCTSettingType");
  if (result)
  {
    int v3 = (__CFString *)result;
    unint64_t result = CTTelephonyCenterGetDefault();
    uint64_t v4 = result;
    if (v3 == @"kCTSettingTypeCallWaiting")
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallClass");
      return _CTServerConnectionFetchCallWaitingValue(v4, Value);
    }
    else if (v3 == @"kCTSettingTypeCallForwarding")
    {
      CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallForwardingReason");
      CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallClass");
      return _CTServerConnectionFetchCallForwardingValue(v4, v6, v7);
    }
    else if (v3 == @"kCTSettingTypeCallBarring")
    {
      CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallBarringFacility");
      CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallClass");
      CFDictionaryGetValue(a1, @"kCTSettingPassword");
      return _CTServerConnectionFetchCallBarringValue(v4, v8, v9);
    }
    else if (v3 == @"kCTSettingTypeConnectedLinePresentation")
    {
      return _CTServerConnectionFetchConnectedLinePresentationValue(result);
    }
    else if (v3 == @"kCTSettingTypeCallingLinePresentation")
    {
      return _CTServerConnectionFetchCallingLinePresentationValue(result);
    }
    else if (v3 == @"kCTSettingTypeConnectedLineIdRestriction")
    {
      return _CTServerConnectionFetchConnectedLineIdRestrictionValue(result);
    }
    else if (v3 == @"kCTSettingTypeCallingLineIdRestriction")
    {
      return _CTServerConnectionFetchCallingLineIdRestrictionValue(result);
    }
    else if (v3 == @"kCTSettingTypeSIMLock")
    {
      return _CTServerConnectionFetchSimLockValue(result);
    }
    else if (v3 == @"kCTSettingTypeServiceCenterAddress")
    {
      return _CTServerConnectionFetchServiceCenterAddressValue(result);
    }
  }
  return result;
}

uint64_t CTSettingSave(const __CFDictionary *a1)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"kCTSettingType");
  if (result)
  {
    int v3 = (__CFString *)result;
    uint64_t result = CTTelephonyCenterGetDefault();
    uint64_t v4 = result;
    if (v3 == @"kCTSettingTypeCallWaiting")
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallClass");
      BOOL v6 = CFDictionaryGetValue(a1, @"kCTSettingEnabled") == (const void *)*MEMORY[0x1E4F1CFD0];
      return _CTServerConnectionSaveCallWaitingValue(v4, Value, v6);
    }
    else if (v3 == @"kCTSettingTypeCallForwarding")
    {
      int valuePtr = 0;
      CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a1, @"kCTSettingCallForwardingNoReplyTime");
      if (v7)
      {
        p_int valuePtr = &valuePtr;
        if (!CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr)) {
          p_int valuePtr = 0;
        }
      }
      else
      {
        p_int valuePtr = 0;
      }
      CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallForwardingReason");
      CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallClass");
      BOOL v15 = CFDictionaryGetValue(a1, @"kCTSettingEnabled") == (const void *)*MEMORY[0x1E4F1CFD0];
      unsigned int v16 = CFDictionaryGetValue(a1, @"kCTSettingCallForwardingNumber");
      return _CTServerConnectionSaveCallForwardingValue(v4, v13, v14, v15, (uint64_t)v16, p_valuePtr);
    }
    else if (v3 == @"kCTSettingTypeCallBarring")
    {
      CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallBarringFacility");
      CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallClass");
      BOOL v11 = CFDictionaryGetValue(a1, @"kCTSettingEnabled") == (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionaryGetValue(a1, @"kCTSettingPassword");
      return _CTServerConnectionSaveCallBarringValue(v4, v9, v10, v11);
    }
    else if (v3 == @"kCTSettingTypeCallingLineIdRestriction")
    {
      CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(a1, @"kCTSettingCallingLineIdRestriction");
      return _CTServerConnectionSaveCallingLineIdRestrictionValue(v4, v12);
    }
    else if (v3 == @"kCTSettingTypeSIMLock")
    {
      BOOL v17 = CFDictionaryGetValue(a1, @"kCTSettingEnabled") == (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionaryGetValue(a1, @"kCTSettingPassword");
      return _CTServerConnectionSaveSimLockValue(v4, v17);
    }
    else if (v3 == @"kCTSettingTypeServiceCenterAddress")
    {
      CFDictionaryGetValue(a1, @"kCTSettingServiceCenterAddress");
      return _CTServerConnectionSaveServiceCenterAddressValue(v4);
    }
    else if (v3 == @"kCTSettingTypePIN")
    {
      CFDictionaryGetValue(a1, @"kCTSettingPassword");
      CFDictionaryGetValue(a1, @"kCTSettingNewPassword");
      return _CTServerConnectionChangePinPassword(v4);
    }
    else if (v3 == @"kCTSettingTypePIN2")
    {
      CFDictionaryGetValue(a1, @"kCTSettingPassword");
      CFDictionaryGetValue(a1, @"kCTSettingNewPassword");
      return _CTServerConnectionChangePin2Password(v4);
    }
  }
  return result;
}

CFDictionaryRef CTSettingCopyMyPhoneNumberExtended()
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  unsigned int v1 = 0;
  CFArrayRef v2 = (void *)*MEMORY[0x1E4F1CFC8];
  do
  {
    CFTypeRef v10 = 0;
    CFTypeRef cf = 0;
    CFStringRef v8 = v2;
    CFStringRef v9 = v2;
    _CTServerConnectionCopyPhoneNumber(Default, v1, (CFStringRef *)&cf, (CFStringRef *)&v10, &v9, &v8);
    if (cf) {
      CFRelease(cf);
    }
    if (v1 > 2) {
      break;
    }
    ++v1;
  }
  while (!v10);
  CFNumberRef v7 = 0;
  if ((unint64_t)_CTServerConnectionGetSIMStatus((uint64_t)Default, &v7) >> 32)
  {
    CFStringRef v3 = @"kCTSIMSupportSIMStatusNotReady";
    CFNumberRef v7 = @"kCTSIMSupportSIMStatusNotReady";
  }
  else
  {
    CFStringRef v3 = v7;
  }
  if (CFStringCompare(v3, @"kCTSIMSupportSIMStatusReady", 1uLL)) {
    CFStringRef v8 = v2;
  }
  else {
    CFArrayRef v2 = v8;
  }
  keys[0] = @"kCTSettingMyPhoneNumberExists";
  keys[1] = @"kCTSettingMyPhoneNumberEditable";
  keys[2] = @"kCTSettingMyPhoneNumber";
  values[0] = v9;
  values[1] = v2;
  xpc_object_t values[2] = (void *)v10;
  if (v10) {
    CFIndex v4 = 3;
  }
  else {
    CFIndex v4 = 2;
  }
  CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v10) {
    CFRelease(v10);
  }
  return v5;
}

CFTypeRef CTSettingCopyEffectiveSimInfo()
{
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  CFTypeRef cf = 0;
  unint64_t v1 = _CTServerConnectionCopyEffectiveSimInfo(Default, (CFDictionaryRef *)&cf);
  CFTypeRef result = cf;
  if (HIDWORD(v1)) {
    BOOL v3 = cf == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t CTSettingSetIMSIOverride()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"IMSIOverride");
}

uint64_t CTSettingSetFakePrimaryDNSKey()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"FakePrimaryDns");
}

uint64_t CTSettingCopyFakePrimaryDNSKey()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  uint64_t v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"FakePrimaryDns", &v2);
  return v2;
}

uint64_t CTSettingSetFakeSecondaryDNSKey()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"FakeSecondaryDns");
}

uint64_t CTSettingCopyFakeSecondaryDNSKey()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  uint64_t v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"FakeSecondaryDns", &v2);
  return v2;
}

uint64_t CTSettingSetVerifyCarrierBundles()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"VerifyBundles");
}

BOOL CTSettingCopyVerifyCarrierBundles()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  CFBooleanRef BOOLean = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"VerifyBundles", (uint64_t *)&BOOLean);
  return CFBooleanGetValue(BOOLean) == 1;
}

uint64_t CTSettingSetVerifyAPN()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"VerifyAPN");
}

BOOL CTSettingCopyVerifyAPN()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  CFBooleanRef BOOLean = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"VerifyAPN", (uint64_t *)&BOOLean);
  return CFBooleanGetValue(BOOLean) == 1;
}

uint64_t CTSettingSetDualIPBringUp()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"DualIPBringUp");
}

BOOL CTSettingCopyDualIPBringUp()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  CFBooleanRef BOOLean = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"DualIPBringUp", (uint64_t *)&BOOLean);
  return CFBooleanGetValue(BOOLean) == 1;
}

uint64_t CTSettingSetWiFiCallingInCallHandover()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"WiFiCallingInCallHandover");
}

BOOL CTSettingCopyWiFiCallingInCallHandover()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  CFDictionaryRef v5 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"WiFiCallingInCallHandover", (uint64_t *)&v5);
  unint64_t v1 = v5;
  if (!v5) {
    return 0;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  BOOL v3 = TypeID == CFGetTypeID(v1) && CFBooleanGetValue((CFBooleanRef)v1) != 0;
  CFRelease(v1);
  return v3;
}

uint64_t CTSettingSetEPDGAddress()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"EPDGAddress");
}

uint64_t CTSettingSetPCSCFAddress()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"PCSCFAddress");
}

uint64_t CTSettingCopyEPDGAddress()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  uint64_t v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"EPDGAddress", &v2);
  return v2;
}

uint64_t CTSettingCopyPCSCFAddress()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  uint64_t v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"PCSCFAddress", &v2);
  return v2;
}

uint64_t CTSettingSetShowVoLTEStatusIndicator()
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPreferencesSetValue(Default, @"ShowVoLTEStatusIndicator");
}

BOOL CTSettingCopyShowVoLTEStatusIndicator()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  CFBooleanRef v4 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"ShowVoLTEStatusIndicator", (uint64_t *)&v4);
  CFBooleanRef v1 = v4;
  if (v4 && (CFTypeID TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v1))) {
    return CFBooleanGetValue(v1) != 0;
  }
  else {
    return 0;
  }
}

const void *CTSettingsCopyiWlanGatewayAddress()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  CFBooleanRef v4 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, @"iWlanGatewayAddress", (uint64_t *)&v4);
  CFBooleanRef v1 = v4;
  if (!v4) {
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v1)) {
    return 0;
  }
  return v1;
}

__CFString *CTSIMSupportGetSIMStatus()
{
  uint64_t v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetSIMStatus(Default, &v2);
  return v2;
}

uint64_t CTSIMSupportPINUnlock(uint64_t a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPINUnlock(Default, a1);
}

uint64_t CTSIMSupportPUKUnlock(uint64_t a1, uint64_t a2)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionPUKUnlock(Default, a1, a2);
}

uint64_t CTSIMSupportGetRemainingPINAttempts()
{
  int v2 = -1;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetRemainingPINAttemptCount(Default, &v2);
  return v2;
}

uint64_t CTSIMSupportGetRemainingPUKAttempts()
{
  int v2 = -1;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetRemainingPUKAttemptCount(Default, &v2);
  return v2;
}

CFStringRef CTSIMSupportCopyMobileSubscriberIdentity(const __CFAllocator *a1)
{
  CFStringRef theString = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyMobileSubscriberIdentity(Default, &theString);
  if (!theString) {
    return 0;
  }
  CFStringRef Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

CFStringRef CTSIMSupportCopyMobileSubscriberCountryCode(const __CFAllocator *a1)
{
  CFStringRef theString = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyMobileSubscriberCountryCode(Default, &theString);
  if (!theString) {
    return 0;
  }
  CFStringRef Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

CFStringRef CTSIMSupportCopyMobileSubscriberNetworkCode(const __CFAllocator *a1)
{
  CFStringRef theString = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyMobileSubscriberNetworkCode(Default, &theString);
  if (!theString) {
    return 0;
  }
  CFStringRef Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

__CFString *CTRegistrationGetStatus()
{
  int v2 = @"kCTRegistrationStatusUnknown";
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetRegistrationStatus(Default, &v2);
  return v2;
}

uint64_t CTRegistrationCopyLocalizedOperatorName()
{
  uint64_t v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyLocalizedOperatorName(Default, &v2);
  return v2;
}

CFStringRef CTRegistrationCopyAbbreviatedOperatorName(const __CFAllocator *a1)
{
  CFStringRef theString = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyAbbreviatedOperatorName(Default, &theString);
  if (!theString) {
    return 0;
  }
  CFStringRef Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

uint64_t CTRegistrationNetworkSelectionMenuAvailable()
{
  unsigned __int8 v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionNetworkSelectionMenuAvailable(Default, &v2);
  return v2;
}

unint64_t CTRegistrationAutomaticallySelectNetwork()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unint64_t result = _CTServerConnectionAutomaticallySelectNetwork(Default);
  if (HIDWORD(result))
  {
    return _CTServerConnectionAutomaticallySelectNetwork(Default);
  }
  return result;
}

unint64_t CTRegistrationRequestNetworkList()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unint64_t result = _CTServerConnectionFetchNetworkList(Default);
  if (HIDWORD(result))
  {
    return _CTServerConnectionFetchNetworkList(Default);
  }
  return result;
}

unint64_t CTRegistrationManuallySelectNetwork(const __CFDictionary *a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unint64_t result = _CTServerConnectionSelectNetwork(Default, a1);
  if (HIDWORD(result))
  {
    return _CTServerConnectionSelectNetwork(Default, a1);
  }
  return result;
}

uint64_t CTRegistrationCopyManualNetworkSelection()
{
  uint64_t v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionCopyManualNetworkSelection(Default, &v2) >> 32) {
    _CTServerConnectionCopyManualNetworkSelection(Default, &v2);
  }
  return v2;
}

__CFString *CTRegistrationGetNetworkSelectionMode()
{
  uint64_t v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionGetNetworkSelectionMode(Default, &v2) >> 32) {
    _CTServerConnectionGetNetworkSelectionMode(Default, &v2);
  }
  return v2;
}

__CFString *CTRegistrationGetNetworkSelectionState()
{
  uint64_t v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionGetNetworkSelectionState(Default, &v2) >> 32) {
    _CTServerConnectionGetNetworkSelectionState(Default, &v2);
  }
  return v2;
}

uint64_t CTRegistrationGetDataAttached()
{
  unsigned __int8 v2 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionIsDataAttached(Default, &v2);
  return v2;
}

__CFString *CTRegistrationGetDataIndicator()
{
  CFBooleanRef v0 = @"kCTRegistrationDataIndicatorNone";
  CFDictionaryRef v1 = (const __CFDictionary *)CTRegistrationCopyDataStatus();
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    xpc_object_t value = 0;
    if (CFDictionaryGetValueIfPresent(v1, @"kCTRegistrationDataIndicator", (const void **)&value)) {
      BOOL v3 = value == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      CFTypeID v4 = CFGetTypeID(value);
      if (v4 == CFStringGetTypeID()) {
        CFBooleanRef v0 = (__CFString *)value;
      }
    }
    CFRelease(v2);
  }
  return v0;
}

CFTypeRef CTRegistrationCopyDataStatus()
{
  CFTypeRef cf = 0;
  uint64_t Default = (const void *)CTTelephonyCenterGetDefault();
  uint64_t v1 = _CTServerConnectionCopyDataStatus(Default, 0, (const __CFDictionary **)&cf);
  if (HIDWORD(v1)) {
    BOOL v2 = v1 == 2;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2 && HIDWORD(v1) == 268435459)
  {
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    _CTServerConnectionCopyDataStatus(Default, 0, (const __CFDictionary **)&cf);
  }
  return cf;
}

uint64_t CTRegistrationGetDataContextActive(int a1)
{
  unsigned __int8 v4 = 0;
  uint64_t Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetPacketContextActive(Default, a1, &v4);
  return v4;
}

uint64_t CTRegistrationSetDataContextActive(int a1, unsigned int a2)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionSetPacketContextActive(Default, a1, a2);
}

void _CTRegistrationHandleDataStatusChangedNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  if (!theDict) {
    return;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, @"kCTRegistrationDataContextID");
  CFBooleanRef v5 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"kCTRegistrationDataActivationWasForMMS");
  CFBooleanRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 != CFBooleanGetTypeID())
    {
      LODWORD(v6) = 0;
      if (!Value) {
        return;
      }
      goto LABEL_8;
    }
    LODWORD(v6) = CFBooleanGetValue(v6) == 1;
  }
  if (!Value) {
    return;
  }
LABEL_8:
  CFTypeID v8 = CFGetTypeID(Value);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (v6 || v8 == TypeID)
  {
    CFAllocatorRef v10 = CFGetAllocator(theDict);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, theDict);
    if (MutableCopy)
    {
      CFStringRef v12 = MutableCopy;
      CFStringRef v13 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v13 == CFDictionaryGetValue(theDict, @"kCTRegistrationDataActive"))
      {
        BOOL v15 = kCTRegistrationDataStatusAttachedAndActive;
      }
      else
      {
        CFStringRef v14 = CFDictionaryGetValue(theDict, @"kCTRegistrationDataAttached");
        BOOL v15 = kCTRegistrationDataStatusUnattached;
        if (v13 == v14) {
          BOOL v15 = kCTRegistrationDataStatusAttached;
        }
      }
      CFDictionaryAddValue(v12, @"kCTRegistrationDataStatus", *v15);
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, a1, 0, v12, 1u);
      CFRelease(v12);
    }
  }
}

uint64_t CTRegistrationGetEmergencyCallBackMode()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unsigned __int8 v2 = 0;
  _CTServerConnectionGetEmergencyCallBackMode(Default, &v2);
  return v2;
}

uint64_t CTRegistrationIsInE911OverLTEMode()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unsigned __int8 v2 = 0;
  _CTServerConnectionGetE911OverLTEModeStatus(Default, &v2);
  return v2;
}

uint64_t CTRegistrationIsCDMAInternationalRoamingSettingAllowed()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unsigned __int8 v2 = 0;
  if ((unint64_t)_CTServerConnectionIsCDMAInternationalRoamingSettingAllowed(Default, &v2) >> 32) {
    _CTServerConnectionIsCDMAInternationalRoamingSettingAllowed(Default, &v2);
  }
  return v2;
}

uint64_t CTRegistrationGetCDMAInternationalRoaming()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unsigned __int8 v2 = 0;
  if ((unint64_t)_CTServerConnectionGetCDMAInternationalRoaming(Default, &v2) >> 32) {
    _CTServerConnectionGetCDMAInternationalRoaming(Default, &v2);
  }
  return v2;
}

uint64_t CTRegistrationSetCDMAInternationalRoaming(unsigned int a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unsigned __int8 v4 = 0;
  if ((unint64_t)_CTServerConnectionSetCDMAInternationalRoaming(Default, a1, &v4) >> 32) {
    _CTServerConnectionSetCDMAInternationalRoaming(Default, a1, &v4);
  }
  return v4;
}

__CFArray *CTRegistrationCopySupportedDataRates()
{
  uint64_t Default = CTTelephonyCenterGetDefault();
  unsigned __int8 v2 = 0;
  if ((unint64_t)_CTServerConnectionCopySupportedDataRates(Default, &v2) >> 32) {
    _CTServerConnectionCopySupportedDataRates(Default, &v2);
  }
  return v2;
}

void _CTHandleNotification(void **a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const char *a7, const char *a8, const char *a9)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFAllocatorRef v16 = v15;
  *(_OWORD *)values = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  *(_OWORD *)keys = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  if (a2 > 50)
  {
    if (a2 <= 96)
    {
      switch(a2)
      {
        case '3':
LABEL_35:
          CFAllocatorRef alloc = v15;
          uint64_t v29 = _FillDictionaryKeysAndValuesForDataStatus(v15, a4, (uint64_t *)a3, (const __CFString **)keys, values);
          CFIndex v28 = v29;
          if (a2 == 44 && v29 >= 1)
          {
            CFAllocatorRef v20 = @"kCTRegistrationNewServingNetworkNotification";
            break;
          }
          if (v29 <= 0) {
            CFAllocatorRef v20 = 0;
          }
          else {
            CFAllocatorRef v20 = @"kCTRegistrationDataStatusChangedNotification";
          }
          goto LABEL_107;
        case '4':
          goto LABEL_21;
        case ':':
        case ';':
        case '<':
          if (!a4) {
            return;
          }
          keys[0] = @"kCTSIMSupportSIMStatus";
          uint64_t v19 = _CTServerConnectionSIMStatusToSIMStatusString(*(_DWORD *)a3);
          values[0] = (CFNumberRef)v19;
          CFAllocatorRef alloc = v16;
          if (a2 == 60)
          {
            CFAllocatorRef v20 = @"kCTSIMSupportSIMPUKEntryErrorNotification";
            if (a4 < 2) {
              goto LABEL_92;
            }
            LODWORD(valuePtr[0]) = *(void *)(a3 + 8);
            CFAllocatorRef v48 = v16;
            goto LABEL_85;
          }
          if (a2 == 59)
          {
            CFAllocatorRef v20 = @"kCTSIMSupportSIMPINEntryErrorNotification";
LABEL_87:
            if (a4 >= 2)
            {
              LODWORD(valuePtr[0]) = *(void *)(a3 + 8);
              values[1] = CFNumberCreate(v16, kCFNumberSInt32Type, valuePtr);
              if (values[1])
              {
                long long v49 = kCTSIMSupportSIMPINEntryAttemptsRemainingCount;
LABEL_90:
                keys[1] = *v49;
                goto LABEL_91;
              }
            }
            goto LABEL_92;
          }
          CFAllocatorRef v20 = @"kCTSIMSupportSIMStatusChangeNotification";
          if (v19 == @"kCTSIMSupportSIMStatusPINLocked") {
            goto LABEL_87;
          }
          CFIndex v28 = 1;
          if (a4 >= 2 && v19 == @"kCTSIMSupportSIMStatusPUKLocked")
          {
            LODWORD(valuePtr[0]) = *(void *)(a3 + 8);
            CFAllocatorRef v48 = alloc;
LABEL_85:
            values[1] = CFNumberCreate(v48, kCFNumberSInt32Type, valuePtr);
            if (!values[1]) {
              goto LABEL_92;
            }
            long long v49 = kCTSIMSupportSIMPUKEntryAttemptsRemainingCount;
            goto LABEL_90;
          }
          break;
        case '?':
          CFAllocatorRef v20 = @"kCTSIMSupportSIMNewInsertionNotification";
          CFAllocatorRef alloc = v15;
          values[0] = (CFNumberRef)CFStringCreateWithCString(v15, a7, 0x8000100u);
          if (values[0])
          {
            keys[0] = @"kCTSIMSupportMobileSubscriberIdentity";
            CFIndex v28 = 1;
          }
          else
          {
            CFIndex v28 = 0;
          }
          CFStringRef v50 = CFStringCreateWithCString(alloc, a8, 0x8000100u);
          *(void *)((unint64_t)values | (8 * v28)) = v50;
          if (!v50) {
            goto LABEL_107;
          }
          long long v51 = (void *)((unint64_t)keys | (8 * v28++));
          *long long v51 = @"kCTSIMSupportIntegratedCircuitCardIdentity";
          break;
        default:
          return;
      }
LABEL_108:
      CFDictionaryRef v17 = CFDictionaryCreate(alloc, (const void **)keys, (const void **)values, v28, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v17 && v20)
      {
        CFRelease(v20);
        CFAllocatorRef v20 = 0;
      }
      if (v28 >= 1)
      {
        v57 = (void **)values;
        do
        {
          long long v58 = *v57++;
          CFRelease(v58);
          --v28;
        }
        while (v28);
      }
      if (!v20) {
        goto LABEL_116;
      }
      goto LABEL_115;
    }
    if (a2 > 116)
    {
      if (a2 != 117)
      {
        if (a2 != 123 || !a4) {
          return;
        }
        CFAllocatorRef alloc = v15;
        CFAllocatorRef v20 = @"kCTQualityOfServiceFlowStatusChangeNotification";
        keys[0] = @"kCTQualityOfServiceFlowIdentifier";
        LODWORD(valuePtr[0]) = *(void *)a3;
        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, valuePtr);
        keys[1] = @"kCTQualityOfServiceFlowStatus";
        values[1] = (CFNumberRef)_CTServerConnectionQosFlowStatusToQosFlowStatusString(*(unsigned __int8 *)(a3 + 8));
LABEL_91:
        CFIndex v28 = 2;
        goto LABEL_108;
      }
      CFDictionaryRef v17 = 0;
      unint64_t v18 = kCTSPCUnlockSuccessfulNotification;
LABEL_55:
      CFAllocatorRef v20 = *v18;
      if (!*v18) {
        goto LABEL_116;
      }
LABEL_115:
      CTServerState::sendNotification_sync(a1[3], a2, v20, v17);
      CFRelease(v20);
      goto LABEL_116;
    }
    if (a2 != 97)
    {
      if (a2 != 99 || !a4) {
        return;
      }
      uint64_t v21 = *(void *)(a3 + 8);
      if (v21 == 2)
      {
        CFAllocatorRef alloc = v15;
        CFAllocatorRef v20 = @"kCTIndicatorRadioTransmitNotification";
        signed int v22 = kCTRadioTransmitUTBFStatus;
      }
      else
      {
        if (v21 != 3) {
          return;
        }
        CFAllocatorRef alloc = v15;
        CFAllocatorRef v20 = @"kCTIndicatorRadioTransmitNotification";
        signed int v22 = kCTRadioTransmitDCHStatus;
      }
LABEL_76:
      keys[0] = *v22;
      long long v47 = (void **)MEMORY[0x1E4F1CFD0];
      if (!*(void *)a3) {
        long long v47 = (void **)MEMORY[0x1E4F1CFC8];
      }
      values[0] = (CFNumberRef)*v47;
LABEL_92:
      CFIndex v28 = 1;
      goto LABEL_108;
    }
LABEL_21:
    if (a4 < 3) {
      return;
    }
    LODWORD(valuePtr[0]) = *(void *)a3;
    values[0] = CFNumberCreate(v15, kCFNumberIntType, valuePtr);
    if (!values[0]) {
      return;
    }
    CFAllocatorRef alloc = v16;
    keys[0] = @"kCTRegistrationDataContextID";
    keys[1] = @"kCTRegistrationDataActive";
    uint64_t v23 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v24 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (*(void *)(a3 + 8)) {
      uint64_t v25 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v25 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    values[1] = (CFNumberRef)CFRetain(v25);
    *(void *)&long long v84 = @"kCTRegistrationDataAttached";
    if (*(void *)(a3 + 16)) {
      uint64_t v26 = v24;
    }
    else {
      uint64_t v26 = v23;
    }
    *(void *)&long long v76 = CFRetain(v26);
    uint64_t v27 = kCTRegistrationDataActivateFailedNotification;
    if (a2 != 52) {
      uint64_t v27 = kCTRegistrationCellularDataPlanActivateFailedNotification;
    }
    CFAllocatorRef v20 = *v27;
    if (a4 < 4)
    {
      CFIndex v28 = 3;
      goto LABEL_108;
    }
    switch(*(void *)(a3 + 24))
    {
      case 0xFFFFFFFFFFFFFFFCLL:
        *((void *)&v76 + 1) = @"kCTRegistrationDataActivationPreventionReasonIntlRoamingOff";
        *(void *)&long long v77 = v24;
        *((void *)&v84 + 1) = @"kCTRegistrationDataActivationPreventionReason";
        *(void *)&long long v85 = @"kCTRegistrationDataActivationWasForMMS";
        CFIndex v28 = 5;
        break;
      case 0xFFFFFFFFFFFFFFFDLL:
        long long v60 = kCTRegistrationDataActivationPreventionNotSupported;
        goto LABEL_131;
      case 0xFFFFFFFFFFFFFFFELL:
        long long v60 = kCTRegistrationDataActivationPreventionReasonIntlRoamingOff;
        goto LABEL_131;
      case 0xFFFFFFFFFFFFFFFFLL:
        long long v60 = kCTRegistrationDataActivationPreventionReasonOff;
LABEL_131:
        *((void *)&v76 + 1) = *v60;
        *((void *)&v84 + 1) = @"kCTRegistrationDataActivationPreventionReason";
        CFIndex v28 = 4;
        break;
      default:
        LODWORD(valuePtr[0]) = *(void *)(a3 + 24);
        CFIndex v28 = 3;
        *((void *)&v76 + 1) = CFNumberCreate(alloc, kCFNumberSInt32Type, valuePtr);
        if (*((void *)&v76 + 1))
        {
          *((void *)&v84 + 1) = @"kCTRegistrationDataActivateFailure";
          CFIndex v28 = 4;
        }
        long long v59 = _CTErrorString(valuePtr[0]);
        values[v28] = (CFNumberRef)v59;
        if (v59 && !CFEqual(v59, @"kCTReturnUnknownError")) {
          keys[v28++] = @"kCTRegistrationDataActivateFailureString";
        }
        break;
    }
    if (a4 < 5)
    {
      if (a2 != 97) {
        goto LABEL_108;
      }
    }
    else
    {
      CFIndex v61 = 0;
      uint64_t v62 = 0;
      unint64_t v63 = *(void *)(a3 + 32) & 0x7FFFFFFFFFFFD67FLL;
      memset(valuePtr, 0, sizeof(valuePtr));
      do
      {
        if ((v63 >> v62)) {
          *((void *)valuePtr + v61++) = kCTDataConnectionServiceTypeFromIndex(v62);
        }
        ++v62;
      }
      while (v62 != 36);
      if (v61)
      {
        values[v28] = CFArrayCreate(alloc, (const void **)valuePtr, v61, MEMORY[0x1E4F1D510]);
        keys[v28++] = @"kCTRegistrationDataConnectionServices";
      }
      long long v64 = (void **)MEMORY[0x1E4F1CFC8];
      uint64_t v65 = (void **)MEMORY[0x1E4F1CFD0];
      if (a2 == 52 && a4 == 6)
      {
        uint64_t v66 = 0;
        unsigned int v67 = 0;
        *(void *)&valuePtr[0] = @"kCTDataFamilyTypeIPv4";
        *((void *)&valuePtr[0] + 1) = @"kCTDataFamilyTypeIPv6";
        v73[0] = 0;
        v73[1] = 0;
        int v68 = *(_DWORD *)(a3 + 40);
        int v69 = 1;
        do
        {
          if ((v69 & v68) != 0) {
            v73[v67++] = (void *)*((void *)valuePtr + v66);
          }
          int v69 = 1 << ++v66;
        }
        while (v66 != 2);
        if (v67)
        {
          values[v28] = CFArrayCreate(alloc, (const void **)v73, v67, MEMORY[0x1E4F1D510]);
          keys[v28++] = @"kCTRegistrationDataFamilyInactive";
        }
      }
      if (a2 != 97) {
        goto LABEL_107;
      }
      if (a4 >= 6)
      {
        if (*(void *)(a3 + 40)) {
          v70 = v64;
        }
        else {
          v70 = v65;
        }
        values[v28] = (CFNumberRef)*v70;
        keys[v28++] = @"kCTRegistrationCellularDataPlanNewAccount";
      }
    }
    values[v28] = (CFNumberRef)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a9, 0x8000100u);
    keys[v28++] = @"kCTRegistrationCellularDataPlanAccountURL";
LABEL_107:
    if (v28) {
      goto LABEL_108;
    }
LABEL_119:
    CFDictionaryRef v17 = 0;
    if (!v20)
    {
LABEL_116:
      if (v17) {
        CFRelease(v17);
      }
      return;
    }
    goto LABEL_115;
  }
  switch(a2)
  {
    case 11:
      CFDictionaryRef v17 = 0;
      unint64_t v18 = kCTUSSDSessionBeginNotification;
      goto LABEL_55;
    case 12:
      CFAllocatorRef alloc = v15;
      if (a4)
      {
        keys[0] = @"kCTUSSDSessionStringIsOutgoing";
        int v30 = (const void *)*MEMORY[0x1E4F1CFC8];
        int v31 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (*(void *)a3) {
          int v32 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          int v32 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        values[0] = (CFNumberRef)CFRetain(v32);
        keys[1] = @"kCTUSSDSessionResponseRequested";
        if (*(void *)(a3 + 8)) {
          double v33 = v31;
        }
        else {
          double v33 = v30;
        }
        values[1] = (CFNumberRef)CFRetain(v33);
        CFStringRef v34 = CFStringCreateWithCString(alloc, a9, 0x8000100u);
        double v35 = &stru_1ECFD6720;
        if (v34) {
          double v35 = (__CFString *)v34;
        }
        *(void *)&long long v76 = v35;
        *(void *)&long long v84 = @"kCTUSSDSessionString";
        CFIndex v28 = 3;
      }
      else
      {
        CFIndex v28 = 0;
      }
      long long v52 = kCTUSSDSessionStringNotification;
      goto LABEL_106;
    case 13:
      CFDictionaryRef v17 = 0;
      unint64_t v18 = kCTUSSDSessionEndNotification;
      goto LABEL_55;
    case 14:
      CFAllocatorRef v20 = @"kCTUSSDSessionErrorNotification";
      if (!a4) {
        goto LABEL_119;
      }
      keys[0] = @"kCTUSSDSessionErrorCode";
      LODWORD(valuePtr[0]) = *(void *)a3;
      CFAllocatorRef alloc = v15;
      values[0] = CFNumberCreate(v15, kCFNumberSInt32Type, valuePtr);
      BOOL v36 = values[0] == 0;
      BOOL v37 = values[0] != 0;
      *(void *)((unint64_t)keys | (8 * v37)) = @"kCTUSSDSessionErrorString";
      if (v36) {
        CFIndex v28 = 1;
      }
      else {
        CFIndex v28 = 2;
      }
      *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * v37)) = _CTErrorString(valuePtr[0]);
      goto LABEL_108;
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
      return;
    case 26:
      CFAllocatorRef alloc = v15;
      values[0] = (CFNumberRef)CFStringCreateWithCString(v15, a9, 0x8000100u);
      if (values[0])
      {
        keys[0] = @"kCTSMSClass0String";
        CFIndex v28 = 1;
      }
      else
      {
        CFIndex v28 = 0;
      }
      CFStringRef v53 = CFStringCreateWithCString(alloc, a7, 0x8000100u);
      *(void *)((unint64_t)values | (8 * v28)) = v53;
      if (v53)
      {
        long long v54 = (void *)((unint64_t)keys | (8 * v28++));
        *long long v54 = @"kCTSMSClass0AddressString";
      }
      long long v52 = kCTSMSClass0StringReceivedNotification;
      goto LABEL_106;
    case 30:
      CFAllocatorRef alloc = v15;
      values[0] = (CFNumberRef)CFStringCreateWithCString(v15, a9, 0x8000100u);
      if (values[0])
      {
        keys[0] = @"kCTSMSTestMessageBody";
        CFIndex v28 = 1;
      }
      else
      {
        CFIndex v28 = 0;
      }
      CFStringRef v55 = CFStringCreateWithCString(alloc, a7, 0x8000100u);
      *(void *)((unint64_t)values | (8 * v28)) = v55;
      if (v55)
      {
        long long v56 = (void *)((unint64_t)keys | (8 * v28++));
        *long long v56 = @"kCTSMSTestMessageAddress";
      }
      long long v52 = kCTSMSTestMessageReceivedNotification;
LABEL_106:
      CFAllocatorRef v20 = *v52;
      goto LABEL_107;
    case 31:
      int v38 = *(_DWORD *)a3;
      int v39 = *(_DWORD *)(a3 + 8);
      unint64_t v40 = @"kCTMessageReceivedNotification";
      CFArrayRef v41 = a1;
      int v42 = 31;
      goto LABEL_69;
    case 32:
      int v38 = *(_DWORD *)a3;
      int v39 = *(_DWORD *)(a3 + 8);
      unint64_t v40 = @"kCTMessageReceiveDeferredNotification";
      CFArrayRef v41 = a1;
      int v42 = 32;
      goto LABEL_69;
    case 33:
      int v38 = *(_DWORD *)a3;
      int v39 = *(_DWORD *)(a3 + 8);
      unint64_t v40 = @"kCTMessageSentNotification";
      CFArrayRef v41 = a1;
      int v42 = 33;
LABEL_69:
      int v43 = 0;
      int v44 = 0;
      goto LABEL_71;
    case 34:
      int v38 = *(_DWORD *)a3;
      int v39 = *(_DWORD *)(a3 + 8);
      int v43 = *(_DWORD *)(a3 + 16);
      int v44 = *(_DWORD *)(a3 + 24);
      unint64_t v40 = @"kCTMessageSendErrorNotification";
      CFArrayRef v41 = a1;
      int v42 = 34;
LABEL_71:
      _CTSendMessageNotification(v41, v42, v40, v38, v39, v43, v44);
      break;
    case 35:
      keys[0] = @"kCTMessageIdKey";
      keys[1] = @"kCTMessageSendBytesKey";
      *(void *)&long long v84 = @"kCTMessageSendTotalBytesKey";
      uint64_t v45 = *(void *)(a3 + 8);
      LODWORD(valuePtr[0]) = *(void *)a3;
      CFAllocatorRef v20 = @"kCTMessageSendProgressNotification";
      int v72 = *(void *)(a3 + 16);
      LODWORD(v73[0]) = v45;
      CFAllocatorRef v46 = v15;
      CFIndex v28 = 3;
      values[0] = CFNumberCreate(v15, kCFNumberSInt32Type, valuePtr);
      values[1] = CFNumberCreate(v46, kCFNumberSInt32Type, v73);
      CFAllocatorRef alloc = v46;
      *(void *)&long long v76 = CFNumberCreate(v46, kCFNumberSInt32Type, &v72);
      goto LABEL_108;
    case 36:
      CFAllocatorRef alloc = v15;
      CFAllocatorRef v20 = @"kCTMMSConfigurationChangeNotification";
      signed int v22 = kCTMMSConfiguredKey;
      goto LABEL_76;
    default:
      if (a2 == 44) {
        goto LABEL_35;
      }
      break;
  }
}

void _CTSendMessageNotification(void **a1, int a2, const void *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v23 = a5;
  int valuePtr = a4;
  int v21 = a7;
  int v22 = a6;
  CFAllocatorRef v12 = CFGetAllocator(a1);
  int v30 = 0;
  uint64_t v31 = 0;
  CFNumberRef v27 = 0;
  uint64_t v28 = 0;
  CFNumberRef v13 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
  values = v13;
  if (!v13) {
    return;
  }
  CFNumberRef v14 = v13;
  keys[0] = @"kCTMessageIdKey";
  if (!CFNumberCreate(v12, kCFNumberSInt32Type, &v23))
  {
    CFRelease(v14);
    return;
  }
  keys[1] = @"kCTMessageTypeKey";
  if (a6)
  {
    CFNumberRef v27 = CFNumberCreate(v12, kCFNumberSInt32Type, &v22);
    if (v27)
    {
      int v30 = @"kCTMessageSendErrorKey";
      CFIndex v15 = 3;
      if (!a7) {
        goto LABEL_10;
      }
LABEL_8:
      CFNumberRef v16 = CFNumberCreate(v12, kCFNumberSInt32Type, &v21);
      *(&values + v15) = v16;
      if (v16) {
        keys[v15++] = @"kCTMessageSendModemErrorKey";
      }
      goto LABEL_10;
    }
  }
  CFIndex v15 = 2;
  if (a7) {
    goto LABEL_8;
  }
LABEL_10:
  CFDictionaryRef v17 = CFDictionaryCreate(v12, (const void **)keys, (const void **)&values, v15, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v17)
  {
    CFDictionaryRef v18 = v17;
    CTServerState::sendNotification_sync(a1[3], a2, a3, v17);
    CFRelease(v18);
  }
  p_values = &values;
  do
  {
    CFAllocatorRef v20 = *p_values++;
    CFRelease(v20);
    --v15;
  }
  while (v15);
}

unint64_t _CTServerConnectionPerformMigration(void *a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  memset(v36, 0, sizeof(v36));
  CFAllocatorRef v10 = _CTServerConnectionCreate(*MEMORY[0x1E4F1CF80], (uint64_t)_ServerConnectionCallback, v36);
  if (v10)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInternalToolPerformMigration", &object, "kRequest", &v34);
    xpc_release(object);
    xpc_object_t v11 = v34;
    xpc_object_t v35 = v34;
    xpc_object_t v34 = xpc_null_create();
    xpc_release(v34);
    xpc_object_t v12 = xpc_BOOL_create(a2);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, "kIsEraseInstall", v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    xpc_object_t v14 = xpc_BOOL_create(a3);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, "kIsUpgrade", v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    xpc_object_t v16 = xpc_BOOL_create(a4);
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, "kIsRestore", v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    xpc_object_t v18 = xpc_BOOL_create(a5);
    if (!v18) {
      xpc_object_t v18 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, "kIsDifferentDevice", v18);
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
    if (a1)
    {
      CFRetain(a1);
      int v21 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else
    {
      int v21 = 0;
    }
    if (v21)
    {
      ctu::cf_to_xpc((uint64_t *)&value, (ctu *)a1, v20);
      xpc_dictionary_set_value(v11, "kLastSystemVersionString", value);
      xpc_object_t v25 = value;
      xpc_object_t value = xpc_null_create();
      xpc_release(v25);
      xpc_release(value);
      xpc_object_t value = 0;
      int v26 = [a1 intValue];
      if (v26 >= 1)
      {
        xpc_object_t v27 = xpc_int64_create(v26);
        if (!v27) {
          xpc_object_t v27 = xpc_null_create();
        }
        xpc_dictionary_set_value(v11, "kLastSystemVersion", v27);
        xpc_object_t v28 = xpc_null_create();
        xpc_release(v27);
        xpc_release(v28);
      }
    }
    xpc_object_t v34 = xpc_null_create();
    unint64_t v24 = SendXpcMessage((uint64_t)v10, &v35, &v34);
    uint64_t v23 = HIDWORD(v24);
    if (MEMORY[0x1853203E0](v34) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v34;
      int v39 = "kMigrationResult";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v32);
      int v29 = xpc::dyn_cast_or_default((xpc *)&v32, 0);
      xpc_release(v32);
      if (v29)
      {
        uint64_t v23 = HIDWORD(v24);
      }
      else
      {
        LODWORD(v24) = 1;
        uint64_t v23 = 60;
      }
    }
    CFRelease(v10);
    int v30 = CTLogMigration();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(object) = 67109376;
      HIDWORD(object) = v23;
      LOWORD(v39) = 1024;
      *(_DWORD *)((char *)&v39 + 2) = v24;
      _os_log_impl(&dword_18444A000, v30, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionPerformMigration done: error (%d) with domain (%d)", (uint8_t *)&object, 0xEu);
    }
    xpc_release(v34);
    if (a1) {
      CFRelease(a1);
    }
    xpc_release(v35);
  }
  else
  {
    int v22 = CTLogMigration();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      _CTServerConnectionPerformMigration_cold_1(v22);
    }
    uint64_t v23 = 22;
    LODWORD(v24) = 1;
  }
  return v24 | (unint64_t)(v23 << 32);
}

void sub_184480DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12)
{
  xpc_release(object);
  xpc_release(a11);
  if (v12) {
    CFRelease(v12);
  }
  xpc_release(a12);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(void *)a1;
}

unint64_t _CTServerConnectionRegisterSupportedEnhancedLinkQualityMetric(uint64_t a1)
{
  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMRegister", object, "kRequest", &v11);
    xpc_release(object[0]);
    xpc_object_t v2 = v11;
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    BOOL v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v3) {
      BOOL v3 = xpc_null_create();
    }
    xpc_dictionary_set_value(v2, "kRadioEnhancedLQMRegisterSupportedMetrics", v3);
    xpc_object_t v4 = xpc_null_create();
    xpc_release(v3);
    xpc_release(v4);
    xpc_object_t v11 = xpc_null_create();
    uint64_t v5 = SendXpcMessage(a1, &v12, &v11);
    unint64_t v6 = 0x400000000;
    if (MEMORY[0x1853203E0](v11) == MEMORY[0x1E4F14590])
    {
      object[0] = &v11;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v10);
      int v7 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      if (v7) {
        unint64_t v6 = v5 & 0xFFFFFFFF00000000;
      }
      else {
        LODWORD(v5) = 2;
      }
    }
    else
    {
      LODWORD(v5) = 2;
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  else
  {
    unint64_t v6 = 0x1600000000;
    LODWORD(v5) = 1;
  }
  return v6 & 0xFFFFFFFF00000000 | v5;
}

unint64_t _CTServerConnectionQueryEnhancedLinkQualityMetric(const void *a1, unsigned int a2, CFDataRef *a3)
{
  unint64_t v3 = 0x1600000000;
  LODWORD(v4) = 1;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMQuery", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v8 = xdict;
    xpc_object_t v18 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v9 = xpc_int64_create(a2);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kRadioEnhancedLQMQueryPayload", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessage((uint64_t)a1, &v18, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && (object[0] = &xdict,
          object[1] = "kDidSucceed",
          xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v16),
          int v11 = xpc::dyn_cast_or_default((xpc *)&v16, 0),
          xpc_release(v16),
          v11))
    {
      unint64_t v3 = v4 & 0xFFFFFFFF00000000;
      object[0] = 0;
      data = (const UInt8 *)xpc_dictionary_get_data(xdict, "kRadioEnhancedLQMResult", (size_t *)object);
      CFAllocatorRef v13 = CFGetAllocator(a1);
      *a3 = CFDataCreate(v13, data, (CFIndex)object[0]);
    }
    else
    {
      unint64_t v3 = 0x500000000;
      LODWORD(v4) = 2;
    }
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

unint64_t _CTServerConnectionGetSupportedEnhancedLinkQualityMetric(uint64_t a1, xpc_object_t *a2)
{
  unint64_t v2 = 0x1600000000;
  unsigned int v3 = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMGetSupportedMetrics", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v6 = SendXpcMessage(a1, &v12, &xdict);
    unint64_t v2 = 0x400000000;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v10);
      int v7 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kRadioEnhancedLQMSupportedMetrics");
      xpc_object_t v10 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v10);
      *a2 = object[0];
      if (v7)
      {
        unint64_t v2 = v6 & 0xFFFFFFFF00000000;
        unsigned int v3 = v6;
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 2;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

const char *CTDataRateAsString(unint64_t a1)
{
  if (a1 > 8) {
    return "???";
  }
  else {
    return off_1E5261508[a1];
  }
}

void MMSMessageClassHeader::createPrototype(MMSMessageClassHeader *this)
{
}

void MMSMessageClassHeader::createInstance(MMSMessageClassHeader *this)
{
}

void MMSMessageClassHeader::copy(MMSMessageClassHeader *this)
{
}

uint64_t MMSMessageClassHeader::parseValue(MMSMessageClassHeader *this, std::string::value_type *a2)
{
  if ((MMSEnumerationHeader::parseNamedValue(this, a2) & 1) == 0) {
    std::string::__assign_external((std::string *)((char *)this + 32), a2);
  }
  return 1;
}

uint64_t MMSMessageClassHeader::valueAsString(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 17) < 0)
  {
    return MMSEnumerationHeader::valueAsString(a1, this);
  }
  else
  {
    std::string::operator=(this, (const std::string *)(a1 + 32));
    return 1;
  }
}

uint64_t MMSMessageClassHeader::decodeValue(MMSMessageClassHeader *this, MMSPduDecoder *a2)
{
  unsigned __int8 v6 = 0;
  BOOL v4 = MMSPduDecoder::peekByte(a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((char)v6 < 0) {
      return MMSEnumerationHeader::decodeValue(this, a2);
    }
    else {
      return MMSPduDecoder::decodeHttpToken((uint64_t)a2, (std::string *)((char *)this + 32));
    }
  }
  return result;
}

uint64_t MMSMessageClassHeader::encodeValue(MMSMessageClassHeader *this, MMSPduEncoder *a2)
{
  int v2 = *((char *)this + 17);
  if (v2 < 0)
  {
    MMSPduEncoder::encodeByte(a2, v2);
  }
  else
  {
    unsigned int v3 = (char *)this + 32;
    if (*((char *)this + 55) < 0) {
      unsigned int v3 = *(const char **)v3;
    }
    MMSPduEncoder::encodeHttpToken(a2, v3);
  }
  return 1;
}

const char *MMSMessageClassHeader::headerTypeName(MMSMessageClassHeader *this)
{
  return "message-class";
}

void MMSMessageClassHeader::~MMSMessageClassHeader(void **this)
{
  *this = &unk_1ECFD3910;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  MMSEnumerationHeader::~MMSEnumerationHeader((MMSEnumerationHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3910;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  MMSEnumerationHeader::~MMSEnumerationHeader((MMSEnumerationHeader *)this);

  JUMPOUT(0x18531F680);
}

const char *CTBootstrapStatusAsString(unsigned int a1)
{
  if (a1 > 2) {
    return "??";
  }
  else {
    return off_1E52617D8[a1];
  }
}

uint64_t CTLogNetworkInfo()
{
  if (CTLogNetworkInfo_once != -1) {
    dispatch_once(&CTLogNetworkInfo_once, &__block_literal_global_4);
  }
  return CTLogNetworkInfo_logger;
}

os_log_t __CTLogNetworkInfo_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "NetworkInfo");
  CTLogNetworkInfo_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogSubscriber()
{
  if (CTLogSubscriber_once != -1) {
    dispatch_once(&CTLogSubscriber_once, &__block_literal_global_8);
  }
  return CTLogSubscriber_logger;
}

os_log_t __CTLogSubscriber_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "Subscriber");
  CTLogSubscriber_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogPostponement()
{
  if (CTLogPostponement_once != -1) {
    dispatch_once(&CTLogPostponement_once, &__block_literal_global_12);
  }
  return CTLogPostponement_logger;
}

os_log_t __CTLogPostponement_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "Postponement");
  CTLogPostponement_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogClientXPC()
{
  if (CTLogClientXPC_once != -1) {
    dispatch_once(&CTLogClientXPC_once, &__block_literal_global_20);
  }
  return CTLogClientXPC_logger;
}

os_log_t __CTLogClientXPC_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "ClientXPC");
  CTLogClientXPC_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogRadioModule()
{
  if (CTLogRadioModule_once != -1) {
    dispatch_once(&CTLogRadioModule_once, &__block_literal_global_32);
  }
  return CTLogRadioModule_logger;
}

os_log_t __CTLogRadioModule_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "RadioModule");
  CTLogRadioModule_logger = (uint64_t)result;
  return result;
}

os_log_t __CTLogRegistration_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "Registration");
  CTLogRegistration_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogMigration()
{
  if (CTLogMigration_once != -1) {
    dispatch_once(&CTLogMigration_once, &__block_literal_global_44);
  }
  return CTLogMigration_logger;
}

os_log_t __CTLogMigration_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "Migration");
  CTLogMigration_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogStewieMonitor()
{
  if (CTLogStewieMonitor_once != -1) {
    dispatch_once(&CTLogStewieMonitor_once, &__block_literal_global_48);
  }
  return CTLogStewieMonitor_logger;
}

os_log_t __CTLogStewieMonitor_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "StewieMonitor");
  CTLogStewieMonitor_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogStewieDataClient()
{
  if (CTLogStewieDataClient_once != -1) {
    dispatch_once(&CTLogStewieDataClient_once, &__block_literal_global_52);
  }
  return CTLogStewieDataClient_logger;
}

os_log_t __CTLogStewieDataClient_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "StewieDataClient");
  CTLogStewieDataClient_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogConnectionPair()
{
  if (CTLogConnectionPair_once != -1) {
    dispatch_once(&CTLogConnectionPair_once, &__block_literal_global_56);
  }
  return CTLogConnectionPair_logger;
}

os_log_t __CTLogConnectionPair_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "ConnectionPair");
  CTLogConnectionPair_logger = (uint64_t)result;
  return result;
}

uint64_t CTLogCoreAnalytics()
{
  if (CTLogCoreAnalytics_once != -1) {
    dispatch_once(&CTLogCoreAnalytics_once, &__block_literal_global_60);
  }
  return CTLogCoreAnalytics_logger;
}

os_log_t __CTLogCoreAnalytics_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "CoreAnalytics");
  CTLogCoreAnalytics_logger = (uint64_t)result;
  return result;
}

void sub_1844848E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184484C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184484F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18448516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184485384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184485664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184485A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184485CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184485E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184486108(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184486230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184486448(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18448656C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184486750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184486968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184486BCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184486CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184486EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184487134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844875E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18448770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844878F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184487B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184487D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184487FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184488224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184488470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844886BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184488908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184488B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184488DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184488FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184489488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844896D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184489920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184489B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184489D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184489FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448A210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448A45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448A920(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18448AA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18448AC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448AE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448B088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  xpc_object_t v28 = v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448B338(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18448B4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18448B6D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18448B7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18448B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448BC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448BE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448C094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448C288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18448D6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

void sub_18448DAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12)
{
}

void sub_18448E560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a14);
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void sub_18448E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(*(xpc_object_t *)(v13 - 24));
  _Unwind_Resume(a1);
}

void sub_18448EB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, CFTypeRef cf, xpc_object_t object)
{
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(*(xpc_object_t *)(v13 - 24));
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void acknowledgeMessageWithId(unsigned int a1, int a2)
{
  if (_messageCenterServerConnection)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsAcknowledgeMessage", object, "kRequest", &v13);
    xpc_release(object[0]);
    xpc_object_t v4 = v13;
    xpc_object_t v14 = v13;
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v13);
    xpc_object_t v5 = xpc_int64_create(a1);
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kSmsMessageID", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v7 = xpc_BOOL_create(a2 != 0);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kSmsMessageIsMobileOriginated", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v13 = xpc_null_create();
    if ((unint64_t)SendXpcMessage(_messageCenterServerConnection, &v14, &v13) >> 32)
    {
      xpc_object_t v10 = CTLogMessageCenter();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        acknowledgeMessageWithId();
      }
    }
    else if (MEMORY[0x1853203E0](v13) == MEMORY[0x1E4F14590])
    {
      object[0] = &v13;
      object[1] = "kSmsMessageWasAcknowledged";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  else
  {
    xpc_object_t v9 = CTLogMessageCenter();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      acknowledgeMessageWithId();
    }
  }
}

void sub_18448ED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13, xpc_object_t a14)
{
}

void sub_18448F060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13, xpc_object_t a14)
{
}

void sub_18448F890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
}

void sub_18448F9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(*(xpc_object_t *)(v13 - 24));
  _Unwind_Resume(a1);
}

void sub_18448FF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_1844901E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object, xpc_object_t a14)
{
}

void sub_1844903F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v13 - 24));
  _Unwind_Resume(a1);
}

void *ctu::cf::CFSharedRef<__CFData const>::CFSharedRef<void const,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2 && (CFTypeID v4 = CFGetTypeID(*a2), v4 == CFDataGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1844909D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184490A64(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184490B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184490B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184490C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184490CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184490DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184490F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184490FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844910C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844911E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844912D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844915BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844916E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844917AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844918EC(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844919C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491B4C(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184491BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184491F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844920C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184492284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844924F8(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184492598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844925E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844926AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449287C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492908(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844929A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844929F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184492F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184493000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844930E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844933A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449346C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844934D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449359C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844936DC(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844937B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844938B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493940(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844939E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493D94(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184493E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184493FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844940F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844941F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844942BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844943A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844944A4(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18449456C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844946E4(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184494784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844947D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844948D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844949B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184494E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184494EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449500C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495098(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184495138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449528C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449536C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844954EC(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18449558C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844955D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844956E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844957CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844958EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844959C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184495C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495F08(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184495FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184495FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844960FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844961DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844962D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844963A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184496458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844964A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449656C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184496620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844967C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184496C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, int a12, char a13, void *a14, void *a15, int a16, char a17, void *a18, void *a19, void *a20,void *a21,int a22,char a23,void *a24,void *a25,void *a26,void *a27)
{
  if (a13)
  {
  }
  if (!a18) {

  }
  if (a17)
  {
  }
  if (!a24) {

  }
  if (a23)
  {
  }
  if (!v33) {

  }
  if (*(_DWORD *)(v34 - 124))
  {
  }
  if (!v31) {

  }
  if (*(_DWORD *)(v34 - 100))
  {
  }
  if (!v28) {

  }
  _Unwind_Resume(a1);
}

void sub_184496E14()
{
  if (v0) {
    JUMPOUT(0x184496E04);
  }
  JUMPOUT(0x184496DFCLL);
}

void sub_184496E20()
{
}

void sub_184496E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184496F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184496FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844971B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184497390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184497560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844976E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v12)
  {
  }
  if (!v11) {

  }
  _Unwind_Resume(a1);
}

void sub_184497774()
{
}

void sub_1844977F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184497848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844978C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844979AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184497AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184497D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184498574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  if (*(_DWORD *)(v39 - 148))
  {
  }
  if (!a14) {

  }
  if (v37)
  {
  }
  if (!a19) {

  }
  if (v35)
  {
  }
  if (!a21) {

  }
  if (*(_DWORD *)(v39 - 136))
  {
  }
  if (!a26) {

  }
  if (*(_DWORD *)(v39 - 128))
  {
  }
  if (!*(void *)(v39 - 184)) {

  }
  if (*(_DWORD *)(v39 - 120))
  {
  }
  if (!*(void *)(v39 - 176)) {

  }
  if (*(_DWORD *)(v39 - 108))
  {
  }
  if (!*(void *)(v39 - 160)) {

  }
  _Unwind_Resume(a1);
}

void sub_1844989C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184498A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184498B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184498DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449958C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184499718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844997F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844999B4(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184499A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184499F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15)
{
  if (a14)
  {
  }
  if (!v18) {

  }
  _Unwind_Resume(a1);
}

void sub_18449A0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18449A340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449A9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18449AB60(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18449AC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449AE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449AF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449AFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449B03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449B0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18449B1CC(_Unwind_Exception *a1)
{
  CFTypeID v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18449B298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18449B724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18449BAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449BCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18449BDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18449BEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18449C1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *_CTErrorString(unsigned int a1)
{
  uint64_t v1 = &kCTErrorStrings[a1];
  if (a1 >= 0x43) {
    uint64_t v1 = (__CFString **)&kCTReturnUnknownError;
  }
  return *v1;
}

void sub_18449CCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18449CDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18449CFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18449D154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_18449D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18449D4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18449D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449D7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18449D97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_18449DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18449DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449DDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18449DEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449E0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18449E2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_18449E450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18449E568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449E6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18449E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18449EBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_18449ED78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18449EE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18449F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18449F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t MMSContentType::nameForEncodedContentType(_anonymous_namespace_ *a1, std::string *a2)
{
  if ((a1 & 0x80) == 0) {
    return 0;
  }
  char v5 = (char)a1;
  uint64_t v9 = *(void *)(ContentTypes + 8);
  uint64_t v7 = ContentTypes + 8;
  uint64_t v8 = v9;
  if (!v9) {
    return 0;
  }
  unsigned int v10 = v5 & 0x7F;
  uint64_t v11 = v7;
  do
  {
    unsigned int v12 = *(_DWORD *)(v8 + 32);
    BOOL v13 = v12 >= v10;
    if (v12 >= v10) {
      xpc_object_t v14 = (uint64_t *)v8;
    }
    else {
      xpc_object_t v14 = (uint64_t *)(v8 + 8);
    }
    if (v13) {
      uint64_t v11 = v8;
    }
    uint64_t v8 = *v14;
  }
  while (*v14);
  if (v11 == v7 || *(_DWORD *)(v11 + 32) > v10) {
    return 0;
  }
  std::string::__assign_external(a2, *(const std::string::value_type **)(v11 + 40));
  uint64_t v2 = 1;
  std::string::append(a2, "/", 1uLL);
  xpc_object_t v15 = *(const char **)(v11 + 48);
  size_t v16 = strlen(v15);
  std::string::append(a2, v15, v16);
  return v2;
}

uint64_t anonymous namespace'::getContentTypes(_anonymous_namespace_ *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
    operator new();
}

uint64_t MMSContentType::encodedContentTypeForName(MMSContentType *this, const char *a2)
{
  if (!this) {
    return 0;
  }
    operator new();
  if (!*(void *)(MMSContentType::encodedContentTypeForName(char const*)::sNameToEncodingMap + 24))
  {
    CFTypeID v4 = ContentTypes + 1;
    char v5 = (void *)*ContentTypes;
    if ((void *)*ContentTypes != ContentTypes + 1)
    {
      do
      {
        memset(&v18, 0, sizeof(v18));
        std::string::basic_string[abi:nn180100]<0>(&v18, (char *)v5[5]);
        std::string::push_back(&v18, 47);
        size_t v6 = strlen((const char *)v5[6]);
        std::string::append(&v18, (const std::string::value_type *)v5[6], v6);
        uint64_t v7 = MMSContentType::encodedContentTypeForName(char const*)::sNameToEncodingMap;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v18;
        }
        int v17 = *((_DWORD *)v5 + 8);
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int>>(v7, (uint64_t)&__p, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        uint64_t v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            char v5 = v9;
          }
          while (!v10);
        }
        char v5 = v9;
      }
      while (v9 != v4);
    }
  }
  uint64_t v11 = (void *)MMSContentType::encodedContentTypeForName(char const*)::sNameToEncodingMap;
  std::string::basic_string[abi:nn180100]<0>(&__p, (char *)this);
  unsigned int v12 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v11, (uint64_t)&__p);
  BOOL v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13) {
      return (v13[40] | 0x80);
    }
    return 0;
  }
  if (!v12) {
    return 0;
  }
  return (v13[40] | 0x80);
}

void MMSContentType::contentTypeForName(MMSContentType *this, const char *a2)
{
  if (this) {
    uint64_t v2 = (char *)this;
  }
  else {
    uint64_t v2 = "";
  }
  CFTypeRef v3 = strchr(v2, 59);
  memset(&v12, 0, sizeof(v12));
  memset(__s1, 0, sizeof(__s1));
  if (v3)
  {
    CFTypeID v4 = v3;
    std::string::__assign_external(&v12, v2, ((_BYTE)v3 - (_BYTE)v2));
    char v5 = v4 + 1;
    size_t v6 = (std::string *)__s1;
  }
  else
  {
    size_t v6 = &v12;
    char v5 = v2;
  }
  std::string::__assign_external(v6, v5);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v12;
  }
  else {
    uint64_t v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if (MMSContentType::encodedContentTypeForName((MMSContentType *)v8, v7)) {
    operator new();
  }
  uint64_t v9 = strchr(v2, 47);
  if (v9)
  {
    memset(__p, 0, sizeof(__p));
    std::string::basic_string[abi:nn180100](__p, v2, ((_BYTE)v9 - (_BYTE)v2));
    operator new();
  }
  operator new();
}

uint64_t MMSContentType::multipartMixedContentType(MMSContentType *this)
{
  return *(void *)MMSContentType::multipartMixedContentType(void)::multipartMixedContentType;
}

uint64_t MMSContentType::multipartRelatedContentType(MMSContentType *this)
{
  return *(void *)MMSContentType::multipartRelatedContentType(void)::multipartRelatedContentType;
}

uint64_t MMSContentType::toString(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v13, 0, sizeof(v13));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v13);
  CFTypeID v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v5 = strlen(v4);
  size_t v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"/", 1);
  uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  size_t v9 = strlen(v8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v13 + 8, &v11);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v11;
  *(void *)(a2 + 16) = v12;
  MMSParameterContainer::toString((MMSHeaderContainer *)(a1 + 8), (std::string *)a2);
  *(void *)&v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(*(void *)&v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v13[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18531F630](v17);
  return 1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = v4;
  size_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

BOOL MMSContentType::compare(MMSContentType *this, const char *a2, const char *a3)
{
  size_t v6 = (const char *)(*(uint64_t (**)(MMSContentType *))(*(void *)this + 16))(this);
  if (strcasecmp(v6, a2)) {
    return 0;
  }
  uint64_t v8 = (const char *)(*(uint64_t (**)(MMSContentType *))(*(void *)this + 24))(this);
  return strcasecmp(v8, a3) == 0;
}

BOOL MMSContentType::isMultipart(MMSContentType *this)
{
  if (MMSContentType::compare(this, "application", "vnd.wap.multipart.mixed")
    || MMSContentType::compare(this, "application", "vnd.wap.multipart.related"))
  {
    return 1;
  }

  return MMSContentType::compare(this, "application", "vnd.wap.multipart.alternative");
}

BOOL MMSContentType::isMultipartAlternative(MMSContentType *this)
{
  return MMSContentType::compare(this, "application", "vnd.wap.multipart.alternative");
}

void MMSEncodedContentType::MMSEncodedContentType(MMSEncodedContentType *this, unsigned int a2)
{
  *(void *)this = &unk_1ECFD30B0;
  MMSParameterContainer::MMSParameterContainer((MMSEncodedContentType *)((char *)this + 8));
  *(void *)this = &unk_1ECFD3890;
  uint64_t v8 = *(void *)(ContentTypes + 8);
  size_t v6 = (_anonymous_namespace_ *)(ContentTypes + 8);
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  size_t v9 = v6;
  do
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v7;
    }
    else {
      uint64_t v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      size_t v9 = (_anonymous_namespace_ *)v7;
    }
    uint64_t v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *((_DWORD *)v9 + 8) > a2) {
LABEL_12:
  }
    size_t v9 = v6;
    unsigned int v13 = 0;
  else {
    unsigned int v13 = a2;
  }
  *((_DWORD *)this + 20) = v13;
}

uint64_t MMSEncodedContentType::type(MMSEncodedContentType *this)
{
  uint64_t v5 = *(void *)(ContentTypes + 8);
  uint64_t v3 = ContentTypes + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *((_DWORD *)this + 20);
  uint64_t v7 = v3;
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      unsigned int v10 = (uint64_t *)v4;
    }
    else {
      unsigned int v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 != v3 && v6 >= *(_DWORD *)(v7 + 32)) {
    return *(void *)(v7 + 40);
  }
  else {
    return 0;
  }
}

uint64_t MMSEncodedContentType::subtype(MMSEncodedContentType *this)
{
  uint64_t v5 = *(void *)(ContentTypes + 8);
  uint64_t v3 = ContentTypes + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *((_DWORD *)this + 20);
  uint64_t v7 = v3;
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      unsigned int v10 = (uint64_t *)v4;
    }
    else {
      unsigned int v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 != v3 && v6 >= *(_DWORD *)(v7 + 32)) {
    return *(void *)(v7 + 48);
  }
  else {
    return 0;
  }
}

uint64_t MMSEncodedContentType::encode(MMSEncodedContentType *this, MMSPduEncoder *a2)
{
  uint64_t v4 = (MMSEncodedContentType *)((char *)this + 8);
  if (MMSHeaderContainer::headerCount((MMSEncodedContentType *)((char *)this + 8)))
  {
    uint64_t v9 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v8 = 0u;
    MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
    MMSPduEncoder::encodeWspWellKnownMedia((MMSPduEncoder *)__p, *((_DWORD *)this + 20));
    MMSParameterContainer::encode(v4, (MMSPduEncoder *)__p);
    if (v8 >= 0) {
      unsigned int v5 = HIBYTE(v8);
    }
    else {
      unsigned int v5 = v8;
    }
    MMSPduEncoder::encodeWspValueLength(a2, v5);
    MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[1]);
    }
  }
  else
  {
    MMSPduEncoder::encodeWspShortInteger(a2, *((unsigned char *)this + 80));
  }
  return 1;
}

void MMSEncodedContentType::copy(MMSEncodedContentType *this)
{
}

uint64_t MMSGeneralContentType::fromString(MMSGeneralContentType *this, const char *a2)
{
  uint64_t v3 = strchr((char *)this, 47);
  if (v3)
  {
    memset(__p, 0, sizeof(__p));
    std::string::basic_string[abi:nn180100](__p, this, ((_BYTE)v3 - (_BYTE)this));
    operator new();
  }
  return 0;
}

void MMSGeneralContentType::MMSGeneralContentType(MMSGeneralContentType *this, char *a2, char *a3)
{
  *(void *)this = &unk_1ECFD30B0;
  MMSParameterContainer::MMSParameterContainer((MMSGeneralContentType *)((char *)this + 8));
  *(void *)this = &unk_1ECFD38D0;
  unsigned int v6 = (char *)this + 80;
  if (a2) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = "";
  }
  std::string::basic_string[abi:nn180100]<0>((void *)this + 10, v7);
  long long v8 = (char *)this + 104;
  if (a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = "";
  }
  std::string::basic_string[abi:nn180100]<0>((void *)this + 13, v9);
  if (*((char *)this + 103) < 0)
  {
    unsigned int v6 = (unsigned char *)*((void *)this + 10);
    uint64_t v10 = *((void *)this + 11);
  }
  else
  {
    uint64_t v10 = *((unsigned __int8 *)this + 103);
  }
  BOOL v11 = &v6[v10];
  while (v6 != v11)
  {
    *unsigned int v6 = __tolower((char)*v6);
    ++v6;
  }
  if (*((char *)this + 127) < 0)
  {
    long long v8 = (unsigned char *)*((void *)this + 13);
    uint64_t v12 = *((void *)this + 14);
  }
  else
  {
    uint64_t v12 = *((unsigned __int8 *)this + 127);
  }
  unsigned int v13 = &v8[v12];
  while (v8 != v13)
  {
    *long long v8 = __tolower((char)*v8);
    ++v8;
  }
}

uint64_t MMSGeneralContentType::type(MMSGeneralContentType *this)
{
  uint64_t result = (uint64_t)this + 80;
  if (*((char *)this + 103) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t MMSGeneralContentType::subtype(MMSGeneralContentType *this)
{
  uint64_t result = (uint64_t)this + 104;
  if (*((char *)this + 127) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t MMSGeneralContentType::encode(MMSGeneralContentType *this, MMSPduEncoder *a2)
{
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  MMSContentType::toString((uint64_t)this, (uint64_t)v26);
  uint64_t v4 = (MMSGeneralContentType *)((char *)this + 8);
  if (MMSHeaderContainer::headerCount((MMSGeneralContentType *)((char *)this + 8)))
  {
    uint64_t v25 = 0;
    *(_OWORD *)uint64_t v23 = 0u;
    long long v24 = 0u;
    MMSPduEncoder::MMSPduEncoder((uint64_t)v23, *(_DWORD *)a2);
    if (*((char *)this + 103) >= 0) {
      size_t v5 = *((unsigned __int8 *)this + 103);
    }
    else {
      size_t v5 = *((void *)this + 11);
    }
    memset(&v20, 0, sizeof(v20));
    unsigned int v6 = &v20;
    std::string::basic_string[abi:nn180100]((uint64_t)&v20, v5 + 1);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*((char *)this + 103) >= 0) {
        uint64_t v7 = (char *)this + 80;
      }
      else {
        uint64_t v7 = (char *)*((void *)this + 10);
      }
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
    uint64_t v10 = (const std::string::value_type *)*((void *)this + 13);
    uint64_t v9 = (char *)this + 104;
    long long v8 = v10;
    int v11 = v9[23];
    if (v11 >= 0) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v8;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = v9[23];
    }
    else {
      std::string::size_type v13 = *((void *)v9 + 1);
    }
    xpc_object_t v14 = std::string::append(&v20, v12, v13);
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    uint64_t v22 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (v22 >= 0) {
      long long v16 = __p;
    }
    else {
      long long v16 = (void **)__p[0];
    }
    MMSPduEncoder::encodeHttpToken((MMSPduEncoder *)v23, (const char *)v16);
    MMSParameterContainer::encode(v4, (MMSPduEncoder *)v23);
    if (v24 >= 0) {
      unsigned int v17 = HIBYTE(v24);
    }
    else {
      unsigned int v17 = v24;
    }
    MMSPduEncoder::encodeWspValueLength(a2, v17);
    MMSPduEncoder::append(a2, (MMSPduEncoder *)v23);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[1]);
    }
  }
  else
  {
    if (v27 >= 0) {
      uint64_t v18 = (const char *)v26;
    }
    else {
      uint64_t v18 = (const char *)v26[0];
    }
    MMSPduEncoder::encodeHttpToken(a2, v18);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  return 1;
}

void MMSGeneralContentType::copy(MMSGeneralContentType *this)
{
}

void MMSEncodedContentType::~MMSEncodedContentType(MMSEncodedContentType *this)
{
  *(void *)this = &unk_1ECFD30B0;
  MMSParameterContainer::~MMSParameterContainer((MMSEncodedContentType *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ECFD30B0;
  MMSParameterContainer::~MMSParameterContainer((MMSEncodedContentType *)((char *)this + 8));

  JUMPOUT(0x18531F680);
}

void MMSGeneralContentType::~MMSGeneralContentType(void **this)
{
  *this = &unk_1ECFD38D0;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  *this = &unk_1ECFD30B0;
  MMSParameterContainer::~MMSParameterContainer((MMSParameterContainer *)(this + 1));
}

{
  uint64_t vars8;

  *this = &unk_1ECFD38D0;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  *this = &unk_1ECFD30B0;
  MMSParameterContainer::~MMSParameterContainer((MMSParameterContainer *)(this + 1));

  JUMPOUT(0x18531F680);
}

uint64_t **std::map<unsigned int,anonymous namespace'::ContentType>::map[abi:nn180100](uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    size_t v5 = a2;
    unsigned int v6 = (int *)&a2[6 * a3];
    do
    {
      uint64_t v7 = a1[1];
      long long v8 = v4;
      if (*a1 == v4) {
        goto LABEL_9;
      }
      uint64_t v9 = a1[1];
      uint64_t v10 = v4;
      if (v7)
      {
        do
        {
          long long v8 = v9;
          uint64_t v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          uint64_t v10 = v8;
        }
        while (v11);
      }
      unsigned int v12 = *v5;
      if (*((_DWORD *)v8 + 8) < *v5)
      {
LABEL_9:
        if (v7) {
          std::string::size_type v13 = (uint64_t **)v8;
        }
        else {
          std::string::size_type v13 = (uint64_t **)v4;
        }
        if (v7) {
          xpc_object_t v14 = (uint64_t **)(v8 + 1);
        }
        else {
          xpc_object_t v14 = (uint64_t **)v4;
        }
        if (*v14) {
          goto LABEL_28;
        }
      }
      else
      {
        xpc_object_t v14 = (uint64_t **)v4;
        std::string::size_type v13 = (uint64_t **)v4;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              std::string::size_type v13 = (uint64_t **)v7;
              unsigned int v15 = *((_DWORD *)v7 + 8);
              if (v12 >= v15) {
                break;
              }
              uint64_t v7 = *v13;
              xpc_object_t v14 = v13;
              if (!*v13) {
                goto LABEL_24;
              }
            }
            if (v15 >= v12) {
              goto LABEL_28;
            }
            uint64_t v7 = v13[1];
            if (!v7)
            {
              xpc_object_t v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      long long v16 = operator new(0x38uLL);
      uint64_t v17 = *((void *)v5 + 2);
      v16[2] = *(_OWORD *)v5;
      *((void *)v16 + 6) = v17;
      *(void *)long long v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      *xpc_object_t v14 = (uint64_t *)v16;
      uint64_t v18 = (uint64_t *)**a1;
      if (v18)
      {
        *a1 = v18;
        xpc_object_t v19 = *v14;
      }
      else
      {
        xpc_object_t v19 = (uint64_t *)v16;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v19);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_28:
      v5 += 6;
    }
    while (v5 != (unsigned int *)v6);
  }
  return a1;
}

void *std::string::basic_string[abi:nn180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unsigned int v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unsigned int v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    unsigned int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v7 = v6;
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v26, (uint64_t *)a2, v7);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    xpc_object_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, i + 16, v4)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__construct_node_hash<std::pair<std::string const,unsigned int>>(a1, v9, a3, v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*(void *)(a1 + 24);
  return i;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__construct_node_hash<std::pair<std::string const,unsigned int>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  a4[2] = 0;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *a4 = v8;
  a4[1] = v7;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *((unsigned char *)a4 + 16) = 1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v15 = *((void *)v13 + 1);
      if (v15 == v8)
      {
        if (std::equal_to<std::string>::operator()[abi:nn180100](v14, v13 + 16, v2)) {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v7) {
            v15 %= *(void *)&v7;
          }
        }
        else
        {
          v15 &= *(void *)&v7 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      unint64_t v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x18531F540](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x18531F550](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:nn180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:nn180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:nn180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_1844A123C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844A13F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A1690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v25 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1844A191C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A1BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v25 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1844A1E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1844A23E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A26A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1844A2934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A2BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v25 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1844A2E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A30F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v25 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1844A33EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v25 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1844A356C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844A362C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844A37CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A3A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A3C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A3E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A40E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A4284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844A4450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844A4678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844A47A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1844A49B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A4C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A4E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A5108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A5384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A55D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844A584C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A5AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A5D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A5FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1844A6270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A6408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844A6608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844A69E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844A6BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844A6CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AB9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v25 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1844ABBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v25 - 112), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1844ABCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844ABED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844AC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  unint64_t v16 = v15;

  _Unwind_Resume(a1);
}

const char *radioStateAsString(unsigned int a1)
{
  if (a1 > 6) {
    return "Unknown";
  }
  else {
    return off_1E5262AD0[a1];
  }
}

const char *cellularDiagnosticsStateAsString(int a1)
{
  switch(a1)
  {
    case -2:
      __n128 result = "Not supported";
      break;
    case -1:
      __n128 result = "Not available";
      break;
    case 0:
      __n128 result = "No issue";
      break;
    case 1:
      __n128 result = "Baseband dead";
      break;
    case 2:
      __n128 result = "eUICC FW failed";
      break;
    case 3:
      __n128 result = "Baseband RFFE failed";
      break;
    default:
      if (a1 == 255) {
        __n128 result = "Other issue";
      }
      else {
        __n128 result = "Internal error";
      }
      break;
  }
  return result;
}

void sub_1844AC8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::reserve(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer begin = this->__begin_;
  if (this->__end_cap_.__value_ - this->__begin_ < __n)
  {
    if ((__n & 0x8000000000000000) != 0) {
      abort();
    }
    std::vector<char>::pointer end = this->__end_;
    size_t v6 = (char *)operator new(__n);
    uint64_t v7 = &v6[end - begin];
    uint64_t v8 = v7;
    if (end != begin)
    {
      uint64_t v9 = &end[~(unint64_t)begin];
      do
      {
        char v10 = *--end;
        (v9--)[(void)v6] = v10;
      }
      while (end != begin);
      uint64_t v8 = v6;
    }
    this->__begin_ = v8;
    this->__end_ = v7;
    this->__end_cap_.__value_ = &v6[__n];
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void sub_1844ACA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ACB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ACBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ACC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ACD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ACDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ACF30(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  unint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    unint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      char v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      char v17 = 0;
    }
    uint64_t v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    xpc_object_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      char v10 = *(char **)(a1 + 8);
      xpc_object_t v28 = v17;
    }
    int v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    xpc_object_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    BOOL v19 = &__src[a5];
    unint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    uint64_t v22 = &v5[a5];
    uint64_t v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  BOOL v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  unint64_t v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

const char *CTDeviceTypeAsString(uint64_t a1)
{
  int v1 = "CTDeviceTypeUnknown";
  if (a1 == 1) {
    int v1 = "CTDeviceTypePairedWatch";
  }
  if (a1 == 2) {
    return "CTDeviceTypeThisDevice";
  }
  else {
    return v1;
  }
}

const char *CTPlanTransferEndpointAsString(uint64_t a1)
{
  int v1 = "CTPlanTransferEndpointUnknown";
  if (a1 == 1) {
    int v1 = "CTPlanTransferEndpointSource";
  }
  if (a1 == 2) {
    return "CTPlanTransferEndpointTarget";
  }
  else {
    return v1;
  }
}

const char *CTPlanTransferCapabilityAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xD) {
    return "CTPlanTransferCapabilityUnknown";
  }
  else {
    return off_1E5262B08[a1 - 1];
  }
}

const char *CTPlanTransferStatusAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return "CTPlanTransferStatusUnknown";
  }
  else {
    return off_1E5262B78[a1 - 1];
  }
}

const char *CTPlanStatusAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA) {
    return "CTPlanStatusUnknown";
  }
  else {
    return off_1E5262B90[a1 - 1];
  }
}

const char *CTPlanPurchaseTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return "CTPlanPurchaseTypeUnknown";
  }
  else {
    return off_1E5262BE8[a1 - 1];
  }
}

const char *CTPlanDataMeasureUnitAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return "CTPlanDataMeasureUnitUnknown";
  }
  else {
    return off_1E5262C00[a1 - 1];
  }
}

const char *CTPlanTypeAsString(uint64_t a1)
{
  int v1 = "CTPlanTypeUnknown";
  if (a1 == 2) {
    int v1 = "CTPlanTypePrepaid";
  }
  if (a1 == 1) {
    return "CTPlanTypePostpaid";
  }
  else {
    return v1;
  }
}

id CTPlanAttributeSetAsString(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = [MEMORY[0x1E4F28E78] string];
    for (unsigned int i = 0; i != 3; ++i)
    {
      uint64_t v4 = (1 << i);
      if ((v4 & a1) != 0)
      {
        id v5 = [NSString alloc];
        size_t v6 = "CTPlanAttributeNone";
        if (i <= 2) {
          size_t v6 = off_1E5262C20[v4 - 1];
        }
        uint64_t v7 = objc_msgSend(v5, "initWithFormat:", @"[%s]", v6);
        [v2 appendString:v7];
      }
    }
  }
  else
  {
    uint64_t v2 = (void *)[[NSString alloc] initWithUTF8String:"CTPlanAttributeNone"];
  }

  return v2;
}

const char *CTPlanAddOnPurchaseTypeAsString(uint64_t a1)
{
  int v1 = "CTPlanAddOnPurchaseTypeUnknown";
  if (a1 == 1) {
    int v1 = "CTPlanAddOnPurchaseTypeNotAllowed";
  }
  if (a1 == 2) {
    return "CTPlanAddOnPurchaseTypeWebsheet";
  }
  else {
    return v1;
  }
}

const char *CTPlanAddOnCarrierFlowTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return "CTPlanAddOnCarrierFlowTypeUnknown";
  }
  else {
    return off_1E5262C40[a1 - 1];
  }
}

const char *CTPlanSetupResultTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return "CTPlanSetupResultTypeUnknown";
  }
  else {
    return off_1E5262C58[a1 - 1];
  }
}

const char *CTPlanSetupTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return "CTPlanSetupTypeUnknown";
  }
  else {
    return off_1E5262C70[a1 - 1];
  }
}

const char *CTCellularPlanDeviceIdentifierAsString(uint64_t a1)
{
  int v1 = "EID";
  if (a1 == 2) {
    int v1 = "IMEI";
  }
  if (a1 == 3) {
    return "All";
  }
  else {
    return v1;
  }
}

const char *CTPlanPurchaseOptionAsString(uint64_t a1)
{
  int v1 = "CTPlanPurchaseOptionDefault";
  if (a1 == 1) {
    int v1 = "CTPlanAllowPurchaseOverBootstrap";
  }
  if (a1 == 2) {
    return "CTPlanDisallowPurchaseOverBootstrap";
  }
  else {
    return v1;
  }
}

void sub_1844AD69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844AD724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844AD81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AD948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844AD9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844ADB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ADBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ADC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ADD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ADDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844ADE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844ADF94(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844AE0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844AE184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844AE2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AE334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTCellularPlanProvisioningRequest>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844AE420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AE4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AE53C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844AE638(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844AE6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AE788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AE858(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844AE944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844AE9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844AEA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AEB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTCellularPlanProvisioningOnDeviceActivationRequest>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844AEBF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AECF4(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844AED98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AEE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AEEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AEFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844AF080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844AF12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF3D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844AF530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844AF618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AF948(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844AFA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844AFB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844AFC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AFCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AFD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844AFDF4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844AFEF0(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844AFF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B0040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B00E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B018C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B02B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B036C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B040C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B04F8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B0608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B0744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B07D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTPlan>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844B08C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B0958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTDeviceIdentifier>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844B0A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B0B4C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B0C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B0D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B0E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTPlanList>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844B0F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B0FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B10DC(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844B1214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B1368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B13F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B1480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B1504(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B15F0(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B16DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B17A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B1820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B192C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B1A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B1B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B1C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B1C94(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B1D9C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B1EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B1F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B1FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B222C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B2318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B23D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B247C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B24F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B260C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B26C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2854(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B2964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B2A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B2B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2D10(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B2DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B2F30(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B301C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B30B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B3150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B31CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B32A8(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B3394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B34C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B3544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B35F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B369C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B37C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B387C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B391C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B39EC(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B3AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B3BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B3C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B3CF8(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B3DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B3EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B3F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B3FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B4080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B41A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B4260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B4300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B43A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B4450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B453C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B45F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B46FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B47E0(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B48CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B4994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B4A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSimSetupUsage>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844B4AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B4BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B4C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B4D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B4E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B4EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B4FB8(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B50A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B5190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B5244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B52C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B53C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B54A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B5558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B560C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B56C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B5774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B58A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B598C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B5A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B5B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B5BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B5D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B5EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B5F0C()
{
}

void sub_1844B5FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B6054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B60D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B6158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B6208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B62BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B6348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B645C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B6518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B65B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B66E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B6794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B6860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B6958(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B6A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B6B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B6B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTPlanSetupDetails>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844B6C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B6D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B6DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B6F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B6FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B7060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B7104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B718C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B7284(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B7394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B7468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B74E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B756C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B7664(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B7774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B7828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B7938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B79C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B7A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B7B3C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B7BDC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B7C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B7D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B7E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B7F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B7FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B805C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B8110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B82AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B8454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1844B84B0()
{
}

void sub_1844B84B8()
{
}

void sub_1844B84C0()
{
}

void sub_1844B8548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B8654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B870C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B87C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B8874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B8928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B89DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B8A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B8B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B8BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B8C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B8D88(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B8E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B8F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B8FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9044(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B9140(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B9238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B92FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9374(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844B9498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B9650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B96F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B97A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B9854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B9978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9BA4(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844B9C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844B9D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844B9DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844B9F50(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BA008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BA0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BA170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BA27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BA330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BA440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BA4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRemotePlanIdentifier>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844BA5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BA67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BA75C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BA848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BA918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BA9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BAA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BAB3C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BAC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BAD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BAE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BAEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BAF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BB004(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BB0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BB198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BB240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BB2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BB36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BB418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BB53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BB5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BB698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BB790(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BB8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BB984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BBA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BBAAC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BBB98(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BBC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BBD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BBE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BBE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BBF6C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BC064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BC128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BC1A0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BC2C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BC3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BC4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BC51C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BC5B0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BC6CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BC7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BC918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BC9A4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BCA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BCAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BCBE4(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BCCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BCD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BCE14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTCellularPlanTransferCrossPlatformRequest>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844BCF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BCFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BD0E8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BD204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BD2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BD3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BD460(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BD4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BD60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BD6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BD768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BD838(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BD924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BD9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BDAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BDB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSArray<CTCellularPlanCrossPlatformLabel *>>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844BDC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BDD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BDE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BDEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BDFD8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BE0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BE19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BE244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BE2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BE348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BE440(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BE550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BE604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BE6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BE728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BE7B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BE8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BE9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BEA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BEAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BEB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BEC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BED44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BEE28(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BEEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliSystemConfiguration>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844BEFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BF050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BF148(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BF1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BF35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1844BF440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BF55C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BF604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BF770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1844BF854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BF95C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844BF9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageID>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844BFADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BFBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844BFCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844BFD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844BFE40(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844BFED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageEnvelope>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844BFFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C0218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844C02FC(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844C038C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageIDList>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C0478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0634(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844C06CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageRevokeData>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C07B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C096C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C0AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0BAC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844C0C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C0E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C0F68(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844C0FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliDestination>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C10E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C11FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C1328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C1444(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844C14DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C1564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliOperationID>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C1650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C18C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C1A00(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C1A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C1B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliFetchRemoteCapabilitiesOptions>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C1C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C1CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C1DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844C1F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C2044(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844C20D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C21DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C22B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844C23B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C2498(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844C2528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliCapabilitiesInformation>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C2614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C26C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C27E8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C2930(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C29CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C2A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageComposingIndicator>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C2B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C2C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C2CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C2EA0(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1844C3038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C31A8(_Unwind_Exception *a1)
{
  id v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C3358(_Unwind_Exception *a1)
{
  uint64_t v8 = v6;

  _Unwind_Resume(a1);
}

void sub_1844C3410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C34C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C354C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C35D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C366C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C3850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C38A0()
{
}

void sub_1844C38A8()
{
}

void sub_1844C39F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C3B2C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C3C74(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C3D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C3D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageText>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C3E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C3F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C3FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C4208(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1844C427C()
{
}

void sub_1844C43C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C4508(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C4650(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C46EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C4774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageGeoLocationPush>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C4860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C4920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C49D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C4BE4(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1844C4C58()
{
}

void sub_1844C4DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C4EE4(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C502C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C50C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C5150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliFileTransferDescriptor>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C523C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C52FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C53B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C55C0(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1844C5634()
{
}

void sub_1844C577C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C587C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844C599C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844C5A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C5AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C5C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C5DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C5ED4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844C5F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C6148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844C6244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C6328(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844C63B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotRenderInformationData>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C64A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C6550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C6634(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844C66C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliDeepLinkBase64String>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C67B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C68C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C69A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844C6A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C6B80(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844C6C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliDeepLinkBase64StringDecoded>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C6CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C6DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C6ED0(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C6F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C6FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotSpamReportInformation>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C70E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C7178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C72B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844C741C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C7558(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C75F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C767C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliSpamReportInformation>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C7768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C7800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C793C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844C7AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C7BE8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C7C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C7D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C7D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotResponseForSuggestedReply>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C7E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C7FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844C8134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C8270(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C830C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C8394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C841C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotResponseForSuggestedAction>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C8508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C8654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844C87BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C88F8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C8994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C8A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C8AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliSuggestedActionDevice>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C8B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C8CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844C8E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C8F80(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C901C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C90A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C912C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliSuggestedActionSettings>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C9218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C9364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844C94CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C95E8(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844C9680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatInformation>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C976C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C9804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C9920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844C9A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C9BA4(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844C9C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatUri>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C9D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C9DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatParticipantList>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844C9EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844C9F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CA084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844CA1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CA328(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844CA3C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CA44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CA4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CA610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844CA778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CA8B4(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844CA950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CA9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatSubject>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1844CAAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CAB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CAC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844CAE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CAF3C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844CAFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CB088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CB114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CB250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int64_t v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1844CB3B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CB4D4(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844CB56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CB5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CB710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844CB858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CB950(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844CB9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CBAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844CBC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CBD0C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844CBDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CBEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844CBFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CC0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844CC18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844CC270(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1844CC300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CC434(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844CC4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CC558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CC608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CC790(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1844CC7E8()
{
}

void sub_1844CC908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CCA4C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844CCAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CCB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CCC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CCDA8(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1844CCE00()
{
}

void sub_1844CCF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CD064(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844CD100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CD188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CD238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CD3C0(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1844CD418()
{
}

void sub_1844CD538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionGetThumperName(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kThumperGetCarrierName", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &xdict);
    uint64_t v5 = MEMORY[0x1853203E0](xdict);
    uint64_t v6 = MEMORY[0x1E4F14590];
    if (v5 == MEMORY[0x1E4F14590])
    {
      *a2 = 0;
      if (MEMORY[0x1853203E0](xdict) != v6 || !xpc_dictionary_get_value(xdict, "kThumperCarrierName")) {
        goto LABEL_7;
      }
      char v10 = 0;
      xpc_dictionary_get_value(xdict, "kThumperCarrierName");
      uint64_t v9 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v10, (CFTypeRef *)&v9);
      id v7 = v10;
    }
    else
    {
      id v7 = &stru_1ECFD6720;
    }
    *a2 = v7;
LABEL_7:
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

void sub_1844CD774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1844CDACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CDB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CDD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CDF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844CE198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844CE3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844CE600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844CE87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844CEA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844CEC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844CEE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844CF010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844CF270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);

  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844CF4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844CF69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t _CTCallHistoryStoreGetCountOfMissedCallSince()
{
  return 0;
}

uint64_t _CTCallHistoryStoreGetCountOfMissedCallWithTypesSince()
{
  return 0;
}

double _CTCallHistoryStoreCallTimersGetAll()
{
  return 0.0;
}

const char *CTEnhancedLQMIndicationTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8) {
    return "CTEnhancedLQMIndicationTypeUnknown";
  }
  else {
    return off_1E5263118[a1 - 1];
  }
}

void sub_1844D0844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D08D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D094C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D0A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844D0BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844D0DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1844D0EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D1114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D12E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D13B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D14FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844D1620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844D16E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D1774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D1818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D18AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D1994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D1AD8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844D1CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D1E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D209C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1844D21DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D23D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D2514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844D2644(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844D2780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D2A20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D2B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D2D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D2F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D30B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D31A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D32C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D34E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D3614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D3690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D37CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D3904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D39A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D3A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D3B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D3CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D3E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D3F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D403C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D4150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D426C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844D4384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D44B8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844D45EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D4724(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1844D4858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D49B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D4A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D4AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D4B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D4C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D4D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844D4E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844D50CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D5200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D52B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D5354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D53F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D549C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D5540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D55D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D56E4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1844D57FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D58AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D594C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D59F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D5A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D5C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D5DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844D5EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1844D6108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D62E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D6508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D663C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D6758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D67EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D6860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D6950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D69E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D6B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844D6C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844D6EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D6FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D71DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844D7304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844D74D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D7548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D7694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844D77B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844D7908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844D7A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_1844D7B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D7C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D7D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D7DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D7EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D7FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D8068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D8150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D8214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D82B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D83A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D8464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844D854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844D88F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D8B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844D8C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D8E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844D9088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844D91F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844D935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844D94A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1844D9598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  size_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1844D972C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844D9928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844D9B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1844D9DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t MMSExpiryHeader::MMSExpiryHeader(uint64_t a1, uint64_t a2, int a3)
{
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 24), "com.apple.telephony", "msg.mms.pdu.hdr.expiry");
  uint64_t result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(void *)a1 = &unk_1ECFD3258;
  *(_DWORD *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 36) = 0;
  return result;
}

uint64_t MMSExpiryHeader::parseValue(MMSExpiryHeader *this, const char *a2)
{
  return 0;
}

uint64_t MMSExpiryHeader::decodeValue(MMSExpiryHeader *this, MMSPduDecoder *a2)
{
  unsigned int v8 = 0;
  int v4 = MMSPduDecoder::decodeWspValueLength(a2, &v8);
  uint64_t result = 0;
  if (v4)
  {
    if (*((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 5) < v8) {
      return 0;
    }
    MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 36);
    int v6 = *((char *)this + 36);
    if (v6 >= -126)
    {
      id v7 = *((void *)this + 3);
      uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if (result)
      {
        MMSExpiryHeader::decodeValue(v6, (uint64_t)this, v7);
        return 0;
      }
    }
    else
    {
      return MMSPduDecoder::decodeWspLongInteger(a2, (unsigned int *)this + 8);
    }
  }
  return result;
}

uint64_t MMSExpiryHeader::encodeValue(MMSExpiryHeader *this, MMSPduEncoder *a2)
{
  uint64_t v8 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeByte((MMSPduEncoder *)__p, *((unsigned char *)this + 36));
  MMSPduEncoder::encodeWspLongInteger((MMSPduEncoder *)__p, *((_DWORD *)this + 8));
  if (v7 >= 0) {
    unsigned int v4 = HIBYTE(v7);
  }
  else {
    unsigned int v4 = v7;
  }
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  return 1;
}

void MMSExpiryHeader::createInstance(MMSExpiryHeader *this)
{
}

void MMSExpiryHeader::copy(MMSExpiryHeader *this)
{
}

uint64_t MMSExpiryHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v11);
  unsigned int v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  if (*(unsigned __int8 *)(a1 + 36) == 128) {
    int v6 = "Absolute";
  }
  else {
    int v6 = "Relative";
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, 8);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v9;
  long long v7 = (void *)MEMORY[0x1E4FBA418];
  *(void *)(a2 + 16) = v10;
  *(void *)&v11[0] = *v7;
  *(void *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24)) = v7[3];
  *((void *)&v11[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18531F630](v15);
  return 1;
}

const char *MMSExpiryHeader::headerTypeName(MMSExpiryHeader *this)
{
  return "date";
}

void MMSExpiryHeader::~MMSExpiryHeader(MMSExpiryHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);
  MEMORY[0x18531F300](v1 + 24);
}

{
  uint64_t v1;
  uint64_t vars8;

  MMSBinaryHeader::~MMSBinaryHeader(this);
  MEMORY[0x18531F300](v1 + 24);

  JUMPOUT(0x18531F680);
}

uint64_t MMSIndexedDateHeader::MMSIndexedDateHeader(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(void *)uint64_t result = &unk_1ECFD3818;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

uint64_t MMSIndexedDateHeader::parseValue(MMSIndexedDateHeader *this, const char *a2)
{
  return 0;
}

uint64_t MMSIndexedDateHeader::decodeValue(MMSIndexedDateHeader *this, MMSPduDecoder *a2)
{
  unsigned int v6 = 0;
  int v4 = MMSPduDecoder::decodeWspValueLength(a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    uint64_t result = MMSPduDecoder::decodeWspIntegerValue(a2, (unsigned int *)this + 6);
    if (result) {
      return MMSPduDecoder::decodeWspLongInteger(a2, (unsigned int *)this + 5);
    }
  }
  return result;
}

uint64_t MMSIndexedDateHeader::encodeValue(MMSIndexedDateHeader *this, MMSPduEncoder *a2)
{
  uint64_t v8 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeWspIntegerValue((MMSPduEncoder *)__p, *((_DWORD *)this + 6));
  MMSPduEncoder::encodeWspLongInteger((MMSPduEncoder *)__p, *((_DWORD *)this + 5));
  if (v7 >= 0) {
    unsigned int v4 = HIBYTE(v7);
  }
  else {
    unsigned int v4 = v7;
  }
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  return 1;
}

uint64_t MMSIndexedDateHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v7);
  std::ostream::operator<<();
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v7 + 8, &v5);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v5;
  uint64_t v3 = (void *)MEMORY[0x1E4FBA418];
  *(void *)(a2 + 16) = v6;
  *(void *)&v7[0] = *v3;
  *(void *)((char *)v7 + *(void *)(*(void *)&v7[0] - 24)) = v3[3];
  *((void *)&v7[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18531F630](v11);
  return 1;
}

void MMSIndexedDateHeader::createInstance(MMSIndexedDateHeader *this)
{
}

void MMSIndexedDateHeader::copy(MMSIndexedDateHeader *this)
{
}

const char *MMSIndexedDateHeader::headerTypeName(MMSIndexedDateHeader *this)
{
  return "indexed-date";
}

void MMSIndexedDateHeader::~MMSIndexedDateHeader(MMSIndexedDateHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);

  JUMPOUT(0x18531F680);
}

const char *CTStewieStatusAsString(unint64_t a1)
{
  if (a1 > 6) {
    return "???";
  }
  else {
    return off_1E5263548[a1];
  }
}

const char *CTStewieStatusReasonAsString(unint64_t a1)
{
  if (a1 > 8) {
    return "???";
  }
  else {
    return off_1E5263580[a1];
  }
}

const char *CTStewieTransportTypeAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E52635C8[a1];
  }
}

void sub_1844DAF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844DB12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844DB1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844DB310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844DB4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844DB6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *kCTDataConnectionServiceTypeFromIndex(unsigned int a1)
{
  if (a1 <= 0x23) {
    return kDataConnectionTypeMap[a1];
  }
  else {
    return @"Err";
  }
}

uint64_t kCTDataConnectionTypeFromString(CFStringRef theString1)
{
  if (!theString1) {
    return 36;
  }
  for (uint64_t i = 0; i != 36; ++i)
  {
    if (CFStringCompare(theString1, kDataConnectionTypeMap[i], 1uLL) == kCFCompareEqualTo) {
      break;
    }
  }
  return i;
}

const void *VMCopyDictionaryForNotificationString(__CFString *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  NetworkNotification::NetworkNotification((NetworkNotification *)v4, a1);
  uint64_t v1 = (const void *)NetworkNotification::parsedNotification((NetworkNotification *)v4);
  uint64_t v2 = v1;
  if (v1) {
    CFRetain(v1);
  }
  NetworkNotification::~NetworkNotification((NetworkNotification *)v4);
  return v2;
}

uint64_t MMSStringHeader::parseValue(std::string *this, const char *a2)
{
  if (a2) {
    std::string::__assign_external(this + 1, a2);
  }
  return 1;
}

uint64_t MMSStringHeader::valueAsString(const std::string *a1, std::string *this)
{
  std::string::operator=(this, a1 + 1);
  return 1;
}

BOOL MMSStringHeader::convertString(uint64_t a1, int a2, MMSCharsetHeader *this, MMSCharsetHeader *a4)
{
  CFStringEncoding v6 = MMSCharsetHeader::cfEncodingForMibEnum(this);
  if (v6 == -1) {
    return 0;
  }
  CFStringEncoding v7 = v6;
  CFStringEncoding v8 = MMSCharsetHeader::cfEncodingForMibEnum(a4);
  if (v8 == -1) {
    return 0;
  }
  CFStringEncoding v9 = v8;
  int v10 = *(char *)(a1 + 23);
  uint64_t v11 = v10 >= 0 ? (const UInt8 *)a1 : *(const UInt8 **)a1;
  CFIndex v12 = v10 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
  CFStringRef v13 = CFStringCreateWithBytes(0, v11, v12, v7, 0);
  if (!v13) {
    return 0;
  }
  CFStringRef v14 = v13;
  CFIndex Length = CFStringGetLength(v13);
  CFIndex maxBufLen = 0;
  v19.location = 0;
  v19.length = Length;
  CFStringGetBytes(v14, v19, v9, 0x3Fu, 0, 0, 0, &maxBufLen);
  BOOL v16 = maxBufLen != 0;
  if (maxBufLen) {
    operator new[]();
  }
  CFRelease(v14);
  return v16;
}

void *MMSTextStringHeader::MMSTextStringHeader(void *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (void *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)a1, a2);
  *uint64_t v5 = &unk_1ECFD3340;
  CFStringEncoding v6 = v5 + 3;
  if (a3) {
    CFStringEncoding v7 = a3;
  }
  else {
    CFStringEncoding v7 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  *a1 = &unk_1ECFD3638;
  return a1;
}

void MMSTextStringHeader::createInstance(MMSTextStringHeader *this)
{
}

void MMSTextStringHeader::copy(MMSTextStringHeader *this)
{
}

uint64_t MMSTextStringHeader::decodeValue(std::string *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeWspTextString((uint64_t)a2, this + 1);
}

uint64_t MMSTextStringHeader::encodeValue(MMSTextStringHeader *this, MMSPduEncoder *a2)
{
  uint64_t v3 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  MMSPduEncoder::encodeWspTextString(a2, v3);
  return 1;
}

const char *MMSTextStringHeader::headerTypeName(MMSTextStringHeader *this)
{
  return "text-string";
}

void *MMSQuotedStringHeader::MMSQuotedStringHeader(void *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (void *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)a1, a2);
  *uint64_t v5 = &unk_1ECFD3340;
  CFStringEncoding v6 = v5 + 3;
  if (a3) {
    CFStringEncoding v7 = a3;
  }
  else {
    CFStringEncoding v7 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  *a1 = &unk_1ECFD39B0;
  return a1;
}

void MMSQuotedStringHeader::createInstance(MMSQuotedStringHeader *this)
{
}

void MMSQuotedStringHeader::copy(MMSQuotedStringHeader *this)
{
}

uint64_t MMSQuotedStringHeader::decodeValue(std::string *this, MMSPduDecoder *a2)
{
  MMSPduDecoder::skipByte((uint64_t)a2);

  return MMSPduDecoder::decodeString((uint64_t)a2, this + 1, 0xFFFFFFFF);
}

uint64_t MMSQuotedStringHeader::encodeValue(MMSQuotedStringHeader *this, MMSPduEncoder *a2)
{
  MMSPduEncoder::encodeByte(a2, 34);
  unsigned int v4 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    unsigned int v4 = *(const char **)v4;
  }
  MMSPduEncoder::encodeString(a2, v4);
  return 1;
}

const char *MMSQuotedStringHeader::headerTypeName(MMSQuotedStringHeader *this)
{
  return "quoted-string";
}

uint64_t MMSEncodedStringHeader::MMSEncodedStringHeader(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (void *)MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *uint64_t v5 = &unk_1ECFD3340;
  CFStringEncoding v6 = v5 + 3;
  if (a3) {
    CFStringEncoding v7 = a3;
  }
  else {
    CFStringEncoding v7 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  *(void *)a1 = &unk_1ECFD3A28;
  *(_DWORD *)(a1 + 48) = 3;
  if (a3)
  {
    LOBYTE(v8) = *a3;
    if (*a3)
    {
      unsigned int v9 = 1;
      while ((v8 & 0x80) == 0)
      {
        int v8 = a3[v9++];
        if (!v8) {
          return a1;
        }
      }
      *(_DWORD *)(a1 + 48) = 106;
    }
  }
  return a1;
}

void MMSEncodedStringHeader::createInstance(MMSEncodedStringHeader *this)
{
}

void MMSEncodedStringHeader::copy(MMSEncodedStringHeader *this)
{
}

uint64_t MMSEncodedStringHeader::decodeValue(MMSEncodedStringHeader *this, MMSPduDecoder *a2)
{
  int v3 = 0;
  return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, &v3);
}

uint64_t MMSEncodedStringHeader::encodeValue(MMSEncodedStringHeader *this, MMSPduEncoder *a2)
{
  return 1;
}

uint64_t MMSEncodedStringHeader::parseValue(MMSEncodedStringHeader *this, const char *a2)
{
  *((_DWORD *)this + 12) = 3;
  LOBYTE(v2) = *a2;
  if (*a2)
  {
    int v3 = 1;
    while ((v2 & 0x80) == 0)
    {
      int v2 = a2[v3++];
      if (!v2) {
        goto LABEL_7;
      }
    }
    *((_DWORD *)this + 12) = 106;
  }
LABEL_7:
  std::string::__assign_external((std::string *)this + 1, a2);
  return 1;
}

const char *MMSEncodedStringHeader::headerTypeName(MMSEncodedStringHeader *this)
{
  return "encoded-string";
}

void *MMSSensitiveEncodedStringHeader::MMSSensitiveEncodedStringHeader(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)MMSEncodedStringHeader::MMSEncodedStringHeader(a1, a2, a3);
  *uint64_t result = &unk_1ECFD3B90;
  return result;
}

uint64_t MMSSensitiveEncodedStringHeader::isSensitive(MMSSensitiveEncodedStringHeader *this)
{
  return 1;
}

void MMSSensitiveEncodedStringHeader::createInstance(MMSSensitiveEncodedStringHeader *this)
{
}

void MMSSensitiveEncodedStringHeader::copy(MMSSensitiveEncodedStringHeader *this)
{
}

void *MMSSubjectHeader::MMSSubjectHeader(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)MMSEncodedStringHeader::MMSEncodedStringHeader(a1, a2, a3);
  *uint64_t result = &unk_1ECFD3520;
  return result;
}

uint64_t MMSSubjectHeader::decodeValue(MMSSubjectHeader *this, MMSPduDecoder *a2)
{
  int v3 = 0;
  return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, &v3);
}

uint64_t MMSSubjectHeader::encodeValue(MMSSubjectHeader *this, MMSPduEncoder *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)this + 1);
  }
  MMSPduEncoder::encodeEncodedString(a2, (uint64_t)&__p, (MMSCharsetHeader *)*((unsigned int *)this + 12));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void MMSSubjectHeader::copy(MMSSubjectHeader *this)
{
}

void MMSSubjectHeader::createInstance(MMSSubjectHeader *this)
{
}

uint64_t MMSIndexedEncodedStringHeader::MMSIndexedEncodedStringHeader(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t result = MMSEncodedStringHeader::MMSEncodedStringHeader(a1, a2, a4);
  *(void *)uint64_t result = &unk_1ECFD3B18;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

void MMSIndexedEncodedStringHeader::createInstance(MMSIndexedEncodedStringHeader *this)
{
}

void MMSIndexedEncodedStringHeader::copy(MMSIndexedEncodedStringHeader *this)
{
}

uint64_t MMSIndexedEncodedStringHeader::decodeValue(MMSIndexedEncodedStringHeader *this, MMSPduDecoder *a2)
{
  unsigned int v6 = 0;
  int v4 = MMSPduDecoder::decodeWspValueLength(a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    uint64_t result = MMSPduDecoder::decodeWspIntegerValue(a2, (unsigned int *)this + 13);
    if (result)
    {
      int v7 = 0;
      return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, &v7);
    }
  }
  return result;
}

uint64_t MMSIndexedEncodedStringHeader::encodeValue(MMSIndexedEncodedStringHeader *this, MMSPduEncoder *a2)
{
  uint64_t v8 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeWspIntegerValue((MMSPduEncoder *)__p, *((_DWORD *)this + 13));
  MMSPduEncoder::encodeEncodedString((MMSPduEncoder *)__p, (uint64_t)this + 24, (MMSCharsetHeader *)*((unsigned int *)this + 12));
  if (v7 >= 0) {
    unsigned int v4 = HIBYTE(v7);
  }
  else {
    unsigned int v4 = v7;
  }
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  return 1;
}

const char *MMSIndexedEncodedStringHeader::headerTypeName(MMSIndexedEncodedStringHeader *this)
{
  return "indexed-encoded-string";
}

void MMSTextStringHeader::~MMSTextStringHeader(void **this)
{
  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);

  JUMPOUT(0x18531F680);
}

void MMSQuotedStringHeader::~MMSQuotedStringHeader(void **this)
{
  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);

  JUMPOUT(0x18531F680);
}

void MMSEncodedStringHeader::~MMSEncodedStringHeader(void **this)
{
  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);

  JUMPOUT(0x18531F680);
}

void MMSSensitiveEncodedStringHeader::~MMSSensitiveEncodedStringHeader(void **this)
{
  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);

  JUMPOUT(0x18531F680);
}

void MMSSubjectHeader::~MMSSubjectHeader(void **this)
{
  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);

  JUMPOUT(0x18531F680);
}

void MMSIndexedEncodedStringHeader::~MMSIndexedEncodedStringHeader(void **this)
{
  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);

  JUMPOUT(0x18531F680);
}

void sub_1844DF070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v23 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844DF1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844DF438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844DF578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844DF744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844DF878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844DF9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844DFB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844DFD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844DFE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E005C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E01C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void handleUnsupportedRequestForCurrentBundle(const char *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
      unsigned int v4 = CTLogCoreAnalytics();
      uint64_t v5 = v4;
      if (Identifier)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
          handleUnsupportedRequestForCurrentBundle((uint64_t)a1, (uint64_t)Identifier, v5);
        }
        return;
      }
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v7 = 136315138;
      uint64_t v8 = a1;
      unsigned int v6 = "No bundle ID found for unsupported request '%s'";
    }
    else
    {
      uint64_t v5 = CTLogCoreAnalytics();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v7 = 136315138;
      uint64_t v8 = a1;
      unsigned int v6 = "No bundle found for unsupported request '%s'";
    }
    _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v7, 0xCu);
  }
}

void sub_1844E0854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844E0B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E0CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E0EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844E117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E1300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E13F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E15EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844E1804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E1980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E1B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844E1C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844E207C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844E2130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E2564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CTTelephonyNetworkInfo;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_1844E2674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E26EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E2828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E29CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E2AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E2C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E3080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  if (v14) {

  }
  _Unwind_Resume(a1);
}

void sub_1844E3228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E3310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E33BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *anonymous namespace'::sRadioAccessTechnologyFromDataMode(int a1)
{
  if ((a1 - 1) > 0x10) {
    return 0;
  }
  else {
    return off_1E5263E08[a1 - 1];
  }
}

void sub_1844E34E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E3554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E3638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_anonymous_namespace_ *anonymous namespace'::sCellIdStringFromCellId(_anonymous_namespace_ *this, objc_object *a2)
{
  int v2 = this;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"%04x", -[_anonymous_namespace_ intValue](v2, "intValue"));
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      goto LABEL_6;
    }
    uint64_t v3 = 0;
  }

  int v2 = (_anonymous_namespace_ *)v3;
LABEL_6:

  return v2;
}

void sub_1844E3720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E3940(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_1844E39F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::isSlotOne(_anonymous_namespace_ *this, CTServiceDescriptor *a2)
{
  int v2 = [(_anonymous_namespace_ *)this instance];
  uint64_t v3 = [NSNumber numberWithInt:1];
  uint64_t v4 = [v2 isEqualToNumber:v3];

  return v4;
}

void sub_1844E3A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E3B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E3BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E3E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E4020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E4124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E427C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E43BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E4634(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_1844E4730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E4888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E4B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E4C3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1844E4D34(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1844E4DD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1844E4ECC(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1844E4F9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1844E50D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1844E51F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void __copy_helper_atomic_property_(NSObject **a1, NSObject **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __assign_helper_atomic_property_(NSObject **a1, dispatch_object_t *a2)
{
  dispatch_object_t v3 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    dispatch_release(v4);
  }
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

const char *CTCellularHealthStatusAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return "CTCellularHealthUnknown";
  }
  else {
    return off_1E5263E98[a1 - 1];
  }
}

const char *CTStewieNotifyOptionAsString(unint64_t a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E5263F58[a1];
  }
}

void sub_1844E6A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E6BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E6D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E6DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E6EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E6F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E71A0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844E7504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E75F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E779C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E78CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E798C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E7C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E7FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E8040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E80E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E8264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E8330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E83BC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844E8458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E84CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E8554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E8624(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844E8B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::sIsPhoneNumberValid(_anonymous_namespace_ *this, NSString *a2)
{
  int v2 = (int)a2;
  dispatch_object_t v3 = this;
  uint64_t v4 = v3;
  if (v2 && [(_anonymous_namespace_ *)v3 hasPrefix:@"+"])
  {
    uint64_t v5 = [v4 substringFromIndex:1];

    uint64_t v4 = (void *)v5;
  }
  if (v4 && [v4 length] && (unint64_t)objc_msgSend(v4, "length") <= 0xF)
  {
    unsigned int v6 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
    int v7 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:v4];
    uint64_t v8 = [v6 isSupersetOfSet:v7];
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1844E8D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E8ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E90B0(_Unwind_Exception *a1)
{
  if (v2 != v3)
  {
  }
  _Unwind_Resume(a1);
}

void sub_1844E91A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E924C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E935C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E9484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844E9604(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844E9A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E9B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E9B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E9C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E9DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E9E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844E9F24(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1844EA010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EA0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EA344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EA420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EA4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EA59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EA620(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844EA6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EA750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EA8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::sIsShortHandleValid(_anonymous_namespace_ *this, NSNumber *a2)
{
  int v2 = this;
  dispatch_object_t v3 = v2;
  if (v2)
  {
    [(_anonymous_namespace_ *)v2 unsignedLongLongValue];
    BOOL v4 = (unint64_t)[(_anonymous_namespace_ *)v3 unsignedLongLongValue] >> 57 == 0;
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_1844EA964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EAA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EAB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EABA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EAC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EAD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EAEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EAF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EB07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EB12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EB1C4(_Unwind_Exception *a1)
{
  BOOL v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1844EB278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EB368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EB7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EB8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EBA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EBC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  if (v18 != v19)
  {
  }
  if (v15 != v16)
  {
  }
  _Unwind_Resume(a1);
}

void sub_1844EBDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EBED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EC010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EC14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EC630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1844EC830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ECB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  if (v25 != v24)
  {
  }
  if (a18 != v23)
  {
  }
  if (v19 != v20)
  {
  }
  _Unwind_Resume(a1);
}

void sub_1844ECCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ECE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ED000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844ED1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ED5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ED6F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ED7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844ED824(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844ED8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844ED990(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1844EDAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EDB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EDBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EDC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EDC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EDCFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EE154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EE22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EE388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EE5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  if (v17 != v18)
  {
  }
  if (v13 != v14)
  {
  }
  _Unwind_Resume(a1);
}

void sub_1844EE714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EE828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EE95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EEA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EF1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1844EF3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EF78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21)
{
  if (a13 != a16)
  {
  }
  if (a21 != a20)
  {
  }
  if (v26 != v27)
  {
  }
  if (v22 != v23)
  {
  }
  _Unwind_Resume(a1);
}

void sub_1844EF998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EFB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844EFCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844EFEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void *ctu::cf::CFSharedRef<__CFNumber const>::CFSharedRef<void const,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2 && (CFTypeID v4 = CFGetTypeID(*a2), v4 == CFNumberGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1844F0464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CTCellularDataPlanCopyAccountUrlString()
{
  return 0;
}

uint64_t CTCellularDataPlanSetIsEnabled(unsigned int a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionSetCellularDataIsEnabled(Default, a1);
}

uint64_t CTCellularDataPlanSetWebsheetVisibility(unsigned int a1)
{
  uint64_t Default = CTTelephonyCenterGetDefault();

  return _CTServerConnectionSetDataPlanWebsheetVisibility(Default, a1);
}

const char *CTNetworkSelectionStateAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return "CTNetworkSelectionStateUnknown";
  }
  else {
    return off_1E5263FA8[a1 - 1];
  }
}

const char *CTNetworkSelectionModeAsString(uint64_t a1)
{
  uint64_t v1 = "CTNetworkSelectionModeDisabled";
  if (a1 == 2) {
    uint64_t v1 = "CTNetworkSelectionModeManual";
  }
  if (a1 == 1) {
    return "CTNetworkSelectionModeAutomatic";
  }
  else {
    return v1;
  }
}

id CTNetworkSelectionModeToNetworkSelectionModeString(uint64_t a1)
{
  uint64_t v1 = (id *)kCTRegistrationNetworkSelectionModeAutomatic;
  int v2 = kCTRegistrationNetworkSelectionModeManual;
  if (a1 != 2) {
    int v2 = kCTRegistrationNetworkSelectionModeDisabled;
  }
  if (a1 != 1) {
    uint64_t v1 = (id *)v2;
  }
  return *v1;
}

const char *CTConnectionPairStateAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5264028[a1];
  }
}

const char *CTConnectionPairConnectionIDAsString(uint64_t a1)
{
  uint64_t v1 = "???";
  if (a1 == 1) {
    uint64_t v1 = "kCTConnectionPairConnectionIDTwo";
  }
  if (a1) {
    return v1;
  }
  else {
    return "kCTConnectionPairConnectionIDOne";
  }
}

void sub_1844F0D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1844F0EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  objc_destroyWeak(v14);

  objc_destroyWeak((id *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1844F1034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F112C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844F13C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1844F1484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F152C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F1654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F16D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CTConnectionPair;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

id **_ZNSt3__110unique_ptrIZZ32__CTConnectionPair_receiveData__EUb_E3__0NS_14default_deleteIS1_EEED1B8nn180100Ev(id **a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    objc_destroyWeak(v2);
    MEMORY[0x18531F680](v2, 0x10C0C40FA4D3208);
  }
  return a1;
}

id **_ZZN8dispatch5asyncIZZ32__CTConnectionPair_receiveData__EUb_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1)
{
  unsigned int v6 = (id *)a1;
  id WeakRetained = objc_loadWeakRetained((id *)a1);
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained((id *)WeakRetained + 3);
    [v4 receivedData:*(void *)(a1 + 8) fromConnectionId:*(void *)(a1 + 16)];

    if (v3[5])
    {
      if (v3[9] && v3[4] == 1) {
        [v3 receiveData:*(void *)(a1 + 16)];
      }
    }
  }

  return _ZNSt3__110unique_ptrIZZ32__CTConnectionPair_receiveData__EUb_E3__0NS_14default_deleteIS1_EEED1B8nn180100Ev(&v6);
}

void sub_1844F186C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  _ZNSt3__110unique_ptrIZZ32__CTConnectionPair_receiveData__EUb_E3__0NS_14default_deleteIS1_EEED1B8nn180100Ev((id **)va);
  _Unwind_Resume(a1);
}

void sub_1844F1970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844F1B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844F1CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1844F1DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844F1FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844F2240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844F2370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844F2580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844F2718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844F3784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F37FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<objc_object * const,anonymous namespace'::DelegateContext>::~pair(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 16));
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  return a1;
}

void sub_1844F397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844F3A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F3C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F3E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::sCTAssertionDestroy(id *this, const void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CTLogClient();
  id v4 = v3;
  if (this)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      CFIndex v12 = (_anonymous_namespace_ *)this;
      _os_log_impl(&dword_18444A000, v4, OS_LOG_TYPE_DEFAULT, "enter sCTAssertionDestroy for assertion %@", (uint8_t *)&v11, 0xCu);
    }
    id v5 = this[2];
    if (v5)
    {
      [v5 setAssertionForConnectionType:*((unsigned int *)this + 8) enable:0 completion:&__block_literal_global_958];
    }
    else
    {
      unsigned int v6 = CTLogClient();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    }
      }
    id WeakRetained = objc_loadWeakRetained(this + 3);
    uint64_t v8 = WeakRetained;
    if (WeakRetained)
    {
      [WeakRetained removeAssertionForInvalidationNotification:this];
    }
    else
    {
      uint64_t v9 = CTLogClient();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    }
      }
    id v10 = this[2];
    if (v10) {
      CFRelease(v10);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
  }
}

void sub_1844F4148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef anonymous namespace'::sCTAssertionCopyDescription(CFStringRef this, const void *a2)
{
  if (this)
  {
    CFStringRef v2 = this;
    CFAllocatorRef v3 = CFGetAllocator(this);
    return CFStringCreateWithFormat(v3, 0, @"<CTClientAssertion %p [%p]>", v2, v3);
  }
  return this;
}

void ___ZN12_GLOBAL__N_119sCTAssertionDestroyEPKv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    CFAllocatorRef v3 = CTLogClient();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN12_GLOBAL__N_119sCTAssertionDestroyEPKv_block_invoke_cold_1();
    }
  }
  else
  {
    id v4 = CTLogClient();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_18444A000, v4, OS_LOG_TYPE_DEFAULT, "sCTAssertionDestroy succeeded", v5, 2u);
    }
  }
}

void sub_1844F423C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__ENK3__4clEv_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (isFrameworkLoggingSupported())
  {
    id v4 = CTLogClient();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      ___ZZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__ENK3__4clEv_block_invoke_cold_1();
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

void sub_1844F42C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844F4364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientMux sink:handleNotification:]::$_2>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

void ___ZN8dispatch9sync_implIZ69__CoreTelephonyClientMux_removeAssertionForInvalidationNotification__E3__6EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__erase_unique<__CTAssertionType *>(**(void **)(a1 + 32) + 40, (unint64_t *)(*(void *)(a1 + 32) + 8));
  id v2 = CTLogClient();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (!v3) {
      return;
    }
    __int16 v6 = 0;
    id v4 = "removed assertion from InvalidationNotification list";
    uint64_t v5 = (uint8_t *)&v6;
  }
  else
  {
    if (!v3) {
      return;
    }
    *(_WORD *)buf = 0;
    id v4 = "assertion not found from InvalidationNotification list";
    uint64_t v5 = buf;
  }
  _os_log_impl(&dword_18444A000, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
}

uint64_t std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__erase_unique<__CTAssertionType *>(uint64_t a1, unint64_t *a2)
{
  id v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  id v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      int v7 = v2;
    }
    else {
      int v7 = v2 + 1;
    }
    if (v6) {
      id v4 = v2;
    }
    id v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer((uint64_t **)a1, v4);
  std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  id v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      id v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    id v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      id v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_release(v2);
  }
}

void ___ZN8dispatch9sync_implIZ90__CoreTelephonyClientMux_registerBlockForInvalidationNotification_callbackQueue_callback__E3__8EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  object[3] = *(dispatch_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)v1 + 40;
  unint64_t v3 = *(NSObject **)(v1 + 24);
  object[0] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  object[1] = (dispatch_object_t)_Block_copy(*(const void **)(v1 + 16));
  std::map<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>::insert_or_assign[abi:nn180100]<std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>(v2, (unint64_t *)(v1 + 8), (long long *)object);

  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (isFrameworkLoggingSupported())
  {
    id v4 = CTLogClient();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *(NSObject **)(v1 + 8);
      LODWORD(object[0]) = 138412290;
      *(dispatch_object_t *)((char *)object + 4) = v5;
      _os_log_impl(&dword_18444A000, v4, OS_LOG_TYPE_DEFAULT, "assertion %@ added to the invalidation notice list", (uint8_t *)object, 0xCu);
    }
  }
}

void sub_1844F4654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, void *a10)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

char *std::map<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>::insert_or_assign[abi:nn180100]<std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>(uint64_t a1, unint64_t *a2, long long *a3)
{
  unint64_t v3 = *(void **)(a1 + 8);
  if (!v3)
  {
    BOOL v5 = (void *)(a1 + 8);
    return std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__emplace_hint_unique_key_args<__CTAssertionType *,__CTAssertionType * const&,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>((uint64_t **)a1, v5, a2, a2, a3);
  }
  unint64_t v4 = *a2;
  BOOL v5 = (void *)(a1 + 8);
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      BOOL v5 = v3;
    }
    unint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == (void *)(a1 + 8) || v4 < v5[4]) {
    return std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__emplace_hint_unique_key_args<__CTAssertionType *,__CTAssertionType * const&,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>((uint64_t **)a1, v5, a2, a2, a3);
  }
  std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>::operator=[abi:nn180100]((uint64_t)(v5 + 5), (uint64_t *)a3);
  return (char *)v5;
}

uint64_t std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>::operator=[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  BOOL v5 = *(NSObject **)a1;
  *(void *)a1 = v4;
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = a2[1];
  a2[1] = 0;
  BOOL v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;

  return a1;
}

char *std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__emplace_hint_unique_key_args<__CTAssertionType *,__CTAssertionType * const&,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>(uint64_t **a1, void *a2, unint64_t *a3, void *a4, long long *a5)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v8 = (void **)std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__find_equal<objc_selector *>(a1, a2, &v16, &v15, a3);
  uint64_t v9 = (char *)*v8;
  if (!*v8)
  {
    id v10 = (uint64_t **)v8;
    uint64_t v14 = 0;
    uint64_t v9 = (char *)operator new(0x38uLL);
    v13[1] = a1 + 1;
    *((void *)v9 + 4) = *a4;
    long long v11 = *a5;
    *(void *)a5 = 0;
    *((void *)a5 + 1) = 0;
    *(_OWORD *)(v9 + 40) = v11;
    LOBYTE(v14) = 1;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v16, v10, (uint64_t *)v9);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>>>>::reset[abi:nn180100]((uint64_t)v13, 0);
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t OUTLINED_FUNCTION_4(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t ___ZN8dispatch9sync_implIU13block_pointerFU13block_pointerFvP6CTCallEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS7_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIU13block_pointerFP5NSSetvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIU13block_pointerFP8NSStringvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

void sub_1844F5E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F60F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F6364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F65E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F6804(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1844F69F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F6C58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1844F6ED4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1844F715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F73CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F7754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1844F78FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MMSConstrainedHeader::MMSConstrainedHeader(uint64_t a1, uint64_t a2)
{
  uint64_t result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(void *)uint64_t result = &unk_1ECFD36B0;
  *(void *)(result + 20) = 0;
  *(void *)(result + 36) = 0;
  *(void *)(result + 28) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t MMSConstrainedHeader::parseValue(MMSConstrainedHeader *this, MMSContentType *a2)
{
  int v4 = MMSContentType::encodedContentTypeForName(a2, (const char *)a2);
  if (v4)
  {
    *((_DWORD *)this + 5) = v4;
  }
  else if (a2)
  {
    std::string::__assign_external((std::string *)this + 1, (const std::string::value_type *)a2);
  }
  return 1;
}

uint64_t MMSConstrainedHeader::valueAsString(uint64_t a1, std::string *this)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x80) != 0)
  {
    return MMSContentType::nameForEncodedContentType((_anonymous_namespace_ *)v2, this);
  }
  else
  {
    std::string::operator=(this, (const std::string *)(a1 + 24));
    return 1;
  }
}

void MMSConstrainedHeader::createInstance(MMSConstrainedHeader *this)
{
}

void MMSConstrainedHeader::copy(MMSConstrainedHeader *this)
{
}

uint64_t MMSConstrainedHeader::decodeValue(MMSConstrainedHeader *this, MMSPduDecoder *a2)
{
  unsigned __int8 v6 = 0;
  BOOL v4 = MMSPduDecoder::peekByte(a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((char)v6 < 0) {
      return MMSPduDecoder::decodeWspShortInteger(a2, (unsigned int *)this + 5);
    }
    else {
      return MMSPduDecoder::decodeWspExtensionMedia((uint64_t)a2, (std::string *)this + 1);
    }
  }
  return result;
}

uint64_t MMSConstrainedHeader::encodeValue(MMSConstrainedHeader *this, MMSPduEncoder *a2)
{
  int v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x80) != 0)
  {
    MMSPduEncoder::encodeWspShortInteger(a2, v3);
  }
  else
  {
    BOOL v4 = (char *)this + 24;
    if (*((char *)this + 47) < 0) {
      BOOL v4 = *(const char **)v4;
    }
    MMSPduEncoder::encodeHttpToken(a2, v4);
  }
  return 1;
}

const char *MMSConstrainedHeader::headerTypeName(MMSConstrainedHeader *this)
{
  return "constrained";
}

void MMSConstrainedHeader::~MMSConstrainedHeader(void **this)
{
  *this = &unk_1ECFD36B0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD36B0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);

  JUMPOUT(0x18531F680);
}

void sub_1844FA480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1844FA678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844FA8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1844FAAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1844FABEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844FAD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }

  _Unwind_Resume(a1);
}

void sub_1844FAE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClient dispatchBlockToClientAsync:]::$_0>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

uint64_t MMSPduDecoder::MMSPduDecoder(ctu::OsLogLogger *a1, uint64_t a2, int a3, int a4)
{
  uint64_t result = ctu::OsLogLogger::OsLogLogger(a1, "com.apple.telephony", "msg.mms.pdu");
  *(_DWORD *)(result + 24) = 106;
  *(_DWORD *)(result + 28) = 106;
  *(_WORD *)(result + 32) = 1;
  *(unsigned char *)(result + 34) = 1;
  *(_DWORD *)(result + 36) = a4;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void MMSPduDecoder::MMSPduDecoder(MMSPduDecoder *this, MMSPduDecoder *a2, unint64_t a3)
{
  uint64_t v5 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony", "msg.mms.pdu");
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = *((void *)a2 + 3);
  *(unsigned char *)(v5 + 32) = *((unsigned char *)a2 + 32);
  *(unsigned char *)(v5 + 33) = *((unsigned char *)a2 + 33);
  *(unsigned char *)(v5 + 34) = *((unsigned char *)a2 + 34);
  *(_DWORD *)(v5 + 36) = *((_DWORD *)a2 + 9);
  uint64_t v6 = *((unsigned int *)a2 + 5);
  unint64_t v7 = (*((_DWORD *)a2 + 4) - v6);
  if (v7 >= a3) {
    LODWORD(v7) = a3;
  }
  *(void *)(v5 + 8) = *((void *)a2 + 1) + v6;
  *(_DWORD *)(v5 + 16) = v7;
  *(_DWORD *)(v5 + 20) = 0;
}

BOOL MMSPduDecoder::peekByte(MMSPduDecoder *this, unsigned __int8 *a2)
{
  unsigned int v3 = *((_DWORD *)this + 4);
  uint64_t v2 = *((unsigned int *)this + 5);
  if (v2 < v3) {
    *a2 = *(unsigned char *)(*((void *)this + 1) + v2);
  }
  return v2 < v3;
}

BOOL MMSPduDecoder::decodeByte(MMSPduDecoder *this, unsigned __int8 *a2)
{
  unsigned int v3 = *((_DWORD *)this + 4);
  uint64_t v2 = *((unsigned int *)this + 5);
  if (v2 < v3)
  {
    uint64_t v4 = *((void *)this + 1);
    *((_DWORD *)this + 5) = v2 + 1;
    *a2 = *(unsigned char *)(v4 + v2);
  }
  return v2 < v3;
}

uint64_t MMSPduDecoder::skipByte(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 20);
  if (v1 < *(_DWORD *)(this + 16)) {
    *(_DWORD *)(this + 20) = v1 + 1;
  }
  return this;
}

uint64_t MMSPduDecoder::decodeHttpToken(uint64_t a1, std::string *a2)
{
  uint64_t result = MMSPduDecoder::decodeString(a1, a2, 0xFFFFFFFF);
  if (result)
  {
    if (*(unsigned char *)(a1 + 33)
      && ((int v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]), v5 >= 0)
        ? (unint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]))
        : (unint64_t size = a2->__r_.__value_.__l.__size_),
          size))
    {
      uint64_t v7 = 0;
      if (v5 >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      unsigned int v9 = 1;
      while (1)
      {
        int v10 = v8->__r_.__value_.__s.__data_[v7];
        if (v10 < 0 || memchr("()<>@,;:\\\"/[]?={} \t", v10, 0x14uLL)) {
          break;
        }
        uint64_t v7 = v9;
        if (size <= v9++) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t MMSPduDecoder::decodeString(uint64_t a1, std::string *this, unsigned int a3)
{
  if (a3 == -1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 20);
    uint64_t v6 = (*(_DWORD *)(a1 + 16) - v5);
    if (v6)
    {
      uint64_t v7 = 0;
      while (*(unsigned char *)(*(void *)(a1 + 8) + v5 + v7))
      {
        if (v6 == ++v7) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if (v7 == v6 || *(unsigned char *)(*(void *)(a1 + 8) + v5 + v7)) {
      goto LABEL_16;
    }
    unsigned int v4 = v7 + 1;
  }
  else
  {
    unsigned int v4 = a3;
    if (!a3)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        *this->__r_.__value_.__l.__data_ = 0;
        this->__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        this->__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
      }
      return 1;
    }
    LODWORD(v5) = *(_DWORD *)(a1 + 20);
    LODWORD(v6) = *(_DWORD *)(a1 + 16) - v5;
  }
  if (v4 <= v6)
  {
    std::string::__assign_external(this, (const std::string::value_type *)(*(void *)(a1 + 8) + v5), v4 - 1);
    *(_DWORD *)(a1 + 20) += v4;
    return 1;
  }
LABEL_16:
  uint64_t result = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  return result;
}

uint64_t MMSPduDecoder::decodeWspTextString(uint64_t a1, std::string *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  if (v2 >= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(char *)(*(void *)(a1 + 8) + v2);
  if (*(unsigned char *)(a1 + 33))
  {
    if (v3 < 0) {
      return 0;
    }
  }
  if (v3 == 127) {
    *(_DWORD *)(a1 + 20) = v2 + 1;
  }
  return MMSPduDecoder::decodeString(a1, a2, 0xFFFFFFFF);
}

uint64_t MMSPduDecoder::decodeWspValueLength(MMSPduDecoder *this, unsigned int *a2)
{
  uint64_t v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  *((_DWORD *)this + 5) = v2 + 1;
  unsigned int v4 = *(unsigned __int8 *)(v3 + v2);
  if (v4 > 0x1F) {
    return 0;
  }
  if (v4 == 31) {
    return MMSPduDecoder::decodeWspUintvarInteger(this, a2);
  }
  *a2 = v4;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspUintvarInteger(MMSPduDecoder *this, unsigned int *a2)
{
  unsigned int v2 = 0;
  *a2 = 0;
  int v3 = 5;
  while (1)
  {
    unsigned int v5 = *((_DWORD *)this + 4);
    uint64_t v4 = *((unsigned int *)this + 5);
    if (v5 == v4) {
      return 0;
    }
    if (v4 >= v5) {
      break;
    }
    uint64_t v6 = *((void *)this + 1);
    *((_DWORD *)this + 5) = v4 + 1;
    char v7 = *(unsigned char *)(v6 + v4);
    unsigned int v2 = v7 & 0x7F | (*a2 << 7);
    *a2 = v2;
    if ((v7 & 0x80) == 0) {
      return 1;
    }
    if (!--v3) {
      return 0;
    }
  }
  *a2 = v2 << 7;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspLongInteger(MMSPduDecoder *this, unsigned int *a2)
{
  unsigned int v3 = *((_DWORD *)this + 4);
  uint64_t v2 = *((unsigned int *)this + 5);
  if (v2 >= v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  int v5 = v2 + 1;
  *((_DWORD *)this + 5) = v2 + 1;
  unsigned int v6 = *(unsigned __int8 *)(v4 + v2);
  if (v6 > 0x1E || v3 - v5 < v6) {
    return 0;
  }
  *a2 = 0;
  if (v6)
  {
    int v8 = 0;
    int v9 = 0;
    do
    {
      uint64_t v10 = *((unsigned int *)this + 5);
      if (v10 < *((_DWORD *)this + 4))
      {
        *((_DWORD *)this + 5) = v10 + 1;
        int v9 = *(unsigned __int8 *)(v4 + v10);
        int v8 = *a2;
      }
      int v8 = v9 | (v8 << 8);
      *a2 = v8;
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t MMSPduDecoder::decodeWspShortInteger(MMSPduDecoder *this, unsigned int *a2)
{
  uint64_t v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  *((_DWORD *)this + 5) = v2 + 1;
  int v4 = *(char *)(v3 + v2);
  if ((v4 & 0x80000000) == 0) {
    return 0;
  }
  *a2 = v4 & 0x7F;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspIntegerValue(MMSPduDecoder *this, unsigned int *a2)
{
  uint64_t v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if ((*(char *)(v3 + v2) & 0x80000000) == 0) {
    return MMSPduDecoder::decodeWspLongInteger(this, a2);
  }
  *((_DWORD *)this + 5) = v2 + 1;
  int v5 = *(char *)(v3 + v2);
  if ((v5 & 0x80000000) == 0) {
    return 0;
  }
  *a2 = v5 & 0x7F;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspExtensionMedia(uint64_t a1, std::string *a2)
{
  return MMSPduDecoder::decodeString(a1, a2, 0xFFFFFFFF);
}

BOOL MMSPduDecoder::convertStringToTargetCharsetInPlace(uint64_t a1, MMSCharsetHeader *a2, MMSCharsetHeader *a3)
{
  return MMSPduDecoder::convertStringToTargetCharset(a1, a1, a2, a3);
}

BOOL MMSPduDecoder::convertStringToTargetCharset(uint64_t a1, int a2, MMSCharsetHeader *a3, MMSCharsetHeader *a4)
{
  uint64_t v4 = 0;
  if (a3 != a4 && a4)
  {
    if (a4 != 106 || a3 != 3) {
      return MMSStringHeader::convertString(a1, a2, a3, a4);
    }
    return 1;
  }
  return v4;
}

uint64_t MMSPduDecoder::decodeEncodedString(MMSPduDecoder *this, std::string *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((unsigned int *)this + 5);
  if (v4 >= *((_DWORD *)this + 4)) {
    return 0;
  }
  if (*(unsigned char *)(*((void *)this + 1) + v4) == 127)
  {
    *((_DWORD *)this + 5) = v4 + 1;
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
    }
    uint64_t v13 = MMSPduDecoder::decodeString((uint64_t)this, a2, 0xFFFFFFFF);
    uint64_t v17 = 4;
    *a3 = 4;
    if (a4)
    {
      *a4 = 4;
      uint64_t v17 = *a3;
    }
    uint64_t v14 = (unsigned int *)((char *)this + 24);
    if (MMSPduDecoder::convertStringToTargetCharset((uint64_t)a2, (int)a2, (MMSCharsetHeader *)v17, (MMSCharsetHeader *)*((unsigned int *)this + 6)))
    {
      goto LABEL_38;
    }
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      MMSPduDecoder::decodeEncodedString(a3, v14);
    }
  }
  else
  {
    if (!*(unsigned char *)(*((void *)this + 1) + v4))
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        *a2->__r_.__value_.__l.__data_ = 0;
        a2->__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        a2->__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
      }
      int v15 = *((_DWORD *)this + 6);
      if (!v15) {
        int v15 = 106;
      }
      *a3 = v15;
      if (a4) {
        *a4 = v15;
      }
      unsigned int v16 = *((_DWORD *)this + 5);
      if (v16 < *((_DWORD *)this + 4)) {
        *((_DWORD *)this + 5) = v16 + 1;
      }
      return 1;
    }
    unsigned int v24 = 0;
    if (MMSPduDecoder::decodeWspValueLength(this, &v24))
    {
      unsigned int v9 = v24;
      if (v24 >= 2)
      {
        unsigned int v10 = *((_DWORD *)this + 4) - *((_DWORD *)this + 5);
        if (v10 >= v24)
        {
          if (MMSPduDecoder::decodeWspIntegerValue(this, a3))
          {
            if (a4) {
              *a4 = *a3;
            }
            unsigned int v12 = *((_DWORD *)this + 4);
            uint64_t v11 = *((unsigned int *)this + 5);
            if (v11 < v12 && *(unsigned char *)(*((void *)this + 1) + v11) == 127)
            {
              LODWORD(v11) = v11 + 1;
              *((_DWORD *)this + 5) = v11;
            }
            uint64_t v13 = MMSPduDecoder::decodeString((uint64_t)this, a2, v9 + v12 - (v10 + v11));
            uint64_t v14 = (unsigned int *)((char *)this + 24);
            if (!MMSPduDecoder::convertStringToTargetCharset((uint64_t)a2, (int)a2, (MMSCharsetHeader *)*a3, (MMSCharsetHeader *)*((unsigned int *)this + 6)))
            {
              if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
                MMSPduDecoder::decodeEncodedString(a3, v14);
              }
              return v13;
            }
LABEL_38:
            *a3 = *v14;
            return v13;
          }
        }
      }
      return 0;
    }
    *((_DWORD *)this + 5) = v4;
    *a3 = 106;
    if (a4) {
      *a4 = 106;
    }
    uint64_t v13 = MMSPduDecoder::decodeWspTextString((uint64_t)this, a2);
    if (v13
      && MMSPduDecoder::convertStringToTargetCharset((uint64_t)a2, (int)a2, (MMSCharsetHeader *)*a3, (MMSCharsetHeader *)*((unsigned int *)this + 6)))
    {
      *a3 = *((_DWORD *)this + 6);
      return 1;
    }
    uint64_t v18 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      int64_t v20 = MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*a3);
      unsigned int v21 = *a3;
      uint64_t v22 = MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*((unsigned int *)this + 6));
      int v23 = *((_DWORD *)this + 6);
      *(_DWORD *)buf = 136316162;
      char v26 = v20;
      __int16 v27 = 1024;
      unsigned int v28 = v21;
      __int16 v29 = 2080;
      int v30 = v22;
      __int16 v31 = 1024;
      int v32 = v23;
      __int16 v33 = 1024;
      int v34 = v13;
      _os_log_error_impl(&dword_18444A000, v18, OS_LOG_TYPE_ERROR, "unable to convert from charset %s (%d) to %s (%d) decodeWspSuccess = (%d)", buf, 0x28u);
    }
  }
  return v13;
}

uint64_t MMSPduDecoder::skip(uint64_t this, unsigned int a2)
{
  int v2 = *(_DWORD *)(this + 20);
  unsigned int v3 = *(_DWORD *)(this + 16) - v2;
  if (v3 >= a2) {
    unsigned int v3 = a2;
  }
  *(_DWORD *)(this + 20) = v3 + v2;
  return this;
}

std::string *MMSPduDecoder::printableBytes(std::string *result, unsigned int a2, unsigned int a3, std::string *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = a3 - a2;
  if (a3 > a2)
  {
    unsigned int v6 = result;
    __int16 v11 = 0;
    *(void *)__str = 0;
    uint64_t v7 = a3 - 1;
    uint64_t v8 = a2;
    do
    {
      snprintf(__str, 0xAuLL, "%.2hhx", *(unsigned __int8 *)(v6->__r_.__value_.__l.__size_ + v8));
      size_t v9 = strlen(__str);
      uint64_t result = std::string::append(a4, __str, v9);
      if (v7 != v8) {
        uint64_t result = std::string::append(a4, " ", 1uLL);
      }
      ++v8;
      --v4;
    }
    while (v4);
  }
  return result;
}

void MMSPduDecoder::decodeSimpleHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memset(&v2, 0, sizeof(v2));
  operator new();
}

uint64_t MMSPduDecoder::decodeEncodedHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2)
{
  uint64_t v2 = 0;
  *(void *)&v26[5] = *MEMORY[0x1E4F143B8];
  memset(&v22, 0, sizeof(v22));
  uint64_t v3 = *((unsigned int *)this + 5);
  if (v3 < *((_DWORD *)this + 4))
  {
    uint64_t v5 = *((void *)this + 1);
    *((_DWORD *)this + 5) = v3 + 1;
    unsigned int v6 = *(unsigned char *)(v5 + v3) & 0x7F;
    uint64_t v7 = MMSHeaderEncodingMap::encodingForNumber(a2, v6);
    if (v7)
    {
      uint64_t v8 = v7;
      MMSPduDecoder::printableBytes((std::string *)this, v3, *((_DWORD *)this + 5), &v22);
      unsigned int v9 = *((_DWORD *)this + 5);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v8 + 32) + 96))(*(void *)(v8 + 32));
      uint64_t v2 = v10;
      if (v10)
      {
        int v11 = *((_DWORD *)this + 5);
        if (((*(uint64_t (**)(uint64_t, MMSPduDecoder *))(*(void *)v10 + 24))(v10, this) & 1) == 0)
        {
          if ((*((_DWORD *)this + 4) - *((_DWORD *)this + 5)) >= 0x1E) {
            int v12 = 30;
          }
          else {
            int v12 = *((_DWORD *)this + 4) - *((_DWORD *)this + 5);
          }
          std::string::append(&v22, " ", 1uLL);
          MMSPduDecoder::printableBytes((std::string *)this, *((_DWORD *)this + 5) - 1, *((_DWORD *)this + 5) + v12, &v22);
          uint64_t v13 = *(NSObject **)this;
          if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          {
            uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v21 = &v22;
            }
            else {
              unsigned int v21 = (std::string *)v22.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)unsigned int v24 = v20;
            *(_WORD *)&v24[8] = 1024;
            *(_DWORD *)int64_t v25 = v12;
            *(_WORD *)&v25[4] = 2080;
            *(void *)char v26 = v21;
            _os_log_error_impl(&dword_18444A000, v13, OS_LOG_TYPE_ERROR, "unable to decode encoded header '%s': next %d bytes: %s", buf, 0x1Cu);
          }
          (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
          uint64_t v2 = 0;
          *((_DWORD *)this + 5) = v11;
        }
        std::string::append(&v22, ": ", 2uLL);
        MMSPduDecoder::printableBytes((std::string *)this, v9, *((_DWORD *)this + 5), &v22);
      }
    }
    else
    {
      int v14 = *((_DWORD *)this + 5);
      if ((*((_DWORD *)this + 4) - v14) >= 0x1E) {
        int v15 = 30;
      }
      else {
        int v15 = *((_DWORD *)this + 4) - v14;
      }
      MMSPduDecoder::printableBytes((std::string *)this, v14 - 1, v15 + v14, &v22);
      unsigned int v16 = *(NSObject **)this;
      if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      {
        int v18 = *((_DWORD *)this + 5);
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFRange v19 = &v22;
        }
        else {
          CFRange v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)unsigned int v24 = v6;
        *(_WORD *)&v24[4] = 1024;
        *(_DWORD *)&v24[6] = v18;
        *(_WORD *)int64_t v25 = 1024;
        *(_DWORD *)&v25[2] = v15;
        LOWORD(v26[0]) = 2080;
        *(void *)((char *)v26 + 2) = v19;
        _os_log_error_impl(&dword_18444A000, v16, OS_LOG_TYPE_ERROR, "unknown header encoding 0x%.2x at byte %u: next %d bytes %s", buf, 0x1Eu);
      }
      uint64_t v2 = 0;
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v2;
}

uint64_t MMSPduDecoder::decodeHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2)
{
  uint64_t v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4)) {
    return 0;
  }
  if ((*(char *)(*((void *)this + 1) + v2) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 34)) {
      MMSPduDecoder::decodeSimpleHeader(this, a2);
    }
    return 0;
  }
  return MMSPduDecoder::decodeEncodedHeader(this, a2);
}

uint64_t MMSPduDecoder::decodeSpecificHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2, const char *a3, int a4)
{
  uint64_t v4 = *((unsigned int *)this + 5);
  if (v4 >= *((_DWORD *)this + 4)) {
    return 0;
  }
  uint64_t v9 = MMSHeaderEncodingMap::encodingForNumber(a2, *(unsigned char *)(*((void *)this + 1) + v4) & 0x7F);
  if (!v9 || std::string::compare((const std::string *)(v9 + 8), a3))
  {
    if (a4)
    {
      uint64_t v10 = *(NSObject **)this;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        MMSPduDecoder::decodeSpecificHeader((uint64_t)a3, v10, v11);
      }
    }
    return 0;
  }

  return MMSPduDecoder::decodeHeader(this, a2);
}

uint64_t MMSPduDecoder::decodeMessageHeaders(MMSPduDecoder *this, MMSMessage *a2)
{
  {
    if (MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[0])
    {
LABEL_3:
      uint64_t v4 = 0;
      unsigned int v5 = 1;
      unsigned int v6 = MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders;
      do
      {
        uint64_t v7 = (const MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSMessage *))(*(void *)a2 + 16))(a2);
        uint64_t v8 = &MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[2 * v4];
        int v10 = *((unsigned __int8 *)v8 + 8);
        uint64_t v9 = v8 + 1;
        uint64_t v11 = (MMSHeader *)MMSPduDecoder::decodeSpecificHeader(this, v7, (const char *)*v6, v10);
        if (v11)
        {
          MMSHeaderContainer::addHeader(a2, v11, 0);
        }
        else if (*v9)
        {
          return 0;
        }
        uint64_t v4 = v5;
        unsigned int v6 = &MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[2 * v5++];
      }
      while (*v6);
    }
  }
  else
  {
    MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[0] = (uint64_t)"X-Mms-Message-Type";
    byte_1E8F834F8 = 1;
    qword_1E8F83500 = (uint64_t)"X-Mms-Transaction-ID";
    byte_1E8F83508 = 0;
    qword_1E8F83510 = (uint64_t)"X-Mms-MMS-Version";
    byte_1E8F83518 = 1;
    qword_1E8F83520 = 0;
    byte_1E8F83528 = 0;
    if ("X-Mms-Message-Type") {
      goto LABEL_3;
    }
  }

  return MMSPduDecoder::decodeHeaders(this, a2);
}

uint64_t MMSPduDecoder::decodeHeaders(MMSPduDecoder *this, MMSHeaderContainer *a2)
{
  uint64_t v4 = 1;
  while (1)
  {
    if (*((_DWORD *)this + 4) == *((_DWORD *)this + 5)) {
      return 1;
    }
    unsigned int v5 = (const MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSHeaderContainer *))(*(void *)a2 + 16))(a2);
    unsigned int v6 = (MMSHeader *)MMSPduDecoder::decodeHeader(this, v5);
    if (!v6) {
      break;
    }
    uint64_t v7 = v6;
    MMSHeaderContainer::addHeader(a2, v6, 1);
    uint64_t v8 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(void *)v7 + 64))(v7);
    if (!strcmp(v8, "Content-Type")) {
      return v4;
    }
  }
  return 0;
}

uint64_t MMSPduDecoder::convertMimePartBody(MMSPduDecoder *this, const std::string::value_type **a2)
{
  uint64_t v4 = (MMSParameterContainer *)(MMSHeaderContainer::contentType((MMSHeaderContainer *)a2) + 8);
  unsigned int v5 = (MMSCharsetHeader *)MMSParameterContainer::charset(v4);
  if (!v5)
  {
    unsigned int v5 = (MMSCharsetHeader *)*((unsigned int *)this + 7);
    MMSParameterContainer::setCharset(v4, *((_DWORD *)this + 7));
  }
  unsigned int v6 = (int *)((char *)this + 24);
  if (v5 == *((_DWORD *)this + 6)) {
    return 0;
  }
  memset(&v12, 0, sizeof(v12));
  std::string::__assign_external(&v12, a2[9], *((unsigned int *)a2 + 24));
  if (MMSPduDecoder::convertStringToTargetCharset((uint64_t)&v12, (int)&v12, v5, (MMSCharsetHeader *)*v6)
    || MMSStringHeader::convertString((uint64_t)&v12, (int)&v12, (MMSCharsetHeader *)*v6, (MMSCharsetHeader *)*v6)|| MMSStringHeader::convertString((uint64_t)&v12, (int)&v12, (MMSCharsetHeader *)3, (MMSCharsetHeader *)*v6))
  {
    unsigned int v8 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v12;
    }
    else {
      uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v8 = v12.__r_.__value_.__r.__words[1];
    }
    MMSMimePart::setBody((std::vector<char> *)a2, (char *)v9, v8);
    MMSParameterContainer::setCharset(v4, *v6);
    uint64_t v10 = MMSHeaderContainer::headerWithName((MMSHeaderContainer *)a2, "Content-Disposition");
    if (v10) {
      MMSParameterContainer::setCharset((MMSParameterContainer *)(v10 + 32), *v6);
    }
    uint64_t v7 = 1;
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      MMSPduDecoder::convertMimePartBody(v5, (unsigned int *)this + 6);
    }
    uint64_t v7 = 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v7;
}

MMSHeaderContainer *MMSPduDecoder::decodeMultipartAlternativePart(os_log_t *this)
{
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (MMSPduDecoder::decodeMultipartBody(this, &__p))
  {
    uint64_t v2 = (MMSHeaderContainer **)__p;
    if (v9 != __p)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      unsigned int v5 = 1;
      while (1)
      {
        if (v4)
        {
          if ((int)compareParts(v4, v2[v3]) < 1)
          {
            uint64_t v2 = (MMSHeaderContainer **)__p;
            uint64_t v6 = *((void *)__p + v3);
            if (v6)
            {
              (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
              uint64_t v2 = (MMSHeaderContainer **)__p;
            }
            goto LABEL_8;
          }
          (*(void (**)(MMSHeaderContainer *))(*(void *)v4 + 8))(v4);
          uint64_t v2 = (MMSHeaderContainer **)__p;
        }
        uint64_t v4 = v2[v3];
LABEL_8:
        unint64_t v3 = v5++;
        if (v3 >= (v9 - (unsigned char *)v2) >> 3) {
          goto LABEL_15;
        }
      }
    }
  }
  if (os_log_type_enabled(*this, OS_LOG_TYPE_ERROR)) {
    MMSPduDecoder::decodeMultipartAlternativePart();
  }
  uint64_t v4 = 0;
LABEL_15:
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return v4;
}

BOOL MMSPduDecoder::decodeMultipartBody(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unsigned int v43 = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (MMSPduDecoder::decodeWspUintvarInteger((MMSPduDecoder *)a1, &v43))
  {
    memset(&__p, 0, sizeof(__p));
    MMSPduDecoder::printableBytes((std::string *)a1, v4, *(_DWORD *)(a1 + 20), &__p);
    unsigned int v5 = v43;
    if (v43)
    {
      uint64_t v6 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
      if (!v6)
      {
        BOOL v21 = 0;
LABEL_51:
        int v38 = *(void **)a2;
        uint64_t v39 = *(void **)(a2 + 8);
        if (*(void **)a2 != v39)
        {
          do
          {
            if (*v38) {
              (*(void (**)(void))(*(void *)*v38 + 8))(*v38);
            }
            ++v38;
          }
          while (v38 != v39);
          int v38 = *(void **)a2;
        }
        *(void *)(a2 + 8) = v38;
        goto LABEL_57;
      }
      uint64_t v7 = v6;
      unsigned int v8 = 0;
      while (1)
      {
        uint64_t v10 = *(uint64_t **)(a2 + 8);
        unint64_t v9 = *(void *)(a2 + 16);
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = ((uint64_t)v10 - *(void *)a2) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
LABEL_63:
          }
            abort();
          uint64_t v13 = v9 - *(void *)a2;
          uint64_t v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
            uint64_t v14 = v12 + 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unsigned int v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(a2 + 16, v15);
          }
          else {
            unsigned int v16 = 0;
          }
          uint64_t v17 = (uint64_t *)&v16[8 * v12];
          uint64_t *v17 = v7;
          uint64_t v11 = v17 + 1;
          CFRange v19 = *(void **)a2;
          int v18 = *(void **)(a2 + 8);
          if (v18 != *(void **)a2)
          {
            do
            {
              uint64_t v20 = *--v18;
              *--uint64_t v17 = v20;
            }
            while (v18 != v19);
            int v18 = *(void **)a2;
          }
          *(void *)a2 = v17;
          *(void *)(a2 + 8) = v11;
          *(void *)(a2 + 16) = &v16[8 * v15];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          uint64_t *v10 = v7;
          uint64_t v11 = v10 + 1;
        }
        *(void *)(a2 + 8) = v11;
        if (++v8 == v5) {
          break;
        }
        uint64_t v7 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
        if (!v7)
        {
          BOOL v21 = v8 >= v5;
          goto LABEL_51;
        }
      }
    }
    int v22 = *(_DWORD *)(a1 + 20);
    if (*(_DWORD *)(a1 + 16) != v22)
    {
      uint64_t v23 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
      if (v23)
      {
        uint64_t v24 = v23;
        int v25 = 0;
        while (1)
        {
          __int16 v27 = *(uint64_t **)(a2 + 8);
          unint64_t v26 = *(void *)(a2 + 16);
          if ((unint64_t)v27 >= v26)
          {
            uint64_t v29 = ((uint64_t)v27 - *(void *)a2) >> 3;
            if ((unint64_t)(v29 + 1) >> 61) {
              goto LABEL_63;
            }
            uint64_t v30 = v26 - *(void *)a2;
            uint64_t v31 = v30 >> 2;
            if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
              uint64_t v31 = v29 + 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              __int16 v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(a2 + 16, v32);
            }
            else {
              __int16 v33 = 0;
            }
            int v34 = (uint64_t *)&v33[8 * v29];
            *int v34 = v24;
            unsigned int v28 = v34 + 1;
            BOOL v36 = *(void **)a2;
            uint64_t v35 = *(void **)(a2 + 8);
            if (v35 != *(void **)a2)
            {
              do
              {
                uint64_t v37 = *--v35;
                *--int v34 = v37;
              }
              while (v35 != v36);
              uint64_t v35 = *(void **)a2;
            }
            *(void *)a2 = v34;
            *(void *)(a2 + 8) = v28;
            *(void *)(a2 + 16) = &v33[8 * v32];
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            uint64_t *v27 = v24;
            unsigned int v28 = v27 + 1;
          }
          ++v25;
          *(void *)(a2 + 8) = v28;
          int v22 = *(_DWORD *)(a1 + 20);
          if (*(_DWORD *)(a1 + 16) == v22) {
            break;
          }
          uint64_t v24 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
          if (!v24) {
            goto LABEL_48;
          }
        }
        if (v25)
        {
          CFArrayRef v41 = *(NSObject **)a1;
          if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            int v45 = v25 + v5;
            __int16 v46 = 1024;
            unsigned int v47 = v5;
            _os_log_impl(&dword_18444A000, v41, OS_LOG_TYPE_DEFAULT, "#I found %u actual entries with nEntries = %u", buf, 0xEu);
          }
        }
      }
      else
      {
LABEL_48:
        *(_DWORD *)(a1 + 20) = v22;
      }
    }
    BOOL v21 = 1;
LABEL_57:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v21;
  }
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
    MMSPduDecoder::decodeMultipartBody();
  }
  return 0;
}

uint64_t compareParts(MMSHeaderContainer *a1, MMSHeaderContainer *a2)
{
  unint64_t v3 = (MMSContentType *)MMSHeaderContainer::contentType(a1);
  if (v3) {
    int v4 = !MMSContentType::compare(v3, "text", "plain");
  }
  else {
    int v4 = 100;
  }
  unsigned int v5 = (MMSContentType *)MMSHeaderContainer::contentType(a2);
  if (v5) {
    int v6 = MMSContentType::compare(v5, "text", "plain") - 1;
  }
  else {
    int v6 = -100;
  }
  return (v6 + v4);
}

uint64_t MMSPduDecoder::decodeMimePart(MMSPduDecoder *this)
{
  unsigned int v2 = *((_DWORD *)this + 5);
  if (*((_DWORD *)this + 4) != v2)
  {
    unsigned int v16 = 0;
    if (MMSPduDecoder::decodeWspUintvarInteger(this, &v16))
    {
      memset(&v15, 0, sizeof(v15));
      MMSPduDecoder::printableBytes((std::string *)this, v2, *((_DWORD *)this + 5), &v15);
      unsigned int v14 = 0;
      unsigned int v3 = *((_DWORD *)this + 5);
      if (*((_DWORD *)this + 4) == v3 || (MMSPduDecoder::decodeWspUintvarInteger(this, &v14) & 1) == 0)
      {
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
          MMSPduDecoder::decodeMimePart();
        }
        goto LABEL_12;
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        *v15.__r_.__value_.__l.__data_ = 0;
        v15.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v15.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 0;
      }
      unsigned int v5 = MMSPduDecoder::printableBytes((std::string *)this, v3, *((_DWORD *)this + 5), &v15);
      int v6 = *((_DWORD *)this + 5);
      if (*((_DWORD *)this + 4) == v6)
      {
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
          MMSPduDecoder::decodeMimePart();
        }
      }
      else
      {
        uint64_t v7 = MMSHeaderContainer::contentTypeEncoding((MMSHeaderContainer *)v5);
        uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v7 + 32) + 96))(*(void *)(v7 + 32));
        if ((*(uint64_t (**)(uint64_t, MMSPduDecoder *))(*(void *)v8 + 24))(v8, this))
        {
          if (v6 - *((_DWORD *)this + 5) + v16 <= *((_DWORD *)this + 4) - *((_DWORD *)this + 5)) {
            operator new();
          }
          if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
            MMSPduDecoder::decodeMimePart();
          }
          std::string::basic_string[abi:nn180100]<0>(v10, "");
          MMSPduDecoder::dump((uint64_t)this, "bad_part_headersfLen", (uint64_t)v10);
          if ((v11 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          unint64_t v9 = (void *)v10[0];
        }
        else
        {
          if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
            MMSPduDecoder::decodeMimePart();
          }
          std::string::basic_string[abi:nn180100]<0>(__p, "");
          MMSPduDecoder::dump((uint64_t)this, "bad_part_content_type", (uint64_t)__p);
          if ((v13 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          unint64_t v9 = __p[0];
        }
        operator delete(v9);
      }
LABEL_12:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      return 0;
    }
  }
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
    MMSPduDecoder::decodeMimePart();
  }
  return 0;
}

void MMSPduDecoder::dump(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4 = *(const void **)(a1 + 8);
  size_t v5 = *(unsigned int *)(a1 + 16);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  MMSPduDecoder::dumpMMSData(a2, v4, v5, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

BOOL MMSPduDecoder::decodeBody(MMSPduDecoder *this, MMSMessage *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 4) == *((_DWORD *)this + 5)) {
    return 1;
  }
  uint64_t v5 = MMSHeaderContainer::headerWithName(a2, "Content-Type");
  if (v5)
  {
    int v6 = (MMSContentType **)v5;
    if (!MMSContentType::isMultipart(*(MMSContentType **)(v5 + 24)))
    {
      std::string __p = 0;
      CFRange v19 = 0;
      uint64_t v20 = 0;
      (*((void (**)(MMSContentType **, void **))*v6 + 9))(v6, &__p);
      char v13 = *(NSObject **)this;
      if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
      {
        if (v20 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = p_p;
        _os_log_impl(&dword_18444A000, v13, OS_LOG_TYPE_DEFAULT, "#I contentType is %s, not multipart", buf, 0xCu);
      }
      if (*((_DWORD *)this + 4) != *((_DWORD *)this + 5)) {
        operator new();
      }
      if (SHIBYTE(v20) < 0) {
        operator delete(__p);
      }
      return 1;
    }
    std::string __p = 0;
    CFRange v19 = 0;
    uint64_t v20 = 0;
    BOOL v2 = MMSPduDecoder::decodeMultipartBody((uint64_t)this, (uint64_t)&__p);
    if (!v2) {
      goto LABEL_37;
    }
    BOOL isMultipartAlternative = MMSContentType::isMultipartAlternative(v6[3]);
    uint64_t v8 = (MMSHeaderContainer **)__p;
    if (isMultipartAlternative)
    {
      if (v19 == __p) {
        goto LABEL_35;
      }
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      unsigned int v11 = 1;
      while (1)
      {
        if (v10)
        {
          if ((int)compareParts(v10, v8[v9]) < 1)
          {
            uint64_t v8 = (MMSHeaderContainer **)__p;
            uint64_t v12 = *((void *)__p + v9);
            if (v12)
            {
              (*(void (**)(void))(*(void *)v12 + 8))(*((void *)__p + v9));
              uint64_t v8 = (MMSHeaderContainer **)__p;
            }
            goto LABEL_13;
          }
          (*(void (**)(MMSHeaderContainer *))(*(void *)v10 + 8))(v10);
          uint64_t v8 = (MMSHeaderContainer **)__p;
        }
        uint64_t v10 = v8[v9];
LABEL_13:
        unint64_t v9 = v11++;
        if (v9 >= v19 - v8)
        {
          if (v10)
          {
            MMSMessage::addPart(a2, v10);
            goto LABEL_37;
          }
LABEL_35:
          if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
            MMSPduDecoder::decodeBody();
          }
LABEL_37:
          uint64_t v8 = (MMSHeaderContainer **)__p;
          goto LABEL_38;
        }
      }
    }
    if (v19 != __p)
    {
      unint64_t v15 = 0;
      unsigned int v16 = 1;
      do
      {
        MMSMessage::addPart(a2, v8[v15]);
        unint64_t v15 = v16;
        uint64_t v8 = (MMSHeaderContainer **)__p;
        ++v16;
      }
      while (v15 < ((char *)v19 - (unsigned char *)__p) >> 3);
      goto LABEL_37;
    }
LABEL_38:
    if (v8)
    {
      CFRange v19 = v8;
      operator delete(v8);
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      MMSPduDecoder::decodeBody();
    }
    return 0;
  }
  return v2;
}

uint64_t MMSPduDecoder::decodeContentType(MMSPduDecoder *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if (v1 >= *((_DWORD *)this + 4)) {
    return 0;
  }
  if (*(char *)(*((void *)this + 1) + v1) < 0)
  {
    *((_DWORD *)this + 5) = v1 + 1;
    operator new();
  }
  unsigned int v18 = 0;
  if (MMSPduDecoder::decodeWspValueLength(this, &v18))
  {
    int v3 = *((_DWORD *)this + 5);
    unsigned int v17 = 0;
    if (MMSPduDecoder::decodeWspIntegerValue(this, &v17)) {
      operator new();
    }
    *((_DWORD *)this + 5) = v3;
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v15 = 0;
    int v8 = MMSPduDecoder::decodeString((uint64_t)this, (std::string *)__p, 0xFFFFFFFF);
    uint64_t v6 = 0;
    if (v8)
    {
      unint64_t v9 = (SBYTE7(v15) & 0x80u) == 0 ? (MMSGeneralContentType *)__p : (MMSGeneralContentType *)__p[0];
      uint64_t v6 = MMSGeneralContentType::fromString(v9, v7);
      if (!v6)
      {
        uint64_t v10 = *(NSObject **)this;
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
          MMSPduDecoder::decodeContentType((char *)&v15 + 7, __p, v10);
        }
        uint64_t v6 = 0;
      }
    }
    if (SBYTE7(v15) < 0) {
      operator delete(__p[0]);
    }
    if (v8)
    {
      int v11 = *((_DWORD *)this + 5);
      unsigned int v12 = v3 - v11 + v18;
      unsigned int v18 = v12;
      if (v6)
      {
        uint64_t v16 = 0;
        *(_OWORD *)std::string __p = 0u;
        long long v15 = 0u;
        MMSPduDecoder::MMSPduDecoder((MMSPduDecoder *)__p, this, v12);
        if ((MMSParameterContainer::decode((MMSParameterContainer *)(v6 + 8), (MMSPduDecoder *)__p) & 1) == 0)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          uint64_t v6 = 0;
        }
        MEMORY[0x18531F300](__p);
        unsigned int v12 = v18;
        int v11 = *((_DWORD *)this + 5);
      }
      if (*((_DWORD *)this + 4) - v11 < v12) {
        unsigned int v12 = *((_DWORD *)this + 4) - v11;
      }
      *((_DWORD *)this + 5) = v12 + v11;
      return v6;
    }
    return 0;
  }
  *((_DWORD *)this + 5) = v1;
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v15 = 0;
  if (MMSPduDecoder::decodeString((uint64_t)this, (std::string *)__p, 0xFFFFFFFF))
  {
    if ((SBYTE7(v15) & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    uint64_t v6 = MMSGeneralContentType::fromString((MMSGeneralContentType *)v5, v4);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      MMSPduDecoder::decodeContentType();
    }
    uint64_t v6 = 0;
  }
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void MMSPduDecoder::printDebugInfo(MMSPduDecoder *this, std::string *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 4) != *((_DWORD *)this + 5))
  {
    memset(&v13, 0, sizeof(v13));
    int v4 = 16;
    *(_DWORD *)__str = 0;
    do
    {
      unsigned int v6 = *((_DWORD *)this + 4);
      uint64_t v5 = *((unsigned int *)this + 5);
      if (v6 == v5) {
        break;
      }
      if (v5 >= v6)
      {
        int v8 = 0;
      }
      else
      {
        uint64_t v7 = *((void *)this + 1);
        *((_DWORD *)this + 5) = v5 + 1;
        int v8 = *(unsigned __int8 *)(v7 + v5);
      }
      snprintf(__str, 4uLL, "%.2x ", v8);
      size_t v9 = strlen(__str);
      std::string::append(&v13, __str, v9);
      --v4;
    }
    while (v4);
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      MMSPduDecoder::printDebugInfo();
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  if (a2)
  {
    uint64_t v10 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_18444A000, v10, OS_LOG_TYPE_ERROR, "Message so far:", (uint8_t *)&v13, 2u);
      uint64_t v10 = *(NSObject **)this;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      MMSMessage::prettyMessage(a2, 0, 0, &v13);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = &v13;
      }
      else {
        int v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__str = 136315138;
      long long v15 = v11;
      _os_log_error_impl(&dword_18444A000, v10, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)__str, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = *(NSObject **)this;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      MMSMessage::prettyMessage(a2, 1, 0, &v13);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v12 = &v13;
      }
      else {
        unsigned int v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__str = 136642819;
      long long v15 = v12;
      _os_log_error_impl(&dword_18444A000, v10, OS_LOG_TYPE_ERROR, "%{sensitive}s", (uint8_t *)__str, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = *(NSObject **)this;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      MMSPduDecoder::printDebugInfo((MMSMessage *)a2, v10);
    }
  }
}

void MMSPduDecoder::decodeMessage(MMSPduDecoder *this)
{
}

uint64_t MMSPduDecoder::decodeSms(MMSPduDecoder *a1, void *a2, std::string *a3, std::string *a4, std::string *a5, std::string *a6)
{
  unsigned int v14 = 0;
  int v12 = MMSPduDecoder::decodeWspIntegerValue(a1, &v14);
  uint64_t result = 0;
  if (v12)
  {
    uint64_t result = MMSPduDecoder::decodeString((uint64_t)a1, a3, 0xFFFFFFFF);
    if (result)
    {
      uint64_t result = MMSPduDecoder::decodeString((uint64_t)a1, a4, 0xFFFFFFFF);
      if (result)
      {
        uint64_t result = MMSPduDecoder::decodeString((uint64_t)a1, a5, 0xFFFFFFFF);
        if (result) {
          uint64_t result = MMSPduDecoder::decodeString((uint64_t)a1, a6, 0xFFFFFFFF);
        }
      }
    }
  }
  *a2 = v14;
  return result;
}

uint64_t MMSPduDecoder::dumpMMSData(const char *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v29 = 0;
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  *(_OWORD *)int v25 = 0u;
  long long v26 = 0u;
  memset(v24, 0, sizeof(v24));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v24);
  uint64_t v23 = 0x500000000000000;
  HIWORD(v22[0]) = 0;
  v22[1] = 0;
  strcpy((char *)v22, "/tmp/");
  if (*(char *)(a4 + 23) >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  size_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v22, 5);
  size_t v10 = strlen(a1);
  int v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)a1, v10);
  if (v8)
  {
    int v12 = *(char *)(a4 + 23);
    if (v12 >= 0) {
      std::string v13 = (const char *)a4;
    }
    else {
      std::string v13 = *(const char **)a4;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a4 + 8);
    }
  }
  else
  {
    std::string v13 = "_error_";
    uint64_t v14 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
  time(0);
  long long v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)".mms", 4);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = 0;
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v24 + 8, __p);
  if (v21 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  unsigned int v17 = fopen((const char *)v16, "w");
  if (v17)
  {
    unsigned int v18 = v17;
    fwrite(a2, 1uLL, a3, v17);
    fclose(v18);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  *(void *)&v24[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v24 + *(void *)(*(void *)&v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v24[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18531F630](v28);
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

void OUTLINED_FUNCTION_8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void sub_1844FDEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844FDF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844FE09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844FE2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  if (v17 != v18)
  {
  }
  if (v13 != v14)
  {
  }
  _Unwind_Resume(a1);
}

void sub_1844FE348()
{
}

void sub_1844FE350()
{
}

void sub_1844FE358()
{
}

void sub_1844FE360()
{
}

void sub_1844FE368()
{
}

void sub_1844FE370()
{
}

void sub_1844FE3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844FE704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844FE808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844FE9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1844FEBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844FED0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844FEF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1844FEFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844FF0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844FF34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844FF48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844FF5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844FF720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844FF93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1844FFA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1844FFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1844FFD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1844FFF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184500084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184500128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450038C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1845004CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845006B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_18450077C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184500870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184500AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184500C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184500E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_184500ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184500FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184501258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184501398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184501504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184501620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184501790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845018B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184501A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184501B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184501DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184501ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845020F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18450222C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184502448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184502598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184502750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1845028F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184502A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184502C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184502D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184502EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184503004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184503184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845032AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184503428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845035AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845037E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184503920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184503AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184503B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184503D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184503EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184504020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184504160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845043A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1845044DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845046A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18450484C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184504974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184504BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184504CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184504E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184504F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845050F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184505218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184505394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845054BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845056E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184505820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184505AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184505C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184505D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184505FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1845060F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184506260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184506388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845064B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184506690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184506834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184506950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184506B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_184506C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184506DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184506EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184507110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184507248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845073A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845074B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184507680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1845077A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845078F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184507A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184507BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_184507CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184507E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184507F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184508128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184508250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184508378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845084C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184508654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18450877C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845088F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184508A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184508C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184508D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184508EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184509028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845091AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845092D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845094F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184509628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184509794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845098B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184509ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184509C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184509D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184509EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18450A014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18450A268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18450A3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

const char *CTServerConnectionDualSimCapabilityAsString(unsigned int a1)
{
  if (a1 > 4) {
    return "???";
  }
  else {
    return off_1E5264850[a1];
  }
}

void *operator<<(void *a1, _DWORD *a2)
{
  unsigned int v3 = *a2 - 1;
  if (v3 > 2) {
    uint64_t v4 = "kSendErrorTypeNone";
  }
  else {
    uint64_t v4 = off_1E5264928[v3];
  }
  size_t v5 = strlen(v4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
  return a1;
}

const char *CTNRDisableReasonAsString(uint64_t a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 > 0x3FFFFFFF)
    {
      if (a1 == 0x40000000) {
        return "CTNRDisableReasonNotProvisioned";
      }
      if (a1 == 0x80000000) {
        return "CTNRDisableReasonNoCarrierSupport";
      }
    }
    else
    {
      if (a1 == 0x20000) {
        return "CTNRDisableReasonVoLTEOff";
      }
      if (a1 == 0x40000) {
        return "CTNRDisableReasonNoSUCISupport";
      }
    }
    return "CTNRDisableReasonNone";
  }
  uint64_t v1 = a1 - 1;
  uint64_t result = "CTNRDisableReasonRoaming";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "CTNRDisableReasonMSIMRestriction";
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      return "CTNRDisableReasonNone";
    case 3:
      uint64_t result = "CTNRDisableReasonDDSSwitch";
      break;
    case 7:
      uint64_t result = "CTNRDisableReasonSimFile";
      break;
    default:
      if ("CTNRDisableReasonRoaming" != (char *)0x10000) {
        return "CTNRDisableReasonNone";
      }
      uint64_t result = "CTNRDisableReasonInLPM";
      break;
  }
  return result;
}

void sub_18450B634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450B6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450B75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450B7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450B84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450B910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BAEC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18450BB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BCA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BEFC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18450BF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450BFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C2B0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18450C350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450C908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, int a14, char a15, void *a16)
{
  if (a12)
  {
  }
  if (!v19) {

  }
  if (a15)
  {
  }
  if (!v17) {

  }
  _Unwind_Resume(a1);
}

void sub_18450CA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450CAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450CBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450CD8C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18450CEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D0D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18450D174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D490(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18450D530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450D8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450DCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15, void *a16, void *a17, int a18, char a19, void *a20,void *a21,void *a22,int a23,char a24,void *a25,void *a26)
{
  if (a14)
  {
  }
  if (!a20) {

  }
  if (a19)
  {
  }
  if (!a25) {

  }
  if (a24)
  {
  }
  if (!*(void *)(v33 - 96)) {

  }
  _Unwind_Resume(a1);
}

void sub_18450DF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450DFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450E0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450E30C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18450E574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450E7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450EAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13, void *a14, void *a15, int a16, char a17, void *a18, void *a19, void *a20,int a21,char a22,void *a23)
{
  if (a13)
  {
  }
  if (!v29) {

  }
  if (a17)
  {
  }
  if (!v28) {

  }
  if (a22)
  {
  }
  if (!v24) {

  }
  _Unwind_Resume(a1);
}

void sub_18450EC20()
{
  if (v0) {
    JUMPOUT(0x18450EC10);
  }
  JUMPOUT(0x18450EC08);
}

void sub_18450EC2C()
{
}

void sub_18450ECA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450ED18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450EDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450EF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F2DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450F54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450F9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450FA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18450FB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450FBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18450FE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184510098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, int a14, char a15, void *a16)
{
  if (a12)
  {
  }
  if (!v19) {

  }
  if (a15)
  {
  }
  if (!v17) {

  }
  _Unwind_Resume(a1);
}

void sub_1845101FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184510284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845103A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184510590(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845106F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845108BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184510A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184510B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184510B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184510BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184510D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184510EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845119C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184511B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184511F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184512038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845120B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184512128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845123AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451259C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_48c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 48));
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_ea8_48c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;

  unsigned int v3 = *(void **)(a1 + 48);
}

void sub_1845127EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  va_start(va, a7);

  std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18451287C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  unsigned int v3 = *(void **)(a1 + 32);
}

uint64_t std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>::~pair(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_184512A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184512D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_184512E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184512F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845131A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184513218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184513A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  _Unwind_Resume(a1);
}

void sub_184513D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  objc_destroyWeak(v15);
  _Unwind_Resume(a1);
}

void sub_184513E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184513FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845140F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184514204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845142C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184514370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451443C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184514534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>::pair[abi:nn180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(*((const void **)a2 + 3));
  return this;
}

void ___ZN8dispatch9sync_implIZ27__CTStewieDataClient_start_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 32);
  uint64_t v2 = **v1;
  if (*(unsigned char *)(v2 + 8))
  {
    unsigned int v3 = CTLogStewieDataClient();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN8dispatch9sync_implIZ27__CTStewieDataClient_start_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke_cold_2();
    }

    *(unsigned char *)v1[1] = 1;
  }
  else if ([*(id *)(v2 + 80) start])
  {
    long long v4 = *v1;
    size_t v5 = v1[1];
    *(unsigned char *)(**v1 + 8) = 1;
    *(unsigned char *)size_t v5 = 1;
    unsigned int v6 = (void *)*v4;
    id v8 = [*(id *)(*v4 + 80) getState];
    objc_msgSend(v6, "stateChanged:");
  }
  else
  {
    uint64_t v7 = CTLogStewieDataClient();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ___ZN8dispatch9sync_implIZ27__CTStewieDataClient_start_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke_cold_1();
    }
  }
}

void sub_1845146E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845147C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<-[CTStewieDataClient dispatchOnDelegateQueue:]::$_1>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0;
  unsigned int v6 = (void **)std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    id v8 = (uint64_t **)v6;
    uint64_t v13 = 0;
    uint64_t v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    size_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    LOBYTE(v13) = 1;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>>>>::reset[abi:nn180100]((uint64_t)v12, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        id v8 = v4 + 4;
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        long long v4 = (void *)*v7;
        size_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      size_t v5 = v7 + 1;
      long long v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0)
  {
    unsigned int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_184514AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<-[CTStewieDataClient sendMessage:completion:]::$_2>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

void **std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::find<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  unsigned int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  size_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      size_t v5 = (void **)v3;
    }
    unsigned int v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

id **_ZNSt3__110unique_ptrIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3NS_14default_deleteIS1_EEED1B8nn180100Ev(id **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    objc_destroyWeak(v2);
    MEMORY[0x18531F680](v2, 0xC0C40C9143A96);
  }
  return a1;
}

id **_ZZN8dispatch5asyncIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3EEvPU28objcproto17OS_dispatch_queue8NSObjectNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1)
{
  uint64_t v10 = (id *)a1;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)a1);
  unsigned int v3 = WeakRetained;
  if (WeakRetained && WeakRetained[7] && WeakRetained[8] == (id)1)
  {
    long long v4 = objc_alloc_init(CTStewieMessageAck);
    [(CTStewieMessageAck *)v4 setSuccess:1];
    id v12 = 0;
    size_t v5 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v4 requiringSecureCoding:1 error:&v12];
    id v6 = v12;
    if (!v6)
    {
      uint64_t v7 = [[CTStewieTransportMessage alloc] initWithMsgId:*(void *)(a1 + 8)];
      [(CTStewieTransportMessage *)v7 setData:v5];
      [(CTStewieTransportMessage *)v7 setMetadata:*(void *)(a1 + 16)];
      id v11 = 0;
      id v8 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v11];
      id v6 = v11;
      if (!v6) {
        [v3[7] sendData:v8 usingConnection:1 completion:*MEMORY[0x1E4F38C50]];
      }
    }
  }

  return _ZNSt3__110unique_ptrIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3NS_14default_deleteIS1_EEED1B8nn180100Ev(&v10);
}

void sub_184514D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v7 = v5;

  _ZNSt3__110unique_ptrIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3NS_14default_deleteIS1_EEED1B8nn180100Ev((id **)va);
  _Unwind_Resume(a1);
}

void sub_184514D94()
{
}

void OUTLINED_FUNCTION_3_1(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void sub_184515500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184515938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  if (a21 != a16)
  {
  }
  if (a17 != a20)
  {
  }
  if (v30 != v29)
  {
  }
  if (v27 != v28)
  {
  }
  if (v24 != v25)
  {
  }
  _Unwind_Resume(a1);
}

void sub_184515CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184515DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184515FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845167F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18451694C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845169BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CTStewieStateMonitor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

__CFString *_GetCallTypeStringForFlag(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 2;
  unsigned int v1 = v2 >> 1;
  if (v1 > 7) {
    return @"kCTCallTypeNormal";
  }
  else {
    return off_1E5265018[v1];
  }
}

uint64_t _GetCallTypeFlagForString(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (CFEqual(a1, @"kCTCallTypeVoicemail")) {
    return 2;
  }
  if (CFEqual(a1, @"kCTCallTypeVideoConference")) {
    return 4;
  }
  if (CFEqual(a1, @"kCTCallTypeAudioConference")) {
    return 16;
  }
  if (CFEqual(a1, @"kCTCallTypeVOIP")) {
    return 8;
  }
  return CFEqual(a1, @"kCTCallTypeNormal") != 0;
}

__CFString *_GetCallSubTypeString(int a1)
{
  unsigned int v1 = @"kCTCallSubTypeTelephony";
  if (a1 == 4) {
    unsigned int v1 = @"kCTCallSubTypeLTE";
  }
  if (a1 == 2) {
    return @"kCTCallSubTypeWifi";
  }
  else {
    return v1;
  }
}

uint64_t _GetCallServiceProviderFlagForString(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (CFEqual(a1, @"kCTCallServiceProviderFaceTime")) {
    return 1;
  }
  if (CFEqual(a1, @"kCTCallServiceProviderAppleCalling")) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t _ExtractCallTypes(const __CFArray *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  uint64_t v5 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    if (ValueAtIndex)
    {
      uint64_t v7 = ValueAtIndex;
      CFTypeID v8 = CFGetTypeID(ValueAtIndex);
      if (v8 == CFStringGetTypeID()) {
        uint64_t v5 = _GetCallTypeFlagForString(v7) | v5;
      }
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

__CFString *_CTServerConnectionSIMStatusToSIMStatusString(unsigned int a1)
{
  if (a1 > 0xC) {
    unsigned int v1 = &kCTSIMSupportSIMStatusReady;
  }
  else {
    unsigned int v1 = (__CFString **)off_1E5265078[a1];
  }
  return *v1;
}

__CFString *_CTServerConnectionSIMTrayStatusToSIMTrayStatusString(unsigned int a1)
{
  if (a1 > 3) {
    unsigned int v1 = kCTSIMSupportSIMTrayStatusUnknown;
  }
  else {
    unsigned int v1 = (__CFString **)off_1E52650E0[a1];
  }
  return *v1;
}

void sub_184516D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184516DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184516EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184516FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845170EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845171AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451731C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845174F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getClientKeyForEntitlementType(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 2:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyFaceTime;
      goto LABEL_19;
    case 3:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyTethering;
      goto LABEL_19;
    case 6:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyVoLTE;
      goto LABEL_19;
    case 7:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyVoWiFi;
      goto LABEL_19;
    case 8:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyThumper;
      goto LABEL_19;
    case 10:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyMultiSIM;
      goto LABEL_19;
    case 11:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeySAWatch;
      goto LABEL_19;
    case 12:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyMultiSIMTransfer;
      goto LABEL_19;
    case 13:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyiPhonePlanTransfer;
      goto LABEL_19;
    case 14:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeySAWatchTransfer;
      goto LABEL_19;
    case 15:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKey5GService;
      goto LABEL_19;
    case 16:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyiPadSignup;
      goto LABEL_19;
    case 17:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyCustomQoS;
      goto LABEL_19;
    case 18:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyPrivateNetProvisioning;
      goto LABEL_19;
    case 19:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyNtCarrierService;
      goto LABEL_19;
    case 20:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyHeraService;
      goto LABEL_19;
    case 21:
      CFIndex v3 = (uint64_t *)&kCTCarrierEntitlementKeyEnhancedThroughput;
LABEL_19:
      uint64_t result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t _CTServerConnectionCarrierSettingsCopyValue(uint64_t a1, const __CFString *cf, uint64_t *a3)
{
  unint64_t v3 = 0x1600000000;
  uint64_t v4 = 1;
  if (!a1 || !cf || !a3) {
    return v4 | v3;
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFStringGetTypeID() || CFStringGetLength(cf) < 1)
  {
    unint64_t v3 = 0x1600000000;
    uint64_t v4 = 1;
    return v4 | v3;
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v9)
  {
    xpc_object_t v11 = v9;
    xpc_object_t v22 = v9;
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v22 = v11;
    if (!v11) {
      goto LABEL_11;
    }
  }
  if (MEMORY[0x1853203E0](v11) == v10)
  {
    xpc_retain(v11);
    xpc_object_t v12 = v11;
    goto LABEL_13;
  }
LABEL_11:
  xpc_object_t v12 = xpc_null_create();
  xpc_object_t v22 = v12;
LABEL_13:
  xpc_release(v11);
  xpc_object_t v13 = xpc_string_create("kCarrierSettingsGetProperty");
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, "kRequest", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  long long v15 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v15) {
    long long v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, "kCarrierSettingsKey", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v21 = xpc_null_create();
  uint64_t v17 = SendXpcMessage(a1, &v22, &v21);
  if (MEMORY[0x1853203E0](v21) == v10)
  {
    *a3 = 0;
    v19[1] = "kCarrierSettingsKey";
    xpc_object_t object = 0;
    v19[0] = &v21;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v19, &object);
    if (MEMORY[0x1853203E0](object) != MEMORY[0x1E4F145D8]) {
      *a3 = _CFXPCCreateCFObjectFromXPCObject();
    }
    xpc_release(object);
  }
  else
  {
    syslog(3, "Error copying carrier settings: %d/%d", v17, HIDWORD(v17));
  }
  xpc_release(v21);
  xpc_release(v22);
  unint64_t v3 = v17 & 0xFFFFFFFF00000000;
  uint64_t v4 = v17;
  return v4 | v3;
}

uint64_t _CTServerConnectionIsPhoneNumberCredentialValid(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierSettingsIsPhoneNumberCredentialValid", object, "kRequest", &v8);
    xpc_release(object[0]);
    xpc_object_t v9 = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
    {
      object[0] = &v8;
      object[1] = "kCarrierSettingsIsPhoneNumberCredentialValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

unint64_t _CTServerConnectionCopyCarrierBundleInfoArray(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierSettingsGetBundleInfo", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    xpc_object_t v9 = xpc_null_create();
    unint64_t v2 = SendXpcMessage(a1, &v10, &v9);
    *a2 = 0;
    if (!HIDWORD(v2) && MEMORY[0x1853203E0](v9) == MEMORY[0x1E4F14590])
    {
      object[0] = &v9;
      object[1] = "kCarrierSettingsBundleInfo";
      xpc_object_t v8 = 0;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      if (MEMORY[0x1853203E0](v8) != MEMORY[0x1E4F145D8])
      {
        object[0] = 0;
        uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v6);
        *a2 = object[0];
      }
      xpc_release(v8);
    }
    xpc_release(v9);
    xpc_release(v10);
  }
  return v2;
}

void sub_184517DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184517E60(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184517F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184517F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845180B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845181B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845182D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845183A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845183FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184518560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845187D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845188D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845189EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184518BCC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184518D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518EE0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184518F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184518FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451928C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845194E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845195D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451969C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845197C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519850(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845198F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451993C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519C0C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184519CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184519F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451A2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451A938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451AC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13, void *a14, void *a15, int a16, char a17, void *a18, void *a19, void *a20,int a21,char a22,void *a23)
{
  if (a13)
  {
  }
  if (!v29) {

  }
  if (a17)
  {
  }
  if (!v28) {

  }
  if (a22)
  {
  }
  if (!v24) {

  }
  _Unwind_Resume(a1);
}

void sub_18451AD7C()
{
  if (v0) {
    JUMPOUT(0x18451AD6CLL);
  }
  JUMPOUT(0x18451AD64);
}

void sub_18451AD88()
{
}

void sub_18451AE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451AE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451AF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451B06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451B938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13, void *a14, void *a15, void *a16, void *a17)
{
  if (a13)
  {
  }
  if (!a15) {

  }
  _Unwind_Resume(a1);
}

void sub_18451BAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451BB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451BBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451BD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451BED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C0EC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18451C18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451C7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451C8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451CA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451CC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  if (a13)
  {
  }
  if (!v16) {

  }
  _Unwind_Resume(a1);
}

void sub_18451CD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451CDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451CE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451CF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451D580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451D948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451DA0C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18451DAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451DB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451DBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451DC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451DCA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451DD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451DDF0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18451DE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451DFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451E310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451E45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451E4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451E56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451E810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451ED30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Lazuli::SuggestedActionOpenUrlInWebView::~SuggestedActionOpenUrlInWebView(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void Lazuli::SuggestedActionComposeText::~SuggestedActionComposeText(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

Lazuli::SuggestedActionShowLocation *Lazuli::SuggestedActionShowLocation::SuggestedActionShowLocation(Lazuli::SuggestedActionShowLocation *this, const Lazuli::SuggestedActionShowLocation *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((void *)this + 2) = *((void *)a2 + 2);
  *(_OWORD *)this = v4;
  std::__optional_copy_base<Lazuli::SuggestedActionShowQuery,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 1, (uint64_t)a2 + 24);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 64), (long long *)a2 + 4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 4, (long long *)a2 + 6);
  return this;
}

void sub_18451EF4C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(char *)(v2 + 87) < 0) {
      operator delete(*v3);
    }
  }
  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void Lazuli::SuggestedActionShowLocation::~SuggestedActionShowLocation(void **this)
{
  if (*((unsigned char *)this + 120) && *((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(this + 3));
}

std::string *Lazuli::SuggestedActionDialVideoCall::SuggestedActionDialVideoCall(std::string *this, const Lazuli::SuggestedActionDialVideoCall *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_18451F038(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Lazuli::SuggestedActionDialVideoCall::~SuggestedActionDialVideoCall(void **this)
{
  if (*((unsigned char *)this + 48) && *((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *Lazuli::SuggestedActionDialEnrichedCall::SuggestedActionDialEnrichedCall(std::string *this, const Lazuli::SuggestedActionDialEnrichedCall *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (long long *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 56), (long long *)((char *)a2 + 56));
  return this;
}

void sub_18451F114(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48) && *(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Lazuli::SuggestedActionDialEnrichedCall::~SuggestedActionDialEnrichedCall(void **this)
{
  if (*((unsigned char *)this + 80) && *((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((unsigned char *)this + 48) && *((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *Lazuli::SuggestedActionDialPhoneNumber::SuggestedActionDialPhoneNumber(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_18451F210(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Lazuli::SuggestedActionCalendar::~SuggestedActionCalendar(void **this)
{
  if (*((unsigned char *)this + 128) && *((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((unsigned char *)this + 96) && *((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_18451F3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F464(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18451F504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451F9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451FA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18451FBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18451FE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void Lazuli::ChatBotSuggestedAction::~ChatBotSuggestedAction(Lazuli::ChatBotSuggestedAction *this)
{
  uint64_t v2 = *((unsigned int *)this + 52);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1ECFD4430[v2])(&v3, (char *)this + 72);
  }
  *((_DWORD *)this + 52) = -1;
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_184520018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845200E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845201A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845201EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845202F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845203D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845204C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520554(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845205F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845207A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845208A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18452097C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184520C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184520FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845210AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184521298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845214A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44)
{
  _Unwind_Resume(a1);
}

void Lazuli::ChatBotMenuL2::~ChatBotMenuL2(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<Lazuli::ChatBotMenuL2Content>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_184521670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845217FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845218CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845219F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184521F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184522064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44)
{
  _Unwind_Resume(a1);
}

void Lazuli::ChatBotMenuL1::~ChatBotMenuL1(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<Lazuli::ChatBotMenuL1Content>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_184522414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845224A0(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184522540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18452258C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845228B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845229DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184522CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184522F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184523348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18452360C(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845236AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845236F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845237C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18452393C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184523C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<Lazuli::SuggestedActionShowQuery,false>::__optional_copy_base[abi:nn180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](a1, (long long *)a2);
    a1[1].__r_.__value_.__s.__data_[8] = 1;
  }
  return a1;
}

void sub_184523D14(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_184523D9C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

std::string *Lazuli::ChatBotCreateCalendarEvent::ChatBotCreateCalendarEvent(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 3, (long long *)((char *)a2 + 72));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 104), (long long *)((char *)a2 + 104));
  return this;
}

void sub_184523EF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::ChatBotPostbackData,false>::__optional_copy_base[abi:nn180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_184523F8C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_184523FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 136);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1ECFD4430[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 136) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 136);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1ECFD4430[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 136) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 136);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1ECFD4498 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 136) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 120) && *(char *)(a2 + 119) < 0) {
    operator delete(*(void **)(a2 + 96));
  }
  if (*(unsigned char *)(a2 + 88) && *(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }

  return std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 128) && *(char *)(a2 + 127) < 0) {
    operator delete(*(void **)(a2 + 104));
  }
  if (*(unsigned char *)(a2 + 96) && *(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 80) && *(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,Lazuli::SuggestedActionOpenUrlInWebView>::__alt[abi:nn180100]<Lazuli::SuggestedActionOpenUrlInWebView const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<2ul,Lazuli::SuggestedActionComposeText>::__alt[abi:nn180100]<Lazuli::SuggestedActionComposeText const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  return std::__variant_detail::__alt<5ul,Lazuli::SuggestedActionShowLocation>::__alt[abi:nn180100]<Lazuli::SuggestedActionShowLocation const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  return Lazuli::ChatBotCreateCalendarEvent::ChatBotCreateCalendarEvent(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<8ul,Lazuli::SuggestedActionDialVideoCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialVideoCall const&>(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<9ul,Lazuli::SuggestedActionDialEnrichedCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialEnrichedCall const&>(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<10ul,Lazuli::SuggestedActionDialPhoneNumber>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialPhoneNumber const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__alt<0ul,Lazuli::SuggestedActionOpenUrlInWebView>::__alt[abi:nn180100]<Lazuli::SuggestedActionOpenUrlInWebView const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_184524564(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<2ul,Lazuli::SuggestedActionComposeText>::__alt[abi:nn180100]<Lazuli::SuggestedActionComposeText const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1845245FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<5ul,Lazuli::SuggestedActionShowLocation>::__alt[abi:nn180100]<Lazuli::SuggestedActionShowLocation const&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<Lazuli::SuggestedActionShowQuery,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 24), (uint64_t)a2 + 24);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 64), a2 + 4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 96), a2 + 6);
  return a1;
}

void sub_184524684(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(char *)(v2 + 87) < 0) {
      operator delete(*v3);
    }
  }
  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__variant_detail::__alt<8ul,Lazuli::SuggestedActionDialVideoCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialVideoCall const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_184524714(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<9ul,Lazuli::SuggestedActionDialEnrichedCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialEnrichedCall const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (long long *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 56), (long long *)((char *)a2 + 56));
  return this;
}

void sub_1845247A4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48) && *(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<10ul,Lazuli::SuggestedActionDialPhoneNumber>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialPhoneNumber const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_18452483C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_184524894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 216);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1ECFD4500[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 216) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 216);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1ECFD4500[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 216) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 216);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1ECFD4510 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 216) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 208);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1ECFD4430[v3])(&v4, a2 + 72);
  }
  *(_DWORD *)(a2 + 208) = -1;
  if (*(unsigned char *)(a2 + 56) && *(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,Lazuli::ChatBotSuggestedAction>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedAction const&>(a2, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<1ul,Lazuli::ChatBotSuggestedReply>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedReply const&>(this, a3);
}

uint64_t std::__variant_detail::__alt<0ul,Lazuli::ChatBotSuggestedAction>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedAction const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<Lazuli::ChatBotPostbackData,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 32), (long long *)(a2 + 32));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1 + 72, a2 + 72);
  return a1;
}

void sub_184524AD0(_Unwind_Exception *exception_object)
{
  if (v2[56] && v2[55] < 0) {
    operator delete(*v3);
  }
  if (v2[31] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<1ul,Lazuli::ChatBotSuggestedReply>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedReply const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<Lazuli::ChatBotPostbackData,false>::__optional_copy_base[abi:nn180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_184524B68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Lazuli::ChatBotMenuL2Content>::__init_with_size[abi:nn180100]<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<Lazuli::ChatBotMenuL2Content>::__vallocate[abi:nn180100](result, a4);
    return (void *)std::vector<Lazuli::ChatBotMenuL2Content>::__construct_at_end<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::ChatBotMenuL2Content>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL2Content>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

uint64_t std::vector<Lazuli::ChatBotMenuL2Content>::__construct_at_end<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(v4 + v7) = *(_DWORD *)(a2 + v7);
      uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(v4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

void sub_184524CB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL2Content>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(232 * a2);
}

void std::vector<Lazuli::ChatBotMenuL2Content>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::ChatBotMenuL2Content>::__clear[abi:nn180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<Lazuli::ChatBotMenuL2Content>::__clear[abi:nn180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      uint64_t v4 = *(unsigned int *)(v3 - 8);
      if (v4 != -1) {
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))off_1ECFD4500[v4])(&v5, v3 - 224);
      }
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 232;
    }
    while (v3 != v2);
  }
  v1[1] = v2;
  return result;
}

void *std::vector<Lazuli::ChatBotMenuL1Content>::__init_with_size[abi:nn180100]<Lazuli::ChatBotMenuL1Content*,Lazuli::ChatBotMenuL1Content*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<Lazuli::ChatBotMenuL1Content>::__vallocate[abi:nn180100](result, a4);
    return (void *)std::vector<Lazuli::ChatBotMenuL1Content>::__construct_at_end<Lazuli::ChatBotMenuL1Content*,Lazuli::ChatBotMenuL1Content*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::ChatBotMenuL1Content>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL1Content>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

uint64_t std::vector<Lazuli::ChatBotMenuL1Content>::__construct_at_end<Lazuli::ChatBotMenuL1Content*,Lazuli::ChatBotMenuL1Content*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(v4 + v7) = *(_DWORD *)(a2 + v7);
      uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(v4 + v7 + 8, a2 + v7 + 8);
      v7 += 248;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

void sub_184524F08(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL1Content>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(248 * a2);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_184524F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 232);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1ECFD4520[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 232) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 232);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1ECFD4520[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 232) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 232);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1ECFD4530 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 224);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1ECFD4500[v3])(&v5, a2 + 8);
  }
  *(_DWORD *)(a2 + 224) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<Lazuli::ChatBotMenuL2Content>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<1ul,Lazuli::ChatBotMenuL2>::__alt[abi:nn180100]<Lazuli::ChatBotMenuL2 const&>(this, a3);
}

std::string *std::__variant_detail::__alt<1ul,Lazuli::ChatBotMenuL2>::__alt[abi:nn180100]<Lazuli::ChatBotMenuL2 const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Lazuli::ChatBotMenuL2Content>::__init_with_size[abi:nn180100]<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0x34F72C234F72C235 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_184525198(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<Lazuli::ChatBotMenuL1Content>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::ChatBotMenuL1Content>::__clear[abi:nn180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<Lazuli::ChatBotMenuL1Content>::__clear[abi:nn180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      uint64_t v4 = *(unsigned int *)(v3 - 8);
      if (v4 != -1) {
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))off_1ECFD4520[v4])(&v5, v3 - 240);
      }
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 248;
    }
    while (v3 != v2);
  }
  v1[1] = v2;
  return result;
}

void OUTLINED_FUNCTION_0_3(void **a1)
{
}

const char *CTEmergencyModeTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return "CTEmergencyModeUnknown";
  }
  else {
    return off_1E5265100[a1 - 1];
  }
}

const char *CTEmergencyModeStateAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return "CTEmergencyModeStateInCall";
  }
  else {
    return off_1E5265128[a1 - 1];
  }
}

void sub_184525724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184525820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845258A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184525A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184525B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionPerformInternalVinylOperation(uint64_t a1, ctu *a2, void *a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kVinylOperationSync", &object, "kRequest", &v15);
  xpc_release(object);
  xpc_object_t v6 = v15;
  xpc_object_t v16 = v15;
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v15);
  if (a2)
  {
    ctu::cf_to_xpc((uint64_t *)&value, a2, v7);
    xpc_dictionary_set_value(v6, "kVinylOperation", value);
    xpc_object_t v8 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v8);
    xpc_release(value);
    xpc_object_t value = 0;
  }
  xpc_object_t object = xpc_null_create();
  uint64_t v9 = SendXpcMessage(a1, &v16, &object);
  if (a3)
  {
    *a3 = 0;
    if (MEMORY[0x1853203E0](object) == MEMORY[0x1E4F14590])
    {
      xpc_object_t v15 = 0;
      xpc_object_t v12 = object;
      if (object) {
        xpc_retain(object);
      }
      else {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc::bridge((uint64_t *)&cf, (xpc *)&v12, v10);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v15, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v12);
      *a3 = v15;
    }
  }
  xpc_release(object);
  xpc_release(v16);
  return v9;
}

void sub_184525D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  xpc_release(a14);
  xpc_release(a13);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionDoModuleOperation(uint64_t a1, char *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kModuleOperation", &object, "kRequest", &v16);
    xpc_release(object);
    xpc::dict_creator::operator()<char const*>(a2, &v16, "kModuleOperation", &v17);
    xpc_object_t v15 = a3;
    xpc_retain(a3);
    xpc::dict_creator::operator()<xpc::object>(&v17, "kModuleResourcePath", &v15, &v18);
    xpc_object_t v14 = a4;
    xpc_retain(a4);
    xpc::dict_creator::operator()<xpc::object>(&v18, "kModuleValue", &v14, &object);
    xpc_object_t v19 = object;
    xpc_object_t object = xpc_null_create();
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v14);
    xpc_object_t v14 = 0;
    xpc_release(v18);
    xpc_object_t v18 = 0;
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_release(v17);
    xpc_object_t v17 = 0;
    xpc_release(v16);
    xpc_object_t object = xpc_null_create();
    uint64_t v5 = SendXpcMessage(a1, &v19, &object);
    xpc_object_t v11 = object;
    if (a5)
    {
      *a5 = 0;
      if (MEMORY[0x1853203E0](v11) == MEMORY[0x1E4F14590])
      {
        xpc_object_t v11 = xpc_null_create();
        xpc_object_t v12 = object;
        xpc_object_t object = v11;
        *a5 = v12;
      }
      else
      {
        xpc_object_t v11 = object;
      }
    }
    xpc_release(v11);
    xpc_release(v19);
  }
  return v5;
}

void sub_184525F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t object)
{
}

void xpc::dict_creator::operator()<xpc::object>(xpc_object_t *a1@<X0>, const char *a2@<X1>, xpc_object_t *a3@<X2>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v7 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
LABEL_4:
    xpc_retain(v7);
    xpc_object_t v8 = v7;
    goto LABEL_5;
  }
  xpc_object_t v7 = xpc_null_create();
  if (v7) {
    goto LABEL_4;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_5:
  xpc_dictionary_set_value(*a1, a2, v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = *a1;
  *a4 = *a1;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *a4 = xpc_null_create();
  }

  xpc_release(v7);
}

uint64_t _CTServerConnectionDoCSIPropertyOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1)
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    if (v6)
    {
      xpc_object_t v20 = 0;
      xpc_object_t v10 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)v21);
      xpc::dict_creator::operator()<char const*>("kCSIPropertyOperation", v10, "kRequest", &v18);
      xpc_release(v21[0]);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v17 = *(std::string *)a2;
      }
      xpc::dict_creator::operator()<std::string>((char *)&v17, &v18, "kCSIPropertyOperation", &v19);
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v16 = *(std::string *)a3;
      }
      xpc::dict_creator::operator()<std::string>((char *)&v16, &v19, "kCSIPropertyName", object);
      if (*(char *)(a4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string v15 = *(std::string *)a4;
      }
      xpc::dict_creator::operator()<std::string>((char *)&v15, object, "kCSIPropertyValue", (xpc_object_t *)&v13);
      xpc_object_t v20 = (xpc_object_t)v13;
      *(void *)&long long v13 = xpc_null_create();
      xpc_release((xpc_object_t)v13);
      *(void *)&long long v13 = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      xpc_release(object[0]);
      object[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      xpc_release(v19);
      xpc_object_t v19 = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      xpc_release(v18);
      xpc_object_t v19 = xpc_null_create();
      uint64_t v4 = SendXpcMessage(a1, &v20, &v19);
      if (MEMORY[0x1853203E0](v19) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(v19, "kCSIPropertyValue"))
      {
        object[0] = &v19;
        object[1] = "kCSIPropertyValue";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v18);
        v21[0] = 0;
        v21[1] = 0;
        uint64_t v22 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v22) < 0) {
          operator delete(v21[0]);
        }
        if (*(char *)(a4 + 23) < 0) {
          operator delete(*(void **)a4);
        }
        *(_OWORD *)a4 = v13;
        *(void *)(a4 + 16) = v14;
        HIBYTE(v14) = 0;
        LOBYTE(v13) = 0;
        xpc_release(v18);
      }
      xpc_release(v19);
      xpc_release(v20);
    }
  }
  return v4;
}

void sub_1845262D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v31 - 49) < 0) {
    operator delete(*(void **)(v31 - 72));
  }
  xpc_release(*(xpc_object_t *)(v31 - 96));
  xpc_release(*(xpc_object_t *)(v31 - 88));
  xpc_release(*(xpc_object_t *)(v31 - 80));
  _Unwind_Resume(a1);
}

void xpc::dict_creator::operator()<std::string>(char *string@<X2>, xpc_object_t *a2@<X0>, const char *a3@<X1>, xpc_object_t *a4@<X8>)
{
  if (string[23] < 0) {
    string = *(char **)string;
  }
  xpc_object_t v7 = xpc_string_create(string);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    xpc_retain(v7);
    xpc_object_t v8 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, a3, v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = *a2;
  *a4 = *a2;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *a4 = xpc_null_create();
  }

  xpc_release(v7);
}

uint64_t sMmsPduLog(void)
{
  if (sMmsPduLog(void)::once != -1) {
    dispatch_once(&sMmsPduLog(void)::once, &__block_literal_global_38);
  }
  return sMmsPduLog(void)::logger;
}

os_log_t ___Z10sMmsPduLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.CoreTelephony", "msg.mms.pdu");
  sMmsPduLog(void)::logger = (uint64_t)result;
  return result;
}

uint64_t _CTServerConnectionCellMonitorStart(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCellMonitorStart", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionCellMonitorStop(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCellMonitorStop", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionCellMonitorGetCellCount(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kCellMonitorCellCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v8 = "kCellMonitorCellCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCellMonitorGetCellInfo(uint64_t a1, unsigned int a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    *a3 = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetCellInfo", &object, "kRequest", &v19);
    xpc_release(object);
    xpc_object_t v9 = v19;
    xpc_object_t v20 = v19;
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v19);
    xpc_object_t v10 = xpc_int64_create(a2);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kCellMonitorCell", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t v19 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v20, &v19);
    uint64_t v12 = MEMORY[0x1853203E0](v19);
    uint64_t v13 = MEMORY[0x1E4F14590];
    if (v12 == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v19;
      std::string v17 = "kCellMonitorCellInfo";
      xpc_object_t v18 = 0;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v18);
      if (MEMORY[0x1853203E0](v18) == v13)
      {
        *a3 = 1;
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoMcc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)a4 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoMnc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 4) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoLac";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 8) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoCi";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 12) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoBsic";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 16) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoFreq";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 20) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoRxLev";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 24) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoC1";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 28) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoC2";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 32) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoTa";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 36) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoTaTimestamp";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(void *)(a4 + 40) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
      }
      xpc_release(v18);
    }
    xpc_release(v19);
    xpc_release(v20);
  }
  return v4;
}

uint64_t _CTServerConnectionCellMonitorGetUmtsCellCount(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kCellMonitorUmtsCellCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v8 = "kCellMonitorUmtsCellCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCellMonitorGetUmtsCellInfo(uint64_t a1, unsigned int a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    *a3 = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetCellInfo", &object, "kRequest", &v19);
    xpc_release(object);
    xpc_object_t v9 = v19;
    xpc_object_t v20 = v19;
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v19);
    xpc_object_t v10 = xpc_int64_create(a2);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kCellMonitorUmtsCell", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t v19 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v20, &v19);
    uint64_t v12 = MEMORY[0x1853203E0](v19);
    uint64_t v13 = MEMORY[0x1E4F14590];
    if (v12 == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v19;
      std::string v17 = "kCellMonitorCellInfo";
      xpc_object_t v18 = 0;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v18);
      if (MEMORY[0x1853203E0](v18) == v13)
      {
        *a3 = 1;
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoMcc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)a4 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoMnc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 4) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoLac";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 8) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoCi";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 12) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoUarfcn";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 48) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoPsc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 52) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoRscp";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 56) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        xpc_object_t object = &v18;
        std::string v17 = "kCellMonitorCellInfoEcn0";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 60) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
      }
      xpc_release(v18);
    }
    xpc_release(v19);
    xpc_release(v20);
  }
  return v4;
}

void sub_1845273BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18452773C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  MEMORY[0x18531F300](&a11);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v38 - 73) < 0) {
    operator delete(*(void **)(v38 - 96));
  }

  _Unwind_Resume(a1);
}

void sub_184527B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1845287F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (*(char *)(v26 - 113) < 0) {
    operator delete(*(void **)(v26 - 136));
  }

  _Unwind_Resume(a1);
}

NSString *_mimeEncodeWithEncodingHint(NSString *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (v3 && _mimeBundleLoadFailed != 1 && ((_mimeBundleLoaded & 1) != 0 || (_loadMimeBundle() & 1) != 0))
  {
    xpc_object_t v5 = [(NSString *)v3 mf_encodedHeaderDataWithEncodingHint:a2];
    uint64_t v4 = (NSString *)[[NSString alloc] initWithData:v5 encoding:1];
  }
  else
  {
    uint64_t v4 = v3;
  }

  return v4;
}

void sub_184528B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184528C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184529588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  MEMORY[0x18531F300](va);
  _Unwind_Resume(a1);
}

void addRecipientsFromMMSWithHeader(const char *a1, MMSMessage *a2, CTMessage *a3)
{
  xpc_object_t v5 = a3;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  MMSHeaderContainer::allHeadersWithName((uint64_t)a2, a1, &v13);
  xpc_object_t v6 = v14;
  if (v14 != v13)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    xpc_object_t v6 = v13;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v12 = 0;
      if ((*(unsigned int (**)(void, void **))(**(void **)&v6[8 * v7] + 72))(*(void *)&v6[8 * v7], __p))
      {
        if (v12 >= 0) {
          xpc_object_t v9 = (char *)__p;
        }
        else {
          xpc_object_t v9 = (char *)__p[0];
        }
        xpc_object_t v10 = stripAddressType(v9);
        [(CTMessage *)v5 addRecipient:v10];
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v7 = v8;
      xpc_object_t v6 = v13;
      ++v8;
    }
    while (v7 < (v14 - v13) >> 3);
  }
  if (v6)
  {
    uint64_t v14 = v6;
    operator delete(v6);
  }
}

void sub_18452989C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

NSString *_mimeDecode(NSString *a1)
{
  uint64_t v1 = a1;
  if (v1 && (_mimeBundleLoadFailed & 1) == 0 && ((_mimeBundleLoaded & 1) != 0 || (_loadMimeBundle() & 1) != 0))
  {
    uint64_t v2 = [(NSString *)v1 mf_decodeMimeHeaderValueWithCharsetHint:0];
  }
  else
  {
    uint64_t v2 = v1;
  }
  uint64_t v3 = v2;

  return v3;
}

void sub_184529960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id stripAddressType(char *a1)
{
  uint64_t v2 = strchr(a1, 47);
  if (strchr(a1, 64) || !v2)
  {
    uint64_t v3 = [NSString stringWithUTF8String:a1];
  }
  else
  {
    uint64_t v3 = (void *)[[NSString alloc] initWithBytes:a1 length:v2 - a1 encoding:4];
  }

  return v3;
}

uint64_t _loadMimeBundle(void)
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleWithPath:@"/System/Library/PrivateFrameworks/MIME.framework"];
  uint64_t v1 = v0;
  uint64_t v2 = &_mimeBundleLoadFailed;
  if (v0 && [v0 load]) {
    uint64_t v2 = &_mimeBundleLoaded;
  }
  char *v2 = 1;
  uint64_t v3 = _mimeBundleLoaded;

  return v3;
}

void sub_184529A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t createUuidBytes(xpc_object_t *a1)
{
  if (MEMORY[0x1853203E0](*a1) == MEMORY[0x1E4F14580] && xpc_data_get_length(*a1) == 16)
  {
    bytes_ptr = (void *)xpc_data_get_bytes_ptr(*a1);
    return *(void *)bytes_ptr;
  }
  uint64_t v3 = MEMORY[0x1853203E0](*a1);
  xpc_object_t v4 = *a1;
  if (v3 == MEMORY[0x1E4F14600])
  {
    bytes_ptr = (void *)xpc_uuid_get_bytes(v4);
    return *(void *)bytes_ptr;
  }
  if (MEMORY[0x1853203E0](v4) != MEMORY[0x1E4F145F0]) {
    return 0;
  }
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v10, 0x8000100u);
  CFUUIDRef v9 = CFUUIDCreateFromString(v7, v8);
  uint64_t v5 = *(_OWORD *)&CFUUIDGetUUIDBytes(v9);
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  return v5;
}

uint64_t _CTServerConnectionCopyNextCall(const void *a1, int *a2, uint64_t *a3)
{
  return _CTServerConnectionCopyNextCallWithTypes(a1, 3u, a2, a3);
}

uint64_t _CTServerConnectionCopyNextCallWithTypes(const void *a1, unsigned int a2, int *a3, uint64_t *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a3 && a1 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetNextCallInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v9 = xdict;
    xpc_object_t v18 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v10 = xpc_int64_create(a2);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kCallTypes", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t v12 = xpc_int64_create(*a3);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kCallCookie", v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessageIf(1, (uint64_t)a1, &v18, &xdict);
    *a4 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kCallCookie"))
    {
      object[0] = &xdict;
      object[1] = "kCallCookie";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v16);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
      xpc_release(v16);
      *a4 = _CTCallCreateFromXpcDictionary(a1, xdict, 1);
    }
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v4;
}

uint64_t _CTServerConnectionIsAnyCallActiveOrHeld(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    CFStringRef v8 = "kIsAnyCallActiveOrHeld";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessageIf(1, a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kIsAnyCallActiveOrHeld"))
    {
      xpc_object_t object = &xdict;
      CFStringRef v8 = "kIsAnyCallActiveOrHeld";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyUSSDString(uint64_t a1, xpc_object_t *a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v13);
    xpc_release(object);
    xpc_object_t v14 = v13;
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v13);
    xpc_object_t object = &v14;
    xpc_object_t v11 = "kUssdString";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_object_t v13 = xpc_null_create();
    uint64_t v3 = SendXpcMessageIf(1, a1, &v14, &v13);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x1853203E0](v13) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v13;
      xpc_object_t v11 = "kUssdResponseRequested";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v9);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      xpc_object_t v9 = 0;
      xpc_object_t object = &v13;
      xpc_object_t v11 = "kUssdString";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v9);
      if (MEMORY[0x1853203E0](v9) != MEMORY[0x1E4F145D8])
      {
        xpc_object_t object = 0;
        uint64_t v8 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v8);
        *a2 = object;
      }
      xpc_release(v9);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSendUSSDResponse(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallSendUssdResponse", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  if (a2) {
    uint64_t v5 = _CFXPCCreateXPCObjectFromCFObject();
  }
  else {
    uint64_t v5 = (uint64_t)xpc_string_create("");
  }
  xpc_object_t v7 = (xpc_object_t)v5;
  if (!v5) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kUssdString", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  uint64_t v6 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionSetDTMFType(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v4 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCallDtmfType", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionGetDTMFType(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallGetDtmfToneProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kCallDtmfType";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v8 = "kCallDtmfType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetMultiPartyCallCountMaximum(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kMultiPartyMaxCallCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v8 = "kMultiPartyMaxCallCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = (int)xpc::dyn_cast_or_default((xpc *)&v6, (const object *)0x63);
      xpc_release(v6);
    }
    else
    {
      *a2 = 99;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetEmergencyCallStatus(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kEmergencyCallStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v8 = "kEmergencyCallStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionEnableVoicePrivacy(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelSetProperty", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v4 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCallVoicePrivacy", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionGetVoicePrivacy(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kCallVoicePrivacy";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v8 = "kCallVoicePrivacy";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerSetSupportsVoiceCall(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelSetPropertySync", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v4 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCallSupportsVoiceCall", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v9 = xpc_null_create();
  uint64_t v7 = SendXpcMessageIf(1, a1, &object, &v9);
  xpc_release(v9);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionSendToVoicemail(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelSendToVoicemail", object, "kRequest", &v11);
    xpc_release(object[0]);
    xpc_object_t v5 = v11;
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v6;
    xpc_object_t v7 = xpc_data_create(object, 0x10uLL);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kUuid", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    uint64_t v2 = SendXpcMessageIf(1, a1, &v12, 0, 1);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionCreatePrivateConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelCreatePrivateConversation", object, "kRequest", &v11);
    xpc_release(object[0]);
    xpc_object_t v5 = v11;
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v6;
    xpc_object_t v7 = xpc_data_create(object, 0x10uLL);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kUuid", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    uint64_t v2 = SendXpcMessageIf(1, a1, &v12, 0, 1);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionAnswerCall(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelAnswer", object, "kRequest", &v20);
    xpc_release(object[0]);
    xpc_object_t v9 = v20;
    xpc_object_t v21 = v20;
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v20);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v10;
    xpc_object_t v11 = xpc_data_create(object, 0x10uLL);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kUuid", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t v13 = xpc_int64_create(a4);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kCallSourceMode", v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    if (a3) {
      uint64_t v15 = _CFXPCCreateXPCObjectFromCFObject();
    }
    else {
      uint64_t v15 = (uint64_t)xpc_string_create("");
    }
    xpc_object_t v16 = (xpc_object_t)v15;
    if (!v15) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kSource", v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    uint64_t v4 = SendXpcMessageIf(1, a1, &v21, 0, 1);
    xpc_release(v21);
  }
  return v4;
}

uint64_t _CTServerConnectionAnswerWaitingCallEndingHeld(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelAnswerWaitingCallEndingHeld", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v4 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCallSourceMode", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionEndThisCall(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelEnd", object, "kRequest", &v11);
    xpc_release(object[0]);
    xpc_object_t v5 = v11;
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v6;
    xpc_object_t v7 = xpc_data_create(object, 0x10uLL);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kUuid", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    uint64_t v2 = SendXpcMessageIf(1, a1, &v12, 0, 1);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionEndCall(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelEnd", &object, "kRequest", &v14);
  xpc_release(object);
  xpc_object_t v6 = v14;
  xpc_object_t object = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  if (a2) {
    uint64_t v7 = _CFXPCCreateXPCObjectFromCFObject();
  }
  else {
    uint64_t v7 = (uint64_t)xpc_string_create("");
  }
  xpc_object_t v9 = (xpc_object_t)v7;
  if (!v7) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kSource", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(a3);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kCallSourceMode", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  uint64_t v8 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEndAllCalls(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelEnd", &object, "kRequest", &v4);
  xpc_release(object);
  xpc_object_t object = v4;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  uint64_t v2 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionUpdateCallStatus(uint64_t a1, const __CFUUID *a2, unsigned int a3, double a4, double a5)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelUpdateCallStatus", (xpc_object_t *)&object, "kRequest", &v21);
  xpc_release(*(xpc_object_t *)&object.byte0);
  xpc_object_t v10 = v21;
  xpc_object_t v22 = v21;
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v21);
  CFUUIDBytes object = CFUUIDGetUUIDBytes(a2);
  xpc_object_t v11 = xpc_data_create(&object, 0x10uLL);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kUuid", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(a3);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kCallStatus", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_double_create(a4);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kCallStartTime", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_double_create(a5);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kCallEndTime", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  uint64_t v19 = SendXpcMessageIf(1, a1, &v22, 0, 1);
  xpc_release(v22);
  return v19;
}

unint64_t _CTServerConnectionDialService(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5)
{
  unint64_t v5 = 0x1600000000;
  unsigned int v6 = 1;
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        if (a5)
        {
          unsigned int v10 = _GetCallTypeFlagForString(a4);
          unsigned int v11 = _GetCallServiceProviderFlagForString(a5);
          unsigned int v6 = 1;
          if (v10)
          {
            unsigned int v12 = v11;
            if (v11)
            {
              if ((v10 & 0x1C) != 0)
              {
                xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
                xpc::dict_creator::operator()<char const*>("kCallModelDialService", &object, "kRequest", &xdict);
                xpc_release(object);
                xpc_object_t v13 = xdict;
                xpc_object_t object = xdict;
                xpc_object_t xdict = xpc_null_create();
                xpc_release(xdict);
                xpc_object_t v14 = xpc_int64_create(v10);
                if (!v14) {
                  xpc_object_t v14 = xpc_null_create();
                }
                xpc_dictionary_set_value(v13, "kCallTypes", v14);
                xpc_object_t v15 = xpc_null_create();
                xpc_release(v14);
                xpc_release(v15);
                xpc_object_t v16 = xpc_int64_create(v12);
                if (!v16) {
                  xpc_object_t v16 = xpc_null_create();
                }
                xpc_dictionary_set_value(v13, "kProvider", v16);
                xpc_object_t v17 = xpc_null_create();
                xpc_release(v16);
                xpc_release(v17);
                xpc_object_t v18 = (void *)_CFXPCCreateXPCObjectFromCFObject();
                if (!v18) {
                  xpc_object_t v18 = xpc_null_create();
                }
                xpc_dictionary_set_value(v13, "kAddress", v18);
                xpc_object_t v19 = xpc_null_create();
                xpc_release(v18);
                xpc_release(v19);
                if (a3)
                {
                  xpc_object_t v20 = (void *)_CFXPCCreateXPCObjectFromCFObject();
                  if (!v20) {
                    xpc_object_t v20 = xpc_null_create();
                  }
                  xpc_dictionary_set_value(v13, "kSource", v20);
                  xpc_object_t v21 = xpc_null_create();
                  xpc_release(v20);
                  xpc_release(v21);
                }
                xpc_object_t xdict = xpc_null_create();
                unint64_t v22 = SendXpcMessageIf(1, a1, &object, &xdict);
                unsigned int v6 = v22;
                unint64_t v5 = v22 & 0xFFFFFFFF00000000;
                if (!HIDWORD(v22) && MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
                {
                  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCallModelDialService");
                  if (value) {
                    unint64_t v5 = 0;
                  }
                  else {
                    unint64_t v5 = 0x2D00000000;
                  }
                  if (!value) {
                    unsigned int v6 = 1;
                  }
                }
                xpc_release(xdict);
                xpc_release(object);
              }
              else
              {
                unint64_t v5 = 0x2D00000000;
                unsigned int v6 = 1;
              }
            }
          }
        }
      }
    }
  }
  return v6 | v5;
}

uint64_t _CTServerConnectionCreateCall(const void *a1, const void *a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0x1600000001;
  if (!a1 || !a7) {
    return v7;
  }
  xpc_object_t v15 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v53);
  xpc::dict_creator::operator()<char const*>("kCallModelDial", v15, "kRequest", &__p);
  xpc_release(v53);
  xpc_object_t v16 = __p;
  xpc_object_t v52 = __p;
  std::string __p = xpc_null_create();
  xpc_release(__p);
  xpc_object_t v17 = xpc_int64_create(a4);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, "kCallTypes", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  std::string __p = 0;
  long long v51 = 0uLL;
  uint64_t v48 = 0;
  long long v49 = 0uLL;
  if (!a2) {
    goto LABEL_16;
  }
  CFStringRef v53 = 0;
  long long v54 = 0uLL;
  ctu::cf::assign();
  xpc_object_t v19 = v53;
  *(void *)&long long v55 = v54;
  *(void *)((char *)&v55 + 7) = *(void *)((char *)&v54 + 7);
  int v20 = SHIBYTE(v54);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p);
  }
  std::string __p = v19;
  *(void *)&long long v51 = v55;
  *(void *)((char *)&v51 + 7) = *(void *)((char *)&v55 + 7);
  HIBYTE(v51) = v20;
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = v19;
  }
  xpc_object_t v22 = xpc_string_create((const char *)p_p);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, "kPhoneNumber", v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (!CFEqual(a2, @"kLocalEmergencyNumber"))
  {
LABEL_16:
    if (a3) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    LOBYTE(__p) = 0;
    HIBYTE(v51) = 0;
    goto LABEL_16;
  }
  *(unsigned char *)std::string __p = 0;
  *(void *)&long long v51 = 0;
  if (a3)
  {
LABEL_17:
    std::string::basic_string[abi:nn180100]<0>(v46, "");
    ctu::cf::assign();
    a3 = (void *)v46[0];
    char v24 = HIBYTE(v47);
    v46[0] = 0;
    v46[1] = 0;
    uint64_t v47 = 0;
    if (!a5) {
      goto LABEL_29;
    }
LABEL_21:
    CFStringRef v53 = 0;
    long long v54 = 0uLL;
    ctu::cf::assign();
    int v25 = v53;
    *(void *)&long long v55 = v54;
    *(void *)((char *)&v55 + 7) = *(void *)((char *)&v54 + 7);
    int v26 = SHIBYTE(v54);
    if (SHIBYTE(v49) < 0) {
      operator delete(v48);
    }
    uint64_t v48 = v25;
    *(void *)&long long v49 = v55;
    *(void *)((char *)&v49 + 7) = *(void *)((char *)&v55 + 7);
    HIBYTE(v49) = v26;
    if (v26 >= 0) {
      long long v27 = &v48;
    }
    else {
      long long v27 = v25;
    }
    xpc_object_t v28 = xpc_string_create((const char *)v27);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    xpc_dictionary_set_value(v16, "kSource", v28);
    xpc_object_t v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    goto LABEL_29;
  }
LABEL_20:
  char v24 = 0;
  if (a5) {
    goto LABEL_21;
  }
LABEL_29:
  xpc_object_t v30 = xpc_int64_create(a6);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, "kCallSourceMode", v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  xpc_object_t v45 = xpc_null_create();
  uint64_t v7 = SendXpcMessageIf(1, (uint64_t)a1, &v52, &v45);
  *a7 = 0;
  if (MEMORY[0x1853203E0](v45) == MEMORY[0x1E4F14590])
  {
    CFStringRef v53 = &v45;
    *(void *)&long long v54 = "kValid";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
    int v32 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
    xpc_release((xpc_object_t)v55);
    if (v32)
    {
      CFStringRef v53 = &v45;
      *(void *)&long long v54 = "kUuid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      uint64_t UuidBytes = createUuidBytes((xpc_object_t *)&v55);
      uint64_t v34 = v33;
      xpc_release((xpc_object_t)v55);
      CFStringRef v53 = &v45;
      *(void *)&long long v54 = "kCallStartTime";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      int v35 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
      xpc_release((xpc_object_t)v55);
      CFStringRef v53 = &v45;
      *(void *)&long long v54 = "kCallFlags";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      unsigned int v36 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
      xpc_release((xpc_object_t)v55);
      CFStringRef v53 = &v45;
      *(void *)&long long v54 = "kMobileCountryCode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      unsigned int v37 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
      xpc_release((xpc_object_t)v55);
      long long v55 = 0uLL;
      uint64_t v56 = 0;
      v43[0] = &v45;
      v43[1] = "kISOCountryCode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v43, &object);
      CFStringRef v53 = 0;
      long long v54 = 0uLL;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v54) < 0) {
        operator delete(v53);
      }
      xpc_release(object);
      if (v51 >= 0) {
        uint64_t v38 = (const char *)&__p;
      }
      else {
        uint64_t v38 = (const char *)__p;
      }
      if (v49 >= 0) {
        uint64_t v39 = (const char *)&v48;
      }
      else {
        uint64_t v39 = (const char *)v48;
      }
      if (v56 >= 0) {
        cStr = (char *)&v55;
      }
      else {
        cStr = (char *)v55;
      }
      *a7 = _CTCallCreateFromCallInfo(a1, UuidBytes, v34, v38, "", v39, v35, 0, v36, 0, v37, cStr, 1u);
      if (SHIBYTE(v56) < 0) {
        operator delete((void *)v55);
      }
    }
  }
  xpc_release(v45);
  if (v24 < 0) {
    operator delete(a3);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v48);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p);
  }
  xpc_release(v52);
  return v7;
}

uint64_t _CTServerConnectionCopyAllCallsWithTypes(const void *a1, unsigned int a2, CFArrayRef *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetAllCallInfo", &object, "kRequest", &__p);
    xpc_release(object);
    xpc_object_t v48 = __p;
    std::string __p = xpc_null_create();
    xpc_release(__p);
    xpc_object_t v7 = xpc_int64_create(a2);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v48, "kCallTypes", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v47 = xpc_null_create();
    uint64_t v3 = SendXpcMessageIf(1, (uint64_t)a1, &v48, &v47);
    *a3 = 0;
    uint64_t v9 = MEMORY[0x1853203E0](v47);
    uint64_t v10 = MEMORY[0x1E4F14590];
    if (v9 != MEMORY[0x1E4F14590]) {
      goto LABEL_61;
    }
    xpc_object_t xarray = 0;
    xpc_object_t object = &v47;
    int v44 = "kCallArray";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
    uint64_t v11 = MEMORY[0x1853203E0](xarray);
    uint64_t v12 = MEMORY[0x1E4F14568];
    if (v11 != MEMORY[0x1E4F14568])
    {
LABEL_60:
      xpc_release(xarray);
LABEL_61:
      xpc_release(v47);
      xpc_release(v48);
      return v3;
    }
    xpc_object_t object = 0;
    int v44 = 0;
    unint64_t v45 = 0;
    std::string __p = 0;
    CFArrayRef v41 = 0;
    int v42 = 0;
    xpc_object_t v13 = xarray;
    if (xarray)
    {
      xpc_retain(xarray);
      xpc_object_t v38 = v13;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      xpc_object_t v38 = v13;
      if (!v13)
      {
        xpc_object_t v38 = xpc_null_create();
LABEL_11:
        uint64_t v39 = 0;
        xpc_release(v13);
        xpc_object_t v14 = xarray;
        if (xarray) {
          xpc_retain(xarray);
        }
        else {
          xpc_object_t v14 = xpc_null_create();
        }
        if (MEMORY[0x1853203E0](xarray) == v12)
        {
          size_t count = xpc_array_get_count(xarray);
          if (v14) {
            goto LABEL_16;
          }
        }
        else
        {
          size_t count = 0;
          if (v14)
          {
LABEL_16:
            xpc_retain(v14);
            xpc_object_t v16 = v14;
            goto LABEL_19;
          }
        }
        xpc_object_t v16 = xpc_null_create();
LABEL_19:
        xpc_release(v14);
        for (uint64_t i = v39; i != (char *)count || v38 != v16; v39 = i)
        {
          cf[1] = i;
          xpc_object_t v37 = 0;
          cf[0] = &v38;
          xpc::array::object_proxy::operator xpc::dict((uint64_t)cf, &v37);
          if (MEMORY[0x1853203E0](v37) == v10)
          {
            cf[0] = 0;
            CFTypeRef v18 = (CFTypeRef)_CTCallCreateFromXpcDictionary(a1, v37, 1);
            cf[0] = v18;
            if (v18)
            {
              CFRetain(v18);
              CFTypeRef v18 = cf[0];
            }
            if (v18) {
              xpc_object_t v19 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
            }
            else {
              xpc_object_t v19 = 0;
            }
            if (v19)
            {
              int v20 = v44;
              if ((unint64_t)v44 >= v45)
              {
                xpc_object_t v21 = std::vector<ctu::cf::CFSharedRef<void const>>::__emplace_back_slow_path<ctu::cf::CFSharedRef<void const>&>((const void ***)&object, cf);
              }
              else
              {
                *(void *)int v44 = v18;
                if (v18) {
                  CFRetain(v18);
                }
                xpc_object_t v21 = (const void **)(v20 + 8);
              }
              int v44 = (char *)v21;
              CFTypeRef v22 = cf[0];
              xpc_object_t v23 = v41;
              if (v41 >= v42)
              {
                uint64_t v25 = ((char *)v41 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v25 + 1) >> 61) {
                  abort();
                }
                unint64_t v26 = ((char *)v42 - (unsigned char *)__p) >> 2;
                if (v26 <= v25 + 1) {
                  unint64_t v26 = v25 + 1;
                }
                if ((unint64_t)((char *)v42 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v27 = v26;
                }
                if (v27) {
                  xpc_object_t v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>((uint64_t)&v42, v27);
                }
                else {
                  xpc_object_t v28 = 0;
                }
                xpc_object_t v29 = (CFTypeRef *)&v28[8 * v25];
                *xpc_object_t v29 = v22;
                char v24 = v29 + 1;
                xpc_object_t v31 = (char *)__p;
                xpc_object_t v30 = (char *)v41;
                if (v41 != __p)
                {
                  do
                  {
                    int v32 = (const void *)*((void *)v30 - 1);
                    v30 -= 8;
                    *--xpc_object_t v29 = v32;
                  }
                  while (v30 != v31);
                  xpc_object_t v30 = (char *)__p;
                }
                std::string __p = v29;
                CFArrayRef v41 = v24;
                int v42 = (CFTypeRef *)&v28[8 * v27];
                if (v30) {
                  operator delete(v30);
                }
              }
              else
              {
                CFTypeRef *v41 = cf[0];
                char v24 = v23 + 1;
              }
              CFArrayRef v41 = v24;
              CFTypeRef v18 = cf[0];
            }
            if (v18) {
              CFRelease(v18);
            }
          }
          xpc_release(v37);
          uint64_t i = v39 + 1;
        }
        xpc_release(v16);
        xpc_release(v38);
        CFAllocatorRef v34 = CFGetAllocator(a1);
        *a3 = CFArrayCreate(v34, (const void **)__p, ((char *)v41 - (unsigned char *)__p) >> 3, MEMORY[0x1E4F1D510]);
        if (__p)
        {
          CFArrayRef v41 = (CFTypeRef *)__p;
          operator delete(__p);
        }
        std::string __p = &object;
        std::vector<ctu::cf::CFSharedRef<void const>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
        goto LABEL_60;
      }
    }
    xpc_retain(v13);
    goto LABEL_11;
  }
  return v3;
}

void xpc::array::object_proxy::operator xpc::dict(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
LABEL_5:
      *a2 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v4) != MEMORY[0x1E4F14590]) {
    goto LABEL_5;
  }
  xpc_retain(v4);
LABEL_7:

  xpc_release(v4);
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _CTServerConnectionCancelUSSDSession(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallCancelUssdSession", &object, "kRequest", &v4);
  xpc_release(object);
  xpc_object_t object = v4;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  uint64_t v2 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionStartDTMFTone(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v4 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCallDtmfStart", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionStopDTMFTone(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", object, "kRequest", &v6);
  xpc_release(object[0]);
  xpc_object_t v7 = v6;
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v6);
  object[0] = &v7;
  object[1] = "kCallDtmfStop";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  uint64_t v2 = SendXpcMessageIf(1, a1, &v7, 0, 1);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionSendDTMFDigitsNow(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", object, "kRequest", &v6);
  xpc_release(object[0]);
  xpc_object_t v7 = v6;
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v6);
  object[0] = &v7;
  object[1] = "kCallDtmfSendNow";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  uint64_t v2 = SendXpcMessageIf(1, a1, &v7, 0, 1);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionCancelHardPause(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", object, "kRequest", &v6);
  xpc_release(object[0]);
  xpc_object_t v7 = v6;
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v6);
  object[0] = &v7;
  object[1] = "kCallDtmfCancelHardPause";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  uint64_t v2 = SendXpcMessageIf(1, a1, &v7, 0, 1);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionCopyHardPauseDigits(uint64_t a1, xpc_object_t *a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallGetDtmfToneProperty", &object, "kRequest", &v16);
    xpc_release(object);
    xpc_object_t v17 = v16;
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v16);
    xpc_object_t object = &v17;
    xpc_object_t v14 = "kCallDtmfPauseDigits";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_object_t v16 = xpc_null_create();
    uint64_t v3 = SendXpcMessageIf(1, a1, &v17, &v16);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x1853203E0](v16) == MEMORY[0x1E4F14590])
    {
      xpc_object_t v12 = 0;
      xpc_object_t object = &v16;
      xpc_object_t v14 = "kCallDtmfPauseDigits";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v12);
      if (MEMORY[0x1853203E0](v12) != MEMORY[0x1E4F145D8])
      {
        xpc_object_t object = 0;
        xpc_object_t v11 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v11);
        xpc_object_t v7 = object;
        if (object) {
          xpc_object_t v8 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
        }
        else {
          xpc_object_t v8 = 0;
        }
        if (v8 && (Length = CFStringGetLength((CFStringRef)object), xpc_object_t v7 = object, Length))
        {
          *a2 = object;
        }
        else if (v7)
        {
          CFRelease(v7);
        }
      }
      xpc_object_t object = &v16;
      xpc_object_t v14 = "kCallDtmfPauseReadyToSend";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
      xpc_release(v12);
    }
    xpc_release(v16);
    xpc_release(v17);
  }
  return v3;
}

unint64_t _CTServerConnectionAddHeldToMultiPartyCall(uint64_t a1, unsigned char *a2)
{
  unint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallAddHeldToMultiPartyCall", object, "kRequest", &v8);
    xpc_release(object[0]);
    xpc_object_t v9 = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v8 = xpc_null_create();
    unint64_t v2 = SendXpcMessageIf(1, a1, &v9, &v8);
    if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590] && !HIDWORD(v2))
    {
      object[0] = &v8;
      object[1] = "kCallAddHeldToMultiPartyCall";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)1);
      xpc_release(v7);
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionHoldActiveCall(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallHoldActive", object, "kRequest", &v11);
  xpc_release(object[0]);
  xpc_object_t v4 = v11;
  xpc_object_t v12 = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
  object[1] = v5;
  xpc_object_t v6 = xpc_data_create(object, 0x10uLL);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kUuid", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  uint64_t v8 = SendXpcMessageIf(1, a1, &v12, 0, 1);
  xpc_release(v12);
  return v8;
}

unint64_t _CTServerConnectionResumeHeldCall(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unint64_t v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallResumeHeld", object, "kRequest", v12);
    xpc_release(object[0]);
    xpc_object_t v7 = v12[0];
    xpc_object_t v16 = v12[0];
    v12[0] = xpc_null_create();
    xpc_release(v12[0]);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a3);
    object[1] = v8;
    xpc_object_t v9 = xpc_data_create(object, 0x10uLL);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kUuid", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v14 = xpc_null_create();
    unint64_t v3 = SendXpcMessageIf(1, a1, &v16, &v14);
    if (MEMORY[0x1853203E0](v14) == MEMORY[0x1E4F14590] && !HIDWORD(v3))
    {
      v12[0] = &v14;
      v12[1] = "kCallResumeHeld";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v12, &v13);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v13, (const object *)1);
      xpc_release(v13);
    }
    xpc_release(v14);
    xpc_release(v16);
  }
  return v3;
}

unint64_t _CTServerConnectionSwapCalls(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unint64_t v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallSwap", object, "kRequest", v12);
    xpc_release(object[0]);
    xpc_object_t v7 = v12[0];
    xpc_object_t v16 = v12[0];
    v12[0] = xpc_null_create();
    xpc_release(v12[0]);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a3);
    object[1] = v8;
    xpc_object_t v9 = xpc_data_create(object, 0x10uLL);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kUuid", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v14 = xpc_null_create();
    unint64_t v3 = SendXpcMessageIf(1, a1, &v16, &v14);
    if (MEMORY[0x1853203E0](v14) == MEMORY[0x1E4F14590] && !HIDWORD(v3))
    {
      v12[0] = &v14;
      v12[1] = "kCallSwap";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v12, &v13);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v13, (const object *)1);
      xpc_release(v13);
    }
    xpc_release(v14);
    xpc_release(v16);
  }
  return v3;
}

unint64_t _CTServerConnectionCopyCallManagementState(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kCallManagementState";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    unint64_t v2 = SendXpcMessageIf(1, a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590] && !HIDWORD(v2))
    {
      xpc_object_t v9 = 0;
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionStartOTASP(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kStartOtasp", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kStartOtaspShowUI", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

unint64_t _CTServerConnectionAddCall(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, uint64_t *a8, double a9, _DWORD *a10)
{
  unint64_t v10 = 0x1600000000;
  LODWORD(v11) = 1;
  if (a1 && a7 && a8 && a10)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallAdd", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v20 = xdict;
    xpc_object_t v41 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v21 = xpc_double_create(a9);
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    xpc_dictionary_set_value(v20, "kCallStartTime", v21);
    xpc_object_t v22 = xpc_null_create();
    xpc_release(v21);
    xpc_release(v22);
    xpc_object_t v23 = xpc_int64_create(a3);
    if (!v23) {
      xpc_object_t v23 = xpc_null_create();
    }
    xpc_dictionary_set_value(v20, "kCallStatus", v23);
    xpc_object_t v24 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v24);
    if (a4)
    {
      uint64_t v25 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v25) {
        uint64_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(v20, "kAddress", v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
    }
    if (a5)
    {
      unint64_t v27 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v27) {
        unint64_t v27 = xpc_null_create();
      }
      xpc_dictionary_set_value(v20, "kName", v27);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
    }
    if (a6)
    {
      xpc_object_t v29 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_dictionary_set_value(v20, "kSource", v29);
      xpc_object_t v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
    }
    switch(a2)
    {
      case 5:
        int64_t v31 = 8;
        break;
      case 4:
        int64_t v31 = 16;
        break;
      case 3:
        int64_t v31 = 4;
        break;
      default:
        unint64_t v10 = 0x1600000000;
        LODWORD(v11) = 1;
LABEL_36:
        xpc_release(v20);
        return v11 | v10;
    }
    xpc_object_t v32 = xpc_int64_create(v31);
    if (!v32) {
      xpc_object_t v32 = xpc_null_create();
    }
    xpc_dictionary_set_value(v20, "kCallTypes", v32);
    xpc_object_t v33 = xpc_null_create();
    xpc_release(v32);
    xpc_release(v33);
    xpc_object_t xdict = xpc_null_create();
    unint64_t v11 = SendXpcMessageIf(1, a1, &v41, &xdict);
    unint64_t v10 = v11 & 0xFFFFFFFF00000000;
    *a7 = 0;
    *a10 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && !HIDWORD(v11)
      && xpc_dictionary_get_value(xdict, "kUuid")
      && xpc_dictionary_get_value(xdict, "kCallFlags"))
    {
      *a7 = 1;
      xpc_object_t object = &xdict;
      xpc_object_t v38 = "kUuid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v39);
      *a8 = createUuidBytes(&v39);
      a8[1] = v34;
      xpc_release(v39);
      xpc_object_t object = &xdict;
      xpc_object_t v38 = "kCallFlags";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v39);
      *a10 = xpc::dyn_cast_or_default((xpc *)&v39, 0);
      xpc_release(v39);
    }
    xpc_release(xdict);
    xpc_object_t v20 = v41;
    goto LABEL_36;
  }
  return v11 | v10;
}

uint64_t _CTServerConnectionRegisterSilentHoursCallback(uint64_t a1, void *aBlock)
{
  if (!a1) {
    return 0x1600000001;
  }
  if (aBlock) {
    unint64_t v3 = _Block_copy(aBlock);
  }
  else {
    unint64_t v3 = 0;
  }
  aBlocka[0] = MEMORY[0x1E4F143A8];
  aBlocka[1] = 1174405120;
  aBlocka[2] = ___CTServerConnectionRegisterSilentHoursCallback_block_invoke;
  aBlocka[3] = &__block_descriptor_tmp_7;
  if (v3) {
    xpc_object_t v5 = _Block_copy(v3);
  }
  else {
    xpc_object_t v5 = 0;
  }
  xpc_object_t v20 = v5;
  xpc_object_t v6 = _Block_copy(aBlocka);
  uint64_t v7 = v6;
  xpc_object_t v9 = *(NSObject **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___CTServerConnectionRegisterSilentHoursCallback_block_invoke_58;
  block[3] = &__block_descriptor_tmp_61;
  void block[4] = v8;
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  CFTypeRef v18 = v6;
  dispatch_async(v9, block);
  unint64_t v10 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v21);
  xpc::dict_creator::operator()<char const*>("kCallEnableSilentHours", v10, "kRequest", &v16);
  xpc_release(v21);
  xpc_object_t v11 = v16;
  xpc_object_t v21 = v16;
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v16);
  xpc_object_t v12 = xpc_BOOL_create(1);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, "kEnabled", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v4 = SendXpcMessage(a1, &v21, 0, v14);
  xpc_release(v21);
  if (v18) {
    _Block_release(v18);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v20) {
    _Block_release(v20);
  }
  if (v3) {
    _Block_release(v3);
  }
  return v4;
}

void *__copy_helper_block_8_32c56_ZTSN8dispatch5blockIU13block_pointerFbPK10__CFStringEEE(uint64_t a1, uint64_t a2)
{
  os_log_t result = *(void **)(a2 + 32);
  if (result) {
    os_log_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_8_32c56_ZTSN8dispatch5blockIU13block_pointerFbPK10__CFStringEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void *__copy_helper_block_8_40c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  os_log_t result = *(void **)(a2 + 40);
  if (result) {
    os_log_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_8_40c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t _CTServerConnectionUnregisterSilentHoursCallback(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  uint64_t v4 = a1 + 16;
  unint64_t v2 = *(NSObject **)(a1 + 16);
  uint64_t v3 = *(void *)(v4 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___CTServerConnectionUnregisterSilentHoursCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_64;
  void block[4] = v3;
  dispatch_async(v2, block);
  xpc_object_t v5 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v14);
  xpc::dict_creator::operator()<char const*>("kCallEnableSilentHours", v5, "kRequest", &v12);
  xpc_release(v14);
  xpc_object_t v6 = v12;
  xpc_object_t v14 = v12;
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v12);
  xpc_object_t v7 = xpc_BOOL_create(0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kEnabled", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  uint64_t v10 = SendXpcMessage(a1, &v14, 0, v9);
  xpc_release(v14);
  return v10;
}

unint64_t _CTServerConnectionIsEmergencyNumber(uint64_t a1, void *a2, unsigned char *a3)
{
  return _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 0, a3);
}

unint64_t _CTServerConnectionIsEmergencyNumberHelper(uint64_t a1, void *a2, unsigned int a3, unsigned char *a4)
{
  unint64_t v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    *a4 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetIsValidEmergencyNumber", object, "kRequest", __p);
    xpc_release(object[0]);
    uint64_t v9 = __p[0];
    xpc_object_t v19 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    CFRetain(a2);
    ctu::cf_to_xpc((uint64_t *)&value, (ctu *)a2, v10);
    xpc_dictionary_set_value(v9, "kPhoneNumber", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t v12 = xpc_int64_create(a3);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kIncludeAllowedNumbers", v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    xpc_object_t xdict = xpc_null_create();
    unint64_t v4 = SendXpcMessage(a1, &v19, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kIsValidEmergencyNumber"))
    {
      object[0] = &xdict;
      object[1] = "kIsValidEmergencyNumber";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a4 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      xpc_release(__p[0]);
    }
    else if (!HIDWORD(v4))
    {
      object[0] = 0;
      object[1] = 0;
      uint64_t v21 = 0;
      ctu::cf::assign();
      *(_OWORD *)std::string __p = *(_OWORD *)object;
      uint64_t v16 = v21;
      *a4 = isEmergencyNumber((const void **)__p);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
    }
    xpc_release(xdict);
    CFRelease(a2);
    xpc_release(v19);
  }
  return v4;
}

unint64_t _CTServerConnectionIsEmergencyNumberWithWhitelistIncluded(uint64_t a1, void *a2, unsigned char *a3)
{
  return _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 1u, a3);
}

unint64_t _CTServerConnectionPhoneNumberIsMmiOrUssd(uint64_t a1, void *a2, BOOL *a3)
{
  unint64_t IsEmergencyNumberHelper = 0x1600000001;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        *a3 = 0;
        unsigned __int8 v8 = 0;
        unint64_t IsEmergencyNumberHelper = _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 1u, &v8);
        int v5 = v8;
        *a3 = v8 == 0;
        if (!v5)
        {
          CFBooleanRef IsMmiOrUssd = (const __CFBoolean *)_CTCallPhoneNumberIsMmiOrUssd();
          *a3 = CFBooleanGetValue(IsMmiOrUssd) != 0;
        }
      }
    }
  }
  return IsEmergencyNumberHelper;
}

unint64_t _CTServerConnectionGetEmergencyConfig(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetEmergencyConfig", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kEmergencyWiFiConfig";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    unint64_t v2 = SendXpcMessageIf(1, a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590] && !HIDWORD(v2))
    {
      xpc_object_t v9 = 0;
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

unint64_t _CTServerConnectionIsValidEmergencyNumber(uint64_t a1, void *a2, NSObject *a3, uint64_t a4)
{
  char v12 = 0;
  unint64_t IsEmergencyNumberHelper = _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 0, &v12);
  if (a2) {
    CFRetain(a2);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___CTServerConnectionIsValidEmergencyNumber_block_invoke;
  block[3] = &unk_1ECFD3E08;
  void block[4] = a4;
  CFTypeRef cf = a2;
  if (a2) {
    CFRetain(a2);
  }
  char v11 = v12;
  dispatch_async(a3, block);
  if (cf) {
    CFRelease(cf);
  }
  if (a2) {
    CFRelease(a2);
  }
  return IsEmergencyNumberHelper;
}

CFTypeRef __copy_helper_block_8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t _CTServerConnectionSwitchCallSource(uint64_t a1, const __CFUUID *a2, unsigned int a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSwitchCallSource", (xpc_object_t *)&object, "kRequest", &v13);
    xpc_release(*(xpc_object_t *)&object.byte0);
    xpc_object_t v7 = v13;
    xpc_object_t v14 = v13;
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v13);
    CFUUIDBytes object = CFUUIDGetUUIDBytes(a2);
    xpc_object_t v8 = xpc_data_create(&object, 0x10uLL);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kUuid", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t v10 = xpc_int64_create(a3);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kCallSourceMode", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    uint64_t v3 = SendXpcMessageIf(1, a1, &v14, 0, 1);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSwitchCallSourceAll(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSwitchCallSource", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v4 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCallSourceMode", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionPullCallFromOtherDevice(const void *a1, CFDictionaryRef theDict, uint64_t *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && theDict && a3)
  {
    xpc_object_t v52 = 0;
    *(void *)&bytes.byte0 = CFDictionaryGetValue(theDict, @"kCTCallPhoneNumber");
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v52, (CFTypeRef *)&bytes);
    long long v51 = 0;
    *(void *)&bytes.byte0 = CFDictionaryGetValue(theDict, @"kCTCallCallerName");
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v51, (CFTypeRef *)&bytes);
    CFNumberRef v50 = 0;
    *(void *)&bytes.byte0 = CFDictionaryGetValue(theDict, @"kCTCallDuration");
    ctu::cf::CFSharedRef<__CFNumber const>::CFSharedRef<void const,void>(&v50, (CFTypeRef *)&bytes);
    CFStringRef v49 = 0;
    *(void *)&bytes.byte0 = CFDictionaryGetValue(theDict, @"kCTCallDirection");
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v49, (CFTypeRef *)&bytes);
    CFStringRef uuidStr = 0;
    *(void *)&bytes.byte0 = CFDictionaryGetValue(theDict, @"kCTCallId");
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&uuidStr, (CFTypeRef *)&bytes);
    if (v52) {
      uint64_t v7 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v7)
    {
      if (v50
         ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
         : 0)
      {
        if (v49
           ? ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get
           : 0)
        {
          if (uuidStr
             ? ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get
             : 0)
          {
            CFUUIDRef v11 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], uuidStr);
            int valuePtr = 0;
            CFNumberGetValue(v50, kCFNumberIntType, &valuePtr);
            CFComparisonResult v12 = CFStringCompare(v49, @"kCTCallDirectionOutgoing", 0);
            xpc_object_t v13 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&bytes);
            xpc::dict_creator::operator()<char const*>("kPullCallFromOtherDevice", v13, "kRequest", v41);
            xpc_release(*(xpc_object_t *)&bytes.byte0);
            xpc_object_t v14 = v41[0];
            xpc_object_t v46 = v41[0];
            v41[0] = xpc_null_create();
            xpc_release(v41[0]);
            ctu::cf_to_xpc((uint64_t *)&value, v52, v15);
            xpc_dictionary_set_value(v14, "kPhoneNumber", value);
            xpc_object_t v16 = value;
            xpc_object_t value = xpc_null_create();
            xpc_release(v16);
            xpc_release(value);
            xpc_object_t value = 0;
            ctu::cf_to_xpc((uint64_t *)&object, v51, v17);
            xpc_dictionary_set_value(v14, "kCallName", object);
            xpc_object_t v18 = object;
            xpc_object_t object = xpc_null_create();
            xpc_release(v18);
            xpc_release(object);
            xpc_object_t object = 0;
            xpc_object_t v19 = xpc_int64_create(valuePtr);
            if (!v19) {
              xpc_object_t v19 = xpc_null_create();
            }
            xpc_dictionary_set_value(v14, "kCallDuration", v19);
            xpc_object_t v20 = xpc_null_create();
            xpc_release(v19);
            xpc_release(v20);
            xpc_object_t v21 = xpc_BOOL_create(v12 == kCFCompareEqualTo);
            if (!v21) {
              xpc_object_t v21 = xpc_null_create();
            }
            xpc_dictionary_set_value(v14, "kCallDirectionMobileOriginated", v21);
            xpc_object_t v22 = xpc_null_create();
            xpc_release(v21);
            xpc_release(v22);
            CFUUIDBytes bytes = CFUUIDGetUUIDBytes(v11);
            xpc_object_t v23 = xpc_data_create(&bytes, 0x10uLL);
            if (!v23) {
              xpc_object_t v23 = xpc_null_create();
            }
            xpc_dictionary_set_value(v14, "kUuid", v23);
            xpc_object_t v24 = xpc_null_create();
            xpc_release(v23);
            xpc_release(v24);
            xpc_object_t v43 = xpc_null_create();
            uint64_t v3 = SendXpcMessageIf(1, (uint64_t)a1, &v46, &v43);
            *a3 = 0;
            if (MEMORY[0x1853203E0](v43) == MEMORY[0x1E4F14590])
            {
              *(void *)&bytes.byte0 = &v43;
              *(void *)&bytes.byte8 = "kValid";
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
              int v25 = xpc::dyn_cast_or_default((xpc *)v41, 0);
              xpc_release(v41[0]);
              if (v25)
              {
                *(void *)&bytes.byte0 = &v43;
                *(void *)&bytes.byte8 = "kUuid";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                uint64_t UuidBytes = createUuidBytes(v41);
                uint64_t v35 = v27;
                uint64_t v36 = UuidBytes;
                xpc_release(v41[0]);
                *(void *)&bytes.byte0 = &v43;
                *(void *)&bytes.byte8 = "kCallStartTime";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                int v28 = xpc::dyn_cast_or_default((xpc *)v41, 0);
                xpc_release(v41[0]);
                *(void *)&bytes.byte0 = &v43;
                *(void *)&bytes.byte8 = "kCallFlags";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                unsigned int v29 = xpc::dyn_cast_or_default((xpc *)v41, 0);
                xpc_release(v41[0]);
                *(void *)&bytes.byte0 = &v43;
                *(void *)&bytes.byte8 = "kMobileCountryCode";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                unsigned int v30 = xpc::dyn_cast_or_default((xpc *)v41, 0);
                xpc_release(v41[0]);
                v41[0] = 0;
                v41[1] = 0;
                uint64_t v42 = 0;
                std::string __p = &v43;
                xpc_object_t v38 = "kISOCountryCode";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, &v40);
                CFUUIDBytes bytes = (CFUUIDBytes)0;
                uint64_t v54 = 0;
                xpc::dyn_cast_or_default();
                if (SHIBYTE(v54) < 0) {
                  operator delete(*(void **)&bytes.byte0);
                }
                xpc_release(v40);
                CFUUIDBytes bytes = (CFUUIDBytes)0;
                uint64_t v54 = 0;
                ctu::cf::assign();
                std::string __p = 0;
                xpc_object_t v38 = 0;
                uint64_t v39 = 0;
                ctu::cf::assign();
                if (v54 >= 0) {
                  p_CFUUIDBytes bytes = &bytes;
                }
                else {
                  p_CFUUIDBytes bytes = *(CFUUIDBytes **)&bytes.byte0;
                }
                if (v39 >= 0) {
                  p_p = (const char *)&__p;
                }
                else {
                  p_p = (const char *)__p;
                }
                if (v42 >= 0) {
                  cStr = (char *)v41;
                }
                else {
                  cStr = (char *)v41[0];
                }
                *a3 = _CTCallCreateFromCallInfo(a1, v36, v35, (const char *)p_bytes, p_p, "", v28, 0, v29, 0, v30, cStr, 1u);
                if (SHIBYTE(v39) < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v54) < 0) {
                  operator delete(*(void **)&bytes.byte0);
                }
                if (SHIBYTE(v42) < 0) {
                  operator delete(v41[0]);
                }
              }
            }
            xpc_release(v43);
            xpc_release(v46);
            if (v11) {
              CFRelease(v11);
            }
          }
        }
      }
    }
    if (uuidStr) {
      CFRelease(uuidStr);
    }
    if (v49) {
      CFRelease(v49);
    }
    if (v50) {
      CFRelease(v50);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (v52) {
      CFRelease(v52);
    }
  }
  return v3;
}

uint64_t _CTServerConnectionPullCallIsPossible(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPullCallIsPossible", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v9 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessageIf(1, a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kPullCallIsPossible"))
    {
      object[0] = &xdict;
      object[1] = "kPullCallIsPossible";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionEndCallWithCauseCode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelEnd", object, "kRequest", &v15);
    xpc_release(object[0]);
    xpc_object_t v7 = v15;
    xpc_object_t v16 = v15;
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v15);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v8;
    xpc_object_t v9 = xpc_data_create(object, 0x10uLL);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kUuid", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v11 = xpc_int64_create(a3);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kDisconnectCauseCode", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    uint64_t v3 = SendXpcMessageIf(1, a1, &v16, 0, 1);
    xpc_release(v16);
  }
  return v3;
}

unint64_t _CTServerConnectionMediaStatusIsActive(uint64_t a1, unsigned char *a2)
{
  unsigned int v2 = 1;
  LODWORD(v3) = 22;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallMediaStatus", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    unint64_t v6 = SendXpcMessageIf(1, a1, &v11, &xdict);
    unsigned int v2 = v6;
    unint64_t v3 = HIDWORD(v6);
    if (!v6)
    {
      if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kActive"))
      {
        object[0] = &xdict;
        object[1] = "kActive";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
        *a2 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
        xpc_release(v9);
        unsigned int v2 = 0;
      }
      else
      {
        unsigned int v2 = 1;
        LODWORD(v3) = 35;
      }
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2 | ((unint64_t)v3 << 32);
}

const void **std::vector<ctu::cf::CFSharedRef<void const>>::__emplace_back_slow_path<ctu::cf::CFSharedRef<void const>&>(const void ***a1, const void **a2)
{
  unsigned int v2 = *a1;
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    abort();
  }
  xpc_object_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = (char *)v8 - (char *)v2;
  if (v9 >> 2 > v4) {
    unint64_t v4 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v25 = v7;
  if (v10) {
    xpc_object_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v7, v10);
  }
  else {
    xpc_object_t v11 = 0;
  }
  uint64_t v22 = 0;
  v23.i64[0] = 0;
  xpc_object_t v12 = (const void **)&v11[8 * v3];
  xpc_object_t v13 = &v11[8 * v10];
  xpc_object_t v24 = v13;
  xpc_object_t v14 = *a2;
  void *v12 = *a2;
  if (v14) {
    CFRetain(v14);
  }
  xpc_object_t v15 = v12 + 1;
  v23.i64[1] = (uint64_t)(v12 + 1);
  xpc_object_t v17 = *a1;
  xpc_object_t v16 = a1[1];
  if (v16 == *a1)
  {
    int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
  }
  else
  {
    do
    {
      *--xpc_object_t v12 = 0;
      xpc_object_t v18 = *--v16;
      void *v12 = v18;
      void *v16 = 0;
    }
    while (v16 != v17);
    int64x2_t v19 = *(int64x2_t *)a1;
    xpc_object_t v15 = (const void **)v23.i64[1];
    xpc_object_t v13 = v24;
  }
  *a1 = v12;
  a1[1] = v15;
  int64x2_t v23 = v19;
  xpc_object_t v20 = a1[2];
  a1[2] = (const void **)v13;
  xpc_object_t v24 = (char *)v20;
  uint64_t v22 = v19.i64[0];
  std::__split_buffer<ctu::cf::CFSharedRef<void const>>::~__split_buffer((void **)&v22);
  return v15;
}

void **std::__split_buffer<ctu::cf::CFSharedRef<void const>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<ctu::cf::CFSharedRef<void const>>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    xpc_object_t v5 = *(const void **)(v1 - 8);
    v1 -= 8;
    unint64_t v4 = v5;
    *(void *)(a1 + 16) = v1;
    if (v5)
    {
      CFRelease(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
  }
}

void std::vector<ctu::cf::CFSharedRef<void const>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<ctu::cf::CFSharedRef<void const>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ctu::cf::CFSharedRef<void const>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 8)
  {
    xpc_object_t v5 = *(const void **)(i - 8);
    unint64_t v4 = v5;
    if (v5) {
      CFRelease(v4);
    }
  }
  a1[1] = v2;
}

_OWORD *std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0;
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    xpc_object_t v8 = (uint64_t **)v6;
    uint64_t v13 = 0;
    uint64_t v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    LOBYTE(v13) = 1;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>>>>::reset[abi:nn180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  unint64_t v4 = v3;
  std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

const char *CTActivationPolicyCarrierLockAsString(uint64_t a1)
{
  uint64_t v1 = "CTActivationPolicyCarrierLockUnknown";
  if (a1 == 1) {
    uint64_t v1 = "CTActivationPolicyCarrierUnlocked";
  }
  if (a1 == 2) {
    return "CTActivationPolicyCarrierLocked";
  }
  else {
    return v1;
  }
}

uint64_t _CTServerConnectionSelectPhonebook(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPhoneBookSelect", &object, "kRequest", &v15);
  xpc_release(object);
  xpc_object_t v6 = v15;
  xpc_object_t object = v15;
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v15);
  if (a3) {
    uint64_t v7 = _CFXPCCreateXPCObjectFromCFObject();
  }
  else {
    uint64_t v7 = (uint64_t)xpc_string_create("");
  }
  xpc_object_t v9 = (xpc_object_t)v7;
  if (!v7) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kPhoneBookPassword", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(a2);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kPhoneBookName", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v13);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionSavePhonebookEntry(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPhoneBookSaveContact", &object, "kRequest", &v20);
  xpc_release(object);
  xpc_object_t v8 = v20;
  xpc_object_t object = v20;
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v20);
  xpc_object_t v9 = xpc_int64_create(a2);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kPhoneBookEntryIndex", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  if (a3) {
    uint64_t v11 = _CFXPCCreateXPCObjectFromCFObject();
  }
  else {
    uint64_t v11 = (uint64_t)xpc_string_create("");
  }
  xpc_object_t v13 = (xpc_object_t)v11;
  if (!v11) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kPhoneBookContactName", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (a4) {
    uint64_t v15 = _CFXPCCreateXPCObjectFromCFObject();
  }
  else {
    uint64_t v15 = (uint64_t)xpc_string_create("");
  }
  xpc_object_t v16 = (xpc_object_t)v15;
  if (!v15) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kPhoneBookContactNumber", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  uint64_t v12 = SendXpcMessage(a1, &object, 0, v18);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionFetchPhonebook(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPhoneBookFetch", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionCopyPhoneBookEntry(uint64_t a1, unsigned char *a2, int a3, void *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneBookGetEntry", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v9 = xdict;
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v10 = xpc_int64_create(a3);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kPhoneBookEntryIndex", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    *a4 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_count(xdict))
    {
      uint64_t v14 = 0;
      uint64_t v13 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v14, (CFTypeRef *)&v13);
      *a4 = v14;
      *a2 = 1;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionGetPhonebookEntryCount(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneBookGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kPhoneBookEntryCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v8 = "kPhoneBookEntryCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t MMSHeaderContainer::contentTypeEncoding(MMSHeaderContainer *this)
{
  uint64_t result = MMSHeaderContainer::_contentTypeEncoding;
  if (!MMSHeaderContainer::_contentTypeEncoding) {
    operator new();
  }
  return result;
}

void MMSHeaderContainer::MMSHeaderContainer(MMSHeaderContainer *this)
{
  *(void *)this = &unk_1ECFD3610;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
}

void MMSHeaderContainer::MMSHeaderContainer(MMSHeaderContainer *this, const MMSHeaderContainer *a2)
{
  *(void *)this = &unk_1ECFD3610;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  MMSHeaderContainer::addHeaders(this, a2);
}

void MMSHeaderContainer::addHeaders(MMSHeaderContainer *this, const MMSHeaderContainer *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (*((void *)a2 + 2) != v2)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = (MMSHeader *)(*(uint64_t (**)(void))(**(void **)(v2 + 8 * v5) + 80))(*(void *)(v2 + 8 * v5));
      MMSHeaderContainer::addHeader(this, v7, 1);
      unint64_t v5 = v6;
      uint64_t v2 = *((void *)a2 + 1);
      ++v6;
    }
    while (v5 < (*((void *)a2 + 2) - v2) >> 3);
  }
}

void MMSHeaderContainer::~MMSHeaderContainer(MMSHeaderContainer *this)
{
  *(void *)this = &unk_1ECFD3610;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      uint64_t v6 = *(void *)(v3 + 8 * v4);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        uint64_t v3 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
      }
      unint64_t v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::~__hash_table((uint64_t)this + 32);
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
}

void MMSHeaderContainer::addHeader(MMSHeaderContainer *this, MMSHeader *a2, char a3)
{
  if (a3) {
    goto LABEL_11;
  }
  uint64_t v5 = *((void *)this + 1);
  if (*((void *)this + 2) == v5) {
    goto LABEL_11;
  }
  unint64_t v6 = 0;
  unsigned int v7 = 1;
  while (1)
  {
    xpc_object_t v8 = (const char *)(*(uint64_t (**)(void))(**(void **)(v5 + 8 * v6) + 64))(*(void *)(v5 + 8 * v6));
    xpc_object_t v9 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(void *)a2 + 64))(a2);
    if (!strcmp(v8, v9)) {
      break;
    }
    unint64_t v6 = v7;
    uint64_t v5 = *((void *)this + 1);
    ++v7;
    if (v6 >= (*((void *)this + 2) - v5) >> 3) {
      goto LABEL_11;
    }
  }
  if (!v7)
  {
LABEL_11:
    unint64_t v13 = *((void *)this + 3);
    uint64_t v14 = (void *)*((void *)this + 2);
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v16 = *((void *)this + 1);
      uint64_t v17 = ((uint64_t)v14 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61) {
        abort();
      }
      uint64_t v18 = v13 - v16;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        xpc_object_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>((uint64_t)this + 24, v20);
      }
      else {
        xpc_object_t v21 = 0;
      }
      uint64_t v22 = &v21[8 * v17];
      int64x2_t v23 = &v21[8 * v20];
      *(void *)uint64_t v22 = a2;
      uint64_t v15 = v22 + 8;
      uint64_t v25 = (char *)*((void *)this + 1);
      xpc_object_t v24 = (char *)*((void *)this + 2);
      if (v24 != v25)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        xpc_object_t v24 = (char *)*((void *)this + 1);
      }
      *((void *)this + 1) = v22;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *uint64_t v14 = a2;
      uint64_t v15 = v14 + 1;
    }
    *((void *)this + 2) = v15;
  }
  else
  {
    uint64_t v10 = v7 - 1;
    uint64_t v11 = *((void *)this + 1);
    uint64_t v12 = *(void *)(v11 + 8 * v10);
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      uint64_t v11 = *((void *)this + 1);
    }
    *(void *)(v11 + 8 * v10) = a2;
  }
  uint64_t v27 = (char *)(*(uint64_t (**)(MMSHeader *))(*(void *)a2 + 64))(a2);
  std::string::basic_string[abi:nn180100]<0>(__p, v27);
  unsigned int v30 = __p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 32, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v30)+ 5) = a2;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t MMSHeaderContainer::createHeader(MMSHeaderContainer *this, char *a2)
{
  uint64_t v3 = (MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSHeaderContainer *))(*(void *)this + 16))(this);

  return MMSHeaderEncodingMap::createHeader(v3, a2);
}

MMSHeader *MMSHeaderContainer::addHeader(MMSHeaderContainer *this, char *a2, const char *a3, char a4)
{
  xpc_object_t v8 = (MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSHeaderContainer *))(*(void *)this + 16))(this);
  uint64_t Header = MMSHeaderEncodingMap::createHeader(v8, a2);
  uint64_t v10 = (MMSHeader *)Header;
  if (Header)
  {
    if ((*(uint64_t (**)(uint64_t, const char *))(*(void *)Header + 16))(Header, a3))
    {
      MMSHeaderContainer::addHeader(this, v10, a4);
    }
    else
    {
      (*(void (**)(MMSHeader *))(*(void *)v10 + 8))(v10);
      return 0;
    }
  }
  return v10;
}

uint64_t MMSHeaderContainer::headerCount(MMSHeaderContainer *this)
{
  return (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3;
}

uint64_t MMSHeaderContainer::headerWithName(MMSHeaderContainer *this, char *a2)
{
  uint64_t v2 = (void *)((char *)this + 32);
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v2, (uint64_t)__p);
  unint64_t v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return *((void *)v4 + 5);
    }
  }
  else if (v3)
  {
    return *((void *)v4 + 5);
  }
  return 0;
}

{
  void *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  uint64_t v2 = (void *)((char *)this + 32);
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::find<std::string>(v2, (uint64_t)__p);
  unint64_t v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return *((void *)v4 + 5);
    }
  }
  else if (v3)
  {
    return *((void *)v4 + 5);
  }
  return 0;
}

void MMSHeaderContainer::allHeadersWithName(uint64_t a1, const char *a2, char **a3)
{
  a3[1] = *a3;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v3)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v10 = (const char *)(*(uint64_t (**)(void))(**(void **)(v3 + 8 * v7) + 64))(*(void *)(v3 + 8 * v7));
      if (!strcmp(v10, a2))
      {
        uint64_t v11 = *(void *)(a1 + 8);
        unint64_t v13 = a3[1];
        unint64_t v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v15 = (v13 - *a3) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
            abort();
          }
          uint64_t v16 = v12 - (void)*a3;
          uint64_t v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
            uint64_t v17 = v15 + 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v9, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          unint64_t v20 = &v19[8 * v15];
          *(void *)unint64_t v20 = *(void *)(v11 + 8 * v7);
          uint64_t v14 = v20 + 8;
          uint64_t v22 = *a3;
          xpc_object_t v21 = a3[1];
          if (v21 != *a3)
          {
            do
            {
              uint64_t v23 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v20 - 1) = v23;
              v20 -= 8;
            }
            while (v21 != v22);
            xpc_object_t v21 = *a3;
          }
          *a3 = v20;
          a3[1] = v14;
          a3[2] = &v19[8 * v18];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)unint64_t v13 = *(void *)(v11 + 8 * v7);
          uint64_t v14 = v13 + 8;
        }
        a3[1] = v14;
      }
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v7 = ++v8;
    }
    while (v8 < (unint64_t)((*(void *)(a1 + 16) - v3) >> 3));
  }
}

uint64_t MMSHeaderContainer::contentTypeHeader(MMSHeaderContainer *this)
{
  return MMSHeaderContainer::headerWithName(this, "Content-Type");
}

{
  return MMSHeaderContainer::headerWithName(this, "Content-Type");
}

uint64_t MMSHeaderContainer::contentType(MMSHeaderContainer *this)
{
  uint64_t result = MMSHeaderContainer::headerWithName(this, "Content-Type");
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = MMSHeaderContainer::headerWithName(this, "Content-Type");
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void MMSHeaderContainer::setContentType(MMSHeaderContainer *this, MMSContentType *a2)
{
  uint64_t v2 = 0;
  MMSContentType::contentTypeForName(a2, (const char *)a2);
}

uint64_t MMSHeaderContainer::setContentType(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  return 0;
}

uint64_t MMSHeaderContainer::headerValueAsString(MMSHeaderContainer *a1, char *a2)
{
  uint64_t result = MMSHeaderContainer::headerWithName(a1, a2);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 72);
    return v3();
  }
  return result;
}

uint64_t MMSHeaderContainer::valueForStringHeader(MMSHeaderContainer *this, char *a2)
{
  uint64_t result = MMSHeaderContainer::headerWithName(this, a2);
  if (result)
  {
    uint64_t v3 = result;
    result += 24;
    if (*(char *)(v3 + 47) < 0) {
      return *(void *)result;
    }
  }
  return result;
}

std::string *MMSHeaderContainer::prettyHeaders@<X0>(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (this->__r_.__value_.__r.__words[2] != size)
  {
    unsigned int v8 = this;
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      uint64_t v11 = *(void *)(size + 8 * v9);
      this = (std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
      if (this == a2)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 48))(__p, v11, a3);
        if ((v15 & 0x80u) == 0) {
          unint64_t v12 = __p;
        }
        else {
          unint64_t v12 = (void **)__p[0];
        }
        if ((v15 & 0x80u) == 0) {
          std::string::size_type v13 = v15;
        }
        else {
          std::string::size_type v13 = (std::string::size_type)__p[1];
        }
        std::string::append(a4, (const std::string::value_type *)v12, v13);
        if ((char)v15 < 0) {
          operator delete(__p[0]);
        }
        this = std::string::append(a4, "\n", 1uLL);
      }
      unint64_t v9 = v10;
      std::string::size_type size = v8->__r_.__value_.__l.__size_;
      ++v10;
    }
    while (v9 < (uint64_t)(v8->__r_.__value_.__r.__words[2] - size) >> 3);
  }
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v30, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    unsigned __int8 v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, (unsigned __int8 *)i + 16, v5)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  unint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)unint64_t v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_41:
    void *v27 = i;
    goto LABEL_42;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v26 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return i;
}

void MMSContentDispositionHeader::createPrototype(MMSContentDispositionHeader *this)
{
}

void MMSContentDispositionHeader::createInstance(MMSContentDispositionHeader *this)
{
}

void MMSContentDispositionHeader::copy(MMSContentDispositionHeader *this)
{
}

uint64_t MMSContentDispositionHeader::parseValue(MMSContentDispositionHeader *this, char *__s)
{
  memset(&v15, 0, sizeof(v15));
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v4 = strchr(__s, 59);
  if (v4)
  {
    uint64_t v5 = v4;
    std::string::__assign_external(&v15, __s, ((_BYTE)v4 - (_BYTE)__s));
    unint64_t v6 = v5 + 1;
    p_p = (std::string *)&__p;
  }
  else
  {
    p_p = &v15;
    unint64_t v6 = __s;
  }
  std::string::__assign_external(p_p, v6);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v8 = &v15;
  }
  else {
    unint64_t v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  uint64_t v9 = MMSEnumerationHeader::parseValue(this, (char *)v8);
  if (v9)
  {
    if (SHIBYTE(v14) < 0)
    {
      if (!v13) {
        goto LABEL_14;
      }
      unint64_t v10 = (const char *)__p;
    }
    else
    {
      if (!HIBYTE(v14)) {
        goto LABEL_14;
      }
      unint64_t v10 = (const char *)&__p;
    }
    MMSParameterContainer::parseParameters((MMSContentDispositionHeader *)((char *)this + 32), v10);
  }
LABEL_14:
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v9;
}

uint64_t MMSContentDispositionHeader::valueAsString(uint64_t a1, std::string *a2)
{
  uint64_t v4 = MMSEnumerationHeader::valueAsString(a1, a2);
  if (v4) {
    MMSParameterContainer::toString((MMSHeaderContainer *)(a1 + 32), a2);
  }
  return v4;
}

uint64_t MMSContentDispositionHeader::decodeValue(MMSContentDispositionHeader *this, MMSPduDecoder *a2)
{
  unsigned int v10 = 0;
  if (*((unsigned char *)this + 104))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)unint64_t v8 = 0;
    MMSPduDecoder::decodeString((uint64_t)a2, (std::string *)__p, 0xFFFFFFFF);
    if ((v8[1] & 0x80000000) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    uint64_t v5 = (*(uint64_t (**)(MMSContentDispositionHeader *, void **))(*(void *)this + 16))(this, v4);
    if (SHIBYTE(v8[1]) < 0) {
      operator delete(__p[0]);
    }
  }
  else if (MMSPduDecoder::decodeWspValueLength(a2, &v10) {
         && v10 <= *((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 5)
  }
         && MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 17))
  {
    --v10;
    uint64_t v9 = 0;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v8 = 0u;
    MMSPduDecoder::MMSPduDecoder((MMSPduDecoder *)__p, a2, v10);
    uint64_t v5 = MMSParameterContainer::decode((MMSContentDispositionHeader *)((char *)this + 32), (MMSPduDecoder *)__p);
    if (v5) {
      MMSPduDecoder::skip((uint64_t)a2, v8[1]);
    }
    MEMORY[0x18531F300](__p);
  }
  else
  {
    return 0;
  }
  return v5;
}

BOOL MMSContentDispositionHeader::encodeName(MMSContentDispositionHeader *this, MMSPduEncoder *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MMSPduEncoder::encodeByte(a2, gContentDispositionEncodingByte | 0x80);
  }
  return v2 != 0;
}

BOOL MMSContentDispositionHeader::encodeValue(MMSContentDispositionHeader *this, MMSPduEncoder *a2)
{
  uint64_t v9 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeByte((MMSPduEncoder *)__p, *((unsigned char *)this + 17));
  BOOL v4 = MMSParameterContainer::encode((MMSContentDispositionHeader *)((char *)this + 32), (MMSPduEncoder *)__p);
  if (v4)
  {
    if (v8 >= 0) {
      unsigned int v5 = HIBYTE(v8);
    }
    else {
      unsigned int v5 = v8;
    }
    MMSPduEncoder::encodeWspValueLength(a2, v5);
    MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[1]);
  }
  return v4;
}

const char *MMSContentDispositionHeader::headerTypeName(MMSContentDispositionHeader *this)
{
  return "content-disposition";
}

uint64_t MMSContentDispositionHeader::setContentDispositionEncodingByte(uint64_t this)
{
  gContentDispositionEncodingByte = this;
  return this;
}

uint64_t MMSContentDispositionHeader::getContentDispositionEncodingByte(MMSContentDispositionHeader *this)
{
  return gContentDispositionEncodingByte;
}

void MMSContentDispositionHeader::~MMSContentDispositionHeader(MMSContentDispositionHeader *this)
{
  *(void *)this = &unk_1ECFD3AA0;
  MMSParameterContainer::~MMSParameterContainer((MMSContentDispositionHeader *)((char *)this + 32));

  MMSEnumerationHeader::~MMSEnumerationHeader(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ECFD3AA0;
  MMSParameterContainer::~MMSParameterContainer((MMSContentDispositionHeader *)((char *)this + 32));
  MMSEnumerationHeader::~MMSEnumerationHeader(this);

  JUMPOUT(0x18531F680);
}

void sub_184531D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184531E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845321B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1845326B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *MMSFromHeader::MMSFromHeader(void *a1, uint64_t a2)
{
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 7), "com.apple.telephony", "msg.mms.pdu.from.hdr");
  uint64_t result = MMSSensitiveEncodedStringHeader::MMSSensitiveEncodedStringHeader((uint64_t)a1, a2, 0);
  *a1 = &unk_1ECFD3038;
  return result;
}

void MMSFromHeader::createInstance(MMSFromHeader *this)
{
}

void MMSFromHeader::copy(MMSFromHeader *this)
{
}

uint64_t MMSFromHeader::parseValue(MMSFromHeader *this, const char *__s1)
{
  int v4 = strcmp(__s1, "<insert address>");
  unsigned int v5 = (std::string *)((char *)this + 24);
  if (v4)
  {
    std::string::__assign_external(v5, __s1);
  }
  else
  {
    if (*((char *)this + 47) < 0)
    {
      *((void *)this + 4) = 0;
      unsigned int v5 = (std::string *)*((void *)this + 3);
    }
    else
    {
      *((unsigned char *)this + 47) = 0;
    }
    v5->__r_.__value_.__s.__data_[0] = 0;
  }
  return 1;
}

uint64_t MMSFromHeader::valueAsString(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    std::string::operator=(this, (const std::string *)(a1 + 24));
    return 1;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = 16;
    this = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 16;
  }
  strcpy((char *)this, "<insert address>");
  return 1;
}

uint64_t MMSFromHeader::decodeValue(MMSFromHeader *this, MMSPduDecoder *a2)
{
  if (*((_DWORD *)a2 + 4) == *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unsigned int v11 = 0;
  if (MMSPduDecoder::decodeWspValueLength(a2, &v11))
  {
    if (*((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 5) >= v11)
    {
      unsigned __int8 v10 = 0;
      BOOL v7 = MMSPduDecoder::decodeByte(a2, &v10);
      uint64_t result = 0;
      if (v7)
      {
        unsigned __int8 v8 = v10;
        if (v10 == 129)
        {
          return 1;
        }
        else if (v10 == 128)
        {
          return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, 0);
        }
        else
        {
          uint64_t v9 = *((void *)this + 7);
          uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
          if (result)
          {
            MMSFromHeader::decodeValue(v8, v9);
            return 0;
          }
        }
      }
    }
    else
    {
      unsigned int v5 = *((void *)this + 7);
      uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (result)
      {
        MMSFromHeader::decodeValue(v5);
        return 0;
      }
    }
  }
  else
  {
    unint64_t v6 = *((void *)this + 7);
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      MMSFromHeader::decodeValue(v6);
      return 0;
    }
  }
  return result;
}

uint64_t MMSFromHeader::encodeValue(MMSFromHeader *this, MMSPduEncoder *a2)
{
  if (*((char *)this + 47) < 0)
  {
    uint64_t v4 = *((void *)this + 4);
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    MMSPduEncoder::encodeByte(a2, 1);
    MMSPduEncoder::encodeByte(a2, 129);
    return 1;
  }
  LODWORD(v4) = *((unsigned __int8 *)this + 47);
  if (!*((unsigned char *)this + 47)) {
    goto LABEL_5;
  }
LABEL_3:
  MMSPduEncoder::encodeWspValueLength(a2, v4 + 2);
  MMSPduEncoder::encodeByte(a2, 128);
  MMSPduEncoder::encodeEncodedString(a2, (uint64_t)this + 24, (MMSCharsetHeader *)*((unsigned int *)this + 12));
  return 1;
}

const char *MMSFromHeader::headerTypeName(MMSFromHeader *this)
{
  return "from";
}

void MMSFromHeader::~MMSFromHeader(void **this)
{
  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  MEMORY[0x18531F300](this + 7);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD3340;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  MEMORY[0x18531F300](this + 7);

  JUMPOUT(0x18531F680);
}

uint64_t MMSEnumerationHeader::MMSEnumerationHeader(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(void *)uint64_t result = &unk_1ECFD37A0;
  *(unsigned char *)(result + 17) = a3;
  *(void *)(result + 24) = 0;
  uint64_t v5 = *(void *)(result + 8);
  if (v5)
  {
    uint64_t v5 = *(void *)(v5 + 32);
    if (v5) {
      uint64_t v5 = *(void *)(v5 + 24);
    }
  }
  *(void *)(result + 24) = v5;
  return result;
}

void MMSEnumerationHeader::~MMSEnumerationHeader(MMSEnumerationHeader *this)
{
  *(void *)this = &unk_1ECFD37A0;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2)
    {
      uint64_t v3 = (void **)*((void *)this + 3);
      std::vector<MMSEnumerationValue>::__destroy_vector::operator()[abi:nn180100](&v3);
      MEMORY[0x18531F680](v2, 0x20C40960023A9);
    }
  }
  MMSBinaryHeader::~MMSBinaryHeader(this);
}

{
  uint64_t vars8;

  MMSEnumerationHeader::~MMSEnumerationHeader(this);

  JUMPOUT(0x18531F680);
}

void MMSEnumerationHeader::addNameForValue(MMSEnumerationHeader *this, const char *a2, char a3)
{
  uint64_t v4 = (char **)*((void *)this + 3);
  if (!v4) {
    operator new();
  }
  memset(&__p, 0, sizeof(__p));
  if (!a2) {
    a2 = "";
  }
  std::string::__assign_external(&__p, a2);
  unint64_t v5 = (unint64_t)v4[2];
  unint64_t v6 = (unint64_t)v4[1];
  if (v6 >= v5)
  {
    uint64_t v8 = (uint64_t)(v6 - (void)*v4) >> 5;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59) {
      abort();
    }
    uint64_t v10 = v5 - (void)*v4;
    if (v10 >> 4 > v9) {
      unint64_t v9 = v10 >> 4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    v25[4] = v4 + 2;
    if (v11) {
      uint8x8_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSEnumerationValue>>((uint64_t)(v4 + 2), v11);
    }
    else {
      uint8x8_t v12 = 0;
    }
    uint64_t v13 = &v12[32 * v8];
    char *v13 = a3;
    long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v13 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v13 + 8) = v14;
    memset(&__p, 0, sizeof(__p));
    uint64_t v16 = *v4;
    std::string v15 = v4[1];
    if (v15 == *v4)
    {
      float v20 = v4[1];
      unint64_t v17 = &v12[32 * v8];
    }
    else
    {
      unint64_t v17 = &v12[32 * v8];
      do
      {
        char v18 = *(v15 - 32);
        v15 -= 32;
        *(v17 - 32) = v18;
        v17 -= 32;
        long long v19 = *(_OWORD *)(v15 + 8);
        *((void *)v17 + 3) = *((void *)v15 + 3);
        *(_OWORD *)(v17 + 8) = v19;
        *((void *)v15 + 2) = 0;
        *((void *)v15 + 3) = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v16);
      float v20 = *v4;
      std::string v15 = v4[1];
    }
    float v21 = v13 + 32;
    *uint64_t v4 = v17;
    v25[0] = v20;
    v25[1] = v20;
    v4[1] = v13 + 32;
    v25[2] = v15;
    BOOL v22 = v4[2];
    _OWORD v4[2] = &v12[32 * v11];
    v25[3] = v22;
    std::__split_buffer<MMSEnumerationValue>::~__split_buffer((uint64_t)v25);
    int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v4[1] = v21;
    if (v23 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v6 = a3;
    long long v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v6 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v6 + 8) = v7;
    v4[1] = (char *)(v6 + 32);
  }
}

uint64_t MMSEnumerationHeader::parseValue(MMSEnumerationHeader *this, char *a2)
{
  if ((MMSEnumerationHeader::parseNamedValue(this, a2) & 1) == 0) {
    *((unsigned char *)this + 17) = strtoul(a2, 0, 0);
  }
  return 1;
}

uint64_t MMSEnumerationHeader::parseNamedValue(MMSEnumerationHeader *this, std::string::value_type *__s)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *v2;
  if (*(void *)(*((void *)this + 3) + 8) == v3) {
    return 0;
  }
  unint64_t v6 = 0;
  unsigned int v7 = 1;
  while (std::string::compare((const std::string *)(v3 + 32 * v6 + 8), __s))
  {
    unint64_t v6 = v7;
    uint64_t v3 = **((void **)this + 3);
    ++v7;
    if (v6 >= (*(void *)(*((void *)this + 3) + 8) - v3) >> 5) {
      return 0;
    }
  }
  *((unsigned char *)this + 17) = *(unsigned char *)(**((void **)this + 3) + 32 * v6);
  return 1;
}

BOOL MMSEnumerationHeader::decodeValue(MMSEnumerationHeader *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 17);
}

uint64_t MMSEnumerationHeader::encodeValue(MMSEnumerationHeader *this, MMSPduEncoder *a2)
{
  return 1;
}

uint64_t MMSEnumerationHeader::valueAsString(uint64_t a1, std::string *this)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3 || (uint64_t v4 = *v3, v5 = *(void *)(*(void *)(a1 + 24) + 8), v6 = v5 - v4, v5 == v4))
  {
LABEL_6:
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v14, 0, sizeof(v14));
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v14);
    std::ostream::operator<<();
    std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v14 + 8, &v12);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v12;
    this->__r_.__value_.__r.__words[2] = v13;
    *(void *)&v14[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v14 + *(void *)(*(void *)&v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v14[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18531F630](v18);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 5;
    unsigned int v9 = 1;
    while (*(unsigned __int8 *)(v4 + 32 * v7) != *(unsigned __int8 *)(a1 + 17))
    {
      uint64_t v7 = v9;
      if (v8 <= v9++) {
        goto LABEL_6;
      }
    }
    std::string::operator=(this, (const std::string *)(v4 + 32 * v7 + 8));
  }
  return 1;
}

void MMSEnumerationHeader::createInstance(MMSEnumerationHeader *this)
{
}

void MMSEnumerationHeader::copy(MMSEnumerationHeader *this)
{
}

const char *MMSEnumerationHeader::headerTypeName(MMSEnumerationHeader *this)
{
  return "enum";
}

void MMSYesNoHeader::createPrototype(MMSYesNoHeader *this)
{
}

void MMSYesNoHeader::createInstance(MMSYesNoHeader *this)
{
}

void MMSYesNoHeader::copy(MMSYesNoHeader *this)
{
}

void MMSYesNoHeader::~MMSYesNoHeader(MMSYesNoHeader *this)
{
  MMSEnumerationHeader::~MMSEnumerationHeader(this);

  JUMPOUT(0x18531F680);
}

void std::vector<MMSEnumerationValue>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<MMSEnumerationValue>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<MMSEnumerationValue>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<MMSEnumerationValue>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<MMSEnumerationValue>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<MMSEnumerationValue>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_184533940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  char v18 = v17;

  _Unwind_Resume(a1);
}

void sub_184533A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  long long v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184533C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184533DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  long long v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184533EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  long long v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1845340FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18453435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184534578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18453468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  long long v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184534824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184534A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184534C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184534E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t MMSMMFlagsHeader::MMSMMFlagsHeader(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  uint64_t v7 = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(void *)uint64_t v7 = &unk_1ECFD34A8;
  *(unsigned char *)(v7 + 17) = a3;
  *(_DWORD *)(v7 + 20) = 0;
  unint64_t v8 = (void *)(v7 + 24);
  if (a4) {
    unsigned int v9 = a4;
  }
  else {
    unsigned int v9 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v8, v9);
  return a1;
}

void MMSMMFlagsHeader::~MMSMMFlagsHeader(void **this)
{
  *this = &unk_1ECFD34A8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  uint64_t vars8;

  MMSMMFlagsHeader::~MMSMMFlagsHeader(this);

  JUMPOUT(0x18531F680);
}

BOOL MMSMMFlagsHeader::parseValue(std::string *this, char *__s)
{
  uint64_t v4 = strchr(__s, 32);
  if (v4)
  {
    if (!strncmp(__s, "add", 3uLL))
    {
      char v5 = 0x80;
    }
    else if (!strncmp(__s, "remove", 6uLL))
    {
      char v5 = -127;
    }
    else
    {
      if (strncmp(__s, "filter", 6uLL))
      {
LABEL_9:
        std::string::__assign_external(this + 1, v4 + 1);
        return v4 != 0;
      }
      char v5 = -126;
    }
    this->__r_.__value_.__s.__data_[17] = v5;
    goto LABEL_9;
  }
  return v4 != 0;
}

uint64_t MMSMMFlagsHeader::decodeValue(MMSMMFlagsHeader *this, MMSPduDecoder *a2)
{
  unsigned int v6 = 0;
  int v4 = MMSPduDecoder::decodeWspValueLength(a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    uint64_t result = MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 17);
    if (result) {
      return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 5, 0);
    }
  }
  return result;
}

uint64_t MMSMMFlagsHeader::encodeValue(MMSMMFlagsHeader *this, MMSPduEncoder *a2)
{
  uint64_t v8 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeByte((MMSPduEncoder *)__p, *((unsigned char *)this + 17));
  MMSPduEncoder::encodeEncodedString((MMSPduEncoder *)__p, (uint64_t)this + 24, (MMSCharsetHeader *)*((unsigned int *)this + 5));
  if (v7 >= 0) {
    unsigned int v4 = HIBYTE(v7);
  }
  else {
    unsigned int v4 = v7;
  }
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  return 1;
}

void MMSMMFlagsHeader::createInstance(MMSMMFlagsHeader *this)
{
}

void MMSMMFlagsHeader::copy(MMSMMFlagsHeader *this)
{
}

uint64_t MMSMMFlagsHeader::valueAsString(uint64_t a1, std::string *this)
{
  int v2 = *(unsigned __int8 *)(a1 + 17);
  if (v2 == 130)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      this->__r_.__value_.__l.__size_ = 7;
      unsigned int v4 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 7;
      unsigned int v4 = this;
    }
    *(_DWORD *)((char *)v4->__r_.__value_.__r.__words + 3) = 544367988;
    int v7 = 1953261926;
    goto LABEL_17;
  }
  if (v2 == 129)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      this->__r_.__value_.__l.__size_ = 7;
      unsigned int v4 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 7;
      unsigned int v4 = this;
    }
    *(_DWORD *)((char *)v4->__r_.__value_.__r.__words + 3) = 543520367;
    int v7 = 1869440370;
LABEL_17:
    LODWORD(v4->__r_.__value_.__l.__data_) = v7;
    unsigned int v6 = &v4->__r_.__value_.__s.__data_[7];
    goto LABEL_18;
  }
  if (v2 != 128) {
    return 0;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = 4;
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 4;
    uint64_t v3 = this;
  }
  LODWORD(v3->__r_.__value_.__l.__data_) = 543450209;
  unsigned int v6 = &v3->__r_.__value_.__s.__data_[4];
LABEL_18:
  *unsigned int v6 = 0;
  uint64_t v10 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v8 = a1 + 24;
  unsigned int v9 = v10;
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::size_type v11 = *(void *)(v8 + 8);
  }
  else
  {
    unsigned int v9 = (const std::string::value_type *)v8;
    std::string::size_type v11 = *(unsigned __int8 *)(v8 + 23);
  }
  std::string::append(this, v9, v11);
  return 1;
}

const char *MMSMMFlagsHeader::headerTypeName(MMSMMFlagsHeader *this)
{
  return "mmflags";
}

uint64_t _CTServerConnectionGetRegistrationCauseCode(uint64_t a1, int *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    xpc_object_t object = &v12;
    unsigned int v9 = "kRegistrationCauseCode";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v10);
    xpc_release(v10);
    xpc_object_t v10 = 0;
    xpc_object_t v11 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &v11);
    *a2 = -1;
    if (MEMORY[0x1853203E0](v11) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v11;
      unsigned int v9 = "kRegistrationCauseCode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)0xFFFFFFFFLL);
      xpc_release(v7);
      char v5 = CTLogRegistration();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        _CTServerConnectionGetRegistrationCauseCode_cold_1(a2, v5);
      }
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetRATSelection(uint64_t a1, const __CFString *a2, __CFString *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v17);
    xpc_release(object);
    xpc_object_t v7 = v17;
    xpc_object_t object = v17;
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v17);
    unsigned int v8 = toRatSelection(a2);
    xpc_object_t v9 = xpc_int64_create(v8);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kRegistrationRAT", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (CFEqual(a2, @"kCTRegistrationRATSelectionUMTS")
      || CFEqual(a2, @"kCTRegistrationRATSelectionGSM")
      || CFEqual(a2, @"kCTRegistrationRATSelectionDual")
      && (!a3
       || (int v16 = CFEqual(a3, @"kCTRegistrationRATSelectionGSM"), a3 = @"kCTRegistrationRATSelectionGSM",
                                                                       !v16)))
    {
      a3 = @"kCTRegistrationRATSelectionUMTS";
    }
    if (a3)
    {
      unsigned int v12 = toRatSelection(a3);
      xpc_object_t v13 = xpc_int64_create(v12);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v7, "kRegistrationPreferredRAT", v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
    }
    uint64_t v3 = SendXpcMessage(a1, &object, 0, v11);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionGetRATSelection(uint64_t a1, const __CFString **a2, const __CFString **a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v14);
    xpc_release(object);
    xpc_object_t v15 = v14;
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v14);
    xpc_object_t object = &v15;
    unsigned int v12 = "kRegistrationRATSelection";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_object_t v14 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v15, &v14);
    *a2 = @"kCTRegistrationRATSelectionUnknown";
    *a3 = @"kCTRegistrationRATSelectionUnknown";
    if (MEMORY[0x1853203E0](v14) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v14;
      unsigned int v12 = "kRegistrationRATSelection";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      unsigned __int8 v7 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      xpc_object_t object = &v14;
      unsigned int v12 = "kRegistrationPreferredRAT";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      unsigned __int8 v8 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      convertRatAndPreferred(v7, v8, a2, a3);
    }
    xpc_release(v14);
    xpc_release(v15);
  }
  return v3;
}

uint64_t _CTServerConnectionIsInHomeCountry(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    unsigned __int8 v8 = "kRegistrationIsInHomeCountry";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      unsigned __int8 v8 = "kRegistrationIsInHomeCountry";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetSignalStrength(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v14);
    xpc_release(object);
    xpc_object_t v15 = v14;
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v14);
    xpc_object_t object = &v15;
    unsigned int v12 = "kRegistrationSignalStrength";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_object_t v14 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v15, &v14);
    *a2 = 0;
    *a3 = 100;
    *a4 = 0;
    if (MEMORY[0x1853203E0](v14) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v14;
      unsigned int v12 = "kRegistrationSignalStrength";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
    }
    xpc_release(v14);
    xpc_release(v15);
  }
  return v4;
}

uint64_t _CTServerConnectionGetSignalStrengthDisplayValue(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetSignalStrengthDisplayValue", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    xpc_object_t v11 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v12, &v11);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x1853203E0](v11) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v11;
      xpc_object_t v9 = "kRegistrationSignalStrengthDisplayValue";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      xpc_object_t object = &v11;
      xpc_object_t v9 = "kRegistrationSignalStrengthMaxDisplayValue";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  return v3;
}

uint64_t _CTServerConnectionIsDataAttached(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    unsigned __int8 v8 = "kRegistrationIsDataAttached";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      unsigned __int8 v8 = "kRegistrationIsDataAttached";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyLocalizedOperatorName(uint64_t a1, void *a2)
{
  return _CTServerConnectionCopyCurrentOperatorName(a1, a2, (const void *)*MEMORY[0x1E4F1CFD0]);
}

uint64_t _CTServerConnectionCopyAbbreviatedOperatorName(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationAbbrevOperatorName";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(object[0], "kRegistrationAbbrevOperatorName"))
    {
      xpc_object_t v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationAbbrevOperatorName");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyProviderNameUsingCarrierBundle(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationProviderName", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v5 = xdict;
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v6 = xpc_BOOL_create(1);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kRegistrationUseCarrierBundle", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationProviderName"))
    {
      uint64_t v10 = 0;
      xpc_dictionary_get_value(xdict, "kRegistrationProviderName");
      uint64_t v9 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v10, (CFTypeRef *)&v9);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionFetchNetworkList(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  uint64_t v2 = CTLogRegistration();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18444A000, v2, OS_LOG_TYPE_DEFAULT, "Fetching network list", buf, 2u);
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)buf);
  xpc::dict_creator::operator()<char const*>("kRegistrationFetchNetworkList", (xpc_object_t *)buf, "kRequest", &v6);
  xpc_release(*(xpc_object_t *)buf);
  *(void *)buf = v6;
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v6);
  uint64_t v4 = SendXpcMessage(a1, (xpc_object_t *)buf, 0, v3);
  xpc_release(*(xpc_object_t *)buf);
  return v4;
}

uint64_t _CTServerConnectionCopyNetworkList(uint64_t a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v5 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)buf);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", v5, "kRequest", v38);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v44 = v38[0];
    v38[0] = xpc_null_create();
    xpc_release(v38[0]);
    *(void *)buf = &v44;
    *(void *)&uint8_t buf[8] = "kRegistrationNetworkList";
    xpc::dict::object_proxy::operator=((uint64_t)buf, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v44, &xdict);
    *a2 = 0;
    uint64_t v6 = MEMORY[0x1853203E0](xdict);
    uint64_t v7 = MEMORY[0x1E4F14590];
    if (v6 == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kRegistrationNetworkList"))
    {
      xpc_object_t xarray = 0;
      *(void *)buf = &xdict;
      *(void *)&uint8_t buf[8] = "kRegistrationNetworkList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &xarray);
      uint64_t v16 = MEMORY[0x1853203E0](xarray);
      uint64_t v17 = MEMORY[0x1E4F14568];
      if (v16 == MEMORY[0x1E4F14568])
      {
        size_t v18 = 0;
        uint64_t v19 = @"kCTRegistrationNetworkCode";
        unsigned int v20 = 1;
        do
        {
          if (xpc_array_get_count(xarray) <= v18) {
            break;
          }
          xpc_object_t v40 = 0;
          *(void *)buf = &xarray;
          *(void *)&uint8_t buf[8] = v18;
          xpc::array::object_proxy::operator xpc::dict((uint64_t)buf, &v40);
          if (MEMORY[0x1853203E0](v40) == v7)
          {
            v38[0] = 0;
            v38[1] = 0;
            uint64_t v39 = 0;
            memset(buf, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)std::string __p = *(_OWORD *)buf;
            uint64_t v37 = *(void *)&buf[16];
            float v21 = *(void ***)buf;
            if (buf[23] >= 0) {
              float v21 = __p;
            }
            v32[0] = &v40;
            v32[1] = v21;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v34);
            memset(buf, 0, 24);
            xpc::dyn_cast_or_default();
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(v34[0]);
            v34[0] = 0;
            if (SHIBYTE(v37) < 0) {
              operator delete(__p[0]);
            }
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v37 = 0;
            memset(buf, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)xpc_object_t v32 = *(_OWORD *)buf;
            uint64_t v33 = *(void *)&buf[16];
            v34[0] = &v40;
            uint64_t v22 = *(void ***)buf;
            if (buf[23] >= 0) {
              uint64_t v22 = v32;
            }
            v34[1] = v22;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v34, &v35);
            memset(buf, 0, 24);
            xpc::dyn_cast_or_default();
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(v35);
            xpc_object_t v35 = 0;
            if (SHIBYTE(v33) < 0) {
              operator delete(v32[0]);
            }
            memset(buf, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)xpc_object_t v32 = *(_OWORD *)buf;
            uint64_t v33 = *(void *)&buf[16];
            uint64_t v23 = *(void ***)buf;
            if (buf[23] >= 0) {
              uint64_t v23 = v32;
            }
            *(void *)buf = &v40;
            *(void *)&uint8_t buf[8] = v23;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, v34);
            int v24 = xpc::dyn_cast_or_default((xpc *)v34, 0);
            xpc_release(v34[0]);
            v34[0] = 0;
            if (SHIBYTE(v33) < 0) {
              operator delete(v32[0]);
            }
            RadioAccessTechnologyToRadioAccessTechnologyString(v24);
            size_t v25 = CTLogRegistration();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v26 = v19;
              if (MEMORY[0x1853203E0](xarray) == v17) {
                size_t count = xpc_array_get_count(xarray);
              }
              else {
                size_t count = 0;
              }
              if (v39 >= 0) {
                unint64_t v28 = v38;
              }
              else {
                unint64_t v28 = (void **)v38[0];
              }
              if (v37 >= 0) {
                char v29 = __p;
              }
              else {
                char v29 = (void **)__p[0];
              }
              memset(buf, 0, 24);
              ctu::cf::assign();
              *(_OWORD *)xpc_object_t v32 = *(_OWORD *)buf;
              uint64_t v33 = *(void *)&buf[16];
              char v30 = *(void ***)buf;
              if (buf[23] >= 0) {
                char v30 = v32;
              }
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v20 - 1;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(void *)&buf[10] = count;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v28;
              __int16 v46 = 2080;
              xpc_object_t v47 = v29;
              __int16 v48 = 2080;
              CFStringRef v49 = v30;
              _os_log_impl(&dword_18444A000, v25, OS_LOG_TYPE_DEFAULT, "Network list %d of %zu: %s (%s) (%s)", buf, 0x30u);
              if (SHIBYTE(v33) < 0) {
                operator delete(v32[0]);
              }
              uint64_t v17 = MEMORY[0x1E4F14568];
              uint64_t v19 = v26;
              uint64_t v7 = MEMORY[0x1E4F14590];
            }
            if (SHIBYTE(v37) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v39) < 0) {
              operator delete(v38[0]);
            }
          }
          xpc_release(v40);
          size_t v18 = v20++;
        }
        while (MEMORY[0x1853203E0](xarray) == v17);
      }
      *(void *)buf = 0;
      v38[0] = (void *)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(buf, (CFTypeRef *)v38);
      *a2 = *(void *)buf;
      xpc_release(xarray);
    }
    else
    {
      xpc_object_t v8 = CTLogRegistration();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        _CTServerConnectionCopyNetworkList_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
      }
    }
    xpc_release(xdict);
    xpc_release(v44);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyManualNetworkSelection(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationCurrentNetworkSelection";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(object[0], "kRegistrationCurrentNetworkSelection"))
    {
      xpc_object_t v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationCurrentNetworkSelection");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionSelectNetwork(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1)
  {
    if (theDict)
    {
      CFDictionaryGetValue(theDict, @"kCTRegistrationNetworkCode");
      memset(buf, 0, sizeof(buf));
      uint64_t v24 = 0;
      ctu::cf::assign();
      uint64_t v22 = 0;
      *(_OWORD *)std::string __p = 0u;
      uint64_t v3 = CTLogRegistration();
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        _CTServerConnectionSelectNetwork_cold_2(v4, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    else
    {
      xpc_object_t v5 = CTLogRegistration();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        _CTServerConnectionSelectNetwork_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      return 0;
    }
  }
  return v2;
}

uint64_t _CTServerConnectionAutomaticallySelectNetwork(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v8);
  xpc_release(object);
  xpc_object_t v2 = v8;
  xpc_object_t object = v8;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_object_t v3 = xpc_BOOL_create(1);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kRegistrationAutomaticNetworkSelection", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  uint64_t v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionGetNetworkSelectionMode(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v13;
    uint64_t v10 = "kRegistrationNetworkSelectionMode";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v13, &xdict);
    *a2 = @"kCTRegistrationNetworkSelectionModeAutomatic";
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (xpc_dictionary_get_value(xdict, "kRegistrationNetworkSelectionMode"))
      {
        xpc_object_t object = &xdict;
        uint64_t v10 = "kRegistrationNetworkSelectionMode";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
        int v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
        xpc_release(v8);
        *a2 = networkSelectionModeToNetworkSelectionModeString(v5);
        uint64_t v6 = CTLogRegistration();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
          _CTServerConnectionGetNetworkSelectionMode_cold_1();
        }
      }
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionGetNetworkSelectionState(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v13;
    uint64_t v10 = "kRegistrationNetworkSelectionState";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v13, &xdict);
    *a2 = @"kCTRegistrationNetworkSelectionStateUnknown";
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (xpc_dictionary_get_value(xdict, "kRegistrationNetworkSelectionState"))
      {
        xpc_object_t object = &xdict;
        uint64_t v10 = "kRegistrationNetworkSelectionState";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
        int v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
        xpc_release(v8);
        *a2 = networkSelectionStateToNetworkSelectionStateString(v5);
        uint64_t v6 = CTLogRegistration();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
          _CTServerConnectionGetNetworkSelectionState_cold_1();
        }
      }
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyServingPLMN(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationServingPLMN";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(object[0], "kRegistrationServingPLMN"))
    {
      xpc_object_t v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationServingPLMN");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyMobileCountryCode(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationMCC";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(object[0], "kRegistrationMCC"))
    {
      xpc_object_t v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationMCC");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyLastKnownCountryCode(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", (xpc_object_t *)&cf);
    xpc_release(object[0]);
    xpc_object_t v12 = (xpc_object_t)cf;
    CFTypeRef cf = xpc_null_create();
    xpc_release((xpc_object_t)cf);
    object[0] = &v12;
    object[1] = "kRegistrationLastMCC";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
    xpc_release(v10);
    xpc_object_t v10 = 0;
    object[0] = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(object[0], "kRegistrationLastMCC"))
    {
      CFTypeRef cf = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationLastMCC");
      uint64_t v8 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&v8);
      CFTypeRef v6 = cf;
      CFTypeRef cf = 0;
      *a2 = v6;
      uint64_t v7 = CTLogRegistration();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        _CTServerConnectionCopyLastKnownCountryCode_cold_1();
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    xpc_release(object[0]);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyMobileNetworkCode(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationMNC";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(object[0], "kRegistrationMNC"))
    {
      xpc_object_t v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationMNC");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionGetLocationAreaCode(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kRegistrationLAC";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kRegistrationLAC"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v8 = "kRegistrationLAC";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetCellID(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kRegistrationCellId";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kRegistrationCellId"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v8 = "kRegistrationCellId";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionDisableRegistration(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v8);
  xpc_release(object);
  xpc_object_t v2 = v8;
  xpc_object_t object = v8;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_object_t v3 = xpc_BOOL_create(1);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kRegistrationBrickMode", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  uint64_t v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionEnableRegistration(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v8);
  xpc_release(object);
  xpc_object_t v2 = v8;
  xpc_object_t object = v8;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_object_t v3 = xpc_BOOL_create(0);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kRegistrationBrickMode", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  uint64_t v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionGetEmergencyCallBackMode(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    xpc_object_t v8 = "kRegistrationEmergencyCallBackMode";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationEmergencyCallBackMode"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v8 = "kRegistrationEmergencyCallBackMode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetE911OverLTEModeStatus(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetE911State", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v9 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kE911State"))
    {
      object[0] = &xdict;
      object[1] = "kE911State";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionGetE911OverWifiModeStatus(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetWifiE911State", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v9 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kWifiE911State"))
    {
      object[0] = &xdict;
      object[1] = "kWifiE911State";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionGetActiveWirelessTechnology(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v12;
    xpc_object_t v9 = "kRegistrationActiveWirelessTech";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v10);
    xpc_release(v10);
    xpc_object_t v10 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = @"kCTWirelessTechnologyUnknown";
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationActiveWirelessTech"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v9 = "kRegistrationActiveWirelessTech";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      int v5 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
      *a2 = wirelessTechnologyToWirelessTechnologyString(v5);
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetEnableOnlyHomeNetwork(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_BOOL_create(a2 != 0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kRegistrationOnlyHomeNetwork", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetEnableOnlyHomeNetwork(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    uint64_t v8 = "kRegistrationOnlyHomeNetwork";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 1;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationOnlyHomeNetwork"))
    {
      xpc_object_t object = &xdict;
      uint64_t v8 = "kRegistrationOnlyHomeNetwork";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, (const object *)1);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionIsCDMAInternationalRoamingSettingAllowed(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    uint64_t v8 = "kRegistrationIsCDMAInternationalRoamingSettingAllowed";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationIsCDMAInternationalRoamingSettingAllowed"))
    {
      xpc_object_t object = &xdict;
      uint64_t v8 = "kRegistrationIsCDMAInternationalRoamingSettingAllowed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetCDMAInternationalRoaming(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    uint64_t v8 = "kRegistrationCDMAInternationalRoaming";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationCDMAInternationalRoaming"))
    {
      xpc_object_t object = &xdict;
      uint64_t v8 = "kRegistrationCDMAInternationalRoaming";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCDMAInternationalRoaming(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", object, "kRequest", &xdict);
  xpc_release(object[0]);
  xpc_object_t v6 = xdict;
  xpc_object_t v14 = xdict;
  xpc_object_t xdict = xpc_null_create();
  xpc_release(xdict);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kRegistrationCDMAInternationalRoaming", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t xdict = xpc_null_create();
  uint64_t v9 = SendXpcMessage(a1, &v14, &xdict);
  if (a3)
  {
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (xpc_dictionary_get_value(xdict, "kRegistrationCDMAInternationalRoaming"))
      {
        object[0] = &xdict;
        object[1] = "kRegistrationCDMAInternationalRoaming";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
        xpc_release(v12);
      }
    }
  }
  xpc_release(xdict);
  xpc_release(v14);
  return v9;
}

uint64_t _CTServerConnectionCopySupportedDataRates(uint64_t a1, __CFArray **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v17 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v17;
    xpc_object_t v14 = "kRegistrationSupportedDataRates";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v17, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationSupportedDataRates"))
    {
      xpc_object_t xarray = 0;
      xpc_object_t object = &xdict;
      xpc_object_t v14 = "kRegistrationSupportedDataRates";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1853203E0](xarray) == MEMORY[0x1E4F14568])
      {
        size_t count = xpc_array_get_count(xarray);
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], count, MEMORY[0x1E4F1D510]);
        if (count)
        {
          for (uint64_t i = 0; i != (const char *)count; ++i)
          {
            xpc_object_t object = &xarray;
            xpc_object_t v14 = i;
            xpc::array::object_proxy::operator xpc::object((uint64_t)&object, &v11);
            int v8 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
            xpc_release(v11);
            DataRateString = getDataRateString(v8);
            CFArrayAppendValue(Mutable, DataRateString);
          }
        }
        *a2 = Mutable;
      }
      xpc_release(xarray);
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v2;
}

uint64_t _CTServerConnectionShouldDiscourageDisableLteDataRate(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    int v8 = "kRegistrationDiscourageDisableLteDataRate";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationDiscourageDisableLteDataRate"))
    {
      xpc_object_t object = &xdict;
      int v8 = "kRegistrationDiscourageDisableLteDataRate";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionShouldWarnDisabledLteMayImpactService(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    int v8 = "kRegistrationShouldWarnLteDisabled";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationShouldWarnLteDisabled"))
    {
      xpc_object_t object = &xdict;
      int v8 = "kRegistrationShouldWarnLteDisabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionFetchTimeFromNetwork(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 - 1 <= 1 && a3)
  {
    *a3 = 2;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kFetchTimeFromNetwork", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v7 = xdict;
    xpc_object_t v15 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v8 = xpc_int64_create(a2);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kNetworkTimeFetchRequestType", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v15, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kNetworkTimeFetchResult"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v17 = "kNetworkTimeFetchResult";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v13);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v13, (const object *)2);
      xpc_release(v13);
    }
    xpc_object_t v10 = CTLogRegistration();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *a3;
      LODWORD(object) = 67109376;
      HIDWORD(object) = a2;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v11;
      _os_log_impl(&dword_18444A000, v10, OS_LOG_TYPE_DEFAULT, "Fetching time from network (%d) result was: %d", (uint8_t *)&object, 0xEu);
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v3;
}

uint64_t _CTServerConnectionSetTimeCacheValidityPeriod(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSetTimeCacheValidityPeriod", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kValidityPeriod", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionSetCapability(uint64_t a1, const void *a2, int a3)
{
  return _CTServerConnectionSetCapabilityExtended(a1, a2, a3, 0);
}

uint64_t _CTServerConnectionSetCapabilityExtended(uint64_t a1, CFTypeRef cf1, int a3, uint64_t a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1
    && cf1
    && (CFEqual(cf1, @"kCTCapabilityVoLTE")
     || CFEqual(cf1, @"kCTCapabilityWiFiCalling")
     || CFEqual(cf1, @"kCTCapabilityPhoneServices")))
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", &object, "kRequest", &v17);
    xpc_release(object);
    xpc_object_t v9 = v17;
    xpc_object_t object = v17;
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v17);
    xpc_object_t v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kTelephonyCapability", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t v12 = xpc_BOOL_create(a3 != 0);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kTelephonyCapabilityStatus", v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (a4)
    {
      xpc_object_t v14 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(v9, "kTelephonyCapabilityInformation", v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
    xpc_object_t v17 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &object, &v17);
    xpc_release(v17);
    xpc_release(object);
  }
  return v4;
}

unint64_t _CTServerConnectionGetCapabilityStatus(uint64_t a1, const void *a2, unsigned char *a3)
{
  CFTypeRef cf = 0;
  unint64_t CapabilityStatusExtended = _CTServerConnectionGetCapabilityStatusExtended(a1, a2, a3, (xpc_object_t *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return CapabilityStatusExtended;
}

unint64_t _CTServerConnectionCanSetCapability(uint64_t a1, const void *a2, unsigned char *a3)
{
  CFTypeRef cf = 0;
  unint64_t CanSetCapabilityExtended = _CTServerConnectionCanSetCapabilityExtended(a1, a2, a3, (xpc_object_t *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return CanSetCapabilityExtended;
}

unint64_t _CTServerConnectionCanSetCapabilityExtended(uint64_t a1, CFTypeRef cf1, unsigned char *a3, xpc_object_t *a4)
{
  unint64_t v4 = 0x1600000000;
  LODWORD(v5) = 1;
  if (cf1 && a1 && a3)
  {
    if (!CFEqual(cf1, @"kCTCapabilityVoLTE")
      && !CFEqual(cf1, @"kCTCapabilityWiFiCalling")
      && !CFEqual(cf1, @"kCTCapabilityPhoneServices"))
    {
      LODWORD(v5) = 1;
      return v4 & 0xFFFFFFFF00000000 | v5;
    }
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v10 = xdict;
    xpc_object_t v23 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "kTelephonyCapability", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t object = &v23;
    unsigned int v20 = "kTelephonyCapabilityCanSet";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v21);
    xpc_release(v21);
    xpc_object_t v21 = 0;
    xpc_object_t xdict = xpc_null_create();
    unint64_t v5 = SendXpcMessageWithCaching(a1, &v23, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      *a3 = 0;
      if (!xpc_dictionary_get_value(xdict, "kTelephonyCapabilityCanSet"))
      {
        unint64_t v4 = 0x2300000000;
        LODWORD(v5) = 1;
        goto LABEL_11;
      }
      xpc_object_t object = &xdict;
      unsigned int v20 = "kTelephonyCapabilityCanSet";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v18);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      xpc_release(v18);
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kTelephonyCapabilityInformation");
      if (a4 && value)
      {
        xpc_object_t v18 = 0;
        xpc_object_t object = &xdict;
        unsigned int v20 = "kTelephonyCapabilityInformation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        xpc::bridge((uint64_t *)&cf, (xpc *)&v16, v15);
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v18, &cf);
        if (cf) {
          CFRelease(cf);
        }
        xpc_release(v16);
        *a4 = v18;
      }
    }
    unint64_t v4 = v5 & 0xFFFFFFFF00000000;
LABEL_11:
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionPhoneServicesAccountStatusChanged(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationUpdateRegisteredLocationStatus", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  if (a2)
  {
    xpc_object_t v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kTelephonyCapabilityInformation", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
  }
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v8;
}

unint64_t _CTServerConnectionRegistrationNotificationAssertionCreate(const void *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = 0x1600000000;
  unsigned int v4 = 1;
  if (a1 && a3)
  {
    *a3 = 0;
    CFAllocatorRef v8 = CFGetAllocator(a1);
    if (v9)
    {
      xpc_object_t v10 = v9;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kRegistrationAddNotificationAssertion", &object, "kRequest", &xdict);
      xpc_release(object);
      xpc_object_t v11 = xdict;
      xpc_object_t object = xdict;
      xpc_object_t xdict = xpc_null_create();
      xpc_release(xdict);
      if (a2)
      {
        xpc_object_t v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v12) {
          xpc_object_t v12 = xpc_null_create();
        }
        xpc_dictionary_set_value(v11, "kRegistrationAssertionName", v12);
        xpc_object_t v13 = xpc_null_create();
        xpc_release(v12);
        xpc_release(v13);
      }
      xpc_object_t xdict = xpc_null_create();
      uint64_t v14 = SendXpcMessage((uint64_t)a1, &object, &xdict);
      unsigned int v4 = v14;
      unint64_t v3 = v14 & 0xFFFFFFFF00000000;
      if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
        && xpc_dictionary_get_value(xdict, "kRegistrationAddNotificationAssertion"))
      {
        *a3 = v10;
      }
      else
      {
        CFRelease(v10);
        unsigned int v4 = 2;
      }
      xpc_release(xdict);
      xpc_release(object);
    }
    else
    {
      unint64_t v3 = 0;
      unsigned int v4 = 0;
    }
  }
  return v4 | v3;
}

uint64_t _CTServerConnectionEnableEmergencyCallBackMode(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_BOOL_create(a2 != 0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kRegistrationEmergencyCallBackMode", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionAddVictimFreq(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", object, "kRequest", &v22);
  xpc_release(object[0]);
  xpc_object_t xdict = v22;
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v22);
  object[0] = &xdict;
  object[1] = "kRegistrationAdd";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_object_t v10 = xpc_int64_create(a2);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRegistrationDesenseClient", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_uint64_create(a3);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRegistrationVictimFreq", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(a4);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRegistrationBandwidth", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(a5);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRegistrationPriority", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  object[0] = xpc_null_create();
  uint64_t v18 = SendXpcMessage(a1, &xdict, object);
  xpc_release(object[0]);
  xpc_release(xdict);
  return v18;
}

uint64_t _CTServerConnectionRemoveVictimFreq(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", object, "kRequest", &v14);
  xpc_release(object[0]);
  xpc_object_t xdict = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  object[0] = &xdict;
  object[1] = "kRegistrationRemove";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_object_t v6 = xpc_int64_create(a2);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRegistrationDesenseClient", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_uint64_create(a3);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRegistrationVictimFreq", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  object[0] = xpc_null_create();
  uint64_t v10 = SendXpcMessage(a1, &xdict, object);
  xpc_release(object[0]);
  xpc_release(xdict);
  return v10;
}

uint64_t _CTServerConnectionClearVictimFreq(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", &object, "kRequest", &v12);
  xpc_release(object);
  xpc_object_t xdict = v12;
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v12);
  xpc_object_t object = &xdict;
  uint64_t v10 = "kRegistrationClear";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_object_t v4 = xpc_int64_create(a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRegistrationDesenseClient", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t object = &xdict;
  uint64_t v10 = "kRegistrationVictimFreq";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_object_t object = xpc_null_create();
  uint64_t v6 = SendXpcMessage(a1, &xdict, &object);
  xpc_release(object);
  xpc_release(xdict);
  return v6;
}

uint64_t _CTServerConnectionBlockBBFreqReport(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v4 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v5 = xpc_BOOL_create(a2 != 0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kRegistrationBlockBBFreqReport", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v9 = xpc_null_create();
  uint64_t v7 = SendXpcMessage(a1, &object, &v9);
  xpc_release(v9);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionCopyListVictimFreq(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    xpc_object_t v10 = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationVictimFreq";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    object[0] = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(object[0], "kRegistrationVictimFreq"))
    {
      xpc_object_t v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationVictimFreq");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionGetUplinkFreq(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v13;
    xpc_object_t v10 = "kRegistrationUplinkFreq";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &xdict);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRegistrationUplinkFreq")
      && xpc_dictionary_get_value(xdict, "kRegistrationBandwidth"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v10 = "kRegistrationUplinkFreq";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
      xpc_object_t object = &xdict;
      xpc_object_t v10 = "kRegistrationBandwidth";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v3;
}

uint64_t _CTServerConnectionCopyRegistrationInfo(const void *a1, __CFDictionary **a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v40 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationCopyInfo", (xpc_object_t *)&object, "kRequest", &xdict);
    xpc_release((xpc_object_t)object);
    xpc_object_t v40 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    *(void *)&long long object = &v40;
    *((void *)&object + 1) = "kRegistrationStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v38);
    xpc_release(v38);
    xpc_object_t v38 = 0;
    *(void *)&long long object = &v40;
    *((void *)&object + 1) = "kRegistrationDisplayStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v37);
    xpc_release(v37);
    xpc_object_t v37 = 0;
    *(void *)&long long object = &v40;
    *((void *)&object + 1) = "kRegistrationIsInHomeCountry";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v36);
    xpc_release(v36);
    xpc_object_t v36 = 0;
    *(void *)&long long object = &v40;
    *((void *)&object + 1) = "kRegistrationIsForcedRegisteredHome";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v35);
    xpc_release(v35);
    xpc_object_t v35 = 0;
    *(void *)&long long object = &v40;
    *((void *)&object + 1) = "kRegistrationCampOnly";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v34);
    xpc_release(v34);
    xpc_object_t v34 = 0;
    *(void *)&long long object = &v40;
    *((void *)&object + 1) = "kRegistrationAgentStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v33);
    xpc_release(v33);
    xpc_object_t v33 = 0;
    *(void *)&long long object = &v40;
    *((void *)&object + 1) = "kRegistrationIMSContext";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v32);
    xpc_release(v32);
    xpc_object_t v32 = 0;
    xpc_object_t xdict = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage((uint64_t)a1, &v40, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      CFAllocatorRef v5 = CFGetAllocator(a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v7 = Mutable;
      if (Mutable) {
        xpc_object_t v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
      }
      else {
        xpc_object_t v8 = 0;
      }
      if (v8)
      {
        if (xpc_dictionary_get_value(xdict, "kRegistrationStatus"))
        {
          *(void *)&long long object = &xdict;
          *((void *)&object + 1) = "kRegistrationStatus";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          int v9 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          xpc_object_t v10 = registrationStatusToRegistrationStatusString(v9);
          xpc_object_t v11 = CTLogRegistration();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(void *)((char *)&object + 4) = v10;
            _os_log_impl(&dword_18444A000, v11, OS_LOG_TYPE_DEFAULT, "Registration status: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, @"kCTRegistrationStatus", v10);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationDisplayStatus"))
        {
          *(void *)&long long object = &xdict;
          *((void *)&object + 1) = "kRegistrationDisplayStatus";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          int v12 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          xpc_object_t v13 = registrationStatusToRegistrationStatusString(v12);
          xpc_object_t v14 = CTLogRegistration();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(void *)((char *)&object + 4) = v13;
            _os_log_impl(&dword_18444A000, v14, OS_LOG_TYPE_DEFAULT, "Registration display status: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, @"kCTRegistrationDisplayStatus", v13);
        }
        xpc_object_t value = xpc_dictionary_get_value(xdict, "kRegistrationIsInHomeCountry");
        xpc_object_t v16 = (const void **)MEMORY[0x1E4F1CFD0];
        xpc_object_t v17 = (const void **)MEMORY[0x1E4F1CFC8];
        if (value)
        {
          *(void *)&long long object = &xdict;
          *((void *)&object + 1) = "kRegistrationIsInHomeCountry";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          int v18 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          if (v18) {
            uint64_t v19 = v16;
          }
          else {
            uint64_t v19 = v17;
          }
          unsigned int v20 = *v19;
          xpc_object_t v21 = CTLogRegistration();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(void *)((char *)&object + 4) = v20;
            _os_log_impl(&dword_18444A000, v21, OS_LOG_TYPE_DEFAULT, "In Home Country: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, @"kCTRegistrationInHomeCountry", v20);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationIsForcedRegisteredHome"))
        {
          *(void *)&long long object = &xdict;
          *((void *)&object + 1) = "kRegistrationIsForcedRegisteredHome";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          int v22 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          if (v22) {
            xpc_object_t v23 = v16;
          }
          else {
            xpc_object_t v23 = v17;
          }
          uint64_t v24 = *v23;
          uint64_t v25 = CTLogRegistration();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(void *)((char *)&object + 4) = v24;
            _os_log_impl(&dword_18444A000, v25, OS_LOG_TYPE_DEFAULT, "Forced registered home: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, @"kCTRegistrationIsForcedRegisteredHome", v24);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationCampOnly"))
        {
          *(void *)&long long object = &xdict;
          *((void *)&object + 1) = "kRegistrationCampOnly";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          int v26 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          if (v26) {
            uint64_t v27 = v16;
          }
          else {
            uint64_t v27 = v17;
          }
          unint64_t v28 = *v27;
          char v29 = CTLogRegistration();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(void *)((char *)&object + 4) = v28;
            _os_log_impl(&dword_18444A000, v29, OS_LOG_TYPE_DEFAULT, "Camp only: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, @"kCTCampOnly", v28);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationAgentStatus"))
        {
          *(void *)&long long object = 0;
          xpc_dictionary_get_value(xdict, "kRegistrationAgentStatus");
          xpc_object_t v31 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v31);
          CFDictionaryAddValue(v7, @"kCTRegistrationIMSStatus", (const void *)object);
          if ((void)object) {
            CFRelease((CFTypeRef)object);
          }
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationIMSContext"))
        {
          *(void *)&long long object = 0;
          xpc_dictionary_get_value(xdict, "kRegistrationIMSContext");
          xpc_object_t v31 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v31);
          CFDictionaryAddValue(v7, @"kCTRegistrationIMSContext", (const void *)object);
          if ((void)object) {
            CFRelease((CFTypeRef)object);
          }
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationIMSTransportType"))
        {
          *(void *)&long long object = 0;
          xpc_dictionary_get_value(xdict, "kRegistrationIMSTransportType");
          xpc_object_t v31 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v31);
          CFDictionaryAddValue(v7, @"kCTRegistrationIMSTransportType", (const void *)object);
          if ((void)object) {
            CFRelease((CFTypeRef)object);
          }
        }
        *a2 = v7;
      }
      else if (Mutable)
      {
        CFRelease(Mutable);
      }
    }
    xpc_release(xdict);
    xpc_release(v40);
  }
  return v2;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _CTServerConnectionCopyBandInfo(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationCopyBandInfo", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v14 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v14;
    xpc_object_t v11 = "kRegistrationBands";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v14, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kRegistrationBands"))
    {
      uint64_t v9 = 0;
      xpc_object_t object = &xdict;
      xpc_object_t v11 = "kRegistrationBands";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v7, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v7);
      *a2 = v9;
    }
    xpc_release(xdict);
    xpc_release(v14);
  }
  return v2;
}

uint64_t _CTServerConnectionSetBandInfo(uint64_t a1, ctu *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationSetBandInfo", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v5 = v11;
    xpc_object_t object = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v6);
    xpc_dictionary_set_value(v5, "kRegistrationBands", value);
    xpc_object_t v7 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v7);
    xpc_release(value);
    xpc_object_t value = 0;
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionGetCDRXWithLTEState(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetLTEWithCDRXState", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v10 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v10, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kLTEWithCDRXState"))
    {
      object[1] = "kLTEWithCDRXState";
      xpc_object_t v8 = 0;
      object[0] = &xdict;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      int v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      *a2 = lteWithCDRXStateAsString(v5);
      xpc_release(v8);
    }
    xpc_release(xdict);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCivicInfoBasedOnCurrentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetCivicInfoBasedOnCurrentLocation", &object, "kRequest", &v15);
    xpc_release(object);
    xpc_object_t v4 = v15;
    xpc_object_t object = v15;
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v15);
    int v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      int v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kCountryCodeBasedOnCurrentLocation", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kStateBasedOnCurrentLocation", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    uint64_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      uint64_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kCityBasedOnCurrentLocation", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kPostalCodeBasedOnCurrentLocation", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v13);
    xpc_release(object);
  }
  return v2;
}

unint64_t _CTServerConnectionPhoneServicesGetDeviceList(uint64_t a1, ctu *a2, void *a3)
{
  unint64_t v3 = 0x1600000000;
  LODWORD(v4) = 1;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesGetDeviceList", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v8 = xdict;
    xpc_object_t v19 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v9);
    xpc_dictionary_set_value(v8, "kTelephonyCapability", value);
    xpc_object_t v10 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v10);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v19, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (!xpc_dictionary_get_value(xdict, "kPhoneServicesGetDeviceList"))
      {
        unint64_t v3 = 0x2300000000;
        LODWORD(v4) = 1;
        goto LABEL_10;
      }
      uint64_t v16 = 0;
      object[0] = &xdict;
      object[1] = "kPhoneServicesGetDeviceList";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v14);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v14, v11);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v16, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v14);
      *a3 = v16;
    }
    unint64_t v3 = v4 & 0xFFFFFFFF00000000;
LABEL_10:
    xpc_release(xdict);
    xpc_release(v19);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

unint64_t _CTServerConnectionPhoneServicesGetDeviceInfo(uint64_t a1, ctu *a2, void *a3)
{
  unint64_t v3 = 0x1600000000;
  LODWORD(v4) = 1;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesGetDeviceInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v8 = xdict;
    xpc_object_t v19 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v9);
    xpc_dictionary_set_value(v8, "kTelephonyCapability", value);
    xpc_object_t v10 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v10);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v19, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (!xpc_dictionary_get_value(xdict, "kPhoneServicesGetDeviceInfo"))
      {
        unint64_t v3 = 0x2300000000;
        LODWORD(v4) = 1;
        goto LABEL_10;
      }
      uint64_t v16 = 0;
      object[0] = &xdict;
      object[1] = "kPhoneServicesGetDeviceInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v14);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v14, v11);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v16, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v14);
      *a3 = v16;
    }
    unint64_t v3 = v4 & 0xFFFFFFFF00000000;
LABEL_10:
    xpc_release(xdict);
    xpc_release(v19);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

uint64_t _CTServerConnectionPhoneServicesAddDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesAddDevice", &object, "kRequest", &v21);
    xpc_release(object);
    xpc_object_t v9 = v21;
    xpc_object_t object = v21;
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v21);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    xpc_object_t value = 0;
    if (a3)
    {
      ctu::cf_to_xpc((uint64_t *)&v19, a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v19);
      xpc_object_t v13 = v19;
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v19);
      xpc_object_t v19 = 0;
    }
    ctu::cf_to_xpc((uint64_t *)&v18, a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    xpc_object_t v14 = v18;
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v18);
    xpc_object_t v18 = 0;
    xpc_object_t v15 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionPhoneServicesRemoveDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesRemoveDevice", &object, "kRequest", &v21);
    xpc_release(object);
    xpc_object_t v9 = v21;
    xpc_object_t object = v21;
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v21);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    xpc_object_t value = 0;
    if (a3)
    {
      ctu::cf_to_xpc((uint64_t *)&v19, a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v19);
      xpc_object_t v13 = v19;
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v19);
      xpc_object_t v19 = 0;
    }
    ctu::cf_to_xpc((uint64_t *)&v18, a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    xpc_object_t v14 = v18;
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v18);
    xpc_object_t v18 = 0;
    xpc_object_t v15 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionPhoneServicesEnableDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesEnableDevice", &object, "kRequest", &v21);
    xpc_release(object);
    xpc_object_t v9 = v21;
    xpc_object_t object = v21;
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v21);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    xpc_object_t value = 0;
    if (a3)
    {
      ctu::cf_to_xpc((uint64_t *)&v19, a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v19);
      xpc_object_t v13 = v19;
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v19);
      xpc_object_t v19 = 0;
    }
    ctu::cf_to_xpc((uint64_t *)&v18, a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    xpc_object_t v14 = v18;
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v18);
    xpc_object_t v18 = 0;
    xpc_object_t v15 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionPhoneServicesDisableDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesDisableDevice", &object, "kRequest", &v21);
    xpc_release(object);
    xpc_object_t v9 = v21;
    xpc_object_t object = v21;
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v21);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    xpc_object_t value = 0;
    if (a3)
    {
      ctu::cf_to_xpc((uint64_t *)&v19, a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v19);
      xpc_object_t v13 = v19;
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v19);
      xpc_object_t v19 = 0;
    }
    ctu::cf_to_xpc((uint64_t *)&v18, a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    xpc_object_t v14 = v18;
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v18);
    xpc_object_t v18 = 0;
    xpc_object_t v15 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionIsEncryptedIdentitySupported(uint64_t a1, ctu *a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a2 && a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetIdentityProtectionSupport", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v7 = xdict;
    xpc_object_t v15 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v8);
    xpc_dictionary_set_value(v7, "kIdentityProtectionType", value);
    xpc_object_t v9 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v9);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v15, &xdict);
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kIdentityProtectionSupport"))
    {
      object[0] = &xdict;
      object[1] = "kIdentityProtectionSupport";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v3;
}

void NetworkNotification::NetworkNotification(NetworkNotification *this, CFStringRef theString)
{
  *(unsigned char *)this = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 1) = CFStringCreateMutableCopy(0, 0, theString);
  NetworkNotification::_parseNotificationString(this);
  if (!*((_DWORD *)this + 6))
  {
    CFURLRef v3 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *((CFStringRef *)this + 1), 0);
    *((void *)this + 2) = v3;
    if (v3) {
      *((_DWORD *)this + 6) = 1;
    }
  }
}

void NetworkNotification::_parseNotificationString(NetworkNotification *this)
{
  CFStringRef v2 = (const __CFString *)*((void *)this + 1);
  if (!v2) {
    return;
  }
  CFIndex Length = CFStringGetLength(v2);
  if (!Length) {
    return;
  }
  CFIndex v4 = Length;
  CFRange v5 = CFStringFind((CFStringRef)*((void *)this + 1), @"?", 0);
  if (v5.location == -1) {
    v6.length = v4;
  }
  else {
    v6.length = v5.location;
  }
  v6.CFIndex location = 0;
  xpc_object_t v7 = (NetworkNotification *)CFStringCreateWithSubstring(0, *((CFStringRef *)this + 1), v6);
  xpc_object_t v8 = v7;
  if (!v7) {
    goto LABEL_36;
  }
  int TypeForName = NetworkNotification::_GetTypeForName(v7, (const __CFString *)v7);
  *((_DWORD *)this + 6) = TypeForName;
  uint64_t v10 = TypeForName - 1;
  if (v10 > 2) {
    goto LABEL_36;
  }
  xpc_object_t v11 = *off_1E5265420[v10];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)this + 4) = Mutable;
  CFDictionarySetValue(Mutable, v11, v8);
  if (v5.location == -1) {
    goto LABEL_36;
  }
  CFIndex v13 = v5.location + v5.length;
  if (v5.location + v5.length == -1) {
    goto LABEL_36;
  }
  v14.length = v4 - v13;
  if (v4 - v13 < 1) {
    goto LABEL_36;
  }
  while (1)
  {
    CFRange result = (CFRange)xmmword_1845DCC70;
    v14.CFIndex location = v13;
    int v15 = CFStringFindWithOptions(*((CFStringRef *)this + 1), @";", v14, 0, &result);
    CFIndex location = result.location;
    CFIndex v16 = result.length;
    CFIndex v18 = v15 ? result.location : v4;
    if (v18 - v13 >= 1) {
      break;
    }
LABEL_26:
    CFIndex v13 = v16 + location;
    v14.length = v4 - (v16 + location);
    if (v15) {
      BOOL v24 = v13 == -1;
    }
    else {
      BOOL v24 = 1;
    }
    if (v24 || v4 - (v16 + location) <= 0) {
      goto LABEL_36;
    }
  }
  CFRange v27 = (CFRange)xmmword_1845DCC70;
  v29.CFIndex location = v13;
  v29.length = v18 - v13;
  if (CFStringFindWithOptions(*((CFStringRef *)this + 1), @"=", v29, 0, &v27))
  {
    if (v27.location != v13)
    {
      CFIndex v19 = v27.length + v27.location;
      CFIndex v20 = v18 - (v27.length + v27.location);
      if (v20)
      {
        v30.CFIndex location = v13;
        v30.length = v27.location - v13;
        CFStringRef v21 = CFStringCreateWithSubstring(0, *((CFStringRef *)this + 1), v30);
        v31.CFIndex location = v19;
        v31.length = v20;
        CFStringRef v22 = CFStringCreateWithSubstring(0, *((CFStringRef *)this + 1), v31);
        xpc_object_t v23 = (__CFString *)v22;
        if (v21 && v22)
        {
          if (NetworkNotification::_NotificationKeyIsValidForType(this, v21)) {
            NetworkNotification::setValueForKey(this, v23, v21, 0);
          }
        }
        else if (!v21)
        {
          goto LABEL_24;
        }
        CFRelease(v21);
LABEL_24:
        if (v23) {
          CFRelease(v23);
        }
        goto LABEL_26;
      }
    }
  }
  *((_DWORD *)this + 6) = 0;
LABEL_36:
  if (!*((_DWORD *)this + 6))
  {
    int v26 = (const void *)*((void *)this + 4);
    if (v26)
    {
      CFRelease(v26);
      *((void *)this + 4) = 0;
    }
  }
  if (v8) {
    CFRelease(v8);
  }
}

NetworkNotification *NetworkNotification::NetworkNotification(NetworkNotification *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = __p;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = v6;
  }
  CFStringRef v8 = 0;
  if (ctu::cf::convert_copy()) {
    CFStringRef v3 = v8;
  }
  else {
    CFStringRef v3 = 0;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  NetworkNotification::NetworkNotification(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  CFStringRef v3;
  std::string __p;
  std::string v6;
  std::string v7;
  CFStringRef v8;

  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = __p;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = v6;
  }
  CFStringRef v8 = 0;
  if (ctu::cf::convert_copy()) {
    CFStringRef v3 = v8;
  }
  else {
    CFStringRef v3 = 0;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  NetworkNotification::NetworkNotification(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void NetworkNotification::~NetworkNotification(NetworkNotification *this)
{
  CFStringRef v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = (const void *)*((void *)this + 4);
  if (v3) {
    CFRelease(v3);
  }
  CFIndex v4 = (const void *)*((void *)this + 1);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t NetworkNotification::type(NetworkNotification *this)
{
  return *((unsigned int *)this + 6);
}

const void *NetworkNotification::name(NetworkNotification *this)
{
  CFDictionaryRef v2 = (const __CFDictionary *)*((void *)this + 4);
  if (v2 && (unsigned int v3 = *((_DWORD *)this + 6) - 1, v3 <= 2)) {
    return CFDictionaryGetValue(v2, *off_1E5265420[v3]);
  }
  else {
    return 0;
  }
}

uint64_t NetworkNotification::parsedNotification(NetworkNotification *this)
{
  return *((void *)this + 4);
}

CFMutableStringRef NetworkNotification::copyUnparsedNotification(CFStringRef *this)
{
  return CFStringCreateMutableCopy(0, 0, this[1]);
}

uint64_t NetworkNotification::notificationString(NetworkNotification *this)
{
  if (*(unsigned char *)this)
  {
    CFStringRef v2 = (const __CFString *)NetworkNotification::name(this);
    if (v2)
    {
      CFStringRef v3 = v2;
      CFRelease(*((CFTypeRef *)this + 1));
      *((void *)this + 1) = CFStringCreateMutableCopy(0, 0, v3);
      if ((unint64_t)CFDictionaryGetCount(*((CFDictionaryRef *)this + 4)) >= 2)
      {
        v5[0] = *((CFMutableStringRef *)this + 1);
        v5[1] = 0;
        CFStringAppend(v5[0], @"?");
        CFDictionaryApplyFunction(*((CFDictionaryRef *)this + 4), (CFDictionaryApplierFunction)_AppendKeyValueToString, v5);
      }
    }
  }
  return *((void *)this + 1);
}

void _AppendKeyValueToString(const void *a1, const void *a2, int *a3)
{
  if (!CFEqual(a1, @"notification"))
  {
    std::string v6 = *(__CFString **)a3;
    if (a3[2] < 1) {
      CFStringAppendFormat(v6, 0, @"%@%@%@", a1, @"=", a2);
    }
    else {
      CFStringAppendFormat(v6, 0, @"%@%@%@%@", @";", a1, @"=", a2);
    }
    ++a3[2];
  }
}

uint64_t NetworkNotification::url(NetworkNotification *this)
{
  return *((void *)this + 2);
}

uint64_t NetworkNotification::setValueForKey(NetworkNotification *this, __CFString *a2, CFStringRef theString1, int a4)
{
  uint64_t result = 0;
  if (a2 && theString1 && *((void *)this + 4))
  {
    int v8 = *((_DWORD *)this + 6);
    if (v8 == 3) {
      goto LABEL_7;
    }
    if (v8 != 2)
    {
      if (v8 == 1)
      {
LABEL_7:
        CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), theString1, a2);
        uint64_t result = 1;
        if (a4 == 1) {
          *(unsigned char *)this = 1;
        }
        return result;
      }
      return 0;
    }
    xpc_object_t value = 0;
    FinalFormForCFStringRef Value = NetworkNotification::_GetFinalFormForValue(this, theString1, a2, (CFNumberRef *)&value);
    uint64_t v10 = value;
    if (!value) {
      return 0;
    }
    BOOL v11 = FinalFormForValue;
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), theString1, value);
    if (v11) {
      CFRelease(v10);
    }
    if (a4 == 1) {
      *(unsigned char *)this = 1;
    }
    return 1;
  }
  return result;
}

BOOL NetworkNotification::_GetFinalFormForValue(NetworkNotification *this, CFStringRef theString1, const __CFString *a3, CFNumberRef *a4)
{
  std::string v7 = (NetworkNotification *)CFStringCompare(theString1, @"success", 0);
  if (v7
    && (std::string v7 = (NetworkNotification *)CFStringCompare(theString1, @"autorenew", 0)) != 0
    && (std::string v7 = (NetworkNotification *)CFStringCompare(theString1, @"intl", 0)) != 0
    && (std::string v7 = (NetworkNotification *)CFStringCompare(theString1, @"stacking", 0)) != 0)
  {
    int v8 = (NetworkNotification *)CFStringCompare(theString1, @"last-updated", 0);
    if (v8
      && (int v8 = (NetworkNotification *)CFStringCompare(theString1, @"end", 0)) != 0
      && (int v8 = (NetworkNotification *)CFStringCompare(theString1, @"expiry", 0)) != 0)
    {
      xpc_object_t v9 = (NetworkNotification *)CFStringCompare(theString1, @"used", 0);
      if (v9
        && (xpc_object_t v9 = (NetworkNotification *)CFStringCompare(theString1, @"delay", 0)) != 0
        && (xpc_object_t v9 = (NetworkNotification *)CFStringCompare(theString1, @"bucket", 0)) != 0
        && (xpc_object_t v9 = (NetworkNotification *)CFStringCompare(theString1, @"allowed", 0)) != 0)
      {
        *a4 = (CFNumberRef)a3;
        return 0;
      }
      else
      {
        return NetworkNotification::_ConvertToNumber(v9, a3, a4);
      }
    }
    else
    {
      return NetworkNotification::_ConvertToDate(v8, a3, a4);
    }
  }
  else
  {
    return NetworkNotification::_ConvertToBool(v7, a3, (const void **)a4);
  }
}

BOOL NetworkNotification::_ConvertToBool(NetworkNotification *this, CFStringRef theString, const void **a3)
{
  v9.length = CFStringGetLength(theString);
  v9.CFIndex location = 0;
  if (CFStringCompareWithOptions(@"yes", theString, v9, 1uLL) == kCFCompareEqualTo)
  {
    std::string v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    goto LABEL_5;
  }
  v10.length = CFStringGetLength(theString);
  v10.CFIndex location = 0;
  CFComparisonResult v5 = CFStringCompareWithOptions(@"no", theString, v10, 1uLL);
  CFTypeRef v6 = 0;
  if (v5 == kCFCompareEqualTo)
  {
    std::string v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_5:
    CFTypeRef v6 = CFRetain(*v7);
  }
  *a3 = v6;
  return v6 != 0;
}

BOOL NetworkNotification::_ConvertToDate(NetworkNotification *this, CFStringRef string, CFDateRef *a3)
{
  CFComparisonResult v5 = (__CFDateFormatter *)NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter)
  {
    NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter = (uint64_t)CFDateFormatterCreate(v6, 0, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat((CFDateFormatterRef)NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter, @"MM:dd:yyyy:HH:mm:ss");
    CFComparisonResult v5 = (__CFDateFormatter *)NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter;
  }
  CFDateRef DateFromString = CFDateFormatterCreateDateFromString(v6, v5, string, 0);
  if (!DateFromString) {
    return *a3 != 0;
  }
  *a3 = DateFromString;
  return 1;
}

BOOL NetworkNotification::_ConvertToNumber(NetworkNotification *this, CFStringRef string, CFNumberRef *a3)
{
  CFComparisonResult v5 = (__CFNumberFormatter *)NetworkNotification::_ConvertToNumber(__CFString const*,void const*&)::numberFormatter;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!NetworkNotification::_ConvertToNumber(__CFString const*,void const*&)::numberFormatter)
  {
    CFComparisonResult v5 = CFNumberFormatterCreate(v6, 0, kCFNumberFormatterNoStyle);
    NetworkNotification::_ConvertToNumber(__CFString const*,void const*&)::numberFormatter = (uint64_t)v5;
  }
  CFNumberRef NumberFromString = CFNumberFormatterCreateNumberFromString(v6, v5, string, 0, 1uLL);
  if (!NumberFromString) {
    return *a3 != 0;
  }
  *a3 = NumberFromString;
  return 1;
}

uint64_t NetworkNotification::_GetTypeForName(NetworkNotification *this, const __CFString *a2)
{
  pthread_once(&__NotificationInit, (void (*)(void))_NotificationNameDictionaryInit);
  uint64_t result = CFSetContainsValue((CFSetRef)__ValidVMNotificationNames, a2);
  if (result != 1)
  {
    if (CFSetContainsValue((CFSetRef)__ValidDPNotificationNames, a2) == 1)
    {
      return 2;
    }
    else if (CFSetContainsValue((CFSetRef)__ValidPNRNotificationNames, a2) == 1)
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFSetRef _NotificationNameDictionaryInit(void)
{
  values[5] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"STATE";
  values[1] = @"MBOXUPDATE";
  CFNumberRef values[2] = @"GREETINGCHANGED";
  values[3] = @"SERVERCHANGED";
  values[4] = @"UNRECOGNIZED";
  v6[0] = @"DATA-ACTIVATION";
  v6[1] = @"DATA-USAGE";
  v5[0] = @"REG-REQ";
  v5[1] = @"REG-RESP";
  uint64_t v0 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
  __ValidVMNotificationNames = (uint64_t)CFSetCreate(0, (const void **)values, 5, MEMORY[0x1E4F1D548]);
  __ValidDPNotificationNames = (uint64_t)CFSetCreate(0, (const void **)v6, 2, v0);
  __ValidPNRNotificationNames = (uint64_t)CFSetCreate(0, (const void **)v5, 2, v0);
  v4[0] = @"state";
  v4[1] = @"name";
  _OWORD v4[2] = @"pw";
  v4[3] = @"server";
  v4[4] = @"port";
  v4[5] = @"m";
  void v4[6] = @"cmd";
  v4[7] = @"_timestamp";
  v3[0] = @"notification";
  v3[1] = @"success";
  v3[2] = @"MSISDN";
  v3[3] = @"plan";
  v3[4] = @"used";
  v3[5] = @"delay";
  v3[6] = @"last-updated";
  v3[7] = @"autorenew";
  v3[8] = @"intl";
  v3[9] = @"end";
  v3[10] = @"bucket";
  v3[11] = @"allowed";
  v3[12] = @"expiry";
  v3[13] = @"stacking";
  v2[0] = @"notification";
  v2[1] = @"t";
  v2[2] = @"n";
  v2[3] = @"s";
  v2[4] = @"r";
  v2[5] = @"u";
  v2[6] = @"v";
  __ValidVMNotificationKeys = (uint64_t)CFSetCreate(0, (const void **)v4, 8, v0);
  __ValidDPNotificationKeys = (uint64_t)CFSetCreate(0, (const void **)v3, 14, v0);
  CFSetRef result = CFSetCreate(0, (const void **)v2, 7, v0);
  __ValidPNRNotificationKeys = (uint64_t)result;
  return result;
}

uint64_t NetworkNotification::_NotificationKeyIsValidForType(NetworkNotification *this, const __CFString *a2)
{
  pthread_once(&__NotificationInit, (void (*)(void))_NotificationNameDictionaryInit);
  unsigned int v4 = *((_DWORD *)this + 6) - 1;
  if (v4 > 2) {
    return 0;
  }
  CFSetRef v5 = *(const __CFSet **)off_1E5265438[v4];

  return CFSetContainsValue(v5, a2);
}

const char *asString(unsigned int a1)
{
  if (a1 > 3) {
    return "INVALID NOTIFICATION";
  }
  else {
    return off_1E5265450[a1];
  }
}

{
  if (a1 > 8) {
    return "Unknown";
  }
  else {
    return off_1E52673E8[a1];
  }
}

const char *CTEsimCapabilityAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5265470[a1];
  }
}

__CFString *lteWithCDRXStateAsString(int a1)
{
  uint64_t v1 = kCTLTEWithCDRXStateOff;
  CFStringRef v2 = kCTLTEWithCDRXStateOn;
  if (a1) {
    CFStringRef v2 = kCTLTEWithCDRXStateUnknown;
  }
  if (a1 != 1) {
    uint64_t v1 = v2;
  }
  return *v1;
}

__CFString *wirelessTechnologyToWirelessTechnologyString(int a1)
{
  uint64_t v1 = kCTWirelessTechnologyUnknown;
  if (a1 <= 39)
  {
    if (a1 == 4)
    {
      uint64_t v1 = kCTWirelessTechnologyUMTS;
      return *v1;
    }
    if (a1 == 8)
    {
      uint64_t v1 = kCTWirelessTechnologyCDMA2000;
      return *v1;
    }
    if (a1 != 32) {
      return *v1;
    }
    goto LABEL_11;
  }
  if (a1 == 40 || a1 == 64)
  {
LABEL_11:
    uint64_t v1 = kCTWirelessTechnologyLTE;
    return *v1;
  }
  if (a1 == 128) {
    uint64_t v1 = kCTWirelessTechnologyNR;
  }
  return *v1;
}

__CFString *networkSelectionModeToNetworkSelectionModeString(int a1)
{
  uint64_t v1 = kCTRegistrationNetworkSelectionModeAutomatic;
  CFStringRef v2 = kCTRegistrationNetworkSelectionModeManual;
  if (a1 != 1) {
    CFStringRef v2 = kCTRegistrationNetworkSelectionModeDisabled;
  }
  if (a1) {
    uint64_t v1 = v2;
  }
  return *v1;
}

uint64_t toRatSelection(const __CFString *a1)
{
  if (a1)
  {
    if (CFEqual(a1, @"kCTRegistrationRATSelectionGSM"))
    {
      return 1;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionUMTS"))
    {
      return 2;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionDual"))
    {
      return 3;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionCDMA1x"))
    {
      return 4;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionCDMA1xEVDO"))
    {
      return 8;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionCDMAHybrid"))
    {
      return 12;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionLTE"))
    {
      return 16;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionTDSCDMA"))
    {
      return 32;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionNR"))
    {
      return -48;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionNRStandAlone"))
    {
      return 80;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionNRNonStandAlone"))
    {
      return -112;
    }
    else if (CFEqual(a1, @"kCTRegistrationRATSelectionAutomatic"))
    {
      return -1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

__CFString *getDataRateString(int a1)
{
  if ((a1 - 1) > 7) {
    uint64_t v1 = kCTRegistrationDataRateUnknown;
  }
  else {
    uint64_t v1 = off_1E52654F0[a1 - 1];
  }
  return *v1;
}

__CFString *networkSelectionStateToNetworkSelectionStateString(int a1)
{
  switch(a1)
  {
    case 0:
      uint64_t v1 = kCTRegistrationNetworkSelectionStateUnknown;
      goto LABEL_10;
    case 1:
      uint64_t v1 = kCTRegistrationNetworkSelectionStateIdle;
      goto LABEL_10;
    case 2:
      uint64_t v1 = kCTRegistrationNetworkSelectionStateScanning;
      goto LABEL_10;
    case 3:
      uint64_t v1 = kCTRegistrationNetworkSelectionStateScanned;
      goto LABEL_10;
    case 4:
      uint64_t v1 = kCTRegistrationNetworkSelectionStateChosen;
      goto LABEL_10;
    case 5:
      uint64_t v1 = kCTRegistrationNetworkSelectionStateJoining;
      goto LABEL_10;
    case 6:
      uint64_t v1 = kCTRegistrationNetworkSelectionStateJoinedOnManual;
LABEL_10:
      CFSetRef result = *v1;
      break;
    default:
      CFSetRef result = 0;
      break;
  }
  return result;
}

void convertRatAndPreferred(int a1, int a2, const __CFString **a3, const __CFString **a4)
{
  *a3 = @"kCTRegistrationRATSelectionUnknown";
  *a4 = @"kCTRegistrationRATSelectionUnknown";
  if (a1 <= 30)
  {
    switch(a1)
    {
      case 1:
        CFAllocatorRef v6 = kCTRegistrationRATSelection0;
        goto LABEL_18;
      case 2:
        CFAllocatorRef v6 = kCTRegistrationRATSelection1;
        goto LABEL_18;
      case 3:
        *a3 = @"kCTRegistrationRATSelectionDual";
        if (a2 == 2)
        {
          int v8 = kCTRegistrationRATSelection1;
        }
        else
        {
          if (a2 != 1) {
            return;
          }
          int v8 = kCTRegistrationRATSelection0;
        }
        CFStringRef v7 = *v8;
        break;
      case 4:
        CFAllocatorRef v6 = kCTRegistrationRATSelection3;
        goto LABEL_18;
      case 8:
        CFAllocatorRef v6 = kCTRegistrationRATSelection4;
        goto LABEL_18;
      case 12:
        CFAllocatorRef v6 = kCTRegistrationRATSelection5;
        goto LABEL_18;
      case 15:
      case 18:
      case 19:
        goto LABEL_17;
      case 16:
        CFAllocatorRef v6 = kCTRegistrationRATSelection6;
        goto LABEL_18;
      default:
        goto LABEL_34;
    }
    goto LABEL_19;
  }
  if (a1 > 143)
  {
    if (a1 > 207)
    {
      if (a1 != 208)
      {
        if (a1 != 211 && a1 != 255) {
          goto LABEL_34;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (a1 == 144)
      {
LABEL_25:
        CFAllocatorRef v6 = kCTRegistrationRATSelection10;
        goto LABEL_18;
      }
      if (a1 == 147) {
        goto LABEL_17;
      }
      if (a1 != 192) {
        goto LABEL_34;
      }
    }
    CFAllocatorRef v6 = kCTRegistrationRATSelection11;
    goto LABEL_18;
  }
  uint64_t v5 = (a1 - 31);
  if (v5 > 0x31) {
    goto LABEL_24;
  }
  if (((1 << (a1 - 31)) & 0x100100001) != 0)
  {
LABEL_17:
    CFAllocatorRef v6 = kCTRegistrationRATSelection7;
    goto LABEL_18;
  }
  if (((1 << (a1 - 31)) & 0x2000200000000) != 0)
  {
    CFAllocatorRef v6 = kCTRegistrationRATSelection9;
LABEL_18:
    CFStringRef v7 = *v6;
    *a3 = v7;
LABEL_19:
    *a4 = v7;
    return;
  }
  if (v5 == 1)
  {
    CFAllocatorRef v6 = kCTRegistrationRATSelection8;
    goto LABEL_18;
  }
LABEL_24:
  if (a1 == 128) {
    goto LABEL_25;
  }
LABEL_34:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    convertRatAndPreferred(a1);
  }
}

uint64_t _CTServerConnectionGetSIMSubscriptionStatus(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a3)
  {
    CFStringRef v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v11);
    xpc::dict_creator::operator()<char const*>("kCPGetSIMSubscriptionStatus", v7, "kRequest", &v10);
    xpc_release(v11);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = ___CTServerConnectionGetSIMSubscriptionStatus_block_invoke;
    v9[3] = &unk_1E5260A10;
    v9[4] = a3;
    int v8 = SendXpcMessageAsync(a1, &v11, a2, v9);
    xpc_release(v11);
    if (v8) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionProbeSIMConnectivityStatus(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a3)
  {
    CFStringRef v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v11);
    xpc::dict_creator::operator()<char const*>("kCPProbeSIMConnectivity", v7, "kRequest", &v10);
    xpc_release(v11);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = ___CTServerConnectionProbeSIMConnectivityStatus_block_invoke;
    v9[3] = &unk_1E5265568;
    v9[4] = a3;
    int v8 = SendXpcMessageAsync(a1, &v11, a2, v9);
    xpc_release(v11);
    if (v8) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

const void **ctu::cf::CFSharedRef<__CFError>::operator=<void const,void>(const void **a1, CFTypeRef *a2)
{
  uint64_t v5 = 0;
  ctu::cf::CFSharedRef<__CFError>::CFSharedRef<void const,void>(&v5, a2);
  CFStringRef v3 = *a1;
  *a1 = v5;
  uint64_t v5 = v3;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t _CTServerConnectionCopyRemoteMobileEquipmentInfo(uint64_t a1, ctu *a2, NSObject *a3, uint64_t a4)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCPCopyRemoteMobileEquipmentInfo", &object, "kRequest", &v15);
    xpc_release(object);
    xpc_object_t v9 = v15;
    xpc_object_t object = v15;
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v15);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v10);
    xpc_dictionary_set_value(v9, "kCPRemoteMobileEquipmentInfoDeviceId", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    _OWORD v13[4] = a4;
    xpc_object_t value = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    void v13[2] = ___CTServerConnectionCopyRemoteMobileEquipmentInfo_block_invoke;
    v13[3] = &unk_1E5260B08;
    int v12 = SendXpcMessageAsync(a1, &object, a3, v13);
    xpc_release(object);
    if (v12) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

unint64_t _CTServerConnectionGetNumberOfDeletablePlansInstalled(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCPGetNumberOfDeletablePlansInstalled", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCPNumberOfDeletablePlansInstalled"))
    {
      unint64_t v2 = v3 & 0xFFFFFFFF00000000;
      uint64_t v11 = 0;
      object[0] = &xdict;
      object[1] = "kCPNumberOfDeletablePlansInstalled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFNumber const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      unint64_t v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

uint64_t _CTServerConnectionReprovisionSim(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPReprovisionSim", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionDebugResetSim(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPResetSim", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionStandaloneSetSelectionOverride(uint64_t a1, uint64_t a2, ctu *a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneOverrideSelection", &object, "kRequest", &v17);
  xpc_release(object);
  xpc_object_t object = v17;
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v17);
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if ((v8 || (xpc_object_t v8 = xpc_null_create()) != 0) && MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v8);
    xpc_object_t v9 = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_release(v8);
  ctu::cf_to_xpc((uint64_t *)&value, a3, v11);
  xpc_dictionary_set_value(object, "kCPStandaloneIccid", value);
  xpc_object_t v12 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v12);
  xpc_release(value);
  xpc_object_t value = 0;
  global_queue = dispatch_get_global_queue(0, 0);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  v15[2] = ___CTServerConnectionStandaloneSetSelectionOverride_block_invoke;
  v15[3] = &unk_1E5265590;
  v15[4] = a5;
  int v14 = SendXpcMessageAsync(a1, &object, global_queue, v15);
  xpc_release(v9);
  xpc_release(object);
  if (v14) {
    return 0;
  }
  else {
    return 0x500000002;
  }
}

BOOL xpc::operator==<BOOL>(uint64_t a1, BOOL *a2)
{
  xpc_object_t object1 = 0;
  xpc::dict::object_proxy::operator xpc::object(a1, &object1);
  xpc_object_t v3 = xpc_BOOL_create(*a2);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  BOOL v4 = xpc_equal(object1, v3);
  xpc_release(v3);
  xpc_release(object1);
  return v4;
}

uint64_t _CTServerConnectionStandaloneSetSelectionOverrideNonEsim(uint64_t a1, ctu *a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneOverrideSelectionLegacy", &object, "kRequest", &v11);
  xpc_release(object);
  xpc_object_t v4 = v11;
  xpc_object_t object = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  ctu::cf_to_xpc((uint64_t *)&value, a2, v5);
  xpc_dictionary_set_value(v4, "kCPStandaloneIccid", value);
  xpc_object_t v6 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v6);
  xpc_release(value);
  xpc_object_t value = 0;
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionStandaloneResetSelectionOverride(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneOverrideSelectionReset", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionStandaloneDownloadProfile(uint64_t a1, ctu *a2, ctu *a3, uint64_t a4)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    xpc_object_t v9 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v21);
    xpc::dict_creator::operator()<char const*>("kCPStandaloneDownloadProfile", v9, "kRequest", &v20);
    xpc_release(v21);
    xpc_object_t v10 = v20;
    xpc_object_t v21 = v20;
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v20);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v11);
    xpc_dictionary_set_value(v10, "kCPStandaloneCsn", value);
    xpc_object_t v12 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v12);
    xpc_release(value);
    xpc_object_t value = 0;
    ctu::cf_to_xpc((uint64_t *)&object, a3, v13);
    xpc_dictionary_set_value(v10, "kCPStandaloneProfileServer", object);
    xpc_object_t v14 = object;
    xpc_object_t object = xpc_null_create();
    xpc_release(v14);
    xpc_release(object);
    xpc_object_t object = 0;
    global_queue = dispatch_get_global_queue(0, 0);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    v17[2] = ___CTServerConnectionStandaloneDownloadProfile_block_invoke;
    v17[3] = &unk_1E52655B8;
    v17[4] = a4;
    int v16 = SendXpcMessageAsync(a1, &v21, global_queue, v17);
    xpc_release(v21);
    if (v16) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionStandaloneGetCachedVinylInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0x1600000001;
  if (!a1 || !a2) {
    return result;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneGetCacheVinylInfo", &object, "kRequest", &xdict);
  xpc_release(object);
  xpc_object_t object = xdict;
  xpc_object_t xdict = xpc_null_create();
  xpc_release(xdict);
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    xpc_object_t v6 = v5;
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
LABEL_7:
  xpc_object_t xdict = xpc_null_create();
LABEL_9:
  xpc_release(v6);
  SendXpcMessage(a1, &object, &xdict);
  CFTypeRef cf = 0;
  xpc_dictionary_get_value(xdict, "kCPStandaloneCachedVinylInfoResult");
  uint64_t v10 = _CFXPCCreateCFObjectFromXPCObject();
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&v10);
  if (cf) {
    uint64_t v7 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 && cf)
  {
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(v8, v9);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(xdict);
  xpc_release(object);
  return 0;
}

void *ctu::cf::CFSharedRef<__CFError>::CFSharedRef<void const,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v4 = *a2;
  if (*a2 && (CFTypeID v5 = CFGetTypeID(*a2), v5 == CFErrorGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2) {
      CFRelease(*a2);
    }
  }
  return a1;
}

const char *MMSCharsetHeader::charsetNameForMibEnum(MMSCharsetHeader *this)
{
  unsigned int v3 = this;
  if (!_mibEnumToCharsetMap) {
    initCharsetMaps();
  }
  uint64_t v1 = std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::find<unsigned int>((void *)_mibEnumToCharsetMap, &v3);
  if (v1) {
    return *(const char **)(v1[3] + 8);
  }
  else {
    return "UNKNOWN";
  }
}

void initCharsetMaps(void)
{
}

uint64_t MMSCharsetHeader::cfEncodingForMibEnum(MMSCharsetHeader *this)
{
  unsigned int v3 = this;
  if (!_mibEnumToCharsetMap) {
    initCharsetMaps();
  }
  uint64_t v1 = std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::find<unsigned int>((void *)_mibEnumToCharsetMap, &v3);
  if (v1) {
    return *(unsigned int *)(v1[3] + 4);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t MMSCharsetHeader::mibEnumForCharsetName(MMSCharsetHeader *this, const char *a2)
{
  uint64_t v2 = (void *)_nameToCharsetMap;
  if (!_nameToCharsetMap) {
    initCharsetMaps();
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)this);
  unsigned int v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v2, (uint64_t)__p);
  CFTypeRef v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return **((unsigned int **)v4 + 5);
    }
  }
  else if (v3)
  {
    return **((unsigned int **)v4 + 5);
  }
  return 0;
}

void *MMSCharsetHeader::MMSCharsetHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (void *)MMSIntegerHeader::MMSIntegerHeader(a1, a2, a3);
  *uint64_t result = &unk_1ECFD33B8;
  return result;
}

BOOL MMSCharsetHeader::parseValue(MMSCharsetHeader *this, MMSCharsetHeader *a2)
{
  int v3 = MMSCharsetHeader::mibEnumForCharsetName(a2, (const char *)a2);
  *((_DWORD *)this + 5) = v3;
  return v3 != 0;
}

uint64_t MMSCharsetHeader::valueAsString(uint64_t a1, std::string *a2)
{
  int v3 = MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*(unsigned int *)(a1 + 20));
  if (v3)
  {
    std::string::__assign_external(a2, v3);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      a2->__r_.__value_.__l.__size_ = 0;
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
    }
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  return 1;
}

void MMSCharsetHeader::createInstance(MMSCharsetHeader *this)
{
}

void MMSCharsetHeader::copy(MMSCharsetHeader *this)
{
}

const char *MMSCharsetHeader::headerTypeName(MMSCharsetHeader *this)
{
  return "charset";
}

void MMSCharsetHeader::~MMSCharsetHeader(MMSCharsetHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);

  JUMPOUT(0x18531F680);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      xpc_object_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (*((_DWORD *)v11 + 4) == v6) {
              return v11;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          xpc_object_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  xpc_object_t v11 = operator new(0x20uLL);
  void *v11 = 0;
  v11[1] = v6;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  xpc_object_t v20 = *(void **)(*(void *)a1 + 8 * v9);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    xpc_object_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_1845415B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184541680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454175C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845417EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRegistrationDisplayStatus>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1845418D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184541984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184541A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184541B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184541C08(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184541C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184541D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184541E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184541F28(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184541FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454209C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184542160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184542248(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845422E8(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184542394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454246C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184542530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184542618(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845426B8(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184542764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845428E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845429C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184542A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184542B70(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184542C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNRStatus>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184542CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184542D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184542E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184542F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454303C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845430DC(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184543188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184543280(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845433DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845434BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184543594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184543664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184543740(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845437D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845438B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184543984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184543A60(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184543AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184543BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184543CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184543D80(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184543E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRatSelection>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184543EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184543FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454405C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845441FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845443A0(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_184544550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184544648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184544740(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184544910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_184544A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184544AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184544B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184544C40(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184544D24(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184544DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSDictionary>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184544EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184544F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTBandInfo>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184545024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184545144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184545274(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1845453C0(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1845455EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  size_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_184545790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454589C(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845459C0(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184545B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_184545C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184545D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184545DD8(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184545E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184545F54(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184545FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSignalStrengthInfo>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1845460D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454617C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184546234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184546310(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845463A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSignalStrengthMeasurements>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_18454648C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184546538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184546610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845466E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845467BC(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454684C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTVoiceLinkQualityMetric>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184546938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845469E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184546ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184546B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184546C68(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184546CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTEnhancedLinkQualityMetric>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184546DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184546E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184546F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184547038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184547114(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845471A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184547240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184547318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845473E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845474C4(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184547554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTIMSRegistrationStatus>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184547640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845476EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845477C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184547894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184547970(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184547A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTIMSRegistrationTransportInfo>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184547AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184547B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184547C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184547D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184547E1C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184547EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSupportedMaxDataRates>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184547F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184548044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845481E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845482C8(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184548368(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184548414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454850C(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184548668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184548750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184548828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184548930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184548A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184548ADC(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184548B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNetworkList>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184548C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184548D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184548DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184548F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184549080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184549158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184549228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184549304(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184549394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNetwork>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184549480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454952C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184549604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845496C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845497B0(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184549850(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845498FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845499D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184549AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184549B80(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184549C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNetworkSelectionInfo>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_184549CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184549DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184549E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184549F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454A02C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454A0CC(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18454A178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454A250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454A320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454A3FC(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454A48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTEncryptionStatusInfo>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_18454A578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454A624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454A6F4(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454A784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454A938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454AA14(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454AAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRoamingStatus>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v3 = NSString;
    uint8x8_t v4 = (objc_class *)objc_opt_class();
    unint64_t v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_18454AB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454AC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454AD1C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454AF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454AFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454B094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454B184(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454B224(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18454B2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454B374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454B428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454B518(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454B5B8(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18454B664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454B744(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18454B87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454B964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18454C2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18454C624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18454C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18454CC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18454CEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18454D2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18454D4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18454D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18454DBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18454DEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_18454DFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18454E294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454E3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18454E514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454E6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  int v26 = v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18454E8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  xpc_object_t v23 = v22;

  _Unwind_Resume(a1);
}

void sub_18454EA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18454EB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18454ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18454EF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454F0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18454F2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454F444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18454F700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18454F848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454F9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18454FADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18454FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v16 - 40));

  _Unwind_Resume(a1);
}

void sub_18454FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t MMSPduEncoder::MMSPduEncoder(uint64_t result, int a2)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void MMSPduEncoder::MMSPduEncoder(MMSPduEncoder *this)
{
  *(_DWORD *)this = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
}

void MMSPduEncoder::encodeByte(MMSPduEncoder *this, std::string::value_type a2)
{
}

void MMSPduEncoder::encodeString(MMSPduEncoder *this, const char *a2)
{
  if (a2)
  {
    LOBYTE(v4) = *a2;
    if (*a2)
    {
      int v5 = 1;
      do
      {
        std::string::push_back((std::string *)((char *)this + 8), v4);
        int v4 = a2[v5++];
      }
      while (v4);
    }
  }

  std::string::push_back((std::string *)((char *)this + 8), 0);
}

void MMSPduEncoder::encodeWspShortInteger(MMSPduEncoder *this, char a2)
{
}

void MMSPduEncoder::encodeWspLongInteger(MMSPduEncoder *this, unsigned int a2)
{
  unsigned __int8 v3 = 3;
  while (!(a2 >> (8 * v3)))
  {
    if (!--v3)
    {
      int v4 = (std::string *)((char *)this + 8);
      LOBYTE(v5) = 1;
      std::string::push_back((std::string *)((char *)this + 8), 1);
      goto LABEL_6;
    }
  }
  __int16 v5 = v3 + 1;
  int v4 = (std::string *)((char *)this + 8);
  std::string::push_back((std::string *)((char *)this + 8), v3 + 1);
  if ((v5 & 0x100) != 0) {
    return;
  }
LABEL_6:
  int v6 = v5;
  unsigned int v7 = v5 + 1;
  int v8 = 8 * v6 - 8;
  do
  {
    std::string::push_back(v4, a2 >> v8);
    --v7;
    v8 -= 8;
  }
  while (v7 > 1);
}

void MMSPduEncoder::encodeWspIntegerValue(MMSPduEncoder *this, unsigned int a2)
{
  if (a2 > 0x7F) {
    MMSPduEncoder::encodeWspLongInteger(this, a2);
  }
  else {
    std::string::push_back((std::string *)((char *)this + 8), a2 | 0x80);
  }
}

void MMSPduEncoder::encodeWspUintvarInteger(MMSPduEncoder *this, unsigned int a2)
{
  int8x8_t v2 = (std::string *)((char *)this + 8);
  if (a2)
  {
    char v4 = 1;
    for (int i = 28; i != -7; i -= 7)
    {
      int v6 = (a2 >> i) & 0x7F;
      v4 &= v6 == 0;
      if ((v4 & 1) == 0) {
        std::string::push_back(v2, v6 | ((i != 0) << 7));
      }
    }
  }
  else
  {
    unsigned int v7 = (std::string *)((char *)this + 8);
    std::string::push_back(v7, 0);
  }
}

void MMSPduEncoder::encodeWspValueLength(MMSPduEncoder *this, unsigned int a2)
{
  if (a2 > 0x1E)
  {
    std::string::push_back((std::string *)((char *)this + 8), 31);
    MMSPduEncoder::encodeWspUintvarInteger(this, a2);
  }
  else
  {
    char v4 = (std::string *)((char *)this + 8);
    std::string::push_back(v4, a2);
  }
}

void MMSPduEncoder::encodeWspTextString(MMSPduEncoder *this, const char *a2)
{
  if (a2 && *a2 < 0) {
    std::string::push_back((std::string *)((char *)this + 8), 127);
  }

  MMSPduEncoder::encodeString(this, a2);
}

void MMSPduEncoder::encodeEncodedString(MMSPduEncoder *this, uint64_t a2, MMSCharsetHeader *a3)
{
  unsigned __int8 v3 = (void **)a2;
  char v5 = *(unsigned char *)(a2 + 23);
  if (a3 == 3 || (v5 >= 0 ? (uint64_t v6 = *(unsigned __int8 *)(a2 + 23)) : (uint64_t v6 = *(void *)(a2 + 8)), !v6))
  {
    if (v5 < 0) {
      a2 = *(void *)a2;
    }
    MMSPduEncoder::encodeString(this, (const char *)a2);
  }
  else
  {
    unsigned int v7 = a3;
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v20 = 0;
    int v8 = (MMSCharsetHeader *)*((unsigned int *)this + 8);
    BOOL v9 = v8 == a3 || v8 == 0;
    if (!v9 && MMSPduDecoder::convertStringToTargetCharset(a2, (int)v19, a3, v8))
    {
      unsigned int v7 = *((_DWORD *)this + 8);
      unsigned __int8 v3 = v19;
    }
    if (v7 == 106)
    {
      uint64_t v10 = (char *)v3;
      if (*((char *)v3 + 23) < 0) {
        uint64_t v10 = (char *)*v3;
      }
      do
      {
        int v11 = *v10++;
        BOOL v12 = v11 == 0;
      }
      while (v11 > 0);
      if (v12) {
        unsigned int v7 = 3;
      }
    }
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    LODWORD(__p[0]) = *(_DWORD *)this;
    uint64_t v18 = 0;
    __p[1] = 0;
    long long v17 = 0uLL;
    LODWORD(v18) = *((_DWORD *)this + 8);
    MMSPduEncoder::encodeWspIntegerValue((MMSPduEncoder *)__p, v7);
    if (*((char *)v3 + 23) < 0) {
      unsigned __int8 v3 = (void **)*v3;
    }
    MMSPduEncoder::encodeWspTextString((MMSPduEncoder *)__p, (const char *)v3);
    if (v17 >= 0) {
      unsigned int v13 = HIBYTE(v17);
    }
    else {
      unsigned int v13 = v17;
    }
    MMSPduEncoder::encodeWspValueLength(this, v13);
    if (v17 >= 0) {
      float v14 = (const std::string::value_type *)&__p[1];
    }
    else {
      float v14 = (const std::string::value_type *)__p[1];
    }
    if (v17 >= 0) {
      std::string::size_type v15 = HIBYTE(v17);
    }
    else {
      std::string::size_type v15 = v17;
    }
    std::string::append((std::string *)((char *)this + 8), v14, v15);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
  }
}

std::string *MMSPduEncoder::append(MMSPduEncoder *this, MMSPduEncoder *a2)
{
  int8x8_t v2 = (std::string *)((char *)this + 8);
  char v5 = (char *)*((void *)a2 + 1);
  unsigned __int8 v3 = (char *)a2 + 8;
  char v4 = v5;
  std::string::size_type v6 = *((void *)v3 + 1);
  if (v3[23] >= 0)
  {
    std::string::size_type v7 = v3[23];
  }
  else
  {
    unsigned __int8 v3 = v4;
    std::string::size_type v7 = v6;
  }
  return std::string::append(v2, v3, v7);
}

BOOL MMSPduEncoder::encodeHeaders(MMSPduEncoder *this, const MMSHeaderContainer *a2)
{
  uint64_t v4 = MMSHeaderContainer::headerWithName(a2, "Content-Type");
  char v5 = (MMSHeader *)MMSHeaderContainer::headerWithName(a2, "X-Mms-Message-Type");
  std::string::size_type v6 = (MMSHeader *)MMSHeaderContainer::headerWithName(a2, "X-Mms-Transaction-ID");
  std::string::size_type v7 = (MMSHeader *)MMSHeaderContainer::headerWithName(a2, "X-Mms-MMS-Version");
  if (v5 && (MMSHeader::encode(v5, this) & 1) == 0)
  {
    BOOL v12 = sMmsPduLog();
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    MMSPduEncoder::encodeHeaders(v12, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  if (v6 && (MMSHeader::encode(v6, this) & 1) == 0)
  {
    uint64_t v20 = sMmsPduLog();
    BOOL result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    MMSPduEncoder::encodeHeaders(v20, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  if (v7 && (MMSHeader::encode(v7, this) & 1) == 0)
  {
    unint64_t v28 = sMmsPduLog();
    BOOL result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    MMSPduEncoder::encodeHeaders(v28, v29, v30, v31, v32, v33, v34, v35);
    return 0;
  }
  if (!MMSHeaderContainer::headerCount(a2)) {
    return 1;
  }
  LODWORD(v8) = 0;
  while (1)
  {
    BOOL v9 = (MMSHeader *)MMSHeaderEncodingMap::encodingForNumber(a2, v8);
    if (v9 != (MMSHeader *)v4)
    {
      uint64_t v10 = (uint64_t)v9;
      if (v9 != v5 && v9 != v6 && v9 != v7 && (MMSHeader::encode(v9, this) & 1) == 0) {
        break;
      }
    }
    unint64_t v8 = (v8 + 1);
    if (MMSHeaderContainer::headerCount(a2) <= v8) {
      return 1;
    }
  }
  xpc_object_t v36 = sMmsPduLog();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
    MMSPduEncoder::encodeHeaders(v10, v36);
  }
  xpc_object_t v37 = sMmsPduLog();
  BOOL result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  if (result)
  {
    MMSPduEncoder::encodeHeaders(v10, v37);
    return 0;
  }
  return result;
}

BOOL MMSPduEncoder::_encodeMimePart(MMSPduEncoder *this, const std::string::value_type **a2)
{
  int8x8_t v2 = (const MMSHeaderContainer *)a2;
  memset(&v26, 0, sizeof(v26));
  uint64_t v4 = a2[9];
  std::string::size_type v5 = *((unsigned int *)a2 + 24);
  uint64_t v6 = MMSHeaderContainer::contentType((MMSHeaderContainer *)a2);
  uint64_t v7 = v6;
  if (v6)
  {
    unint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    if (!strcmp(v8, "text"))
    {
      uint64_t v10 = (MMSCharsetHeader *)MMSParameterContainer::charset((MMSParameterContainer *)(v7 + 8));
      std::string::__assign_external(&v26, v4, v5);
      int v11 = (MMSCharsetHeader *)*((unsigned int *)this + 8);
      if (v11) {
        BOOL v12 = v10 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12 && v10 != v11)
      {
        MMSPduDecoder::convertStringToTargetCharsetInPlace((uint64_t)&v26, v10, v11);
        operator new();
      }
      uint64_t v9 = v7;
      if (v11 == 106)
      {
        uint64_t v14 = &v26;
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v14 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        do
        {
          int v16 = v14->__r_.__value_.__s.__data_[0];
          uint64_t v14 = (std::string *)((char *)v14 + 1);
          int v15 = v16;
        }
        while (v16 > 0);
        if (!v15) {
          operator new();
        }
      }
      if (!v2 && v10)
      {
        uint64_t v17 = MMSHeaderContainer::headerWithName(0, "Content-Disposition");
        if (v17) {
          MMSParameterContainer::setCharset((MMSParameterContainer *)(v17 + 32), (int)v10);
        }
        int8x8_t v2 = 0;
      }
    }
    else
    {
      uint64_t v9 = v7;
    }
    *(_OWORD *)std::string __p = 0u;
    long long v24 = 0u;
    LODWORD(__p[0]) = *(_DWORD *)this;
    uint64_t v25 = 0;
    __p[1] = 0;
    long long v24 = 0uLL;
    LODWORD(v25) = *((_DWORD *)this + 8);
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
    MMSPduEncoder::encodeHeaders((MMSPduEncoder *)__p, v2);
    if (v24 >= 0) {
      unsigned int v18 = HIBYTE(v24);
    }
    else {
      unsigned int v18 = v24;
    }
    MMSPduEncoder::encodeWspUintvarInteger(this, v18);
    MMSPduEncoder::encodeWspUintvarInteger(this, v5);
    uint64_t v19 = (std::string *)((char *)this + 8);
    if (v24 >= 0) {
      uint64_t v20 = (const std::string::value_type *)&__p[1];
    }
    else {
      uint64_t v20 = (const std::string::value_type *)__p[1];
    }
    if (v24 >= 0) {
      std::string::size_type v21 = HIBYTE(v24);
    }
    else {
      std::string::size_type v21 = v24;
    }
    std::string::append(v19, v20, v21);
    if (v5) {
      std::string::append(v19, v4, v5);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[1]);
    }
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v7 != 0;
}

uint64_t MMSPduEncoder::_encodeBody(MMSPduEncoder *this, MMSMessage *a2)
{
  if (MMSMessage::isEmpty(a2))
  {
    if (MMSMessage::requiresContentType(a2)) {
      MMSHeaderContainer::setContentType(a2, (MMSContentType *)"*/*");
    }
    return 1;
  }
  uint64_t result = MMSHeaderContainer::contentTypeHeader(a2);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = MMSHeader::encode((MMSHeader *)result, this);
    if (result)
    {
      if (MMSContentType::isMultipart(*(MMSContentType **)(v5 + 24)))
      {
        unsigned int v6 = MMSMessage::partCount(a2);
        std::string::push_back((std::string *)((char *)this + 8), v6);
        if (v6)
        {
          unsigned int v7 = 0;
          int v8 = 0;
          do
          {
            uint64_t v9 = (const std::string::value_type **)MMSMessage::part(a2, v7);
            uint64_t result = MMSPduEncoder::_encodeMimePart(this, v9);
            if ((result & 1) == 0) {
              break;
            }
            unsigned int v7 = ++v8;
          }
          while (v6 > v8);
          return result;
        }
      }
      else
      {
        uint64_t v10 = MMSMessage::part(a2, 0);
        std::string::append((std::string *)((char *)this + 8), *(const std::string::value_type **)(v10 + 72), *(unsigned int *)(v10 + 96));
      }
      return 1;
    }
  }
  return result;
}

uint64_t MMSPduEncoder::encodeMessage(MMSPduEncoder *this, MMSMessage *a2)
{
  if (!MMSMessage::prepareForEncoding(a2) || !MMSPduEncoder::encodeHeaders(this, a2)) {
    return 0;
  }

  return MMSPduEncoder::_encodeBody(this, a2);
}

uint64_t MMSPduEncoder::encodeSms(MMSPduEncoder *this, unsigned int a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  if (a4) {
    unsigned int v7 = a4;
  }
  else {
    unsigned int v7 = "";
  }
  if (a3) {
    int v8 = a3;
  }
  else {
    int v8 = "";
  }
  if (a5) {
    uint64_t v9 = a5;
  }
  else {
    uint64_t v9 = "";
  }
  if (a6) {
    uint64_t v10 = a6;
  }
  else {
    uint64_t v10 = "";
  }
  MMSPduEncoder::encodeWspIntegerValue(this, a2);
  MMSPduEncoder::encodeString(this, v8);
  MMSPduEncoder::encodeString(this, v7);
  MMSPduEncoder::encodeString(this, v9);
  MMSPduEncoder::encodeString(this, v10);
  return 1;
}

void sub_184551450(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184551780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18455197C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionSetInternalManagedState(uint64_t result)
{
  if (result == 1)
  {
    uint64_t v1 = &sNeverReconnect;
  }
  else
  {
    if (result != 2) {
      return result;
    }
    uint64_t v1 = &sInternalDeadFlag;
  }
  char *v1 = 1;
  return result;
}

BOOL operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void CCMonitor::~CCMonitor(dispatch_object_t *this)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, this);
  if (notify_is_valid_token(*((_DWORD *)this + 2))) {
    notify_cancel(*((_DWORD *)this + 2));
  }
  if (notify_is_valid_token(*((_DWORD *)this + 6))) {
    notify_cancel(*((_DWORD *)this + 6));
  }
  BOOL v3 = os_log_type_enabled(0, OS_LOG_TYPE_DEBUG);
  if (v3) {
    CCMonitor::~CCMonitor(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  dispatch_object_t v11 = this[12];
  if (v11) {
    CFRelease(v11);
  }
  std::mutex::~mutex((std::mutex *)(this + 4));
  if (*this) {
    dispatch_release(*this);
  }
}

void CCMonitor::handleDaemonReady(CCMonitor *this)
{
  CCMonitor::instance(&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"kCTDaemonReadyLocalNotification", 0, 0, 1u);
}

void CCMonitor::findCachedValue(const xpc::object *a1@<X1>, xpc_object_t *a2@<X8>)
{
  CFTypeRef cf = 0;
  xpc::bridge((uint64_t *)&cf, a1, (const object *)a1);
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a2 = xpc_null_create();
  }
  xpc_release(v5);
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void *__copy_helper_block_8_32c60_ZTSN8dispatch5blockIU13block_pointerFvPK14__CFDictionaryEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_8_32c60_ZTSN8dispatch5blockIU13block_pointerFvPK14__CFDictionaryEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke_4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t _CTServerConnectionGetTypeID()
{
  if (sFrameworkInit != -1) {
    dispatch_once_f(&sFrameworkInit, 0, (dispatch_function_t)sInitializeCTFrameworkStuff);
  }
  return _CTServerConnectionTypeID;
}

void DispatchReEstablish(__CFNotificationCenter *a1, void *cf, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t v5 = cf[3];
  if (v5)
  {
    if ((sNeverReconnect & 1) == 0)
    {
      uint64_t v7 = cf[2];
      CFRetain(cf);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
      block[3] = &__block_descriptor_tmp_102;
      void block[4] = v5;
      void block[5] = v7;
      void block[6] = cf;
      dispatch_async(v7, block);
    }
  }
}

void *_CTServerConnectionCreateAndLaunchWithIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  if (a2)
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    ctu::cf::assign();
    long long v24 = 0uLL;
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v6 = (char *)getprogname();
    std::string::basic_string[abi:nn180100]<0>(&v24, v6);
  }
  uint64_t v7 = sCTServerConnectionCreate();
  uint64_t v8 = (void *)v7;
  if (v7)
  {
    if (a4)
    {
      uint64_t v9 = a4[1];
      if (v9)
      {
        uint64_t v10 = (uint64_t (*)(void))a4[2];
        if (v10) {
          uint64_t v9 = v10(a4[1]);
        }
      }
      if (a3)
      {
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___CTServerConnectionCreateAndLaunchWithIdentifier_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_25;
        aBlock[4] = a3;
        aBlock[5] = v8;
        aBlock[6] = v9;
        dispatch_object_t v11 = _Block_copy(aBlock);
        uint64_t v12 = v8[3];
        uint64_t v13 = *(const void **)(v12 + 112);
        *(void *)(v12 + 112) = v11;
        if (v13) {
          _Block_release(v13);
        }
      }
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v14 = a4[3];
      if (!v14) {
        goto LABEL_19;
      }
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      v22[2] = ___CTServerConnectionCreateAndLaunchWithIdentifier_block_invoke_2;
      v22[3] = &__block_descriptor_tmp_26_1;
      v22[4] = v14;
      v22[5] = v9;
      int v15 = _Block_copy(v22);
      uint64_t v16 = v8[3];
      uint64_t v17 = *(const void **)(v16 + 120);
      *(void *)(v16 + 120) = v15;
      if (!v17) {
        goto LABEL_19;
      }
    }
    else
    {
      if (!a3) {
        goto LABEL_19;
      }
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 0x40000000;
      v21[2] = ___CTServerConnectionCreateAndLaunchWithIdentifier_block_invoke_3;
      v21[3] = &__block_descriptor_tmp_27;
      v21[4] = a3;
      v21[5] = v7;
      unsigned int v18 = _Block_copy(v21);
      uint64_t v19 = v8[3];
      uint64_t v17 = *(const void **)(v19 + 112);
      *(void *)(v19 + 112) = v18;
      if (!v17) {
        goto LABEL_19;
      }
    }
    _Block_release(v17);
LABEL_19:
    sCTServerConnectionStart(v8);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  return v8;
}

uint64_t _CTServerConnectionSendBarrier(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  if (a2)
  {
    xpc_connection_send_barrier(*(xpc_connection_t *)(a1 + 40), a2);
  }
  else
  {
    xpc_object_t v4 = dispatch_semaphore_create(0);
    uint64_t v5 = v4;
    uint64_t v6 = *(_xpc_connection_s **)(a1 + 40);
    barrier[0] = MEMORY[0x1E4F143A8];
    barrier[1] = 1174405120;
    barrier[2] = ___CTServerConnectionSendBarrier_block_invoke;
    barrier[3] = &__block_descriptor_tmp_33_0;
    dispatch_object_t object = v4;
    if (v4) {
      dispatch_retain(v4);
    }
    xpc_connection_send_barrier(v6, barrier);
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    if (object) {
      dispatch_release(object);
    }
    if (v5) {
      dispatch_release(v5);
    }
  }
  return 0;
}

void __copy_helper_block_8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  if (v1) {
    dispatch_release(v1);
  }
}

unint64_t _CTServerConnectionUnregisterForNotification(uint64_t a1, CFStringRef theString2)
{
  if (!a1) {
    return 0x1600000001;
  }
  int v3 = sCTEventForNotificationString(theString2);
  if (!v3) {
    return 0;
  }

  return _CTServerConnectionUnregisterForEvent(a1, v3);
}

unint64_t _CTServerConnectionUnregisterForEvent(uint64_t a1, int a2)
{
  if (!a1 || !*(void *)(a1 + 16))
  {
    uint64_t v6 = 0x1600000000;
LABEL_13:
    LODWORD(v7) = 1;
    return v7 | (unint64_t)v6;
  }
  CCMonitor::instance(&v13);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned __int8 *)(v4 + 136) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v14);
  }
  if (v5)
  {
    CCMonitor::instance(&v13);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v14);
    }
    uint64_t v6 = 0x100000000;
    goto LABEL_13;
  }
  if (HIDWORD(v7))
  {
    uint64_t v6 = v7 & 0x1F00000000;
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___CTServerConnectionUnregisterForEvent_block_invoke;
    v11[3] = &__block_descriptor_tmp_34_0;
    _OWORD v11[4] = v10;
    int v12 = a2;
    dispatch_async(v9, v11);
    uint64_t v6 = 0;
  }
  return v7 | (unint64_t)v6;
}

uint64_t _CTServerConnectionUnregisterForAllNotifications(uint64_t a1)
{
  uint64_t v15 = a1;
  if (!a1)
  {
    uint64_t v4 = 0x1600000000;
LABEL_12:
    uint64_t v5 = 1;
    return v4 | v5;
  }
  CCMonitor::instance(&block);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 136) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v17);
  }
  if (v3)
  {
    CCMonitor::instance(&block);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v17);
    }
    uint64_t v4 = 0x100000000;
    goto LABEL_12;
  }
  int v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v6 = *(NSObject **)(a1 + 16);
  v11[0] = &v15;
  v11[1] = &v12;
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  unsigned int v18 = ___ZN8dispatch9sync_implIZ48_CTServerConnectionUnregisterForAllNotificationsE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  uint64_t v19 = &__block_descriptor_tmp_109;
  uint64_t v20 = v11;
  dispatch_sync(v6, &block);
  unint64_t v7 = v12;
  uint64_t v8 = v13;
  if (v12 != v13)
  {
    do
    {
      int v9 = *v7++;
    }
    while (v7 != v8);
    unint64_t v7 = v12;
  }
  if (v7)
  {
    uint64_t v13 = v7;
    operator delete(v7);
  }
  uint64_t v5 = 0;
  uint64_t v4 = 0;
  return v4 | v5;
}

uint64_t anonymous namespace'::UnregisterClientForEvent(uint64_t a1, int a2)
{
  uint64_t v2 = 0x1600000001;
  if (!a1 || !*(void *)(a1 + 16)) {
    return v2;
  }
  if (a2 < -1) {
    return 0;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    xpc_object_t v6 = v5;
    xpc_object_t v14 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v14 = v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  if (MEMORY[0x1853203E0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    xpc_object_t v7 = v6;
    goto LABEL_11;
  }
LABEL_9:
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v14 = v7;
LABEL_11:
  xpc_release(v6);
  xpc_object_t v8 = xpc_string_create("kUnregisterNotification");
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kRequest", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(a2);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kEvent", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  uint64_t v2 = SendXpcMessageIf(1, a1, &v14, v12, 0);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionGetCommCenterInitializationState(uint64_t a1, BOOL *a2)
{
  uint64_t v2 = 0x1600000001;
  if (!a1 || !a2) {
    return v2;
  }
  CCMonitor::instance(&v15);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    BOOL v6 = *(unsigned __int8 *)(v5 + 136) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v16);
  }
  if (v6)
  {
    CCMonitor::instance(&v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v16);
    }
    *a2 = 0;
    return 0x100000001;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  uint64_t v8 = MEMORY[0x1E4F14590];
  if (v7)
  {
    xpc_object_t v9 = v7;
    xpc_object_t v15 = v7;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v15 = v9;
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1853203E0](v9) == v8)
  {
    xpc_retain(v9);
    xpc_object_t v10 = v9;
    goto LABEL_18;
  }
LABEL_16:
  xpc_object_t v10 = xpc_null_create();
  xpc_object_t v15 = v10;
LABEL_18:
  xpc_release(v9);
  xpc_object_t v11 = xpc_string_create("kPing");
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kRequest", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t object = xpc_null_create();
  uint64_t v2 = SendXpcMessageIf((*(unsigned char *)(*(void *)(a1 + 24) + 136) != 0) & (sInternalDeadFlag ^ 1u), a1, &v15, &object);
  *a2 = MEMORY[0x1853203E0](object) == v8;
  xpc_release(object);
  xpc_release(v10);
  return v2;
}

uint64_t _CTServerConnectionGetXpcConnection(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 16)) {
      return *(void *)(result + 40);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t _CTServerConnectionIsDefaultConnection(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 32);
  }
  return result;
}

uint64_t SendXpcMessageAsync(uint64_t a1, xpc_object_t *a2, NSObject *a3, void *a4)
{
  if (!*(unsigned char *)(*(void *)(a1 + 24) + 136)) {
    return 0;
  }
  CCMonitor::instance(&v13);
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    BOOL v9 = *(unsigned char *)(v8 + 136) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v14);
  }
  if (v9) {
    return 0;
  }
  xpc_object_t v11 = *a2;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v10 = 1;
  _HandlePrepWorkBeforeSend(a1, 1);
  xpc_connection_send_message_with_reply(*(xpc_connection_t *)(a1 + 40), v11, a3, a4);
  xpc_release(v11);
  return v10;
}

void **xpc::dict::dict(void **a1, void **a2)
{
  BOOL v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void loadBundle(const __CFString *key, os_log_t *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Mutable = (const __CFDictionary *)sloadedBundles;
  if (!sloadedBundles)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    sloadedBundles = (uint64_t)Mutable;
  }
  CFStringRef Value = CFDictionaryGetValue(Mutable, key);
  if (Value)
  {
    BOOL v6 = Value;
    CFTypeID TypeID = CFBundleGetTypeID();
    if (TypeID == CFGetTypeID(v6)) {
      return;
    }
    uint64_t v8 = *a2;
    if (os_log_type_enabled(*a2, OS_LOG_TYPE_ERROR)) {
      loadBundle(v8);
    }
  }
  CFIndex Length = CFStringGetLength(key);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = 0;
  std::string::basic_string[abi:nn180100](__p, Length + 1, 0);
  if (v21 >= 0) {
    uint64_t v10 = (char *)__p;
  }
  else {
    uint64_t v10 = (char *)__p[0];
  }
  if (CFStringGetCString(key, v10, Length + 1, 0x8000100u))
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v21 >= 0) {
      xpc_object_t v12 = __p;
    }
    else {
      xpc_object_t v12 = (void **)__p[0];
    }
    CFURLRef v13 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v12, Length, 1u);
    if (v13 && (CFURLRef v14 = v13, v15 = CFBundleCreate(v11, v13), CFRelease(v14), v15))
    {
      uint64_t v16 = *a2;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = __p;
        if (v21 < 0) {
          uint64_t v17 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = v17;
        _os_log_impl(&dword_18444A000, v16, OS_LOG_TYPE_DEFAULT, "#I Successfully loaded bundle %{public}s", buf, 0xCu);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)sloadedBundles, key, v15);
      CFRelease(v15);
    }
    else
    {
      unsigned int v18 = *a2;
      if (os_log_type_enabled(*a2, OS_LOG_TYPE_ERROR)) {
        loadBundle((char *)&v21 + 7, __p, v18);
      }
    }
  }
  else
  {
    uint64_t v19 = *a2;
    if (os_log_type_enabled(*a2, OS_LOG_TYPE_ERROR)) {
      loadBundle(v19);
    }
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
}

void appendCallNotificationDictionary(const void *a1, int a2, xpc_object_t *a3, CFMutableDictionaryRef *a4)
{
  int valuePtr = a3;
  CFStringRef v49 = "kUuid";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v46);
  uint64_t UuidBytes = createUuidBytes(v46);
  uint64_t v32 = v8;
  uint64_t v33 = UuidBytes;
  xpc_release(v46[0]);
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  xpc_object_t v43 = a3;
  xpc_object_t v44 = "kPhoneNumber";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v43, &object);
  int valuePtr = 0;
  CFStringRef v49 = 0;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0) {
    operator delete(valuePtr);
  }
  xpc_release(object);
  xpc_object_t v43 = 0;
  xpc_object_t v44 = 0;
  uint64_t v45 = 0;
  xpc_object_t object = a3;
  xpc_object_t v41 = "kCallName";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &__p);
  int valuePtr = 0;
  CFStringRef v49 = 0;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0) {
    operator delete(valuePtr);
  }
  xpc_release(__p);
  xpc_object_t object = 0;
  xpc_object_t v41 = 0;
  uint64_t v42 = 0;
  xpc_object_t __p = a3;
  xpc_object_t v38 = "kSource";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, v35);
  int valuePtr = 0;
  CFStringRef v49 = 0;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0) {
    operator delete(valuePtr);
  }
  xpc_release(v35[0]);
  int valuePtr = a3;
  CFStringRef v49 = "kCallStartTime";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  int v9 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  int valuePtr = a3;
  CFStringRef v49 = "kCallDuration";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  int v10 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  int valuePtr = a3;
  CFStringRef v49 = "kCallFlags";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  unsigned int v11 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  int valuePtr = a3;
  CFStringRef v49 = "kCallSessionStart";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  int v12 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  int valuePtr = a3;
  CFStringRef v49 = "kMobileCountryCode";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  xpc_object_t __p = 0;
  xpc_object_t v38 = 0;
  uint64_t v39 = 0;
  v35[0] = a3;
  v35[1] = "kISOCountryCode";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v35, &v36);
  int valuePtr = 0;
  CFStringRef v49 = 0;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0) {
    operator delete(valuePtr);
  }
  xpc_release(v36);
  unsigned int v14 = a2 - 1;
  if (v47 >= 0) {
    CFBundleRef v15 = (const char *)v46;
  }
  else {
    CFBundleRef v15 = (const char *)v46[0];
  }
  if (v45 >= 0) {
    uint64_t v16 = (const char *)&v43;
  }
  else {
    uint64_t v16 = (const char *)v43;
  }
  if (v42 >= 0) {
    p_xpc_object_t object = (const char *)&object;
  }
  else {
    p_xpc_object_t object = (const char *)object;
  }
  if (v39 >= 0) {
    cStr = (char *)&__p;
  }
  else {
    cStr = (char *)__p;
  }
  if (v14 >= 2) {
    int v19 = 0;
  }
  else {
    int v19 = v12;
  }
  uint64_t v20 = (const void *)_CTCallCreateFromCallInfo(a1, v33, v32, v15, v16, p_object, v9, v10, v11, v19, v13, cStr, 1u);
  if (xpc_dictionary_get_value(*a3, "kAudioToneRelayFlag"))
  {
    int valuePtr = a3;
    CFStringRef v49 = "kAudioToneRelayFlag";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    char v21 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    CTCallSetAudioToneRelayFlag((uint64_t)v20, v21);
  }
  if (xpc_dictionary_get_value(*a3, "kMobileOriginatedCallEndFlag"))
  {
    int valuePtr = a3;
    CFStringRef v49 = "kMobileOriginatedCallEndFlag";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    char v22 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    CTCallSetDeviceOriginatedEndFlag((uint64_t)v20, v22);
  }
  if (xpc_dictionary_get_value(*a3, "kClientNeedsToSetupAudioInterruptions"))
  {
    int valuePtr = a3;
    CFStringRef v49 = "kClientNeedsToSetupAudioInterruptions";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    char v23 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    CTCallSetSetupAudioInterruptionFlag((uint64_t)v20, v23);
  }
  if (CFDictionaryContainsValue(*a4, @"kCTCall")) {
    CFDictionaryRemoveValue(*a4, @"kCTCall");
  }
  CFDictionarySetValue(*a4, @"kCTCall", v20);
  CFRelease(v20);
  CFAllocatorRef v24 = CFGetAllocator(a1);
  LODWORD(valuePtr) = _CTCallGetCallStatusFromFlags(v11, 0);
  CFNumberRef v25 = CFNumberCreate(v24, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*a4, @"kCTCallStatus", v25);
  CFRelease(v25);
  if (xpc_dictionary_get_value(*a3, "kIsTheOnlyCall"))
  {
    int valuePtr = a3;
    CFStringRef v49 = "kIsTheOnlyCall";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    int v26 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    uint64_t v27 = (const void **)MEMORY[0x1E4F1CFC8];
    if (v26) {
      uint64_t v27 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(*a4, @"kCTCallIsTheOnlyCall", *v27);
  }
  unint64_t v28 = (const char *)HIBYTE(v42);
  if (v42 < 0) {
    unint64_t v28 = v41;
  }
  if (v28 && (v14 < 2 || a2 == 106 || a2 == 104))
  {
    CFAllocatorRef v29 = CFGetAllocator(a1);
    uint64_t v30 = v42 >= 0 ? (const char *)&object : (const char *)object;
    CFStringRef v31 = CFStringCreateWithCString(v29, v30, 0x8000100u);
    CFDictionarySetValue(*a4, @"kCTCallSource", v31);
    if (v31) {
      CFRelease(v31);
    }
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(object);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
}

CFStringRef _CTServerConnectionCopyDescription(CFStringRef result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFAllocatorRef v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, @"<CTServerConnection %p [%p]>", v1, v2);
  }
  return result;
}

void ___ZL26_CTServerConnectionDestroyPKv_block_invoke_3(uint64_t a1)
{
}

xpc_object_t __copy_helper_block_8_32c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    return xpc_retain(v3);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *(void *)(a1 + 32) = result;
  }
  return result;
}

void __destroy_helper_block_8_32c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void ___ZL12_XpcCallbackPvP13CTServerState_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFAllocatorRef v2 = *(void **)(a1 + 40);
  if (v3 == v2[3])
  {
    if (*(_DWORD *)(v3 + 140) != 2) {
      *(_DWORD *)(v3 + 140) = 2;
    }
    _CTServerConnectionReEstablish(v2);
    uint64_t v4 = **(NSObject ***)(*(void *)(a1 + 32) + 80);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_18444A000, v4, OS_LOG_TYPE_DEFAULT, "#I Successfully reestablished connection", v5, 2u);
    }
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
}

void _CTServerConnectionReEstablish(void *a1)
{
  _CTServerConnectionCleanup((uint64_t)a1);
  CFRetain(a1);
  CFAllocatorRef v2 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL30_CTServerConnectionReEstablishP20__CTServerConnection_block_invoke;
  block[3] = &__block_descriptor_tmp_93;
  void block[4] = a1;
  dispatch_async(v2, block);
}

void ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    CFAllocatorRef v2 = (void *)(a1 + 48);
    if (!xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), "kNotificationFlag"))
    {
      if (xpc_dictionary_get_value((xpc_object_t)*v2, "kEvent"))
      {
        *(void *)xpc_object_t __p = v2;
        *(void *)&__p[8] = "kNotificationEvent";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)__p, v94);
        int v7 = xpc::dyn_cast_or_default((xpc *)v94, 0);
        xpc_release(v94[0]);
        uint64_t v8 = sNotificationStringForCTEvent(v7);
        if (v8)
        {
          CFStringRef v9 = v8;
          p_xpc_object_t object = 0;
          *(void *)xpc_object_t __p = v2;
          *(void *)&__p[8] = "kNotificationDict";
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &p_object);
          uint64_t v10 = MEMORY[0x1853203E0](p_object);
          CFMutableDictionaryRef MutableCopy = 0;
          CFDictionaryRef v12 = 0;
          uint64_t v13 = MEMORY[0x1E4F14590];
          if (v10 == MEMORY[0x1E4F14590])
          {
            v78[0] = p_object;
            if (p_object) {
              xpc_retain(p_object);
            }
            else {
              v78[0] = xpc_null_create();
            }
            xpc::bridge((uint64_t *)v94, (xpc *)v78, v14);
            ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(__p, (CFTypeRef *)v94);
            CFDictionaryRef v12 = *(const __CFDictionary **)__p;
            *(void *)xpc_object_t __p = 0;
            if (v94[0]) {
              CFRelease(v94[0]);
            }
            xpc_release(v78[0]);
            if (v12) {
              long long v55 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            }
            else {
              long long v55 = 0;
            }
            if (v55)
            {
              CFAllocatorRef v56 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
              CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v56, 0, v12);
            }
            else
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke_cold_1((xpc::object *)&p_object);
              }
              CFMutableDictionaryRef MutableCopy = 0;
            }
          }
          xpc_object_t object = 0;
          *(void *)xpc_object_t __p = v2;
          *(void *)&__p[8] = "kNotificationAdditional";
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &object);
          if (MEMORY[0x1853203E0](object) == v13)
          {
            xpc_object_t xdata = 0;
            *(void *)xpc_object_t __p = &object;
            *(void *)&__p[8] = "kLoadBundle";
            xpc::dict::object_proxy::operator xpc::array((uint64_t)__p, &xdata);
            if (MEMORY[0x1853203E0](xdata) == MEMORY[0x1E4F14568])
            {
              size_t count = xpc_array_get_count(xdata);
              if (count)
              {
                CFIndex v61 = (char *)count;
                for (int i = 0; i != v61; ++i)
                {
                  v78[1] = 0;
                  v78[0] = 0;
                  *(void *)&long long v79 = 0;
                  v94[0] = &xdata;
                  v94[1] = i;
                  xpc::array::object_proxy::operator xpc::object((uint64_t)v94, v110);
                  memset(__p, 0, 24);
                  xpc::dyn_cast_or_default();
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  xpc_release(*(xpc_object_t *)&v110[0]);
                  if (SBYTE7(v79) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v72, (const std::string::value_type *)v78[0], (std::string::size_type)v78[1]);
                  }
                  else
                  {
                    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)v78;
                    v72.__r_.__value_.__r.__words[2] = v79;
                  }
                  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v94, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)v94 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
                    *(void *)&long long v95 = *((void *)&v72.__r_.__value_.__l + 2);
                  }
                  if (SBYTE7(v95) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v94[0], (std::string::size_type)v94[1]);
                  }
                  else
                  {
                    *(_OWORD *)xpc_object_t __p = *(_OWORD *)v94;
                    *(void *)&__p[16] = v95;
                  }
                  *(void *)&v110[0] = 0;
                  if (ctu::cf::convert_copy()) {
                    CFStringRef v63 = *(const __CFString **)&v110[0];
                  }
                  else {
                    CFStringRef v63 = 0;
                  }
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  if (SBYTE7(v95) < 0) {
                    operator delete(v94[0]);
                  }
                  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v72.__r_.__value_.__l.__data_);
                  }
                  loadBundle(v63, *(os_log_t **)(*(void *)(a1 + 32) + 80));
                  if (v63) {
                    CFRelease(v63);
                  }
                  if (SBYTE7(v79) < 0) {
                    operator delete(v78[0]);
                  }
                }
              }
            }
            *(void *)xpc_object_t __p = &object;
            *(void *)&__p[8] = "kCTCallProcessing";
            if (xpc_dictionary_get_value(object, "kCTCallProcessing"))
            {
              long long v64 = *(const void **)(a1 + 40);
              xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, v94);
              CFMutableDictionaryRef v71 = MutableCopy;
              if (MutableCopy)
              {
                CFRetain(MutableCopy);
                appendCallNotificationDictionary(v64, v7, v94, &v71);
                CFRelease(MutableCopy);
              }
              else
              {
                appendCallNotificationDictionary(v64, v7, v94, &v71);
              }
              xpc_release(v94[0]);
            }
            v94[0] = &object;
            v94[1] = "kCTCallInvalidateCache";
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v94, v78);
            int v65 = xpc::dyn_cast_or_default((xpc *)v78, 0);
            xpc_release(v78[0]);
            if (v65) {
              _CTCallInvalidateCallCache();
            }
            xpc_release(xdata);
          }
          CFStringRef SymbolMapping = SymbolMapping::getSymbolMapping(v9, v59);
          *(void *)xpc_object_t __p = 0;
          SymbolMapping::mapAllSymbols(MutableCopy, __p);
          CTServerState::sendNotification_sync(*(void **)(*(void *)(a1 + 40) + 24), v7, SymbolMapping, *(const void **)__p);
          if (*(void *)__p) {
            CFRelease(*(CFTypeRef *)__p);
          }
          xpc_release(object);
          xpc_release(p_object);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          if (v12) {
            CFRelease(v12);
          }
        }
      }
      else if (xpc_dictionary_get_value((xpc_object_t)*v2, "kRequest"))
      {
        v94[1] = 0;
        v94[0] = 0;
        *(void *)&long long v95 = 0;
        v78[0] = v2;
        v78[1] = "kRequest";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v78, v110);
        memset(__p, 0, 24);
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v110[0]);
        CFBundleRef v15 = std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::find<std::string>(*(void *)(a1 + 32) + 56, v94);
        if ((void **)(*(void *)(a1 + 32) + 64) != v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = v15[7];
          unsigned int v18 = v17 ? _Block_copy(v17) : 0;
          CFRetain(*(CFTypeRef *)(a1 + 40));
          uint64_t v57 = *(void *)(a1 + 32);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 1174405120;
          block[2] = ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke_81;
          block[3] = &__block_descriptor_tmp_82;
          long long v58 = *(void **)(a1 + 48);
          void block[4] = v16;
          xpc_object_t v69 = v58;
          if (v58) {
            xpc_retain(v58);
          }
          else {
            xpc_object_t v69 = xpc_null_create();
          }
          uint64_t v70 = *(void *)(a1 + 40);
          CTServerState::dispatchToClient_sync(v57, block);
          xpc_release(v69);
          xpc_object_t v69 = 0;
          if (v18) {
            _Block_release(v18);
          }
        }
        if (SBYTE7(v95) < 0) {
          operator delete(v94[0]);
        }
      }
      else if (xpc_dictionary_get_value((xpc_object_t)*v2, "kClientWatchdogPing"))
      {
        xpc_object_t v50 = xpc_null_create();
        v94[0] = v50;
        uint64_t v51 = MEMORY[0x1853203E0](*v2);
        uint64_t v52 = MEMORY[0x1E4F14590];
        if (v51 == MEMORY[0x1E4F14590])
        {
          xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)*v2);
          if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && MEMORY[0x1853203E0](reply) == v52)
          {
            xpc_retain(reply);
            xpc_object_t v54 = reply;
          }
          else
          {
            xpc_object_t v54 = xpc_null_create();
          }
          xpc_object_t v67 = xpc_null_create();
          v94[0] = v54;
          xpc_release(v50);
          xpc_release(v67);
          xpc_release(reply);
          xpc_object_t v50 = v54;
        }
        *(void *)xpc_object_t __p = 0;
        *(void *)&__p[8] = 0;
        if (MEMORY[0x1853203E0](v50) == v52) {
          operator new();
        }
        xpc_release(v94[0]);
      }
      goto LABEL_38;
    }
    memset(v110, 0, sizeof(v110));
    long long v109 = 0u;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    long long v99 = 0u;
    long long v98 = 0u;
    long long v97 = 0u;
    long long v96 = 0u;
    long long v95 = 0u;
    *(_OWORD *)v94 = 0u;
    long long v93 = 0u;
    long long v92 = 0u;
    long long v91 = 0u;
    long long v90 = 0u;
    long long v89 = 0u;
    long long v88 = 0u;
    long long v87 = 0u;
    long long v86 = 0u;
    long long v85 = 0u;
    long long v84 = 0u;
    long long v83 = 0u;
    long long v82 = 0u;
    long long v81 = 0u;
    long long v80 = 0u;
    long long v79 = 0u;
    *(_OWORD *)long long v78 = 0u;
    bzero(__p, 0x400uLL);
    p_xpc_object_t object = v2;
    v75 = "kEvent";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &object);
    int v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (xpc_dictionary_get_value((xpc_object_t)*v2, "kUuid"))
    {
      v75 = "kUuid";
      xpc_object_t object = 0;
      p_xpc_object_t object = v2;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &object);
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      if (MEMORY[0x1853203E0](object) == MEMORY[0x1E4F14580])
      {
        if (xpc_data_get_length(object) == 16)
        {
          bytes_ptr = (uint64_t *)xpc_data_get_bytes_ptr(object);
          uint64_t v5 = *bytes_ptr;
          uint64_t v4 = bytes_ptr[1];
        }
        else
        {
          uint64_t v4 = 0;
          uint64_t v5 = 0;
        }
      }
      xpc_release(object);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    p_xpc_object_t object = v2;
    v75 = "kArgs";
    xpc_object_t object = 0;
    xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_object, &object);
    int64_t v19 = 0;
    if (MEMORY[0x1853203E0](object) == MEMORY[0x1E4F14568])
    {
      int64_t v20 = xpc_array_get_count(object);
      int64_t v19 = v20 >= 16 ? 16 : v20;
      if (v20 >= 1)
      {
        char v21 = 0;
        if (v19 <= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = v19;
        }
        do
        {
          p_xpc_object_t object = &object;
          v75 = v21;
          xpc::array::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
          *((void *)v110 + (void)v21) = xpc::dyn_cast_or_default((xpc *)&xdata, 0);
          xpc_release(xdata);
          ++v21;
        }
        while ((const char *)v22 != v21);
      }
    }
    if (xpc_dictionary_get_value((xpc_object_t)*v2, "kStr1"))
    {
      p_xpc_object_t object = v2;
      v75 = "kStr1";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
      sAssignString((char *)v94, 0x100uLL, (const object *)&xdata);
    }
    else
    {
      if (!xpc_dictionary_get_value((xpc_object_t)*v2, "kStr1Data"))
      {
LABEL_31:
        if (xpc_dictionary_get_value((xpc_object_t)*v2, "kStr2"))
        {
          p_xpc_object_t object = v2;
          v75 = "kStr2";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
          sAssignString((char *)v78, 0x100uLL, (const object *)&xdata);
        }
        else
        {
          if (!xpc_dictionary_get_value((xpc_object_t)*v2, "kStr2Data"))
          {
LABEL_34:
            if (xpc_dictionary_get_value((xpc_object_t)*v2, "kLStr"))
            {
              p_xpc_object_t object = v2;
              v75 = "kLStr";
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
              sAssignString(__p, 0x400uLL, (const object *)&xdata);
            }
            else
            {
              if (!xpc_dictionary_get_value((xpc_object_t)*v2, "kLStrData")) {
                goto LABEL_37;
              }
              xpc_object_t xdata = 0;
              p_xpc_object_t object = v2;
              v75 = "kLStrData";
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
              if (MEMORY[0x1853203E0](xdata) == MEMORY[0x1E4F14580] && xpc_data_get_length(xdata) == 1024)
              {
                CFStringRef v49 = xpc_data_get_bytes_ptr(xdata);
                memcpy(__p, v49, sizeof(__p));
              }
            }
            xpc_release(xdata);
LABEL_37:
            _CTHandleNotification(*(void ***)(a1 + 40), v3, (uint64_t)v110, v19, v5, v4, (const char *)v94, (const char *)v78, __p);
            xpc_release(object);
LABEL_38:
            CFRelease(*(CFTypeRef *)(a1 + 40));
            return;
          }
          xpc_object_t xdata = 0;
          p_xpc_object_t object = v2;
          v75 = "kStr2Data";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
          if (MEMORY[0x1853203E0](xdata) == MEMORY[0x1E4F14580] && xpc_data_get_length(xdata) == 256)
          {
            xpc_object_t v36 = (long long *)xpc_data_get_bytes_ptr(xdata);
            long long v37 = v36[2];
            long long v39 = *v36;
            long long v38 = v36[1];
            long long v81 = v36[3];
            long long v80 = v37;
            *(_OWORD *)long long v78 = v39;
            long long v79 = v38;
            long long v40 = v36[6];
            long long v42 = v36[4];
            long long v41 = v36[5];
            long long v85 = v36[7];
            long long v84 = v40;
            long long v82 = v42;
            long long v83 = v41;
            long long v43 = v36[10];
            long long v45 = v36[8];
            long long v44 = v36[9];
            long long v89 = v36[11];
            long long v88 = v43;
            long long v86 = v45;
            long long v87 = v44;
            long long v46 = v36[14];
            long long v48 = v36[12];
            long long v47 = v36[13];
            long long v93 = v36[15];
            long long v92 = v46;
            long long v90 = v48;
            long long v91 = v47;
          }
        }
        xpc_release(xdata);
        goto LABEL_34;
      }
      xpc_object_t xdata = 0;
      p_xpc_object_t object = v2;
      v75 = "kStr1Data";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
      if (MEMORY[0x1853203E0](xdata) == MEMORY[0x1E4F14580] && xpc_data_get_length(xdata) == 256)
      {
        char v23 = (long long *)xpc_data_get_bytes_ptr(xdata);
        long long v24 = v23[2];
        long long v26 = *v23;
        long long v25 = v23[1];
        long long v97 = v23[3];
        long long v96 = v24;
        *(_OWORD *)v94 = v26;
        long long v95 = v25;
        long long v27 = v23[6];
        long long v29 = v23[4];
        long long v28 = v23[5];
        long long v101 = v23[7];
        long long v100 = v27;
        long long v98 = v29;
        long long v99 = v28;
        long long v30 = v23[10];
        long long v32 = v23[8];
        long long v31 = v23[9];
        long long v105 = v23[11];
        long long v104 = v30;
        long long v102 = v32;
        long long v103 = v31;
        long long v33 = v23[14];
        long long v35 = v23[12];
        long long v34 = v23[13];
        long long v109 = v23[15];
        long long v108 = v33;
        long long v106 = v35;
        long long v107 = v34;
      }
    }
    xpc_release(xdata);
    goto LABEL_31;
  }
}

size_t sAssignString(char *a1, size_t a2, const object *a3)
{
  if (MEMORY[0x1853203E0](a3->fObj) != MEMORY[0x1E4F145D8] && MEMORY[0x1853203E0](a3->fObj) == MEMORY[0x1E4F145F0]) {
    string_ptr = xpc_string_get_string_ptr(a3->fObj);
  }
  else {
    string_ptr = "";
  }

  return strlcpy(a1, string_ptr, a2);
}

void ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke_81(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFAllocatorRef v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(v3 + 56);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v4 + 16))(v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

xpc_object_t __copy_helper_block_8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    return xpc_retain(v3);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *(void *)(a1 + 40) = result;
  }
  return result;
}

void __destroy_helper_block_8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void std::shared_ptr<xpc::dict>::reset[abi:nn180100]<xpc::dict,void (*)(xpc::dict*),void>()
{
}

void std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18531F680);
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void ___ZL30_CTServerConnectionReEstablishP20__CTServerConnection_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      *(unsigned char *)(v3 + 137) = 0;
      if (*(_DWORD *)(v3 + 140) != 1) {
        *(_DWORD *)(v3 + 140) = 1;
      }
      _CTServerConnectionCheckIn(v2);
      {
        CCMonitor::instance(&__p);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v13);
        }
      }
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 24) + 56;
  std::string::basic_string[abi:nn180100]<0>(&__p, "kIncomingCallCheckMessageRequest");
  uint64_t v6 = std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__count_unique<std::string>(v5, &__p);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&__p);
    xpc::dict_creator::operator()<char const*>("kCallEnableSilentHours", &__p, "kRequest", &v11);
    xpc_release(__p);
    xpc_object_t v7 = v11;
    xpc_object_t __p = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    xpc_object_t v8 = xpc_BOOL_create(1);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kEnabled", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    SendXpcMessageIf(*(unsigned __int8 *)(*(void *)(v4 + 24) + 136), v4, &__p, v10, 1);
    xpc_release(v7);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__count_unique<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v2 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v2 + 4, a2) & 0x80) == 0) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  if (MEMORY[0x1853203E0](**(void **)(a1 + 32)) == MEMORY[0x1E4F14578])
  {
    uint64_t v2 = 0;
  }
  else
  {
    _CTServerConnectXpc_sync(*(xpc_connection_t **)(a1 + 32), *(NSObject **)(a1 + 40), 0);
    uint64_t v2 = **(void ***)(a1 + 32);
    xpc_retain(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(uint64_t **)(v3 + 40);
  if (!v4) {
    goto LABEL_12;
  }
  while (1)
  {
    int v5 = *((_DWORD *)v4 + 8);
    if (v5 <= -3) {
      break;
    }
LABEL_8:
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      goto LABEL_12;
    }
  }
  if (v5 != -3)
  {
    ++v4;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v3 + 136))
  {
    CTServerState::sendNotification_sync((void *)v3, -3, @"kCTDaemonReadyNotification", 0);
    uint64_t v3 = *(void *)(a1 + 32);
  }
LABEL_12:
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke_2;
  block[3] = &__block_descriptor_tmp_101;
  uint64_t v6 = *(void *)(a1 + 48);
  void block[4] = v2;
  void block[5] = v6;
  void block[6] = v3;
  CTServerState::dispatchToClient_sync(v3, block);
}

void ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
    if (v4) {
      xpc_release(v4);
    }
    if (a1[4]) {
      goto LABEL_6;
    }
  }
  if (*(unsigned char *)(a1[6] + 137))
  {
LABEL_6:
    _CTServerConnectionReEstablish((void *)a1[5]);
    *(unsigned char *)(a1[6] + 137) = 0;
  }
  int v5 = (const void *)a1[5];

  CFRelease(v5);
}

void std::__shared_ptr_pointer<CCMonitor *,std::shared_ptr<CCMonitor>::__shared_ptr_default_delete<CCMonitor,CCMonitor>,std::allocator<CCMonitor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18531F680);
}

dispatch_object_t *std::__shared_ptr_pointer<CCMonitor *,std::shared_ptr<CCMonitor>::__shared_ptr_default_delete<CCMonitor,CCMonitor>,std::allocator<CCMonitor>>::__on_zero_shared(uint64_t a1)
{
  xpc_object_t result = *(dispatch_object_t **)(a1 + 24);
  if (result)
  {
    CCMonitor::~CCMonitor(result);
    JUMPOUT(0x18531F680);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CCMonitor *,std::shared_ptr<CCMonitor>::__shared_ptr_default_delete<CCMonitor,CCMonitor>,std::allocator<CCMonitor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ___ZN8dispatch9sync_implIZ48_CTServerConnectionUnregisterForAllNotificationsE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  CFStringRef v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(*(void *)*v1 + 24);
  uint64_t v3 = *(void **)(v2 + 32);
  if (v3 != (void *)(v2 + 40))
  {
    do
    {
      uint64_t v4 = v1[1];
      int v5 = *(_DWORD **)(v4 + 8);
      unint64_t v6 = *(void *)(v4 + 16);
      if ((unint64_t)v5 >= v6)
      {
        xpc_object_t v8 = *(_DWORD **)v4;
        uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          abort();
        }
        uint64_t v11 = v6 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v4 + 16, v12);
          xpc_object_t v8 = *(_DWORD **)v4;
          int v5 = *(_DWORD **)(v4 + 8);
        }
        else
        {
          uint64_t v13 = 0;
        }
        char v14 = &v13[4 * v9];
        *(_DWORD *)char v14 = *((_DWORD *)v3 + 8);
        xpc_object_t v7 = v14 + 4;
        while (v5 != v8)
        {
          int v15 = *--v5;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *(void *)uint64_t v4 = v14;
        *(void *)(v4 + 8) = v7;
        *(void *)(v4 + 16) = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *int v5 = *((_DWORD *)v3 + 8);
        xpc_object_t v7 = v5 + 1;
      }
      *(void *)(v4 + 8) = v7;
      uint64_t v16 = (void *)v3[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v3[2];
          BOOL v18 = *v17 == (void)v3;
          uint64_t v3 = v17;
        }
        while (!v18);
      }
      uint64_t v3 = v17;
    }
    while (v17 != (void *)(v2 + 40));
    uint64_t v2 = *(void *)(*(void *)*v1 + 24);
  }
  int64_t v20 = *(void **)(v2 + 40);
  int64_t v19 = (void *)(v2 + 40);
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy((uint64_t)(v19 - 1), v20);
  *(v19 - 1) = v19;
  void *v19 = 0;
  v19[1] = 0;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

uint64_t std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::__erase_unique<int>(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      xpc_object_t v7 = (uint64_t *)v2;
    }
    else {
      xpc_object_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::erase((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  int v3 = std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (const void *)a2[5];
  if (v4) {
    _Block_release(v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t _CTServerConnectionCopyCellBroadcastAlertTypes(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSmsCopyCellBroadcastAlertTypes", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypes"))
    {
      uint64_t v7 = 0;
      xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypes");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
      *a2 = v7;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyCellBroadcastAlertTypesForAllSIMSlots(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSmsCopyCellBroadcastAlertTypesForAllSIMSlots", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypesForAllSIMSlots"))
      {
        uint64_t v7 = 0;
        xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypesForAllSIMSlots");
        uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
        *a2 = v7;
      }
      else if (!xpc_dictionary_get_value(xdict, "kDidSucceed"))
      {
        uint64_t v2 = 0x1300000001;
      }
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionGetCellBroadcastSettingForAlertType(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastSettingForAlertType", &object, "kRequest", &v15);
    xpc_release(object);
    xpc_object_t v8 = v15;
    xpc_object_t v16 = v15;
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v15);
    uint64_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      uint64_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastAlertTypes", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v15 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v16, &v15);
    *a3 = 0;
    *a4 = 0;
    if (MEMORY[0x1853203E0](v15) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v15;
      uint64_t v13 = "kSmsCellBroadcastEnabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
      xpc_release(v14);
      xpc_object_t object = &v15;
      uint64_t v13 = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
      xpc_release(v14);
    }
    xpc_release(v15);
    xpc_release(v16);
  }
  return v4;
}

uint64_t _CTServerConnectionGetAutoReadOutSetting(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetAutoReadOutSetting", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    xpc_object_t v11 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v12, &v11);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x1853203E0](v11) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v11;
      uint64_t v9 = "kAutoReadOutEnabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      xpc_object_t object = &v11;
      uint64_t v9 = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  return v3;
}

uint64_t _CTServerConnectionSetCellBroadcastSettingForAlertType(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsSetCellBroadcastSettingForAlertType", object, "kRequest", &v16);
    xpc_release(object[0]);
    xpc_object_t v8 = v16;
    xpc_object_t v17 = v16;
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v16);
    uint64_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      uint64_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastAlertTypes", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v11 = xpc_BOOL_create(a3 == 1);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastEnabled", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t v16 = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v17, &v16);
    *a4 = 0;
    if (MEMORY[0x1853203E0](v16) == MEMORY[0x1E4F14590])
    {
      object[0] = &v16;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v15);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
      xpc_release(v15);
    }
    xpc_release(v16);
    xpc_release(v17);
  }
  return v4;
}

uint64_t _CTServerConnectionSetAutoReadOutSetting(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSetAutoReadOutSetting", object, "kRequest", &v13);
    xpc_release(object[0]);
    xpc_object_t v7 = v13;
    xpc_object_t v14 = v13;
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v13);
    xpc_object_t v8 = xpc_BOOL_create(a2 == 1);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kAutoReadOutEnabled", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t v13 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v14, &v13);
    *a3 = 0;
    if (MEMORY[0x1853203E0](v13) == MEMORY[0x1E4F14590])
    {
      object[0] = &v13;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSendAppleSafetyAlert(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSendAppleSafetyAlert", object, "kRequest", &v12);
    xpc_release(object[0]);
    xpc_object_t v6 = v12;
    xpc_object_t v13 = v12;
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v12);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kAppleSafetyAlertContent", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v12 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &v12);
    *a3 = 0;
    if (MEMORY[0x1853203E0](v12) == MEMORY[0x1E4F14590])
    {
      object[0] = &v12;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v3;
}

uint64_t _CTServerConnectionGetCellBroadcastConfig(uint64_t a1, xpc_object_t *a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastConfig", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v11, &xdict);
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
    }
    object[0] = 0;
    xpc_dictionary_get_value(xdict, "kSmsCellBroadcastConfigContent");
    xpc_object_t v9 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v9);
    *a2 = object[0];
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v3;
}

uint64_t _CTServerConnectionSetCellBroadcastCustomPrefForAlertType(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsSetCellBroadcastCustomSettingsForAlertType", object, "kRequest", &v12);
    xpc_release(object[0]);
    xpc_object_t v6 = v12;
    xpc_object_t v13 = v12;
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v12);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kSmsSetCellBroadcastCustomSettings", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v12 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &v12);
    *a3 = 0;
    if (MEMORY[0x1853203E0](v12) == MEMORY[0x1E4F14590])
    {
      object[0] = &v12;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v3;
}

uint64_t _CTServerConnectionGetCellBroadcastCustomPrefForAlertType(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a3 && a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastCustomSettingsForAlertType", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v8 = xdict;
    xpc_object_t v15 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kSmsGetCellBroadcastCustomSettings", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v15, &xdict);
    *a4 = 0;
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kSmsCellBroadcastCustomSettingsResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v13);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v13, 0);
      xpc_release(v13);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsCellBroadcastCustomSettingsResponse");
      xpc_object_t v13 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v13);
      *a3 = object[0];
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v4;
}

uint64_t _CTServerConnectionSendSafetyAlertCustomCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, unsigned char *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a3 && a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsEarlyGeofenceCommandRequest", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v8 = xdict;
    xpc_object_t v23 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kSmsEarlyGeofenceCommandRequest", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v23, &xdict);
    *a4 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kSmsEarlyGeofenceCommandResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v21);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
      xpc_release(v21);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsEarlyGeofenceCommandResponse");
      xpc_object_t v21 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v21);
      *a3 = object[0];
    }
    else
    {
      BOOL v11 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v11) {
        _CTServerConnectionSendSafetyAlertCustomCommand_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
      }
    }
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4;
}

uint64_t _CTServerConnectionGetCellBroadcastOverrideAccessibilityVibrationSetting(uint64_t a1, Boolean *a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingRequest", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &xdict);
    *a3 = 0;
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingResponse");
      xpc_object_t v11 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFBoolean const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v11);
      xpc_object_t v7 = object[0];
      if (object[0]) {
        xpc_object_t v8 = ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get;
      }
      else {
        xpc_object_t v8 = 0;
      }
      if (v8)
      {
        *a2 = CFBooleanGetValue((CFBooleanRef)object[0]);
        xpc_object_t v7 = object[0];
      }
      if (v7) {
        CFRelease(v7);
      }
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v3;
}

uint64_t ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _CTServerConnectionSelfTestCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, unsigned char *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a3 && a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsCellBroadcastSelfTestRequest", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v8 = xdict;
    xpc_object_t v23 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastSelfTestRequest", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &v23, &xdict);
    *a4 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kSmsCellBroadcastSelfTestResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v21);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
      xpc_release(v21);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsCellBroadcastSelfTestResponse");
      xpc_object_t v21 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v21);
      *a3 = object[0];
    }
    else
    {
      BOOL v11 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v11) {
        _CTServerConnectionSelfTestCommand_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
      }
    }
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4;
}

uint64_t _CTServerConnectionGetTestModeFunction()
{
  return 0x2D00000001;
}

uint64_t _CTServerConnectionSetTestModeFunction()
{
  return 0x2D00000001;
}

uint64_t _CTServerConnectionInjectCellBroadcastMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInjectCellBroadcastMessage", &object, "kRequest", &v8);
    xpc_release(object);
    xpc_object_t v4 = v8;
    xpc_object_t object = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    int v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      int v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kInjectCellBroadcastMessage", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionInjectCellBroadcastMessageWithWac(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInjectCellBroadcastMessage", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v4 = v10;
    xpc_object_t object = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    int v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      int v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kInjectCellBroadcastMessage", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kInjectWacString", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v10);
    xpc_release(v10);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionInjectOOSGeofence(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInjectOOSGeofence", &object, "kRequest", &v16);
    xpc_release(object);
    xpc_object_t v3 = v16;
    xpc_object_t object = v16;
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v16);
    xpc_object_t v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v4) {
      xpc_object_t v4 = xpc_null_create();
    }
    xpc_dictionary_set_value(v3, "kInjectOOSGeofence", v4);
    xpc_object_t v5 = xpc_null_create();
    xpc_release(v4);
    xpc_release(v5);
    xpc_object_t v16 = xpc_null_create();
    uint64_t v6 = SendXpcMessage(a1, &object, &v16);
    xpc_release(v16);
    xpc_release(object);
  }
  else
  {
    uint64_t v6 = 0x1600000001;
    BOOL v7 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v7) {
      _CTServerConnectionInjectOOSGeofence_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  return v6;
}

uint64_t _CTServerConnectionIsPhoneNumberRegistrationSupported(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsIsPhoneNumberRegistrationSupported", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v9 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kSmsPhoneNumberRegistrationIsSupported"))
    {
      object[0] = &xdict;
      object[1] = "kSmsPhoneNumberRegistrationIsSupported";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionGetVoiceMailAvailable(const void *a1, unsigned char *a2, unsigned char *a3, _DWORD *a4, CFURLRef *a5)
{
  uint64_t v5 = 0x1600000001;
  if (a1 && a2 && a3 && a4 && a5)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetVoicemailCount", &object, "kRequest", &__p);
    xpc_release(object);
    xpc_object_t v23 = __p;
    xpc_object_t __p = xpc_null_create();
    xpc_release(__p);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v5 = SendXpcMessage((uint64_t)a1, &v23, &xdict);
    *a2 = 1;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &xdict;
      long long v25 = "kVoicemailAvailable";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &__p);
      *a2 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
      xpc_release(__p);
      if (xpc_dictionary_get_value(xdict, "kVoicemailCount"))
      {
        *a3 = 1;
        xpc_object_t object = &xdict;
        long long v25 = "kVoicemailCount";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &__p);
        *a4 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
        xpc_release(__p);
      }
      xpc_object_t __p = 0;
      CFIndex v20 = 0;
      uint64_t v21 = 0;
      v17[0] = &xdict;
      v17[1] = "kVoicemailUrl";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v17, &v18);
      xpc_object_t object = 0;
      long long v25 = 0;
      uint64_t v26 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v26) < 0) {
        operator delete(object);
      }
      xpc_release(v18);
      CFIndex v11 = HIBYTE(v21);
      char v12 = HIBYTE(v21);
      if (v21 < 0) {
        CFIndex v11 = v20;
      }
      if (v11)
      {
        CFAllocatorRef v13 = CFGetAllocator(a1);
        if (v21 >= 0) {
          p_p = (const UInt8 *)&__p;
        }
        else {
          p_p = (const UInt8 *)__p;
        }
        if (v21 >= 0) {
          CFIndex v15 = HIBYTE(v21);
        }
        else {
          CFIndex v15 = v20;
        }
        *a5 = CFURLCreateWithBytes(v13, p_p, v15, 0x8000100u, 0);
        char v12 = HIBYTE(v21);
      }
      if (v12 < 0) {
        operator delete(__p);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      _CTServerConnectionGetVoiceMailAvailable_cold_1(SHIDWORD(v5), v5);
    }
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v5;
}

const char *CTQoSDirectionAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5265C58[a1];
  }
}

const char *CTSimHardwareTypeAsString(uint64_t a1)
{
  CFStringRef v1 = "CTSimHardwareTypeUnknown";
  if (a1 == 1) {
    CFStringRef v1 = "CTSimHardwareTypePhysical";
  }
  if (a1 == 2) {
    return "CTSimHardwareTypeDigital";
  }
  else {
    return v1;
  }
}

const char *CTSimLocationAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return "CTSimLocationUnknown";
  }
  else {
    return off_1E5265C70[a1 - 1];
  }
}

uint64_t _CTServerConnectionGetPacketContextCount(uint64_t a1, int *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    CFAllocatorRef v13 = "kPacketContextCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      CFAllocatorRef v13 = "kPacketContextCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    uint64_t v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, "Called _CTServerConnectionGetPacketContextCount(): size_t count = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetEMBMSStatus(uint64_t a1, unsigned char *a2)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kGetEMBMSStatus", object, "kRequest", &v10);
  xpc_release(object[0]);
  xpc_object_t v11 = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v10 = xpc_null_create();
  uint64_t v4 = SendXpcMessage(a1, &v11, &v10);
  if (a2) {
    *a2 = 0;
  }
  uint64_t v5 = MEMORY[0x1853203E0](v10);
  if (a2 && v5 == MEMORY[0x1E4F14590])
  {
    object[0] = &v10;
    object[1] = "kEMBMSStatus";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
    *a2 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
    xpc_release(v9);
  }
  int v6 = CTLogPacket();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      int v7 = *a2;
    }
    else {
      int v7 = -1;
    }
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v7;
    _os_log_impl(&dword_18444A000, v6, OS_LOG_TYPE_DEFAULT, "Called _CTServerConnectionGetEMBMSStatus(): status = %d", (uint8_t *)object, 8u);
  }
  xpc_release(v10);
  xpc_release(v11);
  return v4;
}

uint64_t _CTServerConnectionGetEMBMSSigInfo(uint64_t a1, NSObject *a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a5)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetEMBMSSigInfo", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    xpc_object_t v11 = *(xpc_object_t *)buf;
    xpc_object_t object = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v12 = xpc_int64_create(a3);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, "kEMBMSServiceType", v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    xpc_object_t v14 = xpc_int64_create(a4);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, "kEMBMSEarfcn", v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    xpc_object_t v16 = CTLogPacket();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18444A000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetEMBMSSigInfo()", buf, 2u);
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = ___CTServerConnectionGetEMBMSSigInfo_block_invoke;
    v18[3] = &unk_1E5260A58;
    v18[4] = a5;
    int v17 = SendXpcMessageAsync(a1, &object, a2, v18);
    xpc_release(object);
    if (v17) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionGetEMBMSSAIListInfo(uint64_t a1, NSObject *a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetEMBMSSAIListInfo", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    xpc_object_t v9 = *(xpc_object_t *)buf;
    xpc_object_t object = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v10 = xpc_int64_create(a3);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kEMBMSSAIType", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t v12 = CTLogPacket();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18444A000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetEMBMSSAIListInfo()", buf, 2u);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    v14[2] = ___CTServerConnectionGetEMBMSSAIListInfo_block_invoke;
    v14[3] = &unk_1E5265CA0;
    _OWORD v14[4] = a4;
    int v13 = SendXpcMessageAsync(a1, &object, a2, v14);
    xpc_release(object);
    if (v13) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionSetEMBMSSAIInterestedInfo(uint64_t a1, NSObject *a2, ctu *a3, uint64_t a4)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetEMBMSSAIInterestedInfo", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    xpc_object_t v9 = *(xpc_object_t *)buf;
    xpc_object_t object = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    ctu::cf_to_xpc((uint64_t *)&value, a3, v10);
    xpc_dictionary_set_value(v9, "kEMBMSSAIInterestedInfo", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t v12 = CTLogPacket();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18444A000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetEMBMSSAIInterestedInfo()", buf, 2u);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    v14[2] = ___CTServerConnectionSetEMBMSSAIInterestedInfo_block_invoke;
    v14[3] = &unk_1E5265CC8;
    _OWORD v14[4] = a4;
    int v13 = SendXpcMessageAsync(a1, &object, a2, v14);
    xpc_release(object);
    if (v13) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionSetEMBMSActive(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSetEMBMSActive", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  xpc_object_t v4 = *(xpc_object_t *)buf;
  xpc_object_t object = *(xpc_object_t *)buf;
  *(void *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kEMBMSStatus", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  int v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetEMBMSActive() active = %d", buf, 8u);
  }
  uint64_t v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionCopyPacketContextInterfaceName(uint64_t a1, int a2, void *a3)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketContextName", object, "kRequest", __p);
    xpc_release(object[0]);
    xpc_object_t v7 = __p[0];
    xpc_object_t v17 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    xpc_object_t v8 = xpc_int64_create(a2);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kPacketContextIdentifer", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v17, &xdict);
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kPacketContextName"))
    {
      __p[0] = 0;
      object[0] = &xdict;
      object[1] = "kPacketContextName";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      object[0] = 0;
      uint64_t v15 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v15);
      *a3 = object[0];
      xpc_release(__p[0]);
    }
    xpc_object_t v10 = CTLogPacket();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*a3)
      {
        memset(object, 0, 24);
        ctu::cf::assign();
        *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
        xpc_object_t v14 = object[2];
        xpc_object_t v11 = __p;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v11 = (xpc_object_t *)object[0];
        }
        LODWORD(object[0]) = 67109378;
        HIDWORD(object[0]) = a2;
        LOWORD(object[1]) = 2080;
        *(xpc_object_t *)((char *)&object[1] + 2) = v11;
        _os_log_impl(&dword_18444A000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceName() for %d: name = %s", (uint8_t *)object, 0x12u);
        if (SHIBYTE(v14) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        LODWORD(object[0]) = 67109378;
        HIDWORD(object[0]) = a2;
        LOWORD(object[1]) = 2080;
        *(xpc_object_t *)((char *)&object[1] + 2) = "";
        _os_log_impl(&dword_18444A000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceName() for %d: name = %s", (uint8_t *)object, 0x12u);
      }
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v3;
}

uint64_t _CTServerConnectionCopyPacketContextInterfaceNameByServiceType(uint64_t a1, __CFString *a2, void *a3)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  unint64_t ConnectionMaskType = getConnectionMaskType(a2);
  uint64_t v7 = 0x1600000001;
  if (a3)
  {
    if (a1)
    {
      uint64_t v8 = ConnectionMaskType;
      if (ConnectionMaskType)
      {
        xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
        xpc::dict_creator::operator()<char const*>("kPacketContextName", object, "kRequest", v18);
        xpc_release(object[0]);
        xpc_object_t v9 = v18[0];
        xpc_object_t v21 = v18[0];
        v18[0] = xpc_null_create();
        xpc_release(v18[0]);
        xpc_object_t v10 = xpc_uint64_create(v8);
        if (!v10) {
          xpc_object_t v10 = xpc_null_create();
        }
        xpc_dictionary_set_value(v9, "kPacketServiceType", v10);
        xpc_object_t v11 = xpc_null_create();
        xpc_release(v10);
        xpc_release(v11);
        xpc_object_t xdict = xpc_null_create();
        uint64_t v7 = SendXpcMessage(a1, &v21, &xdict);
        *a3 = 0;
        if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kPacketContextName"))
        {
          v18[0] = 0;
          object[0] = &xdict;
          object[1] = "kPacketContextName";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v18);
          object[0] = 0;
          __p[0] = (void *)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(object, (CFTypeRef *)__p);
          *a3 = object[0];
          xpc_release(v18[0]);
        }
        xpc_object_t v12 = CTLogPacket();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          if (a2)
          {
            memset(object, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)xpc_object_t v18 = *(_OWORD *)object;
            xpc_object_t v19 = object[2];
            if (SHIBYTE(object[2]) >= 0) {
              uint64_t v13 = v18;
            }
            else {
              uint64_t v13 = (xpc_object_t *)object[0];
            }
          }
          else
          {
            uint64_t v13 = (xpc_object_t *)"";
          }
          if (*a3)
          {
            memset(object, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
            xpc_object_t v17 = object[2];
            xpc_object_t v14 = __p;
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v14 = (void **)object[0];
            }
            LODWORD(object[0]) = 136315394;
            *(xpc_object_t *)((char *)object + 4) = v13;
            WORD2(object[1]) = 2080;
            *(xpc_object_t *)((char *)&object[1] + 6) = v14;
            _os_log_impl(&dword_18444A000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceNameByServiceType() for %s: name = %s", (uint8_t *)object, 0x16u);
            if (SHIBYTE(v17) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            LODWORD(object[0]) = 136315394;
            *(xpc_object_t *)((char *)object + 4) = v13;
            WORD2(object[1]) = 2080;
            *(xpc_object_t *)((char *)&object[1] + 6) = "";
            _os_log_impl(&dword_18444A000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceNameByServiceType() for %s: name = %s", (uint8_t *)object, 0x16u);
          }
          if (a2 && SHIBYTE(v19) < 0) {
            operator delete(v18[0]);
          }
        }
        xpc_release(xdict);
        xpc_release(v21);
      }
    }
  }
  return v7;
}

unint64_t getConnectionMaskType(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = 1;
  if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternet", 1uLL))
  {
    if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeVVM", 1uLL))
    {
      if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeMMS", 1uLL))
      {
        if (CFStringCompare(a1, @"kCTDataConntectionPushEmail", 1uLL))
        {
          if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeWirelessModemTraffic", 1uLL))
          {
            if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeWirelessModemAuthentication", 1uLL))
            {
              if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeCellularDataPlanProvisioning", 1uLL))
              {
                if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeCellularDataPlanProvisioning2", 1uLL))
                {
                  if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeAppleWirelessDiagnostics", 1uLL))
                  {
                    if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeDataTest", 1uLL))
                    {
                      if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeOTAActivation", 1uLL))
                      {
                        if (CFStringCompare(a1, @"kCTDataConnectionServiceType3GFaceTimeTraffic", 1uLL))
                        {
                          if (CFStringCompare(a1, @"kCTDataConnectionServiceType3GFaceTimeAuthentication", 1uLL))
                          {
                            if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeZeroRated", 1uLL))
                            {
                              if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeEntitlementTraffic", 1uLL))
                              {
                                if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternalDataProbe", 1uLL))
                                {
                                  if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeIMS", 1uLL))
                                  {
                                    if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeEm", 1uLL))
                                    {
                                      if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeEmergencyLocation", 1uLL))
                                      {
                                        if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeBootstrapProvisioning", 1uLL))
                                        {
                                          if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeUT", 1uLL))
                                          {
                                            if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeBootstrapRoamingInternetBypass", 1uLL))
                                            {
                                              if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetProbe", 1uLL))
                                              {
                                                if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeThumperIMS", 1uLL))
                                                {
                                                  if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeLLWirelessModemTraffic", 1uLL))
                                                  {
                                                    if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice1", 1uLL))
                                                    {
                                                      if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice2", 1uLL))
                                                      {
                                                        if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice3", 1uLL))
                                                        {
                                                          if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice4", 1uLL))
                                                          {
                                                            if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice5", 1uLL))
                                                            {
                                                              if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice6", 1uLL))
                                                              {
                                                                if (CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice7", 1uLL))
                                                                {
                                                                  return (unint64_t)(CFStringCompare(a1, @"kCTDataConnectionServiceTypeInternetSlice8", 1uLL) == kCFCompareEqualTo) << 35;
                                                                }
                                                                else
                                                                {
                                                                  return 0x400000000;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                return 0x200000000;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              return 0x100000000;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            return 0x80000000;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          return 0x40000000;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        return 0x20000000;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      return 0x10000000;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    return 0x8000000;
                                                  }
                                                }
                                                else
                                                {
                                                  return 0x4000000;
                                                }
                                              }
                                              else
                                              {
                                                return 0x2000000;
                                              }
                                            }
                                            else
                                            {
                                              return 0x200000;
                                            }
                                          }
                                          else
                                          {
                                            return 0x100000;
                                          }
                                        }
                                        else
                                        {
                                          return 0x80000;
                                        }
                                      }
                                      else
                                      {
                                        return 0x400000;
                                      }
                                    }
                                    else
                                    {
                                      return 0x40000;
                                    }
                                  }
                                  else
                                  {
                                    return 0x20000;
                                  }
                                }
                                else
                                {
                                  return 0x10000;
                                }
                              }
                              else
                              {
                                return 0x8000;
                              }
                            }
                            else
                            {
                              return 0x4000;
                            }
                          }
                          else
                          {
                            return 2048;
                          }
                        }
                        else
                        {
                          return 1024;
                        }
                      }
                      else
                      {
                        return 512;
                      }
                    }
                    else
                    {
                      return 256;
                    }
                  }
                  else
                  {
                    return 128;
                  }
                }
                else
                {
                  return 0x800000;
                }
              }
              else
              {
                return 64;
              }
            }
            else
            {
              return 32;
            }
          }
          else
          {
            return 16;
          }
        }
        else
        {
          return 8;
        }
      }
      else
      {
        return 4;
      }
    }
    else
    {
      return 2;
    }
  }
  return v2;
}

uint64_t _CTServerConnectionSetPacketContextActive(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetActiveById", &object, "kRequest", &v18);
  xpc_release(object);
  xpc_object_t v6 = v18;
  xpc_object_t v19 = v18;
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v18);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kPacketContextIdentifer", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kPacketStatus", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = getprogname();
  xpc_object_t v12 = xpc_string_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kProgName", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = CTLogPacket();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object) = 67109376;
    HIDWORD(object) = a2;
    __int16 v21 = 1024;
    unsigned int v22 = a3;
    _os_log_impl(&dword_18444A000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketContextActive() for identifier = %d active = %d", (uint8_t *)&object, 0xEu);
  }
  uint64_t v16 = SendXpcMessage(a1, &v19, 0, v15);
  xpc_release(v19);
  return v16;
}

uint64_t _CTServerConnectionGetPacketContextActive(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetActiveById", &object, "kRequest", &v14);
    xpc_release(object);
    xpc_object_t v7 = v14;
    xpc_object_t v15 = v14;
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v14);
    xpc_object_t v8 = xpc_int64_create(a2);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kPacketContextIdentifer", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t v14 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v15, &v14);
    *a3 = 0;
    if (MEMORY[0x1853203E0](v14) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v14;
      xpc_object_t v17 = "kPacketStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v13);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v13, 0);
      xpc_release(v13);
    }
    xpc_object_t v10 = CTLogPacket();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *a3;
      LODWORD(object) = 67109376;
      HIDWORD(object) = a2;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v11;
      _os_log_impl(&dword_18444A000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActive() for identifier = %d active = %d", (uint8_t *)&object, 0xEu);
    }
    xpc_release(v14);
    xpc_release(v15);
  }
  return v3;
}

uint64_t _CTServerConnectionSetPacketContextActiveByServiceType(uint64_t a1, __CFString *a2, unsigned int a3)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a2)
  {
    unint64_t ConnectionMaskType = getConnectionMaskType(a2);
    if (a1)
    {
      uint64_t v7 = ConnectionMaskType;
      if (ConnectionMaskType)
      {
        xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
        xpc::dict_creator::operator()<char const*>("kPacketSetActiveByService", object, "kRequest", __p);
        xpc_release(object[0]);
        xpc_object_t v8 = __p[0];
        xpc_object_t v22 = __p[0];
        __p[0] = xpc_null_create();
        xpc_release(__p[0]);
        xpc_object_t v9 = xpc_uint64_create(v7);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
        xpc_dictionary_set_value(v8, "kPacketServiceType", v9);
        xpc_object_t v10 = xpc_null_create();
        xpc_release(v9);
        xpc_release(v10);
        xpc_object_t v11 = xpc_int64_create(a3);
        if (!v11) {
          xpc_object_t v11 = xpc_null_create();
        }
        xpc_dictionary_set_value(v8, "kPacketStatus", v11);
        xpc_object_t v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        xpc_object_t v13 = getprogname();
        xpc_object_t v14 = xpc_string_create(v13);
        if (!v14) {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_dictionary_set_value(v8, "kProgName", v14);
        xpc_object_t v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        uint64_t v16 = CTLogPacket();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
          xpc_object_t v21 = object[2];
          uint64_t v18 = __p;
          if (SHIBYTE(object[2]) < 0) {
            uint64_t v18 = (void **)object[0];
          }
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = v18;
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          _os_log_impl(&dword_18444A000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketContextActiveByServiceType() for %s active = %d", (uint8_t *)object, 0x12u);
          if (SHIBYTE(v21) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v3 = SendXpcMessage(a1, &v22, 0, v17);
        xpc_release(v22);
      }
    }
  }
  return v3;
}

uint64_t _CTServerConnectionGetPacketContextActiveByServiceType(uint64_t a1, __CFString *a2, unsigned char *a3, int *a4)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t ConnectionMaskType = getConnectionMaskType(a2);
  }
  else {
    uint64_t ConnectionMaskType = 0;
  }
  uint64_t v9 = 0x1600000001;
  if (a4 && a3 && a1 && ConnectionMaskType)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetActiveByService", object, "kRequest", __p);
    xpc_release(object[0]);
    xpc_object_t v10 = __p[0];
    xpc_object_t v23 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    xpc_object_t v11 = xpc_uint64_create(ConnectionMaskType);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "kPacketServiceType", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t v22 = xpc_null_create();
    uint64_t v9 = SendXpcMessage(a1, &v23, &v22);
    *a3 = 0;
    *a4 = -1;
    if (MEMORY[0x1853203E0](v22) == MEMORY[0x1E4F14590])
    {
      object[0] = &v22;
      object[1] = "kPacketStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      xpc_release(__p[0]);
      object[0] = &v22;
      object[1] = "kPacketContextIdentifer";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a4 = xpc::dyn_cast_or_default((xpc *)__p, (const object *)0xFFFFFFFFLL);
      xpc_release(__p[0]);
    }
    xpc_object_t v13 = CTLogPacket();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        memset(object, 0, 24);
        ctu::cf::assign();
        *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
        xpc_object_t v21 = object[2];
        int v14 = *a4;
        int v15 = *a3;
        uint64_t v16 = __p;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v16 = (xpc_object_t *)object[0];
        }
        LODWORD(object[0]) = 136315650;
        *(xpc_object_t *)((char *)object + 4) = v16;
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v15;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v14;
        _os_log_impl(&dword_18444A000, v13, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceType() for %s active = %d context = %d", (uint8_t *)object, 0x18u);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        int v17 = *a3;
        int v18 = *a4;
        LODWORD(object[0]) = 136315650;
        *(xpc_object_t *)((char *)object + 4) = "";
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v17;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v18;
        _os_log_impl(&dword_18444A000, v13, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceType() for %s active = %d context = %d", (uint8_t *)object, 0x18u);
      }
    }
    xpc_release(v22);
    xpc_release(v23);
  }
  return v9;
}

uint64_t _CTServerConnectionGetPacketDataLoadInfo(uint64_t a1, int *a2)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kPacketGetDataLoadInfo", object, "kRequest", &v10);
  xpc_release(object[0]);
  xpc_object_t v11 = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v10 = xpc_null_create();
  uint64_t v4 = SendXpcMessage(a1, &v11, &v10);
  if (a2) {
    *a2 = -1;
  }
  uint64_t v5 = MEMORY[0x1853203E0](v10);
  if (a2 && v5 == MEMORY[0x1E4F14590])
  {
    object[0] = &v10;
    object[1] = "kPacketActivateQueueSize";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
    *a2 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
    xpc_release(v9);
  }
  xpc_object_t v6 = CTLogPacket();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      int v7 = *a2;
    }
    else {
      int v7 = -1;
    }
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v7;
    _os_log_impl(&dword_18444A000, v6, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketDataLoadInfo() activateQueueSize = %d", (uint8_t *)object, 8u);
  }
  xpc_release(v10);
  xpc_release(v11);
  return v4;
}

uint64_t _CTServerConnectionGetPacketContextActiveByServiceTypeExtended(uint64_t a1, __CFString *a2, unsigned char *a3, int *a4, int *a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t ConnectionMaskType = getConnectionMaskType(a2);
  }
  else {
    uint64_t ConnectionMaskType = 0;
  }
  uint64_t v11 = 0x1600000001;
  if (a5 && a4 && a3 && a1 && ConnectionMaskType)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetActiveByService", object, "kRequest", __p);
    xpc_release(object[0]);
    xpc_object_t v12 = __p[0];
    xpc_object_t v27 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    xpc_object_t v13 = xpc_uint64_create(ConnectionMaskType);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v12, "kPacketServiceType", v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    xpc_object_t v26 = xpc_null_create();
    uint64_t v11 = SendXpcMessage(a1, &v27, &v26);
    *a3 = 0;
    *a4 = -1;
    *a5 = -1;
    if (MEMORY[0x1853203E0](v26) == MEMORY[0x1E4F14590])
    {
      object[0] = &v26;
      object[1] = "kPacketStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      xpc_release(__p[0]);
      object[0] = &v26;
      object[1] = "kPacketContextIdentifer";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a4 = xpc::dyn_cast_or_default((xpc *)__p, (const object *)0xFFFFFFFFLL);
      xpc_release(__p[0]);
      object[0] = &v26;
      object[1] = "kPacketContextType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a5 = xpc::dyn_cast_or_default((xpc *)__p, (const object *)0xFFFFFFFFLL);
      xpc_release(__p[0]);
    }
    int v15 = CTLogPacket();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        memset(object, 0, sizeof(object));
        ctu::cf::assign();
        *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
        xpc_object_t v25 = object[2];
        int v16 = *a5;
        int v17 = *a4;
        int v18 = *a3;
        xpc_object_t v19 = __p;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v19 = (xpc_object_t *)object[0];
        }
        LODWORD(object[0]) = 136315906;
        *(xpc_object_t *)((char *)object + 4) = v19;
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v18;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v17;
        __int16 v29 = 1024;
        int v30 = v16;
        _os_log_impl(&dword_18444A000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceTypeExtended() for %s active = %d context = %d context_type = %d", (uint8_t *)object, 0x1Eu);
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        int v20 = *a3;
        int v21 = *a4;
        int v22 = *a5;
        LODWORD(object[0]) = 136315906;
        *(xpc_object_t *)((char *)object + 4) = "";
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v20;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v21;
        __int16 v29 = 1024;
        int v30 = v22;
        _os_log_impl(&dword_18444A000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceTypeExtended() for %s active = %d context = %d context_type = %d", (uint8_t *)object, 0x1Eu);
      }
    }
    xpc_release(v26);
    xpc_release(v27);
  }
  return v11;
}

uint64_t _CTServerConnectionSetPacketProtocolActiveByInterface(uint64_t a1, CFStringRef theString, unsigned int a3, unsigned int a4)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  unsigned int InterfaceNumber = getInterfaceNumber(theString);
  uint64_t v9 = 0x1600000001;
  if (a1)
  {
    unsigned int v10 = InterfaceNumber;
    if ((InterfaceNumber & 0x80000000) == 0)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketSetProtocolActiveByInterface", object, "kRequest", __p);
      xpc_release(object[0]);
      uint64_t v11 = __p[0];
      xpc_object_t v24 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      xpc_object_t v12 = xpc_int64_create(v10);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kPacketContextIdentifer", v12);
      xpc_object_t v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      xpc_object_t v14 = xpc_int64_create(a3);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kPacketDataFamily", v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      xpc_object_t v16 = xpc_int64_create(a4);
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kPacketStatus", v16);
      xpc_object_t v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      int v18 = CTLogPacket();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        if (theString)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
          xpc_object_t v23 = object[2];
          int v20 = __p;
          if (SHIBYTE(object[2]) < 0) {
            int v20 = (void **)object[0];
          }
          LODWORD(object[0]) = 136315650;
          *(xpc_object_t *)((char *)object + 4) = v20;
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          WORD1(object[2]) = 1024;
          HIDWORD(object[2]) = a4;
          _os_log_impl(&dword_18444A000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketProtocolActiveByInterface() for %s protocols = %d active = %d", (uint8_t *)object, 0x18u);
          if (SHIBYTE(v23) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          LODWORD(object[0]) = 136315650;
          *(xpc_object_t *)((char *)object + 4) = "";
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          WORD1(object[2]) = 1024;
          HIDWORD(object[2]) = a4;
          _os_log_impl(&dword_18444A000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketProtocolActiveByInterface() for %s protocols = %d active = %d", (uint8_t *)object, 0x18u);
        }
      }
      uint64_t v9 = SendXpcMessage(a1, &v24, 0, v19);
      xpc_release(v24);
    }
  }
  return v9;
}

uint64_t getInterfaceNumber(CFStringRef theString)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = 0xFFFFFFFFLL;
  unsigned int v4 = -1;
  if (theString)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v6 = 0u;
    if (CFStringGetCString(theString, buffer, 128, 0x8000100u)
      && (*(_DWORD *)buffer == 1601201264 ? (BOOL v3 = *(unsigned __int16 *)&buffer[4] == 28777) : (BOOL v3 = 0), v3))
    {
      sscanf(&buffer[6], "%d", &v4);
      return v4;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t _CTServerConnectionSetPacketProtocolActiveByServiceType(uint64_t a1, __CFString *a2, unsigned int a3, unsigned int a4)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v4 = 0x1600000001;
  if (a2)
  {
    unint64_t ConnectionMaskType = getConnectionMaskType(a2);
    if (a1)
    {
      uint64_t v9 = ConnectionMaskType;
      if (ConnectionMaskType)
      {
        xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
        xpc::dict_creator::operator()<char const*>("kPacketSetProtocolActiveByService", object, "kRequest", __p);
        xpc_release(object[0]);
        long long v10 = __p[0];
        xpc_object_t v23 = __p[0];
        __p[0] = xpc_null_create();
        xpc_release(__p[0]);
        xpc_object_t v11 = xpc_uint64_create(v9);
        if (!v11) {
          xpc_object_t v11 = xpc_null_create();
        }
        xpc_dictionary_set_value(v10, "kPacketServiceType", v11);
        xpc_object_t v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        xpc_object_t v13 = xpc_int64_create(a3);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_dictionary_set_value(v10, "kPacketDataFamily", v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        xpc_object_t v15 = xpc_int64_create(a4);
        if (!v15) {
          xpc_object_t v15 = xpc_null_create();
        }
        xpc_dictionary_set_value(v10, "kPacketStatus", v15);
        xpc_object_t v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        xpc_object_t v17 = CTLogPacket();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
          xpc_object_t v22 = object[2];
          uint64_t v19 = __p;
          if (SHIBYTE(object[2]) < 0) {
            uint64_t v19 = (void **)object[0];
          }
          LODWORD(object[0]) = 136315650;
          *(xpc_object_t *)((char *)object + 4) = v19;
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          WORD1(object[2]) = 1024;
          HIDWORD(object[2]) = a4;
          _os_log_impl(&dword_18444A000, v17, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketProtocolActiveByServiceType() for %s protocols = %d active = %d", (uint8_t *)object, 0x18u);
          if (SHIBYTE(v22) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v4 = SendXpcMessage(a1, &v23, 0, v18);
        xpc_release(v23);
      }
    }
  }
  return v4;
}

uint64_t _CTServerConnectionGetDataServiceAvailability(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetDataServiceAvailability", (xpc_object_t *)&object, "kRequest", &v10);
    xpc_release((xpc_object_t)object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      *a2 = 0;
      xpc_object_t v9 = 0;
      *(void *)&long long object = &v10;
      *((void *)&object + 1) = "kDataServiceAvailability";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v9);
      if (MEMORY[0x1853203E0](v9) != MEMORY[0x1E4F145D8])
      {
        *(void *)&long long object = 0;
        uint64_t v8 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v8);
        *a2 = object;
      }
      xpc_release(v9);
    }
    uint64_t v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *a2;
      LODWORD(object) = 138412290;
      *(void *)((char *)&object + 4) = v6;
      _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetDataServiceAvailability(): serviceAvailability = %@", (uint8_t *)&object, 0xCu);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionIsServiceOverPublicInternet(uint64_t a1, __CFString *a2, unsigned char *a3)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a3)
  {
    if (a2) {
      uint64_t ConnectionMaskType = getConnectionMaskType(a2);
    }
    else {
      uint64_t ConnectionMaskType = 0;
    }
    *a3 = 1;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kDataServiceOverPublicInternet", object, "kRequest", __p);
    xpc_release(object[0]);
    xpc_object_t v8 = __p[0];
    xpc_object_t v19 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    xpc_object_t v9 = xpc_uint64_create(ConnectionMaskType);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kPacketServiceType", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v18 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v19, &v18);
    if (MEMORY[0x1853203E0](v18) == MEMORY[0x1E4F14590])
    {
      __p[0] = 0;
      object[0] = &v18;
      object[1] = "kDataServiceOverPublicInternet";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      if (MEMORY[0x1853203E0](__p[0]) != MEMORY[0x1E4F145D8]) {
        *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      }
      xpc_release(__p[0]);
    }
    xpc_object_t v11 = CTLogPacket();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        memset(object, 0, 24);
        ctu::cf::assign();
        *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
        xpc_object_t v17 = object[2];
        int v12 = *a3;
        uint64_t v13 = __p;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v13 = (xpc_object_t *)object[0];
        }
        LODWORD(object[0]) = 136315394;
        *(xpc_object_t *)((char *)object + 4) = v13;
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v12;
        _os_log_impl(&dword_18444A000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionIsServiceOverPublicInternet() for %s isOver = %d", (uint8_t *)object, 0x12u);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        int v14 = *a3;
        LODWORD(object[0]) = 136315394;
        *(xpc_object_t *)((char *)object + 4) = "";
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v14;
        _os_log_impl(&dword_18444A000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionIsServiceOverPublicInternet() for %s isOver = %d", (uint8_t *)object, 0x12u);
      }
    }
    xpc_release(v18);
    xpc_release(v19);
  }
  return v3;
}

uint64_t _CTServerConnectionGetNATTKeepAliveOverCell(uint64_t a1, int *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kNATTKeepAliveOverCell", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    uint64_t v13 = "kNATTKeepAliveOverCell";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t v8 = 0;
      xpc_object_t object = &v10;
      uint64_t v13 = "kNATTKeepAliveOverCell";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      if (MEMORY[0x1853203E0](v8) != MEMORY[0x1E4F145D8]) {
        *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      }
      xpc_release(v8);
    }
    uint64_t v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetNATTKeepAliveOverCell(): timeout = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetInterfaceFamilies(uint64_t a1, CFStringRef theString, int *a3, int *a4)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  unsigned int InterfaceNumber = getInterfaceNumber(theString);
  uint64_t v9 = 0x1600000001;
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        unsigned int v10 = InterfaceNumber;
        if ((InterfaceNumber & 0x80000000) == 0)
        {
          xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
          xpc::dict_creator::operator()<char const*>("kPacketGetInterfaceFamilyStatus", object, "kRequest", __p);
          xpc_release(object[0]);
          xpc_object_t v11 = __p[0];
          xpc_object_t v24 = __p[0];
          __p[0] = xpc_null_create();
          xpc_release(__p[0]);
          xpc_object_t v12 = xpc_int64_create(v10);
          if (!v12) {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_dictionary_set_value(v11, "kPacketContextIdentifer", v12);
          xpc_object_t v13 = xpc_null_create();
          xpc_release(v12);
          xpc_release(v13);
          xpc_object_t v23 = xpc_null_create();
          uint64_t v9 = SendXpcMessage(a1, &v24, &v23);
          *a4 = 0;
          *a3 = 0;
          if (MEMORY[0x1853203E0](v23) == MEMORY[0x1E4F14590])
          {
            object[0] = &v23;
            object[1] = "kPacketDataFamilyActive";
            xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
            *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
            xpc_release(__p[0]);
            object[0] = &v23;
            object[1] = "kPacketDataFamilyAvailable";
            xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
            *a4 = xpc::dyn_cast_or_default((xpc *)__p, 0);
            xpc_release(__p[0]);
          }
          uint64_t v14 = CTLogPacket();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            if (theString)
            {
              memset(object, 0, 24);
              ctu::cf::assign();
              *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
              xpc_object_t v22 = object[2];
              int v15 = *a4;
              int v16 = *a3;
              xpc_object_t v17 = __p;
              if (SHIBYTE(object[2]) < 0) {
                xpc_object_t v17 = (xpc_object_t *)object[0];
              }
              LODWORD(object[0]) = 136315650;
              *(xpc_object_t *)((char *)object + 4) = v17;
              WORD2(object[1]) = 1024;
              *(_DWORD *)((char *)&object[1] + 6) = v16;
              WORD1(object[2]) = 1024;
              HIDWORD(object[2]) = v15;
              _os_log_impl(&dword_18444A000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetInterfaceFamilies() for %s active = %d available = %d", (uint8_t *)object, 0x18u);
              if (SHIBYTE(v22) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              int v18 = *a3;
              int v19 = *a4;
              LODWORD(object[0]) = 136315650;
              *(xpc_object_t *)((char *)object + 4) = "";
              WORD2(object[1]) = 1024;
              *(_DWORD *)((char *)&object[1] + 6) = v18;
              WORD1(object[2]) = 1024;
              HIDWORD(object[2]) = v19;
              _os_log_impl(&dword_18444A000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetInterfaceFamilies() for %s active = %d available = %d", (uint8_t *)object, 0x18u);
            }
          }
          xpc_release(v23);
          xpc_release(v24);
        }
      }
    }
  }
  return v9;
}

uint64_t _CTServerConnectionGetPacketContextStatistics(uint64_t a1, int a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0x1600000001;
  if (a6 && a4 && a1 && a3 && a5)
  {
    *a6 = 0;
    *a4 = 0;
    *a5 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketStatisticsByID", &object, "kRequest", &v23);
    xpc_release(object);
    xpc_object_t v13 = v23;
    xpc_object_t v24 = v23;
    xpc_object_t v23 = xpc_null_create();
    xpc_release(v23);
    xpc_object_t v14 = xpc_int64_create(a2);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(v13, "kPacketContextIdentifer", v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    xpc_object_t v23 = xpc_null_create();
    uint64_t v6 = SendXpcMessage(a1, &v24, &v23);
    if (MEMORY[0x1853203E0](v23) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v23;
      xpc_object_t v26 = "kPacketDataUplinkPackets";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
      xpc_object_t object = &v23;
      xpc_object_t v26 = "kPacketDataUplinkBytes";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a5 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
      xpc_object_t object = &v23;
      xpc_object_t v26 = "kPacketDataDownlinkPackets";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
      xpc_object_t object = &v23;
      xpc_object_t v26 = "kPacketDataDownlinkBytes";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a6 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
    }
    int v16 = CTLogPacket();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *a3;
      int v18 = *a4;
      int v19 = *a5;
      int v20 = *a6;
      LODWORD(object) = 67110144;
      HIDWORD(object) = a2;
      LOWORD(v26) = 1024;
      *(_DWORD *)((char *)&v26 + 2) = v17;
      HIWORD(v26) = 1024;
      int v27 = v18;
      __int16 v28 = 1024;
      int v29 = v19;
      __int16 v30 = 1024;
      int v31 = v20;
      _os_log_impl(&dword_18444A000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextStatistics() for %d: %d:%d:%d:%d", (uint8_t *)&object, 0x20u);
    }
    xpc_release(v23);
    xpc_release(v24);
  }
  return v6;
}

uint64_t _CTServerConnectionResetPacketContextStatistics(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketResetStatisticsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  xpc_object_t v4 = *(xpc_object_t *)buf;
  xpc_object_t object = *(xpc_object_t *)buf;
  *(void *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  long long v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionResetPacketContextStatistics() for %d", buf, 8u);
  }
  uint64_t v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionResetPacketContextSettings(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketResetSettingsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  xpc_object_t v4 = *(xpc_object_t *)buf;
  xpc_object_t object = *(xpc_object_t *)buf;
  *(void *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  long long v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionResetPacketContextSettings() for %d", buf, 8u);
  }
  uint64_t v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionSuspendPacketContextSettings(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSuspendSettingsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  xpc_object_t v4 = *(xpc_object_t *)buf;
  xpc_object_t object = *(xpc_object_t *)buf;
  *(void *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  long long v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSuspendPacketContextSettings() for %d", buf, 8u);
  }
  uint64_t v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionResumePacketContextSettings(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketResumeSettingsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  xpc_object_t v4 = *(xpc_object_t *)buf;
  xpc_object_t object = *(xpc_object_t *)buf;
  *(void *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  long long v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionResumePacketContextSettings() for %d", buf, 8u);
  }
  uint64_t v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerForceFastDormancy(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetProperty", &object, "kRequest", &v9);
  xpc_release(object);
  xpc_object_t v2 = v9;
  xpc_object_t object = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  xpc_object_t v3 = xpc_BOOL_create(1);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kPacketForceDormancy", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  xpc_object_t v5 = CTLogPacket();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerForceFastDormancy()", (uint8_t *)&v9, 2u);
  }
  uint64_t v7 = SendXpcMessage(a1, &object, 0, v6);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerEnableFastDormancy(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetProperty", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  xpc_object_t v4 = *(xpc_object_t *)buf;
  xpc_object_t object = *(xpc_object_t *)buf;
  *(void *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kPacketDormancy", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerEnableFastDormancy(): enable = %d", buf, 8u);
  }
  uint64_t v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerIsFastDormancyEnabled(uint64_t a1, unsigned char *a2)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v12);
    xpc_release(object[0]);
    xpc_object_t v5 = v12;
    xpc_object_t v13 = v12;
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v12);
    xpc_object_t v6 = xpc_BOOL_create(0);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kPacketDormancy", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v12 = xpc_null_create();
    *a2 = 0;
    uint64_t v2 = SendXpcMessage(a1, &v13, &v12);
    if (MEMORY[0x1853203E0](v12) == MEMORY[0x1E4F14590])
    {
      object[0] = &v12;
      object[1] = "kPacketDormancy";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    uint64_t v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a2;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v9;
      _os_log_impl(&dword_18444A000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerIsFastDormancyEnabled(): enabled = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionHideDataIndicator(uint64_t a1, unsigned char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v13 = "kCellularDataHideIndicator";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    *a2 = 0;
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v13 = "kCellularDataHideIndicator";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, (const object *)1);
      xpc_release(v8);
    }
    xpc_object_t v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionHideDataIndicator(): shouldHide = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionHideRatIndicator(uint64_t a1, unsigned char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t object = &v11;
    xpc_object_t v13 = "kCellularDataHideRatIndicator";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t v10 = xpc_null_create();
    *a2 = 0;
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &v10;
      xpc_object_t v13 = "kCellularDataHideRatIndicator";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, (const object *)1);
      xpc_release(v8);
    }
    xpc_object_t v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionHideRatIndicator(): shouldHide = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCellularDataIsEnabled(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc_object_t v4 = _os_activity_create(&dword_18444A000, "Cellular data switch changed", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&state);
  xpc::dict_creator::operator()<char const*>("kPacketSetPropertyWithReply", (xpc_object_t *)&state, "kRequest", &v13);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_object_t v5 = v13;
  xpc_object_t object = v13;
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v13);
  xpc_object_t v6 = xpc_int64_create(a2);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "kEnableCellularData", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  {
  }
  {
  }
  {
    xpc_object_t v9 = "Enabling";
    if (!a2) {
      xpc_object_t v9 = "Disabling";
    }
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v9;
    _os_log_impl(&dword_18444A000, v8, OS_LOG_TYPE_DEFAULT, "%s cellular data", (uint8_t *)&state, 0xCu);
  }
  xpc_object_t v10 = CTLogPacket();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(state.opaque[0]) = 67109120;
    HIDWORD(state.opaque[0]) = a2;
    _os_log_impl(&dword_18444A000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetCellularDataIsEnabled(): isEnabled = %d", (uint8_t *)&state, 8u);
  }
  state.opaque[0] = (uint64_t)xpc_null_create();
  uint64_t v11 = SendXpcMessage(a1, &object, (xpc_object_t *)&state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(object);
  if (v4) {
    os_release(v4);
  }
  return v11;
}

uint64_t _CTServerConnectionGetCellularDataSettings(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v22);
    xpc_release(object);
    xpc_object_t v8 = v22;
    xpc_object_t v23 = v22;
    xpc_object_t v22 = xpc_null_create();
    xpc_release(v22);
    xpc_object_t v9 = xpc_BOOL_create(0);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kCellularDataCapable", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v11 = xpc_BOOL_create(0);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kCellularDataEnabled", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t v13 = xpc_BOOL_create(0);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kAirplaneMode", v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    xpc_object_t v22 = xpc_null_create();
    if (a2) {
      *a2 = 0;
    }
    if (a3) {
      *a3 = 0;
    }
    if (a4) {
      *a4 = 0;
    }
    uint64_t v15 = SendXpcMessage(a1, &v23, &v22);
    if (MEMORY[0x1853203E0](v22) == MEMORY[0x1E4F14590])
    {
      if (a2)
      {
        xpc_object_t object = &v22;
        xpc_object_t v25 = "kCellularDataCapable";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v21);
        *a2 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
        xpc_release(v21);
      }
      if (a3)
      {
        xpc_object_t object = &v22;
        xpc_object_t v25 = "kCellularDataEnabled";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v21);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
        xpc_release(v21);
      }
      if (a4)
      {
        xpc_object_t object = &v22;
        xpc_object_t v25 = "kAirplaneMode";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v21);
        *a4 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
        xpc_release(v21);
      }
    }
    uint64_t v16 = CTLogPacket();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    if (a2)
    {
      int v17 = *a2;
      if (a3) {
        goto LABEL_24;
      }
    }
    else
    {
      int v17 = -1;
      if (a3)
      {
LABEL_24:
        int v18 = *a3;
        if (a4)
        {
LABEL_25:
          int v19 = *a4;
LABEL_30:
          LODWORD(object) = 67109632;
          HIDWORD(object) = v17;
          LOWORD(v25) = 1024;
          *(_DWORD *)((char *)&v25 + 2) = v18;
          HIWORD(v25) = 1024;
          int v26 = v19;
          _os_log_impl(&dword_18444A000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetCellularDataSettings(): isCapable = %d isEnabled = %d isAirplaneMode = %d", (uint8_t *)&object, 0x14u);
LABEL_31:
          xpc_release(v22);
          xpc_release(v23);
          return v15;
        }
LABEL_29:
        int v19 = -1;
        goto LABEL_30;
      }
    }
    int v18 = -1;
    if (a4) {
      goto LABEL_25;
    }
    goto LABEL_29;
  }
  return 0x1600000001;
}

uint64_t _CTServerConnectionGetCellularDataIsEnabledEx(uint64_t a1, ctu *a2, NSObject *a3, uint64_t a4)
{
  uint64_t result = 0x1600000001;
  if (a2 && a1 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v17);
    xpc_release(object);
    xpc_object_t v9 = v17;
    xpc_object_t object = v17;
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v17);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v10);
    xpc_dictionary_set_value(v9, "kWhois", value);
    xpc_object_t v11 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t v12 = xpc_BOOL_create(0);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, "kEnableCellularDataEx", v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = ___CTServerConnectionGetCellularDataIsEnabledEx_block_invoke;
    v15[3] = &unk_1E5265CF0;
    v15[4] = a4;
    int v14 = SendXpcMessageAsync(a1, &object, a3, v15);
    xpc_release(object);
    if (v14) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionSetCellularDataIsEnabledEx(uint64_t a1, ctu *a2, BOOL a3, NSObject *a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t result = 0x1600000001;
  if (a2 && a1 && a4 && a5)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketSetPropertyWithReply", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    xpc_object_t v11 = *(xpc_object_t *)buf;
    xpc_object_t object = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v12);
    xpc_dictionary_set_value(v11, "kWhois", value);
    xpc_object_t v13 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v13);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t v14 = xpc_BOOL_create(a3);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, "kEnableCellularDataEx", v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    uint64_t v16 = CTLogPacket();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl(&dword_18444A000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetCellularDataIsEnabledEx(): isEnabled = %d", buf, 8u);
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    xpc_object_t v18[2] = ___CTServerConnectionSetCellularDataIsEnabledEx_block_invoke;
    v18[3] = &unk_1E5260B50;
    v18[4] = a5;
    int v17 = SendXpcMessageAsync(a1, &object, a4, v18);
    xpc_release(object);
    if (v17) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionGetCellularDataIsDisallowed(uint64_t a1, unsigned char *a2)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v12);
    xpc_release(object[0]);
    xpc_object_t v5 = v12;
    xpc_object_t v13 = v12;
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v12);
    xpc_object_t v6 = xpc_BOOL_create(0);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kCellularDataDisallow", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v12 = xpc_null_create();
    *a2 = 0;
    uint64_t v2 = SendXpcMessage(a1, &v13, &v12);
    if (MEMORY[0x1853203E0](v12) == MEMORY[0x1E4F14590])
    {
      object[0] = &v12;
      object[1] = "kCellularDataDisallow";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    xpc_object_t v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a2;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v9;
      _os_log_impl(&dword_18444A000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetCellularDataIsDisallowed(): isDisallowed = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCellularDataIsDisallowed(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetProperty", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  xpc_object_t v4 = *(xpc_object_t *)buf;
  xpc_object_t object = *(xpc_object_t *)buf;
  *(void *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCellularDataDisallow", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetCellularDataIsDisallowed(): isDisallowed = %d", buf, 8u);
  }
  uint64_t v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionGetResetCellularAccountSettingsIsAllowed(uint64_t a1, unsigned char *a2)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v12);
    xpc_release(object[0]);
    xpc_object_t v5 = v12;
    xpc_object_t v13 = v12;
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v12);
    xpc_object_t v6 = xpc_int64_create(*a2);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kCellularAccountReset", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v12 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v13, &v12);
    if (MEMORY[0x1853203E0](v12) == MEMORY[0x1E4F14590])
    {
      object[0] = &v12;
      object[1] = "kCellularAccountReset";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    uint64_t v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a2;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v9;
      _os_log_impl(&dword_18444A000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetResetCellularAccountSettingsIsAllowed(): isAllowed = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionRequestQOS(uint64_t a1, uint64_t a2, int *a3)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    *a3 = -1;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kQOSRequest", object, "kRequest", &v13);
    xpc_release(object[0]);
    xpc_object_t v6 = v13;
    xpc_object_t v14 = v13;
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v13);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kQOSInfo", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v13 = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v14, &v13);
    if (MEMORY[0x1853203E0](v13) == MEMORY[0x1E4F14590])
    {
      object[0] = &v13;
      object[1] = "kQOSRequest";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v12, (const object *)*a3);
      xpc_release(v12);
    }
    int v9 = CTLogPacket();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *a3;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v10;
      _os_log_impl(&dword_18444A000, v9, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionRequestQOS(): identifier = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionReleaseQOS(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2 != -1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kQOSRelease", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    xpc_object_t v5 = *(xpc_object_t *)buf;
    xpc_object_t object = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v6 = xpc_int64_create(a2);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kQOSInfo", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_18444A000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionReleaseQOS(): identifier = %d", buf, 8u);
    }
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v9);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionSetPacketNotificationFilter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketFilter", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    xpc_object_t v6 = *(xpc_object_t *)buf;
    xpc_object_t object = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kQOSInfo", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v9 = xpc_int64_create(a3);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kPacketFilterStatus", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v11 = CTLogPacket();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl(&dword_18444A000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketNotificationFilter(): enable = %d", buf, 8u);
    }
    uint64_t v3 = SendXpcMessage(a1, &object, 0, v12);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionDropIPPackets(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kDropIPPackets", (xpc_object_t *)object, "kRequest", &v11);
    xpc_release(*(xpc_object_t *)object);
    xpc_object_t v5 = v11;
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    xpc_object_t v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kQOSInfo", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)xpc_object_t object = 138412290;
      *(void *)&xpc_object_t object[4] = a2;
      _os_log_impl(&dword_18444A000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDropIPPackets(): payloadArray = %@", object, 0xCu);
    }
    uint64_t v2 = SendXpcMessage(a1, &v12, 0, v9);
    xpc_release(v12);
  }
  return v2;
}

__CFString *_CTServerConnectionQosFlowStatusToQosFlowStatusString(int a1)
{
  if ((a1 - 1) > 2) {
    CFStringRef v1 = kCTQualityOfServiceFlowStatusUnknown;
  }
  else {
    CFStringRef v1 = off_1E5265D58[(char)(a1 - 1)];
  }
  return *v1;
}

uint64_t _CTServerConnectionUpdateQualityOfService(uint64_t a1, unsigned int a2)
{
  return _CTServerConnectionUpdateProtocolQualityOfService(a1, a2, 1u);
}

uint64_t _CTServerConnectionUpdateProtocolQualityOfService(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kUpdateQualityOfService", &object, "kRequest", &v15);
  xpc_release(object);
  xpc_object_t v6 = v15;
  xpc_object_t v16 = v15;
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v15);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kQosIndicator", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kPacketDataFamily", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = CTLogPacket();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object) = 67109376;
    HIDWORD(object) = a2;
    __int16 v18 = 1024;
    unsigned int v19 = a3;
    _os_log_impl(&dword_18444A000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionUpdateProtocolQualityOfService(): isQualityGood = %d protocols = %d", (uint8_t *)&object, 0xEu);
  }
  uint64_t v13 = SendXpcMessage(a1, &v16, 0, v12);
  xpc_release(v16);
  return v13;
}

unint64_t _CTServerConnectionTetheringAssertionCreate(const void *a1, __CFString *a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    unint64_t v10 = 0x1600000000;
    goto LABEL_17;
  }
  unint64_t ConnectionMaskType = getConnectionMaskType(a2);
  unint64_t v10 = 0x1600000000;
  unsigned int v11 = 1;
  if (!a5) {
    return v11 | v10;
  }
  if (!a1) {
    return v11 | v10;
  }
  uint64_t v12 = ConnectionMaskType;
  if (!ConnectionMaskType) {
    return v11 | v10;
  }
  *a5 = 0;
  CFAllocatorRef v13 = CFGetAllocator(a1);
  if (!v14)
  {
LABEL_17:
    unsigned int v11 = 1;
    return v11 | v10;
  }
  xpc_object_t v15 = v14;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kPacketCreateTetheringAssertion", (xpc_object_t *)object, "kRequest", v33);
  xpc_release(*(xpc_object_t *)object);
  xpc_object_t v16 = v33[0];
  xpc_object_t v36 = v33[0];
  v33[0] = xpc_null_create();
  xpc_release(v33[0]);
  if (a4)
  {
    int v17 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v17) {
      int v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(v16, "kAssertionName", v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  xpc_object_t v19 = xpc_int64_create(a3);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, "kPacketContextIdentifer", v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = xpc_uint64_create(v12);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, "kPacketServiceType", v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  xpc_object_t xdict = xpc_null_create();
  uint64_t v23 = SendXpcMessage((uint64_t)v15, &v36, &xdict);
  if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kDidSucceed"))
  {
    *a5 = (uint64_t)v15;
    unsigned int v11 = v23;
  }
  else
  {
    CFRelease(v15);
    unsigned int v11 = 2;
  }
  unint64_t v10 = v23 & 0xFFFFFFFF00000000;
  xpc_object_t v24 = CTLogPacket();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    memset(object, 0, 24);
    ctu::cf::assign();
    *(_OWORD *)long long v33 = *(_OWORD *)object;
    uint64_t v34 = *(void *)&object[16];
    if (object[23] >= 0) {
      xpc_object_t v25 = v33;
    }
    else {
      xpc_object_t v25 = *(void ***)object;
    }
    if (a4)
    {
      memset(object, 0, 24);
      ctu::cf::assign();
      *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
      uint64_t v32 = *(void *)&object[16];
      int v26 = __p;
      if (object[23] < 0) {
        int v26 = *(void ***)object;
      }
      if (*a5) {
        uint64_t v27 = "true";
      }
      else {
        uint64_t v27 = "false";
      }
      *(_DWORD *)xpc_object_t object = 136315906;
      *(void *)&xpc_object_t object[4] = v25;
      *(_WORD *)&object[12] = 1024;
      *(_DWORD *)&object[14] = a3;
      *(_WORD *)&object[18] = 2080;
      *(void *)&object[20] = v26;
      __int16 v38 = 2080;
      long long v39 = v27;
      _os_log_impl(&dword_18444A000, v24, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionTetheringAssertionCreate() for %s identifier = %d name = %s assertion = %s", object, 0x26u);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v28 = *a5;
      *(_DWORD *)xpc_object_t object = 136315906;
      if (v28) {
        int v29 = "true";
      }
      else {
        int v29 = "false";
      }
      *(void *)&xpc_object_t object[4] = v25;
      *(_WORD *)&object[12] = 1024;
      *(_DWORD *)&object[14] = a3;
      *(_WORD *)&object[18] = 2080;
      *(void *)&object[20] = "";
      __int16 v38 = 2080;
      long long v39 = v29;
      _os_log_impl(&dword_18444A000, v24, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionTetheringAssertionCreate() for %s identifier = %d name = %s assertion = %s", object, 0x26u);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  xpc_release(xdict);
  xpc_release(v36);
  return v11 | v10;
}

unint64_t _CTServerConnectionDormancySuspendAssertionCreate(const void *a1, uint64_t a2, void *a3)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  unint64_t v3 = 0x1600000000;
  uint64_t v4 = 1;
  if (a1 && a3)
  {
    *a3 = 0;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    if (v8)
    {
      xpc_object_t v9 = v8;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketCreateDormancySuspendAssertion", object, "kRequest", __p);
      xpc_release(object[0]);
      unint64_t v10 = __p[0];
      xpc_object_t v22 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      if (a2)
      {
        uint64_t v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v12) {
          uint64_t v12 = xpc_null_create();
        }
        xpc_dictionary_set_value(v10, "kAssertionName", v12);
        xpc_object_t v13 = xpc_null_create();
        xpc_release(v12);
        xpc_release(v13);
      }
      unint64_t v14 = SendXpcMessage((uint64_t)v9, &v22, 0, v11);
      if (HIDWORD(v14)) {
        CFRelease(v9);
      }
      else {
        *a3 = v9;
      }
      unint64_t v3 = v14 & 0xFFFFFFFF00000000;
      xpc_object_t v15 = CTLogPacket();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
          xpc_object_t v21 = object[2];
          xpc_object_t v16 = __p;
          if (SHIBYTE(object[2]) < 0) {
            xpc_object_t v16 = (void **)object[0];
          }
          if (*a3) {
            int v17 = "true";
          }
          else {
            int v17 = "false";
          }
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = v16;
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v17;
          _os_log_impl(&dword_18444A000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDormancySuspendAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
          if (SHIBYTE(v21) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          xpc_object_t v18 = "true";
          if (!*a3) {
            xpc_object_t v18 = "false";
          }
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = "";
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v18;
          _os_log_impl(&dword_18444A000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDormancySuspendAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
        }
      }
      xpc_release(v22);
      uint64_t v4 = v14;
    }
    else
    {
      uint64_t v4 = 1;
    }
  }
  return v4 | v3;
}

unint64_t _CTServerConnectionDormancySuspendAssertionCreateWithExpirationCB(const void *a1, uint64_t a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  unint64_t v8 = _CTServerConnectionDormancySuspendAssertionCreate(a1, a2, a3);
  if (!HIDWORD(v8))
  {
    _CTServerConnectionSetTargetQueue((void *)*a3, a4);
    uint64_t v9 = *a3;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    void v11[2] = ___CTServerConnectionDormancySuspendAssertionCreateWithExpirationCB_block_invoke;
    v11[3] = &unk_1E5265D18;
    _OWORD v11[4] = a5;
    _CTServerConnectionRegisterBlockForNotification(v9, @"kCTConnectionInvalidatedNotification", (uint64_t)v11);
  }
  return v8;
}

unint64_t _CTServerConnectionOTAActivationAssertionCreate(const void *a1, uint64_t a2, void *a3)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  unint64_t v3 = 0x1600000000;
  unsigned int v4 = 1;
  if (a1 && a3)
  {
    *a3 = 0;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    if (v8)
    {
      uint64_t v9 = v8;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketCreateOTAActivationAssertion", object, "kRequest", __p);
      xpc_release(object[0]);
      unint64_t v10 = __p[0];
      xpc_object_t v22 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      if (a2)
      {
        uint64_t v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v11) {
          uint64_t v11 = xpc_null_create();
        }
        xpc_dictionary_set_value(v10, "kAssertionName", v11);
        xpc_object_t v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
      }
      xpc_object_t xdict = xpc_null_create();
      uint64_t v13 = SendXpcMessage((uint64_t)v9, &v22, &xdict);
      if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kDidSucceed"))
      {
        *a3 = v9;
        unsigned int v4 = v13;
      }
      else
      {
        CFRelease(v9);
        unsigned int v4 = 2;
      }
      unint64_t v3 = v13 & 0xFFFFFFFF00000000;
      unint64_t v14 = CTLogPacket();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
          xpc_object_t v20 = object[2];
          xpc_object_t v15 = __p;
          if (SHIBYTE(object[2]) < 0) {
            xpc_object_t v15 = (void **)object[0];
          }
          if (*a3) {
            xpc_object_t v16 = "true";
          }
          else {
            xpc_object_t v16 = "false";
          }
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = v15;
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v16;
          _os_log_impl(&dword_18444A000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionOTAActivationAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
          if (SHIBYTE(v20) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          int v17 = "true";
          if (!*a3) {
            int v17 = "false";
          }
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = "";
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v17;
          _os_log_impl(&dword_18444A000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionOTAActivationAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
        }
      }
      xpc_release(xdict);
      xpc_release(v22);
    }
    else
    {
      unsigned int v4 = 1;
    }
  }
  return v4 | v3;
}

unint64_t _CTServerConnectionPacketContextAssertionCreate(const void *a1, int a2, uint64_t a3, void *a4)
{
  object[5] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  unint64_t v4 = 0x1600000000;
  unsigned int v5 = 1;
  if (a1 && a4)
  {
    *a4 = 0;
    CFAllocatorRef v9 = CFGetAllocator(a1);
    if (v10)
    {
      uint64_t v11 = v10;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketCreatePDPAssertion", object, "kRequest", __p);
      xpc_release(object[0]);
      xpc_object_t v12 = __p[0];
      xpc_object_t v26 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      if (a3)
      {
        uint64_t v13 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v13) {
          uint64_t v13 = xpc_null_create();
        }
        xpc_dictionary_set_value(v12, "kAssertionName", v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
      }
      xpc_object_t v15 = xpc_int64_create(a2);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, "kPacketContextIdentifer", v15);
      xpc_object_t v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      xpc_object_t xdict = xpc_null_create();
      uint64_t v17 = SendXpcMessage((uint64_t)v11, &v26, &xdict);
      if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kDidSucceed"))
      {
        *a4 = v11;
        unsigned int v5 = v17;
      }
      else
      {
        CFRelease(v11);
        unsigned int v5 = 2;
      }
      unint64_t v4 = v17 & 0xFFFFFFFF00000000;
      xpc_object_t v18 = CTLogPacket();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        if (a3)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)xpc_object_t __p = *(_OWORD *)object;
          xpc_object_t v24 = object[2];
          xpc_object_t v19 = __p;
          if (SHIBYTE(object[2]) < 0) {
            xpc_object_t v19 = (void **)object[0];
          }
          xpc_object_t v20 = "true";
          if (!*a4) {
            xpc_object_t v20 = "false";
          }
          LODWORD(object[0]) = 67109634;
          HIDWORD(object[0]) = a2;
          LOWORD(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 2) = v19;
          WORD1(object[2]) = 2080;
          *(xpc_object_t *)((char *)&object[2] + 4) = (xpc_object_t)v20;
          _os_log_impl(&dword_18444A000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionPacketContextAssertionCreate() for identifier = %d name = %s assertion = %s", (uint8_t *)object, 0x1Cu);
          if (SHIBYTE(v24) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          xpc_object_t v21 = "true";
          if (!*a4) {
            xpc_object_t v21 = "false";
          }
          LODWORD(object[0]) = 67109634;
          HIDWORD(object[0]) = a2;
          LOWORD(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 2) = "";
          WORD1(object[2]) = 2080;
          *(xpc_object_t *)((char *)&object[2] + 4) = (xpc_object_t)v21;
          _os_log_impl(&dword_18444A000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionPacketContextAssertionCreate() for identifier = %d name = %s assertion = %s", (uint8_t *)object, 0x1Cu);
        }
      }
      xpc_release(xdict);
      xpc_release(v26);
    }
    else
    {
      unsigned int v5 = 1;
    }
  }
  return v5 | v4;
}

unint64_t _CTServerConnectionDataActivationPopupAssertionCreate()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = 0x1600000000;
  unsigned int v5 = 1;
  if (!v0) {
    return v4 & 0xFFFFFFFF00000000 | v5;
  }
  xpc_object_t v6 = v3;
  if (!v3) {
    return v4 & 0xFFFFFFFF00000000 | v5;
  }
  uint64_t v7 = v2;
  CFStringRef Identifier = v1;
  CFAllocatorRef v9 = (const void *)v0;
  uint64_t *v3 = 0;
  memset(&v35, 0, sizeof(v35));
  if (!v1) {
    goto LABEL_9;
  }
  bzero(buffer, 0x10000uLL);
  if (CFStringGetCString(Identifier, buffer, 0xFFFFLL, 0x8000100u) && *(unsigned __int16 *)buffer == 42)
  {
    CFStringRef Identifier = 0;
LABEL_9:
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle) {
      CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
    }
    if (!Identifier || CFStringGetLength(Identifier) <= 0)
    {
      uint64_t v11 = getprogname();
      std::string::__assign_external(&v35, v11);
      std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
      }
      if (!size)
      {
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        {
          v35.__r_.__value_.__l.__size_ = 11;
          uint64_t v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v35.__r_.__value_.__s + 23) = 11;
          uint64_t v13 = &v35;
        }
        strcpy((char *)v13, "unknown-app");
      }
    }
    goto LABEL_20;
  }
  if (CFStringGetLength(Identifier) <= 0) {
    goto LABEL_9;
  }
LABEL_20:
  CFAllocatorRef v14 = CFGetAllocator(v9);
  if (v15)
  {
    xpc_object_t v16 = v15;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)buffer);
    xpc::dict_creator::operator()<char const*>("kPacketCreateDataActivationPopupAssertion", (xpc_object_t *)buffer, "kRequest", __p);
    xpc_release(*(xpc_object_t *)buffer);
    xpc_object_t xdict = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    if (Identifier && CFStringGetLength(Identifier) >= 1)
    {
      uint64_t v17 = _CFXPCCreateXPCObjectFromCFObject();
    }
    else
    {
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        xpc_object_t v18 = &v35;
      }
      else {
        xpc_object_t v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      uint64_t v17 = (uint64_t)xpc_string_create((const char *)v18);
    }
    xpc_object_t v19 = (xpc_object_t)v17;
    if (!v17) {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_object_t v20 = xdict;
    xpc_dictionary_set_value(xdict, "kAssertionName", v19);
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v21);
    xpc_object_t v22 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    xpc_dictionary_set_value(v20, "kPacketCreateDataActivationPopupAssertionCategories", v22);
    xpc_object_t v23 = xpc_null_create();
    xpc_release(v22);
    xpc_release(v23);
    xpc_object_t object = xpc_null_create();
    uint64_t v24 = SendXpcMessage((uint64_t)v16, &xdict, &object);
    if (MEMORY[0x1853203E0](object) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(object, "kDidSucceed"))
    {
      *xpc_object_t v6 = (uint64_t)v16;
      unsigned int v5 = v24;
    }
    else
    {
      CFRelease(v16);
      unsigned int v5 = 2;
    }
    unint64_t v4 = v24 & 0xFFFFFFFF00000000;
    xpc_object_t v25 = CTLogPacket();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (Identifier)
      {
        memset(buffer, 0, sizeof(buffer));
        ctu::cf::assign();
        *(_OWORD *)xpc_object_t __p = *(_OWORD *)buffer;
        uint64_t v32 = *(void *)&buffer[16];
        xpc_object_t v26 = __p;
        if (buffer[23] < 0) {
          xpc_object_t v26 = *(void ***)buffer;
        }
        if (*v6) {
          uint64_t v27 = "true";
        }
        else {
          uint64_t v27 = "false";
        }
        *(_DWORD *)buffer = 136315650;
        *(void *)&buffer[4] = v26;
        *(_WORD *)&buffer[12] = 2112;
        *(void *)&buffer[14] = v7;
        *(_WORD *)&buffer[22] = 2080;
        long long v37 = v27;
        _os_log_impl(&dword_18444A000, v25, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDataActivationPopupAssertionCreate() for name = %s categoriesArray = %@ assertion = %s", (uint8_t *)buffer, 0x20u);
        if (SHIBYTE(v32) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v28 = *v6;
        *(void *)&buffer[4] = "";
        *(_DWORD *)buffer = 136315650;
        if (v28) {
          int v29 = "true";
        }
        else {
          int v29 = "false";
        }
        *(_WORD *)&buffer[12] = 2112;
        *(void *)&buffer[14] = v7;
        *(_WORD *)&buffer[22] = 2080;
        long long v37 = v29;
        _os_log_impl(&dword_18444A000, v25, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDataActivationPopupAssertionCreate() for name = %s categoriesArray = %@ assertion = %s", (uint8_t *)buffer, 0x20u);
      }
    }
    xpc_release(object);
    xpc_release(xdict);
  }
  else
  {
    unsigned int v5 = 1;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionCopyDataActivityAssertionProcesses(uint64_t a1, int a2, xpc_object_t *a3)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x1600000001;
  if (a1 && a3)
  {
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketCopyAssertion", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v7 = xdict;
    xpc_object_t v17 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v8 = xpc_int64_create(a2);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kPacketContextIdentifer", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v17, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kPacketCopyAssertion"))
    {
      xpc_object_t v15 = 0;
      xpc_object_t object = &xdict;
      v19[0] = "kPacketCopyAssertion";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
      xpc_object_t object = 0;
      uint64_t v14 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v14);
      if (object) {
        unint64_t v10 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      }
      else {
        unint64_t v10 = 0;
      }
      if (v10)
      {
        *a3 = object;
      }
      else if (object)
      {
        CFRelease(object);
      }
      xpc_release(v15);
    }
    uint64_t v11 = CTLogPacket();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v12 = *a3;
      LODWORD(object) = 67109378;
      HIDWORD(object) = a2;
      LOWORD(v19[0]) = 2112;
      *(void *)((char *)v19 + 2) = v12;
      _os_log_impl(&dword_18444A000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyDataActivityAssertionProcesses() for identifier = %d dstarray = %@", (uint8_t *)&object, 0x12u);
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v3;
}

unint64_t _CTServerConnectionKeepAliveAssertionCreate(CFTypeRef cf, uint64_t a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = 0x1600000000;
  LODWORD(v6) = 1;
  if (!a2 || !cf || !a3) {
    return v5 & 0xFFFFFFFF00000000 | v6;
  }
  *a3 = 0;
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  CFAllocatorRef v11 = CFGetAllocator(cf);
  uint64_t v12 = *((void *)cf + 3);
  if (*(char *)(v12 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v12 + 88), *(void *)(v12 + 96));
  }
  else {
    std::string v27 = *(std::string *)(v12 + 88);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v30, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v30 = v27;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v32, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v32 = v30;
  }
  xpc_object_t v31 = 0;
  if (ctu::cf::convert_copy()) {
    xpc_object_t v13 = v31;
  }
  else {
    xpc_object_t v13 = 0;
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if (v14) {
      goto LABEL_24;
    }
LABEL_29:
    unint64_t v5 = 0x500000000;
    LODWORD(v6) = 2;
    return v5 & 0xFFFFFFFF00000000 | v6;
  }
  if (!v14) {
    goto LABEL_29;
  }
LABEL_24:
  xpc_object_t v15 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v32);
  xpc::dict_creator::operator()<char const*>("kPacketCreateKeepAliveAssertion", v15, "kRequest", (xpc_object_t *)&v30.__r_.__value_.__l.__data_);
  xpc_release(v32.__r_.__value_.__l.__data_);
  xpc_object_t v16 = (void *)v30.__r_.__value_.__r.__words[0];
  xpc_object_t v31 = (xpc_object_t)v30.__r_.__value_.__r.__words[0];
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc_release(v30.__r_.__value_.__l.__data_);
  xpc_object_t v17 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, "kAssertionName", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v26 = xpc_null_create();
  uint64_t v6 = SendXpcMessage((uint64_t)v14, &v31, &v26);
  if (v6)
  {
    CFRelease(v14);
  }
  else
  {
    *a3 = (uint64_t)v14;
    _CTServerConnectionSetTargetQueue(v14, a4);
    uint64_t v19 = *a3;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 1174405120;
    v24[2] = ___CTServerConnectionKeepAliveAssertionCreate_block_invoke;
    v24[3] = &unk_1ECFD3E40;
    v24[5] = v14;
    xpc_object_t object = v31;
    if (v31) {
      xpc_retain(v31);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    _OWORD v24[4] = a5;
    _CTServerConnectionRegisterBlockForNotification(v19, @"kCTConnectionInvalidatedNotification", (uint64_t)v24);
    xpc_release(object);
    xpc_object_t object = 0;
  }
  unint64_t v5 = v6 & 0xFFFFFFFF00000000;
  xpc_object_t v20 = CTLogPacket();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    memset(&v32, 0, sizeof(v32));
    ctu::cf::assign();
    std::string v30 = v32;
    xpc_object_t v21 = &v30;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if (*a3) {
      xpc_object_t v22 = "true";
    }
    else {
      xpc_object_t v22 = "false";
    }
    LODWORD(v32.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    WORD2(v32.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
    _os_log_impl(&dword_18444A000, v20, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionKeepAliveAssertionCreate() for name = %s assertion = %s", (uint8_t *)&v32, 0x16u);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  xpc_release(v26);
  xpc_release(v31);
  return v5 & 0xFFFFFFFF00000000 | v6;
}

uint64_t _CTServerConnectionCopyCurrentMTU(uint64_t a1, int *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v11 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v11;
    xpc_object_t v13 = "kMTU";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kMTU"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v13 = "kMTU";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    unint64_t v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18444A000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyCurrentMTU() mtu = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionICloudAccountReset(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kICloudAccountReset", &object, "kRequest", &v6);
  xpc_release(object);
  xpc_object_t object = v6;
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v6);
  uint64_t v2 = CTLogPacket();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_18444A000, v2, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionICloudAccountReset()", (uint8_t *)&v6, 2u);
  }
  uint64_t v4 = SendXpcMessage(a1, &object, 0, v3);
  xpc_release(object);
  return v4;
}

uint64_t _CTServerConnectionExecuteCommand(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0x1600000001;
  if (a1 && a2)
  {
    if (a4) {
      *a4 = 0;
    }
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kExecuteCmd", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    xpc_object_t v8 = *(xpc_object_t *)buf;
    xpc_object_t object = *(xpc_object_t *)buf;
    *(void *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kName", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (a3)
    {
      xpc_object_t v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, "kArgs", v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
    }
    xpc_object_t v13 = CTLogPacket();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18444A000, v13, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionExecuteCommand()", buf, 2u);
    }
    *(void *)buf = xpc_null_create();
    uint64_t v4 = SendXpcMessage(a1, &object, (xpc_object_t *)buf);
    if (a4
      && MEMORY[0x1853203E0](*(void *)buf) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(*(xpc_object_t *)buf, "kArgs"))
    {
      uint64_t v16 = 0;
      xpc_dictionary_get_value(*(xpc_object_t *)buf, "kArgs");
      uint64_t v15 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v16, (CFTypeRef *)&v15);
      *a4 = v16;
    }
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionSimRefresh(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSimRefresh", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kSimSlotIdentifier", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSimRefresh()", (uint8_t *)&v10, 2u);
  }
  xpc_object_t v10 = xpc_null_create();
  uint64_t v8 = SendXpcMessage(a1, &object, &v10);
  xpc_release(v10);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionCsVoiceSupported(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCsVoiceStatus", &object, "kRequest", &v14);
  xpc_release(object);
  xpc_object_t v6 = v14;
  xpc_object_t object = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kSimSlotIdentifier", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kCsVoiceSupported", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = CTLogPacket();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl(&dword_18444A000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCsVoiceSupported()", (uint8_t *)&v14, 2u);
  }
  xpc_object_t v14 = xpc_null_create();
  uint64_t v12 = SendXpcMessage(a1, &object, &v14);
  xpc_release(v14);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionProvisionLazuli(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kProvisionLazuli", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kSimSlotIdentifier", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_18444A000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionProvisionLazuli()", (uint8_t *)&v10, 2u);
  }
  xpc_object_t v10 = xpc_null_create();
  uint64_t v8 = SendXpcMessage(a1, &object, &v10);
  xpc_release(v10);
  xpc_release(object);
  return v8;
}

os_log_t ___ZN12_GLOBAL__N_131sGetCellularDataSwitchLogHandleEv_block_invoke()
{
  os_log_t result = os_log_create(kCTLoggingSubsystem, "CellularDataSwitch");
  return result;
}

void MMSMimePart::MMSMimePart(MMSMimePart *this, char *a2, unint64_t a3, MMSContentType *a4)
{
  MMSHeaderContainer::MMSHeaderContainer(this);
  v8->__begin_ = (std::vector<char>::pointer)&unk_1ECFD2F98;
  v8[3].__end_ = 0;
  v8[3].__end_cap_.__value_ = 0;
  v8[3].__begin_ = 0;
  MMSMimePart::setBody(v8, a2, a3);
  if (a4) {
    MMSHeaderContainer::setContentType(this, a4);
  }
}

void MMSMimePart::MMSMimePart(MMSMimePart *this)
{
  MMSHeaderContainer::MMSHeaderContainer(this);
  v1->__begin_ = (std::vector<char>::pointer)&unk_1ECFD2F98;
  v1[3].__end_ = 0;
  v1[3].__end_cap_.__value_ = 0;
  v1[3].__begin_ = 0;
  MMSMimePart::setBody(v1, 0, 0);
}

void MMSMimePart::setBody(std::vector<char> *this, char *a2, unint64_t a3)
{
  this[4].__begin_ = (std::vector<char>::pointer)a3;
  xpc_object_t v6 = this + 3;
  std::vector<unsigned char>::reserve(this + 3, a3 + 1);
  std::vector<char>::__assign_with_size[abi:nn180100]<char const*,char const*>(v6, a2, &a2[a3], a3);
  std::vector<char>::pointer end = this[3].__end_;
  xpc_object_t value = this[3].__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<char>::pointer begin = v6->__begin_;
    xpc_object_t v11 = (unsigned char *)(end - v6->__begin_);
    unint64_t v12 = (unint64_t)(v11 + 1);
    if ((uint64_t)(v11 + 1) < 0) {
      abort();
    }
    unint64_t v13 = value - begin;
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (char *)operator new(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[v14];
    v11[(void)v15] = 0;
    uint64_t v9 = (uint64_t)&v11[(void)v15 + 1];
    if (end == begin)
    {
      uint64_t v15 = &v11[(void)v15];
    }
    else
    {
      xpc_object_t v17 = &end[~(unint64_t)begin];
      do
      {
        char v18 = *--end;
        (v17--)[(void)v15] = v18;
      }
      while (end != begin);
      std::vector<char>::pointer end = v6->__begin_;
    }
    this[3].__begin_ = v15;
    this[3].__end_ = (std::vector<char>::pointer)v9;
    this[3].__end_cap_.__value_ = v16;
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    *std::vector<char>::pointer end = 0;
    uint64_t v9 = (uint64_t)(end + 1);
  }
  this[3].__end_ = (std::vector<char>::pointer)v9;
}

void MMSMimePart::~MMSMimePart(MMSMimePart *this)
{
  *(void *)this = &unk_1ECFD2F98;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }

  MMSHeaderContainer::~MMSHeaderContainer(this);
}

{
  uint64_t vars8;

  MMSMimePart::~MMSMimePart(this);

  JUMPOUT(0x18531F680);
}

uint64_t getMMSVersion(void)
{
  return getMMSVersion(void)::mmsVersion;
}

void initEncodingMap(void)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)xpc_object_t v5 = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  MMSVersion = (const std::string *)getMMSVersion();
  std::istringstream::basic_istringstream[abi:nn180100]((uint64_t *)v4, MMSVersion, 8);
  uint64_t v3 = 0;
  memset(__p, 0, sizeof(__p));
  CFStringRef v1 = std::operator>>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v4, (uint64_t)__p);
  MEMORY[0x18531F520](v1, &v3);
  operator new();
}

{
  operator new();
}

uint64_t MMSMimePart::encodingMap(MMSMimePart *this)
{
  uint64_t result = _encodingMap;
  if (!_encodingMap) {
    initEncodingMap();
  }
  return result;
}

uint64_t MMSMimePart::prettyMMSMimePart@<X0>(std::string *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v10);
  MMSHeaderContainer::prettyHeaders(this, a2, 0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v10 + 8, a3);
  *(void *)&v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(*(void *)&v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v10[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18531F630](v14);
}

void *MMSMimePart::prettyContentBody@<X0>(MMSMimePart *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MMSHeaderContainer::contentTypeHeader(this);
  if (!v4)
  {
    long long v13 = "\t** no Content-Type header\n";
    goto LABEL_18;
  }
  if (*((_DWORD *)this + 24) > 0x9Fu
    || (uint64_t v5 = *(void *)(v4 + 24)) == 0
    || (long long v6 = (const char *)(*(uint64_t (**)(void))(*(void *)v5 + 16))(*(void *)(v4 + 24)),
        strcmp(v6, "text"))
    || ((int v7 = MMSParameterContainer::charset((MMSParameterContainer *)(v5 + 8))) != 0 ? (v8 = v7 == 3) : (v8 = 1),
        !v8 ? (BOOL v9 = v7 == 106) : (BOOL v9 = 1),
        !v9))
  {
    long long v13 = "Body content invalid";
LABEL_18:
    return std::string::basic_string[abi:nn180100]<0>(a2, v13);
  }
  long long v10 = (void *)*((void *)this + 9);
  size_t v11 = *((unsigned int *)this + 24);

  return std::string::basic_string[abi:nn180100](a2, v10, v11);
}

void *std::vector<char>::__assign_with_size[abi:nn180100]<char const*,char const*>(void *result, char *__src, char *a3, unint64_t a4)
{
  int v7 = result;
  unint64_t v8 = result[2];
  BOOL v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<char>::__vallocate[abi:nn180100](v7, v11);
    BOOL v9 = (char *)v7[1];
    goto LABEL_17;
  }
  long long v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  long long v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    BOOL v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<char>::__vallocate[abi:nn180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    abort();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t *std::operator>>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  char v21 = 0;
  MEMORY[0x18531F500](&v21, a1, 0);
  if (!v21) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = a1 + 5;
  uint64_t v5 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t width = v5->__width_;
  std::ios_base::getloc(v5);
  int v7 = std::locale::use_facet(&v20, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v20);
  uint64_t v8 = 0;
  if (width <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = width;
  }
  if (width >= 1) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    size_t v11 = *(void **)((char *)v4 + *(void *)(*a1 - 24));
    long long v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    long long v14 = *(void **)((char *)v4 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  int v18 = v16 | 4;
  if (v8) {
    int v18 = v16;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v18);
  return a1;
}

void sub_184562EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184563058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  std::locale v20 = v19;

  _Unwind_Resume(a1);
}

void sub_18456329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184563474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v19 = v18;

  _Unwind_Resume(a1);
}

void sub_184563604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1845636F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1845638FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184563A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184563CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionGetTemperature(uint64_t a1, unsigned int a2, unsigned char *a3, _DWORD *a4, _DWORD *a5)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kBatteryMeasurementModelGetProperty", &object, "kRequest", &v18);
  xpc_release(object);
  xpc_object_t xdict = v18;
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v18);
  xpc_object_t object = &xdict;
  int v16 = "kBatteryMeasurementModelTemperature";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_object_t v10 = xpc_int64_create(a2);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kBatteryMeasurementModelTemperatureSensor", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v18 = xpc_null_create();
  uint64_t v12 = SendXpcMessage(a1, &xdict, &v18);
  *a3 = 0;
  if (MEMORY[0x1853203E0](v18) == MEMORY[0x1E4F14590])
  {
    xpc_object_t object = &v18;
    int v16 = "kBatteryMeasurementModelValid";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
    *a3 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
    xpc_release(v14);
    xpc_object_t object = &v18;
    int v16 = "kBatteryMeasurementModelTemperatureFiltered";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
    *a4 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
    xpc_release(v14);
    xpc_object_t object = &v18;
    int v16 = "kBatteryMeasurementModelTemperatureRaw";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
    *a5 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
    xpc_release(v14);
  }
  xpc_release(v18);
  xpc_release(xdict);
  return v12;
}

uint64_t _CTServerConnectionSetMaxTemperature(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kBatteryMeasurementModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xpc_object_t xdict = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kBatteryMeasurementModelMaxTemperature";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_object_t v4 = xpc_int64_create(a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kBatteryMeasurementModelTemperatureMax", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  uint64_t v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionSetPeriodicTemperatureUpdate(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kBatteryMeasurementModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xpc_object_t xdict = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kBatteryMeasurementModelTemperatureUpdate";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_object_t v4 = xpc_int64_create(a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kBatteryMeasurementModelTemperatureUpdateSeconds", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  uint64_t v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t MMSIntegerHeader::MMSIntegerHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(void *)uint64_t result = &unk_1ECFD3430;
  *(_DWORD *)(result + 20) = a3;
  return result;
}

uint64_t MMSIntegerHeader::parseValue(MMSIntegerHeader *this, const char *__str)
{
  *((_DWORD *)this + 5) = strtoul(__str, 0, 0);
  return 1;
}

uint64_t MMSIntegerHeader::decodeValue(MMSIntegerHeader *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeWspIntegerValue(a2, (unsigned int *)this + 5);
}

uint64_t MMSIntegerHeader::encodeValue(MMSIntegerHeader *this, MMSPduEncoder *a2)
{
  return 1;
}

void MMSIntegerHeader::createInstance(MMSIntegerHeader *this)
{
}

void MMSIntegerHeader::copy(MMSIntegerHeader *this)
{
}

const char *MMSIntegerHeader::headerTypeName(MMSIntegerHeader *this)
{
  return "integer";
}

uint64_t MMSIntegerHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v7);
  std::ostream::operator<<();
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v7 + 8, &v5);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v5;
  uint64_t v3 = (void *)MEMORY[0x1E4FBA418];
  *(void *)(a2 + 16) = v6;
  *(void *)&v7[0] = *v3;
  *(void *)((char *)v7 + *(void *)(*(void *)&v7[0] - 24)) = v3[3];
  *((void *)&v7[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18531F630](v11);
  return 1;
}

uint64_t MMSVersionHeader::MMSVersionHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_DWORD *)(result + 20) = a3;
  *(void *)uint64_t result = &unk_1ECFD3598;
  return result;
}

uint64_t MMSVersionHeader::parseValue(MMSVersionHeader *this, const char *__s1)
{
  if (!strcmp(__s1, "MMS 1.0"))
  {
    int v4 = 16;
  }
  else if (!strcmp(__s1, "MMS 1.1"))
  {
    int v4 = 17;
  }
  else if (!strcmp(__s1, "MMS 1.2"))
  {
    int v4 = 18;
  }
  else
  {
    int v4 = 19;
  }
  *((_DWORD *)this + 5) = v4;
  return 1;
}

uint64_t MMSVersionHeader::valueAsString(uint64_t a1, std::string *this)
{
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0x10:
      uint64_t v2 = kMMSMessageVersion1_0;
      goto LABEL_8;
    case 0x11:
      uint64_t v2 = kMMSMessageVersion1_1;
      goto LABEL_8;
    case 0x12:
      uint64_t v2 = kMMSMessageVersion1_2;
      goto LABEL_8;
    case 0x13:
      uint64_t v2 = kMMSMessageVersion1_3;
LABEL_8:
      std::string::__assign_external(this, *v2);
      break;
    default:
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        this->__r_.__value_.__l.__size_ = 7;
        this = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = 7;
      }
      strcpy((char *)this, "Unknown");
      break;
  }
  return 1;
}

void MMSVersionHeader::createInstance(MMSVersionHeader *this)
{
}

void MMSVersionHeader::copy(MMSVersionHeader *this)
{
}

uint64_t MMSDateHeader::MMSDateHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_DWORD *)(result + 20) = a3;
  *(void *)uint64_t result = &unk_1ECFD2FC0;
  return result;
}

uint64_t MMSDateHeader::parseValue(MMSDateHeader *this, const char *a2)
{
  memset(&v5, 0, sizeof(v5));
  uint64_t result = (uint64_t)strptime(a2, "%a %b %d %T %Y\n", &v5);
  if (result)
  {
    time_t v4 = timegm(&v5);
    if (v4 == -1)
    {
      return 0;
    }
    else
    {
      *((_DWORD *)this + 5) = v4;
      return 1;
    }
  }
  return result;
}

BOOL MMSDateHeader::valueAsString(uint64_t a1, std::string *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  time_t v6 = *(unsigned int *)(a1 + 20);
  *(void *)__s = 0;
  uint64_t v8 = 0;
  __int16 v10 = 0;
  uint64_t v9 = 0;
  memset(&v5, 0, sizeof(v5));
  gmtime_r(&v6, &v5);
  strftime(__s, 0x1AuLL, "%a %b %d %T %Y\n", &v5);
  int v3 = __s[0];
  if (__s[0]) {
    std::string::__assign_external(a2, __s);
  }
  return v3 != 0;
}

void MMSDateHeader::createInstance(MMSDateHeader *this)
{
}

void MMSDateHeader::copy(MMSDateHeader *this)
{
}

const char *MMSDateHeader::headerTypeName(MMSDateHeader *this)
{
  return "date";
}

void MMSIntegerHeader::~MMSIntegerHeader(MMSIntegerHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);

  JUMPOUT(0x18531F680);
}

void MMSVersionHeader::~MMSVersionHeader(MMSVersionHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);

  JUMPOUT(0x18531F680);
}

void MMSDateHeader::~MMSDateHeader(MMSDateHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);

  JUMPOUT(0x18531F680);
}

const char *CTSimDeactivationEventSourceTypeAsString(uint64_t a1)
{
  CFStringRef v1 = "CTSimDeactivationEventSourceTypeUnknown";
  if (a1 == 1) {
    CFStringRef v1 = "CTSimDeactivationEventSourceTypeCellular";
  }
  if (a1 == 2) {
    return "CTSimDeactivationEventSourceTypeCarrierEntitlement";
  }
  else {
    return v1;
  }
}

unint64_t _CTServerConnectionCopyPostponementStatus(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = 0x1600000000;
  unsigned int v3 = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    time_t v6 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)buf);
    xpc::dict_creator::operator()<char const*>("kPostponementGetStatus", v6, "kRequest", __p);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v22 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    xpc_object_t v21 = xpc_null_create();
    unint64_t v7 = SendXpcMessage(a1, &v22, &v21);
    unsigned int v3 = v7;
    if (HIDWORD(v7))
    {
      unint64_t v2 = v7 & 0xFFFFFFFF00000000;
      goto LABEL_44;
    }
    uint64_t v8 = MEMORY[0x1853203E0](v21);
    uint64_t v9 = MEMORY[0x1E4F14590];
    if (v8 != MEMORY[0x1E4F14590])
    {
      unint64_t v2 = 0x500000000;
      unsigned int v3 = 1;
LABEL_44:
      xpc_release(v21);
      xpc_release(v22);
      return v3 | v2;
    }
    xpc_object_t xdict = 0;
    *(void *)buf = &v21;
    *(void *)&uint8_t buf[8] = "kPostponementInfoDictionary";
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &xdict);
    if (MEMORY[0x1853203E0](xdict) == v9)
    {
      if (xpc_dictionary_get_count(xdict))
      {
        CFTypeRef v19 = 0;
        *(void *)buf = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v19, (CFTypeRef *)buf);
        CFTypeRef v11 = v19;
        xpc_object_t v10 = xdict;
        xpc_object_t v18 = xdict;
        CFTypeRef v19 = 0;
        *a2 = v11;
        if (v10) {
          xpc_retain(v10);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        CFTypeRef v27 = 0;
        memset(buf, 0, sizeof(buf));
        uint64_t v29 = 0;
        ctu::cf::assign();
        *(_OWORD *)std::string __p = *(_OWORD *)buf;
        uint64_t v24 = v29;
        uint64_t v12 = __p;
        if (v29 < 0) {
          uint64_t v12 = (void **)__p[0];
        }
        *(void *)buf = &v18;
        *(void *)&uint8_t buf[8] = v12;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &object);
        xpc::bridge((uint64_t *)&cf, (xpc *)&object, v13);
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v27, &cf);
        if (cf) {
          CFRelease(cf);
        }
        xpc_release(object);
        xpc_object_t object = 0;
        if (SHIBYTE(v24) < 0) {
          operator delete(__p[0]);
        }
        if (v27) {
          xpc_object_t v14 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
        }
        else {
          xpc_object_t v14 = 0;
        }
        if (v14)
        {
          if (CFEqual(v27, @"kCTPostponementStatusNotReady"))
          {
            uint64_t v15 = "kCTPostponementStatusNotReady";
          }
          else if (CFEqual(v27, @"kCTPostponementStatusReady"))
          {
            uint64_t v15 = "kCTPostponementStatusReady";
          }
          else if (CFEqual(v27, @"kCTPostponementStatusActivated"))
          {
            uint64_t v15 = "kCTPostponementStatusActivated";
          }
          else if (CFEqual(v27, @"kCTPostponementStatusRejected"))
          {
            uint64_t v15 = "kCTPostponementStatusRejected";
          }
          else
          {
            uint64_t v15 = CFEqual(v27, @"kCTPostponementStatusError") ? "kCTPostponementStatusError" : "unknown";
          }
          int v16 = CTLogPostponement();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_18444A000, v16, OS_LOG_TYPE_DEFAULT, "Postponement status: %s", buf, 0xCu);
          }
        }
        if (v27) {
          CFRelease(v27);
        }
        xpc_release(v18);
        xpc_object_t v18 = 0;
        if (v19) {
          CFRelease(v19);
        }
        unint64_t v2 = 0;
        goto LABEL_43;
      }
      unint64_t v2 = 0x2300000000;
    }
    else
    {
      unint64_t v2 = 0x2D00000000;
    }
    unsigned int v3 = 1;
LABEL_43:
    xpc_release(xdict);
    goto LABEL_44;
  }
  return v3 | v2;
}

unint64_t _CTServerConnectionSetPostponementTicket(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x1600000000;
  unsigned int v3 = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPostponementSetTicket", object, "kRequest", &v13);
    xpc_release(object[0]);
    xpc_object_t v5 = v13;
    xpc_object_t v14 = v13;
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v13);
    time_t v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v6) {
      time_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, "kPostponementTicket", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v13 = xpc_null_create();
    unint64_t v8 = SendXpcMessage(a1, &v14, &v13);
    unsigned int v3 = v8;
    if (HIDWORD(v8))
    {
      unint64_t v2 = v8 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x1853203E0](v13) == MEMORY[0x1E4F14590])
    {
      object[0] = &v13;
      object[1] = "kPostponementTicketSet";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      int v9 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
      if (v9) {
        unint64_t v2 = 0;
      }
      else {
        unint64_t v2 = 0x2300000000;
      }
      if (!v9) {
        unsigned int v3 = 1;
      }
    }
    else
    {
      unint64_t v2 = 0;
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3 | v2;
}

unint64_t _CTServerConnectionLockPostponementTicket(uint64_t a1)
{
  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPostponementLockTicket", object, "kRequest", &v10);
    xpc_release(object[0]);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t v10 = xpc_null_create();
    unint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    unsigned int v3 = v2;
    if (HIDWORD(v2))
    {
      unint64_t v4 = v2 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      object[0] = &v10;
      object[1] = "kPostponementTicketLocked";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      int v5 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      BOOL v6 = v5 == 0;
      if (v5) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = 0x2300000000;
      }
      if (v6) {
        unsigned int v3 = 1;
      }
    }
    else
    {
      unint64_t v4 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  else
  {
    unint64_t v4 = 0x1600000000;
    unsigned int v3 = 1;
  }
  return v3 | v4;
}

unint64_t _CTServerConnectionUnlockPostponementTicket(uint64_t a1)
{
  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPostponementUnlockTicket", object, "kRequest", &v10);
    xpc_release(object[0]);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t v10 = xpc_null_create();
    unint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    unsigned int v3 = v2;
    if (HIDWORD(v2))
    {
      unint64_t v4 = v2 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      object[0] = &v10;
      object[1] = "kPostponementTicketLocked";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      int v5 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      BOOL v6 = v5 == 0;
      if (v5) {
        unint64_t v4 = 0x2300000000;
      }
      else {
        unint64_t v4 = 0;
      }
      if (!v6) {
        unsigned int v3 = 1;
      }
    }
    else
    {
      unint64_t v4 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  else
  {
    unint64_t v4 = 0x1600000000;
    unsigned int v3 = 1;
  }
  return v3 | v4;
}

uint64_t _CTServerConnectionGetRemoteServerURL(uint64_t a1, ctu *a2, void *a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleGetRemoteCardSettingsServerURL", object, "kRequest", &xdict);
  xpc_release(object[0]);
  xpc_object_t v6 = xdict;
  xpc_object_t v18 = xdict;
  xpc_object_t xdict = xpc_null_create();
  xpc_release(xdict);
  ctu::cf_to_xpc((uint64_t *)&value, a2, v7);
  xpc_dictionary_set_value(v6, "kCarrierBundleWatchBundleMatchCriteria", value);
  xpc_object_t v8 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v8);
  xpc_release(value);
  xpc_object_t value = 0;
  xpc_object_t xdict = xpc_null_create();
  uint64_t v9 = SendXpcMessage(a1, &v18, &xdict);
  *a3 = 0;
  if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
    && xpc_dictionary_get_value(xdict, "kCarrierBundleRemoteCardSettingsServerURL"))
  {
    uint64_t v15 = 0;
    object[0] = &xdict;
    object[1] = "kCarrierBundleRemoteCardSettingsServerURL";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v13);
    xpc::bridge((uint64_t *)&cf, (xpc *)&v13, v10);
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v15, &cf);
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v13);
    *a3 = v15;
  }
  xpc_release(xdict);
  xpc_release(v18);
  return v9;
}

uint64_t _CTServerConnectionResetCarrierBundle(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerResetCarrierBundle", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionGetUpdatedCarrierBundle(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  memset(&v11, 0, sizeof(v11));
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(char *)(v2 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v2 + 88), *(void *)(v2 + 96));
  }
  else {
    std::string v11 = *(std::string *)(v2 + 88);
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerGetUpdatedCarrierBundle", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v5 = &v11;
  }
  else {
    xpc_object_t v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v6 = xpc_string_create((const char *)v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kName", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v3;
}

uint64_t _CTServerConnectionInstallCarrierBundle(uint64_t a1, ctu *a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerInstallCarrierBundle", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  ctu::cf_to_xpc((uint64_t *)&value, a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierBundlePathForBundle", value);
  xpc_object_t v6 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v6);
  xpc_release(value);
  xpc_object_t value = 0;
  xpc_object_t v10 = xpc_null_create();
  uint64_t v7 = SendXpcMessage(a1, &object, &v10);
  xpc_release(v10);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionSetOTAServerOverride(uint64_t a1, ctu *a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleSetOTAServerOverrideUrl", &object, "kRequest", &v11);
  xpc_release(object);
  xpc_object_t v4 = v11;
  xpc_object_t object = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  ctu::cf_to_xpc((uint64_t *)&value, a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierBundleOTAServerOverrideUrl", value);
  xpc_object_t v6 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v6);
  xpc_release(value);
  xpc_object_t value = 0;
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetOTAServerOverride(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierBundleGetOTAServerOverrideUrl", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierBundleOTAServerOverrideUrl"))
    {
      uint64_t v10 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierBundleOTAServerOverrideUrl";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionModifyAttachAPNSettings(uint64_t a1, ctu *a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleModifyAttachAPNSettings", &object, "kRequest", &v11);
  xpc_release(object);
  xpc_object_t v4 = v11;
  xpc_object_t object = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  ctu::cf_to_xpc((uint64_t *)&value, a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierBundleAttachAPNSettings", value);
  xpc_object_t v6 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v6);
  xpc_release(value);
  xpc_object_t value = 0;
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetAttachAPNSettings(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierBundleGetAttachAPNSettings", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v14 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v14;
    xpc_object_t v11 = "kCarrierBundleAttachAPNSettings";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v14, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierBundleAttachAPNSettings"))
    {
      uint64_t v9 = 0;
      xpc_object_t object = &xdict;
      xpc_object_t v11 = "kCarrierBundleAttachAPNSettings";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v7, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v7);
      *a2 = v9;
    }
    xpc_release(xdict);
    xpc_release(v14);
  }
  return v2;
}

uint64_t _CTServerConnectionGetRemoteBundleInfo(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierBundleGetRemoteBundleInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierBundleRemoteBundleInfo"))
    {
      uint64_t v10 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierBundleRemoteBundleInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSendRemoteRestoreToDefault(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerRemoteRestoreToDefault", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

void MMSContentTypeHeader::MMSContentTypeHeader(MMSContentTypeHeader *this)
{
  CFStringRef v1 = (void *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)this, 0);
  void *v1 = &unk_1ECFD3728;
  v1[3] = 0;
}

void *MMSContentTypeHeader::MMSContentTypeHeader(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = (void *)MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *uint64_t result = &unk_1ECFD3728;
  uint64_t v5 = *a3;
  *a3 = 0;
  result[3] = v5;
  return result;
}

void MMSContentTypeHeader::MMSContentTypeHeader(MMSContentTypeHeader *this, const MMSContentTypeHeader *a2)
{
  *(void *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)this, (uint64_t)a2) = &unk_1ECFD3728;
  uint64_t v4 = *((void *)a2 + 3);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
  }
  *((void *)this + 3) = v4;
}

void MMSContentTypeHeader::~MMSContentTypeHeader(MMSContentTypeHeader *this)
{
  *(void *)this = &unk_1ECFD3728;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  MMSBinaryHeader::~MMSBinaryHeader(this);
}

{
  uint64_t vars8;

  MMSContentTypeHeader::~MMSContentTypeHeader(this);

  JUMPOUT(0x18531F680);
}

void MMSContentTypeHeader::parseValue(MMSContentTypeHeader *this, MMSContentType *a2)
{
}

BOOL MMSContentTypeHeader::decodeValue(MMSContentTypeHeader *this, MMSPduDecoder *a2)
{
  uint64_t v3 = MMSPduDecoder::decodeContentType(a2);
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t v3 = *((void *)this + 3);
  }
  return v3 != 0;
}

uint64_t MMSContentTypeHeader::encodeValue(MMSContentTypeHeader *this, MMSPduEncoder *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t, MMSPduEncoder *))(*(void *)result + 40))(result, a2);
  }
  return result;
}

void MMSContentTypeHeader::createInstance(MMSContentTypeHeader *this)
{
}

void MMSContentTypeHeader::copy(MMSContentTypeHeader *this)
{
}

uint64_t MMSContentTypeHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return MMSContentType::toString(v2, a2);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    *(void *)(a2 + 8) = 3;
    a2 = *(void *)a2;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 3;
  }
  *(_DWORD *)a2 = 2764586;
  return 1;
}

const char *MMSContentTypeHeader::headerTypeName(MMSContentTypeHeader *this)
{
  return "content-type";
}

void sub_184568648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845687D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184568958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184568AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184568C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184568E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184568FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184569138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1845692A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184569428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184569598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184569718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184569888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184569A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184569B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184569D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184569EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  xpc_object_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18456A048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456A200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  xpc_object_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18456A2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18456A4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456A634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18456A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456AA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

double getEstimatedSendTimeOverStewieInSeconds(unint64_t a1)
{
  double v1 = 0.0;
  if (a1)
  {
    if (a1 < 0xD)
    {
      unint64_t v2 = 1;
LABEL_6:
      double v1 = (double)(2 * vcvtpd_u64_f64(fmax(((double)v2 + -1.0) / 0.7 + 2.04081633 - (double)v2, 0.0)));
      return ceil((v1 + (double)v2 * 2.0) * 2.56) + 2.56;
    }
    unint64_t v2 = (unint64_t)(ceil((double)(a1 - 11) / 17.0) + 1.0);
    if (v2) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  return ceil((v1 + (double)v2 * 2.0) * 2.56) + 2.56;
}

const char *EmCallTypeAsString(unsigned int a1)
{
  if (a1 > 5) {
    return "Unknown";
  }
  else {
    return off_1E5265E10[a1];
  }
}

const char *callSourceModeAsString(unsigned int a1)
{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5265E40[a1];
  }
}

const char *TTYTypeAsString(unsigned int a1)
{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5265E58[a1];
  }
}

uint64_t _CTServerConnectionGetSIMStatus(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetSimState", object, "kRequest", &v10);
    xpc_release(object[0]);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      object[0] = &v10;
      object[1] = "kSubscriberSimState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      unsigned int v6 = xpc::dyn_cast_or_default((xpc *)&v9, (const object *)8);
      xpc_release(v9);
      uint64_t v5 = _CTServerConnectionSIMStatusToSIMStatusString(v6);
    }
    else
    {
      uint64_t v5 = @"kCTSIMSupportSIMStatusReady";
    }
    *a2 = v5;
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetSIMTrayStatus(uint64_t a1, __CFString **a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetSimTrayStatus", object, "kRequest", &v10);
    xpc_release(object[0]);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x1853203E0](v10) == MEMORY[0x1E4F14590])
    {
      object[0] = &v10;
      object[1] = "kSubscriberSimTrayStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      unsigned int v6 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      uint64_t v5 = _CTServerConnectionSIMTrayStatusToSIMTrayStatusString(v6);
    }
    else
    {
      uint64_t v5 = @"kCTSIMSupportSIMTrayStatusUnknown";
    }
    *a2 = v5;
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

unint64_t _CTServerConnectionCopyMobileEquipmentInfo(uint64_t a1, xpc_object_t *a2)
{
  if (hasBaseband())
  {
    LODWORD(v4) = 22;
    LODWORD(v5) = 1;
    if (a1 && a2)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kSubscriberGetMobileEquipmentInfo", &object, "kRequest", &xdict);
      xpc_release(object);
      xpc_object_t v15 = xdict;
      xpc_object_t xdict = xpc_null_create();
      xpc_release(xdict);
      xpc_object_t xdict = xpc_null_create();
      unint64_t v5 = SendXpcMessage(a1, &v15, &xdict);
      uint64_t v6 = MEMORY[0x1853203E0](xdict);
      uint64_t v7 = MEMORY[0x1E4F14590];
      if (v6 != MEMORY[0x1E4F14590])
      {
        *a2 = 0;
        LODWORD(v4) = 5;
        LODWORD(v5) = 1;
LABEL_19:
        xpc_release(xdict);
        xpc_release(v15);
        return v5 | ((unint64_t)v4 << 32);
      }
      if (xpc_dictionary_get_value(xdict, "kError"))
      {
        xpc_object_t object = &xdict;
        xpc_object_t v12 = "kError";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v13);
        LODWORD(v4) = xpc::dyn_cast_or_default((xpc *)&v13, 0);
      }
      else
      {
        xpc_object_t v13 = 0;
        xpc_object_t object = &xdict;
        xpc_object_t v12 = "kSubscriberInfoDictionary";
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v13);
        if (MEMORY[0x1853203E0](v13) == v7)
        {
          if (xpc_dictionary_get_count(v13))
          {
            xpc_object_t object = 0;
            uint64_t v10 = _CFXPCCreateCFObjectFromXPCObject();
            ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v10);
            CFTypeRef cf = object;
            if (object) {
              CFRetain(object);
            }
            unint64_t v4 = HIDWORD(v5);
            if (cf) {
              CFRelease(cf);
            }
            *a2 = object;
            goto LABEL_18;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(object) = 0;
            _os_log_impl(&dword_18444A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Empty subscriber info dictionary count, assuming system is not ready", (uint8_t *)&object, 2u);
          }
          *a2 = 0;
          LODWORD(v4) = 35;
        }
        else
        {
          LODWORD(v4) = 45;
        }
        LODWORD(v5) = 1;
      }
LABEL_18:
      xpc_release(v13);
      goto LABEL_19;
    }
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("CopyMobileEquipmentInfo");
    LODWORD(v4) = 19;
    LODWORD(v5) = 1;
  }
  return v5 | ((unint64_t)v4 << 32);
}

void anonymous namespace'::sMaybeLogMobileEquipmentDictionary(CFDictionaryRef *a1)
{
  double v1 = a1;
}

uint64_t _CTServerConnectionPINUnlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (!a1 || !a2) {
    return v2;
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    xpc_object_t v5 = v4;
    xpc_object_t object = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5) {
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    xpc_object_t v6 = v5;
    goto LABEL_9;
  }
LABEL_7:
  xpc_object_t v6 = xpc_null_create();
  xpc_object_t object = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_string_create("kSubscriberPinUnlock");
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kRequest", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kSubscriberPin", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t v2 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionPUKUnlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0x1600000001;
  if (!a2 || !a1 || !a3) {
    return v3;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    xpc_object_t v6 = v5;
    xpc_object_t object = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6) {
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1853203E0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    xpc_object_t v7 = v6;
    goto LABEL_10;
  }
LABEL_8:
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t object = v7;
LABEL_10:
  xpc_release(v6);
  xpc_object_t v8 = xpc_string_create("kSubscriberPukUnlock");
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kRequest", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kSubscriberPin", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kSubscriberPuk", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v14);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionCopyMobileSubscriberIdentity(uint64_t a1, void *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v9 = xpc_null_create();
    *a2 = 0;
    xpc_object_t v5 = v9;
    if (MEMORY[0x1853203E0](v9) != MEMORY[0x1E4F145D8])
    {
      uint64_t v8 = 0;
      uint64_t v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCreateEncryptedIdentity(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc_object_t v10 = xpc_null_create();
    *a3 = 0;
    xpc_object_t v6 = v10;
    if (MEMORY[0x1853203E0](v10) != MEMORY[0x1E4F145D8])
    {
      uint64_t v9 = 0;
      uint64_t v8 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v8);
      *a3 = v9;
    }
    xpc_release(v6);
  }
  return SubscriberProperty;
}

uint64_t _CTServerConnectionEvaluateMobileSubscriberIdentity(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    xpc_object_t v5 = v4;
    xpc_object_t object = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5) {
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    xpc_object_t v7 = v5;
    goto LABEL_9;
  }
LABEL_7:
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t object = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = xpc_string_create("kSubscriberEvaluateEncryptedIdentity");
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kRequest", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (a2)
  {
    xpc_object_t v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kSubscriberEncryptedIdentity", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
  }
  uint64_t v6 = SendXpcMessage(a1, &object, 0, v10);
  xpc_release(object);
  return v6;
}

unint64_t _CTServerConnectionCopySIMIdentity(uint64_t a1, void *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v9 = xpc_null_create();
    *a2 = 0;
    xpc_object_t v5 = v9;
    if (MEMORY[0x1853203E0](v9) != MEMORY[0x1E4F145D8])
    {
      uint64_t v8 = 0;
      uint64_t v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionGetRemainingPINAttemptCount(uint64_t a1, _DWORD *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v7 = xpc_null_create();
    *a2 = 99;
    xpc_object_t v5 = v7;
    if (MEMORY[0x1853203E0](v7) != MEMORY[0x1E4F145D8])
    {
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_object_t v5 = v7;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionGetRemainingPUKAttemptCount(uint64_t a1, _DWORD *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v7 = xpc_null_create();
    *a2 = 0;
    xpc_object_t v5 = v7;
    if (MEMORY[0x1853203E0](v7) != MEMORY[0x1E4F145D8])
    {
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_object_t v5 = v7;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCopyMobileSubscriberCountryCode(uint64_t a1, void *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v9 = xpc_null_create();
    *a2 = 0;
    xpc_object_t v5 = v9;
    if (MEMORY[0x1853203E0](v9) != MEMORY[0x1E4F145D8])
    {
      uint64_t v8 = 0;
      uint64_t v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

uint64_t _CTServerConnectionCopyMobileSubscriberHomeCountryList(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v3 = 22;
  uint64_t v4 = 1;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSubscriberHomeCountryList", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v20 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    unint64_t v8 = SendXpcMessage(a1, &v20, &xdict);
    unsigned int v9 = v8;
    uint64_t v3 = HIDWORD(v8);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (xpc_dictionary_get_value(xdict, "kError"))
      {
        xpc_object_t object = &xdict;
        xpc_object_t v17 = "kError";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v18);
        uint64_t v3 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      }
      else
      {
        xpc_object_t object = &xdict;
        xpc_object_t v17 = "kSubscriberCountries";
        xpc_object_t v18 = 0;
        xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &v18);
        xpc_object_t v10 = 0;
        if (MEMORY[0x1853203E0](v18) == MEMORY[0x1E4F14568])
        {
          xpc_object_t v14 = v18;
          if (v18) {
            xpc_retain(v18);
          }
          else {
            xpc_object_t v14 = xpc_null_create();
          }
          xpc::bridge((uint64_t *)&v15, (xpc *)&v14, v11);
          ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v15);
          xpc_object_t v10 = object;
          xpc_object_t object = 0;
          if (v15) {
            CFRelease(v15);
          }
          xpc_release(v14);
        }
        xpc_object_t object = &xdict;
        xpc_object_t v17 = "kSubscriberIsEsim";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        if (v10) {
          xpc_object_t v12 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
        }
        else {
          xpc_object_t v12 = 0;
        }
        if (v12)
        {
          *a2 = v10;
        }
        else if (v10)
        {
          CFRelease(v10);
        }
      }
      xpc_release(v18);
    }
    xpc_release(xdict);
    xpc_release(v20);
    uint64_t v4 = v9;
  }
  return v4 | (v3 << 32);
}

unint64_t _CTServerConnectionCopyLastKnownMobileSubscriberCountryCode(uint64_t a1, void *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v9 = xpc_null_create();
    *a2 = 0;
    xpc_object_t v5 = v9;
    if (MEMORY[0x1853203E0](v9) != MEMORY[0x1E4F145D8])
    {
      uint64_t v8 = 0;
      uint64_t v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCopyMobileSubscriberNetworkCode(uint64_t a1, void *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v9 = xpc_null_create();
    *a2 = 0;
    xpc_object_t v5 = v9;
    if (MEMORY[0x1853203E0](v9) != MEMORY[0x1E4F145D8])
    {
      uint64_t v8 = 0;
      uint64_t v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionNetworkSelectionMenuAvailable(uint64_t a1, unsigned char *a2)
{
  unint64_t SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    xpc_object_t v7 = xpc_null_create();
    *a2 = 0;
    xpc_object_t v5 = v7;
    if (MEMORY[0x1853203E0](v7) != MEMORY[0x1E4F145D8])
    {
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_object_t v5 = v7;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCopyFirmwareUpdateInfo(uint64_t a1, xpc_object_t *a2)
{
  LODWORD(v2) = 22;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetFirmwareUpdateData", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v14 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    unint64_t v3 = SendXpcMessage(a1, &v14, &xdict);
    uint64_t v6 = MEMORY[0x1853203E0](xdict);
    uint64_t v7 = MEMORY[0x1E4F14590];
    if (v6 != MEMORY[0x1E4F14590])
    {
      *a2 = 0;
      LODWORD(v2) = 5;
      LODWORD(v3) = 1;
LABEL_13:
      xpc_release(xdict);
      xpc_release(v14);
      return v3 | ((unint64_t)v2 << 32);
    }
    if (xpc_dictionary_get_value(xdict, "kError"))
    {
      xpc_object_t object = &xdict;
      xpc_object_t v11 = "kError";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v12);
      LODWORD(v2) = xpc::dyn_cast_or_default((xpc *)&v12, 0);
    }
    else
    {
      xpc_object_t object = &xdict;
      xpc_object_t v11 = "kSubscriberFirmwareUpdateInfoDictionary";
      xpc_object_t v12 = 0;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v12);
      if (MEMORY[0x1853203E0](v12) == v7)
      {
        if (xpc_dictionary_get_count(v12))
        {
          unint64_t v2 = HIDWORD(v3);
          xpc_object_t object = 0;
          uint64_t v9 = _CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v9);
          *a2 = object;
          goto LABEL_12;
        }
        *a2 = 0;
        LODWORD(v2) = 35;
      }
      else
      {
        LODWORD(v2) = 45;
      }
      LODWORD(v3) = 1;
    }
LABEL_12:
    xpc_release(v12);
    goto LABEL_13;
  }
  return v3 | ((unint64_t)v2 << 32);
}

void anonymous namespace'::sMaybeLogMobileEquipmentDictionary(ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::operator()(CFDictionaryRef **a1, uint64_t a2, void *key)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFStringRef Value = CFDictionaryGetValue(**a1, key);
  xpc_object_t v5 = CTLogSubscriber();
  uint64_t v6 = v5;
  if (Value)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
  }
    }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = a2;
    _os_log_impl(&dword_18444A000, v6, OS_LOG_TYPE_DEFAULT, "Missing %s", (uint8_t *)&v7, 0xCu);
  }
}

unint64_t anonymous namespace'::GetSubscriberProperty(uint64_t a1, const char *a2, const char *a3, void **a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8)
  {
    xpc_object_t v10 = v8;
    xpc_object_t v26 = v8;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v26 = v10;
    if (!v10)
    {
LABEL_5:
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v26 = v11;
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v10) != v9) {
    goto LABEL_5;
  }
  xpc_retain(v10);
  xpc_object_t v11 = v10;
LABEL_7:
  xpc_release(v10);
  xpc_object_t v12 = xpc_string_create(a2);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, "kRequest", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, a3, v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t xdict = xpc_null_create();
  unint64_t v16 = SendXpcMessage(a1, &v26, &xdict);
  unsigned int v17 = v16;
  unint64_t v18 = HIDWORD(v16);
  if (MEMORY[0x1853203E0](xdict) == v9)
  {
    if (xpc_dictionary_get_value(xdict, "kError"))
    {
      p_xpc_object_t xdict = &xdict;
      uint64_t v23 = "kError";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &object);
      LODWORD(v18) = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
    }
    else
    {
      p_xpc_object_t xdict = &xdict;
      uint64_t v23 = a3;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &v21);
      CFTypeRef v19 = *a4;
      *a4 = v21;
      xpc_object_t v21 = v19;
      xpc_release(v19);
      xpc_object_t v21 = 0;
    }
  }
  xpc_release(xdict);
  xpc_release(v26);
  return v17 | ((unint64_t)v18 << 32);
}

const char *CTSweetgumDeviceTypeAsString(unint64_t a1)
{
  if (a1 > 4) {
    return "???";
  }
  else {
    return off_1E5265E78[a1];
  }
}

const char *CTSweetgumPlanCategoryAsString(unint64_t a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E5265EA0[a1];
  }
}

const char *CTSweetgumDataUnitsAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return "???";
  }
  else {
    return off_1E5265EC0[a1 - 1];
  }
}

double CTSweetgumConvertDataUnits(uint64_t a1, uint64_t a2, double result)
{
  if (result != 0.0)
  {
    if (a1 >= a2)
    {
      if (a1 > a2)
      {
        int v4 = a1 - a2;
        if ((_BYTE)a1 != (_BYTE)a2)
        {
          do
          {
            --v4;
            uint64_t result = result * 1024.0;
          }
          while ((_BYTE)v4);
        }
      }
    }
    else
    {
      int v3 = a2 - a1;
      if ((_BYTE)a2 != (_BYTE)a1)
      {
        do
        {
          --v3;
          uint64_t result = result * 0.0009765625;
        }
        while ((_BYTE)v3);
      }
    }
  }
  return result;
}

const char *CTSweetgumPlanPurchaseStatusAsString(unint64_t a1)
{
  if (a1 > 4) {
    return "???";
  }
  else {
    return off_1E5265EE8[a1];
  }
}

const char *CTSweetgumPlanStatusAsString(unint64_t a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E5265F10[a1];
  }
}

const char *CTSweetgumRegistrationStatusAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5265F30[a1];
  }
}

uint64_t MMSHeader::encode(MMSHeader *this, MMSPduEncoder *a2)
{
  uint64_t result = (*(uint64_t (**)(MMSHeader *))(*(void *)this + 32))(this);
  if (result)
  {
    xpc_object_t v5 = *(uint64_t (**)(MMSHeader *, MMSPduEncoder *))(*(void *)this + 40);
    return v5(this, a2);
  }
  return result;
}

uint64_t MMSHeader::prettyHeader@<X0>(MMSHeader *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)xpc_object_t v21 = 0u;
  memset(v20, 0, sizeof(v20));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v20);
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(MMSHeader *, void **))(*(void *)this + 72))(this, &__p);
  uint64_t v6 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(void *)this + 64))(this);
  size_t v7 = strlen(v6);
  xpc_object_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v6, v7);
  if (a2)
  {
    uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)": [", 3);
    xpc_object_t v10 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(void *)this + 88))(this);
    size_t v11 = strlen(v10);
    xpc_object_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    xpc_object_t v12 = "] ";
  }
  else
  {
    xpc_object_t v12 = ": ";
  }
  xpc_object_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v12, 2);
  if (v19 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v19 >= 0) {
    uint64_t v15 = HIBYTE(v19);
  }
  else {
    uint64_t v15 = v18;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v15);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v20 + 8, a3);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(void *)&v20[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v20 + *(void *)(*(void *)&v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v20[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18531F630](v24);
}

uint64_t MMSHeader::isSensitive(MMSHeader *this)
{
  return 0;
}

void sub_18456DD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18456DF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456E134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18456E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456E534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18456E714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18456E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18456ECEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18456EF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18456F2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456F484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18456F6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionEraseCommCentersPreferences(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelEraseCommCentersPreferences", &object, "kRequest", &v4);
  xpc_release(object);
  xpc_object_t object = v4;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  xpc_object_t v4 = xpc_null_create();
  uint64_t v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionEraseBasebandSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelEraseBasebandSettings", object, "kRequest", &v11);
    xpc_release(object[0]);
    xpc_object_t v4 = v11;
    xpc_object_t v12 = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = 0;
    object[1] = 0;
    uint64_t v10 = 0;
    std::string::basic_string[abi:nn180100]<0>(object, "");
    ctu::cf::assign();
    if (v10 >= 0) {
      xpc_object_t v5 = object;
    }
    else {
      xpc_object_t v5 = (xpc_object_t *)object[0];
    }
    xpc_object_t v6 = xpc_string_create((const char *)v5);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kSettingsModelEraseWhat", v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xpc_object_t v11 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &v11);
    xpc_release(v11);
    if (SHIBYTE(v10) < 0) {
      operator delete(object[0]);
    }
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionEraseNetworkSettings(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelEraseNetworkSettings", &object, "kRequest", &v4);
  xpc_release(object);
  xpc_object_t object = v4;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  xpc_object_t v4 = xpc_null_create();
  uint64_t v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionEraseAllUserProfiles(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelEraseAllUserProfiles", &object, "kRequest", &v4);
  xpc_release(object);
  xpc_object_t object = v4;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  xpc_object_t v4 = xpc_null_create();
  uint64_t v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

unint64_t _CTServerConnectionCopySystemCapabilities(uint64_t a1, xpc_object_t *a2, unsigned char *a3)
{
  LODWORD(v3) = 22;
  unsigned int v4 = 1;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v15 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v15;
    xpc_object_t v12 = "kSettingsModelCopySystemCapabilities";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_object_t xdict = xpc_null_create();
    unint64_t v8 = SendXpcMessage(a1, &v15, &xdict);
    unsigned int v4 = v8;
    unint64_t v3 = HIDWORD(v8);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      if (xpc_dictionary_get_value(xdict, "kSettingsModelError") || v3)
      {
        if (xpc_dictionary_get_value(xdict, "kSettingsModelError"))
        {
          xpc_object_t object = &xdict;
          xpc_object_t v12 = "kSettingsModelError";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
          LODWORD(v3) = xpc::dyn_cast_or_default((xpc *)&v10, 0);
          xpc_release(v10);
        }
        unsigned int v4 = 2;
        syslog(3, "Error copying CT System Capabilities:%d/%d", 2, v3);
      }
      else if (xpc_dictionary_get_value(xdict, "kSettingsModelSystemCapabilitiesDict"))
      {
        xpc_object_t object = 0;
        xpc_dictionary_get_value(xdict, "kSettingsModelSystemCapabilitiesDict");
        xpc_object_t v10 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v10);
        LODWORD(v3) = 0;
        *a2 = object;
        *a3 = 1;
      }
      else
      {
        LODWORD(v3) = 0;
      }
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v4 | ((unint64_t)v3 << 32);
}

unint64_t _CTServerConnectionCopyBasebandSettings(uint64_t a1, void *a2, unsigned char *a3)
{
  unint64_t v3 = 0x1600000000;
  unsigned int v4 = 1;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetProperty", object, "kRequest", &v14);
    xpc_release(object[0]);
    xpc_object_t v15 = v14;
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v14);
    object[0] = &v15;
    object[1] = "kSettingsModelCopyBasebandSettings";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    object[0] = xpc_null_create();
    uint64_t v8 = SendXpcMessage(a1, &v15, object);
    uint64_t v9 = v8;
    if (HIDWORD(v8))
    {
      unsigned int v4 = 2;
      syslog(3, "Error copying CT Baseband Settings:%d/%d", 2, HIDWORD(v8));
    }
    else
    {
      if (MEMORY[0x1853203E0](object[0]) == MEMORY[0x1E4F14590]
        && xpc_dictionary_get_value(object[0], "kSettingsModelBasebandSettingsDict"))
      {
        xpc_object_t v14 = 0;
        xpc_dictionary_get_value(object[0], "kSettingsModelBasebandSettingsDict");
        uint64_t v11 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v14, (CFTypeRef *)&v11);
        *a2 = v14;
        *a3 = 1;
      }
      unsigned int v4 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v15);
    unint64_t v3 = v9 & 0xFFFFFFFF00000000;
  }
  return v4 | v3;
}

uint64_t _CTServerConnectionSetBasebandSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v10);
    xpc_release(object[0]);
    xpc_object_t xdict = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    object[0] = &xdict;
    object[1] = "kSettingsModelSetBasebandSettings";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    unsigned int v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v4) {
      unsigned int v4 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, "kSettingsModelBasebandSettingsDict", v4);
    xpc_object_t v5 = xpc_null_create();
    xpc_release(v4);
    xpc_release(v5);
    uint64_t v2 = SendXpcMessage(a1, &xdict, 0, v6);
    xpc_release(xdict);
  }
  return v2;
}

unint64_t _CTServerConnectionFetchCallForwardingValue(uint64_t a1, const __CFString *this, const __CFString *a3)
{
  unint64_t v3 = 0x1600000000;
  uint64_t v4 = 1;
  if (a1 && a3)
  {
    if (v9 == 255)
    {
      uint64_t v4 = 1;
    }
    else
    {
      unsigned int v10 = v9;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallForwardingValue", &object, "kRequest", &v19);
      xpc_release(object);
      xpc_object_t v11 = v19;
      xpc_object_t object = v19;
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v19);
      xpc_object_t v12 = xpc_int64_create(v7);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kSettingsModelReason", v12);
      xpc_object_t v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      xpc_object_t v14 = xpc_int64_create(v10);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kSettingsModelClss", v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      unint64_t v17 = SendXpcMessage(a1, &object, 0, v16);
      unint64_t v3 = v17 & 0xFFFFFFFF00000000;
      xpc_release(object);
      uint64_t v4 = 2;
      if (!HIDWORD(v17)) {
        uint64_t v4 = v17;
      }
    }
  }
  return v3 | v4;
}

CFComparisonResult anonymous namespace'::CTServerConnectionCallForwardingReasonStringToCallForwardingReasonEnum(const __CFString *this, const __CFString *a2)
{
  CFComparisonResult result = CFStringCompare(this, @"kCTSettingCallForwardingReasonUnconditional", 0);
  if (result)
  {
    if (CFStringCompare(this, @"kCTSettingCallForwardingReasonMobileBusy", 0))
    {
      if (CFStringCompare(this, @"kCTSettingCallForwardingReasonNoReply", 0))
      {
        if (CFStringCompare(this, @"kCTSettingCallForwardingReasonNotReachable", 0))
        {
          if (CFStringCompare(this, @"kCTSettingCallForwardingReasonAllConditional", 0)) {
            return 4;
          }
          else {
            return 5;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t anonymous namespace'::CTServerConnectionCallClassStringToCallClassMask(const __CFString *this, const __CFString *a2)
{
  if (CFEqual(this, @"kCTSettingCallClassVoice")) {
    return 1;
  }
  if (CFEqual(this, @"kCTSettingCallClassData")) {
    return 2;
  }
  if (CFEqual(this, @"kCTSettingCallClassFax")) {
    return 4;
  }
  if (CFEqual(this, @"kCTSettingCallClassShortMessageSerice")) {
    return 8;
  }
  if (CFEqual(this, @"kCTSettingCallClassDataCircuitSync")) {
    return 16;
  }
  if (CFEqual(this, @"kCTSettingCallClassDataCircuitAsync")) {
    return 32;
  }
  if (CFEqual(this, @"kCTSettingCallClassPacketAccess")) {
    return 64;
  }
  if (CFStringCompare(this, @"kCTSettingCallClassPADAccess", 0)) {
    return 255;
  }
  return 128;
}

uint64_t _CTServerConnectionSaveCallForwardingValue(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4, uint64_t a5, int *a6)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", v34);
  xpc_release(object[0]);
  xpc_object_t xdict = v34[0];
  v34[0] = xpc_null_create();
  xpc_release(v34[0]);
  object[0] = 0;
  object[1] = 0;
  uint64_t v37 = 0;
  std::string::basic_string[abi:nn180100]<0>(object, "");
  ctu::cf::assign();
  v34[0] = &xdict;
  v34[1] = "kSettingsModelSaveCallForwardingValue";
  xpc::dict::object_proxy::operator=((uint64_t)v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_object_t v15 = xpc_int64_create(a2);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelReason", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(v14);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelClss", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_BOOL_create(a4 != 0);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = xpc_BOOL_create(a5 != 0);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelSaveNumber", v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  if (v37 >= 0) {
    long long v23 = object;
  }
  else {
    long long v23 = (xpc_object_t *)object[0];
  }
  xpc_object_t v24 = xpc_string_create((const char *)v23);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelNumber", v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_BOOL_create(a6 != 0);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelCallFwdSaveTime", v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  if (a6) {
    int64_t v28 = *a6;
  }
  else {
    int64_t v28 = 0;
  }
  xpc_object_t v30 = xpc_int64_create(v28);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelTime", v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  uint64_t v29 = SendXpcMessage(a1, &xdict, 0, v32);
  if (SHIBYTE(v37) < 0) {
    operator delete(object[0]);
  }
  xpc_release(xdict);
  return v29;
}

uint64_t _CTServerConnectionFetchCallBarringValue(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v23 = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  ctu::cf::assign();
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallBarringValue", &object, "kRequest", &v21);
  xpc_release(object);
  xpc_object_t v10 = v21;
  xpc_object_t object = v21;
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v21);
  if (v23 >= 0) {
    xpc_object_t v11 = __p;
  }
  else {
    xpc_object_t v11 = (void **)__p[0];
  }
  xpc_object_t v12 = xpc_string_create((const char *)v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kSettingsModelPin2", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(v7);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kSettingsModelClss", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(v9);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kSettingsModelFacility", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  uint64_t v19 = SendXpcMessage(a1, &object, 0, v18);
  xpc_release(object);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  return v19;
}

CFComparisonResult anonymous namespace'::CTServerConnectionCallBarringFaciltiyStringToCallBarringFacilityEnum(const __CFString *this, const __CFString *a2)
{
  CFComparisonResult result = CFStringCompare(this, @"kCTSettingCallBarringFacilityAllOutgoing", 0);
  if (result)
  {
    if (CFStringCompare(this, @"kCTSettingCallBarringFacilityAllIncoming", 0))
    {
      if (CFStringCompare(this, @"kCTSettingCallBarringFacilityOutgoingInternational", 0))
      {
        if (CFStringCompare(this, @"kCTSettingCallBarringFacilityOutgoingInternationalExceptHomeCountry", 0))
        {
          if (CFStringCompare(this, @"kCTSettingCallBarringFacilityIncomingWhileRoamingOutsideHomeCountry", 0))
          {
            if (CFStringCompare(this, @"kCTSettingCallBarringFacilityIncomingNotOnSim", 0)) {
              return 0;
            }
            else {
              return 5;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 2;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t _CTServerConnectionSaveCallBarringValue(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4)
{
  if (!a1) {
    return 0x1600000001;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v29 = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  ctu::cf::assign();
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v26);
  xpc_release(object[0]);
  xpc_object_t xdict = v26;
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v26);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveCallBarringValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v25);
  xpc_release(v25);
  xpc_object_t v25 = 0;
  if (v29 >= 0) {
    xpc_object_t v12 = __p;
  }
  else {
    xpc_object_t v12 = (void **)__p[0];
  }
  xpc_object_t v13 = xpc_string_create((const char *)v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelPin2", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(v9);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelClss", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(v11);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelFacility", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_BOOL_create(a4 != 0);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v22 = SendXpcMessage(a1, &xdict, 0, v21);
  xpc_release(xdict);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  return v22;
}

uint64_t _CTServerConnectionSaveCallWaitingValue(uint64_t a1, const __CFString *this, int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v15);
  xpc_release(object[0]);
  xpc_object_t xdict = v15;
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v15);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveCallWaitingValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelClss", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_BOOL_create(a3 != 0);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  uint64_t v11 = SendXpcMessage(a1, &xdict, 0, v10);
  xpc_release(xdict);
  return v11;
}

uint64_t _CTServerConnectionChangePinPassword(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xpc_object_t xdict = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kSettingsModelChangePinPassword";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  uint64_t v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v2) {
    uint64_t v2 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelOldPassword", v2);
  xpc_object_t v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  uint64_t v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v4) {
    uint64_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelNewPassword", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  uint64_t v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionChangePin2Password(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xpc_object_t xdict = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kSettingsModelChangePin2Password";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  uint64_t v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v2) {
    uint64_t v2 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelOldPassword", v2);
  xpc_object_t v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  uint64_t v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v4) {
    uint64_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelNewPassword", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  uint64_t v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionSaveSimLockValue(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v13);
  xpc_release(object[0]);
  xpc_object_t xdict = v13;
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v13);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveSimLockValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v12);
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_object_t v4 = xpc_BOOL_create(a2 != 0);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  uint64_t v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v6) {
    uint64_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelPin", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  uint64_t v9 = SendXpcMessage(a1, &xdict, 0, v8);
  xpc_release(xdict);
  return v9;
}

uint64_t _CTServerConnectionSaveCallingLineIdRestrictionValue(uint64_t a1, CFStringRef theString1)
{
  if (!a1) {
    return 0x1600000001;
  }
  if (CFStringCompare(theString1, @"kCTSettingCallingLineIdRestrictionNetworkControlled", 0))
  {
    if (CFStringCompare(theString1, @"kCTSettingCallingLineIdRestrictionEnabled", 0))
    {
      if (CFStringCompare(theString1, @"kCTSettingCallingLineIdRestrictionUnknown", 0)) {
        int64_t v4 = 0;
      }
      else {
        int64_t v4 = 3;
      }
    }
    else
    {
      int64_t v4 = 1;
    }
  }
  else
  {
    int64_t v4 = 2;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v12);
  xpc_release(object[0]);
  xpc_object_t xdict = v12;
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v12);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveCallingLineIdRestrictionValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_object_t v6 = xpc_int64_create(v4);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelValue", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  uint64_t v5 = SendXpcMessage(a1, &xdict, 0, v8);
  xpc_release(xdict);
  return v5;
}

uint64_t _CTServerConnectionSaveServiceCenterAddressValue(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v9);
  xpc_release(object[0]);
  xpc_object_t xdict = v9;
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v9);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveServiceCenterAddressValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  uint64_t v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v2) {
    uint64_t v2 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSettingsModelNumber", v2);
  xpc_object_t v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  uint64_t v5 = SendXpcMessage(a1, &xdict, 0, v4);
  xpc_release(xdict);
  return v5;
}

uint64_t _CTServerConnectionPreferencesSetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesSetValue", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v4 = v10;
    xpc_object_t object = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    uint64_t v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      uint64_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kSettingsModelKey", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kSettingsModelValue", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v10);
    xpc_release(v10);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionPreferencesCopyValue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesCopyValue", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v6 = xdict;
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kSettingsModelKey", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kSettingsModelValue"))
    {
      xpc_dictionary_get_value(xdict, "kSettingsModelValue");
      *a3 = _CFXPCCreateCFObjectFromXPCObject();
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionPreferencesSetNoBackupValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesSetNoBackupValue", &object, "kRequest", &v10);
    xpc_release(object);
    xpc_object_t v4 = v10;
    xpc_object_t object = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    uint64_t v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      uint64_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kSettingsModelNoBackupKey", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kSettingsModelNoBackupValue", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v10 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v10);
    xpc_release(v10);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionPreferencesCopyNoBackupValue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesCopyNoBackupValue", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v6 = xdict;
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kSettingsModelNoBackupKey", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kSettingsModelNoBackupValue"))
    {
      xpc_dictionary_get_value(xdict, "kSettingsModelNoBackupValue");
      *a3 = _CFXPCCreateCFObjectFromXPCObject();
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionFetchCallWaitingValue(uint64_t a1, const __CFString *this)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallWaitingValue", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(v3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kSettingsModelClss", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionFetchSimLockValue(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchSimLockValue", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionFetchConnectedLinePresentationValue(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchLinePresentationValue", &object, "kRequest", &v8);
  xpc_release(object);
  xpc_object_t v2 = v8;
  xpc_object_t object = v8;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_object_t v3 = xpc_int64_create(0);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kSettingsModelLinePresentation", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  uint64_t v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionFetchCallingLinePresentationValue(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchLinePresentationValue", &object, "kRequest", &v8);
  xpc_release(object);
  xpc_object_t v2 = v8;
  xpc_object_t object = v8;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_object_t v3 = xpc_int64_create(1);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kSettingsModelLinePresentation", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  uint64_t v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionFetchConnectedLineIdRestrictionValue(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchConnectedLineIdRestrictionValue", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionFetchCallingLineIdRestrictionValue(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallingLineIdRestrictionValue", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionFetchServiceCenterAddressValue(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchServiceCenterAddressValue", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionCopyCompanionPhoneNumber(const void *a1, CFStringRef *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetCompanionPhoneNumber", (xpc_object_t *)&object, "kRequest", __p);
    xpc_release((xpc_object_t)object);
    xpc_object_t v14 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    xpc_object_t v13 = xpc_null_create();
    unint64_t v2 = SendXpcMessage((uint64_t)a1, &v14, &v13);
    if (!HIDWORD(v2) && MEMORY[0x1853203E0](v13) == MEMORY[0x1E4F14590])
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v12 = 0;
      v9[0] = &v13;
      v9[1] = "kSettingsModelNumber";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v9, &v10);
      long long object = 0uLL;
      uint64_t v16 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v16) < 0) {
        operator delete((void *)object);
      }
      xpc_release(v10);
      CFAllocatorRef v5 = CFGetAllocator(a1);
      if (v12 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *a2 = CFStringCreateWithCString(v5, (const char *)v6, 0x8000100u);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = __p;
        if (v12 < 0) {
          uint64_t v7 = (void **)__p[0];
        }
        LODWORD(object) = 136380675;
        *(void *)((char *)&object + 4) = v7;
        _os_log_impl(&dword_18444A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Companion phone number %{private}s", (uint8_t *)&object, 0xCu);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyEffectiveSimInfo(const void *a1, CFDictionaryRef *a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelGetProperty", (xpc_object_t *)&object.__r_.__value_.__l.__data_, "kRequest", (xpc_object_t *)&v15.__r_.__value_.__l.__data_);
  xpc_release(object.__r_.__value_.__l.__data_);
  xpc_object_t v14 = (xpc_object_t)v15.__r_.__value_.__r.__words[0];
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc_release(v15.__r_.__value_.__l.__data_);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  object.__r_.__value_.__l.__size_ = (std::string::size_type)"kSettingsModelGetEffectiveSimInfo";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_object_t xdict = xpc_null_create();
  unint64_t v4 = SendXpcMessage((uint64_t)a1, &v14, &xdict);
  if (!HIDWORD(v4) && MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
  {
    values = 0;
    keys[0] = @"kCTSettingMyEffectivePhoneNumber";
    if (xpc_dictionary_get_value(xdict, "kSettingsEffectivePhoneNumber"))
    {
      v9[0] = &xdict;
      v9[1] = "kSettingsEffectivePhoneNumber";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v9, &v10);
      memset(&object, 0, sizeof(object));
      xpc::dyn_cast_or_default();
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(object.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = __p;
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&object, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string object = v15;
      }
      uint64_t v17 = 0;
      if (ctu::cf::convert_copy()) {
        CFAllocatorRef v5 = v17;
      }
      else {
        CFAllocatorRef v5 = 0;
      }
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(object.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      xpc_release(v10);
      values = v5;
      CFIndex v6 = 1;
    }
    else
    {
      CFAllocatorRef v5 = 0;
      CFIndex v6 = 0;
    }
    CFAllocatorRef v7 = CFGetAllocator(a1);
    *a2 = CFDictionaryCreate(v7, (const void **)keys, (const void **)&values, v6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v5) {
      CFRelease(v5);
    }
  }
  xpc_release(xdict);
  xpc_release(v14);
  return v4;
}

uint64_t MMSHeaderEncoding::MMSHeaderEncoding(uint64_t a1, uint64_t *a2, char a3, char *a4)
{
  *(unsigned char *)a1 = a3;
  CFIndex v6 = (void *)(a1 + 8);
  if (a4) {
    CFAllocatorRef v7 = a4;
  }
  else {
    CFAllocatorRef v7 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)(a1 + 32) = v8;
  *(void *)(v8 + 8) = a1;
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
  return a1;
}

uint64_t _CTServerConnectionUpdateCarrierPushToken(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsUpdatePushToken", object, "kRequest", __p);
  xpc_release(object[0]);
  unint64_t v2 = __p[0];
  xpc_object_t v11 = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  object[0] = 0;
  object[1] = 0;
  uint64_t v13 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)object;
  uint64_t v10 = v13;
  if (v13 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)object[0];
  }
  xpc_object_t v4 = xpc_string_create((const char *)v3);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsPushToken", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = SendXpcMessage(a1, &v11, 0, v6);
  xpc_release(v11);
  return v7;
}

uint64_t _CTServerConnectionEntitlementsGetSIMStatus(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetSIMStatus", object, "kRequest", __p);
  xpc_release(object[0]);
  unint64_t v2 = __p[0];
  xpc_object_t v11 = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  object[0] = 0;
  object[1] = 0;
  uint64_t v13 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)object;
  uint64_t v10 = v13;
  if (v13 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)object[0];
  }
  xpc_object_t v4 = xpc_string_create((const char *)v3);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsPrimaryIccid", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = SendXpcMessage(a1, &v11, 0, v6);
  xpc_release(v11);
  return v7;
}

uint64_t _CTServerConnectionEntitlementsSignUpSIMService(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsSignUpSIMService", object, "kRequest", __p);
  xpc_release(object[0]);
  unint64_t v2 = __p[0];
  xpc_object_t v20 = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  object[0] = 0;
  object[1] = 0;
  uint64_t v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)object;
  uint64_t v19 = v22;
  if (v22 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)object[0];
  }
  xpc_object_t v4 = xpc_string_create((const char *)v3);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsPrimaryIccid", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  object[0] = 0;
  object[1] = 0;
  uint64_t v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)object;
  uint64_t v19 = v22;
  if (v22 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)object[0];
  }
  xpc_object_t v7 = xpc_string_create((const char *)v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsSecondaryCsn", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  object[0] = 0;
  object[1] = 0;
  uint64_t v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)object;
  uint64_t v19 = v22;
  if (v22 >= 0) {
    xpc_object_t v9 = __p;
  }
  else {
    xpc_object_t v9 = (void **)object[0];
  }
  xpc_object_t v10 = xpc_string_create((const char *)v9);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsSecondaryImei", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  object[0] = 0;
  object[1] = 0;
  uint64_t v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)object;
  uint64_t v19 = v22;
  if (v22 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)object[0];
  }
  xpc_object_t v13 = xpc_string_create((const char *)v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsSecondaryMeid", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = SendXpcMessage(a1, &v20, 0, v15);
  xpc_release(v20);
  return v16;
}

uint64_t _CTServerConnectionEntitlementsSetSecondaryIccids(uint64_t a1, ctu *a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsSetSecondaryIccids", &object, "kRequest", &v11);
  xpc_release(object);
  xpc_object_t v4 = v11;
  xpc_object_t object = v11;
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v11);
  ctu::cf_to_xpc((uint64_t *)&value, a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierEntitlementsSecondaryIccids", value);
  xpc_object_t v6 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v6);
  xpc_release(value);
  xpc_object_t value = 0;
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEntitlementsClearSecondaryIccids(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsClearSecondaryIccids", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionCopyPhoneNumberSignature(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPhoneNumberSignature", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierPhoneNumberSignatureInfo"))
    {
      unint64_t v2 = v3 & 0xFFFFFFFF00000000;
      uint64_t v11 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierPhoneNumberSignatureInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      unint64_t v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

uint64_t _CTServerConnectionEntitlementsSetPreferredRoamingNetworks(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsSetPreferredRoamingNetworks", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionEntitlementsGetPreferredRoamingNetworks(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPreferredRoamingNetworks", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionGetPLMNPriorityInfo(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPLMNPriorityInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierPLMNPriorityInfoData"))
    {
      unint64_t v2 = v3 & 0xFFFFFFFF00000000;
      uint64_t v11 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierPLMNPriorityInfoData";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      unint64_t v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

unint64_t _CTServerConnectionCopyPhoneServiceDeviceList(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPhoneServiceDeviceList", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v13 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementsGetPSDeviceListDeviceList"))
    {
      unint64_t v2 = v3 & 0xFFFFFFFF00000000;
      uint64_t v11 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierEntitlementsGetPSDeviceListDeviceList";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      unint64_t v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

unint64_t _CTServerConnectionGetCarrierSpaceUpdates(uint64_t a1, ctu *a2)
{
  unint64_t v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetCarrierSpaceUpdates", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v6 = xdict;
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v7);
    xpc_dictionary_set_value(v6, "kCarrierEntitlementsGetCarrierSpaceUpdatesBody", value);
    xpc_object_t v8 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v8);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementsGetCarrierSpaceUpdatesBody"))
    {
      unint64_t v2 = v3 & 0xFFFFFFFF00000000;
    }
    else
    {
      unint64_t v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

unint64_t _CTServerConnectionUpdateAccountWithFeatureOrService(uint64_t a1, ctu *a2)
{
  unint64_t v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsUpdateAccountWithFeatureOrService", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v6 = xdict;
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v7);
    xpc_dictionary_set_value(v6, "kCarrierEntitlementsUpdateAccountWithFeatureOrServiceBody", value);
    xpc_object_t v8 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v8);
    xpc_release(value);
    xpc_object_t value = 0;
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementsUpdateAccountWithFeatureOrServiceBody"))
    {
      unint64_t v2 = v3 & 0xFFFFFFFF00000000;
    }
    else
    {
      unint64_t v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

__CFString *GetCarrierEntitlementResultString(int a1)
{
  if ((a1 - 1) > 5) {
    return @"kCTCarrierEntitlementResultUnknown";
  }
  else {
    return (__CFString *)*((void *)&off_1E5266AD8 + a1 - 1);
  }
}

uint64_t ConvertAccountQueryTypesToMask(const __CFArray *a1)
{
  if (!a1 || !CFArrayGetCount(a1)) {
    return 255;
  }
  CFIndex Count = CFArrayGetCount(a1);
  uint64_t v3 = 0;
  if (Count)
  {
    CFIndex v4 = Count - 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
      LODWORD(v3) = v3 | (CFEqual(ValueAtIndex, @"kCTCarrierAccountInfoQueryTypeSubscriptionStatus") != 0);
      if (CFEqual(ValueAtIndex, @"kCTCarrierAccountInfoQueryTypeUsageStatus")) {
        uint64_t v3 = v3 | 2;
      }
      else {
        uint64_t v3 = v3;
      }
      --v4;
    }
    while (v4 != -1);
  }
  return v3;
}

void sub_18457441C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845744A8(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184574548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457469C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184574EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184574FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845752E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184575684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, int a12, char a13, void *a14, void *a15, void *a16, void *a17)
{
  if (a13)
  {
  }
  if (!a15) {

  }
  if (v21)
  {
  }
  if (!v20) {

  }
  _Unwind_Resume(a1);
}

void sub_184575814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845758E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184575A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184575C8C(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184575E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457609C(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18457613C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845762F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845763D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845764BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184576650(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845766E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  if (a13)
  {
  }
  if (!v14) {

  }
  _Unwind_Resume(a1);
}

void sub_184576B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184576D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184576FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577044(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845770E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577494(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184577534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845776E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577900(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845779A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845779EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184577F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184578030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845780FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184578224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845782B0(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184578350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457839C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845784A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184578584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845786C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845788A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  if (a13)
  {
  }
  if (!v16) {

  }
  _Unwind_Resume(a1);
}

void sub_1845789CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184578A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184578ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184578BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184578CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184578E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184578F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184579220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845792E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457952C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845795E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845796B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184579798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457984C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845799E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, int a14, char a15, void *a16, void *a17, void *a18)
{
  if (a12)
  {
  }
  if (!v24) {

  }
  if (a15)
  {
  }
  if (!v21) {

  }
  _Unwind_Resume(a1);
}

void sub_184579DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184579F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457A060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457A1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457A38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457A500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457A5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457A654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457A6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457A84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457A9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457ABA0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18457AD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457AFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18457B130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457B1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457B2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457B4C8(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18457B6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457B8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457BABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  if (a13)
  {
  }
  if (!v14) {

  }
  _Unwind_Resume(a1);
}

void sub_18457BB64()
{
}

void sub_18457BBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457BC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457BCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457BDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457BEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457C094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457C274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  if (a13)
  {
  }
  if (!v16) {

  }
  _Unwind_Resume(a1);
}

void sub_18457C398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457C3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457C488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457C5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457C6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457C8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, char a14, void *a15, void *a16, void *a17, void *a18, int a19, char a20,void *a21,void *a22,void *a23,int a24,char a25,void *a26)
{
  if (a14)
  {
  }
  if (!a21) {

  }
  if (a20)
  {
  }
  if (!a26) {

  }
  if (a25)
  {
  }
  if (!v31) {

  }
  if (v32)
  {
  }
  if (!v27) {

  }
  _Unwind_Resume(a1);
}

void sub_18457CF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457CFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457D0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457D2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457D4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457D714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457D7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457D848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457D8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457D990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457DAD4(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18457DB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457DCC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457DD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457DDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457DE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457DF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457DFF8(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18457E09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457E2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457E8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15, void *a16, void *a17, int a18, char a19, void *a20,void *a21,void *a22,void *a23,int a24,char a25,void *a26,void *a27,void *a28,int a29,char a30,void *a31,void *a32,void *a33,void *a34)
{
  if (a14)
  {
  }
  if (!a20) {

  }
  if (a19)
  {
  }
  if (!a26) {

  }
  if (a25)
  {
  }
  if (!a31) {

  }
  if (a30)
  {
  }
  if (!*(void *)(v42 - 152)) {

  }
  if (*(_DWORD *)(v42 - 156))
  {
  }
  if (!v41) {

  }
  if (*(_DWORD *)(v42 - 116))
  {
  }
  if (!v38) {

  }
  if (*(_DWORD *)(v42 - 92))
  {
  }
  if (!v35) {

  }
  _Unwind_Resume(a1);
}

void sub_18457EB98()
{
}

void sub_18457EBA0()
{
  if (v0) {
    JUMPOUT(0x18457EB88);
  }
  JUMPOUT(0x18457EB80);
}

void sub_18457EBAC()
{
}

void sub_18457EC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457ECE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457F050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457F370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457F5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457F6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457F7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457F824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457F8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18457F994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457FA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457FBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457FE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, int a14, char a15, void *a16)
{
  if (a12)
  {
  }
  if (!v19) {

  }
  if (a15)
  {
  }
  if (!v17) {

  }
  _Unwind_Resume(a1);
}

void sub_18457FF80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18457FFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845801C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845802F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845805DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184580750(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845807EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845808F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845809C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184580C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184580FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184581018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458109C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184581160(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845811F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845812CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458132C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845813B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845813FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184581480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184581544(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845815D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184581884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184581FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, int a16, char a17, void *a18, void *a19, int a20,char a21,void *a22,void *a23,void *a24,void *a25,int a26,char a27,void *a28,void *a29,void *a30,void *a31,int a32,char a33,void *a34,void *a35,void *a36,void *a37)
{
  if (a17)
  {
  }
  if (!a22) {

  }
  if (a21)
  {
  }
  if (!a28) {

  }
  if (a27)
  {
  }
  if (!a34) {

  }
  if (a33)
  {
  }
  if (!*(void *)(v45 - 192)) {

  }
  if (*(_DWORD *)(v45 - 196))
  {
  }
  if (!*(void *)(v45 - 152)) {

  }
  if (*(_DWORD *)(v45 - 156))
  {
  }
  if (!v44) {

  }
  if (*(_DWORD *)(v45 - 116))
  {
  }
  if (!v41) {

  }
  if (*(_DWORD *)(v45 - 92))
  {
  }
  if (!v38) {

  }
  _Unwind_Resume(a1);
}

void sub_1845822D8()
{
}

void sub_1845822E0()
{
  if (v0) {
    JUMPOUT(0x1845822C8);
  }
  JUMPOUT(0x1845822C0);
}

void sub_1845822EC()
{
}

void sub_184582368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184582450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845825B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845828A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184582B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184582DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184582E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184582F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184582F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184583118(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845831D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845834D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845835BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458362C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845836EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184583858(_Unwind_Exception *a1)
{
  CFIndex v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18458398C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184583F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845841D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, void *a14, int a15, char a16)
{
  if (a12)
  {
  }
  if (!v20) {

  }
  if (a16)
  {
  }
  if (!v17) {

  }
  _Unwind_Resume(a1);
}

void sub_184584338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845843A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184584448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184584580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845846B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458488C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184584B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184584C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184584D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184584DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184585024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845855E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  Lazuli::GroupChatInformation::~GroupChatInformation(&a9);

  _Unwind_Resume(a1);
}

void Lazuli::MessageText::~MessageText(Lazuli::MessageText *this)
{
  if (*((unsigned char *)this + 80))
  {
    unint64_t v2 = (void **)((char *)this + 56);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 48))
  {
    unint64_t v2 = (void **)((char *)this + 24);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void Lazuli::MessageGroupText::~MessageGroupText(Lazuli::MessageGroupText *this)
{
  if (*((unsigned char *)this + 368))
  {
    unint64_t v2 = (void **)((char *)this + 344);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)this);
}

void Lazuli::MessageGeoLocationPush::~MessageGeoLocationPush(Lazuli::MessageGeoLocationPush *this)
{
  if (*((unsigned char *)this + 104))
  {
    unint64_t v2 = (void **)((char *)this + 80);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 72))
  {
    unint64_t v2 = (void **)((char *)this + 48);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 40))
  {
    if (*((char *)this + 39) < 0) {
      operator delete(*((void **)this + 2));
    }
  }
}

void Lazuli::MessageGroupGeoLocationPush::~MessageGroupGeoLocationPush(Lazuli::MessageGroupGeoLocationPush *this)
{
  if (*((unsigned char *)this + 360))
  {
    unint64_t v2 = (void **)((char *)this + 336);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)this);
}

Lazuli::MessageFileTransferPush *Lazuli::MessageFileTransferPush::MessageFileTransferPush(Lazuli::MessageFileTransferPush *this, const Lazuli::MessageFileTransferPush *a2)
{
  CFIndex v4 = Lazuli::FileTransferDescriptor::FileTransferDescriptor((std::string *)this, (uint64_t)a2);
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100]((uint64_t)&v4[10].__r_.__value_.__l.__size_, (uint64_t)a2 + 248);
  std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 280), (uint64_t)a2 + 280);
  return this;
}

void sub_184585938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 272)) {
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  if (*(unsigned char *)(v10 + 240))
  {
    a10 = (void **)(v10 + 216);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  if (*(char *)(v10 + 191) < 0) {
    operator delete(*(void **)(v10 + 168));
  }
  if (*(char *)(v10 + 167) < 0) {
    operator delete(*(void **)(v10 + 144));
  }
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*(void **)(v10 + 120));
  }
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*(void **)(v10 + 96));
  }
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](v10);
  _Unwind_Resume(a1);
}

Lazuli::MessageGroupFileTransferPush *Lazuli::MessageGroupFileTransferPush::MessageGroupFileTransferPush(Lazuli::MessageGroupFileTransferPush *this, const Lazuli::MessageGroupFileTransferPush *a2)
{
  CFIndex v4 = Lazuli::GroupChatInformation::GroupChatInformation(this, a2);
  Lazuli::FileTransferDescriptor::FileTransferDescriptor((std::string *)((char *)v4 + 320), (uint64_t)a2 + 320);
  std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 568), (uint64_t)a2 + 568);
  return this;
}

void sub_184585A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 560))
  {
    a10 = (void **)(v10 + 536);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  Lazuli::MessageGroupFileTransferPush::MessageGroupFileTransferPush(v10, v11);
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)v10);
  _Unwind_Resume(a1);
}

Lazuli::MessageChatBotCard *Lazuli::MessageChatBotCard::MessageChatBotCard(Lazuli::MessageChatBotCard *this, const Lazuli::MessageChatBotCard *a2)
{
  uint64_t v4 = Lazuli::ChatBotCard::ChatBotCard((uint64_t)this, a2);
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100](v4 + 328, (uint64_t)a2 + 328);
  return this;
}

void sub_184585AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 320))
  {
    a10 = (void **)(v10 + 296);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  Lazuli::MessageChatBotCard::MessageChatBotCard(v10, v10 + 48);
  _Unwind_Resume(a1);
}

Lazuli::MessageChatBotCardCarousel *Lazuli::MessageChatBotCardCarousel::MessageChatBotCardCarousel(Lazuli::MessageChatBotCardCarousel *this, const Lazuli::MessageChatBotCardCarousel *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(_OWORD *)this = v4;
  std::__optional_copy_base<Lazuli::MessageChatBotCardStyle,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 1, (long long *)((char *)a2 + 24));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<Lazuli::ChatBotCardContent>::__init_with_size[abi:nn180100]<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>((std::string *)((char *)this + 56), *((void *)a2 + 7), *((void *)a2 + 8), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100]((uint64_t)this + 80, (uint64_t)a2 + 80);
  return this;
}

void sub_184585B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Lazuli::ChatBotCardContent>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  if (*(unsigned char *)(v2 + 48))
  {
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*v3);
    }
  }
  _Unwind_Resume(a1);
}

void Lazuli::MessageChatBotCardCarousel::~MessageChatBotCardCarousel(Lazuli::MessageChatBotCardCarousel *this)
{
  if (*((unsigned char *)this + 104))
  {
    uint64_t v2 = (void **)((char *)this + 80);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  uint64_t v2 = (void **)((char *)this + 56);
  std::vector<Lazuli::ChatBotCardContent>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((unsigned char *)this + 48))
  {
    if (*((char *)this + 47) < 0) {
      operator delete(*((void **)this + 3));
    }
  }
}

void sub_184585D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184585DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184585E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184585E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184585F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184585FDC(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184586070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458617C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458620C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845862E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845863A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845864A8(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184586550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458672C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845867E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845868B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458699C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184586DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184586EF0(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184586FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458718C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845874D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, int a14, char a15, void *a16, void *a17, void *a18, void *a19, int a20,char a21,void *a22)
{
  if (a15)
  {
  }
  if (!a17) {

  }
  if (a21)
  {
  }
  if (!v25) {

  }
  _Unwind_Resume(a1);
}

void sub_184587684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184587718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184587810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184587A00(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184587BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<Lazuli::ChatBotSuggestedChipList,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false> const&>((void *)a1, a2);
  return a1;
}

void sub_184587CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<Lazuli::ChatBotSuggestedChipList,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *CFComparisonResult result = 0;
    result[1] = 0;
    result[2] = 0;
    CFComparisonResult result = std::vector<Lazuli::ChatBotSuggestedChip>::__init_with_size[abi:nn180100]<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(result, *(void *)a2, *(void *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<Lazuli::ChatBotSuggestedChip>::__init_with_size[abi:nn180100]<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<Lazuli::ChatBotMenuL2Content>::__vallocate[abi:nn180100](result, a4);
    return (void *)std::vector<Lazuli::ChatBotSuggestedChip>::__construct_at_end<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(v6, a2, a3);
  }
  return result;
}

uint64_t std::vector<Lazuli::ChatBotSuggestedChip>::__construct_at_end<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(v4 + v7) = *(_DWORD *)(a2 + v7);
      CFComparisonResult result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(v4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

void sub_184587E38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::ChatBotSuggestedChip>::__clear[abi:nn180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<Lazuli::ChatBotSuggestedChip>::__clear[abi:nn180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      uint64_t v4 = *(unsigned int *)(v3 - 8);
      if (v4 != -1) {
        CFComparisonResult result = (void *)((uint64_t (*)(char *, uint64_t))*(&off_1ECFD4690 + v4))(&v5, v3 - 224);
      }
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 232;
    }
    while (v3 != v2);
  }
  v1[1] = v2;
  return result;
}

std::string *std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<Lazuli::CustomMetaData,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::CustomMetaData,false> const&>(a1, a2);
  return a1;
}

void sub_184587F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<Lazuli::CustomMetaData,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::CustomMetaData,false> const&>(std::string *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    CFComparisonResult result = std::vector<Lazuli::CustomMetaDataWrapper>::__init_with_size[abi:nn180100]<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(result, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<Lazuli::CustomMetaDataWrapper>::__init_with_size[abi:nn180100]<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Lazuli::CustomMetaDataWrapper>::__vallocate[abi:nn180100](result, a4);
    return std::vector<Lazuli::CustomMetaDataWrapper>::__construct_at_end<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::CustomMetaDataWrapper>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    abort();
  }
  CFComparisonResult result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::CustomMetaDataWrapper>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::vector<Lazuli::CustomMetaDataWrapper>::__construct_at_end<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(std::string *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      CFComparisonResult result = std::construct_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,Lazuli::CustomMetaDataWrapper&,Lazuli::CustomMetaDataWrapper*>((std::string *)(size + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    size += v7;
  }
  v3->__r_.__value_.__l.__size_ = size;
  return result;
}

void sub_1845880E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::CustomMetaDataWrapper>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a2);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,Lazuli::CustomMetaDataWrapper&,Lazuli::CustomMetaDataWrapper*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  char v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1845881B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,0>(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

Lazuli::GroupChatInformation *Lazuli::GroupChatInformation::GroupChatInformation(Lazuli::GroupChatInformation *this, const Lazuli::GroupChatInformation *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)this, *(long long **)a2, *((long long **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<Lazuli::GroupChatParticipant>::__init_with_size[abi:nn180100]<Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>((void *)this + 3, *((void *)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 5);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 3);
    *((void *)this + 8) = *((void *)a2 + 8);
    *((_OWORD *)this + 3) = v4;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 11) = *((void *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v5;
  }
  std::__optional_copy_base<Lazuli::GroupChatUri,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 4, (uint64_t)a2 + 96);
  std::__optional_copy_base<Lazuli::GroupChatSubject,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 176), (long long *)a2 + 11);
  std::__optional_copy_base<Lazuli::GroupChatIcon,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 208), (uint64_t)a2 + 208);
  long long v6 = (std::string *)((char *)this + 288);
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 18);
    *((void *)this + 38) = *((void *)a2 + 38);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 78);
  return this;
}

void sub_1845883FC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100](v6);
  if (*(unsigned char *)(v1 + 200) && *(char *)(v1 + 199) < 0) {
    operator delete(*v5);
  }
  std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100](v4);
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  Lazuli::GroupChatParticipantList::~GroupChatParticipantList((void **)v1);
  _Unwind_Resume(a1);
}

void sub_184588480(uint64_t a1, ...)
{
  va_start(va, a1);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  JUMPOUT(0x184588478);
}

void Lazuli::GroupChatParticipantList::~GroupChatParticipantList(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<Lazuli::GroupChatParticipant>::__destroy_vector::operator()[abi:nn180100](&v2);
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
}

std::string *std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    CFComparisonResult result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_184588534(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  CFComparisonResult result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(int a1, long long *a2, long long *a3, std::string *this)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        this->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

void *std::vector<Lazuli::GroupChatParticipant>::__init_with_size[abi:nn180100]<Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Lazuli::GroupChatParticipant>::__vallocate[abi:nn180100](result, a4);
    CFComparisonResult result = (void *)std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<Lazuli::GroupChatParticipant>,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1845886A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Lazuli::GroupChatParticipant>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    abort();
  }
  CFComparisonResult result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSEnumerationValue>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<Lazuli::GroupChatParticipant>,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      xpc_object_t v8 = (long long *)(a2 + v7);
      xpc_object_t v9 = (std::string *)(a4 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        v9->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      *(_DWORD *)(a4 + v7 + 24) = *(_DWORD *)(a2 + v7 + 24);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

std::string *std::__optional_copy_base<Lazuli::GroupChatUri,false>::__optional_copy_base[abi:nn180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[0] = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    std::construct_at[abi:nn180100]<Lazuli::GroupChatUri,Lazuli::GroupChatUri const&,Lazuli::GroupChatUri*>(this, (long long *)a2);
    this[3].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_184588860(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::GroupChatUri,Lazuli::GroupChatUri const&,Lazuli::GroupChatUri*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_184588928(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

std::string *std::__optional_copy_base<Lazuli::GroupChatSubject,false>::__optional_copy_base[abi:nn180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1845889E8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::GroupChatIcon,false>::__optional_copy_base[abi:nn180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[0] = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    std::construct_at[abi:nn180100]<Lazuli::GroupChatIcon,Lazuli::GroupChatIcon const&,Lazuli::GroupChatIcon*>(this, (long long *)a2);
    this[3].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_184588A48(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::GroupChatIcon,Lazuli::GroupChatIcon const&,Lazuli::GroupChatIcon*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  long long v5 = (unsigned char *)*((void *)a2 + 4);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    std::vector<char>::__vallocate[abi:nn180100](this[1].__r_.__value_.__r.__words, v5 - v6);
    std::string::size_type size = (void *)this[1].__r_.__value_.__l.__size_;
    memmove(size, v6, v7);
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)size + v7;
  }
  xpc_object_t v9 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v10 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_184588B28(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::vector<Lazuli::GroupChatParticipant>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::GroupChatParticipant>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Lazuli::GroupChatParticipant>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void Lazuli::GroupChatInformation::~GroupChatInformation(void **this)
{
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(this + 26));
  if (*((unsigned char *)this + 200) && *((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(this + 12));
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = this + 3;
  std::vector<Lazuli::GroupChatParticipant>::__destroy_vector::operator()[abi:nn180100](&v2);
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
}

std::string *Lazuli::FileTransferDescriptor::FileTransferDescriptor(std::string *a1, uint64_t a2)
{
  long long v4 = std::__optional_copy_base<Lazuli::FileThumbnailInformation,false>::__optional_copy_base[abi:nn180100](a1, a2);
  Lazuli::FileDispositionInformation::FileDispositionInformation((uint64_t)(v4 + 88), a2 + 88);
  std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100](a1 + 9, a2 + 216);
  return a1;
}

void sub_184588D50(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *a9)
{
  if (*(char *)(v9 + 191) < 0) {
    operator delete(*(void **)(v9 + 168));
  }
  Lazuli::FileTransferDescriptor::FileTransferDescriptor(v9, a1, a2, (uint64_t)&a9);
  uint64_t v12 = a9;
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](v9);
  _Unwind_Resume(v12);
}

unsigned char *std::__optional_copy_base<Lazuli::FileThumbnailInformation,false>::__optional_copy_base[abi:nn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    std::construct_at[abi:nn180100]<Lazuli::FileThumbnailInformation,Lazuli::FileThumbnailInformation const&,Lazuli::FileThumbnailInformation*>((uint64_t)a1, a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_184588DDC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<Lazuli::FileThumbnailInformation,Lazuli::FileThumbnailInformation const&,Lazuli::FileThumbnailInformation*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_184588EB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

uint64_t Lazuli::FileDispositionInformation::FileDispositionInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  long long v7 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  return a1;
}

void sub_184589050(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Lazuli::MessageFileTransferPush::~MessageFileTransferPush(Lazuli::MessageFileTransferPush *this)
{
  if (*((unsigned char *)this + 304))
  {
    uint64_t v2 = (void **)((char *)this + 280);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 272))
  {
    uint64_t v2 = (void **)((char *)this + 248);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 240))
  {
    uint64_t v2 = (void **)((char *)this + 216);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this);
}

void Lazuli::MessageGroupFileTransferPush::~MessageGroupFileTransferPush(Lazuli::MessageGroupFileTransferPush *this)
{
  if (*((unsigned char *)this + 592))
  {
    uint64_t v2 = (void **)((char *)this + 568);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 560))
  {
    uint64_t v2 = (void **)((char *)this + 536);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  if (*((char *)this + 463) < 0) {
    operator delete(*((void **)this + 55));
  }
  if (*((char *)this + 439) < 0) {
    operator delete(*((void **)this + 52));
  }
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 320);
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)this);
}

uint64_t Lazuli::ChatBotCard::ChatBotCard(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  std::__optional_copy_base<Lazuli::MessageChatBotCardStyle,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 16), a2 + 1);
  std::__optional_copy_base<Lazuli::ChatBotCardMedia,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 48), (uint64_t)(a2 + 3));
  std::__optional_copy_base<Lazuli::ChatBotCardTitle,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 232), (_OWORD *)((char *)a2 + 232));
  std::__optional_copy_base<Lazuli::ChatBotCardDescription,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 264), (_OWORD *)((char *)a2 + 264));
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100](a1 + 296, (uint64_t)a2 + 296);
  return a1;
}

void sub_184589284(_Unwind_Exception *a1)
{
  if (v2[288] && v2[287] < 0) {
    operator delete(*v5);
  }
  if (v2[256] && v2[255] < 0) {
    operator delete(*v4);
  }
  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](v3);
  if (v2[40])
  {
    if (v2[39] < 0) {
      operator delete(*v1);
    }
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<Lazuli::MessageChatBotCardStyle,false>::__optional_copy_base[abi:nn180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_184589328(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::ChatBotCardMedia,false>::__optional_copy_base[abi:nn180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[7].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    Lazuli::ChatBotCardMedia::ChatBotCardMedia(this, (long long *)a2);
    this[7].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_184589388(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *Lazuli::ChatBotCardMedia::ChatBotCardMedia(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 56), (long long *)((char *)a2 + 56));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 88), (long long *)((char *)a2 + 88));
  long long v6 = *(long long *)((char *)a2 + 120);
  LODWORD(this[5].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 34);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 6, a2 + 9);
  return this;
}

void sub_184589470(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(unsigned char *)(a1 + 168) && *(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

std::string *std::__optional_copy_base<Lazuli::ChatBotCardTitle,false>::__optional_copy_base[abi:nn180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1845895A8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::ChatBotCardDescription,false>::__optional_copy_base[abi:nn180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1845895F4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Lazuli::MessageChatBotCard::~MessageChatBotCard(Lazuli::MessageChatBotCard *this)
{
  if (*((unsigned char *)this + 352))
  {
    uint64_t v2 = (void **)((char *)this + 328);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 320))
  {
    uint64_t v2 = (void **)((char *)this + 296);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((unsigned char *)this + 288) && *((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  if (*((unsigned char *)this + 256) && *((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 48);
  if (*((unsigned char *)this + 40))
  {
    if (*((char *)this + 39) < 0) {
      operator delete(*((void **)this + 2));
    }
  }
}

std::string *std::vector<Lazuli::ChatBotCardContent>::__init_with_size[abi:nn180100]<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<Lazuli::ChatBotCardContent>::__vallocate[abi:nn180100](result, a4);
    return std::vector<Lazuli::ChatBotCardContent>::__construct_at_end<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::ChatBotCardContent>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    abort();
  }
  CFComparisonResult result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotCardContent>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

std::string *std::vector<Lazuli::ChatBotCardContent>::__construct_at_end<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>(std::string *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      CFComparisonResult result = std::construct_at[abi:nn180100]<Lazuli::ChatBotCardContent,Lazuli::ChatBotCardContent&,Lazuli::ChatBotCardContent*>((std::string *)(size + v7), a2 + v7);
      v7 += 280;
    }
    while (a2 + v7 != a3);
    size += v7;
  }
  v3->__r_.__value_.__l.__size_ = size;
  return result;
}

void sub_1845897E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotCardContent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(280 * a2);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::ChatBotCardContent,Lazuli::ChatBotCardContent&,Lazuli::ChatBotCardContent*>(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::__optional_copy_base<Lazuli::ChatBotCardMedia,false>::__optional_copy_base[abi:nn180100](a1, a2);
  std::__optional_copy_base<Lazuli::ChatBotCardTitle,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)v4 + 184), (long long *)(a2 + 184));
  std::__optional_copy_base<Lazuli::ChatBotCardDescription,false>::__optional_copy_base[abi:nn180100](a1 + 9, (long long *)(a2 + 216));
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_184589898(_Unwind_Exception *a1)
{
  if (v1[240] && v1[239] < 0) {
    operator delete(*v3);
  }
  if (v1[208])
  {
    if (v1[207] < 0) {
      operator delete(*v2);
    }
  }
  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

void std::vector<Lazuli::ChatBotCardContent>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::__destroy_at[abi:nn180100]<Lazuli::ChatBotCardContent,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:nn180100]<Lazuli::ChatBotCardContent,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 272))
  {
    uint64_t v3 = (void **)(a1 + 248);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  if (*(unsigned char *)(a1 + 240) && *(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(unsigned char *)(a1 + 208) && *(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  return std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](a1);
}

void sub_184589AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184589B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184589C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184589D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184589EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184589F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458A040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458A138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458A264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458A2F4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18458A38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458A44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458A52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458A5BC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18458A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458A714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458A86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458A9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458AC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTCATargetVisibilityLevelAsString(unint64_t a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E5266B08[a1];
  }
}

void sub_18458ADDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458AE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458AF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTCATransmissionPayloadTypeAsString(unint64_t a1)
{
  if (a1 > 7) {
    return "???";
  }
  else {
    return off_1E5266B28[a1];
  }
}

void sub_18458B0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458B230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458B378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458B500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTCAConnectionStatusAsString(unint64_t a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E5266B68[a1];
  }
}

const char *CTCAConnectionSyncStatusAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5266B88[a1];
  }
}

const char *CTCAConnectionRegistrationStatusAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5266BA0[a1];
  }
}

const char *CTCAConnectionCongestionStatusAsString(unint64_t a1)
{
  if (a1 > 4) {
    return "???";
  }
  else {
    return off_1E5266BB8[a1];
  }
}

void sub_18458B824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458B940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458BA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458BBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458BDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458BEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458C004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458C18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458C320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458C3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458C4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458C5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTCAStewieEmergencyRequestReasonAsString(unint64_t a1)
{
  if (a1 > 5) {
    return "???";
  }
  else {
    return off_1E5266BE0[a1];
  }
}

void sub_18458C794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458C860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458C948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458CA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458CBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458CCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458CDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458CEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458D060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458D104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458D1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458D344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTCAStewieExitReasonAsString(unint64_t a1)
{
  if (a1 > 0xD) {
    return "???";
  }
  else {
    return off_1E5266C10[a1];
  }
}

void sub_18458D4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458D560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458D64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458D764(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18458D87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458D8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458D94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458D9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTCAInternetInterfaceAsString(unint64_t a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5266C80[a1];
  }
}

void sub_18458DD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458E0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458E460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458E8D8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

const char *CTCALocationAcquisitionStatusAsString(uint64_t a1)
{
  uint64_t v1 = "???";
  if (a1 == 1) {
    uint64_t v1 = "CTCALocationAcquisitionStatusInProgress";
  }
  if (a1) {
    return v1;
  }
  else {
    return "CTCALocationAcquisitionStatusUnknown";
  }
}

void sub_18458EC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458EC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458ECE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458ED78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458EE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458EF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458F09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458F1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458F340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458F40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458F4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458F61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458F7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458F8A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458F9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18458FB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18458FCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18458FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18458FEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184590004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_184590218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1845903B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18459057C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184590774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_184590830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ctConvertGsmBandToInteger(int a1)
{
  if (a1 > 31)
  {
    if (a1 == 256) {
      int v3 = 9;
    }
    else {
      int v3 = 0;
    }
    if (a1 == 128) {
      unsigned int v4 = 8;
    }
    else {
      unsigned int v4 = v3;
    }
    if (a1 == 64) {
      int v5 = 7;
    }
    else {
      int v5 = 0;
    }
    if (a1 == 32) {
      unsigned int v6 = 6;
    }
    else {
      unsigned int v6 = v5;
    }
    if (a1 <= 127) {
      return v6;
    }
    else {
      return v4;
    }
  }
  else
  {
    int v1 = a1 - 1;
    uint64_t result = 0;
    switch(v1)
    {
      case 0:
        uint64_t result = 1;
        break;
      case 1:
        uint64_t result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        uint64_t result = 3;
        break;
      case 7:
        uint64_t result = 4;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertUmtsBandToInteger(int a1)
{
  if (a1 > 63)
  {
    if (a1 == 1024) {
      int v3 = 11;
    }
    else {
      int v3 = 0;
    }
    if (a1 == 512) {
      int v4 = 10;
    }
    else {
      int v4 = v3;
    }
    if (a1 == 256) {
      unsigned int v5 = 9;
    }
    else {
      unsigned int v5 = v4;
    }
    if (a1 == 128) {
      int v6 = 8;
    }
    else {
      int v6 = 0;
    }
    if (a1 == 64) {
      unsigned int v7 = 7;
    }
    else {
      unsigned int v7 = v6;
    }
    if (a1 <= 255) {
      return v7;
    }
    else {
      return v5;
    }
  }
  else
  {
    int v1 = a1 - 1;
    uint64_t result = 0;
    switch(v1)
    {
      case 0:
        uint64_t result = 1;
        break;
      case 1:
        uint64_t result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        uint64_t result = 3;
        break;
      case 7:
        uint64_t result = 4;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertTdsBandToInteger(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      uint64_t result = 1;
      break;
    case 1:
      uint64_t result = 2;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      return result;
    case 3:
      uint64_t result = 3;
      break;
    case 7:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ctConvertCdmaBandToInteger(int a1)
{
  if (a1 > 1023)
  {
    if (a1 == 0x80000) {
      int v3 = 20;
    }
    else {
      int v3 = 0;
    }
    if (a1 == 0x40000) {
      int v4 = 19;
    }
    else {
      int v4 = v3;
    }
    if (a1 == 0x20000) {
      unsigned int v5 = 18;
    }
    else {
      unsigned int v5 = v4;
    }
    if (a1 == 0x10000) {
      int v6 = 17;
    }
    else {
      int v6 = 0;
    }
    if (a1 == 0x8000) {
      int v7 = 16;
    }
    else {
      int v7 = v6;
    }
    if (a1 < 0x20000) {
      unsigned int v5 = v7;
    }
    if (a1 == 0x4000) {
      int v8 = 15;
    }
    else {
      int v8 = 0;
    }
    if (a1 == 0x2000) {
      int v9 = 14;
    }
    else {
      int v9 = v8;
    }
    if (a1 == 4096) {
      unsigned int v10 = 13;
    }
    else {
      unsigned int v10 = v9;
    }
    if (a1 == 2048) {
      int v11 = 12;
    }
    else {
      int v11 = 0;
    }
    if (a1 == 1024) {
      int v12 = 11;
    }
    else {
      int v12 = v11;
    }
    if (a1 <= 4095) {
      unsigned int v10 = v12;
    }
    if (a1 < 0x8000) {
      return v10;
    }
    else {
      return v5;
    }
  }
  else if (a1 > 31)
  {
    if (a1 == 512) {
      int v13 = 10;
    }
    else {
      int v13 = 0;
    }
    if (a1 == 256) {
      int v14 = 9;
    }
    else {
      int v14 = v13;
    }
    if (a1 == 128) {
      unsigned int v15 = 8;
    }
    else {
      unsigned int v15 = v14;
    }
    if (a1 == 64) {
      int v16 = 7;
    }
    else {
      int v16 = 0;
    }
    if (a1 == 32) {
      unsigned int v17 = 6;
    }
    else {
      unsigned int v17 = v16;
    }
    if (a1 <= 127) {
      return v17;
    }
    else {
      return v15;
    }
  }
  else
  {
    int v1 = a1 - 1;
    uint64_t result = 0;
    switch(v1)
    {
      case 0:
        uint64_t result = 1;
        break;
      case 1:
        uint64_t result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        uint64_t result = 3;
        break;
      case 7:
        uint64_t result = 4;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertLteBandToInteger(uint64_t a1)
{
  if (a1 >= 0x200000)
  {
    if (a1 > 0x7FFFFFFF)
    {
      if (a1 > 0xFFFFFFFFFLL)
      {
        uint64_t v1 = 0x7FFFFFFFFFLL;
        if (a1 == 0x20000000000) {
          int v2 = 71;
        }
        else {
          int v2 = 0;
        }
        if (a1 == 0x10000000000) {
          int v3 = 66;
        }
        else {
          int v3 = v2;
        }
        if (a1 == 0x8000000000) {
          unsigned int v4 = 48;
        }
        else {
          unsigned int v4 = v3;
        }
        uint64_t v5 = 0x1000000000;
        int v6 = 42;
        if (a1 == 0x4000000000) {
          int v7 = 46;
        }
        else {
          int v7 = 0;
        }
        if (a1 == 0x2000000000) {
          int v8 = 43;
        }
        else {
          int v8 = v7;
        }
LABEL_134:
        if (a1 == v5) {
          unsigned int v39 = v6;
        }
        else {
          unsigned int v39 = v8;
        }
        if (a1 <= v1) {
          return v39;
        }
        else {
          return v4;
        }
      }
      uint64_t v1 = 0x1FFFFFFFFLL;
      if (a1 == 0x800000000) {
        int v34 = 41;
      }
      else {
        int v34 = 0;
      }
      if (a1 == 0x400000000) {
        int v35 = 40;
      }
      else {
        int v35 = v34;
      }
      if (a1 == 0x200000000) {
        unsigned int v4 = 39;
      }
      else {
        unsigned int v4 = v35;
      }
      uint64_t v5 = 0x80000000;
      int v6 = 37;
      BOOL v36 = a1 == 0x100000000;
      int v8 = 38;
LABEL_132:
      if (!v36) {
        int v8 = 0;
      }
      goto LABEL_134;
    }
    if (a1 > 0x3FFFFFF)
    {
      uint64_t v1 = 0xFFFFFFFLL;
      if (a1 == 0x40000000) {
        int v37 = 36;
      }
      else {
        int v37 = 0;
      }
      if (a1 == 0x20000000) {
        int v38 = 35;
      }
      else {
        int v38 = v37;
      }
      if (a1 == 0x10000000) {
        unsigned int v4 = 34;
      }
      else {
        unsigned int v4 = v38;
      }
      uint64_t v5 = 0x4000000;
      int v6 = 30;
      BOOL v36 = a1 == 0x8000000;
      int v8 = 33;
      goto LABEL_132;
    }
    if (a1 == 0x2000000) {
      int v20 = 29;
    }
    else {
      int v20 = 0;
    }
    if (a1 == 0x1000000) {
      int v21 = 28;
    }
    else {
      int v21 = v20;
    }
    if (a1 == 0x800000) {
      unsigned int v22 = 27;
    }
    else {
      unsigned int v22 = v21;
    }
    if (a1 == 0x400000) {
      int v23 = 26;
    }
    else {
      int v23 = 0;
    }
    if (a1 == 0x200000) {
      unsigned int v24 = 25;
    }
    else {
      unsigned int v24 = v23;
    }
    BOOL v25 = a1 < 0x800000;
LABEL_109:
    if (v25) {
      return v24;
    }
    else {
      return v22;
    }
  }
  if (a1 > 2047)
  {
    if (a1 == 0x100000) {
      int v26 = 24;
    }
    else {
      int v26 = 0;
    }
    if (a1 == 0x80000) {
      int v27 = 21;
    }
    else {
      int v27 = v26;
    }
    if (a1 == 0x40000) {
      unsigned int v22 = 20;
    }
    else {
      unsigned int v22 = v27;
    }
    if (a1 == 0x20000) {
      int v28 = 19;
    }
    else {
      int v28 = 0;
    }
    if (a1 == 0x10000) {
      int v29 = 18;
    }
    else {
      int v29 = v28;
    }
    if (a1 < 0x40000) {
      unsigned int v22 = v29;
    }
    if (a1 == 0x8000) {
      int v30 = 17;
    }
    else {
      int v30 = 0;
    }
    if (a1 == 0x4000) {
      int v31 = 14;
    }
    else {
      int v31 = v30;
    }
    if (a1 == 0x2000) {
      unsigned int v24 = 13;
    }
    else {
      unsigned int v24 = v31;
    }
    if (a1 == 4096) {
      int v32 = 12;
    }
    else {
      int v32 = 0;
    }
    if (a1 == 2048) {
      int v33 = 11;
    }
    else {
      int v33 = v32;
    }
    if (a1 < 0x2000) {
      unsigned int v24 = v33;
    }
    BOOL v25 = a1 < 0x10000;
    goto LABEL_109;
  }
  if (a1 == 1024) {
    int v9 = 10;
  }
  else {
    int v9 = 0;
  }
  if (a1 == 512) {
    int v10 = 9;
  }
  else {
    int v10 = v9;
  }
  if (a1 == 256) {
    unsigned int v11 = 8;
  }
  else {
    unsigned int v11 = v10;
  }
  if (a1 == 128) {
    int v12 = 7;
  }
  else {
    int v12 = 0;
  }
  if (a1 == 64) {
    int v13 = 6;
  }
  else {
    int v13 = v12;
  }
  if (a1 <= 255) {
    unsigned int v11 = v13;
  }
  if (a1 == 32) {
    int v14 = 5;
  }
  else {
    int v14 = 0;
  }
  if (a1 == 16) {
    int v15 = 4;
  }
  else {
    int v15 = v14;
  }
  if (a1 == 8) {
    unsigned int v16 = 3;
  }
  else {
    unsigned int v16 = v15;
  }
  if (a1 == 4) {
    int v17 = 2;
  }
  else {
    int v17 = 0;
  }
  if (a1 == 2) {
    int v18 = 1;
  }
  else {
    int v18 = v17;
  }
  if (a1 <= 7) {
    unsigned int v16 = v18;
  }
  if (a1 <= 63) {
    return v16;
  }
  else {
    return v11;
  }
}

uint64_t ctConvertNR5GBandToInteger(uint64_t a1)
{
  if (a1 >= 0x800000)
  {
    if (a1 <= 0x3FFFFFFFFLL)
    {
      if (a1 <= 0xFFFFFFF)
      {
        uint64_t v3 = 0x1FFFFFFLL;
        if (a1 == 0x8000000) {
          int v36 = 71;
        }
        else {
          int v36 = 0;
        }
        if (a1 == 0x4000000) {
          int v37 = 70;
        }
        else {
          int v37 = v36;
        }
        if (a1 == 0x2000000) {
          unsigned int v6 = 66;
        }
        else {
          unsigned int v6 = v37;
        }
        if (a1 == 0x1000000) {
          int v38 = 65;
        }
        else {
          int v38 = 0;
        }
        if (a1 == 0x800000) {
          unsigned int v35 = 53;
        }
        else {
          unsigned int v35 = v38;
        }
LABEL_123:
        if (a1 <= v3) {
          return v35;
        }
        else {
          return v6;
        }
      }
      uint64_t v3 = 0x7FFFFFFFLL;
      if (a1 == 0x200000000) {
        int v24 = 79;
      }
      else {
        int v24 = 0;
      }
      if (a1 == 0x100000000) {
        int v25 = 78;
      }
      else {
        int v25 = v24;
      }
      if (a1 == 0x80000000) {
        unsigned int v6 = 77;
      }
      else {
        unsigned int v6 = v25;
      }
      uint64_t v7 = 0x10000000;
      int v8 = 74;
      uint64_t v9 = 0x20000000;
      int v10 = 75;
      BOOL v11 = a1 == 0x40000000;
      int v12 = 76;
    }
    else if (a1 > 0xFFFFFFFFFFLL)
    {
      uint64_t v3 = 0x7FFFFFFFFFFLL;
      if (a1 == 0x200000000000) {
        int v32 = 261;
      }
      else {
        int v32 = 0;
      }
      if (a1 == 0x100000000000) {
        int v33 = 260;
      }
      else {
        int v33 = v32;
      }
      if (a1 == 0x80000000000) {
        unsigned int v6 = 259;
      }
      else {
        unsigned int v6 = v33;
      }
      uint64_t v7 = 0x10000000000;
      int v8 = 86;
      uint64_t v9 = 0x20000000000;
      int v10 = 257;
      BOOL v11 = a1 == 0x40000000000;
      int v12 = 258;
    }
    else
    {
      uint64_t v3 = 0x1FFFFFFFFFLL;
      if (a1 == 0x8000000000) {
        int v4 = 85;
      }
      else {
        int v4 = 0;
      }
      if (a1 == 0x4000000000) {
        int v5 = 84;
      }
      else {
        int v5 = v4;
      }
      if (a1 == 0x2000000000) {
        unsigned int v6 = 83;
      }
      else {
        unsigned int v6 = v5;
      }
      uint64_t v7 = 0x400000000;
      int v8 = 80;
      uint64_t v9 = 0x800000000;
      int v10 = 81;
      BOOL v11 = a1 == 0x1000000000;
      int v12 = 82;
    }
    if (!v11) {
      int v12 = 0;
    }
    if (a1 == v9) {
      unsigned int v34 = v10;
    }
    else {
      unsigned int v34 = v12;
    }
    if (a1 == v7) {
      unsigned int v35 = v8;
    }
    else {
      unsigned int v35 = v34;
    }
    goto LABEL_123;
  }
  if (a1 > 4095)
  {
    if (a1 == 0x400000) {
      int v13 = 51;
    }
    else {
      int v13 = 0;
    }
    if (a1 == 0x200000) {
      int v14 = 50;
    }
    else {
      int v14 = v13;
    }
    if (a1 == 0x100000) {
      unsigned int v15 = 48;
    }
    else {
      unsigned int v15 = v14;
    }
    if (a1 == 0x80000) {
      int v16 = 41;
    }
    else {
      int v16 = 0;
    }
    if (a1 == 0x40000) {
      int v17 = 40;
    }
    else {
      int v17 = v16;
    }
    if (a1 == 0x20000) {
      int v18 = 39;
    }
    else {
      int v18 = v17;
    }
    if (a1 < 0x100000) {
      unsigned int v15 = v18;
    }
    if (a1 == 0x10000) {
      int v19 = 38;
    }
    else {
      int v19 = 0;
    }
    if (a1 == 0x8000) {
      int v20 = 34;
    }
    else {
      int v20 = v19;
    }
    if (a1 == 0x4000) {
      unsigned int v21 = 30;
    }
    else {
      unsigned int v21 = v20;
    }
    if (a1 == 0x2000) {
      int v22 = 28;
    }
    else {
      int v22 = 0;
    }
    if (a1 == 4096) {
      int v23 = 26;
    }
    else {
      int v23 = v22;
    }
    if (a1 < 0x4000) {
      unsigned int v21 = v23;
    }
    if (a1 < 0x20000) {
      return v21;
    }
    else {
      return v15;
    }
  }
  else if (a1 > 63)
  {
    if (a1 == 2048) {
      int v26 = 25;
    }
    else {
      int v26 = 0;
    }
    if (a1 == 1024) {
      int v27 = 20;
    }
    else {
      int v27 = v26;
    }
    if (a1 == 512) {
      unsigned int v28 = 18;
    }
    else {
      unsigned int v28 = v27;
    }
    if (a1 == 256) {
      int v29 = 14;
    }
    else {
      int v29 = 0;
    }
    if (a1 == 128) {
      int v30 = 13;
    }
    else {
      int v30 = v29;
    }
    if (a1 == 64) {
      unsigned int v31 = 12;
    }
    else {
      unsigned int v31 = v30;
    }
    if (a1 <= 511) {
      return v31;
    }
    else {
      return v28;
    }
  }
  else
  {
    uint64_t v1 = a1 - 1;
    uint64_t result = 0;
    switch(v1)
    {
      case 0:
        uint64_t result = 1;
        break;
      case 1:
        uint64_t result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        uint64_t result = 3;
        break;
      case 7:
        uint64_t result = 5;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertGsmBandToMask(int a1)
{
  if ((a1 - 1) > 8) {
    return 0;
  }
  else {
    return qword_1845DD0E0[(__int16)(a1 - 1)];
  }
}

uint64_t ctConvertUmtsBandToMask(int a1)
{
  if ((a1 - 1) > 0xA) {
    return 0;
  }
  else {
    return qword_1845DD128[(__int16)(a1 - 1)];
  }
}

uint64_t ctConvertTdsBandToMask(int a1)
{
  if ((a1 - 1) > 5) {
    return 0;
  }
  else {
    return qword_1845DD180[(__int16)(a1 - 1)];
  }
}

uint64_t ctConvertCdmaBandToMask(int a1)
{
  if ((a1 - 1) > 0x13) {
    return 0;
  }
  else {
    return qword_1845DD1B0[(__int16)(a1 - 1)];
  }
}

uint64_t ctConvertLteBandToMask(int a1)
{
  if ((a1 - 1) > 0x46) {
    return 0;
  }
  else {
    return qword_1845DD250[(__int16)(a1 - 1)];
  }
}

uint64_t ctConvertNrBandToMask(uint64_t result)
{
  uint64_t result = result;
  switch((int)result)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
    case 6:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 52:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 67:
    case 68:
    case 69:
    case 72:
    case 73:
LABEL_5:
      uint64_t result = 0;
      break;
    case 5:
      uint64_t result = 8;
      break;
    case 7:
      uint64_t result = 16;
      break;
    case 8:
      uint64_t result = 32;
      break;
    case 12:
      uint64_t result = 64;
      break;
    case 13:
      uint64_t result = 128;
      break;
    case 14:
      uint64_t result = 256;
      break;
    case 18:
      uint64_t result = 512;
      break;
    case 20:
      uint64_t result = 1024;
      break;
    case 25:
      uint64_t result = 2048;
      break;
    case 26:
      uint64_t result = 4096;
      break;
    case 28:
      uint64_t result = 0x2000;
      break;
    case 30:
      uint64_t result = 0x4000;
      break;
    case 34:
      uint64_t result = 0x8000;
      break;
    case 38:
      uint64_t result = 0x10000;
      break;
    case 39:
      uint64_t result = 0x20000;
      break;
    case 40:
      uint64_t result = 0x40000;
      break;
    case 41:
      uint64_t result = 0x80000;
      break;
    case 48:
      uint64_t result = 0x100000;
      break;
    case 50:
      uint64_t result = 0x200000;
      break;
    case 51:
      uint64_t result = 0x400000;
      break;
    case 53:
      uint64_t result = 0x800000;
      break;
    case 65:
      uint64_t result = 0x1000000;
      break;
    case 66:
      uint64_t result = 0x2000000;
      break;
    case 70:
      uint64_t result = 0x4000000;
      break;
    case 71:
      uint64_t result = 0x8000000;
      break;
    case 74:
      uint64_t result = 0x10000000;
      break;
    case 75:
      uint64_t result = 0x20000000;
      break;
    case 76:
      uint64_t result = 0x40000000;
      break;
    case 77:
      uint64_t result = 0x80000000;
      break;
    case 78:
      uint64_t result = 0x100000000;
      break;
    case 79:
      uint64_t result = 0x200000000;
      break;
    case 80:
      uint64_t result = 0x400000000;
      break;
    case 81:
      uint64_t result = 0x800000000;
      break;
    case 82:
      uint64_t result = 0x1000000000;
      break;
    case 83:
      uint64_t result = 0x2000000000;
      break;
    case 84:
      uint64_t result = 0x4000000000;
      break;
    case 85:
      uint64_t result = 0x8000000000;
      break;
    case 86:
      uint64_t result = 0x10000000000;
      break;
    default:
      switch((int)result)
      {
        case 257:
          uint64_t result = 0x20000000000;
          break;
        case 258:
          uint64_t result = 0x40000000000;
          break;
        case 259:
          uint64_t result = 0x80000000000;
          break;
        case 260:
          uint64_t result = 0x100000000000;
          break;
        case 261:
          uint64_t result = 0x200000000000;
          break;
        default:
          goto LABEL_5;
      }
      break;
  }
  return result;
}

uint64_t MMSMessage::prepareForEncoding(MMSMessage *this)
{
  if (((*((void *)this + 10) - *((void *)this + 9)) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v2 = MMSHeaderContainer::contentTypeHeader(this);
    if (!v2)
    {
      std::string __p = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v4 = *((void *)this + 9);
      if (((*((void *)this + 10) - v4) & 0x7FFFFFFF8) != 0)
      {
        unint64_t v5 = 0;
        do
        {
          unsigned int v6 = *(MMSHeaderContainer **)(v4 + 8 * v5);
          uint64_t v2 = MMSHeaderContainer::contentTypeHeader(v6);
          if (v2)
          {
            uint64_t v7 = *(MMSContentType **)(v2 + 24);
            if (MMSContentType::compare(v7, "application", "smil")
              || (uint64_t v2 = MMSContentType::compare(v7, "application", "smil+xml"), v2))
            {
              uint64_t v9 = (MMSContentType *)MMSHeaderContainer::headerValueAsString(v6, "Content-ID");
              uint64_t v10 = MMSContentType::multipartRelatedContentType(v9);
              BOOL v11 = (MMSHeaderContainer *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) + 8);
              MMSHeaderContainer::addHeader(v11, "type", "application/smil", 0);
              operator new();
            }
          }
          ++v5;
          uint64_t v4 = *((void *)this + 9);
        }
        while (v5 < ((unint64_t)(*((void *)this + 10) - v4) >> 3));
      }
      uint64_t v8 = MMSContentType::multipartMixedContentType((MMSContentType *)v2);
      (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
      operator new();
    }
  }
  return 1;
}

uint64_t MMSMessage::partCount(MMSMessage *this)
{
  return (*((void *)this + 10) - *((void *)this + 9)) >> 3;
}

uint64_t MMSMessage::part(MMSMessage *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (((unint64_t)(*((void *)this + 10) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * a2);
  }
}

void MMSMessage::initEncodingMap(MMSMessage *this)
{
}

void MMSMessage::MMSMessage(MMSMessage *this)
{
  MMSHeaderContainer::MMSHeaderContainer(this);
  void *v1 = &unk_1ECFD2F70;
  v1[10] = 0;
  v1[11] = 0;
  v1[9] = 0;
}

BOOL MMSMessage::addPart(void *a1, MMSHeaderContainer *this)
{
  uint64_t v4 = MMSHeaderContainer::contentTypeHeader(this);
  if (v4)
  {
    unint64_t v5 = a1[11];
    unsigned int v6 = (void *)a1[10];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = a1[9];
      uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v5 - v8;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>((uint64_t)(a1 + 11), v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      unsigned int v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = this;
      uint64_t v7 = v14 + 8;
      int v17 = (char *)a1[9];
      int v16 = (char *)a1[10];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        int v16 = (char *)a1[9];
      }
      a1[9] = v14;
      a1[10] = v7;
      a1[11] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *unsigned int v6 = this;
      uint64_t v7 = v6 + 1;
    }
    a1[10] = v7;
  }
  return v4 != 0;
}

void MMSMessage::~MMSMessage(MMSMessage *this)
{
  *(void *)this = &unk_1ECFD2F70;
  uint64_t v4 = (char *)this + 72;
  uint64_t v2 = (void *)*((void *)this + 9);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (v3)
    {
LABEL_7:
      *((void *)this + 10) = v2;
      operator delete(v2);
    }
  }
  else
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = *((void *)v2 + v5);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v2 = (void *)*((void *)this + 9);
        uint64_t v3 = (void *)*((void *)this + 10);
      }
      unint64_t v5 = v6++;
    }
    while (v5 < ((unsigned char *)v3 - (unsigned char *)v2) >> 3);
    if (v2) {
      goto LABEL_7;
    }
  }

  MMSHeaderContainer::~MMSHeaderContainer(this);
}

{
  uint64_t vars8;

  MMSMessage::~MMSMessage(this);

  JUMPOUT(0x18531F680);
}

uint64_t MMSMessage::encodingMap(MMSMessage *this)
{
  uint64_t result = MMSMessage::_encodingMap;
  if (!MMSMessage::_encodingMap) {
    MMSMessage::initEncodingMap(0);
  }
  return result;
}

uint64_t MMSMessage::setTo(MMSMessage *this, const char *a2, char a3)
{
  return 1;
}

uint64_t MMSMessage::setFrom(MMSMessage *this, const char *a2)
{
  return 1;
}

uint64_t MMSMessage::setSubject(MMSMessage *this, const char *a2)
{
  return 1;
}

uint64_t MMSMessage::prettyMessage@<X0>(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)int v20 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"-----------------------------\n", 30);
  MMSHeaderContainer::prettyHeaders(this, a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2) {
      goto LABEL_22;
    }
  }
  else if (a2)
  {
    goto LABEL_22;
  }
  std::string::pointer data = this[3].__r_.__value_.__l.__data_;
  if (((this[3].__r_.__value_.__l.__size_ - (void)data) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = *(std::string **)&data[8 * v11];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"Part ", 5);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" bytes):\n", 9);
      MMSMimePart::prettyMMSMimePart(v12, a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v15 = &__p;
      }
      else {
        unsigned int v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v15, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v11;
      std::string::pointer data = this[3].__r_.__value_.__l.__data_;
    }
    while (v11 < ((this[3].__r_.__value_.__l.__size_ - (unint64_t)data) >> 3));
  }
LABEL_22:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"-----------------------------", 29);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v19 + 8, a4);
  *(void *)&v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(*(void *)&v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v19[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18531F630](v23);
}

uint64_t MMSMessage::prettyContentBody@<X0>(MMSMessage *this@<X0>, void *a2@<X8>)
{
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)unint64_t v12 = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v11);
  uint64_t v4 = *((void *)this + 9);
  if (((*((void *)this + 10) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      MMSMimePart::prettyContentBody(*(MMSMimePart **)(v4 + 8 * v5), __p);
      if ((v10 & 0x80u) == 0) {
        unsigned int v6 = __p;
      }
      else {
        unsigned int v6 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v7 = v10;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
      if ((char)v10 < 0) {
        operator delete(__p[0]);
      }
      ++v5;
      uint64_t v4 = *((void *)this + 9);
    }
    while (v5 < ((unint64_t)(*((void *)this + 10) - v4) >> 3));
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v11 + 8, a2);
  *(void *)&v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v11[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18531F630](v15);
}

BOOL MMSMessage::isEmpty(MMSMessage *this)
{
  if (((*((void *)this + 10) - *((void *)this + 9)) & 0x7FFFFFFF8) == 0) {
    return 1;
  }
  uint64_t v2 = (MMSContentType *)MMSHeaderContainer::contentType(this);
  return (!v2 || !MMSContentType::isMultipart(v2)) && *(_DWORD *)(**((void **)this + 9) + 96) == 0;
}

uint64_t MMSMessage::requiresContentType(MMSMessage *this)
{
  uint64_t result = MMSHeaderContainer::headerWithName(this, "X-Mms-Message-Type");
  if (result) {
    return *(unsigned __int8 *)(result + 17) == 128;
  }
  return result;
}

uint64_t _CTServerConnectionSetAudioPath(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetAudioPath", &object, "kRequest", &v14);
  xpc_release(object);
  xpc_object_t v6 = v14;
  xpc_object_t object = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioDownPath", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioUpPath", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetSourceGain(uint64_t a1, int a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetSourceGain", &object, "kRequest", &v14);
  xpc_release(object);
  xpc_object_t v6 = v14;
  xpc_object_t object = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioVolume", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioSource", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetChannelMute(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetChannelMute", &object, "kRequest", &v14);
  xpc_release(object);
  xpc_object_t v6 = v14;
  xpc_object_t object = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioMuteChannel", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioMuteState", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetI2SFormat(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetI2SFormat", &object, "kRequest", &v14);
  xpc_release(object);
  xpc_object_t v6 = v14;
  xpc_object_t object = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioI2SInterface", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioChannelFormat", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionEnablePCMChannel(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioEnablePCMChannel", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kAudioPcmDirection", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionDisablePCMChannel(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioDisablePCMChannel", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionSetMixState(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetMixState", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kAudioPcmMixState", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEnableMediaToDownlink(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioEnableMediaToDownlink", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kAudioBoolean", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEchoCancelationAndNoiseReduction(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioEnableEchoCancelationNoiseReduction", &object, "kRequest", &v14);
  xpc_release(object);
  xpc_object_t v6 = v14;
  xpc_object_t object = v14;
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v14);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioEnableEchoCancelation", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kAudioEnableNoiseReduction", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetTTYMode(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetTTYMode", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kAudioBoolean", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetTTYMode(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kAudioGetTTYMode", object, "kRequest", &v8);
    xpc_release(object[0]);
    xpc_object_t v9 = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
    {
      object[0] = &v8;
      object[1] = "kAudioBoolean";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyAudioVocoderInfo(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kAudioQueryAudioVocoderInfo", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      uint64_t v7 = 0;
      xpc_dictionary_get_value(xdict, "kAudioVocoderInfo");
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
      *a2 = v7;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionAudioSampleRateSwitchDidComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kAudioSampleRateSwitchDidComplete", &object, "kRequest", &v9);
    xpc_release(object);
    xpc_object_t v4 = v9;
    xpc_object_t object = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    xpc_object_t v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kAudioVocoderInfo", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v7);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionSetVoiceMute(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetVoiceMute", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kAudioMuteState", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetVoiceMute(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kAudioGetVoiceMute", object, "kRequest", &v8);
    xpc_release(object[0]);
    xpc_object_t v9 = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
    {
      object[0] = &v8;
      object[1] = "kAudioMuteState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionSetMasterMute(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetMasterMute", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kAudioMuteState", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionStartAudioTone(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioStartAudioTone", &object, "kRequest", &v18);
  xpc_release(object);
  xpc_object_t v8 = v18;
  xpc_object_t object = v18;
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v18);
  xpc_object_t v9 = xpc_int64_create(a2);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAudioTone", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(a3);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAudioToneCount", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(a4);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAudioToneMix", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  uint64_t v16 = SendXpcMessage(a1, &object, 0, v15);
  xpc_release(object);
  return v16;
}

uint64_t _CTServerConnectionStopAudioTone(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioStopAudioTone", &object, "kRequest", &v5);
  xpc_release(object);
  xpc_object_t object = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  uint64_t v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionSetVibratorState(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetVibratorState", &object, "kRequest", &v22);
  xpc_release(object);
  xpc_object_t v10 = v22;
  xpc_object_t object = v22;
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v22);
  xpc_object_t v11 = xpc_int64_create(a2);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kAudioAction", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(a3);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kAudioIntensity", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(a4);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kAudioTotalTime", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(a5);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "kAudioOnTime", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  uint64_t v20 = SendXpcMessage(a1, &object, 0, v19);
  xpc_release(object);
  return v20;
}

uint64_t _CTServerConnectionSetAudioLoggingEnabled(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSetAudioLoggingEnabled", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kAudioLoggingEnabled", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetAudioLoggingEnabled(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetAudioLoggingEnabled", object, "kRequest", &v8);
    xpc_release(object[0]);
    xpc_object_t v9 = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
    {
      object[0] = &v8;
      object[1] = "kAudioLoggingEnabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t encode_CTLazuliGroupChatParticipantRoleType(_DWORD *a1)
{
  if (*a1) {
    uint64_t v1 = -1;
  }
  else {
    uint64_t v1 = 0;
  }
  if (*a1 == 1) {
    return 1;
  }
  else {
    return v1;
  }
}

const char *print_CTLazuliGroupChatParticipantRoleType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266D48[v1];
  }
}

uint64_t encode_CTLazuliMessageType(unsigned int *a1)
{
  if (*a1 >= 9) {
    return -1;
  }
  else {
    return *a1;
  }
}

const char *print_CTLazuliMessageType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 9) {
    return "???";
  }
  else {
    return off_1E5266D60[v1];
  }
}

uint64_t encode_CTLazuliErrorType(unsigned int *a1)
{
  if (*a1 >= 0xA) {
    return -1;
  }
  else {
    return *a1;
  }
}

const char *print_CTLazuliErrorType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 0xA) {
    return "???";
  }
  else {
    return off_1E5266DB0[v1];
  }
}

uint64_t encode_CTLazuliMessageDispositionNotificationType(unsigned int *a1)
{
  if (*a1 >= 5) {
    return -1;
  }
  else {
    return *a1;
  }
}

const char *print_CTLazuliMessageDispositionNotificationType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 5) {
    return "???";
  }
  else {
    return off_1E5266E08[v1];
  }
}

uint64_t encode_CTLazuliChatBotCardMediaHeightType(unsigned int *a1)
{
  if (*a1 >= 3) {
    return -1;
  }
  else {
    return *a1;
  }
}

const char *print_CTLazuliChatBotCardMediaHeightType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1E5266E38[v1];
  }
}

const char *print_CTLazuliChatBotCardContentOrientationType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266E58[v1];
  }
}

const char *print_CTLazuliChatBotCardContentImageAlignmentType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266E70[v1];
  }
}

const char *print_CTLazuliChatBotCardCarouselWidthType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266E88[v1];
  }
}

const char *print_CTLazuliChatBotAddressUriType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266EA0[v1];
  }
}

const char *print_CTLazuliChatBotAddressLabelType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266EB8[v1];
  }
}

uint64_t encode_CTLazuliChatBotMediaLabelType(_DWORD *a1)
{
  if (*a1) {
    return -1;
  }
  else {
    return 0;
  }
}

const char *print_CTLazuliChatBotMediaLabelType(void *a1)
{
  unint64_t v1 = "???";
  if (!*a1) {
    unint64_t v1 = "Icon";
  }
  if (*a1 == -1) {
    return "Invalid";
  }
  else {
    return v1;
  }
}

const char *print_CTLazuliChatBotMediaContentType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266ED0[v1];
  }
}

const char *print_CTLazuliChatBotOrgNameType(void *a1)
{
  unint64_t v1 = "???";
  if (!*a1) {
    unint64_t v1 = "OfficialName";
  }
  if (*a1 == -1) {
    return "Invalid";
  }
  else {
    return v1;
  }
}

uint64_t encode_CTLazuliSpamReportType(unsigned int *a1)
{
  if (*a1 >= 4) {
    return -1;
  }
  else {
    return *a1;
  }
}

const char *print_CTLazuliSpamReportType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 4) {
    return "???";
  }
  else {
    return off_1E5266EE8[v1];
  }
}

const char *print_CTLazuliDeviceActionType(void *a1)
{
  unint64_t v1 = "???";
  if (!*a1) {
    unint64_t v1 = "SendDeviceSpecifics";
  }
  if (*a1 == -1) {
    return "Invalid";
  }
  else {
    return v1;
  }
}

const char *print_CTLazuliSettingsActionType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266F10[v1];
  }
}

const char *print_CTLazuliSuggestedChipType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5266F28[v1];
  }
}

const char *print_CTLazuliViewModeType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1E5266F40[v1];
  }
}

uint64_t encode_CTLazuliSuggestedActionType(unsigned int *a1)
{
  if (*a1 >= 0xD) {
    return -1;
  }
  else {
    return *a1;
  }
}

const char *print_CTLazuliSuggestedActionType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 0xD) {
    return "???";
  }
  else {
    return off_1E5266F60[v1];
  }
}

const char *print_CTLazuliToggleStateType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1E5266FD0[v1];
  }
}

const char *print_CTLazuliRegistrationStateType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1E5266FF0[v1];
  }
}

const char *print_CTLazuliToggleSwitchPreferenceType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5267010[v1];
  }
}

const char *print_CTLazuliDisplayNotificationType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5267028[v1];
  }
}

const char *print_CTLazuliChatBotRenderInformationCacheType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1E5267040[v1];
  }
}

const char *print_CTLazuliMenuL1ContentType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5267060[v1];
  }
}

const char *print_CTLazuliMenuL0ContentType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5267078[v1];
  }
}

const char *print_CTLazuliFileDispositionType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5267090[v1];
  }
}

const char *print_CTLazuliDiscoveryCapabilitiesType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1E52670A8[v1];
  }
}

const char *print_CTLazuliCurrentSimCellularDataRequirementType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E52670C8[v1];
  }
}

const char *print_CTLazuliMessageRevokationStatusType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E52670E0[v1];
  }
}

const char *print_CTLazuliCapabilitiesDiscoveryOptionsType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1E52670F8[v1];
  }
}

const char *print_CTLazuliCapabilitiesAvailibilityStatusType(void *a1)
{
  unint64_t v1 = *a1 + 1;
  if (v1 > 2) {
    return "???";
  }
  else {
    return off_1E5267118[v1];
  }
}

uint64_t _CTServerConnectionSetMaxTransmitPower(uint64_t a1, int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    xpc_object_t v5 = v4;
    xpc_object_t object = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5) {
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    xpc_object_t v7 = v5;
    goto LABEL_9;
  }
LABEL_7:
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t object = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = xpc_string_create("kRadioModuleMaxTransmitPower");
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kRequest", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(a2);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kRadioModuleMaxTransmitPower", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  uint64_t v6 = SendXpcMessage(a1, &object, 0, v12);
  xpc_release(object);
  return v6;
}

unint64_t _CTServerConnectionGetResetState(uint64_t a1, unsigned char *a2)
{
  if (hasBaseband())
  {
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("GetResetState");
    return 0x1300000001;
  }
}

unint64_t _CTServerConnectionCopyFirmwareVersion(const void *a1, CFStringRef *a2)
{
  if (hasBaseband())
  {
    uint64_t v4 = 0x1600000001;
    if (a1 && a2)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", &object, "kRequest", v15);
      xpc_release(object);
      xpc_object_t v5 = v15[0];
      xpc_object_t v21 = v15[0];
      v15[0] = xpc_null_create();
      xpc_release(v15[0]);
      xpc_object_t v6 = xpc_string_create("");
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, "kRadioModuleFirmwareVersion", v6);
      xpc_object_t v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      xpc_object_t v20 = xpc_null_create();
      unint64_t v8 = SendXpcMessage((uint64_t)a1, &v21, &v20);
      unsigned int v9 = v8;
      unint64_t v10 = HIDWORD(v8);
      *a2 = 0;
      if (MEMORY[0x1853203E0](v20) == MEMORY[0x1E4F14590])
      {
        xpc_object_t object = &v20;
        xpc_object_t v18 = "kRadioModuleValid";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v15);
        int v11 = xpc::dyn_cast_or_default((xpc *)v15, 0);
        xpc_release(v15[0]);
        if (v11)
        {
          xpc_object_t object = 0;
          xpc_object_t v18 = 0;
          uint64_t v19 = 0;
          v15[0] = &v20;
          v15[1] = "kRadioModuleFirmwareVersion";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
          xpc::dyn_cast_or_default();
          xpc_release(v16);
          CFAllocatorRef v12 = CFGetAllocator(a1);
          if (v19 >= 0) {
            p_xpc_object_t object = (const char *)&object;
          }
          else {
            p_xpc_object_t object = (const char *)object;
          }
          *a2 = CFStringCreateWithCString(v12, p_object, 0x8000100u);
          if (SHIBYTE(v19) < 0) {
            operator delete(object);
          }
        }
        else
        {
          unsigned int v9 = 1;
          LODWORD(v10) = 45;
        }
      }
      xpc_release(v20);
      xpc_release(v21);
      return v9 | ((unint64_t)v10 << 32);
    }
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareVersion");
    return 0x1300000001;
  }
  return v4;
}

uint64_t _CTServerConnectionCopyFirmwareNonce(const void *a1, CFDataRef *a2)
{
  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareNonce");
    uint64_t v13 = 0x1300000000;
LABEL_10:
    uint64_t v14 = 1;
    return v14 | v13;
  }
  unsigned int v4 = 1;
  uint64_t v5 = 22;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v6 = xdict;
    xpc_object_t v19 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t v7 = xpc_data_create(0, 0);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kRadioModuleFirmwareNonce", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t xdict = xpc_null_create();
    unint64_t v9 = SendXpcMessage((uint64_t)a1, &v19, &xdict);
    unsigned int v4 = v9;
    uint64_t v5 = HIDWORD(v9);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      object[0] = &xdict;
      object[1] = "kRadioModuleValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v17);
      int v10 = xpc::dyn_cast_or_default((xpc *)&v17, 0);
      xpc_release(v17);
      if (v10)
      {
        object[0] = 0;
        std::string::pointer data = (const UInt8 *)xpc_dictionary_get_data(xdict, "kRadioModuleFirmwareNonce", (size_t *)object);
        CFAllocatorRef v12 = CFGetAllocator(a1);
        *a2 = CFDataCreate(v12, data, (CFIndex)object[0]);
      }
      else
      {
        unsigned int v4 = 1;
        uint64_t v5 = 45;
      }
    }
    xpc_release(xdict);
    xpc_release(v19);
  }
  uint64_t v13 = 0xC00000000;
  if (v5) {
    uint64_t v13 = v5 << 32;
  }
  uint64_t v14 = 1;
  if (v5) {
    uint64_t v14 = 2;
  }
  if (a2 && !(((v5 << 32) | (unint64_t)v4) >> 32))
  {
    if (*a2)
    {
      if (CFDataGetLength(*a2))
      {
        uint64_t v13 = 0;
        uint64_t v14 = (v5 << 32) | v4;
        return v14 | v13;
      }
      CFRelease(*a2);
      *a2 = 0;
      uint64_t v13 = 0x2300000000;
    }
    else
    {
      uint64_t v13 = 0xC00000000;
    }
    goto LABEL_10;
  }
  return v14 | v13;
}

unint64_t _CTServerConnectionCopyFirmwareSecurityInfo(uint64_t a1, xpc_object_t *a2)
{
  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareSecurityInfo");
    unint64_t v6 = 0x1300000000;
LABEL_11:
    uint64_t v5 = 1;
    return v5 | v6;
  }
  uint64_t v5 = RadioModuleProperty;
  if (HIDWORD(RadioModuleProperty))
  {
    unint64_t v6 = RadioModuleProperty & 0xFFFFFFFF00000000;
    uint64_t v5 = 2;
    return v5 | v6;
  }
  if (!a2 || !*a2)
  {
    unint64_t v6 = 0xC00000000;
    goto LABEL_11;
  }
  if (!CFDictionaryGetCount((CFDictionaryRef)*a2))
  {
    CFRelease(*a2);
    *a2 = 0;
    unint64_t v6 = 0x2300000000;
    goto LABEL_11;
  }
  unint64_t v6 = 0;
  return v5 | v6;
}

unint64_t anonymous namespace'::GetRadioModuleProperty(uint64_t a1, const char *a2, xpc_object_t *a3)
{
  unsigned int v3 = 1;
  LODWORD(v4) = 22;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v17 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t object = &v17;
    uint64_t v14 = a2;
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_object_t xdict = xpc_null_create();
    unint64_t v8 = SendXpcMessage(a1, &v17, &xdict);
    unsigned int v3 = v8;
    unint64_t v4 = HIDWORD(v8);
    *a3 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590])
    {
      xpc_object_t object = &xdict;
      uint64_t v14 = "kRadioModuleValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v12);
      int v9 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
      if (v9)
      {
        xpc_object_t object = 0;
        xpc_dictionary_get_value(xdict, a2);
        xpc_object_t v12 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v12);
        xpc_object_t v10 = object;
        *a3 = object;
        if (!v10)
        {
          LODWORD(v4) = 96;
          unsigned int v3 = 1;
        }
      }
      else
      {
        unsigned int v3 = 1;
        LODWORD(v4) = 45;
      }
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v3 | ((unint64_t)v4 << 32);
}

unint64_t _CTServerConnectionCopyFirmwarePreflightInfo(uint64_t a1, xpc_object_t *a2)
{
  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwarePreflightInfo");
    unsigned int v6 = 1;
    LODWORD(v5) = 19;
    return v6 | ((unint64_t)v5 << 32);
  }
  unint64_t v5 = HIDWORD(RadioModuleProperty);
  if (HIDWORD(RadioModuleProperty))
  {
    if (!a2)
    {
      unsigned int v6 = 2;
      return v6 | ((unint64_t)v5 << 32);
    }
    if (*a2) {
      CFRelease(*a2);
    }
    unsigned int v6 = 2;
LABEL_20:
    *a2 = 0;
    return v6 | ((unint64_t)v5 << 32);
  }
  if (!a2)
  {
    unsigned int v6 = 1;
    LODWORD(v5) = 12;
    return v6 | ((unint64_t)v5 << 32);
  }
  unsigned int v6 = RadioModuleProperty;
  if (!*a2)
  {
    unsigned int v6 = 1;
    LODWORD(v5) = 12;
    goto LABEL_20;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)*a2);
  xpc_object_t v8 = *a2;
  if (!Count)
  {
    CFRelease(v8);
    unsigned int v6 = 1;
    LODWORD(v5) = 35;
    goto LABEL_20;
  }
  if (v8)
  {
    int v9 = CTLogRadioModule();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_18444A000, v9, OS_LOG_TYPE_DEFAULT, "Preflight info", (uint8_t *)v12, 2u);
    }
    CFDictionaryRef v10 = (const __CFDictionary *)*a2;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    void v12[2] = ___ZN3ctu2cf8for_eachINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKvEEvPK14__CFDictionaryU13block_pointerFvRKT_RKT0_E_block_invoke;
    _OWORD v12[3] = &unk_1E52671D8;
    v12[4] = &__block_literal_global_13;
    context = v12;
    CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)ctu::cf::DictApplyFunction, &context);
  }
  LODWORD(v5) = 0;
  return v6 | ((unint64_t)v5 << 32);
}

unint64_t _CTServerConnectionCopyFirmwareManifestStatus(uint64_t a1, xpc_object_t *a2)
{
  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareManifestStatus");
    unint64_t v6 = 0x1300000000;
LABEL_11:
    uint64_t v5 = 1;
    return v5 | v6;
  }
  uint64_t v5 = RadioModuleProperty;
  if (HIDWORD(RadioModuleProperty))
  {
    unint64_t v6 = RadioModuleProperty & 0xFFFFFFFF00000000;
    uint64_t v5 = 2;
    return v5 | v6;
  }
  if (!a2 || !*a2)
  {
    unint64_t v6 = 0xC00000000;
    goto LABEL_11;
  }
  if (!CFDictionaryGetCount((CFDictionaryRef)*a2))
  {
    CFRelease(*a2);
    *a2 = 0;
    unint64_t v6 = 0x2300000000;
    goto LABEL_11;
  }
  unint64_t v6 = 0;
  return v5 | v6;
}

unint64_t _CTServerConnectionCopyFirmwareManifestData(uint64_t a1, xpc_object_t *a2)
{
  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareManifestData");
    unint64_t v6 = 0x1300000000;
LABEL_11:
    uint64_t v5 = 1;
    return v5 | v6;
  }
  uint64_t v5 = RadioModuleProperty;
  if (HIDWORD(RadioModuleProperty))
  {
    unint64_t v6 = RadioModuleProperty & 0xFFFFFFFF00000000;
    uint64_t v5 = 2;
    return v5 | v6;
  }
  if (!a2 || !*a2)
  {
    unint64_t v6 = 0xC00000000;
    goto LABEL_11;
  }
  if (!CFDictionaryGetCount((CFDictionaryRef)*a2))
  {
    CFRelease(*a2);
    *a2 = 0;
    unint64_t v6 = 0x2300000000;
    goto LABEL_11;
  }
  unint64_t v6 = 0;
  return v5 | v6;
}

uint64_t _CTServerConnectionDumpBasebandState(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_object_t object = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t object = v3;
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    xpc_object_t v5 = v3;
    goto LABEL_9;
  }
LABEL_7:
  xpc_object_t v5 = xpc_null_create();
  xpc_object_t object = v5;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v6 = xpc_string_create("kRadioModuleDumpBasebandState");
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "kRequest", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v13 = 0;
  xpc_object_t v8 = xpc_string_create((const char *)__p);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "kRadioModuleReason", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = SendXpcMessage(a1, &object, 0, v10);
  xpc_release(object);
  return v4;
}

uint64_t _CTServerConnectionDumpMemory(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    xpc_object_t v6 = v5;
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    xpc_object_t v8 = v6;
    goto LABEL_9;
  }
LABEL_7:
  xpc_object_t v8 = xpc_null_create();
  xpc_object_t xdict = v8;
LABEL_9:
  xpc_release(v6);
  xpc_object_t v9 = xpc_string_create("kRadioModuleDumpMemory");
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kRequest", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  long long v20 = 0uLL;
  uint64_t v21 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v18 = 0;
  xpc_object_t v11 = xpc_string_create((const char *)__p);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kRadioModuleReason", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v13 = xpc_int64_create(a3);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kRadioModuleMemoryDumpThreshold", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  uint64_t v7 = SendXpcMessage(a1, &xdict, 0, v15);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionCopyTraceProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, BOOL *a5)
{
  if (hasBaseband())
  {
    uint64_t v10 = 0x1600000001;
    if (a1 && a2 && a3 && a4 && a5)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kRadioCopyTraceProperty", &object, "kRequest", &xdict);
      xpc_release(object);
      xpc_object_t v11 = xdict;
      xpc_object_t object = xdict;
      xpc_object_t xdict = xpc_null_create();
      xpc_release(xdict);
      xpc_object_t v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kRadioTraceProperty", v12);
      xpc_object_t v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      xpc_object_t v14 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kRadioTraceName", v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      xpc_object_t xdict = xpc_null_create();
      uint64_t v10 = SendXpcMessage(a1, &object, &xdict);
      *a4 = 0;
      *a5 = 0;
      if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
        && xpc_dictionary_get_value(xdict, "kRadioTracePropertyValue"))
      {
        uint64_t v19 = 0;
        xpc_dictionary_get_value(xdict, "kRadioTracePropertyValue");
        uint64_t v18 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v19, (CFTypeRef *)&v18);
        uint64_t v16 = v19;
        *a4 = v19;
        *a5 = v16 != 0;
      }
      xpc_release(xdict);
      xpc_release(object);
    }
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("CopyTraceProperty");
    return 0x1300000001;
  }
  return v10;
}

unint64_t _CTServerConnectionSetTraceProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0x1600000000;
  unsigned int v5 = 1;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioSetTraceProperty", object, "kRequest", &v19);
    xpc_release(object[0]);
    xpc_object_t v7 = v19;
    xpc_object_t v20 = v19;
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v19);
    xpc_object_t v8 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kRadioTraceName", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    uint64_t v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v10) {
      uint64_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kRadioTraceProperty", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xpc_object_t v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v7, "kRadioTracePropertyValue", v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    xpc_object_t v19 = xpc_null_create();
    uint64_t v14 = SendXpcMessage(a1, &v20, &v19);
    unint64_t v4 = 0x400000000;
    if (MEMORY[0x1853203E0](v19) == MEMORY[0x1E4F14590])
    {
      object[0] = &v19;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v18);
      int v15 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      xpc_release(v18);
      if (v15)
      {
        unint64_t v4 = v14 & 0xFFFFFFFF00000000;
        unsigned int v5 = v14;
      }
      else
      {
        unsigned int v5 = 2;
      }
    }
    else
    {
      unsigned int v5 = 2;
    }
    xpc_release(v19);
    xpc_release(v20);
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionCopyBasebandThumbprint(uint64_t a1, void *a2)
{
  *a2 = &stru_1ECFD6720;
  return 0x1300000001;
}

uint64_t _CTServerConnectionResetModem(uint64_t a1, const __CFString *a2)
{
  return _CTServerConnectionResetModemWithCrashLogs(a1, a2, 0);
}

uint64_t _CTServerConnectionResetModemWithCrashLogs(uint64_t a1, const __CFString *a2, BOOL a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2)
  {
    CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"AP-triggered: ");
    CFStringAppend(MutableCopy, a2);
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleResetModem", &object, "kRequest", &v15);
    xpc_release(object);
    xpc_object_t v8 = v15;
    xpc_object_t object = v15;
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v15);
    xpc_object_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kRadioModuleModemResetReason", v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xpc_object_t v11 = xpc_BOOL_create(a3);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, "kRadioModuleGetLogs", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    uint64_t v3 = SendXpcMessage(a1, &object, 0, v13);
    xpc_release(object);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  return v3;
}

uint64_t _CTServerConnectionDumpState(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRadioModuleSetProperty", object, "kRequest", &v7);
  xpc_release(object[0]);
  xpc_object_t v8 = v7;
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v7);
  object[0] = &v8;
  object[1] = "kRadioModuleDumpState";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v6);
  xpc_release(v6);
  xpc_object_t v6 = 0;
  uint64_t v3 = SendXpcMessage(a1, &v8, 0, v2);
  xpc_release(v8);
  return v3;
}

uint64_t _CTServerConnectionEnableRemoteDiagnostics(uint64_t a1)
{
  if (a1) {
    return 0;
  }
  else {
    return 0x1600000001;
  }
}

uint64_t _CTServerConnectionConfigMaxRadioPower(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioConfigRadioMaxPower", &object, "kRequest", &v9);
    xpc_release(object);
    xpc_object_t v4 = v9;
    xpc_object_t object = v9;
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v9);
    unsigned int v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      unsigned int v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kRadioPowerConfig", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v7);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionEnableHAC()
{
  return 0x1300000001;
}

uint64_t _CTServerConnectionGetHACState()
{
  return 0x1300000001;
}

uint64_t _CTServerConnectionSetCampOnlyMode(uint64_t a1)
{
  if (a1) {
    return 0x2E00000002;
  }
  else {
    return 0x1600000001;
  }
}

uint64_t _CTServerConnectionSendAwdQueriableMetric(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRadioModuleAwdSendTrigger", &object, "kRequest", &v18);
  xpc_release(object);
  xpc_object_t v8 = v18;
  xpc_object_t object = v18;
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v18);
  xpc_object_t v9 = xpc_int64_create(a2);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAwdComponentId", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(a3);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAwdSubmissionId", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(a4);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAwdTriggerId", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  uint64_t v16 = SendXpcMessage(a1, &object, 0, v15);
  xpc_release(object);
  return v16;
}

uint64_t _CTServerConnectionConfigAndCopyTxController(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioTxPowerControlCommand", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t v6 = xdict;
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    uint64_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7) {
      uint64_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kRadioTxPowerControlData", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kRadioTxPowerControlData"))
    {
      uint64_t v11 = 0;
      xpc_dictionary_get_value(xdict, "kRadioTxPowerControlData");
      uint64_t v10 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, (CFTypeRef *)&v10);
      *a3 = v11;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionGetVoiceLinkQualityMetric(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t result = 0x1600000001;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v11);
    xpc::dict_creator::operator()<char const*>("kRadioGetVoiceLQM", v7, "kRequest", &v10);
    xpc_release(v11);
    xpc_object_t v11 = v10;
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v10);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    void v9[2] = ___CTServerConnectionGetVoiceLinkQualityMetric_block_invoke;
    v9[3] = &unk_1E5267138;
    v9[4] = a3;
    int v8 = SendXpcMessageAsync(a1, &v11, a2, v9);
    xpc_release(v11);
    if (v8) {
      return 0;
    }
    else {
      return 0x500000002;
    }
  }
  return result;
}

uint64_t _CTServerConnectionGetEnhancedVoiceLinkQualityMetric(const void *a1, CFDataRef *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioGetEnhancedVoiceLQM", &object, "kRequest", &xdict);
    xpc_release(object);
    xpc_object_t object = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage((uint64_t)a1, &object, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kRadioEnhancedVoiceLQM"))
    {
      size_t length = 0;
      std::string::pointer data = (const UInt8 *)xpc_dictionary_get_data(xdict, "kRadioEnhancedVoiceLQM", &length);
      CFAllocatorRef v6 = CFGetAllocator(a1);
      *a2 = CFDataCreate(v6, data, length);
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyCellularTransmitState(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCTCopyCellularTransmitState", &object, "kRequest", &v8);
    xpc_release(object);
    xpc_object_t object = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v8);
    if (MEMORY[0x1853203E0](v8) == MEMORY[0x1E4F14590])
    {
      uint64_t v7 = 0;
      uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
      *a2 = v7;
    }
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionCleanBasebandLogs(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRadioModuleSetProperty", object, "kRequest", &v7);
  xpc_release(object[0]);
  xpc_object_t v8 = v7;
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v7);
  object[0] = &v8;
  object[1] = "kRadioModuleCleanBasebandLogs";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v6);
  xpc_release(v6);
  xpc_object_t v6 = 0;
  uint64_t v3 = SendXpcMessage(a1, &v8, 0, v2);
  xpc_release(v8);
  return v3;
}

uint64_t _CTServerConnectionGetRadioState(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetRadioState", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v9 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v9, &xdict);
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kRadioState"))
    {
      object[0] = &xdict;
      object[1] = "kRadioState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionSilenceAssertionCreate(void *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0x1600000000;
  uint64_t v5 = 1;
  if (!a1 || !a2 || !a3 || !a4) {
    return v4 & 0x1F00000000 | v5;
  }
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v10 = a1[3];
  if (*(char *)(v10 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v10 + 88), *(void *)(v10 + 96));
  }
  else {
    std::string v25 = *(std::string *)(v10 + 88);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = v25;
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v30, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string v30 = v28;
  }
  xpc_object_t v29 = 0;
  if (ctu::cf::convert_copy()) {
    xpc_object_t v11 = v29;
  }
  else {
    xpc_object_t v11 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  _CTServerConnectionAddIdentifierException(v11);
  if (v11) {
    CFRelease(v11);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  uint64_t v13 = a1[3];
  if (*(char *)(v13 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v13 + 88), *(void *)(v13 + 96));
  }
  else {
    std::string v24 = *(std::string *)(v13 + 88);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = v24;
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v30, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string v30 = v28;
  }
  xpc_object_t v29 = 0;
  if (ctu::cf::convert_copy()) {
    xpc_object_t v14 = v29;
  }
  else {
    xpc_object_t v14 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if (v15) {
      goto LABEL_45;
    }
LABEL_55:
    uint64_t v4 = 0x500000000;
    uint64_t v5 = 2;
    return v4 & 0x1F00000000 | v5;
  }
  if (!v15) {
    goto LABEL_55;
  }
LABEL_45:
  uint64_t v16 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v30);
  xpc::dict_creator::operator()<char const*>("kRadioCreateSilenceAssertion", v16, "kRequest", (xpc_object_t *)&v28.__r_.__value_.__l.__data_);
  xpc_release(v30.__r_.__value_.__l.__data_);
  xpc_object_t v17 = (void *)v28.__r_.__value_.__r.__words[0];
  xpc_object_t v29 = (xpc_object_t)v28.__r_.__value_.__r.__words[0];
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc_release(v28.__r_.__value_.__l.__data_);
  xpc_object_t v18 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v17, "kAssertionName", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  v23[2] = ___CTServerConnectionSilenceAssertionCreate_block_invoke;
  v23[3] = &unk_1E52671B0;
  v23[4] = a4;
  v23[5] = v15;
  v23[6] = a3;
  v23[7] = a2;
  if (SendXpcMessageAsync((uint64_t)v15, &v29, a3, v23))
  {
    xpc_object_t v20 = CTLogRadioModule();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      memset(&v30, 0, sizeof(v30));
      ctu::cf::assign();
      std::string v28 = v30;
      uint64_t v21 = &v28;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      LODWORD(v30.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl(&dword_18444A000, v20, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSilenceAssertionCreate() for name = %s", (uint8_t *)&v30, 0xCu);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    CFRelease(v15);
    uint64_t v4 = 0x500000000;
    uint64_t v5 = 2;
  }
  xpc_release(v29);
  return v4 & 0x1F00000000 | v5;
}

unint64_t _CTServerConnectionIsSilenceAssertionBarred(uint64_t a1, unsigned char *a2, uint64_t *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  LODWORD(v3) = 22;
  unsigned int v4 = 1;
  if (a2 && a1 && a3)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioIsSilenceAssertionBarred", (xpc_object_t *)&object, "kRequest", &xdict);
    xpc_release((xpc_object_t)object);
    xpc_object_t v18 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    unint64_t v8 = SendXpcMessage(a1, &v18, &xdict);
    unsigned int v4 = v8;
    uint64_t v3 = HIDWORD(v8);
    if (!v8)
    {
      if (xpc_dictionary_get_value(xdict, "error"))
      {
        xpc_object_t v9 = CTLogRadioModule();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(object) = 0;
          _os_log_impl(&dword_18444A000, v9, OS_LOG_TYPE_DEFAULT, "error key set in reply", (uint8_t *)&object, 2u);
        }
        unsigned int v4 = 1;
        LODWORD(v3) = 1;
        goto LABEL_14;
      }
      if (xpc_dictionary_get_value(xdict, "kPosixError"))
      {
        uint64_t v10 = CTLogRadioModule();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(object) = 0;
          _os_log_impl(&dword_18444A000, v10, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionIsSilenceAssertionBarred - Silence assertion query encountered failure", (uint8_t *)&object, 2u);
        }
        *(void *)&long long object = &xdict;
        *((void *)&object + 1) = "kPosixError";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        LODWORD(v3) = xpc::dyn_cast_or_default((xpc *)&v16, 0);
        xpc_release(v16);
      }
      else
      {
        if (!xpc_dictionary_get_value(xdict, "kRadioIsSilenceAssertionBarred"))
        {
          uint64_t v15 = CTLogRadioModule();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(object) = 0;
            _os_log_impl(&dword_18444A000, v15, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionIsSilenceAssertionBarred - Silence assertion is allowed", (uint8_t *)&object, 2u);
          }
          unsigned int v4 = 0;
          goto LABEL_14;
        }
        unsigned int v4 = 1;
        *a2 = 1;
        *(void *)&long long object = &xdict;
        *((void *)&object + 1) = "kBarringEndTime";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        xpc::dyn_cast_or_default((xpc *)&v16, v12, 0.0);
        *a3 = v13;
        xpc_release(v16);
        uint64_t v3 = CTLogRadioModule();
        if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v3) = 0;
          goto LABEL_14;
        }
        uint64_t v14 = *a3;
        LODWORD(object) = 134217984;
        *(void *)((char *)&object + 4) = v14;
        _os_log_impl(&dword_18444A000, v3, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionIsSilenceAssertionBarred() - Silence assertion barred until:  %f", (uint8_t *)&object, 0xCu);
        LODWORD(v3) = 0;
      }
      unsigned int v4 = 1;
    }
LABEL_14:
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v4 | ((unint64_t)v3 << 32);
}

uint64_t _CTServerConnectionConfigureLogging(uint64_t a1, ctu *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kConfigureLogging", &object, "kRequest", &v11);
    xpc_release(object);
    xpc_object_t v5 = v11;
    xpc_object_t object = v11;
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v11);
    ctu::cf_to_xpc((uint64_t *)&value, a2, v6);
    xpc_dictionary_set_value(v5, "kLoggingConfig", value);
    xpc_object_t v7 = value;
    xpc_object_t value = xpc_null_create();
    xpc_release(v7);
    xpc_release(value);
    xpc_object_t value = 0;
    uint64_t v2 = SendXpcMessage(a1, &object, 0, v8);
    xpc_release(object);
  }
  return v2;
}

void ___ZN3ctu2cf8for_eachINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKvEEvPK14__CFDictionaryU13block_pointerFvRKT_RKT0_E_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  ctu::cf::assign();
  uint64_t v7 = 0;
  *(_OWORD *)std::string __p = 0uLL;
  xpc_object_t v5 = *(void (**)(uint64_t, void **, long long *))(v4 + 16);
  *(void *)&long long v8 = a3;
  v5(v4, __p, &v8);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t ctu::cf::DictApplyFunction(ctu::cf *this, const void *a2, const void *a3, void *a4)
{
  return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
}

uint64_t _CTServerConnectionDeviceManagementUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kDeviceManagementUpdate", &object, "kRequest", &v8);
    xpc_release(object);
    xpc_object_t v4 = v8;
    xpc_object_t object = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kDeviceManagementStatus", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionLoadManagedCellularProfile(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kLoadManagedCellularProfile", &object, "kRequest", &v8);
    xpc_release(object);
    xpc_object_t v4 = v8;
    xpc_object_t object = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kManagedCellularProfileDict", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionUnloadManagedCellularProfile(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kUnloadManagedCellularProfile", &object, "kRequest", &v4);
  xpc_release(object);
  xpc_object_t object = v4;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  xpc_object_t v4 = xpc_null_create();
  uint64_t v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionGetManagedCellularProfile(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetManagedCellularProfile", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590]
      && xpc_dictionary_get_value(xdict, "kManagedCellularProfileDict"))
    {
      uint64_t v10 = 0;
      object[0] = &xdict;
      object[1] = "kManagedCellularProfileDict";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetUIConfiguredApns(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetUIConfiguredApns", &object, "kRequest", &v8);
    xpc_release(object);
    xpc_object_t v4 = v8;
    xpc_object_t object = v8;
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v8);
    xpc_object_t v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "kUIApnsDict", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionGetUIConfiguredApns(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetUIConfiguredApns", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kUIApnsDict"))
    {
      uint64_t v10 = 0;
      object[0] = &xdict;
      object[1] = "kUIApnsDict";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionResetUIConfiguredApns(uint64_t a1)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kResetUIConfiguredApns", &object, "kRequest", &v4);
  xpc_release(object);
  xpc_object_t object = v4;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  xpc_object_t v4 = xpc_null_create();
  uint64_t v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionGetAPNConfiguration(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetConfiguredApns", object, "kRequest", &xdict);
    xpc_release(object[0]);
    xpc_object_t v12 = xdict;
    xpc_object_t xdict = xpc_null_create();
    xpc_release(xdict);
    xpc_object_t xdict = xpc_null_create();
    uint64_t v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x1853203E0](xdict) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(xdict, "kApns"))
    {
      uint64_t v10 = 0;
      object[0] = &xdict;
      object[1] = "kApns";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((uint64_t *)&cf, (xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf) {
        CFRelease(cf);
      }
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetDisallowTelephonyFeature(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSetDisallowTelephonyFeature", object, "kRequest", __p);
    xpc_release(object[0]);
    xpc_object_t v6 = __p[0];
    xpc_object_t v16 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    object[0] = 0;
    object[1] = 0;
    uint64_t v18 = 0;
    ctu::cf::assign();
    *(_OWORD *)std::string __p = *(_OWORD *)object;
    uint64_t v15 = v18;
    if (v18 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)object[0];
    }
    xpc_object_t v8 = xpc_string_create((const char *)v7);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kTelephonyFeature", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v10 = xpc_int64_create(a3);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kDisallow", v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    uint64_t v3 = SendXpcMessage(a1, &v16, 0, v12);
    xpc_release(v16);
  }
  return v3;
}

uint64_t _CTServerConnectionGetDisallowTelephonyFeature(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 0x1600000001;
  if (a2 && a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetDisallowTelephonyFeature", object, "kRequest", __p);
    xpc_release(object[0]);
    xpc_object_t v6 = __p[0];
    xpc_object_t v14 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    object[0] = 0;
    object[1] = 0;
    uint64_t v16 = 0;
    ctu::cf::assign();
    *(_OWORD *)std::string __p = *(_OWORD *)object;
    uint64_t v13 = v16;
    if (v16 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)object[0];
    }
    xpc_object_t v8 = xpc_string_create((const char *)v7);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "kTelephonyFeature", v8);
    xpc_object_t v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = xpc_null_create();
    uint64_t v3 = SendXpcMessage(a1, &v14, __p);
    if (MEMORY[0x1853203E0](__p[0]) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(__p[0], "kDisallow"))
    {
      object[0] = __p;
      object[1] = "kDisallow";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    xpc_release(__p[0]);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSetDataPlanWebsheetVisibility(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0x1600000001;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCDPSetWebsheetVisibility", &object, "kRequest", &v10);
  xpc_release(object);
  xpc_object_t v4 = v10;
  xpc_object_t object = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v5 = xpc_int64_create(a2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kCDPSetWebsheetVisibility", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t MMSBinaryHeader::MMSBinaryHeader(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1ECFD31E0;
  *(void *)(result + 8) = a2;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1ECFD31E0;
  *(void *)(result + 8) = v2;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

const char *MMSBinaryHeader::name(MMSBinaryHeader *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return "<unknown>";
  }
  uint64_t result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

BOOL MMSBinaryHeader::encodeName(MMSBinaryHeader *this, MMSPduEncoder *a2)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 1);
  if (v2) {
    MMSPduEncoder::encodeByte(a2, *v2 | 0x80);
  }
  return v2 != 0;
}

void sub_184598ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184598BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184598CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184598D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_184598E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_184598F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845991A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459926C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MMSParameterContainer::encodingMap(MMSParameterContainer *this)
{
  return MMSParameterContainer::encodingMap(void)const::encodingMap;
}

void MMSParameterContainer::MMSParameterContainer(MMSParameterContainer *this)
{
  MMSHeaderContainer::MMSHeaderContainer(this);
  void *v1 = &unk_1ECFD3988;
}

void MMSParameterContainer::MMSParameterContainer(MMSParameterContainer *this, const MMSParameterContainer *a2)
{
  MMSHeaderContainer::MMSHeaderContainer(this, a2);
  void *v2 = &unk_1ECFD3988;
}

void MMSParameterContainer::~MMSParameterContainer(MMSParameterContainer *this)
{
  MMSHeaderContainer::~MMSHeaderContainer(this);

  JUMPOUT(0x18531F680);
}

uint64_t MMSParameterContainer::toString(MMSHeaderContainer *a1, std::string *a2)
{
  uint64_t result = MMSHeaderContainer::headerCount(a1);
  if (result)
  {
    uint64_t v23 = 0;
    memset(v22, 0, sizeof(v22));
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)xpc_object_t v19 = 0u;
    memset(v18, 0, sizeof(v18));
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v18);
    if (MMSHeaderContainer::headerCount(a1))
    {
      unsigned int v5 = 1;
      do
      {
        LOBYTE(__p) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)&__p, 1);
        uint64_t v6 = MMSHeaderEncodingMap::encodingForNumber(a1, v5 - 1);
        uint64_t v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
        size_t v8 = strlen(v7);
        xpc_object_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)v7, v8);
        LOBYTE(__p) = 61;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
        std::string __p = 0;
        std::string::size_type v16 = 0;
        uint64_t v17 = 0;
        if ((*(unsigned int (**)(uint64_t, void **))(*(void *)v6 + 72))(v6, &__p))
        {
          if (v17 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if (v17 >= 0) {
            uint64_t v11 = HIBYTE(v17);
          }
          else {
            uint64_t v11 = v16;
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, v11);
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(__p);
        }
      }
      while (MMSHeaderContainer::headerCount(a1) > (unint64_t)v5++);
    }
    std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v18 + 8, &__p);
    if (v17 >= 0) {
      uint64_t v13 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v13 = (const std::string::value_type *)__p;
    }
    if (v17 >= 0) {
      std::string::size_type v14 = HIBYTE(v17);
    }
    else {
      std::string::size_type v14 = v16;
    }
    std::string::append(a2, v13, v14);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p);
    }
    *(void *)&v18[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v18 + *(void *)(*(void *)&v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v18[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18531F630](v22);
  }
  return result;
}

uint64_t MMSParameterContainer::parseParameters(MMSParameterContainer *this, const char *__s1)
{
  if (__s1 && *__s1)
  {
    uint64_t v3 = strdup(__s1);
    __lasts = 0;
    xpc_object_t v4 = strtok_r(v3, ";", &__lasts);
    if (v4)
    {
      unsigned int v5 = v4;
      do
      {
        uint64_t v6 = strchr(v5, 61);
        if (v6)
        {
          uint64_t v7 = v6;
          *uint64_t v6 = 0;
          uint64_t Header = MMSHeaderContainer::createHeader(this, v5);
          if (Header)
          {
            xpc_object_t v9 = (MMSHeader *)Header;
            (*(void (**)(uint64_t, char *))(*(void *)Header + 16))(Header, v7 + 1);
LABEL_9:
            MMSHeaderContainer::addHeader(this, v9, 0);
          }
        }
        else
        {
          xpc_object_t v9 = (MMSHeader *)MMSHeaderContainer::createHeader(this, v5);
          if (v9) {
            goto LABEL_9;
          }
        }
        unsigned int v5 = strtok_r(0, ";", &__lasts);
      }
      while (v5);
    }
    free(v3);
  }
  return 1;
}

uint64_t MMSParameterContainer::charset(MMSParameterContainer *this)
{
  uint64_t v1 = MMSHeaderContainer::headerWithName(this, "charset");
  uint64_t v2 = (int *)(v1 + 20);
  if (!v1) {
    uint64_t v2 = &kMIBEnumUnknown;
  }
  return *v2;
}

void MMSParameterContainer::setCharset(MMSParameterContainer *this, int a2)
{
  uint64_t Header = (MMSHeader *)MMSHeaderContainer::headerWithName(this, "charset");
  if (!Header)
  {
    uint64_t Header = (MMSHeader *)MMSHeaderContainer::createHeader(this, "charset");
    MMSHeaderContainer::addHeader(this, Header, 0);
  }
  *((_DWORD *)Header + 5) = a2;
}

BOOL MMSParameterContainer::encode(MMSParameterContainer *this, MMSPduEncoder *a2)
{
  return MMSPduEncoder::encodeHeaders(a2, this);
}

uint64_t MMSParameterContainer::decode(MMSParameterContainer *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeHeaders(a2, this);
}

const char *CTStewieRequestReasonAsString(unint64_t a1)
{
  if (a1 > 0xA) {
    return "???";
  }
  else {
    return off_1E5267510[a1];
  }
}

void sub_184599FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459A0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459A16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459A204(_Unwind_Exception *a1)
{
  xpc_object_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_18459A2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459A41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTStewieExitReasonAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return "CTStewieExitReasonUnknown";
  }
  else {
    return off_1E5267568[a1 - 1];
  }
}

void sub_18459A5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459A64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459A6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459A71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459A7B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459A8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459AA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459AADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459ABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459ACC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459AE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459AF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459AFD8(_Unwind_Exception *a1)
{
  xpc_object_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18459B070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459B130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459B290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459B400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459B4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459B5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459B6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CTStewieConnectionAssistantEventTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7) {
    return "CTStewieConnectionAssistantEventTypeUnknown";
  }
  else {
    return off_1E5267588[a1 - 1];
  }
}

void sub_18459B7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459B878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459B8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459B948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459B9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459BA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459BB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459BB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459BBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459BC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459BE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  if (v18 != v19)
  {
  }
  if (v15 != v16)
  {
  }
  _Unwind_Resume(a1);
}

void sub_18459C258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459C394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459C508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459C6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459C874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459C900(_Unwind_Exception *a1)
{
  xpc_object_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18459C99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459CA20(_Unwind_Exception *a1)
{
  xpc_object_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18459CAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459CBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459CCAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459CD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459CD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459CDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459CE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459CEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459CFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459D2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D5EC(_Unwind_Exception *a1)
{
  xpc_object_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_18459D6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459D778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459D810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  xpc_object_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CTCellularData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *MMSEmptyHeader::MMSEmptyHeader(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *uint64_t result = &unk_1ECFD30F0;
  return result;
}

uint64_t MMSEmptyHeader::parseValue(MMSEmptyHeader *this, const char *a2)
{
  return 1;
}

uint64_t MMSEmptyHeader::valueAsString(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    a2[1] = 0;
    a2 = (uint64_t *)*a2;
  }
  else
  {
    *((unsigned char *)a2 + 23) = 0;
  }
  *(unsigned char *)a2 = 0;
  return 1;
}

uint64_t MMSEmptyHeader::decodeValue(MMSEmptyHeader *this, MMSPduDecoder *a2)
{
  return 1;
}

uint64_t MMSEmptyHeader::encodeValue(MMSEmptyHeader *this, MMSPduEncoder *a2)
{
  return 1;
}

void MMSEmptyHeader::createInstance(MMSEmptyHeader *this)
{
}

void MMSEmptyHeader::copy(MMSEmptyHeader *this)
{
}

const char *MMSEmptyHeader::headerTypeName(MMSEmptyHeader *this)
{
  return "empty";
}

void MMSEmptyHeader::~MMSEmptyHeader(MMSEmptyHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);

  JUMPOUT(0x18531F680);
}

void sub_18459DB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459DC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459DCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459DD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459DE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459DEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459DFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18459E07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459E268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459E4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459E5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_18459EBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18459ECB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459ED84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18459F0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18459F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18459F5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1845A0138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1845A0258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A0444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1845A0564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A0750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A088C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A0A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A0B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A0E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1845A0F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A10F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v12 = v11;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1845A11E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A134C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A1474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845A1714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  uint64_t v28 = v27;

  _Unwind_Resume(a1);
}

void sub_1845A1904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A1B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A1CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A1E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845A1F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A216C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A2348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A2480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A2644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A2778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A2894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A2A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A2CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A2EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A3138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1845A3580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A379C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A39CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A3B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A3D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A3EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845A4068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A4190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A432C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A4450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A45EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A4710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A4860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A4984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845A4B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A4D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A4F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A5024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1845A5180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A52A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A5470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A5744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A5914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A5A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A5B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845A5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A5E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A60C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A6214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A6410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v26 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1845A6528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A6670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A67F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A69E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A6B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A6CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A6EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v26 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1845A6FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A71E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A7308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (v14) {
    dispatch_release(v14);
  }
  _Unwind_Resume(a1);
}

void sub_1845A75B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A7730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A79BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);

  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1845A7B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A7DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A7F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A8204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1845A8348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A851C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A8650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A87D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A88F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A8AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1845A8C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A8D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1845A8E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void MMSSimpleHeader::MMSSimpleHeader(MMSSimpleHeader *this, char *a2, char *a3)
{
  *(void *)this = &unk_1ECFD32D0;
  xpc_object_t v4 = (void *)((char *)this + 32);
  unsigned int v5 = (void *)((char *)this + 8);
  if (!a2) {
    a2 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v5, a2);
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v4, v6);
}

uint64_t MMSSimpleHeader::decodeName(MMSSimpleHeader *this, MMSPduDecoder *a2)
{
  uint64_t result = MMSPduDecoder::decodeHttpToken((uint64_t)a2, (std::string *)((char *)this + 8));
  if (result)
  {
    if (*((char *)this + 31) < 0) {
      uint64_t v4 = *((void *)this + 2);
    }
    else {
      uint64_t v4 = *((unsigned __int8 *)this + 31);
    }
    return v4 != 0;
  }
  return result;
}

uint64_t MMSSimpleHeader::parseValue(MMSSimpleHeader *this, const char *a2)
{
  return 1;
}

uint64_t MMSSimpleHeader::decodeValue(MMSSimpleHeader *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeWspTextString((uint64_t)a2, (std::string *)((char *)this + 32));
}

uint64_t MMSSimpleHeader::encodeName(MMSSimpleHeader *this, MMSPduEncoder *a2)
{
  uint64_t v2 = (char *)this + 8;
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 31)) {
      return 0;
    }
LABEL_6:
    MMSPduEncoder::encodeHttpToken(a2, v2);
    return 1;
  }
  if (*((void *)this + 2))
  {
    uint64_t v2 = *(const char **)v2;
    goto LABEL_6;
  }
  return 0;
}

uint64_t MMSSimpleHeader::encodeValue(MMSSimpleHeader *this, MMSPduEncoder *a2)
{
  uint64_t v3 = (char *)this + 32;
  if (*((char *)this + 55) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  MMSPduEncoder::encodeWspTextString(a2, v3);
  return 1;
}

uint64_t MMSSimpleHeader::name(MMSSimpleHeader *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t MMSSimpleHeader::valueAsString(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 32));
  return 1;
}

void MMSSimpleHeader::copy(MMSSimpleHeader *this)
{
}

uint64_t MMSSimpleHeader::value(MMSSimpleHeader *this)
{
  uint64_t result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

const char *MMSSimpleHeader::headerTypeName(MMSSimpleHeader *this)
{
  return "simple";
}

void MMSSimpleHeader::~MMSSimpleHeader(void **this)
{
  *this = &unk_1ECFD32D0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  MMSHeader::~MMSHeader((MMSHeader *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECFD32D0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  MMSHeader::~MMSHeader((MMSHeader *)this);

  JUMPOUT(0x18531F680);
}

void sub_1845A9650(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845A96E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A977C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A9810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A990C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A99A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845A9A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845A9B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A9C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845A9CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A9DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845A9E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845A9F6C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845AA024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AA0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AA168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AA21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AA2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AA394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AA44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AA50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AA608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AA6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AA7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AA894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AA980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AAA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AAB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AAC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AACF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AAEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AAF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AB070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AB140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AB22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AB2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AB3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AB474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AB558(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845AB5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTMobileEquipmentInfoList>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    unsigned int v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1845AB6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AB780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AB824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AB8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AB98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ABACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ABB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ABC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845ABD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845ABE1C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845ABEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSimDeactivationInfo>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    unsigned int v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1845ABF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AC044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AC11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AC1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AC2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AC3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AC4D8(_Unwind_Exception *a1)
{
  unsigned int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1845AC610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AC6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AC760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AC804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AC8E8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845AC9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845ACAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ACBCC(_Unwind_Exception *a1)
{
  unsigned int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1845ACCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t __70__CTXPCUnblockPUKRequest_performRequestWithHandler_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1845ACDBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ACE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ACF60(_Unwind_Exception *a1)
{
  unsigned int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1845AD08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AD150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AD1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AD2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AD394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AD480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AD550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AD63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AD6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AD7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AD8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AD990(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845ADA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSimLabel>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    unsigned int v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1845ADB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ADBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ADC9C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845ADDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845ADE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845ADF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AE020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AE10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AE1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AE2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AE3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AE4FC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845AE60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AE6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AE770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AE7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AE8DC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845AE9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AEA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AEB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AEC04(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845AECF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AEDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AEE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AEF48(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845AF058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AF134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AF1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AF254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AF34C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845AF408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AF510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AF5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AF690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AF760(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845AF7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSubscriberAuthDataHolder>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    unsigned int v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1845AF8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AF988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AFA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AFB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845AFC14(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845AFCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSData>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = NSString;
    uint64_t v4 = (objc_class *)objc_opt_class();
    unsigned int v5 = NSStringFromClass(v4);
    uint64_t v6 = [v3 stringWithFormat:@"Type mismatch when casting object, expected %@", v5];

    id v7 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v6 userInfo:0];
    objc_exception_throw(v7);
  }

  return v1;
}

void sub_1845AFD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AFE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845AFF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845AFFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B00E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845B01BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845B02F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B0388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B04A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845B0570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845B0668(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845B0778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845B0854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845B08EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B09E4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845B0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845B0BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845B0C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B0D3C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845B0DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B0ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B0FC8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845B10D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845B11B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1845B123C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B1334(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845B1444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845B14FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B15A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B1684(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845B1794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1845B184C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionUIMAuthenticate(uint64_t a1, ctu *a2)
{
  uint64_t v2 = 0x1600000001;
  if (!a1 || !a2) {
    return v2;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    xpc_object_t v6 = v5;
    xpc_object_t v15 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v15 = v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (MEMORY[0x1853203E0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    xpc_object_t v7 = v6;
    goto LABEL_9;
  }
LABEL_7:
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v15 = v7;
LABEL_9:
  xpc_release(v6);
  xpc_object_t v8 = xpc_string_create("kUICCAuthenticationInfo");
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kRequest", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  ctu::cf_to_xpc((uint64_t *)&value, a2, v10);
  xpc_dictionary_set_value(v7, "kUICCAuthenticationInfo", value);
  xpc_object_t v11 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v11);
  xpc_release(value);
  xpc_object_t value = 0;
  xpc_object_t object = xpc_null_create();
  uint64_t v2 = SendXpcMessage(a1, &v15, &object);
  xpc_release(object);
  xpc_release(v15);
  return v2;
}

void *operator<<(void *a1, __int16 *a2)
{
  uint64_t v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  __int16 v15 = *a2;
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v16 = *(std::string *)(a2 + 4);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v16;
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v5 = &v17;
  }
  else {
    xpc_object_t v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  xpc_object_t v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, size);
  xpc_object_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"]-[", 3);
  if (*((char *)a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else {
    std::string __p = *(std::string *)(a2 + 20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v9 = &v14;
  }
  else {
    xpc_object_t v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v14.__r_.__value_.__l.__size_;
  }
  xpc_object_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"]", 1);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return a1;
}

void MCCAndMNC::getMcc(MCCAndMNC *this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)this;
  uint64_t v2 = (std::string *)(a2 + 4);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    v2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void MCCAndMNC::getMnc(MCCAndMNC *this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *((_WORD *)this + 16);
  uint64_t v2 = (std::string *)(a2 + 4);
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    v2->__r_.__value_.__r.__words[2] = *((void *)this + 7);
  }
}

uint64_t _is3DigitMNCWithMCC(int a1, int a2)
{
  if (a1 > 501)
  {
    if (a1 <= 713)
    {
      switch(a1)
      {
        case 502:
          BOOL v2 = (a2 & 0xFFFFFFFE) == 152;
          break;
        case 544:
          BOOL v2 = a2 == 110;
          break;
        case 708:
          return a2 == 1;
        default:
          return _is3DigitMNC(a1);
      }
      return v2;
    }
    if (a1 == 714) {
      return a2 == 16;
    }
    if (a1 != 722)
    {
      if (a1 != 738) {
        return _is3DigitMNC(a1);
      }
      return a2 == 2;
    }
    BOOL v5 = a2 == 7;
    return !v5;
  }
  if (a1 <= 333)
  {
    if (a1 != 262)
    {
      if (a1 == 330) {
        return a2 == 110 || a2 == 120;
      }
      return _is3DigitMNC(a1);
    }
    return a2 == 820;
  }
  if (a1 == 334)
  {
    uint64_t result = 1;
    if (a2 > 89)
    {
      if (a2 == 90 || a2 == 140) {
        return result;
      }
    }
    else if (a2 == 20 || a2 == 50)
    {
      return result;
    }
    return 0;
  }
  if (a1 == 344)
  {
    BOOL v5 = a2 == 30;
    return !v5;
  }
  if (a1 != 405) {
    return _is3DigitMNC(a1);
  }
  return a2 > 24 && (a2 - 71) < 0xFFFFFFE9;
}

void *createPLMN@<X0>(int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)__str = 0;
  uint64_t v6 = 0;
  if (_is3DigitMNCWithMCC(a1, a2)) {
    snprintf(__str, 0x10uLL, "%03d%03d");
  }
  else {
    snprintf(__str, 0x10uLL, "%03d%02d");
  }
  return std::string::basic_string[abi:nn180100]<0>(a3, __str);
}

void *createPLMN@<X0>(int a1@<W2>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)__str = 0;
  uint64_t v5 = 0;
  if (a1) {
    snprintf(__str, 0x10uLL, "%03d%03d");
  }
  else {
    snprintf(__str, 0x10uLL, "%03d%02d");
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, __str);
}

void *createPLMN@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v7 = 0;
  sscanf(a1, "%d", (char *)&v7 + 4);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (const char *)a2;
  }
  else {
    uint64_t v5 = *(const char **)a2;
  }
  sscanf(v5, "%d", &v7);
  return createPLMN(SHIDWORD(v7), v7, a3);
}

void createCFPLMN(const MCC *a1@<X0>, const MNC *a2@<X1>, void *a3@<X8>)
{
  formPLMN(a1, a2, &__p);
  int v4 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = __p;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v8, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string v8 = v7;
  }
  uint64_t v9 = 0;
  if (ctu::cf::convert_copy()) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *a3 = v5;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v4 & 0x80000000) == 0) {
      return;
    }
LABEL_16:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v7.__r_.__value_.__l.__data_);
  if (v4 < 0) {
    goto LABEL_16;
  }
}

_WORD *MCC::MCC(_WORD *a1, __int16 a2, long long *a3)
{
  *a1 = a2;
  int v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

{
  std::string *v4;
  long long v5;

  *a1 = a2;
  int v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void MCC::MCC(MCC *this, unsigned __int16 a2)
{
  this->std::string var0 = a2;
  this->var1.var0.var0.var0.var1.std::string var0 = 0;
  p_unint64_t var1 = &this->var1;
  *(_OWORD *)&this->var1.var0.var0.var0.var1.unint64_t var1 = 0uLL;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v8);
  LOBYTE(v6) = 48;
  int v4 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v8, (char *)&v6);
  *(void *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 3;
  std::ostream::operator<<();
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v8 + 8, &v6);
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0) {
    operator delete(p_var1->var0.var0.var0.var1.var0);
  }
  *(_OWORD *)p_var1->var0.var0.var0.var0.std::string var0 = v6;
  long long v5 = (void *)MEMORY[0x1E4FBA418];
  *((void *)&p_var1->var0.var0.var0.var1 + 2) = v7;
  *(void *)&v8[0] = *v5;
  *(void *)((char *)v8 + *(void *)(*(void *)&v8[0] - 24)) = v5[3];
  *((void *)&v8[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18531F630](v12);
}

void *std::operator<<[abi:nn180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    long long v5 = std::locale::use_facet(&v7, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

BOOL MCC::operator>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 > *a2;
}

BOOL MCC::operator<(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 < *a2;
}

MCC *MCC::clear(MCC *this)
{
  this->std::string var0 = -1;
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0)
  {
    *this->var1.var0.var0.var0.var1.std::string var0 = 0;
    this->var1.var0.var0.var0.var1.unint64_t var1 = 0;
  }
  else
  {
    this->var1.var0.var0.var0.var0.var0[0] = 0;
    *((unsigned char *)&this->var1.var0.var0.var0.var1 + 23) = 0;
  }
  return this;
}

_WORD *MNC::MNC(_WORD *a1, __int16 a2, long long *a3)
{
  *a1 = a2;
  int v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

{
  std::string *v4;
  long long v5;

  *a1 = a2;
  int v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void MNC::MNC(MNC *this, int a2, const MCC *a3)
{
  MCC::MCC((MCC *)this, a2);
  memset(&__str, 0, sizeof(__str));
  createPLMN(a3->var0, a2, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::basic_string(&v9, &__str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v11);
    std::string v8 = (void **)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)std::string v8 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v9.__r_.__value_.__l + 2);
    char v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v7 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void MCCAndMNC::MCCAndMNC(MCCAndMNC *this, unsigned __int16 a2, int a3)
{
  *(_WORD *)this = -1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  long long v5 = (std::string *)((char *)this + 8);
  *((_WORD *)this + 16) = -1;
  *((void *)this + 5) = 0;
  long long v6 = (std::string *)((char *)this + 40);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  MCC::MCC(&v7, a2);
  *(_WORD *)this = v7.var0;
  std::string::operator=(v5, (const std::string *)&v7.var1);
  if (*((char *)&v7.var1.var0.var0.var0.var1 + 23) < 0) {
    operator delete(v7.var1.var0.var0.var0.var1.var0);
  }
  MNC::MNC((MNC *)&v7, a3, (const MCC *)this);
  *((_WORD *)this + 16) = v7.var0;
  std::string::operator=(v6, (const std::string *)&v7.var1);
  if (*((char *)&v7.var1.var0.var0.var0.var1 + 23) < 0) {
    operator delete(v7.var1.var0.var0.var0.var1.var0);
  }
}

uint64_t MCCAndMNC::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (MCC::operator==(a1, a2)) {
    return MCC::operator==(a1 + 16, a2 + 16) ^ 1;
  }
  else {
    return 1;
  }
}

void MCCAndMNC::getStringValue(MCCAndMNC *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string v8 = *(std::string *)((char *)this + 8);
  }
  if (*((char *)this + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 40);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  long long v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__r.__words[0] = 0;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void _CopyMobileUserInformation(void)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  _MobileUserString = @"mobile";
  CFIndex v10 = 32;
  CFRetain(@"mobile");
  CFURLRef v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  id v1 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v0)
  {
    CFURLRef v2 = v0;
    CFStringRef v3 = CFURLCopyFileSystemPath(v0, kCFURLPOSIXPathStyle);
    if (v3)
    {
      CFStringRef v4 = v3;
      _MobileUserDirectory = (uint64_t)_CFStringGetOrCreateCString(*v1, v3, 0, 0, 0x8000100u);
      CFRelease(v4);
    }
    CFRelease(v2);
  }
  *(_OWORD *)buffer = 0u;
  long long v12 = 0u;
  CFAllocatorRef v5 = *v1;
  long long v6 = _CFStringGetOrCreateCString(*v1, @"mobile", buffer, &v10, 0x8000100u);
  if (v6)
  {
    MCC v7 = (char *)v6;
    std::string v8 = getpwnam(v6);
    if (v8)
    {
      int pw_gid = v8->pw_gid;
      _MobileUserUID = v8->pw_uid;
      _MobileUserGID = pw_gid;
    }
    if (v7 != buffer) {
      CFAllocatorDeallocate(v5, v7);
    }
  }
}

const char *_CFStringGetOrCreateCString(const __CFAllocator *a1, CFStringRef theString, char *buffer, CFIndex *a4, CFStringEncoding encoding)
{
  MCC v7 = buffer;
  CFIndex maxBufLen = 0;
  if (buffer && a4 && *a4 && CFStringGetCString(theString, buffer, *a4, encoding))
  {
    size_t v10 = strlen(v7);
LABEL_12:
    *a4 = v10;
    return v7;
  }
  CFIndex Length = CFStringGetLength(theString);
  v16.CFIndex location = 0;
  v16.size_t length = Length;
  CFStringGetBytes(theString, v16, encoding, 0, 0, 0, 0, &maxBufLen);
  long long v12 = (UInt8 *)CFAllocatorAllocate(a1, maxBufLen + 1, 0);
  if (v12)
  {
    uint64_t v13 = (const char *)v12;
    v17.CFIndex location = 0;
    v17.size_t length = Length;
    CFStringGetBytes(theString, v17, encoding, 0, 0, v12, maxBufLen, &maxBufLen);
    MCC v7 = &v13[maxBufLen];
  }
  else
  {
    CFIndex maxBufLen = 0;
    uint64_t v13 = v7;
    if (!v7) {
      goto LABEL_10;
    }
  }
  *MCC v7 = 0;
  MCC v7 = v13;
LABEL_10:
  if (a4)
  {
    size_t v10 = maxBufLen;
    goto LABEL_12;
  }
  return v7;
}

uint64_t _CFStringGetMobileUser()
{
  return _MobileUserString;
}

void _CopyWirelessUserInformation(void)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  _WirelessUserString = @"_wireless";
  CFIndex v10 = 32;
  CFRetain(@"_wireless");
  CFURLRef v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  id v1 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v0)
  {
    CFURLRef v2 = v0;
    CFStringRef v3 = CFURLCopyFileSystemPath(v0, kCFURLPOSIXPathStyle);
    if (v3)
    {
      CFStringRef v4 = v3;
      _WirelessUserDirectory = (uint64_t)_CFStringGetOrCreateCString(*v1, v3, 0, 0, 0x8000100u);
      CFRelease(v4);
    }
    CFRelease(v2);
  }
  *(_OWORD *)buffer = 0u;
  long long v12 = 0u;
  CFAllocatorRef v5 = *v1;
  long long v6 = _CFStringGetOrCreateCString(*v1, @"_wireless", buffer, &v10, 0x8000100u);
  if (v6)
  {
    MCC v7 = (char *)v6;
    std::string v8 = getpwnam(v6);
    if (v8)
    {
      int pw_gid = v8->pw_gid;
      _WirelessUserUID = v8->pw_uid;
      _WirelessUserGID = pw_gid;
    }
    if (v7 != buffer) {
      CFAllocatorDeallocate(v5, v7);
    }
  }
}

uint64_t _GetWirelessUserDirectory()
{
  return _WirelessUserDirectory;
}

uint64_t _CFStringCopyMCCMNCFromIMSI(const __CFString *a1, const __CFString **a2, CFStringRef *a3)
{
  uint64_t v3 = 0;
  if (!a1 || !a2 || !a3) {
    return v3;
  }
  CFIndex Length = CFStringGetLength(a1);
  if (Length < 3) {
    return 0;
  }
  unint64_t v8 = Length;
  memset(&v17, 0, sizeof(v17));
  std::string::resize(&v17, Length + 1, 0);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v9 = &v17;
  }
  else {
    std::string v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (!CFStringGetCString(a1, (char *)v9, size, 0x8000100u)) {
    goto LABEL_22;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v18.CFIndex location = 0;
  v18.size_t length = 3;
  CFStringRef v12 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v18);
  IntCFStringRef Value = CFStringGetIntValue(v12);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v14 = &v17;
  }
  else {
    std::string v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (_is3DigitMNCWithIMSI(IntValue, v14)) {
    v15.size_t length = 3;
  }
  else {
    v15.size_t length = 2;
  }
  if (v8 < v15.length + 3)
  {
    if (v12) {
      CFRelease(v12);
    }
LABEL_22:
    uint64_t v3 = 0;
    goto LABEL_24;
  }
  v15.CFIndex location = 3;
  *a3 = CFStringCreateWithSubstring(v11, a1, v15);
  *a2 = v12;
  uint64_t v3 = 1;
LABEL_24:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v3;
}

uint64_t isEmergencyNumber(const void **a1)
{
  uint64_t v1 = 0;
  char v2 = *((unsigned char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  if (v2 >= 0) {
    CFStringRef v4 = a1;
  }
  else {
    CFStringRef v4 = *a1;
  }
  while (v3 != strlen(_ZGRZ17isEmergencyNumberRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE10numberList_[v1])
       || memcmp(v4, _ZGRZ17isEmergencyNumberRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE10numberList_[v1], v3))
  {
    if (++v1 == 10) {
      return 0;
    }
  }
  return 1;
}

uint64_t _CTCallCreateFromXpcDictionary(const void *a1, xpc_object_t object, int a3)
{
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (object)
  {
    xpc_object_t v6 = object;
    xpc_retain(object);
    xpc_object_t v39 = v6;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v39 = v6;
    if (!v6) {
      goto LABEL_5;
    }
  }
  if (MEMORY[0x1853203E0](v6) == v5)
  {
    xpc_retain(v6);
    xpc_object_t v7 = v6;
    goto LABEL_7;
  }
LABEL_5:
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v39 = v7;
LABEL_7:
  xpc_release(v6);
  uint64_t v8 = MEMORY[0x1853203E0](v7);
  uint64_t v9 = 0;
  if (a1 && v8 == v5)
  {
    uint64_t v40 = &v39;
    long long v41 = "kUuid";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, objecta);
    uint64_t UuidBytes = createUuidBytes(objecta);
    uint64_t v12 = v11;
    xpc_release(objecta[0]);
    objecta[0] = 0;
    objecta[1] = 0;
    uint64_t v38 = 0;
    unsigned int v34 = &v39;
    unsigned int v35 = "kPhoneNumber";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v34, &v31);
    uint64_t v40 = 0;
    long long v41 = 0;
    uint64_t v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
    xpc_release(v31);
    unsigned int v34 = 0;
    unsigned int v35 = 0;
    uint64_t v36 = 0;
    xpc_object_t v31 = &v39;
    int v32 = "kCallName";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v31, &__p);
    uint64_t v40 = 0;
    long long v41 = 0;
    uint64_t v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
    xpc_release(__p);
    xpc_object_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = 0;
    xpc_object_t __p = &v39;
    xpc_object_t v29 = "kSource";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, v26);
    uint64_t v40 = 0;
    long long v41 = 0;
    uint64_t v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
    xpc_release(v26[0]);
    uint64_t v40 = &v39;
    long long v41 = "kCallStartTime";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    int v13 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    uint64_t v40 = &v39;
    long long v41 = "kCallDuration";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    int v14 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    uint64_t v40 = &v39;
    long long v41 = "kCallFlags";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    unsigned int v15 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    uint64_t v40 = &v39;
    long long v41 = "kCallSessionStart";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    int v16 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    uint64_t v40 = &v39;
    long long v41 = "kMobileCountryCode";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    unsigned int v17 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    xpc_object_t __p = 0;
    xpc_object_t v29 = 0;
    uint64_t v30 = 0;
    v26[0] = &v39;
    v26[1] = "kISOCountryCode";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v26, &v27);
    uint64_t v40 = 0;
    long long v41 = 0;
    uint64_t v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
    xpc_release(v27);
    if (v38 >= 0) {
      CFRange v18 = objecta;
    }
    else {
      CFRange v18 = (xpc_object_t *)objecta[0];
    }
    if (v36 >= 0) {
      xpc_object_t v19 = (const char *)&v34;
    }
    else {
      xpc_object_t v19 = (const char *)v34;
    }
    if (v33 >= 0) {
      long long v20 = (const char *)&v31;
    }
    else {
      long long v20 = (const char *)v31;
    }
    if (v30 >= 0) {
      cStr = (char *)&__p;
    }
    else {
      cStr = (char *)__p;
    }
    uint64_t v9 = _CTCallCreateFromCallInfo(a1, UuidBytes, v12, (const char *)v18, v19, v20, v13, v14, v15, v16, v17, cStr, a3 != 0);
    if (xpc_dictionary_get_value(v39, "kAudioToneRelayFlag"))
    {
      uint64_t v40 = &v39;
      long long v41 = "kAudioToneRelayFlag";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, v26);
      char v22 = xpc::dyn_cast_or_default((xpc *)v26, 0);
      xpc_release(v26[0]);
      CTCallSetAudioToneRelayFlag(v9, v22);
    }
    if (xpc_dictionary_get_value(v39, "kMobileOriginatedCallEndFlag"))
    {
      uint64_t v40 = &v39;
      long long v41 = "kMobileOriginatedCallEndFlag";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, v26);
      char v23 = xpc::dyn_cast_or_default((xpc *)v26, 0);
      xpc_release(v26[0]);
      CTCallSetDeviceOriginatedEndFlag(v9, v23);
    }
    if (xpc_dictionary_get_value(v39, "kClientNeedsToSetupAudioInterruptions"))
    {
      uint64_t v40 = &v39;
      long long v41 = "kClientNeedsToSetupAudioInterruptions";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, v26);
      char v24 = xpc::dyn_cast_or_default((xpc *)v26, 0);
      xpc_release(v26[0]);
      CTCallSetSetupAudioInterruptionFlag(v9, v24);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(v34);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(objecta[0]);
    }
    xpc_object_t v7 = v39;
  }
  xpc_release(v7);
  return v9;
}

uint64_t _CTCallCreateFromSerializedData(const void *a1, const __CFData *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    CFTypeRef cf = 0;
    CFAllocatorRef v5 = CFGetAllocator(a1);
    xpc_object_t object = (xpc_object_t)CFPropertyListCreateWithData(v5, a2, 0, 0, 0);
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&object);
    CFTypeRef v7 = cf;
    if (cf) {
      uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v8 = 0;
    }
    if (!v8)
    {
      uint64_t v2 = 0;
      if (!cf) {
        return v2;
      }
      goto LABEL_17;
    }
    ctu::cf_to_xpc((uint64_t *)&object, (ctu *)cf, v6);
    xpc_object_t v9 = object;
    uint64_t v10 = MEMORY[0x1E4F14590];
    if (object && MEMORY[0x1853203E0](object) == v10) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_release(object);
    if (MEMORY[0x1853203E0](v9) == v10) {
      uint64_t v2 = _CTCallCreateFromXpcDictionary(a1, v9, 0);
    }
    else {
      uint64_t v2 = 0;
    }
    xpc_release(v9);
    CFTypeRef v7 = cf;
    if (cf) {
LABEL_17:
    }
      CFRelease(v7);
  }
  return v2;
}

uint64_t _CTCallPhoneNumberIsMmiOrUssd()
{
  ctu::cf::assign();
  long long v13 = 0u;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)xpc_object_t __p = 0u;
  *(_OWORD *)xpc_object_t v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)CFStringRef v4 = 0u;
  long long v5 = 0u;
  CSIPhoneNumber::CSIPhoneNumber(v4, &v13);
  BOOL IsMMI = CSIPhoneNumber::getIsMMI((CSIPhoneNumber *)v4);
  uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  if (!IsMMI && !CSIPhoneNumber::getIsUSSD((CSIPhoneNumber *)v4)) {
    uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v2 = *v1;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v8[0]);
  }
  if (SBYTE7(v7) < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[1]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
  return v2;
}

void sub_1845B76B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845B7738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t IsEqualString(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return [a1 isEqualToString:a2];
  }
}

uint64_t isBandMapValid(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v1);
        }
        xpc_object_t v6 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        long long v7 = objc_msgSend(v1, "objectForKey:", v6, (void)v10);
        LODWORD(v6) = sAreBandsValid(v6, v7);

        if (!v6)
        {
          uint64_t v8 = 0;
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 1;
LABEL_11:

  return v8;
}

BOOL sIsValidBand(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMA1x"] & 1) != 0
    || ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMAEVDO"] & 1) != 0
    || ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMAHybrid"] & 1) != 0
    || [v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyeHRPD"])
  {
    if (v4)
    {
      uint64_t v5 = ctConvertCdmaBandToMask([v4 unsignedShortValue]);
LABEL_7:
      BOOL v6 = v5 != 0;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyGSM"] & 1) != 0
    || [v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyGSMCompact"])
  {
    if (v4)
    {
      uint64_t v5 = ctConvertGsmBandToMask([v4 unsignedShortValue]);
      goto LABEL_7;
    }
LABEL_21:
    BOOL v6 = 0;
    goto LABEL_22;
  }
  if ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyLTE"])
  {
    if (v4)
    {
      uint64_t v5 = ctConvertLteBandToMask([v4 unsignedShortValue]);
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  if ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyNR"])
  {
    if (v4)
    {
      uint64_t v5 = ctConvertNrBandToMask([v4 unsignedShortValue]);
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  if ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyUTRAN"])
  {
    if (v4)
    {
      uint64_t v5 = ctConvertUmtsBandToMask([v4 unsignedShortValue]);
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  int v8 = [v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyTDSCDMA"];
  BOOL v6 = 0;
  if (v4 && v8)
  {
    uint64_t v5 = ctConvertTdsBandToMask([v4 unsignedShortValue]);
    goto LABEL_7;
  }
LABEL_22:

  return v6;
}

uint64_t sAreBandsValid(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMA1x"] & 1) != 0
    || ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMAEVDO"] & 1) != 0
    || ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMAHybrid"] & 1) != 0
    || [v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyeHRPD"])
  {
    id v5 = v4;
    BOOL v6 = v5;
    if (v5)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v7 = v5;
      uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v23;
LABEL_8:
        uint64_t v11 = 0;
        while (1)
        {
          if (*(void *)v23 != v10) {
            objc_enumerationMutation(v7);
          }
          long long v12 = *(void **)(*((void *)&v22 + 1) + 8 * v11);
          if (!v12 || !ctConvertCdmaBandToMask(objc_msgSend(v12, "unsignedShortValue", (void)v22))) {
            break;
          }
          if (v9 == ++v11)
          {
            uint64_t v9 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
            uint64_t v13 = 1;
            if (v9) {
              goto LABEL_8;
            }
            goto LABEL_32;
          }
        }
LABEL_29:
        uint64_t v13 = 0;
LABEL_32:

        goto LABEL_33;
      }
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyGSM"] & 1) != 0
    || [v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyGSMCompact"])
  {
    id v14 = v4;
    BOOL v6 = v14;
    if (v14)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v7 = v14;
      uint64_t v15 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v23;
LABEL_21:
        uint64_t v18 = 0;
        while (1)
        {
          if (*(void *)v23 != v17) {
            objc_enumerationMutation(v7);
          }
          xpc_object_t v19 = *(void **)(*((void *)&v22 + 1) + 8 * v18);
          if (!v19 || !ctConvertGsmBandToMask(objc_msgSend(v19, "unsignedShortValue", (void)v22))) {
            goto LABEL_29;
          }
          if (v16 == ++v18)
          {
            uint64_t v16 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
            uint64_t v13 = 1;
            if (v16) {
              goto LABEL_21;
            }
            goto LABEL_32;
          }
        }
      }
LABEL_31:
      uint64_t v13 = 1;
      goto LABEL_32;
    }
LABEL_30:
    uint64_t v13 = 0;
LABEL_33:

    goto LABEL_34;
  }
  if ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyLTE"])
  {
    uint64_t v21 = sAreLteBandsValid(v4);
  }
  else if ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyNR"])
  {
    uint64_t v21 = sAreNrBandsValid(v4);
  }
  else if ([v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyUTRAN"])
  {
    uint64_t v21 = sAreUmtsBandsValid(v4);
  }
  else
  {
    if (![v3 isEqualToString:@"kCTRegistrationRadioAccessTechnologyTDSCDMA"])
    {
      uint64_t v13 = 0;
      goto LABEL_34;
    }
    uint64_t v21 = sAreTdsBandsValid(v4);
  }
  uint64_t v13 = v21;
LABEL_34:

  return v13;
}

uint64_t sAreLteBandsValid(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if (!v8 || !ctConvertLteBandToMask(objc_msgSend(v8, "unsignedShortValue", (void)v11)))
          {
            uint64_t v9 = 0;
            goto LABEL_15;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v9 = 1;
        if (v5) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v9 = 1;
    }
LABEL_15:
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sAreNrBandsValid(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if (!v8 || !ctConvertNrBandToMask(objc_msgSend(v8, "unsignedShortValue", (void)v11)))
          {
            uint64_t v9 = 0;
            goto LABEL_15;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v9 = 1;
        if (v5) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v9 = 1;
    }
LABEL_15:
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sAreUmtsBandsValid(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if (!v8 || !ctConvertUmtsBandToMask(objc_msgSend(v8, "unsignedShortValue", (void)v11)))
          {
            uint64_t v9 = 0;
            goto LABEL_15;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v9 = 1;
        if (v5) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v9 = 1;
    }
LABEL_15:
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sAreTdsBandsValid(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if (!v8 || !ctConvertTdsBandToMask(objc_msgSend(v8, "unsignedShortValue", (void)v11)))
          {
            uint64_t v9 = 0;
            goto LABEL_15;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v9 = 1;
        if (v5) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v9 = 1;
    }
LABEL_15:
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1845BC520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845BC5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845BC6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1845BC79C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1845BC83C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1845BC8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t _CTServerConnectionCopyCellularUsageWorkspaceInfo(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x1600000000;
  unsigned int v3 = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCUGetWorkspaceInfo", object, "kRequest", &v12);
    xpc_release(object[0]);
    xpc_object_t v13 = v12;
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v12);
    xpc_object_t v12 = xpc_null_create();
    unint64_t v6 = SendXpcMessage(a1, &v13, &v12);
    unsigned int v3 = v6;
    if (HIDWORD(v6))
    {
      unint64_t v2 = v6 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x1853203E0](v12) == MEMORY[0x1E4F14590])
    {
      object[0] = &v12;
      object[1] = "kCUWorkspaceInfo";
      xpc_object_t v11 = 0;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      if (MEMORY[0x1853203E0](v11) == MEMORY[0x1E4F145D8])
      {
        unint64_t v2 = 0x200000000;
        unsigned int v3 = 1;
      }
      else
      {
        object[0] = 0;
        xpc::bridge((uint64_t *)&cf, (xpc *)&v11, v7);
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, &cf);
        if (cf) {
          CFRelease(cf);
        }
        unint64_t v2 = 0;
        *a2 = object[0];
      }
      xpc_release(v11);
    }
    else
    {
      unint64_t v2 = 0;
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v3 | v2;
}