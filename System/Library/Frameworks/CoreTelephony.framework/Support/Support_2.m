void sub_222429B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(void *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DataIPFilter>,DataIPFilter*,DataIPFilter*,DataIPFilter*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter&,DataIPFilter*>(v4, v6);
      v6 += 160;
      uint64_t v4 = v11 + 160;
      v11 += 160;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_222429C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter&,DataIPFilter*>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), a2 + 88);
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 150) = *(void *)(a2 + 150);
  *(void *)(a1 + 144) = v5;
  return a1;
}

void sub_222429CAC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[2].__r_.__value_.__s.__data_[0] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (long long *)a2);
    std::string::size_type v4 = *(void *)(a2 + 32);
    a1[1].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 40);
    a1[1].__r_.__value_.__l.__size_ = v4;
    a1[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_222429D18(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>::operator()[abi:ne180100](uint64_t result)
{
  v2 = *(uint64_t **)(result + 8);
  uint64_t v1 = *(uint64_t **)(result + 16);
  uint64_t v3 = *v1;
  for (uint64_t i = *v2; v3 != i; v3 -= 160)
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v3 - 72);
    result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v3 - 128);
  }
  return result;
}

uint64_t std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    *(unsigned char *)(result + 56) = 0;
    if (*(unsigned char *)(a2 + 56))
    {
      long long v3 = *(_OWORD *)(a2 + 32);
      *(void *)(result + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(result + 32) = v3;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 32) = 0;
      *(unsigned char *)(result + 56) = 1;
    }
    uint64_t v4 = *(void *)(a2 + 64);
    *(unsigned char *)(result + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(result + 64) = v4;
    *(unsigned char *)(result + 80) = 1;
  }
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    *(unsigned char *)(result + 112) = 0;
    if (*(unsigned char *)(a2 + 112))
    {
      long long v5 = *(_OWORD *)(a2 + 88);
      *(void *)(result + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(result + 88) = v5;
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 88) = 0;
      *(unsigned char *)(result + 112) = 1;
    }
    uint64_t v6 = *(void *)(a2 + 120);
    *(unsigned char *)(result + 128) = *(unsigned char *)(a2 + 128);
    *(void *)(result + 120) = v6;
    *(unsigned char *)(result + 136) = 1;
  }
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(result + 150) = *(void *)(a2 + 150);
  *(void *)(result + 144) = v7;
  return result;
}

void std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == a2[3].n128_u8[0])
  {
    if (*(unsigned char *)(a1 + 48))
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, a2);
      unint64_t v4 = a2[2].n128_u64[0];
      *(unsigned char *)(a1 + 40) = a2[2].n128_u8[8];
      *(void *)(a1 + 32) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    if (a2[1].n128_u8[8])
    {
      __n128 v5 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = v5;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2->n128_u64[0] = 0;
      *(unsigned char *)(a1 + 24) = 1;
    }
    unint64_t v6 = a2[2].n128_u64[0];
    *(unsigned char *)(a1 + 40) = a2[2].n128_u8[8];
    *(void *)(a1 + 32) = v6;
    *(unsigned char *)(a1 + 48) = 1;
  }
}

void std::__optional_destruct_base<DataIPFilterEndpoint,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DataIPFilter *,DataIPFilter *,DataIPFilter *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a4 + 32), (std::string *)(v5 + 32));
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a4 + 88), (std::string *)(v5 + 88));
    uint64_t v8 = *(void *)(v5 + 144);
    *(void *)(a4 + 150) = *(void *)(v5 + 150);
    *(void *)(a4 + 144) = v8;
    a4 += 160;
    v5 += 160;
  }
  while (v5 != v6);
  return v6;
}

void std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>(std::string *this, std::string *a2)
{
  if (this[2].__r_.__value_.__s.__data_[0] == a2[2].__r_.__value_.__s.__data_[0])
  {
    if (this[2].__r_.__value_.__s.__data_[0])
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(this, a2);
      std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__s.__data_[16] = a2[1].__r_.__value_.__s.__data_[16];
      this[1].__r_.__value_.__l.__size_ = size;
    }
  }
  else if (this[2].__r_.__value_.__s.__data_[0])
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::reset[abi:ne180100]((uint64_t)this);
  }
  else
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (long long *)a2);
    std::string::size_type v5 = a2[1].__r_.__value_.__l.__size_;
    this[1].__r_.__value_.__s.__data_[16] = a2[1].__r_.__value_.__s.__data_[16];
    this[1].__r_.__value_.__l.__size_ = v5;
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DataIPFilter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(160 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 160;
      std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(v7 - 160, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 160;
      *((void *)&v15 + 1) -= 160;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1 + 88);
    __n128 result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1 + 32);
    v1 += 160;
  }
  return result;
}

uint64_t std::__split_buffer<DataIPFilter>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<DataIPFilter>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 160;
      std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v2 - 72);
      __n128 result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v2 - 128);
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 160)
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 72);
    __n128 result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 128);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::shared_ptr<dormancy::QMIDormancyCommandDriver>::shared_ptr[abi:ne180100]<dormancy::QMIDormancyCommandDriver,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22242A5C8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1}::operator() const(dormancy::QMIDormancyCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_22242A5F0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<dormancy::QMIDormancyCommandDriver *,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver *)#1},std::allocator<dormancy::QMIDormancyCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<dormancy::QMIDormancyCommandDriver *,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver *)#1},std::allocator<dormancy::QMIDormancyCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<dormancy::QMIDormancyCommandDriver *,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver *)#1},std::allocator<dormancy::QMIDormancyCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1}::operator() const(dormancy::QMIDormancyCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  std::string::size_type v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    long long v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint64_t v8 = *v14;
          *long long v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          long long v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        long long v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void dormancy::QMIDormancyCommandDriver::handlePdpStateChanged_sync(std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&,std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&)::$_0::operator()<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)*a3;
  v38 = a3 + 1;
  if ((void *)*a3 != a3 + 1)
  {
    v40 = (uint64_t *)(a1 + 112);
    v39 = (void *)(a1 + 128);
    while (1)
    {
      uint64_t v6 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = subscriber::asString();
        int v8 = *((_DWORD *)v3 + 8);
        *(_DWORD *)buf = 136315394;
        uint64_t v42 = v7;
        __int16 v43 = 1024;
        LODWORD(v44) = v8;
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I handlePdpStateChanged_sync simSlot = %s, pdpId %d", buf, 0x12u);
      }
      size_t v9 = (void *)v3[5];
      if (v9 != v3 + 6) {
        break;
      }
LABEL_59:
      v36 = (void *)v3[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (void *)v3[2];
          BOOL v15 = *v37 == (void)v3;
          uint64_t v3 = v37;
        }
        while (!v15);
      }
      uint64_t v3 = v37;
      if (v37 == v38) {
        return;
      }
    }
    while (1)
    {
      uint8x8_t v10 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = asString();
        uint64_t v12 = asStringBool();
        *(_DWORD *)buf = 136315394;
        uint64_t v42 = v11;
        __int16 v43 = 2080;
        uint64_t v44 = v12;
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I handlePdpStateChanged_sync context %s active %s", buf, 0x16u);
      }
      if (!*((_DWORD *)v9 + 7)) {
        break;
      }
LABEL_9:
      uint64_t v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          long long v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (void *)v9[2];
          BOOL v15 = *v14 == (void)v9;
          size_t v9 = v14;
        }
        while (!v15);
      }
      size_t v9 = v14;
      if (v14 == v3 + 6) {
        goto LABEL_59;
      }
    }
    v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *((unsigned __int8 *)v9 + 32);
      *(_DWORD *)buf = 67109120;
      LODWORD(v42) = v17;
      _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I handlePdpStateChanged_sync state = %d", buf, 8u);
    }
    unint64_t v18 = *((int *)v3 + 8);
    unint64_t v19 = *(void *)(a1 + 120);
    if (v19)
    {
      uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        unint64_t v21 = *((int *)v3 + 8);
        if (v19 <= v18) {
          unint64_t v21 = v18 % v19;
        }
      }
      else
      {
        unint64_t v21 = (v19 - 1) & v18;
      }
      v22 = *(void ***)(*v40 + 8 * v21);
      if (v22)
      {
        v23 = *v22;
        if (*v22)
        {
          do
          {
            unint64_t v24 = v23[1];
            if (v24 == v18)
            {
              if (*((_DWORD *)v23 + 4) == v18) {
                goto LABEL_56;
              }
            }
            else
            {
              if (v20.u32[0] > 1uLL)
              {
                if (v24 >= v19) {
                  v24 %= v19;
                }
              }
              else
              {
                v24 &= v19 - 1;
              }
              if (v24 != v21) {
                break;
              }
            }
            v23 = (void *)*v23;
          }
          while (v23);
        }
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    v23 = operator new(0x30uLL);
    void *v23 = 0;
    v23[1] = v18;
    *((_DWORD *)v23 + 4) = *((_DWORD *)v3 + 8);
    v23[3] = 0;
    float v25 = (float)(unint64_t)(*(void *)(a1 + 136) + 1);
    v23[4] = 0;
    v23[5] = 0;
    float v26 = *(float *)(a1 + 144);
    if ((((float)(v26 * (float)v19) >= v25) & ~(v19 == 0)) == 0)
    {
      BOOL v27 = (v19 & (v19 - 1)) != 0;
      if (v19 < 3) {
        BOOL v27 = 1;
      }
      unint64_t v28 = v27 | (2 * v19);
      unint64_t v29 = vcvtps_u32_f32(v25 / v26);
      if (v28 <= v29) {
        size_t v30 = v29;
      }
      else {
        size_t v30 = v28;
      }
      std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__rehash<true>((uint64_t)v40, v30);
      unint64_t v19 = *(void *)(a1 + 120);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v19 <= v18) {
          unint64_t v21 = v18 % v19;
        }
        else {
          unint64_t v21 = v18;
        }
      }
      else
      {
        unint64_t v21 = (v19 - 1) & v18;
      }
    }
    uint64_t v31 = *v40;
    v32 = *(void **)(*v40 + 8 * v21);
    if (v32)
    {
      void *v23 = *v32;
    }
    else
    {
      void *v23 = *v39;
      void *v39 = v23;
      *(void *)(v31 + 8 * v21) = v39;
      if (!*v23) {
        goto LABEL_55;
      }
      unint64_t v33 = *(void *)(*v23 + 8);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v33 >= v19) {
          v33 %= v19;
        }
      }
      else
      {
        v33 &= v19 - 1;
      }
      v32 = (void *)(*v40 + 8 * v33);
    }
    void *v32 = v23;
LABEL_55:
    ++*(void *)(a1 + 136);
LABEL_56:
    v34 = (void *)v23[3];
    v35 = (void *)v23[4];
    while (v34 != v35)
    {
      (*(void (**)(void, uint64_t, void))(*(void *)*v34 + 32))(*v34, a2, *((unsigned __int8 *)v9 + 32));
      v34 += 2;
    }
    goto LABEL_9;
  }
}

void sub_22242ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3wds11EventReport10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_22242AE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(dormancy::QMIDormancyCommandDriver ***a1)
{
  uint8x8_t v20 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 10);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      std::string::size_type v5 = v4;
      uint64_t v6 = *((void *)v2 + 9);
      if (!v6)
      {
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        goto LABEL_34;
      }
      if ((*(unsigned int (**)(void))(*(void *)v6 + 80))(*((void *)v2 + 9)))
      {
        uint64_t v7 = *((void *)v2 + 5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I BindDataPort(0)", buf, 2u);
        }
        long long v26 = 0u;
        long long v27 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v26);
        *(_WORD *)qmi::MutableMessageBase::getTLV<wds::tlv::DataPort>((uint64_t)&v26, 1) = 0;
        int v8 = (std::__shared_weak_count *)*((void *)v2 + 2);
        if (!v8
          || (uint64_t v9 = *((void *)v2 + 12), v10 = *((void *)v2 + 1), (v11 = std::__shared_weak_count::lock(v8)) == 0))
        {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v12 = v11;
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        uint64_t v21 = MEMORY[0x263EF8330];
        uint64_t v22 = 0x40000000;
        v23 = ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2;
        unint64_t v24 = &__block_descriptor_tmp_65_1;
        float v25 = v2;
        if (!*(unsigned char *)(v9 + 72) || !*(void *)(v9 + 56)) {
          __TUAssertTrigger();
        }
        uint64_t v35 = v9 + 40;
        uint64_t v36 = QMIServiceMsg::create();
        int v37 = 25000;
        uint64_t v38 = 0;
        v39 = 0;
        *(void *)buf = MEMORY[0x263EF8330];
        uint64_t v29 = 1174405120;
        size_t v30 = ___ZN16QMIVirtualClient4sendIN3wds12BindDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
        uint64_t v31 = &unk_26D4C6A90;
        uint64_t v33 = v10;
        v34 = v12;
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v32 = &v21;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v41 = 0x40000000;
        uint64_t v42 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
        __int16 v43 = &unk_26460CCD8;
        uint64_t v44 = buf;
        uint64_t v13 = _Block_copy(&aBlock);
        v39 = v13;
        if (v36)
        {
          qmi::Client::send();
          uint64_t v13 = v39;
        }
        if (!v13) {
          goto LABEL_28;
        }
      }
      else
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 88))(v6))
        {
          dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
LABEL_32:
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
          goto LABEL_33;
        }
        long long v14 = *((void *)v2 + 5);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I BindMuxDataPort(1)", buf, 2u);
        }
        long long v26 = 0u;
        long long v27 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v26);
        *qmi::MutableMessageBase::getTLV<wds::tlv::MuxId>((uint64_t)&v26, 17) = 1;
        BOOL v15 = (std::__shared_weak_count *)*((void *)v2 + 2);
        if (!v15
          || (v16 = *((void *)v2 + 12), uint64_t v17 = *((void *)v2 + 1), (v18 = std::__shared_weak_count::lock(v15)) == 0))
        {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v12 = v18;
        atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        uint64_t v21 = MEMORY[0x263EF8330];
        uint64_t v22 = 0x40000000;
        v23 = ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2_71;
        unint64_t v24 = &__block_descriptor_tmp_72_1;
        float v25 = v2;
        if (!*(unsigned char *)(v16 + 72) || !*(void *)(v16 + 56)) {
          __TUAssertTrigger();
        }
        uint64_t v35 = v16 + 40;
        uint64_t v36 = QMIServiceMsg::create();
        int v37 = 25000;
        uint64_t v38 = 0;
        v39 = 0;
        *(void *)buf = MEMORY[0x263EF8330];
        uint64_t v29 = 1174405120;
        size_t v30 = ___ZN16QMIVirtualClient4sendIN3wds15BindMuxDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
        uint64_t v31 = &unk_26D4C6B18;
        uint64_t v33 = v17;
        v34 = v12;
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v32 = &v21;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v41 = 0x40000000;
        uint64_t v42 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
        __int16 v43 = &unk_26460CCD8;
        uint64_t v44 = buf;
        uint64_t v13 = _Block_copy(&aBlock);
        v39 = v13;
        if (v36)
        {
          qmi::Client::send();
          uint64_t v13 = v39;
        }
        if (!v13)
        {
LABEL_28:
          if (v34) {
            std::__shared_weak_count::__release_weak(v34);
          }
          std::__shared_weak_count::__release_weak(v12);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v26);
          goto LABEL_32;
        }
      }
      _Block_release(v13);
      goto LABEL_28;
    }
  }
LABEL_34:
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v20);
}

void sub_22242B38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  MEMORY[0x223C9A950](v27, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::DataPort>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::DataPort>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::DataPort>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN3wds12BindDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(void *a1, void *a2)
{
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[5])
      {
        uint64_t v7 = a1[4];
        uint64_t v8 = a2[1];
        v10[0] = *a2;
        v10[1] = v8;
        uint64_t v9 = a2[2];
        v10[2] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v10);
        (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v10);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v10);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_22242B9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISE_NS8_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(dormancy::QMIDormancyCommandDriver **)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *((void *)v2 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      int v9 = v3;
      __int16 v10 = 2080;
      uint64_t v11 = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I BindDataPort(0), Error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v7);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v6);
}

void sub_22242BAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::MuxId>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::MuxId>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::MuxId>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN3wds15BindMuxDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(void *a1, void *a2)
{
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[5])
      {
        uint64_t v7 = a1[4];
        uint64_t v8 = a2[1];
        v10[0] = *a2;
        v10[1] = v8;
        uint64_t v9 = a2[2];
        v10[2] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v10);
        (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v10);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v10);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_22242BE5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISE_NS8_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(dormancy::QMIDormancyCommandDriver **)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *((void *)v2 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      int v9 = v3;
      __int16 v10 = 2080;
      uint64_t v11 = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I BindMuxDataPort(1), Error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v7);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v6);
}

void sub_22242BF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  int v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 72);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_22242C018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver28registerDormancyReports_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_DWORD **a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  int v2 = v1[3];
  if (v2)
  {
    int v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      int v8 = v2;
      __int16 v9 = 2080;
      uint64_t v10 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Failed to register for dormancy status reports with error=0x%04x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_22242C11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void ___ZN16QMIVirtualClient4sendIN3wds14SetEventReport7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (a1[5]) {
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_22242C1B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::clone()
{
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS6_5Model7RequestEEEPKcNS_13group_sessionEEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISH_NS8_14default_deleteISH_EEEEENUlPvE_8__invokeESQ_(uint64_t *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  long long v14 = a1;
  uint64_t v15 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  uint64_t v4 = *(NSObject **)(*(void *)v1 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(v1 + 32);
      *(_DWORD *)buf = 136315650;
      uint64_t v17 = v6;
      __int16 v18 = 1024;
      int v19 = v3;
      __int16 v20 = 2080;
      uint64_t v21 = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Baseband failed to go into fast dormancy due to %s: 0x%x (%s)", buf, 0x1Cu);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 80);
    if (v7)
    {
      int v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        __int16 v9 = v8;
        uint64_t v10 = *(void *)(v2 + 72);
        if (v10)
        {
          int v11 = *(_DWORD *)(v1 + 12);
          if (v11 == 25 || v11 == 513) {
            (*(void (**)(void))(*(void *)v10 + 32))(*(void *)(v2 + 72));
          }
          (*(void (**)(uint64_t, void, void))(*(void *)v10 + 56))(v10, 0, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else if (v5)
  {
    uint64_t v12 = *(void *)(v1 + 32);
    *(_DWORD *)buf = 136315138;
    uint64_t v17 = v12;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Baseband dormancy request sent successfully due to %s: OK", buf, 0xCu);
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENS_10shared_ptrINS1_5Model7RequestEEEPKcN8dispatch13group_sessionEEUb0_E3__4NS_14default_deleteISB_EEED1B8ne180100Ev(&v15);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v14);
}

void sub_22242C614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENS_10shared_ptrINS1_5Model7RequestEEEPKcN8dispatch13group_sessionEEUb0_E3__4NS_14default_deleteISB_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENS_10shared_ptrINS1_5Model7RequestEEEPKcN8dispatch13group_sessionEEUb0_E3__4NS_14default_deleteISB_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 8));
    MEMORY[0x223C9A950](v2, 0x1070C40D7EBF016);
  }
  return a1;
}

void ___ZN16QMIVirtualClient4sendIN3wds10DormantReq7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (a1[5]) {
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_22242C710(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0>(dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0,dispatch_queue_s *::default_delete<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void **)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = v2[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v3;
      LOWORD(v14) = 2080;
      *(void *)((char *)&v14 + 2) = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I handleEventReportInd returned error=0x%04x (%s)", buf, 0x12u);
    }
    BOOL v5 = (std::__shared_weak_count *)v2[10];
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = v2[9];
        if (v8) {
          (*(void (**)(uint64_t, void, void))(*(void *)v8 + 56))(v8, 0, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  else
  {
    uint64_t v12 = buf;
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&long long v14 = 0x40000000;
    *((void *)&v14 + 1) = ___ZZN8dormancy24QMIDormancyCommandDriver20handleEventReportIndERKN3wds11EventReport10IndicationEENK3__0clEv_block_invoke;
    uint64_t v15 = &__block_descriptor_tmp_90_2;
    uint64_t v16 = v2;
    qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>((qmi::MessageBase *)(v1 + 8), 24, (uint64_t)&v12);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_22242C8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZZN8dormancy24QMIDormancyCommandDriver20handleEventReportIndERKN3wds11EventReport10IndicationEENK3__0clEv_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    uint64_t v11 = asString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I EventReportInd, dormancy status: %s", (uint8_t *)&v10, 0xCu);
  }
  BOOL v5 = (std::__shared_weak_count *)v3[10];
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = v3[9];
      if (v8)
      {
        if (*a2 >= 5u) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = *a2;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 56))(v8, 1, v9);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22242C9E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEvEUb1_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_DWORD **a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = v1[3];
  uint64_t v4 = *(NSObject **)(*(void *)v1 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v3;
      LOWORD(v11) = 2080;
      *(void *)((char *)&v11 + 2) = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Error in response to GetDormancyStatus with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Response to GetDormancyStatus received", buf, 2u);
    }
    uint64_t v9 = buf;
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&long long v11 = 0x40000000;
    *((void *)&v11 + 1) = ___ZZZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEvEUb1_ENK3__6clEv_block_invoke;
    uint64_t v12 = &__block_descriptor_tmp_91_1;
    uint64_t v13 = v2;
    qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>((qmi::MessageBase *)(v1 + 2), 1, (uint64_t)&v9);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_22242CB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZZZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEvEUb1_ENK3__6clEv_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    uint64_t v11 = asString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I get dormancy status: %s", (uint8_t *)&v10, 0xCu);
  }
  BOOL v5 = (std::__shared_weak_count *)v3[10];
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = v3[9];
      if (v8)
      {
        if (*a2 >= 5u) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = *a2;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 56))(v8, 1, v9);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22242CC88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN3wds17GetDormancyStatus7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    BOOL v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[5])
      {
        uint64_t v7 = a1[4];
        uint64_t v8 = a2[1];
        v10[0] = *a2;
        v10[1] = v8;
        uint64_t v9 = a2[2];
        v10[2] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v10);
        (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v10);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v10);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_22242CD40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6D58;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6D58;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FilteringPortsList1>((void *)(a1 + 16));
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::FilteringPortsList1>(a2, (uint64_t *)(a1 + 16));
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::clone()
{
}

void sub_22242D180(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1ENS_13group_sessionEEUb2_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  *(void *)&v13[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  int v10 = a1;
  uint64_t v11 = v1;
  int v2 = *(_DWORD *)(v1 + 12);
  char v3 = *(NSObject **)(*(void *)v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 67109378;
      v13[0] = v2;
      LOWORD(v13[1]) = 2080;
      *(void *)((char *)&v13[1] + 2) = qmi::asString();
      uint64_t v5 = "#I Command to filter unsolicited packets (ver 1) failed with code = 0x%x (%s)";
      uint64_t v6 = v3;
      uint32_t v7 = 18;
LABEL_9:
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    if (*(unsigned char *)(v1 + 32)) {
      uint64_t v8 = "enabled";
    }
    else {
      uint64_t v8 = "disabled";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v13 = v8;
    uint64_t v5 = "#I Filtering of unsolicited packets (ver 1) has been %s";
    uint64_t v6 = v3;
    uint32_t v7 = 12;
    goto LABEL_9;
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_22242D2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *_ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 8));
    MEMORY[0x223C9A950](v2, 0x1060C4094D43FBBLL);
  }
  return a1;
}

void ___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets17RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      BOOL v4 = v3;
      if (a1[5]) {
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_22242D3BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6DE0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6DE0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FilteringPortsList2>((void *)(a1 + 16));
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::FilteringPortsList2>(a2, (uint64_t *)(a1 + 16));
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::clone()
{
}

void sub_22242D57C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2ENS_13group_sessionEEUb3_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  *(void *)&v13[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  int v10 = a1;
  uint64_t v11 = v1;
  int v2 = *(_DWORD *)(v1 + 12);
  char v3 = *(NSObject **)(*(void *)v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 67109378;
      v13[0] = v2;
      LOWORD(v13[1]) = 2080;
      *(void *)((char *)&v13[1] + 2) = qmi::asString();
      uint64_t v5 = "#I Command to filter unsolicited packets (ver 2) failed with code = 0x%x (%s)";
      uint64_t v6 = v3;
      uint32_t v7 = 18;
LABEL_9:
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    if (*(unsigned char *)(v1 + 32)) {
      uint64_t v8 = "enabled";
    }
    else {
      uint64_t v8 = "disabled";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v13 = v8;
    uint64_t v5 = "#I Filtering of unsolicited packets (ver 2) has been %s";
    uint64_t v6 = v3;
    uint32_t v7 = 12;
    goto LABEL_9;
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_22242D6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void ___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets27RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      BOOL v4 = v3;
      if (a1[5]) {
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_22242D768(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6E68;
  int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6E68;
  int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FilteringPortsList3>(a1 + 16);
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::FilteringPortsList3>((_WORD **)a2, a1 + 16);
  uint32_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)BOOL v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::clone()
{
}

void sub_22242D930(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C406F1F2BB1);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3ENS_13group_sessionEEUb4_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  *(void *)&v13[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  int v10 = a1;
  uint64_t v11 = v1;
  int v2 = *(_DWORD *)(v1 + 12);
  char v3 = *(NSObject **)(*(void *)v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 67109378;
      v13[0] = v2;
      LOWORD(v13[1]) = 2080;
      *(void *)((char *)&v13[1] + 2) = qmi::asString();
      uint64_t v5 = "#I Command to filter unsolicited packets (ver 3) failed with code = 0x%x (%s)";
      uint64_t v6 = v3;
      uint32_t v7 = 18;
LABEL_9:
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    if (*(unsigned char *)(v1 + 32)) {
      uint64_t v8 = "enabled";
    }
    else {
      uint64_t v8 = "disabled";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v13 = v8;
    uint64_t v5 = "#I Filtering of unsolicited packets (ver 3) has been %s";
    uint64_t v6 = v3;
    uint32_t v7 = 12;
    goto LABEL_9;
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_22242DA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void ___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets37RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      BOOL v4 = v3;
      if (a1[5]) {
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_22242DB1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>(void *a1, int **a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  __p = 0;
  v39 = 0;
  uint64_t v40 = 0;
  std::vector<unsigned short>::vector(&__p, 400);
  unint64_t v37 = 0;
  int v10 = (std::__shared_weak_count *)a1[10];
  if (!v10)
  {
    uint64_t v11 = 0;
LABEL_33:
    uint64_t v33 = a1[5];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v34 = *a3;
      *(_DWORD *)buf = 67109120;
      unsigned int v42 = v34;
      _os_log_impl(&dword_22231A000, v33, OS_LOG_TYPE_DEFAULT, "#I Failed on getting port lists on the interface %u", buf, 8u);
    }
    uint64_t v32 = 0;
LABEL_36:
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v10);
  if (!v11) {
    goto LABEL_33;
  }
  uint64_t v12 = a1[9];
  if (!v12
    || ((*(uint64_t (**)(uint64_t, void, uint64_t, void *, uint64_t, unint64_t *))(*(void *)v12 + 72))(v12, *a3, a4, __p, 400, &v37) & 1) == 0)
  {
    goto LABEL_33;
  }
  unint64_t v13 = v37;
  unint64_t v14 = v37 >> 1;
  unsigned int v15 = *a5 + (v37 >> 1);
  *a5 = v15;
  if (v15 > 0x190)
  {
    uint64_t v36 = a1[5];
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      unsigned int v42 = v15;
      __int16 v43 = 1024;
      int v44 = 400;
      _os_log_impl(&dword_22231A000, v36, OS_LOG_TYPE_DEFAULT, "#I total number of port lists (%u) is exceeded more than the max number of port lists (%u) to fit a QMI frame size limit (2K)", buf, 0xEu);
    }
    uint64_t v32 = 0;
  }
  else
  {
    if (v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = a2 + 2;
      if ((a4 & 4) != 0) {
        int v18 = 1536;
      }
      else {
        int v18 = 4352;
      }
      if (a4) {
        int v19 = 4;
      }
      else {
        int v19 = 6;
      }
      uint64_t v20 = (v13 >> 1);
      uint64_t v21 = a2[1];
      do
      {
        int v22 = *((unsigned __int16 *)__p + v16);
        if ((unint64_t)v21 >= *v17)
        {
          uint64_t v23 = v21 - *a2;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = *v17 - (void)*a2;
          uint64_t v25 = v24 >> 1;
          if (v24 >> 1 <= (unint64_t)(v23 + 1)) {
            uint64_t v25 = v23 + 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(a2 + 2), v26);
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v28 = (int *)&v27[4 * v23];
          *unint64_t v28 = v18 | (v22 << 16) | v19;
          uint64_t v21 = v28 + 1;
          size_t v30 = (char *)*a2;
          uint64_t v29 = (char *)a2[1];
          if (v29 != (char *)*a2)
          {
            do
            {
              int v31 = *((_DWORD *)v29 - 1);
              v29 -= 4;
              *--unint64_t v28 = v31;
            }
            while (v29 != v30);
            uint64_t v29 = (char *)*a2;
          }
          *a2 = v28;
          a2[1] = v21;
          a2[2] = (int *)&v27[4 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *v21++ = v18 | (v22 << 16) | v19;
        }
        a2[1] = v21;
        ++v16;
      }
      while (v16 != v20);
      uint64_t v32 = 1;
      goto LABEL_36;
    }
    uint64_t v32 = 1;
  }
LABEL_37:
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_38:
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  return v32;
}

void sub_22242DE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    BOOL v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_22242DEC0(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>(void *a1, void *a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  __p = 0;
  unsigned int v42 = 0;
  uint64_t v43 = 0;
  std::vector<unsigned short>::vector(&__p, 400);
  unint64_t v40 = 0;
  int v10 = (std::__shared_weak_count *)a1[10];
  if (!v10)
  {
    uint64_t v11 = 0;
LABEL_33:
    uint64_t v35 = a1[5];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v36 = *a3;
      *(_DWORD *)buf = 67109120;
      unsigned int v45 = v36;
      _os_log_impl(&dword_22231A000, v35, OS_LOG_TYPE_DEFAULT, "#I Failed on getting port lists on the interface %u", buf, 8u);
    }
    uint64_t v34 = 0;
LABEL_36:
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v10);
  if (!v11) {
    goto LABEL_33;
  }
  uint64_t v12 = a1[9];
  if (!v12
    || ((*(uint64_t (**)(uint64_t, void, uint64_t, void *, uint64_t, unint64_t *))(*(void *)v12 + 72))(v12, *a3, a4, __p, 400, &v40) & 1) == 0)
  {
    goto LABEL_33;
  }
  unint64_t v13 = v40;
  unint64_t v14 = v40 >> 1;
  unsigned int v15 = *a5 + (v40 >> 1);
  *a5 = v15;
  if (v15 > 0x190)
  {
    uint64_t v38 = a1[5];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      unsigned int v45 = v15;
      __int16 v46 = 1024;
      int v47 = 400;
      _os_log_impl(&dword_22231A000, v38, OS_LOG_TYPE_DEFAULT, "#I total number of port lists (%u) is exceeded more than the max number of port lists (%u) to fit a QMI frame size limit (2K)", buf, 0xEu);
    }
    uint64_t v34 = 0;
  }
  else
  {
    if (v14)
    {
      uint64_t v16 = 0;
      if (a4) {
        char v17 = 4;
      }
      else {
        char v17 = 6;
      }
      char v39 = v17;
      if ((a4 & 4) != 0) {
        char v18 = 6;
      }
      else {
        char v18 = 17;
      }
      int v19 = a2 + 2;
      uint64_t v20 = (v13 >> 1);
      uint64_t v21 = (char *)a2[1];
      do
      {
        unsigned int v22 = *a3;
        __int16 v23 = *((_WORD *)__p + v16);
        if ((unint64_t)v21 >= *v19)
        {
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*a2] >> 1);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0x2AAAAAAAAAAAAAAALL) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*v19 - *a2) >> 1) > v25) {
            unint64_t v25 = 0x5555555555555556 * ((uint64_t)(*v19 - *a2) >> 1);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v19 - *a2) >> 1) >= 0x1555555555555555) {
            unint64_t v26 = 0x2AAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(a2 + 2), v26);
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v28 = &v27[6 * v24];
          *unint64_t v28 = v22;
          v28[1] = v39;
          v28[2] = v18;
          v28[3] = 0;
          *((_WORD *)v28 + 2) = v23;
          size_t v30 = (_WORD *)*a2;
          uint64_t v29 = (_WORD *)a2[1];
          int v31 = v28;
          if (v29 != (_WORD *)*a2)
          {
            do
            {
              int v32 = *(_DWORD *)(v29 - 3);
              v29 -= 3;
              __int16 v33 = v29[2];
              *(_DWORD *)(v31 - 6) = v32;
              v31 -= 6;
              *((_WORD *)v31 + 2) = v33;
            }
            while (v29 != v30);
            uint64_t v29 = (_WORD *)*a2;
          }
          uint64_t v21 = v28 + 6;
          *a2 = v31;
          a2[1] = v28 + 6;
          a2[2] = &v27[6 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *uint64_t v21 = v22;
          v21[1] = v39;
          v21[2] = v18;
          v21[3] = 0;
          *((_WORD *)v21 + 2) = v23;
          v21 += 6;
        }
        a2[1] = v21;
        ++v16;
      }
      while (v16 != v20);
      uint64_t v34 = 1;
      goto LABEL_36;
    }
    uint64_t v34 = 1;
  }
LABEL_37:
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_38:
  if (__p)
  {
    unsigned int v42 = __p;
    operator delete(__p);
  }
  return v34;
}

void sub_22242E244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  std::vector<unsigned short>::vector(&__p, 400);
  unint64_t v41 = 0;
  int v10 = (std::__shared_weak_count *)a1[10];
  if (!v10)
  {
    uint64_t v11 = 0;
LABEL_33:
    uint64_t v35 = a1[5];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v36 = *a3;
      *(_DWORD *)buf = 67109120;
      unsigned int v46 = v36;
      _os_log_impl(&dword_22231A000, v35, OS_LOG_TYPE_DEFAULT, "#I Failed on getting port lists on the interface %u", buf, 8u);
    }
    uint64_t v34 = 0;
LABEL_36:
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v10);
  if (!v11) {
    goto LABEL_33;
  }
  uint64_t v12 = a1[9];
  if (!v12
    || ((*(uint64_t (**)(uint64_t, void, uint64_t, void *, uint64_t, unint64_t *))(*(void *)v12 + 72))(v12, *a3, a4, __p, 400, &v41) & 1) == 0)
  {
    goto LABEL_33;
  }
  unint64_t v13 = v41;
  unint64_t v14 = v41 >> 1;
  unsigned int v15 = *a5 + (v41 >> 1);
  *a5 = v15;
  if (v15 > 0x190)
  {
    uint64_t v38 = a1[5];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      unsigned int v46 = v15;
      __int16 v47 = 1024;
      int v48 = 400;
      _os_log_impl(&dword_22231A000, v38, OS_LOG_TYPE_DEFAULT, "#I total number of port lists (%u) is exceeded more than the max number of port lists (%u) to fit a QMI frame size limit (2K)", buf, 0xEu);
    }
    uint64_t v34 = 0;
  }
  else
  {
    if (v14)
    {
      uint64_t v16 = 0;
      if (a4) {
        char v17 = 4;
      }
      else {
        char v17 = 6;
      }
      char v40 = v17;
      if ((a4 & 4) != 0) {
        char v18 = 6;
      }
      else {
        char v18 = 17;
      }
      char v39 = (void *)(a2 + 8);
      int v19 = (void *)(a2 + 24);
      uint64_t v20 = (v13 >> 1);
      uint64_t v21 = *(char **)(a2 + 16);
      do
      {
        unsigned int v22 = *a3;
        __int16 v23 = *((_WORD *)__p + v16);
        if ((unint64_t)v21 >= *v19)
        {
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*v39] >> 1);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0x2AAAAAAAAAAAAAAALL) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*v19 - *v39) >> 1) > v25) {
            unint64_t v25 = 0x5555555555555556 * ((uint64_t)(*v19 - *v39) >> 1);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v19 - *v39) >> 1) >= 0x1555555555555555) {
            unint64_t v26 = 0x2AAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>(a2 + 24, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v28 = &v27[6 * v24];
          *unint64_t v28 = v22;
          v28[1] = v40;
          v28[2] = v18;
          v28[3] = 0;
          *((_WORD *)v28 + 2) = v23;
          size_t v30 = *(_WORD **)(a2 + 8);
          uint64_t v29 = *(_WORD **)(a2 + 16);
          int v31 = v28;
          if (v29 != v30)
          {
            do
            {
              int v32 = *(_DWORD *)(v29 - 3);
              v29 -= 3;
              __int16 v33 = v29[2];
              *(_DWORD *)(v31 - 6) = v32;
              v31 -= 6;
              *((_WORD *)v31 + 2) = v33;
            }
            while (v29 != v30);
            uint64_t v29 = (_WORD *)*v39;
          }
          uint64_t v21 = v28 + 6;
          *(void *)(a2 + 8) = v31;
          *(void *)(a2 + 16) = v28 + 6;
          *(void *)(a2 + 24) = &v27[6 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *uint64_t v21 = v22;
          v21[1] = v40;
          v21[2] = v18;
          v21[3] = 0;
          *((_WORD *)v21 + 2) = v23;
          v21 += 6;
        }
        *(void *)(a2 + 16) = v21;
        *(_WORD *)a2 = -21845 * ((v21 - *(_DWORD *)(a2 + 8)) >> 1);
        ++v16;
      }
      while (v16 != v20);
      uint64_t v34 = 1;
      goto LABEL_36;
    }
    uint64_t v34 = 1;
  }
LABEL_37:
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_38:
  if (__p)
  {
    uint64_t v43 = __p;
    operator delete(__p);
  }
  return v34;
}

void sub_22242E614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::find<int>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::~__func()
{
}

void *std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D4C6ED8;
  return result;
}

void std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4C6ED8;
}

uint64_t std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::target_type()
{
}

void *std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint8x8_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22242EA2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  unint64_t v7 = (unsigned char *)(*a2 - v5);
  *unint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::clone()
{
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_DWORD **a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  unint64_t v7 = a1;
  uint64_t v8 = v1;
  unint64_t v2 = *(dormancy::QMIDormancyCommandDriver **)v1;
  char v3 = *(NSObject **)(*(void *)v1 + 40);
  if (v1[5])
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = asStringBool();
      int v6 = v1[5];
      *(_DWORD *)buf = 136315650;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 2080;
      uint64_t v14 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "DataActivityInfo[llfilter %s], Error code = 0x%x (%s), setting fIsLLFiltersInstalled to unknown", buf, 0x1Cu);
    }
    *((_WORD *)v2 + 84) = 0;
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v10 = asStringBool();
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I DataActivityInfo[llfilter %s] success", buf, 0xCu);
  }
  dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11NS_14default_deleteIS3_EEED1B8ne180100Ev((uint64_t *)&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_22242EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *_ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11NS_14default_deleteIS3_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 16));
    MEMORY[0x223C9A950](v2, 0x1060C404F12E032);
  }
  return a1;
}

void ___ZN16QMIVirtualClient4sendIN3wds16DataActivityInfo7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      if (a1[5]) {
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_22242ED4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataQOSHelper::QMIDataQOSHelper(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, NSObject **a6)
{
  *(void *)a1 = MEMORY[0x263F03628] + 16;
  PersonalitySpecificImpl::PersonalitySpecificImpl();
  *(void *)a1 = &unk_26D4C7008;
  *(void *)(a1 + 24) = &unk_26D4C70B0;
  *(void *)(a1 + 32) = &unk_26D4C7128;
  *(void *)(a1 + 40) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 48) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v19, (const char *)*MEMORY[0x263F03770], "DATA.QMIQOSHelper");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v19);
  *(void *)(a1 + 64) = *a4;
  uint64_t v12 = a4[1];
  *(void *)(a1 + 72) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a5;
  uint64_t v13 = a5[1];
  *(void *)(a1 + 88) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v14 = a2[1];
  v18[0] = *a2;
  v18[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a4 + 480))(&v17);
  uint64_t v15 = *a6;
  dispatch_object_t v16 = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  QMIQOSClientIPInterface::createQMIQOSClientIP((uint64_t)v18, a1 + 24, (uint64_t)&v17, 1, &v16);
}

void sub_22242F03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v21) {
    dispatch_release(v21);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  unint64_t v24 = (std::__shared_weak_count *)*((void *)v19 + 15);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  unint64_t v25 = (std::__shared_weak_count *)*((void *)v19 + 13);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  unint64_t v26 = (std::__shared_weak_count *)*((void *)v19 + 11);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)v19 + 9);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  MEMORY[0x223C99A30](v20);
  unint64_t v28 = (std::__shared_weak_count *)*((void *)v19 + 6);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  PersonalitySpecificImpl::~PersonalitySpecificImpl(v19);
  PersonalitySpecific::~PersonalitySpecific(v19);
  _Unwind_Resume(a1);
}

void sub_22242F118()
{
}

void QMIDataQOSHelper::~QMIDataQOSHelper(QMIDataQOSHelper *this)
{
  *(void *)this = &unk_26D4C7008;
  *((void *)this + 3) = &unk_26D4C70B0;
  *((void *)this + 4) = &unk_26D4C7128;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  MEMORY[0x223C99A30]((char *)this + 56);
  int v6 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }

  PersonalitySpecificImpl::~PersonalitySpecificImpl(this);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  QMIDataQOSHelper::~QMIDataQOSHelper(this);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  QMIDataQOSHelper::~QMIDataQOSHelper(this);
  PersonalitySpecific::~PersonalitySpecific(v1);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMIDataQOSHelper::~QMIDataQOSHelper(QMIDataQOSHelper *this)
{
  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 24));

  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 32));

  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 24));
}

{
  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 32));
}

void QMIDataQOSHelper::setCurrentQosFlow_sync(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4)
  {
    unint64_t v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      unint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[15].__on_zero_shared_weak)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_22242F36C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataQOSHelper::setCurrentQosFlow_sync(uint64_t a1, uint64_t a2)
{
}

void QMIDataQOSHelper::cleanCurrentQosFlows_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(std::__shared_weak_count **)(a1 + 72);
  if (v6)
  {
    int v6 = std::__shared_weak_count::lock(v6);
    unint64_t v7 = v6;
    if (v6) {
      int v6 = *(std::__shared_weak_count **)(a1 + 64);
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v6->__vftable[16].~__shared_weak_count_0)(v6, a2, a3);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_22242F438(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataQOSHelper::cleanCurrentQosFlows_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void QMIDataQOSHelper::deleteCurrentQosFlow_sync(QMIDataQOSHelper *this, uint64_t a2)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4)
  {
    unint64_t v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[16].~__shared_weak_count)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_22242F4FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataQOSHelper::deleteCurrentQosFlow_sync(QMIDataQOSHelper *this, uint64_t a2)
{
}

uint64_t QMIDataQOSHelper::requestQos(void *a1, uint64_t a2, uint64_t a3, const void **a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v6 = (std::__shared_weak_count *)a1[11];
  if (v6)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v6);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = a1[10];
      if (v13)
      {
        uint64_t v14 = a1[7];
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          unint64_t v24 = "requestQos";
          __int16 v25 = 2080;
          uint64_t v26 = asString();
          __int16 v27 = 1024;
          int v28 = a5;
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: with %s flowIndex %d", buf, 0x1Cu);
        }
        if (a2 == 2)
        {
          uint64_t v18 = a1[14];
          if (!v18) {
            goto LABEL_16;
          }
          ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v21, a4);
          int v19 = (*(uint64_t (**)(uint64_t, uint64_t, const void **, uint64_t))(*(void *)v18 + 16))(v18, a3, &v21, a5);
          ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v21);
          if (!v19) {
            goto LABEL_16;
          }
        }
        else if (a2 != 1 {
               || (uint64_t v15 = a1[12]) == 0
        }
               || (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v22, a4), char v16 = (*(uint64_t (**)(uint64_t, uint64_t, const void **, uint64_t))(*(void *)v15 + 16))(v15, a3, &v22, a5), ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v22), (v16 & 1) == 0))
        {
LABEL_16:
          uint64_t v17 = 2;
          goto LABEL_17;
        }
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 104))(v13, a1 + 4, a2, a5, a3);
      }
      uint64_t v17 = 0;
LABEL_17:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      return v17;
    }
  }
  return 0;
}

void sub_22242F740(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataQOSHelper::releaseQos(void *a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = a1[7];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315650;
    uint64_t v9 = "releaseQos";
    __int16 v10 = 2080;
    uint64_t v11 = asString();
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: with %s flowId %d", (uint8_t *)&v8, 0x1Cu);
  }
  if (a2 == 2)
  {
    uint64_t v7 = a1[14];
    if (!v7) {
      return;
    }
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    uint64_t v7 = a1[12];
    if (v7) {
LABEL_8:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a3);
  }
}

void non-virtual thunk to'QMIDataQOSHelper::releaseQos(uint64_t a1, int a2, uint64_t a3)
{
}

void *QMIDataQOSHelper::createQoSClientOnDemand(void *result, int a2)
{
  if (a2 == 2)
  {
    __n128 result = (void *)result[14];
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 48))();
    }
  }
  else if (a2 == 1)
  {
    __n128 result = (void *)result[12];
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 48))();
    }
  }
  return result;
}

void *QMIDataQOSHelper::releaseQoSClient(void *result, int a2)
{
  if (a2 == 2)
  {
    __n128 result = (void *)result[14];
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 56))();
    }
  }
  else if (a2 == 1)
  {
    __n128 result = (void *)result[12];
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 56))();
    }
  }
  return result;
}

void QMIDataQOSHelper::QosRequestAccepted(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = *((void *)this + 10);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 112))(v9, a2, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_22242F9C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataQOSHelper::QosRequestAccepted(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
}

void QMIDataQOSHelper::QosRequestFailed(QMIDataQOSHelper *this, uint64_t a2)
{
  char v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *((void *)this + 10);
      if (v7) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 120))(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_22242FA78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataQOSHelper::QosRequestFailed(QMIDataQOSHelper *this, uint64_t a2)
{
}

void QMIDataQOSHelper::QosStatusInfo(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = *((void *)this + 10);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 128))(v9, a2, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_22242FB30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataQOSHelper::QosStatusInfo(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
}

uint64_t QMIDataQOSHelper::getPdpId(std::__shared_weak_count **this)
{
  uint64_t v2 = std::__shared_weak_count::lock(this[9]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[8]->__vftable[1].__get_deleter)(this[8]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_22242FBB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataQOSHelper::getPdpId(std::__shared_weak_count **this)
{
  return QMIDataQOSHelper::getPdpId(this - 3);
}

uint64_t QMIDataQOSHelper::getConnectionMask(std::__shared_weak_count **this)
{
  uint64_t v2 = std::__shared_weak_count::lock(this[9]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *, void))this[8]->__vftable[10].__on_zero_shared)(this[8], 0);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_22242FC3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataQOSHelper::getConnectionMask(std::__shared_weak_count **this)
{
  return QMIDataQOSHelper::getConnectionMask(this - 3);
}

uint64_t QMIDataQOSHelper::shutDownQOS(QMIDataQOSHelper *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  uint64_t result = *((void *)this + 14);
  if (result)
  {
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v4();
  }
  return result;
}

uint64_t QMIDataQOSHelper::dumpState(QMIDataQOSHelper *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t result = *((void *)this + 14);
  if (result)
  {
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void Mav20QMICDMASettingsCommandDriver::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_22242FE20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mav20QMICDMASettingsCommandDriver::init(Registry **this)
{
  uint64_t v2 = (char *)(this + 11);
  Registry::createRestModuleOneTimeUseConnection(&v4, this[7]);
  ctu::RestModule::connect();
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ctu::rest::property_source_t<calls_active_in_settings>::bind(this + 13, (uint64_t)v2);
}

void sub_22242FEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mav20QMICDMASettingsCommandDriver::Mav20QMICDMASettingsCommandDriver(uint64_t a1, void *a2, dispatch_object_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = MEMORY[0x263F038B8] + 16;
  int v6 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v16, (const char *)*MEMORY[0x263F03770], "set.cdma.qmi");
  *int v6 = 0;
  v6[1] = 0;
  uint64_t v7 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  v14[0] = &unk_26D4C05F8;
  v14[3] = v14;
  int v8 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v14);
  *(void *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v8) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v14);
  *(void *)a1 = &unk_26D4C7338;
  *(void *)(a1 + 56) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 72), *(os_log_s **)(a1 + 40));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Mav20QMICDMASettingsCommandDriver");
  uint64_t v11 = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  ctu::RestModule::RestModule();
  if (v11) {
    dispatch_release(v11);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  return a1;
}

void sub_2224301D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((void *)(v25 - 88));
  MEMORY[0x223C9A950](v24, 0x10A1C40FF1576FELL);
  uint64_t v27 = *((void *)v21 + 6);
  *((void *)v21 + 6) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](&a21);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](&a17);
  MEMORY[0x223C99A30](v23);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v22);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(v21);
  _Unwind_Resume(a1);
}

void Mav20QMICDMASettingsCommandDriver::~Mav20QMICDMASettingsCommandDriver(Mav20QMICDMASettingsCommandDriver *this)
{
  *(void *)this = &unk_26D4C7338;
  std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::destroy(*((void **)this + 22));
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*((void **)this + 19));
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100]((void *)this + 13);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  MEMORY[0x223C99A30]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 1);

  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(this);
}

{
  uint64_t vars8;

  Mav20QMICDMASettingsCommandDriver::~Mav20QMICDMASettingsCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

uint64_t Mav20QMICDMASettingsCommandDriver::start(uint64_t **this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v20 = (Registry **)(this + 7);
  uint64_t SimSlotRange = subscriber::makeSimSlotRange();
  uint64_t v3 = v21;
  if (v21 != v22)
  {
    while (1)
    {
      uint64_t SimSlotRange = v23(*v3);
      if (SimSlotRange) {
        break;
      }
      if (++v3 == v22)
      {
        uint64_t v3 = v22;
        break;
      }
    }
    if (v3 != v22)
    {
      uint64_t v4 = this + 19;
      do
      {
        signed int v5 = *v3;
        unsigned int v6 = *v3 - 1;
        if (v6 > 2)
        {
          uint64_t v7 = 0;
          signed int v5 = 0;
        }
        else
        {
          uint64_t v7 = off_26460CDA8[v6];
        }
        int v8 = *v4;
        uint64_t v9 = this + 19;
        __int16 v10 = this + 19;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              __int16 v10 = (uint64_t **)v8;
              signed int v11 = *((_DWORD *)v8 + 7);
              if (v11 <= v5) {
                break;
              }
              int v8 = *v10;
              uint64_t v9 = v10;
              if (!*v10) {
                goto LABEL_17;
              }
            }
            if (v11 >= v5) {
              break;
            }
            int v8 = v10[1];
            if (!v8)
            {
              uint64_t v9 = v10 + 1;
              goto LABEL_17;
            }
          }
        }
        else
        {
LABEL_17:
          __int16 v12 = operator new(0x28uLL);
          v12[7] = v5;
          *((unsigned char *)v12 + 32) = 0;
          std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(this + 18, (uint64_t)v10, v9, (uint64_t *)v12);
          __int16 v10 = (uint64_t **)v12;
        }
        *((unsigned char *)v10 + 32) = -1;
        char v13 = (std::__shared_weak_count *)this[2];
        if (!v13 || (uint64_t v14 = this[1], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        char v16 = v15;
        Registry::getServerConnection((uint64_t *)&v24, *v20);
        long long v34 = 0u;
        long long v35 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v25, v7);
        uint64_t v17 = this[3];
        dispatch_object_t object = v17;
        if (v17) {
          dispatch_retain(v17);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "settings");
        int v28 = v14;
        uint64_t v29 = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        long long v27 = v24;
        long long v24 = 0uLL;
        qmi::Client::createWithQueueLocal();
        if (*((void *)&v27 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
        }
        if (v29) {
          std::__shared_weak_count::__release_weak(v29);
        }
        if (v31 < 0) {
          operator delete(__p);
        }
        if (object) {
          dispatch_release(object);
        }
        if (SBYTE7(v26) < 0) {
          operator delete(v25[0]);
        }
        v25[0] = 0;
        v25[1] = 0;
        long long v26 = v35;
        long long v35 = 0uLL;
        qmi::ClientRouter::addClient();
        qmi::Client::~Client((qmi::Client *)v25);
        qmi::ClientRouter::get();
        qmi::Client::~Client((qmi::Client *)&v34);
        if (*((void *)&v24 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        uint64_t v18 = v3 + 1;
        uint64_t v3 = v22;
        if (v18 != v22)
        {
          uint64_t v3 = v18;
          while (1)
          {
            uint64_t SimSlotRange = v23(*v3);
            if (SimSlotRange) {
              break;
            }
            if (++v3 == v22)
            {
              uint64_t v3 = v22;
              break;
            }
          }
        }
      }
      while (v3 != v22);
    }
  }
  if (capabilities::ct::supportsGemini((capabilities::ct *)SimSlotRange))
  {
    v33[0] = &unk_26D4C74F0;
    v33[1] = this;
    v33[3] = v33;
    qmi::ClientRouter::setHandler();
    std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v33);
  }
  *(void *)&long long v34 = &unk_26D4C7570;
  *((void *)&v34 + 1) = this;
  *((void *)&v35 + 1) = &v34;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v34);
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(this + 9));
  return qmi::ClientRouter::start();
}

void sub_2224307F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,dispatch_object_t object,uint64_t a37)
{
}

uint64_t Mav20QMICDMASettingsCommandDriver::stop(Mav20QMICDMASettingsCommandDriver *this)
{
  qmi::ClientRouter::stop();

  return ctu::RestModule::disconnect((Mav20QMICDMASettingsCommandDriver *)((char *)this + 88));
}

BOOL Mav20QMICDMASettingsCommandDriver::dialSettingCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = a2;
  int v24 = a2;
  uint64_t v8 = *(void *)(a1 + 176);
  if (!v8) {
    goto LABEL_11;
  }
  uint64_t v9 = a1 + 176;
  do
  {
    int v10 = *(_DWORD *)(v8 + 32);
    BOOL v11 = v10 < (int)a2;
    if (v10 >= (int)a2) {
      __int16 v12 = (uint64_t *)v8;
    }
    else {
      __int16 v12 = (uint64_t *)(v8 + 8);
    }
    if (!v11) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 176 || *(_DWORD *)(v9 + 32) > (int)a2)
  {
LABEL_11:
    char v13 = std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 168), a2, &v24);
    std::function<void ()(void)>::operator=(v13 + 5, a4);
    memset(v23, 0, sizeof(v23));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v23);
    uint64_t v14 = qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>((uint64_t)v23, 1);
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      char v16 = (char *)a3;
    }
    else {
      char v16 = *(char **)a3;
    }
    if (v15 >= 0) {
      unint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      unint64_t v17 = *(void *)(a3 + 8);
    }
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v14, v16, &v16[v17], v17);
    *qmi::MutableMessageBase::getTLV<vs::tlv::CallType>((uint64_t)v23, 16) = 0;
    if (!*(unsigned char *)(a1 + 136))
    {
      *(unsigned char *)(a1 + 136) = 1;
      uint64_t v18 = *(void *)(a1 + 128);
      if (v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 48))(v18, a1 + 136);
      }
    }
    if ((v6 - 1) >= 3) {
      int v19 = 0;
    }
    else {
      int v19 = v6;
    }
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<vs::VoiceDialCall::Request>(&v22, v19);
  }
  uint64_t v20 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
  BOOL result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_22231A000, v20, OS_LOG_TYPE_ERROR, "A call is already on going!", buf, 2u);
    return 0;
  }
  return result;
}

void sub_222430BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN33Mav20QMICDMASettingsCommandDriver28handleVoiceDialCallResp_syncEN10subscriber7SimSlotERKN2vs13VoiceDialCall8ResponseE_block_invoke(uint64_t a1, char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)(a1 + 48);
  char v3 = *a2;
  uint64_t v4 = (uint64_t **)(*(void *)(a1 + 32) + 144);
  *((unsigned char *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v4, *(_DWORD *)(a1 + 48), (_DWORD *)(a1 + 48))+ 32) = v3;
  signed int v5 = **((void **)v2 - 1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v4, *v2, v2)+ 32);
    v7[0] = 67109120;
    v7[1] = v6;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Call ID: %u", (uint8_t *)v7, 8u);
  }
}

void std::shared_ptr<Mav20QMICDMASettingsCommandDriver>::shared_ptr[abi:ne180100]<Mav20QMICDMASettingsCommandDriver,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_222430DE8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1}::operator() const(Mav20QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222430E10(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<Mav20QMICDMASettingsCommandDriver *,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver *)#1},std::allocator<Mav20QMICDMASettingsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav20QMICDMASettingsCommandDriver *,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver *)#1},std::allocator<Mav20QMICDMASettingsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav20QMICDMASettingsCommandDriver *,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver *)#1},std::allocator<Mav20QMICDMASettingsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1}::operator() const(Mav20QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void SimInstanceLoggable<Mav20QMICDMASettingsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<Mav20QMICDMASettingsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::destroy(a1[1]);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 5);
    operator delete(a1);
  }
}

void std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26D4C74F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C74F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(capabilities::ct *a1, int *a2)
{
  int v2 = *a2;
  uint64_t result = capabilities::ct::supportsGemini(a1);
  if (result)
  {
    memset(v5, 0, sizeof(v5));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v5);
    *qmi::MutableMessageBase::getTLV<vs::tlv::SubscriptionType>((uint64_t)v5, 1) = v2 == 2;
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<vs::BindSubscription::Request>(&v4, v2);
  }
  return result;
}

void sub_222431194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  uint64_t v23 = a10;
  a10 = 0;
  if (v23) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7570;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7570;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  LODWORD(v4) = *a2;
  cast_message_type<vs::VoiceCallStatus::Indication const&>::cast(a3, (qmi::MessageBase *)v23);
  if ((v4 - 1) >= 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v4;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  int v27 = v4;
  int v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 48) + 16))(*(void *)(v5 + 48), v4);
  int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v23);
  uint64_t v9 = TlvValue;
  if (!TlvValue) {
    goto LABEL_26;
  }
  int v10 = v8;
  int v28 = TlvValue;
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v30 = 0;
  tlv::parseV<vs::tlv::CallList>(&v28, v8, (uint64_t *)__p);
  BOOL v11 = v28;
  if (v28) {
    std::vector<vs::tlv::CallListItem>::__assign_with_size[abi:ne180100]<vs::tlv::CallListItem*,vs::tlv::CallListItem*>((char *)&v24, (char *)__p[0], (uint64_t)__p[1], 0x6DB6DB6DB6DB6DB7 * ((char *)__p[1] - (char *)__p[0]));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v11
    && (((uint64_t (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v23[0], 1, v9, v10) & 1) == 0)
  {
LABEL_26:
    uint64_t v21 = *v6;
    if (!os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    LOWORD(__p[0]) = 0;
    int v22 = "#I Voice call status doesn't have mandatory TLV \"Identifier List\" (0x01)";
LABEL_30:
    _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)__p, 2u);
    goto LABEL_31;
  }
  __int16 v12 = (unsigned __int8 *)v24;
  if (!(-73 * ((_BYTE)v25 - (_BYTE)v24)))
  {
    uint64_t v21 = *v6;
    if (!os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    LOWORD(__p[0]) = 0;
    int v22 = "#I No call instances reported";
    goto LABEL_30;
  }
  unsigned int v13 = (-73 * ((_BYTE)v25 - (_BYTE)v24));
  if (v13 >= 2)
  {
    uint64_t v14 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v13;
      _os_log_error_impl(&dword_22231A000, v14, OS_LOG_TYPE_ERROR, "Got '%d' call instances instead of just '1'; reading the first one",
        (uint8_t *)__p,
        8u);
      __int16 v12 = (unsigned __int8 *)v24;
    }
  }
  if (v12[1] == 9)
  {
    int v15 = *v12;
    char v16 = *v6;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v27)+ 32);
      LODWORD(__p[0]) = 67109376;
      HIDWORD(__p[0]) = v15;
      LOWORD(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 2) = v17;
      _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I Call end event for call %u with store %u", (uint8_t *)__p, 0xEu);
    }
    if (v15 == *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v27)+ 32)&& *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v27)+ 32) != 255)
    {
      if (*(unsigned char *)(v5 + 136))
      {
        *(unsigned char *)(v5 + 136) = 0;
        uint64_t v18 = *(void *)(v5 + 128);
        if (v18) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 48))(v18, v5 + 136);
        }
      }
      *(_OWORD *)__p = 0u;
      long long v30 = 0u;
      int v19 = std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 168), v4, &v27);
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)(v19 + 5));
      LODWORD(v28) = v4;
      uint64_t v20 = std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 168), v4, &v28);
      std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v20 + 5);
      *((unsigned char *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v28)+ 32) = -1;
      if (*((void *)&v30 + 1)) {
        (*(void (**)(void))(**((void **)&v30 + 1) + 48))(*((void *)&v30 + 1));
      }
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
    }
  }
LABEL_31:
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v23);
}

void sub_222431698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void cast_message_type<vs::VoiceCallStatus::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_2224317F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_22243183C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_222431880(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<vs::tlv::SubscriptionType>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<vs::tlv::SubscriptionType>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<vs::tlv::SubscriptionType>()
{
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<vs::BindSubscription::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_222431BC0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN33Mav20QMICDMASettingsCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    char v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = *v3;
    unsigned int v5 = *((_DWORD *)v3 + 2);
    if (v5 - 1 >= 3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = qmi::asString();
      int v9 = *(_DWORD *)(a2 + 4);
      int v10 = 136315394;
      uint64_t v11 = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v10, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7670;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2vs16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<vs::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_222431DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<vs::BindSubscription::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    __p = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      unsigned int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_222431E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_222431EDC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  char v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_222431F20(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x48uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[8] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void qmi::ClientRouter::SendProxy::SendProxy<vs::VoiceDialCall::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_222432078(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN33Mav20QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS6_8functionIFvvEEEE3__2EEOS1_OT__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  uint64_t v4 = *((unsigned int *)v2 + 2);
  qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response((qmi::MessageBase *)v15, a2);
  unsigned int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48), v4);
  uint64_t v6 = v5;
  int v7 = v16;
  if (v16)
  {
    os_log_t v8 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v7;
      int v9 = "Voice dial call response failed with error code = 0x%x";
      int v10 = (uint8_t *)v18;
      uint64_t v11 = v8;
      uint32_t v12 = 8;
LABEL_7:
      _os_log_error_impl(&dword_22231A000, v11, OS_LOG_TYPE_ERROR, v9, v10, v12);
    }
  }
  else
  {
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 0x40000000;
    void v18[2] = ___ZN33Mav20QMICDMASettingsCommandDriver28handleVoiceDialCallResp_syncEN10subscriber7SimSlotERKN2vs13VoiceDialCall8ResponseE_block_invoke;
    v18[3] = &__block_descriptor_tmp_15;
    int v19 = v4;
    v18[4] = v3;
    v18[5] = v5;
    *(void *)buf = v18;
    if (qmi::MessageBase::applyTlv<vs::tlv::CallIdentifier,void({block_pointer})(vs::tlv::CallIdentifier const&)>((qmi::MessageBase *)v15, 16, (uint64_t)buf))goto LABEL_11; {
    os_log_t v13 = *v6;
    }
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      int v9 = "No Call ID present";
      int v10 = buf;
      uint64_t v11 = v13;
      uint32_t v12 = 2;
      goto LABEL_7;
    }
  }
  if (*(unsigned char *)(v3 + 136))
  {
    *(unsigned char *)(v3 + 136) = 0;
    uint64_t v14 = *(void *)(v3 + 128);
    if (v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v3 + 136);
    }
  }
LABEL_11:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v15);
}

void sub_22243226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t __copy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvvEEEE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvvEEEE3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2,std::allocator<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C76F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2,std::allocator<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C76F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    int v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((unsigned char *)v9 + 32) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t QMIPhonebookCommandDriver::getPbTypeFor(unsigned int a1, int a2)
{
  if (a1 > 0xA) {
    return 6;
  }
  if (((1 << a1) & 0x4C0) != 0)
  {
    if (a2 == 4) {
      unsigned int v2 = 2;
    }
    else {
      unsigned int v2 = 6;
    }
    if (a2 == 1) {
      return 3;
    }
    else {
      return v2;
    }
  }
  if (((1 << a1) & 5) == 0) {
    return 6;
  }
  uint64_t result = 2;
  switch(a2)
  {
    case 1:
      uint64_t result = 0;
      break;
    case 2:
      uint64_t result = 1;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return 6;
    case 4:
      return result;
    case 8:
      uint64_t result = 4;
      break;
    default:
      if (a2 != 128) {
        return 6;
      }
      uint64_t result = 5;
      break;
  }
  return result;
}

uint64_t QMIPhonebookCommandDriver::getQMIPbTypeFor(uint64_t a1, int a2, int a3)
{
  if (a2 == 2) {
    uint64_t v5 = 8388610;
  }
  else {
    uint64_t v5 = 0x800000;
  }
  if (a2 == 2) {
    uint64_t v6 = 524290;
  }
  else {
    uint64_t v6 = 0x80000;
  }
  if (a2 == 2) {
    uint64_t v7 = 262146;
  }
  else {
    uint64_t v7 = 0x40000;
  }
  if (a2 == 2) {
    uint64_t v8 = 131074;
  }
  else {
    uint64_t v8 = 0x20000;
  }
  if (a2 == 2) {
    uint64_t result = 65538;
  }
  else {
    uint64_t result = 0x10000;
  }
  if (a2 == 2) {
    uint64_t v10 = 4294901762;
  }
  else {
    uint64_t v10 = 4294901760;
  }
  switch(a3)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = v8;
      break;
    case 2:
      BOOL isPBTypeSupportedInGlobalPBSession = QMIPhonebookCommandDriver::isPBTypeSupportedInGlobalPBSession(a1, a2);
      uint64_t result = v7;
      if (isPBTypeSupportedInGlobalPBSession) {
        uint64_t result = QMIPhonebookCommandDriver::getGlobalPhonebookType(a1, a2) | 0x40000;
      }
      break;
    case 3:
      uint64_t result = QMIPhonebookCommandDriver::getGlobalPhonebookType(a1, a2) | 0x10000;
      break;
    case 4:
      uint64_t result = v6;
      break;
    case 5:
      uint64_t result = v5;
      break;
    default:
      uint64_t result = v10;
      break;
  }
  return result;
}

BOOL QMIPhonebookCommandDriver::isPBTypeSupportedInGlobalPBSession(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v2 = a1 + 120;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 32) > a2 || *(unsigned __int8 *)(v5 + 40) == 255) {
    return 0;
  }
  uint64_t v10 = *(_DWORD **)(v5 + 48);
  int v9 = *(_DWORD **)(v5 + 56);
  if (v10 != v9)
  {
    while (*v10 != 2)
    {
      if (++v10 == v9)
      {
        uint64_t v10 = v9;
        return v10 != v9;
      }
    }
  }
  return v10 != v9;
}

uint64_t QMIPhonebookCommandDriver::getGlobalPhonebookType(uint64_t a1, int a2)
{
  if ((a2 - 1) > 1) {
    return 6;
  }
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v2 = a1 + 120;
  uint64_t v3 = v4;
  if (!v4) {
    return 255;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2) {
    return *(unsigned __int8 *)(v5 + 40);
  }
  else {
    return 255;
  }
}

void QMIPhonebookCommandDriver::create()
{
}

void sub_222432754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    MEMORY[0x223C9A950](v10, 0x10F1C40853389E9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIPhonebookCommandDriver::QMIPhonebookCommandDriver(uint64_t a1, uint64_t a2, NSObject **a3)
{
  v7[8] = *MEMORY[0x263EF8340];
  dispatch_object_t object = *a3;
  *a3 = 0;
  PhonebookCommandDriver::PhonebookCommandDriver();
  uint64_t v4 = (capabilities::ct *)object;
  if (object) {
    dispatch_release(object);
  }
  v7[0] = &unk_26D4BA498;
  v7[3] = v7;
  *(void *)(a1 + 88) = 0;
  if ((capabilities::ct::supportsGemini(v4) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 88)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v7);
  *(void *)a1 = &unk_26D4C7740;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 96), *(os_log_s **)(a1 + 40));
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  return a1;
}

void sub_222432988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  MEMORY[0x223C9A950](v3, 0x10A1C40FF1576FELL);
  uint64_t v5 = *((void *)v2 + 11);
  *((void *)v2 + 11) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  PhonebookCommandDriver::~PhonebookCommandDriver(v2);
  _Unwind_Resume(a1);
}

void sub_222432A3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x222432A34);
}

void *QMIPhonebookCommandDriver::bootstrap_sync(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I bootstrapping", (uint8_t *)&buf, 2u);
  }
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  BOOL v7 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  subscriber::makeSimSlotRange();
  uint64_t v8 = v29;
  if (v29 != v30)
  {
    while ((v31(*v8) & 1) == 0)
    {
      if (++v8 == v30)
      {
        uint64_t v8 = v30;
        break;
      }
    }
    while (v8 != v30)
    {
      if (*v8 == 1)
      {
        uint64_t v9 = "phonebook.1";
      }
      else if (*v8 == 2)
      {
        uint64_t v9 = "phonebook.2";
      }
      else
      {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v10 || (uint64_t v11 = *(void *)(a1 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      os_log_t v13 = v12;
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      Registry::getServerConnection((uint64_t *)&v32, *(Registry **)(a1 + 48));
      long long buf = 0u;
      long long v44 = 0u;
      std::string::basic_string[abi:ne180100]<0>(v33, v9);
      uint64_t v14 = *(NSObject **)(a1 + 24);
      dispatch_object_t object = v14;
      if (v14) {
        dispatch_retain(v14);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "phonebook");
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      int v15 = std::__shared_weak_count::lock(v13);
      if (v15)
      {
        int v16 = v15;
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v36 = v11;
        unint64_t v37 = v15;
        std::__shared_weak_count::__release_weak(v13);
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      else
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        std::__shared_weak_count::__release_weak(v13);
      }
      long long v35 = v32;
      long long v32 = 0uLL;
      qmi::Client::createWithQueueLocal();
      if (*((void *)&v35 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
      }
      if (v37) {
        std::__shared_weak_count::__release_weak(v37);
      }
      if (v39 < 0) {
        operator delete(__p);
      }
      if (object) {
        dispatch_release(object);
      }
      if (SBYTE7(v34) < 0) {
        operator delete(v33[0]);
      }
      v33[0] = 0;
      v33[1] = 0;
      long long v34 = v44;
      long long v44 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)v33);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&buf);
      if (*((void *)&v32 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
      }
      int v17 = v8 + 1;
      uint64_t v8 = v30;
      if (v17 != v30)
      {
        uint64_t v8 = v17;
        while ((v31(*v8) & 1) == 0)
        {
          if (++v8 == v30)
          {
            uint64_t v8 = v30;
            break;
          }
        }
      }
    }
  }
  subscriber::makeSimSlotRange();
  uint64_t v18 = (_DWORD *)*((void *)&buf + 1);
  int v19 = (_DWORD *)buf;
  if ((void)buf != *((void *)&buf + 1))
  {
    uint64_t v20 = (uint64_t (*)(void))v44;
    while ((v20(*v19) & 1) == 0)
    {
      if (++v19 == v18)
      {
        int v19 = v18;
        break;
      }
    }
    uint64_t v21 = (_DWORD *)*((void *)&buf + 1);
    while (v19 != v21)
    {
      LODWORD(v33[0]) = 0;
      LODWORD(v33[0]) = *v19;
      int v22 = (int)v33[0];
      uint64_t v23 = std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 112), (int)v33[0], v33);
      uint64_t v25 = v23 + 6;
      int v24 = v23[6];
      *((unsigned char *)v23 + 40) = -1;
      if (v24)
      {
        v23[7] = v24;
        operator delete(v24);
        *uint64_t v25 = 0;
        v25[1] = 0;
        v25[2] = 0;
      }
      *uint64_t v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      uint64_t v26 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 136), v22, v33)+ 6;
      std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*v26);
      *(v26 - 1) = (uint64_t *)v26;
      *uint64_t v26 = 0;
      v26[1] = 0;
      int v27 = v19 + 1;
      int v19 = v18;
      if (v27 != v18)
      {
        int v19 = v27;
        while ((v20(*v19) & 1) == 0)
        {
          if (++v19 == v18)
          {
            int v19 = v18;
            break;
          }
        }
      }
    }
  }
  *(void *)&long long buf = &unk_26D4C7910;
  *((void *)&buf + 1) = a1;
  *((void *)&v44 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&buf);
  *(void *)&long long buf = &unk_26D4C7990;
  *((void *)&buf + 1) = a1;
  *((void *)&v44 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&buf);
  *(void *)&long long buf = &unk_26D4C7A10;
  *((void *)&buf + 1) = a1;
  *((void *)&v44 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&buf);
  *(void *)&long long buf = &unk_26D4C7A90;
  *((void *)&buf + 1) = a1;
  *((void *)&v44 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&buf);
  *(void *)&long long buf = &unk_26D4C7B10;
  *((void *)&buf + 1) = a1;
  *((void *)&v44 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&buf);
  *(void *)&long long buf = &unk_26D4C7B90;
  *((void *)&buf + 1) = a1;
  *((void *)&v44 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&buf);
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  v42[0] = &unk_26D4C7C10;
  v42[1] = a1;
  v42[3] = v42;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v42);
  v41[0] = &unk_26D4C7C90;
  v41[1] = a1;
  v41[3] = v41;
  qmi::ClientRouter::setHandler();
  return std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v41);
}

void sub_2224330C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,dispatch_object_t object,uint64_t a35)
{
}

uint64_t QMIPhonebookCommandDriver::start_sync(QMIPhonebookCommandDriver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t QMIPhonebookCommandDriver::shutdown_sync()
{
  return qmi::ClientRouter::stop();
}

void QMIPhonebookCommandDriver::~QMIPhonebookCommandDriver(QMIPhonebookCommandDriver *this)
{
  *(void *)this = &unk_26D4C7740;
  std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(*((void **)this + 18));
  std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(*((void **)this + 15));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PhonebookCommandDriver::~PhonebookCommandDriver(this);
}

{
  uint64_t vars8;

  QMIPhonebookCommandDriver::~QMIPhonebookCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void QMIPhonebookCommandDriver::reset(uint64_t a1, int a2)
{
  int v8 = a2;
  uint64_t v4 = std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 112), a2, &v8);
  *((unsigned char *)v4 + 40) = -1;
  long long v6 = v4 + 6;
  uint64_t v5 = v4[6];
  if (v5)
  {
    v4[7] = v5;
    operator delete(v5);
  }
  *long long v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  BOOL v7 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 136), a2, &v8)+ 6;
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*v7);
  *(v7 - 1) = (uint64_t *)v7;
  *BOOL v7 = 0;
  v7[1] = 0;
}

uint64_t ___ZN25QMIPhonebookCommandDriver22handleRecordUpdate_indEN3qmi16SubscriptionTypeERKN3pbm12RecordUpdate10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = *a2;
  if (result > 0xA) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *((unsigned __int16 *)a2 + 1);
  if (((1 << result) & 0x4C0) != 0)
  {
    if (v6 != 4 && v6 != 1) {
      return result;
    }
LABEL_12:
    int v8 = a2[4];
    if (v8 == 3)
    {
      uint64_t v16 = *(void *)(v5 + 64);
      uint64_t v17 = *(unsigned int *)(a1 + 44);
      uint64_t PbTypeFor = QMIPhonebookCommandDriver::getPbTypeFor(result, v6);
      uint64_t v12 = *((unsigned __int16 *)a2 + 3);
      os_log_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 72);
      uint64_t v14 = v16;
      uint64_t v15 = v17;
    }
    else
    {
      if (v8 != 2 && v8 != 1) {
        return result;
      }
      uint64_t v9 = *(void *)(v5 + 64);
      uint64_t v10 = *(unsigned int *)(a1 + 44);
      uint64_t PbTypeFor = QMIPhonebookCommandDriver::getPbTypeFor(result, v6);
      uint64_t v12 = *((unsigned __int16 *)a2 + 3);
      os_log_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 64);
      uint64_t v14 = v9;
      uint64_t v15 = v10;
    }
    return v13(v14, v15, PbTypeFor, v12);
  }
  if (((1 << result) & 5) != 0
    && result == 2 * (*(_DWORD *)(a1 + 40) == 2)
    && (v6 <= 8 && ((1 << v6) & 0x116) != 0 || v6 == 128))
  {
    goto LABEL_12;
  }
  return result;
}

__n128 __Block_byref_object_copy__3(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke(uint64_t a1, unsigned __int8 **a2)
{
}

void populateEmergencyNumberCategory(os_log_t *a1, std::vector<std::string> *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (a3 != a4)
  {
    uint64_t v4 = a3;
    p_end_cap = (std::allocator<std::string> *)&a2->__end_cap_;
    do
    {
      int v8 = *a1;
      if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = (std::string *)pbm::asString(*v4);
        LODWORD(buf.__first_) = 136315138;
        *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v9;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Session Type: %s", (uint8_t *)&buf, 0xCu);
        int v8 = *a1;
      }
      uint64_t v10 = (char **)*((void *)v4 + 1);
      uint64_t v11 = (unsigned __int8 *)*((void *)v4 + 2);
      long long v35 = v4;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__first_) = 134217984;
        *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)((v11 - (unsigned __int8 *)v10) >> 5);
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Emergency numbers count: %lu", (uint8_t *)&buf, 0xCu);
      }
      while (v10 != (char **)v11)
      {
        uint64_t v12 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
        {
          pbm::asString(*(unsigned __int8 *)v10, &buf);
          p_std::__split_buffer<std::string> buf = (std::__split_buffer<std::string>::pointer)&buf;
          if (SHIBYTE(buf.__end_) < 0) {
            p_std::__split_buffer<std::string> buf = buf.__first_;
          }
          LODWORD(v39) = 136315138;
          *(void *)((char *)&v39 + 4) = p_buf;
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I Number category %s", (uint8_t *)&v39, 0xCu);
          if (SHIBYTE(buf.__end_) < 0) {
            operator delete(buf.__first_);
          }
        }
        *(_DWORD *)__str = 0;
        snprintf(__str, 4uLL, "%hhu", *(unsigned __int8 *)v10);
        long long v39 = 0uLL;
        uint64_t v40 = 0;
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v39, v10[1], v10[2], v10[2] - v10[1]);
        uint64_t v14 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
        {
          if (v40 >= 0) {
            uint64_t v15 = (std::string *)&v39;
          }
          else {
            uint64_t v15 = (std::string *)v39;
          }
          LODWORD(buf.__first_) = 136315138;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v15;
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I Emergency Number: %s", (uint8_t *)&buf, 0xCu);
        }
        if (v40 >= 0) {
          size_t v16 = HIBYTE(v40);
        }
        else {
          size_t v16 = *((void *)&v39 + 1);
        }
        memset(&v36, 0, sizeof(v36));
        std::string::basic_string[abi:ne180100]((uint64_t)&v36, v16 + 1);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &v36;
        }
        else {
          uint64_t v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        if (v16)
        {
          if (v40 >= 0) {
            uint64_t v18 = &v39;
          }
          else {
            uint64_t v18 = (long long *)v39;
          }
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 44;
        size_t v19 = strlen(__str);
        uint64_t v20 = std::string::append(&v36, __str, v19);
        std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
        v38[0] = v20->__r_.__value_.__l.__size_;
        *(void *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
        char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer end = a2->__end_;
        value = a2->__end_cap_.__value_;
        if (end >= value)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a2->__begin_) >> 3);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x555555555555555) {
            unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v30 = v28;
          }
          buf.__end_cap_.__value_ = p_end_cap;
          if (v30) {
            uint64_t v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          long long v32 = v31 + v27;
          buf.__first_ = v31;
          buf.__begin_ = v32;
          buf.__end_cap_.__value_ = &v31[v30];
          std::string::size_type v33 = v38[0];
          v32->__r_.__value_.__r.__words[0] = v21;
          v32->__r_.__value_.__l.__size_ = v33;
          *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v38 + 7);
          *((unsigned char *)&v32->__r_.__value_.__s + 23) = v22;
          buf.__end_ = v32 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(a2, &buf);
          uint64_t v26 = a2->__end_;
          std::__split_buffer<std::string>::~__split_buffer(&buf);
        }
        else
        {
          std::string::size_type v25 = v38[0];
          end->__r_.__value_.__r.__words[0] = v21;
          end->__r_.__value_.__l.__size_ = v25;
          *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v38 + 7);
          *((unsigned char *)&end->__r_.__value_.__s + 23) = v22;
          uint64_t v26 = end + 1;
          a2->__end_ = end + 1;
        }
        a2->__end_ = v26;
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40) < 0) {
          operator delete((void *)v39);
        }
        v10 += 4;
      }
      uint64_t v4 = v35 + 32;
    }
    while (v35 + 32 != a4);
  }
}

void sub_2224339A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__split_buffer<std::string> *a33)
{
  if (v33 < 0) {
    operator delete(v34);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke_8(uint64_t a1, unsigned __int8 **a2)
{
}

void ___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke_10(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(os_log_t **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  unsigned int v6 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (v4 - v5) >> 5;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Local Emergency sets count: %lu", (uint8_t *)&buf, 0xCu);
  }
  if (v5 != v4)
  {
    char v22 = v4;
    do
    {
      BOOL v7 = (char **)*((void *)v5 + 1);
      int v8 = (char **)*((void *)v5 + 2);
      uint64_t v9 = *v2;
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = pbm::asString(*v5);
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 2) - *((void *)v5 + 1)) >> 4);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Local Emergency Session Type: %s list count: %lu", (uint8_t *)&buf, 0x16u);
      }
      while (v7 != v8)
      {
        memset(&buf, 0, sizeof(buf));
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&buf, v7[3], v7[4], v7[4] - v7[3]);
        memset(&__s, 0, sizeof(__s));
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__s, *v7, v7[1], v7[1] - *v7);
        uint64_t v12 = *v2;
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          p_s = &__s;
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string::size_type v25 = 136315394;
          *(void *)&v25[4] = p_buf;
          *(_WORD *)&v25[12] = 2080;
          *(void *)&v25[14] = p_s;
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I Local Emergency Number: %s, Sub Service: %s", v25, 0x16u);
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__s.__r_.__value_.__l.__size_)
          {
            std::string::__init_copy_ctor_external(&v23, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            goto LABEL_19;
          }
        }
        else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
        {
          std::string v23 = __s;
          goto LABEL_19;
        }
        std::string::basic_string[abi:ne180100]<0>(&v23, "0");
LABEL_19:
        uint64_t v15 = std::string::insert(&v23, 0, ",", 1uLL);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        *(void *)&v25[16] = *((void *)&v15->__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v25 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (v25[23] >= 0) {
          uint64_t v17 = v25;
        }
        else {
          uint64_t v17 = *(const std::string::value_type **)v25;
        }
        if (v25[23] >= 0) {
          std::string::size_type v18 = v25[23];
        }
        else {
          std::string::size_type v18 = *(void *)&v25[8];
        }
        std::string::append(&buf, v17, v18);
        if ((v25[23] & 0x80000000) != 0) {
          operator delete(*(void **)v25);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        unint64_t v19 = v3[6];
        if (v19 >= v3[7])
        {
          uint64_t v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3 + 5, (long long *)&buf);
        }
        else
        {
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v3[6], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v20 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *(void *)(v19 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v19 = v20;
          }
          uint64_t v21 = v19 + 24;
          v3[6] = v19 + 24;
        }
        v3[6] = v21;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        v7 += 6;
      }
      v5 += 32;
    }
    while (v5 != v22);
  }
}

void sub_222433D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  *(void *)(v38 + 48) = v37;
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver27handlePhoneBookInitDone_indEN3qmi16SubscriptionTypeERKN3pbm17PhoneBookInitDone10IndicationE_block_invoke(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  v50 = a2[1];
  if (*a2 != v50)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v49 = (uint64_t **)(v4 + 112);
    uint64_t v5 = (int *)(a1 + 52);
    do
    {
      unsigned int v6 = *v2;
      if (v6 == 2 * (*(_DWORD *)(a1 + 48) == 2))
      {
        if ((*((_WORD *)v2 + 1) & 4) != 0)
        {
          BOOL v7 = **(NSObject ***)(a1 + 40);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I MSISDN is present in the GW voice session", buf, 2u);
          }
        }
        unsigned __int16 v8 = 1;
        do
        {
          if ((v8 & *((_WORD *)v2 + 1)) != 0)
          {
            uint64_t v9 = **(NSObject ***)(a1 + 40);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              pbm::asString(v8, buf);
              uint64_t v10 = buf;
              if (v56 < 0) {
                uint64_t v10 = *(unsigned char **)buf;
              }
              *(_DWORD *)v57 = 136315138;
              v58 = v10;
              _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Found phone book type: %s", v57, 0xCu);
              if (v56 < 0) {
                operator delete(*(void **)buf);
              }
            }
            uint64_t PbTypeFor = QMIPhonebookCommandDriver::getPbTypeFor(*v2, v8);
            if (PbTypeFor != 6)
            {
              uint64_t v12 = PbTypeFor;
              os_log_t v13 = **(NSObject ***)(a1 + 40);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v14 = asString();
                *(_DWORD *)std::string buf = 136315138;
                *(void *)&uint8_t buf[4] = v14;
                _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I Found CSI Phone book type: %s", buf, 0xCu);
              }
              uint64_t v15 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
              std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)v15 + 5, v12, v12);
              (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v4 + 64) + 88))(*(void *)(v4 + 64), *v5, v12, 1);
            }
          }
          unsigned int v16 = v8;
          v8 *= 2;
        }
        while (v16 < 0x41);
        uint64_t v17 = *(void *)(v4 + 64);
        uint64_t v18 = *v5;
        unint64_t v19 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
        std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(&v53, v19 + 5);
        (*(void (**)(uint64_t, uint64_t, uint64_t ***))(*(void *)v17 + 96))(v17, v18, &v53);
        long long v20 = v54;
        if (!v54) {
          goto LABEL_58;
        }
      }
      else
      {
        if (v6 > 0xA || ((1 << v6) & 0x4C0) == 0)
        {
          unint64_t v29 = **(NSObject ***)(a1 + 40);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v30 = pbm::asString(v6);
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v30;
            _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, "#I We only care about GW Voice/Global phonebook, ignoring type %s", buf, 0xCu);
          }
          goto LABEL_58;
        }
        *((unsigned char *)std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v49, *v5, v5)+ 40) = v6;
        int v22 = *v5;
        if (QMIPhonebookCommandDriver::isPBTypeSupportedInGlobalPBSession(v4, *v5) || (*((_WORD *)v2 + 1) & 4) == 0) {
          goto LABEL_58;
        }
        std::string v23 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_22231A000, v23, OS_LOG_TYPE_DEFAULT, "#I MSISDN is there under Global phone book", buf, 2u);
          int v22 = *v5;
        }
        int v24 = std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v49, v22, v5);
        std::string::size_type v25 = v24;
        uint64_t v27 = (char *)v24[7];
        uint64_t v26 = v24[8];
        if (v27 >= (char *)v26)
        {
          uint64_t v31 = v24[6];
          uint64_t v32 = (v27 - (char *)v31) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = (char *)v26 - (char *)v31;
          if (v34 >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          unint64_t v35 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v33;
          if (v35)
          {
            if (v35 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            std::string v36 = (char *)operator new(4 * v35);
            uint64_t v31 = v25[6];
            uint64_t v27 = (char *)v25[7];
          }
          else
          {
            std::string v36 = 0;
          }
          uint64_t v37 = &v36[4 * v32];
          *(_DWORD *)uint64_t v37 = 2;
          unint64_t v28 = (uint64_t *)(v37 + 4);
          while (v27 != (char *)v31)
          {
            int v38 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v37 - 1) = v38;
            v37 -= 4;
          }
          v25[6] = (uint64_t *)v37;
          v25[7] = v28;
          v25[8] = (uint64_t *)&v36[4 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v27 = 2;
          unint64_t v28 = (uint64_t *)(v27 + 4);
        }
        v25[7] = v28;
        long long v39 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
        unint64_t v41 = v39 + 6;
        uint64_t v40 = v39[6];
        if (v40)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v42 = (uint64_t **)v40;
              int v43 = *((_DWORD *)v40 + 7);
              if (v43 < 3) {
                break;
              }
              uint64_t v40 = *v42;
              long long v44 = v42;
              if (!*v42) {
                goto LABEL_56;
              }
            }
            if (v43 == 2) {
              break;
            }
            uint64_t v40 = v42[1];
            if (!v40)
            {
              long long v44 = v42 + 1;
              goto LABEL_56;
            }
          }
        }
        else
        {
          long long v44 = v39 + 6;
          uint64_t v42 = v39 + 6;
LABEL_56:
          uint64_t v45 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v45 + 7) = 2;
          std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v41 - 1, (uint64_t)v42, v44, v45);
        }
        (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v4 + 64) + 88))(*(void *)(v4 + 64), *v5, 2, 1);
        uint64_t v46 = *(void *)(v4 + 64);
        uint64_t v47 = *v5;
        int v48 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
        std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(&v51, v48 + 5);
        (*(void (**)(uint64_t, uint64_t, uint64_t ***))(*(void *)v46 + 96))(v46, v47, &v51);
        long long v20 = v52;
        if (!v52) {
          goto LABEL_58;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
LABEL_58:
      v2 += 4;
    }
    while (v2 != v50);
  }
}

void sub_222434384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIPhonebookCommandDriver::getPhoneBookCapabilities(uint64_t a1, int a2, int a3)
{
  if (qmi::ClientRouter::has())
  {
    *(_OWORD *)__p = 0u;
    long long v14 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 0x40000000;
    v10[2] = ___ZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookType_block_invoke;
    void v10[3] = &__block_descriptor_tmp_14_3;
    v10[4] = a1;
    int v11 = a2;
    int v12 = a3;
    unsigned int v6 = (const void **)__p[1];
    if (__p[1] != (void *)v14)
    {
      while (*((unsigned char *)*v6 + 8) != 1)
      {
        if (++v6 == (const void **)v14) {
          goto LABEL_12;
        }
      }
    }
    if (v6 != (const void **)v14)
    {
      if (v9)
      {
        ___ZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookType_block_invoke((uint64_t)v10, (uint64_t)v9 + 10);
        qmi::ClientRouter::get();
        operator new();
      }
      __cxa_bad_cast();
    }
LABEL_12:
    operator new();
  }
  BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 64) + 24);

  return v7();
}

void sub_2224347F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v27, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookType_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = QMIPhonebookCommandDriver::getQMIPbTypeFor(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
  *(unsigned char *)a2 = result;
  *(_WORD *)(a2 + 2) = WORD1(result);
  return result;
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 53) = *(void *)(a2 + 53);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = QMIPhonebookCommandDriver::getPbTypeFor(*a2, *((unsigned __int16 *)a2 + 1));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 44) = *((_WORD *)a2 + 2);
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 46) = *((_WORD *)a2 + 3);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = a2[8];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 49) = a2[9];
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 52) = *a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 53) = a2[1];
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 54) = *a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 55) = a2[1];
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 56) = a2[2];
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_4(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 57) = *a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 58) = a2[1];
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_5(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 59) = *a2;
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_6(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 60) = *a2;
  return result;
}

uint64_t QMIPhonebookCommandDriver::fetch(uint64_t a1, int a2, int a3, __int16 a4, __int16 a5)
{
  if (qmi::ClientRouter::has())
  {
    *(_OWORD *)__p = 0u;
    long long v17 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    uint64_t v10 = (const void **)__p[1];
    if (__p[1] != (void *)v17)
    {
      while (*((unsigned char *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v17) {
          goto LABEL_12;
        }
      }
    }
    if (v10 != (const void **)v17)
    {
      if (v13)
      {
        long long v14 = v13 + 10;
        QMIuint64_t PbTypeFor = QMIPhonebookCommandDriver::getQMIPbTypeFor(a1, a2, a3);
        *long long v14 = QMIPbTypeFor;
        *((_WORD *)v14 + 1) = WORD1(QMIPbTypeFor);
        *((_WORD *)v14 + 2) = a4;
        *((_WORD *)v14 + 3) = a5;
        qmi::ClientRouter::get();
        operator new();
      }
      __cxa_bad_cast();
    }
LABEL_12:
    operator new();
  }
  int v11 = *(uint64_t (**)(void))(**(void **)(a1 + 64) + 24);

  return v11();
}

void sub_222434DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v21, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_resEN3qmi16SubscriptionTypeE13PhoneBookTypeRKN3pbm19ReadRecordUndecoded8ResponseE_block_invoke(uint64_t a1, _WORD *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = (unsigned __int16)*a2;
    *(_DWORD *)std::string buf = 67109120;
    int v14 = v6;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I There are %d phone records", buf, 8u);
  }
  if (!*a2)
  {
    uint64_t v7 = *(void *)(v4 + 64);
    uint64_t v8 = *(unsigned int *)(a1 + 64);
    uint64_t v9 = *(unsigned int *)(a1 + 68);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 48);
    int v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 56))(v7, v8, v9, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_222434F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_48c78_ZTSKNSt3__110shared_ptrINS_6vectorI17CSIPhoneBookEntryNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c78_ZTSKNSt3__110shared_ptrINS_6vectorI17CSIPhoneBookEntryNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *__Block_byref_object_copy__31(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    void *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke(uint64_t a1, __int16 *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 56);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = QMIPhonebookCommandDriver::getPbTypeFor(*((unsigned __int8 *)a2 + 2), (unsigned __int16)a2[2]);
  uint64_t v4 = **(NSObject ***)(a1 + 64);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = asString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Response for PB Type: %s", (uint8_t *)&buf, 0xCu);
    uint64_t v4 = **(NSObject ***)(a1 + 64);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *a2 != -1;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Are there more? %d", (uint8_t *)&buf, 8u);
  }
  int v6 = (unsigned char *)*((void *)a2 + 1);
  if (v6 != *((unsigned char **)a2 + 2))
  {
    uint64_t v7 = (uint64_t **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    do
    {
      uint64_t v8 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(unsigned __int16 *)v6;
        *(_DWORD *)int v22 = 67109120;
        LODWORD(v23) = v9;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Slot ID: %d", v22, 8u);
      }
      unsigned int v10 = *(unsigned __int16 *)v6;
      *(_DWORD *)int v22 = v10;
      uint64_t v11 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, v10, v22);
      int v12 = (char *)*(unsigned __int16 *)v6;
      v11[5] = v12;
      *(_DWORD *)int v22 = v12;
      os_log_t v13 = (std::string *)std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, v12, v22);
      PhonebookCommandDriver::decodeName();
      std::string::operator=(v13 + 2, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v14 = v6[3] | (16 * (v6[2] & 7)) | 0x80u;
      uint64_t v15 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v22 = 67109120;
        LODWORD(v23) = v14;
        _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I TON: %d", v22, 8u);
      }
      unsigned int v16 = *(unsigned __int16 *)v6;
      *(_DWORD *)int v22 = v16;
      long long v17 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, v16, v22);
      uint64_t v18 = v6 + 8;
      MEMORY[0x223C99000](&buf, v14, v6 + 8);
      v17[9] = (char *)buf;
      std::string::operator=((std::string *)(v17 + 10), (const std::string *)((char *)&buf + 8));
      std::string::operator=((std::string *)(v17 + 13), &v26);
      *((_DWORD *)v17 + 32) = v27;
      *((unsigned char *)v17 + 132) = v28;
      std::string::operator=((std::string *)(v17 + 17), &v29);
      std::string::operator=((std::string *)(v17 + 20), &__p);
      *(_OWORD *)(v17 + 23) = v31;
      *((unsigned char *)v17 + 200) = v32;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (v25 < 0) {
        operator delete(*((void **)&buf + 1));
      }
      unint64_t v19 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        if ((char)v6[31] < 0) {
          uint64_t v18 = (void *)*v18;
        }
        *(_DWORD *)int v22 = 136315138;
        std::string v23 = v18;
        _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I Set ASCII number to %s", v22, 0xCu);
      }
      v6 += 56;
    }
    while (v6 != *((unsigned char **)a2 + 2));
  }
}

void sub_2224353D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_34(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      unsigned int v6 = *v2;
      int v5 = v2 + 4;
      unsigned int v9 = v6;
      uint64_t v7 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v4, v6, &v9);
      PhonebookCommandDriver::decodeName();
      std::string::operator=((std::string *)(v7 + 46), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = v5 + 12;
    }
    while (v2 != v3);
  }
}

void sub_2224354D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_2(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    int v5 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      if (*((void *)v2 + 1) != *((void *)v2 + 2))
      {
        v17[0] = *v2;
        uint64_t v4 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v5, v17[0], v17);
        PhonebookCommandDriver::convertToString();
        MEMORY[0x223C98FF0](&v8, &v6);
        v4[26] = v8;
        std::string::operator=((std::string *)v4 + 9, &v9);
        std::string::operator=((std::string *)v4 + 10, &v10);
        *((_DWORD *)v4 + 66) = v11;
        *((unsigned char *)v4 + 268) = v12;
        std::string::operator=((std::string *)(v4 + 34), &v13);
        std::string::operator=((std::string *)(v4 + 37), &__p);
        *((_OWORD *)v4 + 20) = v15;
        *((unsigned char *)v4 + 336) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9.__r_.__value_.__l.__data_);
        }
        if (v7 < 0) {
          operator delete(v6);
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_222435664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_3(uint64_t result, unsigned __int16 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t **)(*(void *)(*(void *)(result + 32) + 8) + 40);
    uint64_t v5 = *MEMORY[0x263F8C2C8];
    uint64_t v6 = *(void *)(MEMORY[0x263F8C2C8] + 24);
    do
    {
      if (*((void *)v2 + 1) != *((void *)v2 + 2))
      {
        uint64_t v16 = 0;
        long long v14 = 0u;
        memset(v15, 0, sizeof(v15));
        *(_OWORD *)char v12 = 0u;
        long long v13 = 0u;
        memset(v11, 0, sizeof(v11));
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
        std::ostream::operator<<();
        unsigned int v7 = *v2;
        unsigned int v10 = v7;
        uint64_t v8 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v4, v7, &v10);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &__p);
        std::string::operator=((std::string *)(v8 + 43), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(void *)&v11[0] = v5;
        *(void *)((char *)v11 + *(void *)(v5 - 24)) = v6;
        *((void *)&v11[0] + 1) = MEMORY[0x263F8C318] + 16;
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        uint64_t result = MEMORY[0x223C9A8E0](v15);
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_2224358AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a16 = v32;
  *(uint64_t *)((char *)&a16 + *(void *)(v32 - 24)) = v31;
  a17 = MEMORY[0x263F8C318] + 16;
  if (a30 < 0) {
    operator delete(a25);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C9A8E0](v30);
  _Unwind_Resume(a1);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_4(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      if (*((void *)v2 + 1) != *((void *)v2 + 2))
      {
        unsigned int v5 = *v2;
        unsigned int v8 = v5;
        uint64_t v6 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v4, v5, &v8);
        PhonebookCommandDriver::decodeName();
        std::string::operator=((std::string *)(v6 + 49), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_222435A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char **___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_5(char **result, unsigned __int16 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t **)(*((void *)result[4] + 1) + 40);
    do
    {
      unsigned int v5 = *v2;
      unsigned int v6 = v5;
      uint64_t result = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v4, v5, &v6);
      *((unsigned char *)result + 416) = *((unsigned char *)v2 + 2) != 0;
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t QMIPhonebookCommandDriver::writeEntry(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (qmi::ClientRouter::has())
  {
    *(_OWORD *)std::string __p = 0u;
    long long v23 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 0x40000000;
    void v18[2] = ___ZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_41_1;
    int v19 = a2;
    int v20 = a3;
    int v21 = a4;
    v18[4] = a1;
    v18[5] = a5;
    void v18[6] = a6;
    char v12 = (const void **)__p[1];
    if (__p[1] != (void *)v23)
    {
      while (*((unsigned char *)*v12 + 8) != 1)
      {
        if (++v12 == (const void **)v23) {
          goto LABEL_12;
        }
      }
    }
    if (v12 != (const void **)v23)
    {
      if (v15)
      {
        ___ZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke((uint64_t)v18, (uint64_t)v15 + 16);
        uint64_t v16 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a2);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = a4;
          _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I Sending the write record request for ID: %d", buf, 8u);
        }
        qmi::ClientRouter::get();
        operator new();
      }
      __cxa_bad_cast();
    }
LABEL_12:
    operator new();
  }
  long long v13 = *(uint64_t (**)(void))(**(void **)(a1 + 64) + 24);

  return v13();
}

void sub_222436000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  long long v17 = *(std::__shared_weak_count **)(v15 - 120);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (a4) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v13, a4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

double ___ZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  QMIuint64_t PbTypeFor = QMIPhonebookCommandDriver::getQMIPbTypeFor(*(void *)(a1 + 32), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60));
  *(unsigned char *)a2 = QMIPbTypeFor;
  *(_WORD *)(a2 + 2) = WORD1(QMIPbTypeFor);
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 64);
  unsigned int TypeOfAddress = CSIPhoneNumber::getTypeOfAddress(*(CSIPhoneNumber **)(a1 + 40));
  *(unsigned char *)(a2 + 6) = (TypeOfAddress >> 4) & 7;
  *(unsigned char *)(a2 + 7) = TypeOfAddress & 0xF;
  CSIPhoneNumber::getBaseNumber((uint64_t *)&__p, *(CSIPhoneNumber **)(a1 + 40));
  PhonebookCommandDriver::getVectorForString();
  unsigned int v6 = *(void **)(a2 + 8);
  if (v6)
  {
    *(void *)(a2 + 16) = v6;
    operator delete(v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
  }
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 8) = v11;
  *(void *)(a2 + 24) = v12;
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  if (v10 < 0) {
    operator delete(__p);
  }
  if (*(_DWORD *)(a1 + 60) != 2)
  {
    PhonebookCommandDriver::getVectorForString();
    unsigned int v8 = *(void **)(a2 + 32);
    if (v8)
    {
      *(void *)(a2 + 40) = v8;
      operator delete(v8);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
    }
    double result = *(double *)&v11;
    *(_OWORD *)(a2 + 32) = v11;
    *(void *)(a2 + 48) = v12;
  }
  return result;
}

void sub_2224361A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN25QMIPhonebookCommandDriver21handleWriteRecord_resEN3qmi16SubscriptionTypeERKN3pbm11WriteRecord8ResponseE_block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 32) + 64) + 80))(*(void *)(*(void *)(a1 + 32) + 64), *(unsigned int *)(a1 + 40), *a2);
}

uint64_t QMIPhonebookCommandDriver::getPbState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (qmi::ClientRouter::has())
  {
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 0x40000000;
    v13[2] = ___ZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookType_block_invoke;
    v13[3] = &__block_descriptor_tmp_45_0;
    v13[4] = a1;
    int v14 = a2;
    int v15 = a3;
    unsigned int v6 = (const void **)__p[1];
    if (__p[1] != (void *)v17)
    {
      while (*((unsigned char *)*v6 + 8) != 1)
      {
        if (++v6 == (const void **)v17) {
          goto LABEL_12;
        }
      }
    }
    if (v6 != (const void **)v17)
    {
      if (v9)
      {
        ___ZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookType_block_invoke((uint64_t)v13, (uint64_t)v9 + 10);
        char v10 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a2);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = asString();
          int buf = 136315138;
          *(void *)buf_4 = v12;
          _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending PB State request for phone book type: %s", (uint8_t *)&buf, 0xCu);
        }
        qmi::ClientRouter::get();
        operator new();
      }
      __cxa_bad_cast();
    }
LABEL_12:
    operator new();
  }
  unsigned int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 64) + 24);

  return v7();
}

void sub_222436700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookType_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = QMIPhonebookCommandDriver::getQMIPbTypeFor(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
  *(unsigned char *)a2 = result;
  *(_WORD *)(a2 + 2) = WORD1(result);
  return result;
}

void ___ZN25QMIPhonebookCommandDriver17handlePbState_resEN3qmi16SubscriptionTypeERKN3pbm7PBState8ResponseE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    pbm::asString(*((unsigned __int16 *)a2 + 1), __p);
    int v6 = v26;
    unsigned int v7 = (void **)__p[0];
    unsigned int v8 = pbm::asString(a2[4]);
    std::string v9 = __p;
    if (v6 < 0) {
      std::string v9 = v7;
    }
    *(_DWORD *)int buf = 136315394;
    char v28 = v9;
    __int16 v29 = 2080;
    uint64_t v30 = v8;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Received result for PB State request: type %s, state: %s", buf, 0x16u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int v10 = *((unsigned __int16 *)a2 + 1);
  uint64_t PbTypeFor = QMIPhonebookCommandDriver::getPbTypeFor(*a2, v10);
  if (a2[4])
  {
    if (a2[4] == 1)
    {
      uint64_t v12 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I PhoneBook is not ready - ignoring", (uint8_t *)__p, 2u);
      }
      return;
    }
    uint64_t v16 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      pbm::asString(v10, __p);
      long long v17 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315138;
      char v28 = v17;
      _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I Not adding PB type: %s to known Phonebook types", buf, 0xCu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v13 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      pbm::asString(v10, __p);
      int v14 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315138;
      char v28 = v14;
      _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I Adding PB type: %s to known Phonebook types", buf, 0xCu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    int v15 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *(_DWORD *)(a1 + 48), (_DWORD *)(a1 + 48));
    std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)v15 + 5, PbTypeFor, PbTypeFor);
  }
  unsigned int v19 = *(_DWORD *)(a1 + 48);
  uint64_t v18 = (int *)(a1 + 48);
  (*(void (**)(void, void, uint64_t, BOOL))(**(void **)(v4 + 64) + 88))(*(void *)(v4 + 64), v19, PbTypeFor, a2[4] == 0);
  if (PbTypeFor == 2)
  {
    uint64_t v20 = *(void *)(v4 + 64);
    uint64_t v21 = *v18;
    int v22 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v18, v18);
    std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(&v23, v22 + 5);
    (*(void (**)(uint64_t, uint64_t, uint64_t ***))(*(void *)v20 + 96))(v20, v21, &v23);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
}

void sub_222436AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIPhonebookCommandDriver::simReady(void **a1, uint64_t a2)
{
  int v22 = a2;
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void *))(*a1[11] + 16))(a1[11]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I SIM ready reported", (uint8_t *)v21, 2u);
  }
  unsigned int v5 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(a1 + 17, a2, &v22);
  unsigned int v8 = v5[6];
  int v6 = v5 + 6;
  unsigned int v7 = v8;
  if (!v8) {
    goto LABEL_13;
  }
  std::string v9 = v6;
  do
  {
    int v10 = *((_DWORD *)v7 + 7);
    BOOL v11 = v10 < 2;
    if (v10 >= 2) {
      uint64_t v12 = (uint64_t **)v7;
    }
    else {
      uint64_t v12 = (uint64_t **)(v7 + 1);
    }
    if (!v11) {
      std::string v9 = (uint64_t **)v7;
    }
    unsigned int v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *((int *)v9 + 7) >= 3) {
LABEL_13:
  }
    ((void (*)(void **, uint64_t, uint64_t))(*a1)[8])(a1, a2, 2);
  uint64_t v13 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(a1 + 17, a2, &v22);
  uint64_t v16 = v13[6];
  uint64_t result = (uint64_t)(v13 + 6);
  int v15 = v16;
  if (!v16) {
    return ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[8])(a1, a2, 4);
  }
  uint64_t v17 = result;
  do
  {
    int v18 = *((_DWORD *)v15 + 7);
    BOOL v19 = v18 < 4;
    if (v18 >= 4) {
      uint64_t v20 = (uint64_t **)v15;
    }
    else {
      uint64_t v20 = (uint64_t **)(v15 + 1);
    }
    if (!v19) {
      uint64_t v17 = (uint64_t)v15;
    }
    int v15 = *v20;
  }
  while (*v20);
  if (v17 == result || *(int *)(v17 + 28) >= 5) {
    return ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[8])(a1, a2, 4);
  }
  return result;
}

void QMIPhonebookCommandDriver::simRemoved(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I SIM has been removed, reset all the states", v5, 2u);
  }
  QMIPhonebookCommandDriver::reset(a1, a2);
}

void ___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke(uint64_t a1, char ***a2)
{
}

void populateEmergencyNumber(os_log_t *a1, uint64_t *a2, char **a3, char **a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v8 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * (a4 - a3);
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Emergency numbers count: %lu", buf, 0xCu);
  }
  for (; a3 != a4; a3 += 3)
  {
    memset(buf, 0, sizeof(buf));
    uint64_t v17 = 0;
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(buf, *a3, a3[1], a3[1] - *a3);
    std::string v9 = *a1;
    if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
    {
      if (v17 >= 0) {
        int v10 = buf;
      }
      else {
        int v10 = *(uint8_t **)buf;
      }
      *(_DWORD *)int v14 = 136315138;
      int v15 = v10;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Emergency Number: %s", v14, 0xCu);
    }
    unint64_t v11 = a2[1];
    if (v11 >= a2[2])
    {
      uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)buf);
    }
    else
    {
      if (SHIBYTE(v17) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
      }
      else
      {
        long long v12 = *(_OWORD *)buf;
        *(void *)(v11 + 16) = v17;
        *(_OWORD *)unint64_t v11 = v12;
      }
      uint64_t v13 = v11 + 24;
      a2[1] = v11 + 24;
    }
    a2[1] = v13;
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_222436F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v18 + 8) = v19;
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(std::string **)v5;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (v4 == v7)
  {
    if (v3 != v2)
    {
      unint64_t v9 = 0;
      do
      {
        std::to_string(&v15, *(unsigned __int8 *)(v2 + v9));
        int v10 = std::string::insert(&v15, 0, ",", 1uLL);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v10->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (__p[23] >= 0) {
          long long v12 = __p;
        }
        else {
          long long v12 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v13 = __p[23];
        }
        else {
          std::string::size_type v13 = *(void *)&__p[8];
        }
        std::string::append(v6, v12, v13);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
        ++v6;
        ++v9;
        uint64_t v2 = *a2;
      }
      while (v9 < a2[1] - *a2);
    }
  }
  else
  {
    int v14 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 134218240;
      *(void *)&__p[4] = v7;
      *(_WORD *)&__p[12] = 2048;
      *(void *)&__p[14] = v4;
      _os_log_error_impl(&dword_22231A000, v14, OS_LOG_TYPE_ERROR, "Hard coded emergency numbers length (%zu) and category length (%zu) do not match! Ignoring categories", __p, 0x16u);
    }
  }
}

void sub_2224370E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_56(uint64_t a1, char ***a2)
{
}

void ___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke(uint64_t a1, char ***a2)
{
}

void ___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(std::string **)v5;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (v4 == v7)
  {
    if (v3 != v2)
    {
      unint64_t v9 = 0;
      do
      {
        std::to_string(&v15, *(unsigned __int8 *)(v2 + v9));
        int v10 = std::string::insert(&v15, 0, ",", 1uLL);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v10->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (__p[23] >= 0) {
          long long v12 = __p;
        }
        else {
          long long v12 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v13 = __p[23];
        }
        else {
          std::string::size_type v13 = *(void *)&__p[8];
        }
        std::string::append(v6, v12, v13);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
        ++v6;
        ++v9;
        uint64_t v2 = *a2;
      }
      while (v9 < a2[1] - *a2);
    }
  }
  else
  {
    int v14 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 134218240;
      *(void *)&__p[4] = v7;
      *(_WORD *)&__p[12] = 2048;
      *(void *)&__p[14] = v4;
      _os_log_error_impl(&dword_22231A000, v14, OS_LOG_TYPE_ERROR, "NV emergency numbers length (%zu) and category length (%zu) do not match! Ignoring categories", __p, 0x16u);
    }
  }
}

void sub_2224372DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_63(uint64_t a1, char ***a2)
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::getSize()
{
  return tlv::size<pbm::tlv::RecordInfo>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<pbm::tlv::RecordInfo>(a2, a1 + 10);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::clone()
{
}

void CSIPhoneBookEntry::CSIPhoneBookEntry(CSIPhoneBookEntry *this, const CSIPhoneBookEntry *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v4 = (std::string *)((char *)this + 8);
  *((void *)this + 3) = 0;
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneBookEntry *)((char *)this + 32));
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneBookEntry *)((char *)this + 168));
  *((void *)this + 46) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(void *)this = *(void *)a2;
  std::string::operator=(v4, (const std::string *)((char *)a2 + 8));
  *((void *)this + 4) = *((void *)a2 + 4);
  std::string::operator=((std::string *)((char *)this + 40), (const std::string *)((char *)a2 + 40));
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 64));
  int v5 = *((_DWORD *)a2 + 22);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((_DWORD *)this + 22) = v5;
  std::string::operator=((std::string *)this + 4, (const std::string *)a2 + 4);
  std::string::operator=((std::string *)this + 5, (const std::string *)a2 + 5);
  long long v6 = *((_OWORD *)a2 + 9);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((_OWORD *)this + 9) = v6;
  *((void *)this + 21) = *((void *)a2 + 21);
  std::string::operator=((std::string *)((char *)this + 176), (const std::string *)((char *)a2 + 176));
  std::string::operator=((std::string *)((char *)this + 200), (const std::string *)((char *)a2 + 200));
  int v7 = *((_DWORD *)a2 + 56);
  *((unsigned char *)this + 228) = *((unsigned char *)a2 + 228);
  *((_DWORD *)this + 56) = v7;
  std::string::operator=((std::string *)((char *)this + 232), (const std::string *)((char *)a2 + 232));
  std::string::operator=((std::string *)((char *)this + 256), (const std::string *)((char *)a2 + 256));
  long long v8 = *(_OWORD *)((char *)a2 + 280);
  *((unsigned char *)this + 296) = *((unsigned char *)a2 + 296);
  *(_OWORD *)((char *)this + 280) = v8;
  std::string::operator=((std::string *)((char *)this + 304), (const std::string *)((char *)a2 + 304));
  std::string::operator=((std::string *)((char *)this + 328), (const std::string *)((char *)a2 + 328));
  std::string::operator=((std::string *)((char *)this + 352), (const std::string *)((char *)a2 + 352));
  *((unsigned char *)this + 376) = *((unsigned char *)a2 + 376);
}

void sub_22243760C(_Unwind_Exception *a1)
{
  CSIPhoneNumber::~CSIPhoneNumber(v3);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void CSIPhoneBookEntry::~CSIPhoneBookEntry(void **this)
{
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t std::__split_buffer<CSIPhoneBookEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 384;
    CSIPhoneBookEntry::~CSIPhoneBookEntry((void **)(i - 384));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::shared_ptr<QMIPhonebookCommandDriver>::shared_ptr[abi:ne180100]<QMIPhonebookCommandDriver,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_222437878(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1}::operator() const(QMIPhonebookCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2224378A0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIPhonebookCommandDriver *,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver *)#1},std::allocator<QMIPhonebookCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIPhonebookCommandDriver *,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver *)#1},std::allocator<QMIPhonebookCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIPhonebookCommandDriver *,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver *)#1},std::allocator<QMIPhonebookCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1}::operator() const(QMIPhonebookCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void SimInstanceLoggable<QMIPhonebookCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<QMIPhonebookCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x48uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *((unsigned char *)v7 + 40) = 0;
    v7[7] = 0;
    v7[8] = 0;
    v7[6] = 0;
    *int v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = v9;
    *long long v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *int v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = v9;
    *long long v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7910;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v13, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v13);
    if (__p)
    {
      uint64_t v15 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v13);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v4 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4;
  }
  int v8 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 88) + 16))(*(void *)(v6 + 88), v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I handleRecordUpdate_ind", (uint8_t *)&__p, 2u);
  }
  std::string __p = (void *)MEMORY[0x263EF8330];
  uint64_t v15 = 0x40000000;
  uint64_t v16 = ___ZN25QMIPhonebookCommandDriver22handleRecordUpdate_indEN3qmi16SubscriptionTypeERKN3pbm12RecordUpdate10IndicationE_block_invoke;
  uint64_t v17 = &__block_descriptor_tmp_5_2;
  uint64_t v18 = v6;
  unsigned int v19 = v4;
  int v20 = v7;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v13);
  uint64_t v11 = TlvValue;
  if (TlvValue)
  {
    int v12 = v10;
    uint64_t v22 = TlvValue;
    uint64_t updated = tlv::parseV<pbm::tlv::RecordUpdateInfo>((unint64_t *)&v22, v10);
    if (v22) {
      v16((uint64_t)&__p, (unsigned __int8 *)&updated);
    }
    else {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v13[0], 1, v11, v12);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v13);
}

void sub_222437E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7990;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7990;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v8, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
    if (__p)
    {
      int v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
  }
  if (v4 - 1 >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 88) + 16))(*(void *)(*(void *)(a1 + 8) + 88), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I handleRefresh_ind", (uint8_t *)&__p, 2u);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v8);
}

void sub_2224380C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7A10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7A10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v8, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
    if (__p)
    {
      int v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
  }
  if (v4 - 1 >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 88) + 16))(*(void *)(*(void *)(a1 + 8) + 88), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I handleReady_ind", (uint8_t *)&__p, 2u);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v8);
}

void sub_22243830C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7A90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7A90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    p_p = 0;
    uint64_t v66 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v59, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v59);
    if (__p)
    {
      p_p = (long long **)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v59);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  std::string __p = 0;
  p_p = (long long **)&__p;
  uint64_t v66 = 0x4002000000;
  v67 = __Block_byref_object_copy__3;
  v68 = __Block_byref_object_dispose__3;
  memset(v69, 0, sizeof(v69));
  if (v4 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4;
  }
  int v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 88) + 16))(*(void *)(v6 + 88), v7);
  unint64_t v9 = (void **)(p_p + 5);
  *(void *)int buf = MEMORY[0x263EF8330];
  uint64_t v85 = 0x40000000;
  v86 = (void (*)(uint8_t *, uint8_t *))___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke;
  v87 = &__block_descriptor_tmp_53_3;
  v88 = (void **)v8;
  v89 = (os_log_t *)(p_p + 5);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
  uint64_t v12 = TlvValue;
  if (TlvValue)
  {
    int v13 = v11;
    v90.__r_.__value_.__r.__words[0] = TlvValue;
    *(void *)v78 = 0;
    uint64_t v79 = 0;
    v80 = 0;
    tlv::parseV<pbm::tlv::HardCodedEmergencyNumbersExtended>((unsigned __int8 **)&v90, v11, (uint64_t *)v78);
    if (v90.__r_.__value_.__r.__words[0])
    {
      v86(buf, v78);
      *(void *)v72 = v78;
      std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
      goto LABEL_15;
    }
    *(void *)v72 = v78;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    if (((unsigned int (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 19, v12, v13))
    {
LABEL_15:
      *(void *)v78 = MEMORY[0x263EF8330];
      uint64_t v79 = 0x40000000;
      v80 = (void (*)(uint8_t *, uint8_t *))___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2;
      v81 = &__block_descriptor_tmp_55_1;
      v82 = v9;
      v83 = v8;
      uint64_t v14 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
      uint64_t v16 = v14;
      if (v14)
      {
        int v17 = v15;
        v90.__r_.__value_.__r.__words[0] = v14;
        *(void *)v72 = 0;
        uint64_t v73 = 0;
        v74 = 0;
        tlv::parseV<pbm::tlv::HardCodedEmergencyNumbersCategories>((unsigned __int8 **)&v90, v15, v72);
        std::string::size_type v18 = v90.__r_.__value_.__r.__words[0];
        if (v90.__r_.__value_.__r.__words[0]) {
          v80(v78, v72);
        }
        if (*(void *)v72)
        {
          uint64_t v73 = *(void *)v72;
          operator delete(*(void **)v72);
        }
        if (!v18) {
          ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 21, v16, v17);
        }
      }
      goto LABEL_25;
    }
  }
  *(void *)v78 = MEMORY[0x263EF8330];
  uint64_t v79 = 0x40000000;
  v80 = (void (*)(uint8_t *, uint8_t *))___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_56;
  v81 = &__block_descriptor_tmp_57_4;
  v82 = (void **)v8;
  v83 = (os_log_t *)v9;
  uint64_t v19 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
  uint64_t v21 = v19;
  if (!v19) {
    goto LABEL_26;
  }
  int v22 = v20;
  v63.__r_.__value_.__r.__words[0] = v19;
  *(void *)v72 = 0;
  uint64_t v73 = 0;
  v74 = 0;
  tlv::parseV<pbm::tlv::HardCodedEmergencyNumbers>((unsigned __int8 **)&v63, v20, (uint64_t *)v72);
  if (v63.__r_.__value_.__r.__words[0])
  {
    v80(v78, v72);
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
LABEL_25:
    LODWORD(v21) = 1;
    goto LABEL_26;
  }
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  LODWORD(v21) = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 1, v21, v22);
LABEL_26:
  long long v23 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl(&dword_22231A000, v23, OS_LOG_TYPE_DEFAULT, "#I Hard coded emergency numbers presence: %d", buf, 8u);
  }
  uint64_t v24 = *(void *)(v6 + 64);
  if (v21)
  {
    memset(&v63, 0, sizeof(v63));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v24 + 104))(v24, v7, 7, &v63);
    *(void *)int buf = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v24 + 112))(*(void *)(v6 + 64), v7, 7);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  uint64_t v25 = (void **)(p_p + 5);
  *(void *)int buf = MEMORY[0x263EF8330];
  uint64_t v85 = 0x40000000;
  v86 = (void (*)(uint8_t *, uint8_t *))___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke;
  v87 = &__block_descriptor_tmp_61_3;
  v88 = (void **)v8;
  v89 = (os_log_t *)(p_p + 5);
  uint64_t v26 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
  uint64_t v28 = v26;
  if (v26)
  {
    int v29 = v27;
    v90.__r_.__value_.__r.__words[0] = v26;
    *(void *)v78 = 0;
    uint64_t v79 = 0;
    v80 = 0;
    tlv::parseV<pbm::tlv::NVEmergencyNumbersExtended>((unsigned __int8 **)&v90, v27, (uint64_t *)v78);
    if (v90.__r_.__value_.__r.__words[0])
    {
      v86(buf, v78);
      *(void *)v72 = v78;
      std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
      goto LABEL_35;
    }
    *(void *)v72 = v78;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    if (((unsigned int (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 20, v28, v29))
    {
LABEL_35:
      *(void *)v78 = MEMORY[0x263EF8330];
      uint64_t v79 = 0x40000000;
      v80 = (void (*)(uint8_t *, uint8_t *))___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2;
      v81 = &__block_descriptor_tmp_62_2;
      v82 = v25;
      v83 = v8;
      uint64_t v30 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
      uint64_t v32 = v30;
      if (v30)
      {
        int v33 = v31;
        v90.__r_.__value_.__r.__words[0] = v30;
        *(void *)v72 = 0;
        uint64_t v73 = 0;
        v74 = 0;
        tlv::parseV<pbm::tlv::NVEmergencyNumbersCategories>((unsigned __int8 **)&v90, v31, v72);
        std::string::size_type v34 = v90.__r_.__value_.__r.__words[0];
        if (v90.__r_.__value_.__r.__words[0]) {
          v80(v78, v72);
        }
        if (*(void *)v72)
        {
          uint64_t v73 = *(void *)v72;
          operator delete(*(void **)v72);
        }
        if (!v34) {
          ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 22, v32, v33);
        }
      }
      goto LABEL_45;
    }
  }
  *(void *)v78 = MEMORY[0x263EF8330];
  uint64_t v79 = 0x40000000;
  v80 = (void (*)(uint8_t *, uint8_t *))___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_63;
  v81 = &__block_descriptor_tmp_64_0;
  v82 = (void **)v8;
  v83 = (os_log_t *)v25;
  uint64_t v35 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
  uint64_t v37 = v35;
  if (!v35) {
    goto LABEL_46;
  }
  int v38 = v36;
  v62.__r_.__value_.__r.__words[0] = v35;
  *(void *)v72 = 0;
  uint64_t v73 = 0;
  v74 = 0;
  tlv::parseV<pbm::tlv::NVEmergencyNumbers>((unsigned __int8 **)&v62, v36, (uint64_t *)v72);
  if (v62.__r_.__value_.__r.__words[0])
  {
    v80(v78, v72);
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
LABEL_45:
    LODWORD(v37) = 1;
    goto LABEL_46;
  }
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  LODWORD(v37) = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 16, v37, v38);
LABEL_46:
  long long v39 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v37;
    _os_log_impl(&dword_22231A000, v39, OS_LOG_TYPE_DEFAULT, "#I NV Items emergency numbers presence: %d", buf, 8u);
  }
  uint64_t v40 = *(void *)(v6 + 64);
  if (v37)
  {
    memset(&v62, 0, sizeof(v62));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v40 + 104))(v40, v7, 6, &v62);
    *(void *)int buf = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v40 + 112))(*(void *)(v6 + 64), v7, 6);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  *(void *)int buf = MEMORY[0x263EF8330];
  uint64_t v85 = 0x40000000;
  v86 = (void (*)(uint8_t *, uint8_t *))___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke;
  v87 = &unk_26460CDE8;
  v88 = &__p;
  v89 = v8;
  uint64_t v41 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
  uint64_t v43 = v41;
  if (v41)
  {
    int v44 = v42;
    v90.__r_.__value_.__r.__words[0] = v41;
    *(void *)v78 = 0;
    uint64_t v79 = 0;
    v80 = 0;
    tlv::parseV<pbm::tlv::CardEmergencyNumbers>((unsigned __int8 **)&v90, v42, (uint64_t *)v78);
    if (v90.__r_.__value_.__r.__words[0])
    {
      v86(buf, v78);
      *(void *)v72 = v78;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
      LODWORD(v43) = 1;
    }
    else
    {
      *(void *)v72 = v78;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
      LODWORD(v43) = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 17, v43, v44);
    }
  }
  uint64_t v45 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v78 = 67109120;
    *(_DWORD *)&v78[4] = v43;
    _os_log_impl(&dword_22231A000, v45, OS_LOG_TYPE_DEFAULT, "#I SIM card emergency numbers presence: %d", v78, 8u);
  }
  uint64_t v46 = *(void *)(v6 + 64);
  if (v43)
  {
    memset(&v61, 0, sizeof(v61));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v61, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v46 + 104))(v46, v7, 3, &v61);
    *(void *)v78 = &v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v46 + 112))(*(void *)(v6 + 64), v7, 3);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  *(void *)v78 = MEMORY[0x263EF8330];
  uint64_t v79 = 0x40000000;
  v80 = (void (*)(uint8_t *, uint8_t *))___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke_8;
  v81 = &unk_26460CE10;
  v82 = &__p;
  v83 = v8;
  uint64_t v47 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
  uint64_t v49 = v47;
  if (v47)
  {
    int v50 = v48;
    v60.__r_.__value_.__r.__words[0] = v47;
    *(void *)v72 = 0;
    uint64_t v73 = 0;
    v74 = 0;
    tlv::parseV<pbm::tlv::NetworkEmergencyNumbers>((unsigned __int8 **)&v60, v48, (uint64_t *)v72);
    if (v60.__r_.__value_.__r.__words[0])
    {
      v80(v78, v72);
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      LODWORD(v49) = 1;
    }
    else
    {
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      LODWORD(v49) = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v59[0], 18, v49, v50);
    }
  }
  v51 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v72 = 67109120;
    *(_DWORD *)&v72[4] = v49;
    _os_log_impl(&dword_22231A000, v51, OS_LOG_TYPE_DEFAULT, "#I Network provided emergency numbers presence: %d", v72, 8u);
  }
  uint64_t v52 = *(void *)(v6 + 64);
  if (v49)
  {
    memset(&v60, 0, sizeof(v60));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v52 + 104))(v52, v7, 4, &v60);
    *(void *)v72 = &v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v52 + 112))(*(void *)(v6 + 64), v7, 4);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  *(void *)v72 = MEMORY[0x263EF8330];
  uint64_t v73 = 0x40000000;
  v74 = ___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke_10;
  v75 = &unk_26460CE38;
  v76 = &__p;
  v77 = v8;
  v53 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
  v55 = v53;
  if (v53)
  {
    int v56 = v54;
    v70 = v53;
    memset(&v90, 0, sizeof(v90));
    tlv::parseV<pbm::tlv::LocalEmergencyNumbersExtended>(&v70, v54, (uint64_t *)&v90);
    if (v70)
    {
      v74((uint64_t)v72, (unsigned __int8 **)&v90);
      v71 = &v90;
      std::vector<pbm::tlv::LocalEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      LODWORD(v55) = 1;
    }
    else
    {
      v71 = &v90;
      std::vector<pbm::tlv::LocalEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      LODWORD(v55) = ((uint64_t (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v59[0], 24, v55, v56);
    }
  }
  v57 = *v8;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v90.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(v90.__r_.__value_.__r.__words[0]) = v55;
    _os_log_impl(&dword_22231A000, v57, OS_LOG_TYPE_DEFAULT, "#I Local emergency numbers presence: %d", (uint8_t *)&v90, 8u);
  }
  uint64_t v58 = *(void *)(v6 + 64);
  if (v55)
  {
    memset(&v90, 0, sizeof(v90));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v90, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v58 + 104))(v58, v7, 5, &v90);
    v71 = &v90;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v58 + 112))(*(void *)(v6 + 64), v7, 5);
  }
  _Block_object_dispose(&__p, 8);
  v71 = (std::string *)v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v59);
}

void sub_222439224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  *(void *)(v37 - 128) = v36;
  std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 128));
  _Block_object_dispose(&a25, 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7B10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7B10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  BOOL v5 = *((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3;
  if (v5)
  {
    std::string __p = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v23, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v23);
    if (__p)
    {
      uint64_t v25 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v23);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v4 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4;
  }
  int v32 = v7;
  int v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 88) + 16))(*(void *)(v6 + 88), v7);
  unint64_t v9 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I handlePhoneBookInitDone_ind", (uint8_t *)&__p, 2u);
  }
  std::string __p = (void *)MEMORY[0x263EF8330];
  uint64_t v25 = 0x40000000;
  uint64_t v26 = ___ZN25QMIPhonebookCommandDriver27handlePhoneBookInitDone_indEN3qmi16SubscriptionTypeERKN3pbm17PhoneBookInitDone10IndicationE_block_invoke;
  int v27 = &__block_descriptor_tmp_12_6;
  uint64_t v28 = v6;
  int v29 = v8;
  unsigned int v30 = v4;
  int v31 = v7;
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v23);
  uint64_t v12 = TlvValue;
  if (TlvValue)
  {
    int v13 = v11;
    int v33 = TlvValue;
    long long buf = 0uLL;
    uint64_t v35 = 0;
    tlv::parseV<pbm::tlv::PhoneBookReadyInformation>(&v33, v11, (uint64_t *)&buf);
    uint64_t v14 = v33;
    if (v33) {
      v26((uint64_t)&__p, (unsigned __int8 **)&buf);
    }
    if ((void)buf)
    {
      *((void *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
    if (!v14) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v23[0], 1, v12, v13);
    }
  }
  int v15 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I Phonebooks known so far", (uint8_t *)&buf, 2u);
  }
  uint64_t v16 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v6 + 136), v7, &v32);
  int v17 = v16[5];
  std::string::size_type v18 = v16 + 6;
  if (v17 != (uint64_t *)(v16 + 6))
  {
    do
    {
      uint64_t v19 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = asString();
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v21 = (uint64_t *)v17[1];
      if (v21)
      {
        do
        {
          int v22 = v21;
          uint64_t v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v22 = (uint64_t *)v17[2];
          BOOL v5 = *v22 == (void)v17;
          int v17 = v22;
        }
        while (!v5);
      }
      int v17 = v22;
    }
    while (v22 != (uint64_t *)v18);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v23);
}

void sub_22243975C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::string::size_type v18 = *(void **)(v16 - 96);
  if (v18)
  {
    *(void *)(v16 - 88) = v18;
    operator delete(v18);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7B90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7B90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  BOOL v5 = *((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3;
  if (v5)
  {
    std::string __p = 0;
    uint64_t v102 = 0;
    v103 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v72, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v72);
    if (__p)
    {
      uint64_t v102 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v72);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v4 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4;
  }
  int v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 88) + 16))(*(void *)(v6 + 88), v7);
  unint64_t v9 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Received Indication for Read Record", (uint8_t *)&__p, 2u);
  }
  uint64_t v118 = 0;
  v119 = &v118;
  uint64_t v120 = 0x4002000000;
  v121 = __Block_byref_object_copy__31;
  v124[0] = 0;
  v124[1] = 0;
  v122 = __Block_byref_object_dispose__32;
  v123 = v124;
  uint64_t v114 = 0;
  v115 = &v114;
  uint64_t v116 = 0x2000000000;
  char v117 = 0;
  uint64_t v110 = 0;
  v111 = &v110;
  uint64_t v112 = 0x2000000000;
  int v113 = 6;
  std::string __p = (void *)MEMORY[0x263EF8330];
  uint64_t v102 = 0x40000000;
  v103 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke;
  v104 = &unk_26460CF90;
  v70 = v8;
  uint64_t v108 = v6;
  v109 = v8;
  v105 = &v110;
  v106 = &v114;
  v107 = &v118;
  uint64_t TlvValue = (void **)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v72);
  uint64_t v12 = TlvValue;
  if (TlvValue)
  {
    int v13 = v11;
    uint64_t v85 = (void ***)TlvValue;
    long long v97 = 0u;
    long long v98 = 0u;
    tlv::parseV<pbm::tlv::BasicRecordData>((unint64_t *)&v85, v11, &v97);
    if (v85)
    {
      v103((uint64_t)&__p, (__int16 *)&v97);
      uint64_t v91 = (void **)&v97 + 1;
      std::vector<pbm::tlv::BasicRecord>::__destroy_vector::operator()[abi:ne180100](&v91);
    }
    else
    {
      uint64_t v91 = (void **)&v97 + 1;
      std::vector<pbm::tlv::BasicRecord>::__destroy_vector::operator()[abi:ne180100](&v91);
      ((void (*)(void, uint64_t, void **, void))*MEMORY[0x263F8BD78])(v72[0], 1, v12, v13);
    }
  }
  *(void *)&long long v97 = MEMORY[0x263EF8330];
  *((void *)&v97 + 1) = 0x40000000;
  *(void *)&long long v98 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_34;
  *((void *)&v98 + 1) = &unk_26460CFB8;
  v99 = &v118;
  uint64_t v100 = v6;
  uint64_t v14 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v72);
  uint64_t v16 = v14;
  if (v14)
  {
    int v17 = v15;
    uint64_t v79 = (void ***)v14;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    v93 = 0;
    tlv::parseV<pbm::tlv::SecondNameInfo>((unsigned __int8 **)&v79, v15, (uint64_t *)&v91);
    if (v79)
    {
      ((void (*)(long long *, void ***))v98)(&v97, &v91);
      uint64_t v85 = &v91;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    }
    else
    {
      uint64_t v85 = &v91;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v72[0], 16, v16, v17);
    }
  }
  uint64_t v91 = (void **)MEMORY[0x263EF8330];
  uint64_t v92 = 0x40000000;
  v93 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_2;
  v94 = &unk_26460CFE0;
  v95 = &v118;
  uint64_t v96 = v6;
  std::string::size_type v18 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v72);
  uint64_t v20 = v18;
  if (v18)
  {
    int v21 = v19;
    uint64_t v73 = (void ****)v18;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    v87 = 0;
    tlv::parseV<pbm::tlv::AdditionalNumberInfo>((unsigned __int8 **)&v73, v19, (uint64_t *)&v85);
    if (v73)
    {
      v93((uint64_t)&v91, (unsigned __int16 **)&v85);
      uint64_t v79 = (void ***)&v85;
      std::vector<pbm::tlv::AdditionalNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    }
    else
    {
      uint64_t v79 = (void ***)&v85;
      std::vector<pbm::tlv::AdditionalNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v72[0], 17, v20, v21);
    }
  }
  uint64_t v85 = (void ***)MEMORY[0x263EF8330];
  uint64_t v86 = 0x40000000;
  v87 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_3;
  v88 = &unk_26460D008;
  v89 = &v118;
  uint64_t v90 = v6;
  uint64_t v22 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v72);
  uint64_t v24 = v22;
  if (v22)
  {
    int v25 = v23;
    *(void *)long long buf = v22;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    v81 = 0;
    tlv::parseV<pbm::tlv::GroupIdInfo>((unsigned __int8 **)buf, v23, (uint64_t *)&v79);
    if (*(void *)buf)
    {
      v87((uint64_t)&v85, (unsigned __int16 **)&v79);
      uint64_t v73 = &v79;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    }
    else
    {
      uint64_t v73 = &v79;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v72[0], 18, v24, v25);
    }
  }
  uint64_t v79 = (void ***)MEMORY[0x263EF8330];
  uint64_t v80 = 0x40000000;
  v81 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_4;
  v82 = &unk_26460D030;
  v83 = &v118;
  uint64_t v84 = v6;
  uint64_t v26 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v72);
  uint64_t v28 = v26;
  if (v26)
  {
    int v29 = v27;
    v125 = v26;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    v75 = 0;
    tlv::parseV<pbm::tlv::EmailInfo>(&v125, v27, (uint64_t *)&v73);
    if (v125)
    {
      v81((uint64_t)&v79, (unsigned __int16 **)&v73);
      *(void *)long long buf = &v73;
      std::vector<pbm::tlv::EmailId>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    else
    {
      *(void *)long long buf = &v73;
      std::vector<pbm::tlv::EmailId>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v72[0], 19, v28, v29);
    }
  }
  uint64_t v73 = (void ****)MEMORY[0x263EF8330];
  uint64_t v74 = 0x40000000;
  v75 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_5;
  v76 = &unk_26460D058;
  v77 = &v118;
  uint64_t v78 = v6;
  unsigned int v30 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v72);
  int v32 = v30;
  if (v30)
  {
    int v33 = v31;
    v125 = v30;
    memset(buf, 0, 24);
    tlv::parseV<pbm::tlv::HiddenInfo>(&v125, v31, (uint64_t *)buf);
    std::string::size_type v34 = v125;
    if (v125) {
      v75((char **)&v73, (unsigned __int16 **)buf);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    if (!v34) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v72[0], 20, v32, v33);
    }
  }
  uint64_t v35 = (std::__shared_weak_count *)operator new(0x30uLL);
  uint64_t v67 = v6;
  unsigned int v68 = v7;
  v35->__shared_owners_ = 0;
  v35->__shared_weak_owners_ = 0;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C80A0;
  v35[1].__vftable = 0;
  v69 = &v35[1].__vftable;
  v35[1].__shared_owners_ = 0;
  v35[1].__shared_weak_owners_ = 0;
  uint64_t v36 = v70;
  uint64_t v37 = *v70;
  if (os_log_type_enabled(*v70, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v38 = v119[7];
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v38;
    _os_log_impl(&dword_22231A000, v37, OS_LOG_TYPE_DEFAULT, "#I Phone Book Size to Fire Event: %ld", buf, 0xCu);
  }
  long long v39 = (uint64_t *)v119[5];
  uint64_t v40 = v119 + 6;
  if (v39 != v119 + 6)
  {
    do
    {
      uint64_t v41 = *v36;
      if (os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
      {
        int v42 = v39 + 6;
        if (*((char *)v39 + 71) < 0) {
          int v42 = (void *)*v42;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v42;
        _os_log_impl(&dword_22231A000, v41, OS_LOG_TYPE_DEFAULT, "#I Added %s", buf, 0xCu);
      }
      unint64_t shared_owners = v35[1].__shared_owners_;
      unint64_t shared_weak_owners = v35[1].__shared_weak_owners_;
      if (shared_owners >= shared_weak_owners)
      {
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(shared_owners - *v69) >> 7);
        unint64_t v47 = v46 + 1;
        if (v46 + 1 > 0xAAAAAAAAAAAAAALL) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(shared_weak_owners - *v69) >> 7);
        if (2 * v48 > v47) {
          unint64_t v47 = 2 * v48;
        }
        if (v48 >= 0x55555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v47;
        }
        p_unint64_t shared_weak_owners = (char *)&v35[1].__shared_weak_owners_;
        if (v49)
        {
          if (v49 > 0xAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v50 = (char *)operator new(384 * v49);
        }
        else
        {
          int v50 = 0;
        }
        *(void *)long long buf = v50;
        *(void *)&uint8_t buf[8] = &v50[384 * v46];
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        *(void *)&buf[24] = &v50[384 * v49];
        CSIPhoneBookEntry::CSIPhoneBookEntry(*(CSIPhoneBookEntry **)&buf[8], (const CSIPhoneBookEntry *)(v39 + 5));
        uint64_t v51 = 0;
        uint64_t v52 = *(void *)&buf[8];
        *(void *)&buf[16] += 384;
        v53 = v35[1].__vftable;
        for (uint64_t i = v35[1].__shared_owners_;
              (std::__shared_weak_count_vtbl *)(i + v51) != v53;
              CSIPhoneBookEntry::CSIPhoneBookEntry((CSIPhoneBookEntry *)(v51 + v52), (const CSIPhoneBookEntry *)(v51 + i)))
        {
          v51 -= 384;
        }
        uint64_t v55 = v35[1].__shared_weak_owners_;
        unint64_t v71 = *(void *)&buf[16];
        long long v56 = *(_OWORD *)&buf[16];
        std::__shared_count v57 = v35[1].std::__shared_count;
        v35[1].__vftable = (std::__shared_weak_count_vtbl *)(v52 + v51);
        *(std::__shared_count *)&uint8_t buf[8] = v57;
        *(_OWORD *)&v35[1].__shared_owners_ = v56;
        *(void *)&buf[24] = v55;
        *(void *)long long buf = v57.__vftable;
        std::__split_buffer<CSIPhoneBookEntry>::~__split_buffer((uint64_t)buf);
        unint64_t v45 = v71;
        uint64_t v36 = v70;
      }
      else
      {
        CSIPhoneBookEntry::CSIPhoneBookEntry((CSIPhoneBookEntry *)v35[1].__shared_owners_, (const CSIPhoneBookEntry *)(v39 + 5));
        unint64_t v45 = shared_owners + 384;
        v35[1].__shared_owners_ = shared_owners + 384;
      }
      v35[1].__shared_owners_ = v45;
      uint64_t v58 = (uint64_t *)v39[1];
      if (v58)
      {
        do
        {
          uint64_t v59 = v58;
          uint64_t v58 = (uint64_t *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          uint64_t v59 = (uint64_t *)v39[2];
          BOOL v5 = *v59 == (void)v39;
          long long v39 = v59;
        }
        while (!v5);
      }
      long long v39 = v59;
    }
    while (v59 != v40);
  }
  int v60 = *((unsigned __int8 *)v115 + 24);
  std::string v61 = *v36;
  BOOL v62 = os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
  if (v60)
  {
    if (v62)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v61, OS_LOG_TYPE_DEFAULT, "#I Sending out partial fetch response", buf, 2u);
    }
    uint64_t v63 = *(void *)(v67 + 64);
    uint64_t v64 = *((unsigned int *)v111 + 6);
    *(void *)long long buf = v35 + 1;
    *(void *)&uint8_t buf[8] = v35;
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, void, uint64_t, unsigned char *))(*(void *)v63 + 48))(v63, v68, v64, buf);
  }
  else
  {
    if (v62)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v61, OS_LOG_TYPE_DEFAULT, "#I Sending out complete fetch response", buf, 2u);
    }
    uint64_t v65 = *(void *)(v67 + 64);
    uint64_t v66 = *((unsigned int *)v111 + 6);
    *(void *)long long buf = v35 + 1;
    *(void *)&uint8_t buf[8] = v35;
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, void, uint64_t, unsigned char *))(*(void *)v65 + 56))(v65, v68, v66, buf);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  _Block_object_dispose(&v110, 8);
  _Block_object_dispose(&v114, 8);
  _Block_object_dispose(&v118, 8);
  std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(v124[0]);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v72);
}

void sub_22243A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  v69 = *(std::__shared_weak_count **)(v67 - 152);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose((const void *)(v67 - 232), 8);
  std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(*(void ***)(v67 - 184));
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7C10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7C10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
  int v2 = *a2;
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v3 = (const void **)__p[1];
  if (__p[1] != (void *)v6)
  {
    while (*((unsigned char *)*v3 + 8) != 1)
    {
      if (++v3 == (const void **)v6) {
        goto LABEL_8;
      }
    }
  }
  if (v3 != (const void **)v6)
  {
    if (v4)
    {
      v4[9] = v2 == 2;
      qmi::ClientRouter::get();
      operator new();
    }
    __cxa_bad_cast();
  }
LABEL_8:
  operator new();
}

void sub_22243A9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v20, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C7C90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C7C90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*a2 - 1) >= 3) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  unsigned int v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 88) + 16))(*(void *)(v2 + 88), v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI PBM client has been stopped", v5, 2u);
  }
  (*(void (**)(void, uint64_t, void))(**(void **)(v2 + 64) + 16))(*(void *)(v2 + 64), v3, 0);
  QMIPhonebookCommandDriver::reset(v2, v3);
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver24bindPBMSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  if (*(_DWORD *)(a2 + 4))
  {
    unsigned int v4 = v2[2];
    uint64_t v5 = v4 - 1 >= 3 ? 0 : v4;
    long long v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v2 + 88) + 16))(*(void *)(*(void *)v2 + 88), v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      buf[0] = 136315394;
      *(void *)&buf[1] = v7;
      __int16 v14 = 1024;
      LODWORD(v15) = v8;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#N Error binding PBM subscription: %s (0x%x)", (uint8_t *)buf, 0x12u);
    }
  }
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  unint64_t v9 = (const void **)__p[1];
  if (__p[1] != (void *)v12)
  {
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v12) {
        goto LABEL_14;
      }
    }
  }
  if (v9 != (const void **)v12)
  {
    if (v10)
    {
      void v10[3] = 7;
      qmi::ClientRouter::get();
      operator new();
    }
    __cxa_bad_cast();
  }
LABEL_14:
  operator new();
}

void sub_22243B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v26, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24bindPBMSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24bindPBMSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3pbm16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22243B318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)unsigned int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::clone()
{
}

uint64_t ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver22registerForIndicationsENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  unsigned int v5 = *((_DWORD *)v3 + 2);
  if (v5 - 1 >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 88) + 16))(*(void *)(v4 + 88), v6);
  int v8 = *(_DWORD *)(a2 + 4);
  unint64_t v9 = *v7;
  BOOL v10 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      v12[0] = 67109378;
      v12[1] = v8;
      __int16 v13 = 2080;
      uint64_t v14 = qmi::asString();
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N Error received in Register for PBM Indications response, Error in response with code = 0x%x (%s)", (uint8_t *)v12, 0x12u);
    }
    return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v4 + 64) + 16))(*(void *)(v4 + 64), v6, 0);
  }
  else
  {
    if (v10)
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully registered for indications on PBM", (uint8_t *)v12, 2u);
    }
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 64) + 32))(*(void *)(v4 + 64), v6);
  }
}

uint64_t __copy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver22registerForIndicationsEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver22registerForIndicationsEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7E60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void *std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(uint64_t ***a1, void *a2)
{
  uint64_t result = operator new(0x30uLL);
  unsigned int v5 = (uint64_t **)result;
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26D4C7EB0;
  result[4] = 0;
  uint64_t v6 = result + 4;
  result[3] = result + 4;
  uint64_t v7 = (uint64_t **)(result + 3);
  result[5] = 0;
  BOOL v10 = (void *)*a2;
  int v8 = a2 + 1;
  unint64_t v9 = v10;
  if (v10 != v8)
  {
    int v11 = 0;
    long long v12 = result + 4;
    while (1)
    {
      int v13 = *((_DWORD *)v9 + 7);
      uint64_t v14 = v6;
      if (v12 == v6) {
        goto LABEL_9;
      }
      uint64_t v15 = v11;
      uint64_t v16 = v6;
      if (v11)
      {
        do
        {
          uint64_t v14 = v15;
          uint64_t v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v14 = (uint64_t *)v16[2];
          BOOL v17 = *v14 == (void)v16;
          uint64_t v16 = v14;
        }
        while (v17);
      }
      if (*((_DWORD *)v14 + 7) < v13)
      {
LABEL_9:
        if (v11) {
          std::string::size_type v18 = (uint64_t **)v14;
        }
        else {
          std::string::size_type v18 = (uint64_t **)v6;
        }
        if (v11) {
          int v19 = (uint64_t **)(v14 + 1);
        }
        else {
          int v19 = (uint64_t **)v6;
        }
        if (!*v19)
        {
LABEL_25:
          uint64_t v22 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v22 + 7) = v13;
          uint64_t result = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v7, (uint64_t)v18, v19, v22);
        }
      }
      else
      {
        int v19 = (uint64_t **)v6;
        std::string::size_type v18 = (uint64_t **)v6;
        if (!v11) {
          goto LABEL_25;
        }
        uint64_t v20 = v11;
        while (1)
        {
          while (1)
          {
            std::string::size_type v18 = (uint64_t **)v20;
            int v21 = *((_DWORD *)v20 + 7);
            if (v21 <= v13) {
              break;
            }
            uint64_t v20 = *v18;
            int v19 = v18;
            if (!*v18) {
              goto LABEL_25;
            }
          }
          if (v21 >= v13) {
            break;
          }
          uint64_t v20 = v18[1];
          if (!v20)
          {
            int v19 = v18 + 1;
            goto LABEL_25;
          }
        }
      }
      int v23 = (void *)v9[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          int v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (void *)v9[2];
          BOOL v17 = *v24 == (void)v9;
          unint64_t v9 = v24;
        }
        while (!v17);
      }
      if (v24 == v8) {
        break;
      }
      int v11 = (uint64_t *)*v6;
      long long v12 = *v7;
      unint64_t v9 = v24;
    }
  }
  *a1 = v7;
  a1[1] = v5;
  return result;
}

void sub_22243B818(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::set<PhoneBookType>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::set<PhoneBookType>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<std::set<PhoneBookType>>::__on_zero_shared(uint64_t a1)
{
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMnc>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<qos::tlv::NetworkProfileChange>(a2, a1 + 10);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookTypeE3__0EEOS1_OT__block_invoke(uint64_t a1, void *a2)
{
  v77[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  uint64_t v5 = a2[1];
  v41[0] = *a2;
  v41[1] = v5;
  uint64_t v6 = a2[2];
  v41[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v41);
  if ((v4 - 1) >= 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v4;
  }
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 88) + 16))(*(void *)(v3 + 88), v4);
  int v8 = HIDWORD(v41[0]);
  if (HIDWORD(v41[0]))
  {
    unint64_t v9 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = qmi::asString();
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v8;
      LOWORD(v72) = 2080;
      *(void *)((char *)&v72 + 2) = v10;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for PB Capabilities. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 64) + 24))(*(void *)(v3 + 64), v4, 1);
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&long long v72 = buf;
    *((void *)&v72 + 1) = 0x4002000000;
    uint64_t v73 = __Block_byref_object_copy__15;
    uint64_t v74 = __Block_byref_object_dispose__16;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    v77[0] = 0;
    PBCapabilities::PrimaryNumber::PrimaryNumber((PBCapabilities::PrimaryNumber *)&v75);
    PBCapabilities::Groups::Groups((PBCapabilities::Groups *)((char *)&v76 + 4));
    PBCapabilities::AdditionaNumber::AdditionaNumber((PBCapabilities::AdditionaNumber *)((char *)&v76 + 6));
    PBCapabilities::Email::Email((PBCapabilities::Email *)((char *)v77 + 1));
    PBCapabilities::SecondName::SecondName((PBCapabilities::SecondName *)((char *)v77 + 3));
    PBCapabilities::HiddenRecords::HiddenRecords((PBCapabilities::HiddenRecords *)((char *)v77 + 4));
    v65[0] = MEMORY[0x263EF8330];
    v65[1] = 0x40000000;
    uint64_t v66 = ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke;
    uint64_t v67 = &unk_26460CEA0;
    unsigned int v68 = buf;
    uint64_t v69 = v3;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v41);
    uint64_t v13 = TlvValue;
    if (TlvValue)
    {
      int v14 = v12;
      v56[0] = TlvValue;
      uint64_t v60 = tlv::parseV<pbm::tlv::CapabilityBasicInformation>(v56, v12);
      LOWORD(v61) = v15;
      if (v56[0]) {
        v66((uint64_t)v65, (unsigned __int8 *)&v60);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v41[0]), 16, v13, v14);
      }
    }
    uint64_t v60 = MEMORY[0x263EF8330];
    uint64_t v61 = 0x40000000;
    BOOL v62 = ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_2;
    uint64_t v63 = &unk_26460CEC8;
    uint64_t v64 = buf;
    uint64_t v16 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v41);
    uint64_t v18 = v16;
    if (v16)
    {
      int v19 = v17;
      v56[0] = v16;
      LOWORD(v52[0]) = tlv::parseV<pbm::tlv::GroupCapability>(v56, v17);
      if (v56[0]) {
        v62((uint64_t)&v60, v52);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v41[0]), 17, v18, v19);
      }
    }
    v56[0] = MEMORY[0x263EF8330];
    v56[1] = 0x40000000;
    std::__shared_count v57 = (uint64_t (*)(uint64_t, unint64_t *))___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_3;
    uint64_t v58 = &unk_26460CEF0;
    uint64_t v59 = buf;
    uint64_t v20 = (unsigned char *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v41);
    uint64_t v22 = v20;
    if (v20)
    {
      int v23 = v21;
      v52[0] = v20;
      uint64_t v24 = tlv::parseV<pbm::tlv::AdditionalNumberCapability>(v52, v21);
      LOWORD(v48[0]) = v24;
      BYTE2(v48[0]) = BYTE2(v24);
      if (v52[0]) {
        v57((uint64_t)v56, v48);
      }
      else {
        ((void (*)(void, uint64_t, unsigned char *, void))*MEMORY[0x263F8BD78])(LOWORD(v41[0]), 18, v22, v23);
      }
    }
    v52[0] = (unsigned char *)MEMORY[0x263EF8330];
    v52[1] = (unsigned char *)0x40000000;
    v53 = (uint64_t (*)(uint64_t, unint64_t *))___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_4;
    int v54 = &unk_26460CF18;
    uint64_t v55 = buf;
    uint64_t v25 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v41);
    uint64_t v27 = v25;
    if (v25)
    {
      int v28 = v26;
      v48[0] = v25;
      LOWORD(v44[0]) = tlv::parseV<pbm::tlv::EmailCapability>(v48, v26);
      if (v48[0]) {
        v53((uint64_t)v52, v44);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v41[0]), 19, v27, v28);
      }
    }
    v48[0] = MEMORY[0x263EF8330];
    v48[1] = 0x40000000;
    unint64_t v49 = (uint64_t (*)(uint64_t, uint64_t *))___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_5;
    int v50 = &unk_26460CF40;
    uint64_t v51 = buf;
    uint64_t v29 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v41);
    uint64_t v31 = v29;
    if (v29)
    {
      int v32 = v30;
      v44[0] = v29;
      LOBYTE(v42) = tlv::parseV<pbm::tlv::SecondNameCapability>(v44, v30);
      if (v44[0]) {
        v49((uint64_t)v48, &v42);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v41[0]), 20, v31, v32);
      }
    }
    v44[0] = MEMORY[0x263EF8330];
    v44[1] = 0x40000000;
    unint64_t v45 = ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_6;
    unint64_t v46 = &unk_26460CF68;
    unint64_t v47 = buf;
    uint64_t v33 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v41);
    uint64_t v35 = v33;
    if (v33)
    {
      int v36 = v34;
      uint64_t v42 = v33;
      char v70 = tlv::parseV<pbm::tlv::HiddenRecordsCapability>((unint64_t *)&v42, v34);
      if (v42) {
        v45((uint64_t)v44, &v70);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v41[0]), 21, v35, v36);
      }
    }
    uint64_t v37 = *(void *)(v3 + 64);
    uint64_t v38 = v72;
    long long v39 = (char *)operator new(0x30uLL);
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = 0;
    *(void *)long long v39 = &unk_26D4C7FD0;
    long long v40 = *(_OWORD *)(v38 + 40);
    *((void *)v39 + 5) = *(void *)(v38 + 56);
    *(_OWORD *)(v39 + 24) = v40;
    uint64_t v42 = (uint64_t)(v39 + 24);
    uint64_t v43 = (std::__shared_weak_count *)v39;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v37 + 40))(v37, v4, &v42);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    _Block_object_dispose(buf, 8);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v41);
}

void sub_22243C014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Block_object_dispose((const void *)(v14 - 144), 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c124_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c124_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7F80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<PBCapabilities>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PBCapabilities>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C7FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver5fetchEN10subscriber7SimSlotE13PhoneBookTypejjE3__1EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  unsigned int v5 = *((_DWORD *)v3 + 2);
  int v6 = *((_DWORD *)v3 + 3);
  if (v5 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5;
  }
  int v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 88) + 16))(*(void *)(v4 + 88), v7);
  unint64_t v9 = v8;
  int v10 = *((_DWORD *)a2 + 1);
  if (v10)
  {
    int v11 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v10;
      LOWORD(v20) = 2080;
      *(void *)((char *)&v20 + 2) = qmi::asString();
      _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for Read Record. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 64) + 24))(*(void *)(v4 + 64), v7, 3);
  }
  else
  {
    int v12 = (std::__shared_weak_count *)operator new(0x30uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C80A0;
    v12[1].__shared_owners_ = 0;
    v12[1].__shared_weak_owners_ = 0;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&long long v20 = 1174405120;
    *((void *)&v20 + 1) = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_resEN3qmi16SubscriptionTypeE13PhoneBookTypeRKN3pbm19ReadRecordUndecoded8ResponseE_block_invoke;
    int v21 = &__block_descriptor_tmp_30_8;
    uint64_t v22 = v4;
    int v23 = v9;
    int v26 = v7;
    int v27 = v6;
    uint64_t v24 = v12 + 1;
    uint64_t v25 = v12;
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v15 = TlvValue;
    if (TlvValue)
    {
      int v16 = v14;
      uint64_t v18 = TlvValue;
      __int16 v17 = tlv::parseV<pbm::tlv::NumRecords>((unint64_t *)&v18, v14);
      if (v18) {
        (*((void (**)(uint8_t *, __int16 *))&v20 + 1))(buf, &v17);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v15, v16);
      }
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_22243C3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t __copy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver5fetchEN10subscriber7SimSlotE13PhoneBookTypejjE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver5fetchEN10subscriber7SimSlotE13PhoneBookTypejjE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1,std::allocator<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1,std::allocator<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8050;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3pbm19ReadRecordUndecoded8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22243C568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__shared_ptr_emplace<std::vector<CSIPhoneBookEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C80A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<CSIPhoneBookEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C80A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<std::vector<CSIPhoneBookEntry>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void ***)(a1 + 32);
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        CSIPhoneBookEntry::~CSIPhoneBookEntry(v3 - 48);
      while (v3 != v1);
      uint64_t v4 = *(void ***)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(a1[1]);
    CSIPhoneBookEntry::~CSIPhoneBookEntry(a1 + 5);
    operator delete(a1);
  }
}

char **std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  unsigned int v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  int v8 = (char **)(a1 + 1);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (char **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        unsigned int v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      unsigned int v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v28 = 0;
    int v10 = (char *)operator new(0x1A8uLL);
    v27[0] = v10;
    v27[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *((void *)v10 + 6) = 0;
    *((void *)v10 + 7) = 0;
    *((void *)v10 + 8) = 0;
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)(v10 + 72));
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)(v10 + 208));
    *((void *)v10 + 5) = -1;
    *((void *)v10 + 51) = 0;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + 392) = 0u;
    *(_OWORD *)(v10 + 344) = 0u;
    *(_OWORD *)(v10 + 360) = 0u;
    if (v10[71] < 0)
    {
      *((void *)v10 + 7) = 0;
      int v11 = (unsigned char *)*((void *)v10 + 6);
    }
    else
    {
      v10[71] = 0;
      int v11 = v10 + 48;
    }
    int v12 = v10 + 344;
    uint64_t v13 = v10 + 368;
    *int v11 = 0;
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v29, (const char *)&unk_222543CCE);
    *((void *)v10 + 9) = v29;
    int v14 = (void **)(v10 + 80);
    if (v10[103] < 0) {
      operator delete(*v14);
    }
    *(_OWORD *)int v14 = v30;
    *((void *)v10 + 12) = v31;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    uint64_t v15 = (void **)(v10 + 104);
    if (v10[127] < 0) {
      operator delete(*v15);
    }
    *(_OWORD *)uint64_t v15 = v32;
    *((void *)v10 + 15) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *((_DWORD *)v10 + 32) = v34;
    v10[132] = v35;
    int v16 = (void **)(v10 + 136);
    if (v10[159] < 0) {
      operator delete(*v16);
    }
    char v17 = 0;
    *(_OWORD *)int v16 = __p;
    *((void *)v10 + 19) = v37;
    HIBYTE(v37) = 0;
    LOBYTE(__p) = 0;
    uint64_t v18 = (void **)(v10 + 160);
    if (v10[183] < 0)
    {
      operator delete(*v18);
      char v17 = HIBYTE(v37);
    }
    *(_OWORD *)uint64_t v18 = v38;
    *((void *)v10 + 22) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    *(_OWORD *)(v10 + 184) = v40;
    v10[200] = v41;
    if (v17 < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v29, (const char *)&unk_222543CCE);
    *((void *)v10 + 26) = v29;
    int v19 = (void **)(v10 + 216);
    if (v10[239] < 0) {
      operator delete(*v19);
    }
    *(_OWORD *)int v19 = v30;
    *((void *)v10 + 29) = v31;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    long long v20 = (void **)(v10 + 240);
    if (v10[263] < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)long long v20 = v32;
    *((void *)v10 + 32) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *((_DWORD *)v10 + 66) = v34;
    v10[268] = v35;
    int v21 = (void **)(v10 + 272);
    if (v10[295] < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)int v21 = __p;
    *((void *)v10 + 36) = v37;
    HIBYTE(v37) = 0;
    LOBYTE(__p) = 0;
    uint64_t v22 = v10 + 296;
    if (v10[319] < 0)
    {
      operator delete(*((void **)v10 + 37));
      int v23 = SHIBYTE(v37);
      *uint64_t v22 = v38;
      *((void *)v10 + 39) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      *((_OWORD *)v10 + 20) = v40;
      v10[336] = v41;
      if (v23 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *uint64_t v22 = v38;
      *((void *)v10 + 39) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      *((_OWORD *)v10 + 20) = v40;
      v10[336] = v41;
    }
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (v10[367] < 0)
    {
      *((void *)v10 + 44) = 0;
      int v12 = (unsigned char *)*((void *)v10 + 43);
    }
    else
    {
      v10[367] = 0;
    }
    *int v12 = 0;
    if (v10[391] < 0)
    {
      *((void *)v10 + 47) = 0;
      uint64_t v13 = (unsigned char *)*((void *)v10 + 46);
    }
    else
    {
      v10[391] = 0;
    }
    *uint64_t v13 = 0;
    if (v10[415] < 0)
    {
      *((void *)v10 + 50) = 0;
      uint64_t v24 = (unsigned char *)*((void *)v10 + 49);
    }
    else
    {
      v10[415] = 0;
      uint64_t v24 = v10 + 392;
    }
    *uint64_t v24 = 0;
    v10[416] = 0;
    LOBYTE(v28) = 1;
    *(void *)int v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *uint64_t v7 = v10;
    uint64_t v25 = (uint64_t *)**a1;
    if (v25)
    {
      *a1 = v25;
      int v10 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    int v8 = (char **)v27[0];
    v27[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
  }
  return v8;
}

void sub_22243CB38(_Unwind_Exception *a1, void **a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 415) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(v2 + 391) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 367) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 319) < 0) {
    operator delete(*(void **)(v2 + 296));
  }
  if (*(char *)(v2 + 295) < 0) {
    operator delete(*(void **)(v2 + 272));
  }
  if (*(char *)(v2 + 263) < 0) {
    operator delete(*(void **)(v2 + 240));
  }
  if (*(char *)(v2 + 239) < 0) {
    operator delete(*(void **)(v2 + 216));
  }
  if (*(char *)(v2 + 183) < 0) {
    operator delete(*(void **)(v2 + 160));
  }
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*(void **)(v2 + 136));
  }
  if (*(char *)(v2 + 127) < 0) {
    operator delete(*(void **)(v2 + 104));
  }
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*(void **)(v2 + 80));
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      CSIPhoneBookEntry::~CSIPhoneBookEntry(v1 + 5);
    }
    operator delete(v1);
  }
}

void *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C8108;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C8108;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::getSize(uint64_t a1)
{
  return tlv::size<pbm::tlv::WriteRecordInfo>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<pbm::tlv::WriteRecordInfo>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::clone()
{
}

void sub_22243CE68(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x1091C4000BCEACBLL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  uint64_t v6 = a2[2];
  v15[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v15);
  if ((v4 - 1) >= 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v4;
  }
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 88) + 16))(*(void *)(v3 + 88), v4);
  int v8 = HIDWORD(v15[0]);
  if (HIDWORD(v15[0]))
  {
    unsigned int v9 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = qmi::asString();
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v8;
      LOWORD(v19) = 2080;
      *(void *)((char *)&v19 + 2) = v10;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for Write Record. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 64) + 24))(*(void *)(v3 + 64), v4, 4);
  }
  else
  {
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&long long v19 = 0x40000000;
    *((void *)&v19 + 1) = ___ZN25QMIPhonebookCommandDriver21handleWriteRecord_resEN3qmi16SubscriptionTypeERKN3pbm11WriteRecord8ResponseE_block_invoke;
    long long v20 = &__block_descriptor_tmp_43_4;
    uint64_t v21 = v3;
    int v22 = v4;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v15);
    uint64_t v13 = TlvValue;
    if (TlvValue)
    {
      int v14 = v12;
      uint64_t v17 = TlvValue;
      __int16 v16 = tlv::parseV<pbm::tlv::WriteRecordId>((unint64_t *)&v17, v12);
      if (v17) {
        (*((void (**)(uint8_t *, __int16 *))&v19 + 1))(buf, &v16);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v15[0]), 16, v13, v14);
      }
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v15);
}

void sub_22243D0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c189_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c189_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0,std::allocator<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0,std::allocator<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8170;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMnc>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<qos::tlv::NetworkProfileChange>(a2, a1 + 10);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookTypeE3__0EEOS1_OT__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  uint64_t v5 = a2[1];
  v16[0] = *a2;
  v16[1] = v5;
  uint64_t v6 = a2[2];
  v16[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v16);
  if ((v4 - 1) >= 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v4;
  }
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 88) + 16))(*(void *)(v3 + 88), v4);
  int v8 = HIDWORD(v16[0]);
  if (HIDWORD(v16[0]))
  {
    unsigned int v9 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = qmi::asString();
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v8;
      LOWORD(v21) = 2080;
      *(void *)((char *)&v21 + 2) = v10;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for PB State Record. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 64) + 24))(*(void *)(v3 + 64), v4, 2);
  }
  else
  {
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&long long v21 = 0x40000000;
    *((void *)&v21 + 1) = ___ZN25QMIPhonebookCommandDriver17handlePbState_resEN3qmi16SubscriptionTypeERKN3pbm7PBState8ResponseE_block_invoke;
    int v22 = &__block_descriptor_tmp_47_2;
    uint64_t v23 = v3;
    uint64_t v24 = v7;
    int v25 = v4;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v16);
    uint64_t v13 = TlvValue;
    if (TlvValue)
    {
      int v14 = v12;
      uint64_t v19 = TlvValue;
      unint64_t v15 = tlv::parseV<pbm::tlv::PBStateInfo>((unint64_t *)&v19, v12);
      int v17 = v15;
      __int16 v18 = WORD2(v15);
      if (v19) {
        (*((void (**)(uint8_t *, int *))&v21 + 1))(buf, &v17);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v16[0]), 16, v13, v14);
      }
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v16);
}

void sub_22243D47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8240;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void Mav30QMIAttachApnCommandDriver::create(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_22243D74C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Mav30QMIAttachApnCommandDriver::~Mav30QMIAttachApnCommandDriver(Mav30QMIAttachApnCommandDriver *this)
{
  *(void *)this = &unk_26D4B8F38;
  qmi::Client::~Client((Mav30QMIAttachApnCommandDriver *)((char *)this + 96));

  AttachApnCommandDriver::~AttachApnCommandDriver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4B8F38;
  qmi::Client::~Client((Mav30QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void Mav30QMIAttachApnCommandDriver::handleBasebandOn_sync(Mav30QMIAttachApnCommandDriver *this)
{
  uint64_t v2 = (Mav30QMIAttachApnCommandDriver *)((char *)this + 96);
  uint64_t v3 = (const char *)*MEMORY[0x263F8AFE0];
  subscriber::simSlotAsInstance();
  qmi::Client::set(v2, v3);
  memset(v12, 0, sizeof(v12));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
  LODWORD(v3) = *((_DWORD *)this + 16);
  uint64_t v4 = qmi::MutableMessageBase::getTLV<wds::tlv::SubscriptionType>((uint64_t)v12, 1);
  if (v3 == 2) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  *(_DWORD *)uint64_t v4 = v5;
  v7[5] = v2;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  int v11 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  _DWORD v7[2] = ___ZN30Mav30QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_16;
  v7[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_17;
  aBlock[3] = &unk_26460D318;
  aBlock[4] = v7;
  uint64_t v6 = _Block_copy(aBlock);
  int v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    uint64_t v6 = v11;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);

  QMIAttachApnCommandDriverBase::handleBasebandOn_sync(this);
}

void sub_22243DA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN30Mav30QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Binding subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

void Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  memset(v157, 0, sizeof(v157));
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v157, a3);
  char v6 = *(unsigned char *)(a3 + 32);
  uint64_t v7 = (char *)operator new(0x20uLL);
  char v78 = v6;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26D4C4F28;
  v7[24] = 0;
  __int16 v8 = v7 + 24;
  int v9 = dispatch_group_create();
  uint64_t v10 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v10);
    dispatch_release(v10);
  }
  char v11 = *(unsigned char *)(a1 + 128);
  unint64_t v85 = a1;
  if (!v11)
  {
    *__int16 v8 = 1;
    goto LABEL_158;
  }
  if (!*(unsigned char *)(a2 + 8)
    || (*(void *)a2
      ? (int v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (int v12 = 0),
        !v12))
  {
    uint64_t v63 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v159 = 0;
      _os_log_impl(&dword_22231A000, v63, OS_LOG_TYPE_DEFAULT, "#I dummy push complete", v159, 2u);
    }
    goto LABEL_158;
  }
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&cf, (const void **)a2);
  unsigned int v84 = *(unsigned __int16 *)(a3 + 64);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  v155[0] = &unk_26D4C84C0;
  v155[1] = v7 + 24;
  v155[2] = v7;
  v156 = v155;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  CFTypeRef v90 = cf;
  if (cf) {
    CFRetain(cf);
  }
  AttachApnCommandDriver::getApnListForType_sync();
  uint64_t v76 = v7 + 24;
  v77 = v7;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v90);
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v13 = v91;
  v83 = v92;
  if (v91 == v92) {
    goto LABEL_124;
  }
  char v14 = 0;
  uint64_t v81 = *MEMORY[0x263F8C2B8];
  v82 = (char *)*MEMORY[0x263F03688];
  uint64_t v79 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  uint64_t v80 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v15 = 32;
  while (1)
  {
    v153 = 0;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)&v153, v13);
    uint64_t v175 = 0;
    long long v174 = 0u;
    long long v173 = 0u;
    long long v172 = 0u;
    long long v171 = 0u;
    long long v170 = 0u;
    long long v169 = 0u;
    long long v168 = 0u;
    long long v167 = 0u;
    long long v166 = 0u;
    long long v165 = 0u;
    long long v164 = 0u;
    *(_OWORD *)v163 = 0u;
    long long v162 = 0u;
    memset(v161, 0, sizeof(v161));
    long long v160 = 0u;
    *(_OWORD *)v159 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v159);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v160, (uint64_t)"trying to push 3GPP attach APN ", 31);
    __int16 v18 = v153
        ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
        : 0;
    if (v18)
    {
      ctu::cf_to_xpc((uint64_t *)&object, v153, v16);
      xpc::object::to_string((uint64_t *)&__p, (xpc::object *)&object);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "empty");
    }
    uint64_t v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      break;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_31;
    }
LABEL_32:
    a1 = v85;
    uint64_t v21 = *(void *)(v85 + 88);
    if (v21) {
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v21 + 48))(v21, v159);
    }
    v151[1] = 0;
    v151[0] = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v151, v153);
    memset(v150, 0, sizeof(v150));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v150);
    uint64_t v145 = MEMORY[0x263EF8330];
    uint64_t v146 = 1174405120;
    uint64_t v147 = (uint64_t)___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke;
    uint64_t v148 = (uint64_t)&__block_descriptor_tmp_9_10;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v149, (const ctu::cf::dict_adapter *)v151);
    int v22 = qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP>((uint64_t)v150, 17);
    ((void (*)(uint64_t *, char *))v147)(&v145, v22);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingLTE");
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v151, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__p);
    if ((Int - 1) <= 2)
    {
      v141[0] = MEMORY[0x263EF8330];
      v141[1] = 0x40000000;
      v142 = (uint64_t (*)(uint64_t, char *))___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2;
      v143 = &__block_descriptor_tmp_15_3;
      int v144 = Int - 1;
      uint64_t v24 = qmi::MutableMessageBase::getTLV<wds::tlv::LTERoamingPdpType>((uint64_t)v150, 65);
      v142((uint64_t)v141, v24);
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingUMTS");
    int v25 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v151, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__p);
    if ((v25 - 1) <= 2)
    {
      v137[0] = MEMORY[0x263EF8330];
      v137[1] = 0x40000000;
      v138 = (uint64_t (*)(uint64_t, char *))___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3;
      v139 = &__block_descriptor_tmp_18_7;
      int v140 = v25 - 1;
      uint64_t v26 = qmi::MutableMessageBase::getTLV<wds::tlv::UMTSRoamingPdpType>((uint64_t)v150, 66);
      v138((uint64_t)v137, v26);
    }
    int v27 = *(const void **)(a3 + 40);
    uint64_t v28 = *(void *)(a3 + 48);
    uint64_t v29 = v28 - (void)v27;
    if ((const void *)v28 != v27)
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v85;
      uint64_t v30 = v29 >> 1;
      __p.__r_.__value_.__r.__words[2] = 0;
      uint64_t v135 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p.__r_.__value_.__l.__size_, v27, v28, v29 >> 1);
      unint64_t v136 = v30;
      uint64_t v31 = qmi::MutableMessageBase::getTLV<wds::tlv::PcoContainerIds>((uint64_t)v150, 71);
      if (v136 >= 0xB)
      {
        long long v32 = *(NSObject **)(__p.__r_.__value_.__r.__words[0] + 40);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
          _os_log_impl(&dword_22231A000, v32, OS_LOG_TYPE_DEFAULT, "#E Too many container IDs. Using only the first %lu IDs", (uint8_t *)&buf, 0xCu);
        }
      }
      *(void *)uint64_t v31 = 0;
      *((void *)v31 + 1) = 0;
      *((_DWORD *)v31 + 4) = 0;
      uint64_t v33 = v136;
      if (v136 >= 0xA) {
        uint64_t v33 = 10;
      }
      if (v33) {
        memmove(v31, (const void *)__p.__r_.__value_.__l.__size_, 2 * v33);
      }
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
    }
    if (v84 >= 0x100) {
      *qmi::MutableMessageBase::getTLV<wds::tlv::RequestMSISDNUsingPco>((uint64_t)v150, 72) = v84;
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "PcscfAddressRequired");
    int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v151, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__p);
    char v35 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>((uint64_t)v150, 221);
    uint64_t v36 = 1;
    if (Bool) {
      uint64_t v36 = 2;
    }
    *(void *)char v35 = v36;
    *(void *)&long long v131 = MEMORY[0x263EF8330];
    *((void *)&v131 + 1) = 1174405120;
    *(void *)&long long v132 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4;
    *((void *)&v132 + 1) = &__block_descriptor_tmp_24_14;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v133, (const ctu::cf::dict_adapter *)v151);
    uint64_t v37 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>((uint64_t)v150, 20);
    ((void (*)(long long *, char *))v132)(&v131, v37);
    memset(&__p, 0, sizeof(__p));
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "username");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](&__s);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1174405120;
      uint64_t v128 = (void (*)(long long *, char *))___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_26;
      v129 = &__block_descriptor_tmp_27_5;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v130, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v130 = __p;
      }
      uint64_t v39 = qmi::MutableMessageBase::getTLV<wds::tlv::UserName>((uint64_t)v150, 27);
      v128(&aBlock, v39);
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
    }
    memset(&buf, 0, sizeof(buf));
    memset(&__s, 0, sizeof(__s));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v120, "password");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](v120);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    std::string::size_type v40 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v40 = buf.__r_.__value_.__l.__size_;
    }
    if (v40)
    {
      v122[0] = (void *)MEMORY[0x263EF8330];
      v122[1] = (void *)1174405120;
      v123 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_29;
      v124 = &__block_descriptor_tmp_32_11;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v125, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else {
        std::string v125 = buf;
      }
      char v41 = qmi::MutableMessageBase::getTLV<wds::tlv::Password>((uint64_t)v150, 28);
      v123((uint64_t)v122, (std::string *)v41);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v125.__r_.__value_.__l.__data_);
      }
    }
    memset(&__s, 0, sizeof(__s));
    v120[1] = 0;
    v120[0] = 0;
    uint64_t v121 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v154, "auth_type");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](&v154);
    if (SHIBYTE(v121) < 0) {
      operator delete(v120[0]);
    }
    std::string::size_type v42 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = __s.__r_.__value_.__l.__size_;
    }
    if (v42)
    {
      xpc_object_t v115 = (xpc_object_t)MEMORY[0x263EF8330];
      uint64_t v116 = 1174405120;
      uint64_t v117 = (uint64_t)___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_34;
      uint64_t v118 = &__block_descriptor_tmp_38_8;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v119 = __s;
      }
      uint64_t v43 = qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>((uint64_t)v150, 29);
      ((void (*)(xpc_object_t *, char *))v117)(&v115, v43);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v119.__r_.__value_.__l.__data_);
      }
    }
    v111[0] = MEMORY[0x263EF8330];
    v111[1] = 1174405120;
    uint64_t v112 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_39;
    int v113 = &__block_descriptor_tmp_45_6;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v114, (const ctu::cf::dict_adapter *)v151);
    int v44 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrUsingPco>((uint64_t)v150, 31);
    v112((uint64_t)v111, v44);
    LODWORD(v154) = -1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v120, "APNClass");
    unint64_t v45 = (int *)(*(uint64_t (**)(void *, void *))v151[0])(v151, v120[0]);
    unint64_t v46 = v45;
    if (v45)
    {
      CFTypeID v47 = CFGetTypeID(v45);
      if (v47 == CFNumberGetTypeID()) {
        int v49 = ctu::cf::assign((ctu::cf *)&v154, v46, v48);
      }
      else {
        int v49 = 0;
      }
      CFRelease(v46);
    }
    else
    {
      int v49 = 0;
    }
    MEMORY[0x223C99AF0](v120);
    if (v49 && (v154 & 0x80000000) == 0)
    {
      v107[0] = MEMORY[0x263EF8330];
      v107[1] = 0x40000000;
      uint64_t v108 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_47;
      v109 = &__block_descriptor_tmp_49_4;
      int v110 = v154;
      int v50 = qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>((uint64_t)v150, 49);
      v108((uint64_t)v107, v50);
    }
    char v106 = 1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v120, v82);
    uint64_t v51 = (BOOL *)(*(uint64_t (**)(void *, void *))v151[0])(v151, v120[0]);
    uint64_t v52 = v51;
    if (v51)
    {
      CFTypeID v53 = CFGetTypeID(v51);
      if (v53 == CFBooleanGetTypeID()) {
        int v55 = ctu::cf::assign((ctu::cf *)&v106, v52, v54);
      }
      else {
        int v55 = 0;
      }
      CFRelease(v52);
      MEMORY[0x223C99AF0](v120);
      if (v55)
      {
        v102[0] = MEMORY[0x263EF8330];
        v102[1] = 0x40000000;
        v103 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_50;
        v104 = &__block_descriptor_tmp_52_0;
        char v105 = v106;
        long long v56 = qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>((uint64_t)v150, 62);
        v103((uint64_t)v102, v56);
      }
    }
    else
    {
      MEMORY[0x223C99AF0](v120);
    }
    v98[0] = MEMORY[0x263EF8330];
    v98[1] = 0x40000000;
    v99 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_53;
    uint64_t v100 = &__block_descriptor_tmp_55_2;
    char v101 = v14 & 1;
    std::__shared_count v57 = qmi::MutableMessageBase::getTLV<wds::tlv::Append>((uint64_t)v150, 144);
    v99((uint64_t)v98, v57);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>((uint64_t)v150, 145) = 0;
    std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100](&v87);
    MEMORY[0x223C99B30](v114);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    MEMORY[0x223C99B30](v133);
    MEMORY[0x223C99B30](v149);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v150);
    MEMORY[0x223C99B30](v151);
    *(void *)v159 = v81;
    *(void *)&v159[*(void *)(v81 - 24)] = v80;
    *(void *)&long long v160 = v79;
    *((void *)&v160 + 1) = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v164) < 0) {
      operator delete(v163[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C9A8E0](&v166);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v153);
    ++v13;
    v15 -= 32;
    char v14 = 1;
    if (v13 == v83)
    {
      v94[0] = MEMORY[0x263EF8330];
      v94[1] = 0x40000000;
      v95 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_5;
      uint64_t v96 = &__block_descriptor_tmp_61_4;
      char v97 = v78;
      uint64_t v58 = qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(v87 - v15, 145);
      v95((uint64_t)v94, (int *)v58);
      uint64_t v59 = v87;
      uint64_t v60 = v88;
      if (v87 != v88)
      {
        int v61 = 0;
        xpc_object_t v115 = 0;
        uint64_t v116 = (uint64_t)&v115;
        uint64_t v117 = 0x2000000000;
        LOBYTE(v118) = 0;
        uint64_t v145 = 0;
        uint64_t v146 = (uint64_t)&v145;
        uint64_t v147 = 0x2000000000;
        uint64_t v148 = (v88 - v87) >> 5;
        do
        {
          long long v131 = 0u;
          long long v132 = 0u;
          qmi::MutableMessageBase::MutableMessageBase();
          v122[0] = (void *)(v85 + 96);
          v122[1] = (void *)QMIServiceMsg::create();
          LODWORD(v123) = 25000;
          v124 = 0;
          v125.__r_.__value_.__r.__words[0] = 0;
          *(void *)v159 = MEMORY[0x263EF8330];
          *(void *)&v159[8] = 1174405120;
          *(void *)&long long v160 = ___ZN30Mav30QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke;
          *((void *)&v160 + 1) = &unk_26D4C82E8;
          *(void *)&v161[1] = v85;
          *((void *)&v161[1] + 1) = v10;
          if (v10)
          {
            dispatch_retain(v10);
            if (*((void *)&v161[1] + 1)) {
              dispatch_group_enter(*((dispatch_group_t *)&v161[1] + 1));
            }
          }
          LODWORD(v164) = v61;
          *(void *)&v161[0] = &v115;
          *((void *)&v161[0] + 1) = &v145;
          std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)&v162, (uint64_t)v155);
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 0x40000000;
          uint64_t v128 = (void (*)(long long *, char *))___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_17;
          v129 = &unk_26460D318;
          v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
          BOOL v62 = _Block_copy(&aBlock);
          v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
          if (v122[1])
          {
            qmi::Client::send();
            BOOL v62 = (void *)v125.__r_.__value_.__r.__words[0];
          }
          if (v62) {
            _Block_release(v62);
          }
          std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](&v162);
          if (*((void *)&v161[1] + 1))
          {
            dispatch_group_leave(*((dispatch_group_t *)&v161[1] + 1));
            if (*((void *)&v161[1] + 1)) {
              dispatch_release(*((dispatch_object_t *)&v161[1] + 1));
            }
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v131);
          v59 += 32;
          ++v61;
        }
        while (v59 != v60);
        _Block_object_dispose(&v145, 8);
        _Block_object_dispose(&v115, 8);
        __int16 v8 = v76;
        uint64_t v7 = v77;
        a1 = v85;
        goto LABEL_156;
      }
LABEL_124:
      uint64_t v175 = 0;
      long long v174 = 0u;
      long long v173 = 0u;
      long long v172 = 0u;
      long long v171 = 0u;
      long long v170 = 0u;
      long long v169 = 0u;
      long long v168 = 0u;
      long long v167 = 0u;
      long long v166 = 0u;
      long long v165 = 0u;
      long long v164 = 0u;
      *(_OWORD *)v163 = 0u;
      long long v162 = 0u;
      memset(v161, 0, sizeof(v161));
      long long v160 = 0u;
      *(_OWORD *)v159 = 0u;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v159);
      uint64_t v7 = v77;
      __int16 v8 = v76;
      uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v160, (uint64_t)"Nothing found to push for ", 26);
      long long aBlock = 0uLL;
      uint64_t v128 = 0;
      ctu::cf::assign();
      *(_OWORD *)v122 = aBlock;
      v123 = (void (*)(uint64_t, std::string *))v128;
      if (SHIBYTE(v128) >= 0) {
        uint64_t v65 = v122;
      }
      else {
        uint64_t v65 = (void **)aBlock;
      }
      if (SHIBYTE(v128) >= 0) {
        uint64_t v66 = HIBYTE(v128);
      }
      else {
        uint64_t v66 = *((void *)&aBlock + 1);
      }
      uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
      uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" in value ", 10);
      if (cf) {
        char v70 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        char v70 = 0;
      }
      if (v70)
      {
        ctu::cf_to_xpc((uint64_t *)&v115, (ctu *)cf, v68);
        xpc::object::to_string((uint64_t *)&aBlock, (xpc::object *)&v115);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&aBlock, "empty");
      }
      if (SHIBYTE(v128) >= 0) {
        p_long long aBlock = &aBlock;
      }
      else {
        p_long long aBlock = (long long *)aBlock;
      }
      if (SHIBYTE(v128) >= 0) {
        uint64_t v72 = HIBYTE(v128);
      }
      else {
        uint64_t v72 = *((void *)&aBlock + 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)p_aBlock, v72);
      if (SHIBYTE(v128) < 0)
      {
        operator delete((void *)aBlock);
        if (v70) {
          goto LABEL_146;
        }
      }
      else
      {
        if (!v70) {
          goto LABEL_147;
        }
LABEL_146:
        xpc_release(v115);
      }
LABEL_147:
      if (SHIBYTE(v123) < 0) {
        operator delete(v122[0]);
      }
      uint64_t v73 = *(void *)(a1 + 88);
      if (v73) {
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v73 + 48))(v73, v159);
      }
      if (v156) {
        std::function<void ()(BOOL)>::operator()((uint64_t)v155, 0);
      }
      *(void *)v159 = *MEMORY[0x263F8C2B8];
      uint64_t v74 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)&v159[*(void *)(*(void *)v159 - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
      *(void *)&long long v160 = v74;
      *((void *)&v160 + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v164) < 0) {
        operator delete(v163[1]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x223C9A8E0](&v166);
LABEL_156:
      *(void *)&long long aBlock = &v87;
      std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
      *(void *)&long long aBlock = &v91;
      std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
      std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v155);
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
      if (v10)
      {
        dispatch_group_leave(v10);
        dispatch_release(v10);
      }
LABEL_158:
      *(void *)v159 = a1;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v159[8], (uint64_t)v157);
      std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, (void *)(a1 + 8));
      uint64_t v75 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
      *(_OWORD *)((char *)v161 + 8) = aBlock;
      if (*((void *)&aBlock + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 16), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      }
      *((void *)&v161[1] + 1) = v8;
      *(void *)&long long v162 = v7;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
      BYTE8(v162) = v11;
      operator new();
    }
  }
  if (!v18) {
    goto LABEL_32;
  }
LABEL_31:
  xpc_release(object);
  goto LABEL_32;
}

void sub_22243F16C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN30Mav30QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    int v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109378;
      int v10 = v4;
      __int16 v11 = 2080;
      uint64_t v12 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending 3GPP APN failed with error %d (%s)", (uint8_t *)&v9, 0x12u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 88);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    uint64_t v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 96);
      int v9 = 67109120;
      int v10 = v8;
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I 3GPP APN success response received (request order %d)", (uint8_t *)&v9, 8u);
    }
  }
  if (!--*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (*(void *)(a1 + 88)) {
      std::function<void ()(BOOL)>::operator()(a1 + 64, *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
  }
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke(uint64_t a1, int *a2)
{
  uint64_t v3 = (ctu::cf::map_adapter *)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  uint64_t result = MEMORY[0x223C99AF0](&v6);
  int v5 = 2 * (v3 == 2);
  if (v3 == 3) {
    int v5 = 3;
  }
  *a2 = v5;
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4(uint64_t a1, std::string *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x223C99AF0](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_22243F878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_26(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_29(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

size_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_34(uint64_t a1, char *a2)
{
  uint64_t v3 = (void *)(a1 + 32);
  int v4 = *(char *)(a1 + 55);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v5 = *(void *)(a1 + 40);
  }
  if (v5 == strlen((const char *)*MEMORY[0x263F036A8]))
  {
    uint64_t v6 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v6, (const void *)*MEMORY[0x263F036A8], v5);
    if (!result)
    {
      char v9 = 1;
      goto LABEL_16;
    }
  }
  size_t result = strlen((const char *)*MEMORY[0x263F036A0]);
  if (v5 == result)
  {
    int v8 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v8, (const void *)*MEMORY[0x263F036A0], v5);
    if (!result)
    {
      char v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_39(uint64_t a1, unsigned char *a2)
{
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Pcs");
  std::string::append(&__p, "cfAddressRequired", 0x11uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v7, (const char *)p_p);
  char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), v7);
  MEMORY[0x223C99AF0](&v7);
  *a2 = Bool;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_47(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_50(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32) ^ 1;
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_53(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_5(uint64_t result, int *a2)
{
  if (*(unsigned char *)(result + 32)) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  *a2 = v2;
  return result;
}

void std::__shared_ptr_pointer<Mav30QMIAttachApnCommandDriver *,std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver *)#1},std::allocator<Mav30QMIAttachApnCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav30QMIAttachApnCommandDriver *,std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver *)#1},std::allocator<Mav30QMIAttachApnCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav30QMIAttachApnCommandDriver *,std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver *)#1},std::allocator<Mav30QMIAttachApnCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver*)#1}::operator() const(Mav30QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D4C84C0;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D4C84C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  size_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *size_t result = &unk_26D4C84C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D4C84C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::operator()(uint64_t result, unsigned char *a2)
{
  if (*a2) {
    **(unsigned char **)(result + 8) = 1;
  }
  return result;
}

uint64_t std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target_type()
{
}

void *dispatch::detail::group_notify<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>(dispatch_group_s *,dispatch_queue_s *,Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  _OWORD v11[4] = *MEMORY[0x263EF8340];
  int v10 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(void *)(v3 + 88);
        if (v6)
        {
          int v7 = *(unsigned __int8 *)a1[7];
          int v8 = *((unsigned __int8 *)a1 + 72);
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(a1 + 1));
          (*(void (**)(uint64_t, BOOL, void, BOOL, void *))(*(void *)v6 + 24))(v6, v7 != 0, 0, v8 != 0, v11);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v10);
}

void sub_22243FEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIMav13ActivationCommandDriver::bootstrap(uint64_t a1, uint64_t a2, long long *a3)
{
  size_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Initializing Mav13 command driver", buf, 2u);
  }
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  int v7 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Activation: BSP Service");
  int v8 = *(NSObject **)(a1 + 24);
  dispatch_object_t v21 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "bsp");
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v15, (void *)(a1 + 8));
  uint64_t v17 = v15;
  __int16 v18 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Registry::getServerConnection(&v13, *(Registry **)(a1 + 64));
  qmi::Client::createWithQueueLocal();
  long long v9 = v26;
  long long v26 = 0uLL;
  int v10 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v21) {
    dispatch_release(v21);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  v12[10] = MEMORY[0x263EF8330];
  v12[11] = 0x40000000;
  v12[12] = ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke;
  v12[13] = &__block_descriptor_tmp_17;
  v12[14] = a1;
  qmi::Client::setHandler();
  v12[5] = MEMORY[0x263EF8330];
  v12[6] = 0x40000000;
  v12[7] = ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_2;
  v12[8] = &__block_descriptor_tmp_3_0;
  v12[9] = a1;
  qmi::Client::setHandler();
  qmi::Client::set((qmi::Client *)(a1 + 88), (const char *)*MEMORY[0x263F8AFE8]);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  _OWORD v12[2] = ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_3;
  void v12[3] = &__block_descriptor_tmp_5_3;
  v12[4] = a1;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  uint64_t v25 = 0x40000000;
  *(void *)&long long v26 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18ActivationRegister10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v26 + 1) = &unk_26460D768;
  int v27 = v12;
  qmi::Client::setIndHandler();
  return qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 88));
}

void sub_2224401C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (*(char *)(v29 - 129) < 0) {
    operator delete(*(void **)(v29 - 152));
  }
  uint64_t v31 = *(NSObject **)(v29 - 128);
  if (v31) {
    dispatch_release(v31);
  }
  if (*(char *)(v29 - 97) < 0) {
    operator delete(*(void **)(v29 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v2 = (const void **)__p[1];
  if (__p[1] != (void *)v13)
  {
    while (*((unsigned char *)*v2 + 8) != 1)
    {
      if (++v2 == (const void **)v13) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == (const void **)v13) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  v3[9] = 1;
  v7[5] = v1 + 11;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  __int16 v11 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  _DWORD v7[2] = ___ZNK31QMIMav13ActivationCommandDriver19handleClientStartedEv_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_8_5;
  v7[4] = v1;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp18ActivationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460D790;
  aBlock[4] = v7;
  uint64_t v4 = _Block_copy(aBlock);
  __int16 v11 = v4;
  if (v8)
  {
    qmi::Client::send();
    uint64_t v4 = v11;
  }
  if (v4) {
    _Block_release(v4);
  }
  (*(void (**)(void *, uint64_t))(*v1[6] + 16))(v1[6], 1);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  size_t v5 = (uint64_t (*)(void **))(*v1)[5];

  return v5(v1);
}

void sub_222440544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 48) + 16))(*(void *)(*(void *)(a1 + 32) + 48), 0);
}

void ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_3(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v245 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v129 = 0;
  std::string v130 = &v129;
  uint64_t v131 = 0x2000000000;
  int v132 = 2;
  v128[0] = MEMORY[0x263EF8330];
  v128[1] = 0x40000000;
  v128[2] = ___ZNK31QMIMav13ActivationCommandDriver24handleRegisterIndicationERKN3bsp18ActivationRegister10IndicationE_block_invoke;
  v128[3] = &unk_26460D440;
  v128[4] = &v129;
  *(void *)std::string buf = v128;
  qmi::MessageBase::applyTlv<bsp::tlv::ActivationState,void({block_pointer}&)(bsp::tlv::ActivationState const&)>(a2, (uint64_t)buf);
  unsigned int v4 = *((_DWORD *)v130 + 6);
  if (v4 - 2 >= 3)
  {
    if (v4 < 2)
    {
      bzero(buf, 0x210uLL);
      MEMORY[0x223C98FB0](buf);
      std::string __p = (void *)MEMORY[0x263EF8330];
      uint64_t v201 = 0x40000000;
      v202 = ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke;
      v203 = &__block_descriptor_tmp_18_8;
      v204 = v210;
      p_p = (char *)&__p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>(a2, 16, (uint64_t)&p_p);
      p_p = (char *)MEMORY[0x263EF8330];
      uint64_t v240 = 0x40000000;
      v241 = (void (*)(char **, void *))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_2;
      v242 = &__block_descriptor_tmp_19_4;
      v243 = v210;
      p_p_p = &p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>(a2, 17, (uint64_t)&p_p_p);
      p_p_p = (char **)MEMORY[0x263EF8330];
      uint64_t v194 = 0x40000000;
      v195 = ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3;
      v196 = &__block_descriptor_tmp_20_4;
      v197 = buf;
      p_p_p_p = &p_p_p;
      int v7 = (capabilities::ct *)qmi::MessageBase::applyTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>(a2, 18, (uint64_t)&p_p_p_p);
      if (capabilities::ct::supportsGemini(v7))
      {
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        uint64_t v10 = TlvValue;
        if (TlvValue)
        {
          int v11 = v9;
          p_p_p_p = (char ***)TlvValue;
          uint64_t v12 = tlv::parseV<bsp::tlv::ActivationImeiSlot2>((unint64_t *)&p_p_p_p, v9);
          if (p_p_p_p)
          {
            uint64_t v227 = v12;
            ActivationCommandDriver::parseImei((ActivationCommandDriver *)&v227, v13);
            char v228 = 1;
          }
          else
          {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 85, v10, v11);
          }
        }
      }
      p_p_p_p = (char ***)MEMORY[0x263EF8330];
      uint64_t v189 = 0x40000000;
      v190 = (void (*)(char ****, char **))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4;
      v191 = &__block_descriptor_tmp_21_4;
      v192 = v210;
      p_p_p_p_p = (unint64_t *)&p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>(a2, 19, &p_p_p_p_p);
      p_p_p_p_p = (unint64_t *)MEMORY[0x263EF8330];
      uint64_t v184 = 0x40000000;
      v185 = (uint64_t (*)(uint64_t, char **))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5;
      v186 = &__block_descriptor_tmp_23_3;
      v187 = buf;
      p_p_p_p_p_p = &p_p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>(a2, 20, (uint64_t)&p_p_p_p_p_p);
      p_p_p_p_p_p = (unint64_t **)MEMORY[0x263EF8330];
      uint64_t v179 = 0x40000000;
      v180 = (void (*)(unint64_t ***, char **))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6;
      v181 = &__block_descriptor_tmp_25_2;
      v182 = buf;
      p_p_p_p_p_p_p = &p_p_p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>(a2, 21, (uint64_t)&p_p_p_p_p_p_p);
      p_p_p_p_p_p_p = (unint64_t ***)MEMORY[0x263EF8330];
      uint64_t v174 = 0x40000000;
      uint64_t v175 = (void (*)(unint64_t ****, void **))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7;
      uint64_t v176 = &__block_descriptor_tmp_27_0;
      v177 = (void **)buf;
      v169[0] = &p_p_p_p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>(a2, 22, (uint64_t)v169);
      char v214 = v211;
      p_p_p = (char **)MEMORY[0x263EF8330];
      uint64_t v194 = 0x40000000;
      v195 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke;
      v196 = &__block_descriptor_tmp_30_3;
      v197 = buf;
      std::string __p = &p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationState,void({block_pointer}&)(bsp::tlv::ActivationState const&)>(a2, (uint64_t)&__p);
      p_p_p_p = (char ***)MEMORY[0x263EF8330];
      uint64_t v189 = 0x40000000;
      v190 = (void (*)(char ****, char **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_2;
      v191 = &__block_descriptor_tmp_32_1;
      v192 = (void **)buf;
      char v14 = (void *)qmi::MessageBase::findTlvValue(a2);
      __int16 v16 = v14;
      if (v14)
      {
        int v17 = v15;
        std::string __p = v14;
        LOBYTE(p_p) = tlv::parseV<bsp::tlv::ActivationManifestResult>((unint64_t *)&__p, v15);
        if (__p) {
          v190(&p_p_p_p, &p_p);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 82, v16, v17);
        }
      }
      p_p_p_p_p = (unint64_t *)MEMORY[0x263EF8330];
      uint64_t v184 = 0x40000000;
      v185 = (uint64_t (*)(uint64_t, char **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3;
      v186 = &__block_descriptor_tmp_34_3;
      v187 = buf;
      __int16 v18 = (void *)qmi::MessageBase::findTlvValue(a2);
      char v20 = v18;
      if (v18)
      {
        int v21 = v19;
        std::string __p = v18;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationPriVersionSlot1>((unint64_t *)&__p, v19);
        if (__p) {
          v185((uint64_t)&p_p_p_p_p, &p_p);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 64, v20, v21);
        }
      }
      p_p_p_p_p_p = (unint64_t **)MEMORY[0x263EF8330];
      uint64_t v179 = 0x40000000;
      v180 = (void (*)(unint64_t ***, char **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4;
      v181 = &__block_descriptor_tmp_36_4;
      v182 = buf;
      int v22 = (void *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v24 = v22;
      if (v22)
      {
        int v25 = v23;
        std::string __p = v22;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationPriVersionSlot2>((unint64_t *)&__p, v23);
        if (__p) {
          v180(&p_p_p_p_p_p, &p_p);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 65, v24, v25);
        }
      }
      p_p_p_p_p_p_p = (unint64_t ***)MEMORY[0x263EF8330];
      uint64_t v174 = 0x40000000;
      uint64_t v175 = (void (*)(unint64_t ****, void **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5;
      uint64_t v176 = &__block_descriptor_tmp_37_4;
      v177 = v215;
      long long v26 = (char *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v28 = v26;
      if (v26)
      {
        int v29 = v27;
        p_p = v26;
        std::string __p = (void *)tlv::parseV<bsp::tlv::ActivationIccidSlot1>((unint64_t *)&p_p, v27);
        LOWORD(v201) = v30;
        if (p_p) {
          v175(&p_p_p_p_p_p_p, &__p);
        }
        else {
          ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 66, v28, v29);
        }
      }
      v169[0] = MEMORY[0x263EF8330];
      v169[1] = 0x40000000;
      long long v170 = (uint64_t (*)(uint64_t, char **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6;
      long long v171 = &__block_descriptor_tmp_38_2;
      long long v172 = v215;
      uint64_t v31 = (void *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v33 = v31;
      if (v31)
      {
        int v34 = v32;
        std::string __p = v31;
        p_p = (char *)tlv::parseV<bsp::tlv::ActivationImsiSlot1>((unint64_t *)&__p, v32);
        if (__p) {
          v170((uint64_t)v169, &p_p);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 67, v33, v34);
        }
      }
      v165[0] = MEMORY[0x263EF8330];
      v165[1] = 0x40000000;
      long long v166 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7;
      long long v167 = &__block_descriptor_tmp_39_3;
      long long v168 = v215;
      char v35 = (char *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v37 = v35;
      if (v35)
      {
        int v38 = v36;
        p_p = v35;
        uint64_t v201 = 0;
        std::string __p = 0;
        v202 = 0;
        tlv::parseV<bsp::tlv::ActivationGid1Slot1>(&p_p, v36, &__p);
        uint64_t v39 = p_p;
        if (p_p) {
          v166((uint64_t)v165, (char **)&__p);
        }
        if (__p)
        {
          uint64_t v201 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v39) {
          ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 68, v37, v38);
        }
      }
      v161[0] = MEMORY[0x263EF8330];
      v161[1] = 0x40000000;
      long long v162 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_8;
      v163 = &__block_descriptor_tmp_40_5;
      long long v164 = v215;
      std::string::size_type v40 = (char *)qmi::MessageBase::findTlvValue(a2);
      std::string::size_type v42 = v40;
      if (v40)
      {
        int v43 = v41;
        p_p = v40;
        uint64_t v201 = 0;
        std::string __p = 0;
        v202 = 0;
        tlv::parseV<bsp::tlv::ActivationGid2Slot1>(&p_p, v41, &__p);
        int v44 = p_p;
        if (p_p) {
          v162((uint64_t)v161, (char **)&__p);
        }
        if (__p)
        {
          uint64_t v201 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v44) {
          ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 69, v42, v43);
        }
      }
      v157[0] = MEMORY[0x263EF8330];
      v157[1] = 0x40000000;
      v158 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_9;
      v159 = &__block_descriptor_tmp_42_1;
      long long v160 = buf;
      unint64_t v45 = (void *)qmi::MessageBase::findTlvValue(a2);
      CFTypeID v47 = v45;
      if (v45)
      {
        int v48 = v46;
        std::string __p = v45;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationCardProvisionedSlot1>((unint64_t *)&__p, v46);
        if (__p) {
          v158((uint64_t)v157, (unsigned int *)&p_p);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 80, v47, v48);
        }
      }
      v153[0] = MEMORY[0x263EF8330];
      v153[1] = 0x40000000;
      uint64_t v154 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_10;
      v155 = &__block_descriptor_tmp_43_5;
      v156 = v215;
      int v49 = (char *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v51 = v49;
      if (v49)
      {
        int v52 = v50;
        p_p = v49;
        std::string __p = (void *)tlv::parseV<bsp::tlv::ActivationIccidSlot2>((unint64_t *)&p_p, v50);
        LOWORD(v201) = v53;
        if (p_p) {
          v154((uint64_t)v153, (uint64_t *)&__p);
        }
        else {
          ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 70, v51, v52);
        }
      }
      v149[0] = MEMORY[0x263EF8330];
      v149[1] = 0x40000000;
      v150 = (uint64_t (*)(uint64_t, char **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_11;
      v151 = &__block_descriptor_tmp_44_2;
      v152 = v215;
      CFBooleanRef v54 = (void *)qmi::MessageBase::findTlvValue(a2);
      long long v56 = v54;
      if (v54)
      {
        int v57 = v55;
        std::string __p = v54;
        p_p = (char *)tlv::parseV<bsp::tlv::ActivationImsiSlot2>((unint64_t *)&__p, v55);
        if (__p) {
          v150((uint64_t)v149, &p_p);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 71, v56, v57);
        }
      }
      v145[0] = MEMORY[0x263EF8330];
      v145[1] = 0x40000000;
      uint64_t v146 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_12;
      uint64_t v147 = &__block_descriptor_tmp_45_1;
      uint64_t v148 = v215;
      uint64_t v58 = (char *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v60 = v58;
      if (v58)
      {
        int v61 = v59;
        p_p = v58;
        uint64_t v201 = 0;
        std::string __p = 0;
        v202 = 0;
        tlv::parseV<bsp::tlv::ActivationGid1Slot2>(&p_p, v59, &__p);
        BOOL v62 = p_p;
        if (p_p) {
          v146((uint64_t)v145, (char **)&__p);
        }
        if (__p)
        {
          uint64_t v201 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v62) {
          ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 72, v60, v61);
        }
      }
      v141[0] = MEMORY[0x263EF8330];
      v141[1] = 0x40000000;
      v142 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_13;
      v143 = &__block_descriptor_tmp_46_2;
      int v144 = v215;
      uint64_t v63 = (char *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v65 = v63;
      if (v63)
      {
        int v66 = v64;
        p_p = v63;
        uint64_t v201 = 0;
        std::string __p = 0;
        v202 = 0;
        tlv::parseV<bsp::tlv::ActivationGid2Slot2>(&p_p, v64, &__p);
        uint64_t v67 = p_p;
        if (p_p) {
          v142((uint64_t)v141, (char **)&__p);
        }
        if (__p)
        {
          uint64_t v201 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v67) {
          ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 73, v65, v66);
        }
      }
      v137[0] = MEMORY[0x263EF8330];
      v137[1] = 0x40000000;
      v138 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_14;
      v139 = &__block_descriptor_tmp_48_5;
      int v140 = buf;
      unsigned int v68 = (void *)qmi::MessageBase::findTlvValue(a2);
      char v70 = v68;
      if (v68)
      {
        int v71 = v69;
        std::string __p = v68;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationCardProvisionedSlot2>((unint64_t *)&__p, v69);
        if (__p) {
          v138((uint64_t)v137, (unsigned int *)&p_p);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 81, v70, v71);
        }
      }
      p_p = (char *)MEMORY[0x263EF8330];
      uint64_t v240 = 0x40000000;
      v241 = (void (*)(char **, void *))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_15;
      v242 = &__block_descriptor_tmp_50_2;
      v243 = (void **)v3;
      v244 = v215;
      uint64_t v72 = (void *)qmi::MessageBase::findTlvValue(a2);
      uint64_t v74 = v72;
      if (v72)
      {
        int v75 = v73;
        std::string __p = v72;
        LOBYTE(v133[0]) = tlv::parseV<bsp::tlv::ActivationTypeMode>((unint64_t *)&__p, v73);
        if (__p) {
          v241(&p_p, v133);
        }
        else {
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 74, v74, v75);
        }
      }
      v133[0] = MEMORY[0x263EF8330];
      v133[1] = 0x40000000;
      v134 = (uint64_t (*)(uint64_t, void **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_51;
      uint64_t v135 = &__block_descriptor_tmp_53_4;
      unint64_t v136 = buf;
      uint64_t v76 = (_DWORD *)qmi::MessageBase::findTlvValue(a2);
      char v78 = v76;
      if (v76)
      {
        int v79 = v77;
        v199 = v76;
        std::string __p = (void *)tlv::parseV<bsp::tlv::ActivationMoringaFlags>(&v199, v77);
        LODWORD(v201) = v80;
        if (v199) {
          uint64_t v76 = (_DWORD *)v134((uint64_t)v133, &__p);
        }
        else {
          uint64_t v76 = (_DWORD *)((uint64_t (*)(void, uint64_t, _DWORD *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 76, v78, v79);
        }
      }
      uint64_t v81 = capabilities::ct::supportsGemini((capabilities::ct *)v76);
      if (v81)
      {
        v82 = (void *)qmi::MessageBase::findTlvValue(a2);
        unsigned int v84 = v82;
        if (v82)
        {
          int v85 = v83;
          std::string __p = v82;
          BOOL v86 = tlv::parseV<bsp::tlv::DsdsAllowed>((unint64_t *)&__p, v83);
          if (__p)
          {
            BOOL v229 = v86;
            char v230 = 1;
          }
          else
          {
            ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 83, v84, v85);
          }
        }
        uint64_t v87 = (void *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v89 = v87;
        if (v87)
        {
          int v90 = v88;
          std::string __p = v87;
          BOOL v91 = tlv::parseV<bsp::tlv::Slot1IsEmbedded>((unint64_t *)&__p, v88);
          if (__p)
          {
            BOOL v216 = v91;
            char v217 = 1;
          }
          else
          {
            ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 88, v89, v90);
          }
        }
        uint64_t v81 = qmi::MessageBase::findTlvValue(a2);
        uint64_t v93 = v81;
        if (v81)
        {
          int v94 = v92;
          std::string __p = (void *)v81;
          uint64_t v81 = tlv::parseV<bsp::tlv::Slot2IsEmbedded>((unint64_t *)&__p, v92);
          if (__p)
          {
            char v221 = v81;
            char v222 = 1;
          }
          else
          {
            uint64_t v81 = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 89, v93, v94);
          }
        }
      }
      uint64_t v95 = capabilities::ct::supportedVinylSlotCount((capabilities::ct *)v81);
      if (v95)
      {
        uint64_t v96 = (void *)qmi::MessageBase::findTlvValue(a2);
        long long v98 = v96;
        if (v96)
        {
          int v99 = v97;
          std::string __p = v96;
          BOOL v100 = tlv::parseV<bsp::tlv::Slot1IsAccepted>((unint64_t *)&__p, v97);
          if (__p)
          {
            BOOL v233 = v100;
            char v234 = 1;
          }
          else
          {
            ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 86, v98, v99);
          }
        }
        uint64_t v95 = qmi::MessageBase::findTlvValue(a2);
        uint64_t v102 = v95;
        if (v95)
        {
          int v103 = v101;
          std::string __p = (void *)v95;
          uint64_t v95 = tlv::parseV<bsp::tlv::Slot2IsAccepted>((unint64_t *)&__p, v101);
          if (__p)
          {
            char v235 = v95;
            char v236 = 1;
          }
          else
          {
            uint64_t v95 = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 87, v102, v103);
          }
        }
      }
      uint64_t v104 = capabilities::ct::supports5G((capabilities::ct *)v95);
      if (v104)
      {
        uint64_t v104 = qmi::MessageBase::findTlvValue(a2);
        uint64_t v106 = v104;
        if (v104)
        {
          int v107 = v105;
          std::string __p = (void *)v104;
          uint64_t v104 = tlv::parseV<bsp::tlv::NrAllowed>((unint64_t *)&__p, v105);
          if (__p)
          {
            char v231 = v104;
            char v232 = 1;
          }
          else
          {
            uint64_t v104 = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 84, v106, v107);
          }
        }
      }
      if (capabilities::ct::getProvisioningProfileSupport((capabilities::ct *)v104) == 1)
      {
        uint64_t v108 = (void *)qmi::MessageBase::findTlvValue(a2);
        int v110 = v108;
        if (v108)
        {
          int v111 = v109;
          std::string __p = v108;
          int v112 = tlv::parseV<bsp::tlv::BootstrapVersion>((unint64_t *)&__p, v109);
          if (__p)
          {
            int v237 = v112;
            char v238 = 1;
          }
          else
          {
            ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 98, v110, v111);
          }
        }
        int v113 = (void *)qmi::MessageBase::findTlvValue(a2);
        xpc_object_t v115 = v113;
        if (v113)
        {
          int v116 = v114;
          std::string __p = v113;
          BOOL v117 = tlv::parseV<bsp::tlv::Slot1IsBootstrap>((unint64_t *)&__p, v114);
          if (__p)
          {
            BOOL v218 = v117;
            char v219 = 1;
          }
          else
          {
            ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 99, v115, v116);
          }
        }
        uint64_t v118 = (void *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v120 = v118;
        if (v118)
        {
          int v121 = v119;
          std::string __p = v118;
          BOOL v122 = tlv::parseV<bsp::tlv::Slot2IsBootstrap>((unint64_t *)&__p, v119);
          if (__p)
          {
            BOOL v223 = v122;
            char v224 = 1;
          }
          else
          {
            ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 100, v120, v121);
          }
        }
      }
      BOOL v226 = (v220 | v225) != 0;
      std::string __p = (void *)MEMORY[0x263EF8330];
      uint64_t v201 = 0x40000000;
      v202 = ___ZNK31QMIMav13ActivationCommandDriver15parseLegacyTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke;
      v203 = &__block_descriptor_tmp_29_0;
      v204 = (void **)v3;
      v205 = buf;
      v123 = (_DWORD *)qmi::MessageBase::findTlvValue(a2);
      std::string v125 = v123;
      if (v123)
      {
        int v126 = v124;
        v199 = v123;
        int v198 = tlv::parseV<bsp::tlv::ActivationServiceProvisioned>((unint64_t *)&v199, v124);
        if (v199) {
          ((void (*)(void **, int *))v202)(&__p, &v198);
        }
        else {
          ((void (*)(void, uint64_t, _DWORD *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 79, v125, v126);
        }
      }
      uint64_t v127 = *(void *)(v3 + 48);
      ActivationInfo::ActivationInfo((ActivationInfo *)&__p, (const ActivationInfo *)buf);
      (*(void (**)(uint64_t, void **))(*(void *)v127 + 40))(v127, &__p);
      UMTSProvisioningInfo::~UMTSProvisioningInfo(&v208);
      if (v206)
      {
        v207 = v206;
        operator delete(v206);
      }
      if (v202)
      {
        v203 = v202;
        operator delete(v202);
      }
      UMTSProvisioningInfo::~UMTSProvisioningInfo(v215);
      if (v212)
      {
        v213 = v212;
        operator delete(v212);
      }
      if (v210[0])
      {
        v210[1] = v210[0];
        operator delete(v210[0]);
      }
    }
  }
  else
  {
    size_t v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      long long v6 = bsp::asString(v4);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Activation state is not ready (%s) waiting for another indication", buf, 0xCu);
    }
  }
  _Block_object_dispose(&v129, 8);
}

void sub_222441978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  int v7 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v7;
    operator delete(v7);
  }
  UMTSProvisioningInfo::~UMTSProvisioningInfo((void **)&STACK[0x520]);
  uint64_t v8 = (void *)STACK[0x4F0];
  if (STACK[0x4F0])
  {
    STACK[0x4F8] = (unint64_t)v8;
    operator delete(v8);
  }
  int v9 = (void *)STACK[0x4D0];
  if (STACK[0x4D0])
  {
    STACK[0x4D8] = (unint64_t)v9;
    operator delete(v9);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *QMIMav13ActivationCommandDriver::QMIMav13ActivationCommandDriver(void *a1, uint64_t a2, NSObject **a3)
{
  v9[8] = *MEMORY[0x263EF8340];
  size_t v5 = *a3;
  dispatch_object_t v8 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = (capabilities::ct *)QMIActivationCommandDriver::QMIActivationCommandDriver((uint64_t)a1, a2, &v8);
  if (v5) {
    dispatch_release(v5);
  }
  v9[0] = &unk_26D4BA498;
  v9[3] = v9;
  a1[15] = 0;
  if ((capabilities::ct::supportsGemini(v6) & 1) == 0) {
    operator new();
  }
  if (!a1[15]) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v9);
  *a1 = &unk_26D4C8540;
  return a1;
}

void sub_222441BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  MEMORY[0x223C9A950](v3, 0x10A1C40FF1576FELL);
  uint64_t v5 = *((void *)v2 + 15);
  *((void *)v2 + 15) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  QMIActivationCommandDriver::~QMIActivationCommandDriver(v2);
  _Unwind_Resume(a1);
}

void sub_222441C6C()
{
  if (v0) {
    dispatch_release(v0);
  }
  JUMPOUT(0x222441C64);
}

void QMIMav13ActivationCommandDriver::~QMIMav13ActivationCommandDriver(QMIMav13ActivationCommandDriver *this)
{
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_26D4D4550;
  qmi::Client::~Client((QMIMav13ActivationCommandDriver *)((char *)this + 88));

  ActivationCommandDriver::~ActivationCommandDriver(this);
}

{
  uint64_t vars8;

  QMIMav13ActivationCommandDriver::~QMIMav13ActivationCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void ___ZNK31QMIMav13ActivationCommandDriver19handleClientStartedEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#N Activation register request failed: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

BOOL QMIMav13ActivationCommandDriver::issueActivationTicket(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (*a2 == v4)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "Cannot issue empty activation ticket!", buf, 2u);
    }
    (*(void (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), 0);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I issuing postponement ticket", buf, 2u);
    }
    memset(v16, 0, sizeof(v16));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    v15[2] = ___ZN31QMIMav13ActivationCommandDriver21issueActivationTicketERKNSt3__16vectorIhNS0_9allocatorIhEEEE_block_invoke;
    void v15[3] = &__block_descriptor_tmp_10_5;
    unsigned char v15[4] = a2;
    int v7 = qmi::MutableMessageBase::getTLV<bsp::tlv::ActivationManifest>((uint64_t)v16, 1);
    ___ZN31QMIMav13ActivationCommandDriver21issueActivationTicketERKNSt3__16vectorIhNS0_9allocatorIhEEEE_block_invoke(v15, (char **)v7);
    void v10[5] = a1 + 88;
    uint64_t v11 = QMIServiceMsg::create();
    uint64_t v13 = 0;
    long long aBlock = 0;
    int v12 = 60000;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 0x40000000;
    v10[2] = ___ZN31QMIMav13ActivationCommandDriver21issueActivationTicketERKNSt3__16vectorIhNS0_9allocatorIhEEEE_block_invoke_2;
    void v10[3] = &__block_descriptor_tmp_11_4;
    v10[4] = a1;
    *(void *)std::string buf = MEMORY[0x263EF8330];
    uint64_t v18 = 0x40000000;
    int v19 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp19ActivationSetTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    char v20 = &unk_26460D7B8;
    int v21 = v10;
    uint64_t v8 = _Block_copy(buf);
    long long aBlock = v8;
    if (v11)
    {
      qmi::Client::send();
      uint64_t v8 = aBlock;
    }
    if (v8) {
      _Block_release(v8);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
  }
  return v3 != v4;
}

void sub_222442068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *___ZN31QMIMav13ActivationCommandDriver21issueActivationTicketERKNSt3__16vectorIhNS0_9allocatorIhEEEE_block_invoke(void *result, char **a2)
{
  uint64_t v2 = (char **)result[4];
  if (v2 != a2) {
    return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, *v2, v2[1], v2[1] - *v2);
  }
  return result;
}

uint64_t ___ZN31QMIMav13ActivationCommandDriver21issueActivationTicketERKNSt3__16vectorIhNS0_9allocatorIhEEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      uint64_t v8 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#N Unable to set activation ticket: %s", (uint8_t *)&v7, 0xCu);
      int v2 = *(_DWORD *)(a2 + 4);
    }
    if (v2 == 65537)
    {
      uint64_t v6 = 0x100000001;
    }
    else if (qmi::isInternalError())
    {
      uint64_t v6 = 0x400000001;
    }
    else
    {
      uint64_t v6 = 1;
    }
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 24))(*(void *)(v4 + 48), v6);
  }
  return result;
}

void QMIMav13ActivationCommandDriver::queryActivationStatus(QMIMav13ActivationCommandDriver *this)
{
  memset(v8, 0, sizeof(v8));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v8);
  v3[5] = (char *)this + 88;
  uint64_t v4 = QMIServiceMsg::create();
  int v5 = 25000;
  uint64_t v6 = 0;
  int v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_15_4;
  v3[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460D7E0;
  aBlock[4] = v3;
  int v2 = _Block_copy(aBlock);
  int v7 = v2;
  if (v4)
  {
    qmi::Client::send();
    int v2 = v7;
  }
  if (v2) {
    _Block_release(v2);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_2224422E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)a2 + 1))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N Unable to get chip id and serial number: %s", buf, 0xCu);
    }
    (*(void (**)(void, void))(**(void **)(v2 + 48) + 24))(*(void *)(v2 + 48), 0);
  }
  else
  {
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 0x40000000;
    _OWORD v5[2] = ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke_12;
    void v5[3] = &__block_descriptor_tmp_14_4;
    v5[4] = v2;
    *(void *)std::string buf = v5;
    if ((qmi::MessageBase::applyTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>(a2, 1, buf) & 1) == 0)
    {
      uint64_t v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#N Missing chip id and serial number", buf, 2u);
      }
    }
  }
}

void ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke_12(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v20 = 0;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  ChipInformation::ChipInformation((ChipInformation *)v18);
  int __src = *a2;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v18[1], (char *)&__src, (char *)v18, 4uLL);
  uint64_t v4 = v18[1];
  uint64_t v5 = v19;
  uint64_t v6 = (char *)(v19 - 1);
  if (v18[1] != (void *)v19 && v6 > v18[1])
  {
    uint64_t v8 = (char *)v18[1] + 1;
    do
    {
      char v9 = *(v8 - 1);
      *(v8 - 1) = *v6;
      *v6-- = v9;
    }
    while (v8++ < v6);
    uint64_t v4 = v18[1];
    uint64_t v5 = v19;
  }
  LOBYTE(v20) = 1;
  LODWORD(v18[0]) = a2[1];
  BYTE4(v18[0]) = 1;
  uint64_t v11 = *(void *)(v3 + 48);
  uint64_t v12 = v18[0];
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v4, v5, v5 - (void)v4);
  char v16 = v20;
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, &v12);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  if (v18[1])
  {
    *(void **)&long long v19 = v18[1];
    operator delete(v18[1]);
  }
}

void sub_2224425B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver24handleRegisterIndicationERKN3bsp18ActivationRegister10IndicationE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void *___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke(uint64_t a1, char **a2)
{
  size_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(*(void **)(a1 + 32), *a2, a2[1], a2[1] - *a2);
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
  return result;
}

void *___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_2(uint64_t a1, char **a2)
{
  size_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(a1 + 32) + 32), *a2, a2[1], a2[1] - *a2);
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)(*(void *)(a1 + 32) + 464) = *(void *)a2;
  uint64_t result = ActivationCommandDriver::parseImei((ActivationCommandDriver *)(*(void *)(a1 + 32) + 464), a2);
  *(unsigned char *)(*(void *)(a1 + 32) + 472) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4(uint64_t result, int *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  int v3 = *a2;
  __int16 v4 = *((_WORD *)a2 + 2);
  *(unsigned char *)(v2 + 70) = *((unsigned char *)a2 + 6);
  *(_WORD *)(v2 + 68) = v4;
  *(_DWORD *)(v2 + 64) = v3;
  *(unsigned char *)(*(void *)(result + 32) + 71) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(result + 32) + 482) = *a2;
  *(unsigned char *)(*(void *)(result + 32) + 486) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *a2;
  if ((v2 - 1) <= 1)
  {
    uint64_t v3 = *(void *)(result + 32);
    *(_DWORD *)(v3 + 488) = v2;
    *(unsigned char *)(v3 + 492) = 1;
  }
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(_DWORD *)(v2 + 496) = *a2;
  *(unsigned char *)(v2 + 500) = 1;
  return result;
}

void ___ZNK31QMIMav13ActivationCommandDriver15parseLegacyTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v5 + 12) && *(_DWORD *)v5)
  {
    uint64_t v6 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = bsp::asString(*a2);
      int v13 = 136315394;
      uint64_t v14 = (uint64_t)v7;
      __int16 v15 = 2080;
      uint64_t v16 = asString();
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#N Ignoring legacy OTASP value of %s due to activation state of %s", (uint8_t *)&v13, 0x16u);
    }
  }
  else
  {
    unsigned int v8 = *a2;
    if (*a2 != 1)
    {
      unsigned int v9 = v8 & 0xFFFFFFFE;
      if (v8 == 2) {
        char v10 = 2;
      }
      else {
        char v10 = 1;
      }
      if (v9 == 2) {
        char v11 = v10;
      }
      else {
        char v11 = 0;
      }
      *(unsigned char *)(v5 + 8) = v11;
      uint64_t v12 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315138;
        uint64_t v14 = asString();
        _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#N Preferring legacy OTASP provisioned state: %s", (uint8_t *)&v13, 0xCu);
        uint64_t v5 = *(void *)(a1 + 40);
      }
      *(unsigned char *)(v5 + 12) = 1;
    }
  }
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke(uint64_t result, int *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *a2;
  if (v3 > 2) {
    int v4 = 2;
  }
  else {
    int v4 = dword_22257A5A4[v3];
  }
  *(_DWORD *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 12) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(result + 32) + 4) = *a2;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  *(_DWORD *)(v2 + 256) = v3 >> 16;
  *(unsigned char *)(v2 + 260) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  *(_DWORD *)(v2 + 432) = v3 >> 16;
  *(unsigned char *)(v2 + 436) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *a2;
  *(_WORD *)(v2 + 25) = *((_WORD *)a2 + 4);
  *(void *)(v2 + 17) = v3;
  uint64_t v4 = *(void *)(result + 32);
  *(unsigned char *)(v4 + 27) = 1;
  *(unsigned char *)(v4 + 176) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6(uint64_t result, void *a2)
{
  *(void *)(*(void *)(result + 32) + 8) = *a2;
  *(unsigned char *)(*(void *)(result + 32) + 16) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7(uint64_t a1, char **a2)
{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(a1 + 32) + 32), *a2, a2[1], a2[1] - *a2);
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 96;
  if (*(char *)(v4 + 119) < 0) {
    operator delete(*(void **)v5);
  }
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t v5 = v7;
  *(void *)(v5 + 16) = v8;
  *(unsigned char *)(*(void *)(a1 + 32) + 120) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_8(uint64_t a1, char **a2)
{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(a1 + 32) + 64), *a2, a2[1], a2[1] - *a2);
  *(unsigned char *)(*(void *)(a1 + 32) + 88) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 128;
  if (*(char *)(v4 + 151) < 0) {
    operator delete(*(void **)v5);
  }
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t v5 = v7;
  *(void *)(v5 + 16) = v8;
  *(unsigned char *)(*(void *)(a1 + 32) + 152) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_9(uint64_t result, unsigned int *a2)
{
  unint64_t v2 = *a2;
  if (v2 >= 5) {
    char v3 = 0;
  }
  else {
    char v3 = 0x402010300uLL >> (8 * v2);
  }
  *(unsigned char *)(*(void *)(result + 32) + 8) = v3;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_10(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *a2;
  *(_WORD *)(v2 + 201) = *((_WORD *)a2 + 4);
  *(void *)(v2 + 193) = v3;
  uint64_t v4 = *(void *)(result + 32);
  *(unsigned char *)(v4 + 203) = 1;
  *(unsigned char *)(v4 + 352) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_11(uint64_t result, void *a2)
{
  *(void *)(*(void *)(result + 32) + 184) = *a2;
  *(unsigned char *)(*(void *)(result + 32) + 192) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_12(uint64_t a1, char **a2)
{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(a1 + 32) + 208), *a2, a2[1], a2[1] - *a2);
  *(unsigned char *)(*(void *)(a1 + 32) + 232) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 272;
  if (*(char *)(v4 + 295) < 0) {
    operator delete(*(void **)v5);
  }
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t v5 = v7;
  *(void *)(v5 + 16) = v8;
  *(unsigned char *)(*(void *)(a1 + 32) + 296) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_13(uint64_t a1, char **a2)
{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(a1 + 32) + 240), *a2, a2[1], a2[1] - *a2);
  *(unsigned char *)(*(void *)(a1 + 32) + 264) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 304;
  if (*(char *)(v4 + 327) < 0) {
    operator delete(*(void **)v5);
  }
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t v5 = v7;
  *(void *)(v5 + 16) = v8;
  *(unsigned char *)(*(void *)(a1 + 32) + 328) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_14(uint64_t result, unsigned int *a2)
{
  unint64_t v2 = *a2;
  if (v2 >= 5) {
    char v3 = 0;
  }
  else {
    char v3 = 0x402010300uLL >> (8 * v2);
  }
  *(unsigned char *)(*(void *)(result + 32) + 9) = v3;
  return result;
}

void ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_15(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I OQC activation mode detected, overriding IMSI", v6, 2u);
    }
  }
  uint64_t v5 = *(BOOL **)(a1 + 40);
  *uint64_t v5 = v3 == 1;
  v5[1] = 1;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_51(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(_DWORD *)(v2 + 504) = *a2;
  *(unsigned char *)(v2 + 508) = 1;
  return result;
}

void *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222442D80(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  unsigned int v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    unsigned int v9 = (char *)v7[1];
    goto LABEL_17;
  }
  uint64_t v12 = (unsigned char *)result[1];
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v15 = a3 - __src;
    if (v15) {
      double result = memmove(v9, __src, v15);
    }
    uint64_t v14 = &v9[v15];
    goto LABEL_20;
  }
  int v13 = &__src[v12 - v9];
  if (v12 != v9)
  {
    double result = memmove((void *)*result, __src, v12 - v9);
    unsigned int v9 = (char *)v7[1];
  }
  if (a3 != v13) {
    double result = memmove(v9, v13, a3 - v13);
  }
  uint64_t v14 = &v9[a3 - v13];
LABEL_20:
  v7[1] = v14;
  return result;
}

void ActivationInfo::ActivationInfo(ActivationInfo *this, const ActivationInfo *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((void *)this + 2) = 0;
  *(_OWORD *)this = v4;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 2, *((const void **)a2 + 2), *((void *)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
  char v5 = *((unsigned char *)a2 + 40);
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 40) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), *((void *)a2 + 7) - *((void *)a2 + 6));
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((_WORD *)this + 48) = *((_WORD *)a2 + 48);
  UMTSProvisioningSlotInfo::UMTSProvisioningSlotInfo((uint64_t)this + 104, (long long *)((char *)a2 + 104));
  *((unsigned char *)this + 272) = *((unsigned char *)a2 + 272);
  UMTSProvisioningSlotInfo::UMTSProvisioningSlotInfo((uint64_t)this + 280, (long long *)((char *)a2 + 280));
  *((unsigned char *)this + 448) = *((unsigned char *)a2 + 448);
  *((unsigned char *)this + 456) = *((unsigned char *)a2 + 456);
  long long v6 = *((_OWORD *)a2 + 29);
  long long v7 = *((_OWORD *)a2 + 30);
  long long v8 = *((_OWORD *)a2 + 31);
  *(_OWORD *)((char *)this + 509) = *(_OWORD *)((char *)a2 + 509);
  *((_OWORD *)this + 30) = v7;
  *((_OWORD *)this + 31) = v8;
  *((_OWORD *)this + 29) = v6;
}

void sub_222442F98(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 247) < 0) {
    operator delete(*(void **)(v1 + 224));
  }
  if (*(char *)(v1 + 215) < 0) {
    operator delete(*(void **)(v1 + 192));
  }
  long long v4 = *(void **)(v1 + 160);
  if (v4)
  {
    *(void *)(v1 + 168) = v4;
    operator delete(v4);
  }
  char v5 = *(void **)(v1 + 128);
  if (v5)
  {
    *(void *)(v1 + 136) = v5;
    operator delete(v5);
  }
  ActivationData<C2KProvisioningInfo>::~ActivationData(v2);
  _Unwind_Resume(a1);
}

uint64_t ActivationData<C2KProvisioningInfo>::~ActivationData(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t UMTSProvisioningSlotInfo::UMTSProvisioningSlotInfo(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 24), *((const void **)a2 + 3), *((void *)a2 + 4), *((void *)a2 + 4) - *((void *)a2 + 3));
  char v5 = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 56), *((const void **)a2 + 7), *((void *)a2 + 8), *((void *)a2 + 8) - *((void *)a2 + 7));
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v6;
  }
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  long long v7 = (std::string *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 120);
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  uint64_t v9 = *((void *)a2 + 19);
  *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
  *(void *)(a1 + 152) = v9;
  return a1;
}

void sub_222443160(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v4);
  }
  long long v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v6;
    operator delete(v6);
  }
  long long v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void UMTSProvisioningInfo::~UMTSProvisioningInfo(void **this)
{
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  uint64_t v2 = this[30];
  if (v2)
  {
    this[31] = v2;
    operator delete(v2);
  }
  int v3 = this[26];
  if (v3)
  {
    this[27] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  long long v4 = this[8];
  if (v4)
  {
    this[9] = v4;
    operator delete(v4);
  }
  char v5 = this[4];
  if (v5)
  {
    this[5] = v5;
    operator delete(v5);
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18ActivationRegister10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222443314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void SimInstanceLoggable<QMIMav13ActivationCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<QMIMav13ActivationCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  long long v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *long long v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp18ActivationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222443514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<bsp::tlv::ActivationManifest>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<bsp::tlv::ActivationManifest>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void qmi::MutableMessageBase::createTLV<bsp::tlv::ActivationManifest>()
{
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C8678;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C8678;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::getSize(uint64_t a1)
{
  return tlv::size<vs::tlv::CallingNumber>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::write(uint64_t a1, void **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  long long v4 = (char *)*a2;
  uint64_t v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  double result = tlv::writeV<vs::tlv::CallingNumber>(a2, a1 + 16);
  uint64_t v7 = (char *)*a2 - v5;
  *long long v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::clone()
{
}

void sub_2224438D4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp19ActivationSetTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224439BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  unint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    unint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>(uint64_t a1, unint64_t a2, int a3, void *a4)
{
  unint64_t v7 = a2;
  tlv::parseV<bsp::tlv::ChipInformation>(&v7, a3);
  unint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<bsp::GetChipIdSerialNumber::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_222443B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<bsp::GetChipIdSerialNumber::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      unint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_222443C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_222443C50(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  char v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_222443C94(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationState,void({block_pointer}&)(bsp::tlv::ActivationState const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<bsp::tlv::ActivationState>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 1, v6, v7);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>((uint64_t)a1, (char *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  std::string __p = 0;
  uint64_t v8 = 0;
  tlv::parseV<bsp::tlv::ActivationPublicKeyHash>(&v10, a3, &__p);
  int v5 = v10;
  if (v10) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_222443E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>((uint64_t)a1, (char *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  std::string __p = 0;
  uint64_t v8 = 0;
  tlv::parseV<bsp::tlv::ActivationFactoryKeyHash>(&v10, a3, &__p);
  int v5 = v10;
  if (v10) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_222443FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    unint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  _DWORD v7[2] = *MEMORY[0x263EF8340];
  v7[0] = a2;
  v7[1] = tlv::parseV<bsp::tlv::ActivationImei>(v7, a3);
  unint64_t v5 = v7[0];
  if (v7[0]) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  unint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    unint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>(uint64_t a1, unint64_t a2, int a3, void *a4)
{
  unint64_t v7 = a2;
  tlv::parseV<bsp::tlv::ActivationMeid>(&v7, a3);
  unint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    unint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v7 = a2;
  tlv::parseV<bsp::tlv::ActivationVersion>(&v7, a3);
  unint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    unint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v7 = a2;
  tlv::parseV<bsp::tlv::ActivationMode>(&v7, a3);
  unint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    unint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v7 = a2;
  tlv::parseV<bsp::tlv::ActivationFactoryDebug>(&v7, a3);
  unint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

__n128 HintConverter::operator()@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v3 = (__n128 **)(a2 + 8);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_WORD *)(a2 + 2) = *(_WORD *)(a1 + 2);
  std::vector<unsigned char>::__append((unint64_t *)(a2 + 8), 0x10uLL);
  __n128 result = *(__n128 *)(a1 + 4);
  **char v3 = result;
  return result;
}

void sub_222444574(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void Mav20PreferredNetworksFactoryCommandDriver::create(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_2224449C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9A950](v8, 0x10A1C40FF1576FELL);
  uint64_t v10 = *((void *)v4 + 8);
  *((void *)v4 + 8) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x223C99A30](v7);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v6);
  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(v4);
  if (v5) {
    dispatch_release(v5);
  }
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  MEMORY[0x223C9A950](v4, 0x10E1C40EED49AFFLL);
  _Unwind_Resume(a1);
}

void sub_2224449F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    dispatch_barrier_async_f(v2[5], v2, (dispatch_function_t)std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver*)#1}::operator() const(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(void *)#1}::__invoke);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_222444A28()
{
}

void sub_222444A3C()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 + 80);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  uint64_t v2 = *(void *)(v0 + 64);
  *(void *)(v0 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x222444AC4);
}

void sub_222444B48(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x222444B50);
  }
  __clang_call_terminate(a1);
}

void Mav20PreferredNetworksFactoryCommandDriver::~Mav20PreferredNetworksFactoryCommandDriver(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  *(void *)this = &unk_26D4C86B0;
  std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(*((void **)this + 14));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MEMORY[0x223C99A30]((char *)this + 56);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 3);

  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(this);
}

{
  uint64_t vars8;

  Mav20PreferredNetworksFactoryCommandDriver::~Mav20PreferredNetworksFactoryCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void *Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26D4C8A10;
  v4[1] = this;
  v4[3] = v4;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v4);
  v3[0] = &unk_26D4C8A90;
  v3[1] = this;
  v3[3] = v3;
  qmi::ClientRouter::setHandler();
  return std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v3);
}

void sub_222444D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t Mav20PreferredNetworksFactoryCommandDriver::startCommandDriverEventHandler(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t Mav20PreferredNetworksFactoryCommandDriver::stopCommandDriverEventHandler(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutting down", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

uint64_t Mav20PreferredNetworksFactoryCommandDriver::createCommandDriver@<X0>(uint64_t result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)(result + 112);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = result + 112;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 == result + 112 || *(_DWORD *)(v6 + 32) > a2)
  {
LABEL_11:
    uint64_t v10 = *(void *)(v3 + 80);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    if (*(void *)(v3 + 40)) {
      dispatch_retain(*(dispatch_object_t *)(v3 + 40));
    }
    uint64_t v11 = *(void *)(v3 + 96);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  uint64_t v12 = *(void *)(v6 + 40);
  uint64_t v13 = *(std::__shared_weak_count **)(v6 + 48);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      goto LABEL_11;
    }
  }
  else if (!v12)
  {
    goto LABEL_11;
  }
  *a3 = v12;
  a3[1] = v13;
  return result;
}

void sub_222445384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9A950](v9, 0x10A1C40FF1576FELL);
  uint64_t v11 = *((void *)v4 + 10);
  *((void *)v4 + 10) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x223C99A30](v8);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v7);
  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(v4);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (!v5)
    {
LABEL_13:
      MEMORY[0x223C9A950](v4, 0x10E1C408FFDD7A7);
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        if (!v5)
        {
LABEL_8:
          if (a4) {
            std::__shared_weak_count::__release_shared[abi:ne180100](a4);
          }
          _Unwind_Resume(a1);
        }
      }
      else if (!v5)
      {
        goto LABEL_8;
      }
      dispatch_release(v5);
      goto LABEL_8;
    }
  }
  else if (!v5)
  {
    goto LABEL_13;
  }
  dispatch_release(v5);
  goto LABEL_13;
}

void Mav20PreferredNetworksCommandDriver::~Mav20PreferredNetworksCommandDriver(Mav20PreferredNetworksCommandDriver *this)
{
  *(void *)this = &unk_26D4C86F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MEMORY[0x223C99A30]((char *)this + 72);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 5);

  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(this);
}

{
  uint64_t vars8;

  Mav20PreferredNetworksCommandDriver::~Mav20PreferredNetworksCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(Mav20PreferredNetworksCommandDriver *this, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v8);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = ___ZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEj_block_invoke;
  v6[3] = &__block_descriptor_tmp_18;
  int v7 = a2;
  uint64_t v4 = qmi::MutableMessageBase::getTLV<nas::tlv::Checksum>((uint64_t)v8, 16);
  ___ZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEj_block_invoke((uint64_t)v6, v4);
  uint64_t v5 = *((void *)this + 9);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC: %08x", buf, 8u);
  }
  qmi::ClientRouter::get();
  operator new();
}

void sub_2224458B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  uint64_t v13 = *(std::__shared_weak_count **)(v11 - 88);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (a4) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v9, a4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  memset(v43, 0, sizeof(v43));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v43);
  uint64_t v8 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageSequence>((uint64_t)v43, 16);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int8 *)(a1 + 8);
    int v11 = *(unsigned __int8 *)(a1 + 9);
    int v12 = *(unsigned __int8 *)(a1 + 10);
    int v13 = *(unsigned __int8 *)(a1 + 11);
    int v14 = *(unsigned __int8 *)(a1 + 12);
    int v15 = *(unsigned __int8 *)(a1 + 13);
    int v16 = *(unsigned __int8 *)(a1 + 14);
    int v17 = *(unsigned __int8 *)(a1 + 15);
    int v18 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)std::string buf = 67111168;
    *(_DWORD *)&uint8_t buf[4] = v10;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = v11;
    HIWORD(v45) = 1024;
    *(_DWORD *)int v46 = v12;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v13;
    __int16 v47 = 1024;
    int v48 = v14;
    __int16 v49 = 1024;
    int v50 = v15;
    __int16 v51 = 1024;
    *(_DWORD *)int v52 = v16;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = v17;
    __int16 v53 = 1024;
    int v54 = v18;
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I IMSI length = %u (0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x)", buf, 0x38u);
  }
  uint64_t v19 = qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnImsi>((uint64_t)v43, 17);
  int v20 = *(unsigned __int8 *)(a1 + 8);
  *uint64_t v19 = v20;
  if (v20)
  {
    unint64_t v21 = 0;
    do
    {
      v19[v21 + 1] = *(unsigned char *)(a1 + 9 + v21);
      ++v21;
    }
    while (v21 < *(unsigned __int8 *)(a1 + 8));
  }
  *(void *)std::string buf = 0;
  unint64_t v45 = 0;
  *(void *)int v46 = 0;
  std::vector<PlmnPriorityData>::__init_with_size[abi:ne180100]<PlmnPriorityData*,PlmnPriorityData*>(buf, *(const void **)a4, *(void *)(a4 + 8), 0x6DB6DB6DB6DB6DB7 * (*(void *)(a4 + 8) - *(void *)a4));
  int v22 = qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnList>((uint64_t)v43, 18);
  int v23 = v45;
  if (v45 != *(char **)buf)
  {
    unint64_t v24 = 0;
    int v25 = v22 + 16;
    long long v26 = (unint64_t *)*((void *)v22 + 1);
    int v23 = *(char **)buf;
    do
    {
      int v27 = &v23[8 * v24 - v24];
      uint64_t v28 = *(unsigned __int16 *)v27;
      uint64_t v29 = *((unsigned __int16 *)v27 + 1);
      int v30 = v27[4];
      uint64_t v31 = v27[5];
      uint64_t v32 = v27[6];
      if ((unint64_t)v26 >= *v25)
      {
        uint64_t v33 = ((uint64_t)v26 - *(void *)v22) >> 3;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = *v25 - *(void *)v22;
        uint64_t v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
          uint64_t v35 = v33 + 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v22 + 16), v36);
        }
        else {
          uint64_t v37 = 0;
        }
        int v38 = &v37[8 * v33];
        *(void *)int v38 = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
        long long v26 = (unint64_t *)(v38 + 8);
        uint64_t v40 = *(void *)v22;
        uint64_t v39 = *((void *)v22 + 1);
        if (v39 != *(void *)v22)
        {
          do
          {
            int v41 = *(_DWORD *)(v39 - 8);
            v39 -= 8;
            int v42 = *(_DWORD *)(v39 + 3);
            *((_DWORD *)v38 - 2) = v41;
            v38 -= 8;
            *(_DWORD *)(v38 + 3) = v42;
          }
          while (v39 != v40);
          uint64_t v39 = *(void *)v22;
        }
        *(void *)int v22 = v38;
        *((void *)v22 + 1) = v26;
        *((void *)v22 + 2) = &v37[8 * v36];
        if (v39) {
          operator delete((void *)v39);
        }
      }
      else
      {
        *v26++ = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
      }
      *((void *)v22 + 1) = v26;
      ++v24;
      int v23 = *(char **)buf;
    }
    while (v24 < 0x6DB6DB6DB6DB6DB7 * (uint64_t)&v45[-*(void *)buf]);
  }
  if (v23)
  {
    unint64_t v45 = v23;
    operator delete(v23);
  }
  qmi::ClientRouter::get();
  operator new();
}

void sub_222445DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v26, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksFactoryCommandDriver *,std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver *)#1},std::allocator<Mav20PreferredNetworksFactoryCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksFactoryCommandDriver *,std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver *)#1},std::allocator<Mav20PreferredNetworksFactoryCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav20PreferredNetworksFactoryCommandDriver *,std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver *)#1},std::allocator<Mav20PreferredNetworksFactoryCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver*)#1}::operator() const(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::execute_wrapped<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>(Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v15 = a1;
  uint64_t v16 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 56);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing command driver", (uint8_t *)&buf, 2u);
  }
  subscriber::makeSimSlotRange();
  uint64_t v4 = v17;
  if (v17 != v18)
  {
    while ((v19(*v4) & 1) == 0)
    {
      if (++v4 == v18)
      {
        uint64_t v4 = v18;
        break;
      }
    }
    while (v4 != v18)
    {
      if (*v4 == 1)
      {
        uint64_t v5 = "prefnetworks.1";
      }
      else if (*v4 == 2)
      {
        uint64_t v5 = "prefnetworks.2";
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v2 + 32);
      if (!v6 || (uint64_t v7 = *(void *)(v2 + 24), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v9 = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      Registry::getServerConnection((uint64_t *)&v20, *(Registry **)(v2 + 72));
      long long buf = 0u;
      long long v30 = 0u;
      std::string::basic_string[abi:ne180100]<0>(v21, v5);
      int v10 = *(NSObject **)(v2 + 40);
      dispatch_object_t v28 = v10;
      if (v10) {
        dispatch_retain(v10);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "registration");
      uint64_t v24 = 0;
      int v25 = 0;
      int v11 = std::__shared_weak_count::lock(v9);
      if (v11)
      {
        int v12 = v11;
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v24 = v7;
        int v25 = v11;
        std::__shared_weak_count::__release_weak(v9);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      else
      {
        uint64_t v24 = 0;
        int v25 = 0;
        std::__shared_weak_count::__release_weak(v9);
      }
      long long v23 = v20;
      long long v20 = 0uLL;
      qmi::Client::createWithQueueLocal();
      if (*((void *)&v23 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
      }
      if (v25) {
        std::__shared_weak_count::__release_weak(v25);
      }
      if (v27 < 0) {
        operator delete(__p);
      }
      if (v28) {
        dispatch_release(v28);
      }
      if (SBYTE7(v22) < 0) {
        operator delete(v21[0]);
      }
      v21[0] = 0;
      v21[1] = 0;
      long long v22 = v30;
      long long v30 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)v21);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&buf);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
      int v13 = v4 + 1;
      uint64_t v4 = v18;
      if (v13 != v18)
      {
        uint64_t v4 = v13;
        while ((v19(*v4) & 1) == 0)
        {
          if (++v4 == v18)
          {
            uint64_t v4 = v18;
            break;
          }
        }
      }
    }
  }
  std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>::~unique_ptr[abi:ne180100](&v16);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v15);
}

void sub_222446258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t *std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x223C9A950](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void SimInstanceLoggable<Mav20PreferredNetworksFactoryCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<Mav20PreferredNetworksFactoryCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 56;
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN42Mav20PreferredNetworksFactoryCommandDriver24bindNASSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N Error binding NAS subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c128_ZTSNSt3__110shared_ptrIZN42Mav20PreferredNetworksFactoryCommandDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c128_ZTSNSt3__110shared_ptrIZN42Mav20PreferredNetworksFactoryCommandDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C89C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C89C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2224465B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D4C8A10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C8A10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *a2 - 1;
  if (v4 >= 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  int v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 64) + 16))(*(void *)(v3 + 64), v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I NAS Client has started", buf, 2u);
  }
  if (v4 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v2;
  }
  __int16 v8 = (capabilities::ct *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 64) + 16))(*(void *)(v3 + 64), v7);
  if (capabilities::ct::supportsGemini(v8))
  {
    memset(v15, 0, sizeof(v15));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
    *qmi::MutableMessageBase::getTLV<nas::tlv::SubType>((uint64_t)v15, 1) = v2 == 2;
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>(&v14, v2);
  }
  int v9 = *(std::__shared_weak_count **)(v3 + 16);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      int v11 = v10;
      uint64_t v12 = *(void *)(v3 + 8);
      if (v12)
      {
        if (v4 >= 3) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v2;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v13);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_2224468F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D4C8A90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C8A90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *a2 - 1;
  if (v4 >= 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  int v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 64) + 16))(*(void *)(v3 + 64), v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I NAS Client has stopped", v12, 2u);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  if (v7)
  {
    __int16 v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      int v9 = v8;
      uint64_t v10 = *(void *)(v3 + 8);
      if (v10)
      {
        if (v4 >= 3) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = v2;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_222446B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksCommandDriver *,std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver *)#1},std::allocator<Mav20PreferredNetworksCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksCommandDriver *,std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver *)#1},std::allocator<Mav20PreferredNetworksCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav20PreferredNetworksCommandDriver *,std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver *)#1},std::allocator<Mav20PreferredNetworksCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver*)#1}::operator() const(Mav20PreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void SimInstanceLoggable<Mav20PreferredNetworksCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<Mav20PreferredNetworksCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 72;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEjE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = **(void **)(a1 + 32);
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3)
  {
    unsigned int v4 = *(NSObject **)(v2 + 72);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v3;
      LOWORD(v20) = 2080;
      *(void *)((char *)&v20 + 2) = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Preferred PLMN List CRC check failed: Error in response with code = %d (%s)", buf, 0x12u);
    }
    BOOL v5 = 0;
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)long long buf = *(void *)a2;
  *(void *)&long long v20 = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  *((void *)&v20 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)buf);
  uint64_t v10 = TlvValue;
  if (!TlvValue) {
    goto LABEL_10;
  }
  int v11 = v9;
  *(void *)int v18 = TlvValue;
  BOOL v5 = tlv::parseV<nas::tlv::ChecksumResult>((unint64_t *)v18, v9);
  if (!*(void *)v18)
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)buf, 1, v10, v11);
LABEL_10:
    BOOL v5 = 0;
  }
  uint64_t v12 = *(NSObject **)(v2 + 72);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (const char *)&unk_222543CCE;
    if (!v5) {
      uint64_t v13 = "no";
    }
    *(_DWORD *)int v18 = 136315138;
    *(void *)&v18[4] = v13;
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC check completed, result: %s match", v18, 0xCu);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
LABEL_16:
  int v14 = *(std::__shared_weak_count **)(v2 + 120);
  if (v14)
  {
    int v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(v2 + 112);
      if (v17) {
        (*(void (**)(uint64_t, void, BOOL))(*(void *)v17 + 32))(v17, *(unsigned int *)(v2 + 88), v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_222446E6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c94_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c94_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEjE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN35Mav20PreferredNetworksCommandDriver21sendPreferredPlmnListEhhRKNSt3__16vectorI16PlmnPriorityDataNS4_9allocatorIS6_EEEEE3__3EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  int v4 = *(_DWORD *)(a2 + 4);
  BOOL v5 = *(NSObject **)(*v2 + 72);
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v4;
      __int16 v12 = 2080;
      uint64_t v13 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "Preferred PLMN List push failed: Error in response with code = %d 9%s)", buf, 0x12u);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v3 + 48);
    if (v6)
    {
      if (std::__shared_weak_count::lock(v6)) {
        operator new();
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List segment push completed", buf, 2u);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 120);
  if (v7)
  {
    __int16 v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      int v9 = v8;
      uint64_t v10 = *(void *)(v3 + 112);
      if (v10) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v10 + 40))(v10, *(unsigned int *)(v3 + 88), 1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_222447130(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver21sendPreferredPlmnListEhhRKNS_6vectorI16PlmnPriorityDataNS_9allocatorIS3_EEEEE3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver21sendPreferredPlmnListEhhRKNS_6vectorI16PlmnPriorityDataNS_9allocatorIS3_EEEEE3__3EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C8C60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::execute_wrapped<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},std::default_delete<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  __int16 v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 120);
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      BOOL v5 = v4;
      uint64_t v6 = *(void *)(v2 + 112);
      if (v6) {
        (*(void (**)(uint64_t, void, void))(*(void *)v6 + 40))(v6, *(unsigned int *)(v2 + 88), 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_2224472AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::create()
{
}

void sub_222447404(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    if (!v1)
    {
LABEL_3:
      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_release(v1);
  if (!v4) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  MEMORY[0x223C9A950](v2, 0x10E1C40027E38C3);
  goto LABEL_5;
}

uint64_t QMIDownLinkFilterCommandDriver::QMIDownLinkFilterCommandDriver(uint64_t a1, void *a2, NSObject **a3, int a4, int a5, unsigned int a6, void *a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26D4D37C8;
  uint64_t v14 = (void *)(a1 + 8);
  if (a4 == 3)
  {
    uint64_t v16 = "dfs.qmi.all.?";
    goto LABEL_23;
  }
  if (a4 != 2)
  {
    if (a4 != 1)
    {
      uint64_t v16 = "dfs.qmi.?";
      goto LABEL_23;
    }
    if (a5 == 2)
    {
      if (a6 < 0x10)
      {
        int v15 = off_26460DBA0;
        goto LABEL_19;
      }
    }
    else if (a5 == 1 && a6 < 0x10)
    {
      int v15 = off_26460DB20;
LABEL_19:
      uint64_t v16 = v15[a6];
      goto LABEL_23;
    }
    uint64_t v16 = "dfs.qmi.1.?";
    goto LABEL_23;
  }
  if (a5 == 2)
  {
    if (a6 < 0x10)
    {
      int v15 = off_26460DCA0;
      goto LABEL_19;
    }
    uint64_t v16 = "dfs.qmi.2.6.?";
  }
  else if (a5 == 1)
  {
    if (a6 < 0x10)
    {
      int v15 = off_26460DC20;
      goto LABEL_19;
    }
    uint64_t v16 = "dfs.qmi.2.4.?";
  }
  else
  {
    uint64_t v16 = "dfs.qmi.2.?";
  }
LABEL_23:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v25, (const char *)*MEMORY[0x263F03770], v16);
  *uint64_t v14 = 0;
  v14[1] = 0;
  uint64_t v17 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v17) {
    dispatch_retain(v17);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v24);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v25);
  v23[0] = &unk_26D4BA498;
  v23[3] = v23;
  int v18 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v23);
  *(void *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v18) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v24);
  uint64_t v19 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v23);
  *(void *)a1 = &unk_26D4C8CB0;
  *(void *)(a1 + 56) = *a2;
  uint64_t v20 = a2[1];
  *(void *)(a1 + 64) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 72) = a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 80) = a6;
  *(unsigned char *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = *a7;
  uint64_t v21 = a7[1];
  *(void *)(a1 + 128) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  if ((capabilities::ct::supportsLLFilters(v19) & 1) == 0) {
    *(_WORD *)(a1 + 136) = 256;
  }
  return a1;
}

void sub_222447800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9A950](v5, 0x10A1C40FF1576FELL);
  uint64_t v7 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x223C99A30](v4);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::~QMIDownLinkFilterCommandDriver(QMIDownLinkFilterCommandDriver *this)
{
  *(void *)this = &unk_26D4C8CB0;
  uint64_t v5 = (void **)((char *)this + 144);
  std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  qmi::Client::~Client((QMIDownLinkFilterCommandDriver *)((char *)this + 88));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MEMORY[0x223C99A30]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 1);
}

{
  uint64_t vars8;

  QMIDownLinkFilterCommandDriver::~QMIDownLinkFilterCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void QMIDownLinkFilterCommandDriver::shutdown(QMIDownLinkFilterCommandDriver *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t QMIDownLinkFilterCommandDriver::createDfsClientOnDemand_sync(QMIDownLinkFilterCommandDriver *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 19);
    int v4 = *((_DWORD *)this + 20);
    *(_DWORD *)long long buf = 67109376;
    int v25 = v3;
    __int16 v26 = 1024;
    int v27 = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I lazy creation of fDFSClient for ipFamily %d, pdp %d", buf, 0xEu);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "QMIDriver:dfs");
  uint64_t v5 = *((void *)this + 3);
  dispatch_object_t v21 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "dfs");
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v6 || (uint64_t v7 = *((void *)this + 1), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  uint64_t v17 = v7;
  int v18 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v15, *((Registry **)this + 7));
  qmi::Client::createWithQueueLocal();
  long long v10 = v28;
  long long v28 = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 14);
  *(_OWORD *)((char *)this + 104) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  if (v20 < 0) {
    operator delete(v19);
  }
  uint64_t v12 = (capabilities::ct *)v21;
  if (v21) {
    dispatch_release(v21);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (capabilities::ct::supportsLLFilters(v12)) {
    __int16 v13 = 0;
  }
  else {
    __int16 v13 = 256;
  }
  *((_WORD *)this + 68) = v13;
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  return qmi::Client::start((QMIDownLinkFilterCommandDriver *)((char *)this + 88));
}

void sub_222447E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  if (a33) {
    std::__shared_weak_count::__release_weak(a33);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (*(char *)(v34 - 145) < 0) {
    operator delete(*(void **)(v34 - 168));
  }
  unint64_t v36 = *(NSObject **)(v34 - 144);
  if (v36) {
    dispatch_release(v36);
  }
  if (*(char *)(v34 - 113) < 0) {
    operator delete(*(void **)(v34 - 136));
  }
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 76);
    int v4 = *(_DWORD *)(v1 + 80);
    v5[0] = 67109376;
    v5[1] = v3;
    __int16 v6 = 1024;
    int v7 = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DFS Client has stopped for ipFamily %d, pdp %d", (uint8_t *)v5, 0xEu);
  }
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke_4(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 76);
    int v4 = *(_DWORD *)(v1 + 80);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v3;
    LOWORD(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 2) = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DFS Client has started for ipFamily %d, pdp %d", buf, 0xEu);
  }
  if (*(void *)(v1 + 104))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v24 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    uint64_t v5 = (const void **)__p[1];
    __int16 v6 = (const void **)v24;
    int v7 = (const void **)__p[1];
    if (__p[1] != (void *)v24)
    {
      int v7 = (const void **)__p[1];
      while (*((unsigned char *)*v7 + 8) != 17)
      {
        if (++v7 == (const void **)v24) {
          goto LABEL_14;
        }
      }
    }
    if (v7 == (const void **)v24) {
LABEL_14:
    }
      operator new();
    if (!v8) {
      __cxa_bad_cast();
    }
    if (*(_DWORD *)(v1 + 76) == 2) {
      char v10 = 6;
    }
    else {
      char v10 = 4;
    }
    v8[9] = v10;
    while (1)
    {
      if (v5 == v6) {
        goto LABEL_25;
      }
      if (*((unsigned char *)*v5 + 8) == 18) {
        break;
      }
      ++v5;
    }
    if (v5 == v6) {
LABEL_25:
    }
      operator new();
    if (!v11) {
      __cxa_bad_cast();
    }
    *(void *)(v11 + 12) = 0x400000003;
    uint64_t v12 = (const void **)__p[1];
    if (__p[1] == v6) {
      goto LABEL_34;
    }
    __int16 v13 = (const void **)__p[1];
    while (*((unsigned char *)*v13 + 8) != 19)
    {
      if (++v13 == v6) {
        goto LABEL_34;
      }
    }
    if (v13 == v6) {
LABEL_34:
    }
      operator new();
    if (!v14) {
      __cxa_bad_cast();
    }
    v14[9] = *(unsigned char *)(v1 + 80) + 1;
    while (1)
    {
      if (v12 == v6) {
        goto LABEL_41;
      }
      if (*((unsigned char *)*v12 + 8) == 20) {
        break;
      }
      ++v12;
    }
    if (v12 == v6) {
LABEL_41:
    }
      operator new();
    if (!v15) {
      __cxa_bad_cast();
    }
    if (*(_DWORD *)(v1 + 72) == 2) {
      int v16 = 2;
    }
    else {
      int v16 = 1;
    }
    void v15[3] = v16;
    v18[5] = v1 + 88;
    uint64_t v19 = QMIServiceMsg::create();
    int v20 = 25000;
    uint64_t v21 = 0;
    long long aBlock = 0;
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 0x40000000;
    void v18[2] = ___ZN30QMIDownLinkFilterCommandDriver18bindDFSClient_syncEv_block_invoke;
    v18[3] = &__block_descriptor_tmp_12_7;
    v18[4] = v1;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v26 = 0x40000000;
    int v27 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs10BindClient8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    long long v28 = &unk_26460D9C0;
    uint64_t v29 = v18;
    uint64_t v17 = _Block_copy(buf);
    long long aBlock = v17;
    if (v19)
    {
      qmi::Client::send();
      uint64_t v17 = aBlock;
    }
    if (v17) {
      _Block_release(v17);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    int v9 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E fDFSClient not ready", buf, 2u);
    }
  }
}

void sub_2224487BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke_6(uint64_t a1, NSObject *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 76);
    int v6 = *(_DWORD *)(v3 + 80);
    LODWORD(group) = 67109376;
    HIDWORD(group) = v5;
    __int16 v8 = 1024;
    int v9 = v6;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I DFS Client enters LowPower for ipFamily %d, pdp %d", (uint8_t *)&group, 0xEu);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  dispatch_group_t group = a2;
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v3 + 24))(v3, 1, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
}

void sub_222448970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke_9(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 76);
    int v4 = *(_DWORD *)(v1 + 80);
    LODWORD(group) = 67109376;
    HIDWORD(group) = v3;
    __int16 v6 = 1024;
    int v7 = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DFS Client exits LowPower for ipFamily %d, pdp %d", (uint8_t *)&group, 0xEu);
  }
  dispatch_group_t group = 0;
  (*(void (**)(uint64_t, void, dispatch_group_t *))(*(void *)v1 + 24))(v1, 0, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_222448AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void QMIDownLinkFilterCommandDriver::setObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void ___ZN30QMIDownLinkFilterCommandDriver18bindDFSClient_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a2 + 4);
  int v4 = *(NSObject **)(v2 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v3;
      LOWORD(v25) = 2080;
      *(void *)((char *)&v25 + 2) = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#E dfs::BindClient Error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    if (v5)
    {
      int v6 = *(_DWORD *)(v2 + 76);
      int v7 = *(_DWORD *)(v2 + 80);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v6;
      LOWORD(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 2) = v7;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I DFS Client bound successfully with ipFamily %d, pdp %d", buf, 0xEu);
    }
    if (capabilities::ct::supportsLLFilters((capabilities::ct *)v5))
    {
      if (*(void *)(v2 + 104))
      {
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 0x40000000;
        _OWORD v23[2] = ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke;
        v23[3] = &__block_descriptor_tmp_13_6;
        void v23[4] = v2;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&long long v25 = 0x40000000;
        *((void *)&v25 + 1) = ___ZNK3qmi6Client13setIndHandlerIRKN3dfs15LLFiltersStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
        uint64_t v26 = &unk_26460D9E8;
        int v27 = v23;
        qmi::Client::setIndHandler();
        long long v21 = 0u;
        long long v22 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v21);
        uint64_t v8 = (const void **)*((void *)&v21 + 1);
        if (*((void *)&v21 + 1) != (void)v22)
        {
          while (*((unsigned char *)*v8 + 8) != 23)
          {
            if (++v8 == (const void **)v22) {
              goto LABEL_18;
            }
          }
        }
        if (v8 == (const void **)v22) {
LABEL_18:
        }
          operator new();
        if (!v9) {
          __cxa_bad_cast();
        }
        void v9[9] = 1;
        uint64_t v16 = v2 + 88;
        uint64_t v17 = QMIServiceMsg::create();
        int v18 = 25000;
        uint64_t v19 = 0;
        long long aBlock = 0;
        v15[0] = MEMORY[0x263EF8330];
        v15[1] = 0x40000000;
        _OWORD v15[2] = ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_3;
        void v15[3] = &__block_descriptor_tmp_16_2;
        unsigned char v15[4] = v2;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&long long v25 = 0x40000000;
        *((void *)&v25 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        uint64_t v26 = &unk_26460DA10;
        int v27 = v15;
        uint64_t v11 = _Block_copy(buf);
        long long aBlock = v11;
        if (v17)
        {
          qmi::Client::send();
          uint64_t v11 = aBlock;
        }
        if (v11) {
          _Block_release(v11);
        }
        memset(v14, 0, sizeof(v14));
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
        uint64_t v16 = v2 + 88;
        uint64_t v17 = QMIServiceMsg::create();
        int v18 = 25000;
        uint64_t v19 = 0;
        long long aBlock = 0;
        v13[0] = MEMORY[0x263EF8330];
        v13[1] = 0x40000000;
        v13[2] = ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_17;
        v13[3] = &__block_descriptor_tmp_21_5;
        v13[4] = v2;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&long long v25 = 0x40000000;
        *((void *)&v25 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19GetFilterCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        uint64_t v26 = &unk_26460DA38;
        int v27 = v13;
        uint64_t v12 = _Block_copy(buf);
        long long aBlock = v12;
        if (v17)
        {
          qmi::Client::send();
          uint64_t v12 = aBlock;
        }
        if (v12) {
          _Block_release(v12);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v21);
      }
      else
      {
        uint64_t v10 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#E fDFSClient not ready", buf, 2u);
        }
      }
    }
    else
    {
      *(_WORD *)(v2 + 136) = 256;
    }
    QMIDownLinkFilterCommandDriver::handlePdpStateChangeAfterClientCreation_sync(v2, *(_DWORD *)(v2 + 72), 1);
  }
}

void sub_222449140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock,char a29)
{
  if (a25) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::handlePdpStateChangeAfterClientCreation_sync(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a1 + 72);
  if (v6 == a2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != a3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a3);
      if (a3)
      {
        uint64_t v17 = 0;
        QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(a1, 0, &v17);
      }
      int v7 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(_DWORD *)(a1 + 76);
        int v8 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)long long buf = 67109632;
        int v19 = a3;
        __int16 v20 = 1024;
        int v21 = v8;
        __int16 v22 = 1024;
        int v23 = v9;
        uint64_t v10 = "#I pdpActiveState changed to %d for pdpId %d, ipFamily %d";
        uint64_t v11 = v7;
        uint32_t v12 = 20;
LABEL_15:
        _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
        return;
      }
      return;
    }
    int v6 = *(_DWORD *)(a1 + 72);
  }
  if (v6 != a2 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) && a3 != 0)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 56))(a1, 0);
    uint64_t v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 76);
      int v15 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)long long buf = 67109376;
      int v19 = v15;
      __int16 v20 = 1024;
      int v21 = v16;
      uint64_t v10 = "#I pdpActiveState changed to false on pdpId %d, ipFamily %d";
      uint64_t v11 = v14;
      uint32_t v12 = 14;
      goto LABEL_15;
    }
  }
}

void ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  uint64_t v10 = ___ZN30QMIDownLinkFilterCommandDriver29handleLLFiltersStatusInd_syncERKN3dfs15LLFiltersStatus10IndicationE_block_invoke;
  uint64_t v11 = &__block_descriptor_tmp_31_0;
  uint64_t v12 = v3;
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    int v6 = TlvValue;
    int v7 = v5;
    int v16 = TlvValue;
    std::string __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    tlv::parseV<dfs::tlv::LLFilterStatusList>(&v16, v5, &__p);
    int v8 = v16;
    if (v16) {
      v10((uint64_t)v9, (unsigned int **)&__p);
    }
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    if (!v8) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v6, v7);
    }
  }
}

void sub_2224494EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Error registering for DFS indications: %d(%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

void ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_17(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *((_DWORD *)a2 + 1);
  __int16 v5 = *(NSObject **)(v3 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (v6)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Response to GetFilterCapability received", buf, 2u);
    }
    *(void *)long long buf = 0;
    *(void *)&long long v26 = buf;
    *((void *)&v26 + 1) = 0x2000000000;
    int v27 = 0;
    uint64_t v19 = 0;
    __int16 v20 = &v19;
    uint64_t v21 = 0x2000000000;
    int v22 = 0;
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 0x40000000;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t *))___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_18;
    int v16 = &unk_26460D958;
    uint64_t v17 = buf;
    int v18 = &v19;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v9 = TlvValue;
    if (TlvValue)
    {
      int v10 = v8;
      *(void *)uint64_t v24 = TlvValue;
      uint64_t v23 = tlv::parseV<dfs::tlv::LLFilterCapability>((unint64_t *)v24, v8);
      if (*(void *)v24) {
        v15((uint64_t)v14, &v23);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 20, v9, v10);
      }
    }
    if (*(_DWORD *)(v26 + 24))
    {
      if (*((_DWORD *)v20 + 6))
      {
        __int16 v11 = 257;
LABEL_20:
        *(_WORD *)(v3 + 136) = v11;
        _Block_object_dispose(&v19, 8);
        _Block_object_dispose(buf, 8);
        return;
      }
      uint64_t v12 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v24 = 0;
        __int16 v13 = "#E GetFilterCapability: maxNumPerAdd is zero";
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v12 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v24 = 0;
        __int16 v13 = "#E GetFilterCapability: maxNum is zero";
LABEL_18:
        _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, v13, v24, 2u);
      }
    }
    __int16 v11 = 256;
    goto LABEL_20;
  }
  if (v6)
  {
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v4;
    LOWORD(v26) = 2080;
    *(void *)((char *)&v26 + 2) = qmi::asString();
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Error quering for DFS capability: %d(%s)", buf, 0x12u);
  }
  *(_WORD *)(v3 + 136) = 256;
}

void sub_222449840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_18(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a2[1];
  return result;
}

void QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 104))
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "#E fDFSClient not ready";
    uint64_t v9 = v7;
    uint32_t v10 = 2;
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    __int16 v11 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = *(_DWORD *)(a1 + 76);
    int v12 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v12;
    LOWORD(v28) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = v13;
    uint64_t v8 = "#I No active packet data on pdp %d ipFamily %d, skip setPowerSaveFilterMode";
    uint64_t v9 = v11;
    uint32_t v10 = 14;
LABEL_11:
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    return;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v26 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  BOOL v6 = (const void **)__p[1];
  if (__p[1] != (void *)v26)
  {
    while (*((unsigned char *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v26) {
        goto LABEL_15;
      }
    }
  }
  if (v6 == (const void **)v26) {
LABEL_15:
  }
    operator new();
  if (!v14) {
    __cxa_bad_cast();
  }
  v14[9] = a2;
  uint64_t v20 = a1 + 88;
  uint64_t v21 = QMIServiceMsg::create();
  int v22 = 25000;
  uint64_t v23 = 0;
  long long aBlock = 0;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 1174405120;
  v17[2] = ___ZN30QMIDownLinkFilterCommandDriver27setPowerSaveFilterMode_syncEbN8dispatch13group_sessionE_block_invoke;
  unsigned int v17[3] = &__block_descriptor_tmp_22_13;
  uint64_t v15 = *a3;
  v17[4] = a1;
  dispatch_group_t group = v15;
  if (v15)
  {
    dispatch_retain(v15);
    dispatch_group_enter(group);
  }
  char v19 = a2;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v28 = 0x40000000;
  uint64_t v29 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs22SetPowersaveFilterMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v30 = &unk_26460DA60;
  uint64_t v31 = v17;
  int v16 = _Block_copy(buf);
  long long aBlock = v16;
  if (v21)
  {
    qmi::Client::send();
    int v16 = aBlock;
  }
  if (v16) {
    _Block_release(v16);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_222449C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver27setPowerSaveFilterMode_syncEbN8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  __int16 v5 = *(NSObject **)(v3 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      return;
    }
    uint64_t v9 = v3 + 76;
    int v8 = *(_DWORD *)(v3 + 76);
    int v7 = *(_DWORD *)(v9 + 4);
    int v16 = 67109890;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = qmi::asString();
    uint32_t v10 = "#E setPowerSaveFilterMode for pdp %d ipFamily %d Error code = 0x%x (%s)";
    __int16 v11 = v5;
    uint32_t v12 = 30;
  }
  else
  {
    if (!v6) {
      return;
    }
    int v13 = *(unsigned __int8 *)(a1 + 48);
    int v15 = *(_DWORD *)(v3 + 76);
    int v14 = *(_DWORD *)(v3 + 80);
    int v16 = 67109632;
    int v17 = v13;
    __int16 v18 = 1024;
    int v19 = v14;
    __int16 v20 = 1024;
    int v21 = v15;
    uint32_t v10 = "#I setPowerSaveFilterMode to %d for pdp %d ipFamily %d";
    __int16 v11 = v5;
    uint32_t v12 = 20;
  }
  _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v16, v12);
}

void QMIDownLinkFilterCommandDriver::handlePdpStateChange(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMIDownLinkFilterCommandDriver::setFilterRules_sync(uint64_t a1, int a2, dispatch_object_t *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    v13[0] = 0;
    QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(a1, 0, v13);
    return;
  }
  int v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  if (!*(void *)(a1 + 104))
  {
    BOOL v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    *(_WORD *)long long buf = 0;
    int v7 = "#E fDFSClient not ready";
    int v8 = v6;
    uint32_t v9 = 2;
    goto LABEL_22;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1))
  {
    memset(v18, 0, sizeof(v18));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
    v13[1] = (a1 + 88);
    uint64_t v14 = QMIServiceMsg::create();
    int v15 = 25000;
    uint64_t v16 = 0;
    int v17 = 0;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v21 = 1174405120;
    __int16 v22 = ___ZN30QMIDownLinkFilterCommandDriver32removeAllPowerSaveFilterMsg_syncEN8dispatch13group_sessionE_block_invoke;
    uint64_t v23 = &__block_descriptor_tmp_25_6;
    uint64_t v24 = a1;
    dispatch_group_t v25 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      if (v25) {
        dispatch_group_enter(v25);
      }
    }
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs25RemoveAllPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_26460DA88;
    aBlock[4] = buf;
    __int16 v5 = _Block_copy(aBlock);
    int v17 = v5;
    if (v14)
    {
      qmi::Client::send();
      __int16 v5 = v17;
    }
    if (v5) {
      _Block_release(v5);
    }
    if (v25)
    {
      dispatch_group_leave(v25);
      if (v25) {
        dispatch_release(v25);
      }
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
    goto LABEL_23;
  }
  uint32_t v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(_DWORD *)(a1 + 76);
    int v11 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v11;
    LOWORD(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 2) = v12;
    int v7 = "#I No active packet data on pdp %d ipFamily %d, skip removeAllPowerSaveFilter";
    int v8 = v10;
    uint32_t v9 = 14;
LABEL_22:
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
  }
LABEL_23:
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_22244A1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  __int16 v5 = *(NSObject **)(v3 - 56);
  if (v5)
  {
    dispatch_group_leave(v5);
    BOOL v6 = *(NSObject **)(v3 - 56);
    if (v6) {
      dispatch_release(v6);
    }
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(uint64_t a1, uint64_t a2, NSObject **a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    if (*(void *)(a1 + 104))
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        *(_OWORD *)std::string __p = 0u;
        long long v43 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
        *(void *)long long buf = 0;
        uint64_t v46 = 0;
        __int16 v47 = 0;
        std::vector<dfs::tlv::FilterRuleType>::__init_with_size[abi:ne180100]<dfs::tlv::FilterRuleType*,dfs::tlv::FilterRuleType*>(buf, *(const void **)a2, *(void *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
        BOOL v6 = (const void **)__p[1];
        if (__p[1] != (void *)v43)
        {
          while (*((unsigned char *)*v6 + 8) != 16)
          {
            if (++v6 == (const void **)v43) {
              goto LABEL_23;
            }
          }
        }
        if (v6 == (const void **)v43) {
LABEL_23:
        }
          operator new();
        if (!v16) {
          __cxa_bad_cast();
        }
        int v17 = v16 + 16;
        if (v16 + 16 == (char *)buf) {
          goto LABEL_43;
        }
        __int16 v18 = *(unsigned char **)buf;
        int v19 = (unsigned char *)v46;
        size_t v20 = v46 - *(void *)buf;
        unint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((v46 - *(void *)buf) >> 4);
        uint64_t v22 = *((void *)v16 + 4);
        uint64_t v23 = (char *)*v17;
        if (0x2E8BA2E8BA2E8BA3 * ((v22 - *v17) >> 4) >= v21)
        {
          int v27 = (void **)(v16 + 24);
          uint64_t v29 = (unsigned char *)*((void *)v16 + 3);
          if (0x2E8BA2E8BA2E8BA3 * ((v29 - v23) >> 4) < v21)
          {
            uint64_t v30 = *(void *)buf + 16 * ((v29 - v23) >> 4);
            if (v29 != v23)
            {
              memmove(v23, *(const void **)buf, v29 - v23);
              uint64_t v23 = (char *)*v27;
            }
            size_t v20 = (size_t)&v19[-v30];
            if (v19 == (unsigned char *)v30) {
              goto LABEL_42;
            }
            uint64_t v31 = v23;
            uint64_t v32 = (const void *)v30;
            goto LABEL_41;
          }
        }
        else
        {
          if (v23)
          {
            *((void *)v16 + 3) = v23;
            operator delete(v23);
            uint64_t v22 = 0;
            *int v17 = 0;
            v17[1] = 0;
            v17[2] = 0;
          }
          if (v21 > 0x1745D1745D1745DLL) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0x2E8BA2E8BA2E8BA3 * (v22 >> 4);
          uint64_t v25 = 2 * v24;
          if (2 * v24 <= v21) {
            uint64_t v25 = 0x2E8BA2E8BA2E8BA3 * ((v19 - v18) >> 4);
          }
          if (v24 >= 0xBA2E8BA2E8BA2ELL) {
            unint64_t v26 = 0x1745D1745D1745DLL;
          }
          else {
            unint64_t v26 = v25;
          }
          std::vector<dfs::tlv::FilterRuleType>::__vallocate[abi:ne180100](v17, v26);
          uint64_t v28 = (char *)v17[1];
          int v27 = (void **)(v17 + 1);
          uint64_t v23 = v28;
        }
        if (v19 == v18)
        {
LABEL_42:
          *int v27 = &v23[v20];
LABEL_43:
          if (*(void *)buf)
          {
            uint64_t v46 = *(void *)buf;
            operator delete(*(void **)buf);
          }
          uint64_t v37 = a1 + 88;
          uint64_t v38 = QMIServiceMsg::create();
          int v39 = 25000;
          uint64_t v40 = 0;
          long long aBlock = 0;
          v35[0] = MEMORY[0x263EF8330];
          v35[1] = 1174405120;
          v35[2] = ___ZN30QMIDownLinkFilterCommandDriver33sendDFSAddPowerSaveFilterMsg_syncERKN3dfs3tlv11FilterRulesEN8dispatch13group_sessionE_block_invoke;
          v35[3] = &__block_descriptor_tmp_28_3;
          uint64_t v33 = *a3;
          v35[4] = a1;
          dispatch_group_t group = v33;
          if (v33)
          {
            dispatch_retain(v33);
            dispatch_group_enter(group);
          }
          *(void *)long long buf = MEMORY[0x263EF8330];
          uint64_t v46 = 0x40000000;
          __int16 v47 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19AddPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          int v48 = &unk_26460DAB0;
          __int16 v49 = v35;
          uint64_t v34 = _Block_copy(buf);
          long long aBlock = v34;
          if (v38)
          {
            qmi::Client::send();
            uint64_t v34 = aBlock;
          }
          if (v34) {
            _Block_release(v34);
          }
          if (group)
          {
            dispatch_group_leave(group);
            if (group) {
              dispatch_release(group);
            }
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
          return;
        }
        uint64_t v31 = v23;
        uint64_t v32 = v18;
LABEL_41:
        memmove(v31, v32, v20);
        goto LABEL_42;
      }
      int v13 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v15 = *(_DWORD *)(a1 + 76);
      int v14 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v14;
      LOWORD(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 2) = v15;
      uint64_t v10 = "#I No active packet data on pdp %d ipFamily %d, skip AddPowerSaveFilter";
      uint64_t v11 = v13;
      uint32_t v12 = 14;
    }
    else
    {
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v10 = "#E fDFSClient not ready";
      uint64_t v11 = v9;
      uint32_t v12 = 2;
    }
    _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    return;
  }
  uint64_t v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I Empty filter rules", buf, 2u);
  }
  int v8 = *a3;
  int v44 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v8);
  }
  QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(a1, 1, &v44);
  if (v8)
  {
    dispatch_group_leave(v8);
    dispatch_release(v8);
  }
}

void sub_22244A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver32removeAllPowerSaveFilterMsg_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  v94[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  __int16 v5 = *(NSObject **)(v3 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v8 = *(_DWORD *)(v3 + 76);
      int v7 = *(_DWORD *)(v3 + 80);
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v86) = 1024;
      *(_DWORD *)((char *)&v86 + 2) = v8;
      HIWORD(v86) = 1024;
      LODWORD(v87[0]) = v4;
      WORD2(v87[0]) = 2080;
      *(void *)((char *)v87 + 6) = qmi::asString();
      uint64_t v9 = "#E removeAllPowerSaveFilter for pdp %d, ipFamily %d Error code = 0x%x (%s)";
      uint64_t v10 = v5;
      uint32_t v11 = 30;
LABEL_6:
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    }
  }
  else if (v6)
  {
    int v13 = *(_DWORD *)(v3 + 76);
    int v12 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v12;
    LOWORD(v86) = 1024;
    *(_DWORD *)((char *)&v86 + 2) = v13;
    uint64_t v9 = "#I removeAllPowerSaveFilter successful for pdp %d, ipFamily %d";
    uint64_t v10 = v5;
    uint32_t v11 = 14;
    goto LABEL_6;
  }
  int v14 = *(NSObject **)(a1 + 40);
  if (v14)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 40));
    dispatch_group_enter(v14);
  }
  *(void *)long long buf = 0;
  BOOL v86 = 0;
  v87[0] = 0;
  int v15 = *(_DWORD *)(v3 + 76);
  int v73 = v14;
  uint64_t v16 = (char *)operator new(0xB0uLL);
  char v17 = 0;
  if (v15 == 2) {
    char v18 = 6;
  }
  else {
    char v18 = 4;
  }
  char *v16 = v18;
  *(_OWORD *)(v16 + 1) = 0u;
  *(_OWORD *)(v16 + 17) = 0u;
  *(_OWORD *)(v16 + 33) = 0u;
  *(_OWORD *)(v16 + 49) = 0u;
  *(_OWORD *)(v16 + 65) = 0u;
  *((void *)v16 + 10) = 0;
  *((_DWORD *)v16 + 22) = 50;
  unsigned int v19 = 1;
  *(_OWORD *)(v16 + 92) = 0u;
  *(_OWORD *)(v16 + 108) = 0u;
  *(_OWORD *)(v16 + 124) = 0u;
  *(_OWORD *)(v16 + 140) = 0u;
  *(_OWORD *)(v16 + 156) = 0u;
  *((_DWORD *)v16 + 43) = 0;
  BOOL v86 = v16 + 176;
  v87[0] = v16 + 176;
  *(void *)long long buf = v16;
  v94[0] = 0x800000004;
  size_t v20 = (unsigned int *)v94;
  uint64_t v21 = 1;
  int v77 = 1;
  do
  {
    char v22 = v17;
    std::string __p = 0;
    int v83 = 0;
    uint64_t v84 = 0;
    std::vector<unsigned short>::vector(&__p, 50);
    unint64_t v81 = 0;
    unsigned int v23 = *(_DWORD *)(v3 + 76);
    uint64_t v78 = v21;
    if (v23 - 1 >= 2)
    {
      int v64 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v88 = 0;
        _os_log_impl(&dword_22231A000, v64, OS_LOG_TYPE_DEFAULT, "#E invalid fIpFamily", v88, 2u);
      }
      int v62 = 1;
    }
    else
    {
      unint64_t v24 = *(std::__shared_weak_count **)(v3 + 128);
      if (v24 && (unsigned int v25 = *v20, (v74 = std::__shared_weak_count::lock(v24)) != 0))
      {
        uint64_t v26 = *(void *)(v3 + 120);
        if (v26)
        {
          char v72 = v22;
          if ((*(uint64_t (**)(uint64_t, void, void, void *, uint64_t, unint64_t *))(*(void *)v26 + 72))(v26, *(unsigned int *)(v3 + 80), v25 | v23, __p, 50, &v81))
          {
            unint64_t v27 = v81;
            unint64_t v28 = v81 >> 1;
            uint64_t v29 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int v88 = 67109120;
              int v89 = v28;
              _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, "#I portListNumber = %d", v88, 8u);
            }
            if (v28)
            {
              uint64_t v30 = 0;
              uint64_t v75 = (v27 >> 1);
              while (1)
              {
                unsigned int v76 = v19;
                uint64_t v31 = v3;
                char v32 = *(_DWORD *)(v3 + 76) == 2 ? 6 : 4;
                int v33 = *v20 == 4 ? 6 : 17;
                uint64_t v34 = 2 * (*v20 == 4);
                __int16 v35 = *v20 == 4 ? *((_WORD *)__p + v30) : 0;
                uint64_t v36 = 2 * (*v20 != 4);
                __int16 v37 = *v20 == 4 ? 0 : *((_WORD *)__p + v30);
                uint64_t v38 = v86;
                if ((unint64_t)v86 >= v87[0])
                {
                  uint64_t v42 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v86[-*(void *)buf] >> 4);
                  unint64_t v43 = v42 + 1;
                  if ((unint64_t)(v42 + 1) > 0x1745D1745D1745DLL) {
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5D1745D1745D1746 * ((uint64_t)(v87[0] - *(void *)buf) >> 4) > v43) {
                    unint64_t v43 = 0x5D1745D1745D1746 * ((uint64_t)(v87[0] - *(void *)buf) >> 4);
                  }
                  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v87[0] - *(void *)buf) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
                    unint64_t v44 = 0x1745D1745D1745DLL;
                  }
                  else {
                    unint64_t v44 = v43;
                  }
                  if (v44) {
                    unint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<qos::tlv::QosFilterSpec>>((uint64_t)v87, v44);
                  }
                  else {
                    unint64_t v45 = 0;
                  }
                  uint64_t v46 = &v45[176 * v42];
                  *uint64_t v46 = v32;
                  *(_OWORD *)(v46 + 1) = 0u;
                  *(_OWORD *)(v46 + 17) = 0u;
                  *(_OWORD *)(v46 + 33) = 0u;
                  *(_OWORD *)(v46 + 49) = 0u;
                  *(_OWORD *)(v46 + 65) = 0u;
                  *((void *)v46 + 10) = 0;
                  *((_DWORD *)v46 + 22) = v33;
                  *((_DWORD *)v46 + 23) = 0;
                  *((void *)v46 + 12) = v34;
                  *((_DWORD *)v46 + 26) = 0;
                  *((_WORD *)v46 + 54) = v35;
                  *((_WORD *)v46 + 55) = 0;
                  *((void *)v46 + 14) = v36;
                  *((_DWORD *)v46 + 30) = 0;
                  *((_WORD *)v46 + 62) = v37;
                  *(_OWORD *)(v46 + 126) = 0u;
                  *(_OWORD *)(v46 + 142) = 0u;
                  *(_OWORD *)(v46 + 158) = 0u;
                  *((_WORD *)v46 + 87) = 0;
                  int v48 = *(char **)buf;
                  __int16 v47 = v86;
                  __int16 v49 = v46;
                  if (v86 == *(char **)buf)
                  {
                    int v14 = v73;
                    uint64_t v3 = v31;
                    unsigned int v40 = v76;
                  }
                  else
                  {
                    int v14 = v73;
                    uint64_t v3 = v31;
                    unsigned int v40 = v76;
                    do
                    {
                      long long v50 = *((_OWORD *)v47 - 11);
                      long long v51 = *((_OWORD *)v47 - 9);
                      *((_OWORD *)v49 - 10) = *((_OWORD *)v47 - 10);
                      *((_OWORD *)v49 - 9) = v51;
                      *((_OWORD *)v49 - 11) = v50;
                      long long v52 = *((_OWORD *)v47 - 8);
                      long long v53 = *((_OWORD *)v47 - 7);
                      long long v54 = *((_OWORD *)v47 - 5);
                      *((_OWORD *)v49 - 6) = *((_OWORD *)v47 - 6);
                      *((_OWORD *)v49 - 5) = v54;
                      *((_OWORD *)v49 - 8) = v52;
                      *((_OWORD *)v49 - 7) = v53;
                      long long v55 = *((_OWORD *)v47 - 4);
                      long long v56 = *((_OWORD *)v47 - 3);
                      long long v57 = *((_OWORD *)v47 - 1);
                      *((_OWORD *)v49 - 2) = *((_OWORD *)v47 - 2);
                      *((_OWORD *)v49 - 1) = v57;
                      *((_OWORD *)v49 - 4) = v55;
                      *((_OWORD *)v49 - 3) = v56;
                      v49 -= 176;
                      v47 -= 176;
                    }
                    while (v47 != v48);
                    __int16 v47 = v48;
                  }
                  int v41 = v77;
                  int v39 = v46 + 176;
                  *(void *)long long buf = v49;
                  BOOL v86 = v46 + 176;
                  v87[0] = &v45[176 * v44];
                  if (v47) {
                    operator delete(v47);
                  }
                }
                else
                {
                  *BOOL v86 = v32;
                  *(_OWORD *)(v38 + 1) = 0u;
                  *(_OWORD *)(v38 + 17) = 0u;
                  *(_OWORD *)(v38 + 33) = 0u;
                  *(_OWORD *)(v38 + 49) = 0u;
                  *(_OWORD *)(v38 + 65) = 0u;
                  *((void *)v38 + 10) = 0;
                  *((_DWORD *)v38 + 22) = v33;
                  *((_DWORD *)v38 + 23) = 0;
                  *((void *)v38 + 12) = v34;
                  *((_DWORD *)v38 + 26) = 0;
                  *((_WORD *)v38 + 54) = v35;
                  *((_WORD *)v38 + 55) = 0;
                  *((void *)v38 + 14) = v36;
                  *((_DWORD *)v38 + 30) = 0;
                  *((_WORD *)v38 + 62) = v37;
                  int v39 = v38 + 176;
                  *(_OWORD *)(v38 + 126) = 0u;
                  *(_OWORD *)(v38 + 142) = 0u;
                  *(_OWORD *)(v38 + 158) = 0u;
                  *((_WORD *)v38 + 87) = 0;
                  uint64_t v3 = v31;
                  unsigned int v40 = v76;
                  int v41 = v77;
                }
                BOOL v86 = v39;
                uint64_t v58 = *(NSObject **)(v3 + 40);
                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                {
                  int v59 = *((unsigned __int16 *)__p + v30);
                  *(_DWORD *)int v88 = 67109632;
                  int v89 = v41;
                  __int16 v90 = 1024;
                  int v91 = v59;
                  __int16 v92 = 1024;
                  unsigned int v93 = v40;
                  _os_log_impl(&dword_22231A000, v58, OS_LOG_TYPE_DEFAULT, "#I Downlink IP filter Rule #%d port=%d, totalNum %d", v88, 0x14u);
                }
                unsigned int v60 = v41 + 1;
                unsigned int v19 = v40 + 1;
                if (v19 >= 0x32) {
                  break;
                }
                if (v60 >= 0x19)
                {
                  int v61 = *(NSObject **)(v3 + 40);
                  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int v88 = 0;
                    _os_log_impl(&dword_22231A000, v61, OS_LOG_TYPE_DEFAULT, "#I Per Msg filter limit reached. send out one msg", v88, 2u);
                  }
                  int v79 = v14;
                  if (v14)
                  {
                    dispatch_retain(v14);
                    dispatch_group_enter(v14);
                  }
                  QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(v3, (uint64_t)buf, &v79);
                  if (v14)
                  {
                    dispatch_group_leave(v14);
                    dispatch_release(v14);
                  }
                  unsigned int v60 = 0;
                  BOOL v86 = *(char **)buf;
                }
                int v77 = v60;
                if (++v30 == v75)
                {
                  int v62 = 0;
                  char v22 = v72;
                  uint64_t v63 = v74;
                  goto LABEL_79;
                }
              }
              int v77 = v60;
              int v71 = *(NSObject **)(v3 + 40);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)int v88 = 0;
                _os_log_impl(&dword_22231A000, v71, OS_LOG_TYPE_DEFAULT, "#I Total Max filter limit reached. Bail out", v88, 2u);
              }
              int v80 = v14;
              uint64_t v63 = v74;
              if (v14)
              {
                dispatch_retain(v14);
                dispatch_group_enter(v14);
              }
              QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(v3, (uint64_t)buf, &v80);
              char v22 = v72;
              if (v14)
              {
                dispatch_group_leave(v14);
                dispatch_release(v14);
              }
              int v62 = 1;
              goto LABEL_79;
            }
            int v62 = 0;
          }
          else
          {
            uint64_t v67 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              int v69 = *(_DWORD *)(v3 + 76);
              int v68 = *(_DWORD *)(v3 + 80);
              unsigned int v70 = *v20;
              *(_DWORD *)int v88 = 67109632;
              int v89 = v68;
              __int16 v90 = 1024;
              int v91 = v69;
              __int16 v92 = 1024;
              unsigned int v93 = v70;
              _os_log_impl(&dword_22231A000, v67, OS_LOG_TYPE_DEFAULT, "#I getOpenPortsExt failed on pdpId %d, fIpFamily %d protocol %d", v88, 0x14u);
            }
            int v62 = 1;
          }
          char v22 = v72;
          uint64_t v63 = v74;
LABEL_79:
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          goto LABEL_80;
        }
        char v65 = v22;
        uint64_t v63 = v74;
      }
      else
      {
        char v65 = v22;
        uint64_t v63 = 0;
      }
      int v66 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v88 = 0;
        _os_log_impl(&dword_22231A000, v66, OS_LOG_TYPE_DEFAULT, "#I fObserver not ready", v88, 2u);
      }
      int v62 = 1;
      char v22 = v65;
      if (v63) {
        goto LABEL_79;
      }
    }
LABEL_80:
    if (__p)
    {
      int v83 = __p;
      operator delete(__p);
    }
    if (v62) {
      goto LABEL_96;
    }
    size_t v20 = (unsigned int *)v94 + v78;
    char v17 = 1;
    uint64_t v21 = 2;
  }
  while ((v22 & 1) == 0);
  std::string __p = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(v3, (uint64_t)buf, (NSObject **)&__p);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
LABEL_96:
  if (*(void *)buf)
  {
    BOOL v86 = *(char **)buf;
    operator delete(*(void **)buf);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
}

void sub_22244B18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (v30)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver33sendDFSAddPowerSaveFilterMsg_syncERKN3dfs3tlv11FilterRulesEN8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  __int16 v5 = *(NSObject **)(v3 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    int v8 = *(_DWORD *)(v3 + 76);
    int v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)long long buf = 67109890;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = qmi::asString();
    uint64_t v9 = "#E AddPowersaveFilters for pdp %d, ipFamily %d Error code = 0x%x (%s)";
    uint64_t v10 = v5;
    uint32_t v11 = 30;
  }
  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    int v13 = *(_DWORD *)(v3 + 76);
    int v12 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)long long buf = 67109376;
    int v17 = v12;
    __int16 v18 = 1024;
    int v19 = v13;
    uint64_t v9 = "#I AddPowersaveFilters successful for pdp %d, ipFamily %d";
    uint64_t v10 = v5;
    uint32_t v11 = 14;
  }
  _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_7:
  int v14 = *(NSObject **)(a1 + 40);
  int v15 = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(v3, 1, &v15);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
}

void sub_22244B3A0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIDownLinkFilterCommandDriver::getLLFilters_sync@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void *)(this + 144);
  uint64_t v3 = *(void *)(this + 152);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    BOOL v6 = (unint64_t *)(a2 + 2);
    do
    {
      if (*(_DWORD *)(v2 + 164) == 3)
      {
        if (v5 >= *v6)
        {
          unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a2) >> 5);
          unint64_t v8 = v7 + 1;
          if (v7 + 1 > 0x199999999999999) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v6 - *a2) >> 5) > v8) {
            unint64_t v8 = 0x999999999999999ALL * ((uint64_t)(*v6 - *a2) >> 5);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v6 - *a2) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
            unint64_t v9 = 0x199999999999999;
          }
          else {
            unint64_t v9 = v8;
          }
          int v15 = v6;
          if (v9) {
            uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataIPFilter>>((uint64_t)v6, v9);
          }
          else {
            uint64_t v10 = 0;
          }
          uint32_t v11 = v10;
          int v12 = &v10[160 * v7];
          uint64_t v13 = (uint64_t)v12;
          int v14 = &v10[160 * v9];
          std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter const&,DataIPFilter*>((uint64_t)v12, v2);
          v13 += 160;
          std::vector<DataIPFilter>::__swap_out_circular_buffer(a2, &v11);
          unint64_t v5 = a2[1];
          this = std::__split_buffer<DataIPFilter>::~__split_buffer((uint64_t)&v11);
        }
        else
        {
          this = std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter const&,DataIPFilter*>(v5, v2);
          v5 += 160;
          a2[1] = v5;
        }
        a2[1] = v5;
      }
      v2 += 200;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_22244B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t QMIDownLinkFilterCommandDriver::addLLFilter_sync(int64x2_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  *(_OWORD *)unsigned int v76 = 0u;
  *(_OWORD *)int v73 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v71 = 0u;
  long long v72 = 0u;
  long long v6 = a2[1];
  long long v69 = *a2;
  long long v70 = v6;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)v71, (uint64_t)(a2 + 2));
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)&__p[1], (uint64_t)a2 + 88);
  *(void *)&long long v78 = *((void *)a2 + 18);
  *(void *)((char *)&v78 + 6) = *(void *)((char *)a2 + 150);
  if (DataIPFilter::empty((DataIPFilter *)&v69))
  {
    unint64_t v7 = a1[2].i64[1];
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    char v9 = 0;
    if (v8)
    {
      *(_WORD *)long long buf = 0;
      uint64_t v10 = "#E add ll filter: empty";
LABEL_14:
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
      char v9 = 0;
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  if (!HIDWORD(v70))
  {
    unint64_t v7 = a1[2].i64[1];
    BOOL v12 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    char v9 = 0;
    if (v12)
    {
      *(_WORD *)long long buf = 0;
      uint64_t v10 = "#E add ll filter: empty IP protocol";
      goto LABEL_14;
    }
LABEL_15:
    std::function<void ()(BOOL)>::operator()(a3, v9);
LABEL_16:
    uint64_t v13 = 1;
    goto LABEL_17;
  }
  if (QMIDownLinkFilterCommandDriver::ourFilter_sync((QMIDownLinkFilterCommandDriver *)a1, (const DataIPFilter *)&v69))
  {
    if (*((void *)&v69 + 1) && BYTE1(v70) && (_BYTE)v70)
    {
      uint32_t v11 = a1[2].i64[1];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I add ll filter: IMS filter for dedicated bearer, ignoring", buf, 2u);
      }
      char v9 = 1;
      goto LABEL_15;
    }
    uint64_t v16 = a1[9].i64[0];
    unsigned __int16 v17 = a1[10].i16[4] + 1;
    a1[10].i16[4] = v17;
    unsigned __int16 v55 = v17;
    int v18 = v17;
    LODWORD(v69) = v17;
    uint64_t v19 = a1[9].i64[1];
    if (v16 != v19)
    {
      char v20 = 0;
      while (1)
      {
        while (!DataIPFilter::equivalent((DataIPFilter *)v16, (const DataIPFilter *)&v69, 0))
        {
LABEL_33:
          v16 += 200;
          if (v16 == v19)
          {
            if (v20) {
              goto LABEL_53;
            }
            goto LABEL_39;
          }
        }
        unsigned int v21 = *(_DWORD *)(v16 + 164);
        if (v21 <= 5)
        {
          if (((1 << v21) & 0x27) == 0)
          {
            uint64_t v24 = a1[2].i64[1];
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I add ll filter: we already have the filter", buf, 2u);
            }
            uint64_t v13 = 1;
            std::function<void ()(BOOL)>::operator()(a3, 1);
            goto LABEL_17;
          }
        }
        else if (v21 != 255)
        {
          goto LABEL_33;
        }
        *(void *)(v16 + 160) = 0x400000000;
        QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v16, 0);
        std::function<void ()(BOOL)>::operator=((void *)(v16 + 168), a3);
        *(_DWORD *)uint64_t v16 = v18;
        v16 += 200;
        char v20 = 1;
        if (v16 == v19) {
          goto LABEL_53;
        }
      }
    }
LABEL_39:
    uint64_t v93 = 0x400000000;
    long long v95 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    *(_OWORD *)int v88 = 0u;
    *(_OWORD *)int v85 = 0u;
    long long v86 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v84 = 0u;
    int v94 = &unk_26D4C8F78;
    uint64_t v96 = &v94;
    std::function<void ()(BOOL)>::operator=(&v94, a3);
    *(_OWORD *)long long buf = v69;
    long long v84 = v70;
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)v85, (std::string *)v71);
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)&v88[1], (std::string *)&__p[1]);
    *(void *)&long long v92 = v78;
    *(void *)((char *)&v92 + 6) = *(void *)((char *)&v78 + 6);
    unint64_t v22 = a1[9].u64[1];
    if (v22 >= a1[10].i64[0])
    {
      uint64_t v23 = std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__push_back_slow_path<QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&>(a1 + 9, (uint64_t)buf);
    }
    else
    {
      std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(a1[9].i64[1], (uint64_t)buf);
      uint64_t v23 = v22 + 200;
      a1[9].i64[1] = v22 + 200;
    }
    a1[9].i64[1] = v23;
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](&v94);
    if (BYTE8(v91) && (_BYTE)v90 && SHIBYTE(v89) < 0) {
      operator delete(v88[1]);
    }
    if (LOBYTE(v88[0]) && BYTE8(v86) && SBYTE7(v86) < 0) {
      operator delete(v85[0]);
    }
LABEL_53:
    *(_OWORD *)uint64_t v67 = 0u;
    long long v68 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v67);
    unsigned int v25 = (const void **)v67[1];
    if (v67[1] == (void *)v68)
    {
      unsigned __int16 v26 = v55;
    }
    else
    {
      unsigned __int16 v26 = v55;
      while (*((unsigned char *)*v25 + 8) != 1)
      {
        if (++v25 == (const void **)v68) {
          goto LABEL_62;
        }
      }
    }
    if (v25 == (const void **)v68) {
LABEL_62:
    }
      operator new();
    if (!v27) {
      __cxa_bad_cast();
    }
    unint64_t v28 = (char *)(v27 + 2);
    unint64_t v29 = v27[4];
    uint64_t v30 = (unsigned __int16 *)v27[3];
    if ((unint64_t)v30 >= v29)
    {
      char v32 = *(unsigned __int16 **)v28;
      uint64_t v33 = (uint64_t)v30 - *(void *)v28;
      if (v33 <= -3) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v33 >> 1;
      unint64_t v35 = v29 - (void)v32;
      if (v35 <= (v33 >> 1) + 1) {
        unint64_t v36 = v34 + 1;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v37 = v36;
      }
      if (v37)
      {
        uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v28 + 16), v37);
        char v32 = *(unsigned __int16 **)v28;
        uint64_t v30 = (unsigned __int16 *)*((void *)v28 + 1);
      }
      else
      {
        uint64_t v38 = 0;
      }
      int v39 = &v38[2 * v34];
      unsigned int v40 = &v38[2 * v37];
      *(_WORD *)int v39 = v26;
      uint64_t v31 = v39 + 2;
      while (v30 != v32)
      {
        __int16 v41 = *--v30;
        *((_WORD *)v39 - 1) = v41;
        v39 -= 2;
      }
      *(void *)unint64_t v28 = v39;
      *((void *)v28 + 1) = v31;
      *((void *)v28 + 2) = v40;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *uint64_t v30 = v26;
      uint64_t v31 = v30 + 1;
    }
    *((void *)v28 + 1) = v31;
    if (DWORD2(v70) == 6)
    {
      if (LOBYTE(__p[0]) && LOBYTE(v73[1]))
      {
        if (LOBYTE(v73[2])) {
          __int16 v44 = HIWORD(v73[1]);
        }
        else {
          __int16 v44 = 1;
        }
        *(_WORD *)long long buf = v26;
        *(_WORD *)&buf[2] = HIWORD(v73[0]);
        *(_WORD *)&uint8_t buf[4] = v44;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_3>((uint64_t)v67, (int *)buf);
      }
      if (BYTE8(v77) && LOBYTE(v76[3]))
      {
        if ((_BYTE)v77) {
          __int16 v45 = HIWORD(v76[3]);
        }
        else {
          __int16 v45 = 1;
        }
        *(_WORD *)long long buf = v26;
        *(_WORD *)&buf[2] = HIWORD(v76[2]);
        *(_WORD *)&uint8_t buf[4] = v45;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_4>((uint64_t)v67, (int *)buf);
      }
    }
    else
    {
      if (DWORD2(v70) != 17)
      {
        __int16 v49 = a1[2].i64[1];
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          long long v50 = "#E add ll filter: invalid protocol";
LABEL_140:
          _os_log_impl(&dword_22231A000, v49, OS_LOG_TYPE_DEFAULT, v50, buf, 2u);
        }
LABEL_141:
        std::function<void ()(BOOL)>::operator()(a3, 0);
LABEL_173:
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v67);
        goto LABEL_16;
      }
      if (LOBYTE(__p[0]) && LOBYTE(v73[1]))
      {
        if (LOBYTE(v73[2])) {
          __int16 v42 = HIWORD(v73[1]);
        }
        else {
          __int16 v42 = 1;
        }
        *(_WORD *)long long buf = v26;
        *(_WORD *)&buf[2] = HIWORD(v73[0]);
        *(_WORD *)&uint8_t buf[4] = v42;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_1>((uint64_t)v67, (int *)buf);
      }
      if (BYTE8(v77) && LOBYTE(v76[3]))
      {
        if ((_BYTE)v77) {
          __int16 v43 = HIWORD(v76[3]);
        }
        else {
          __int16 v43 = 1;
        }
        *(_WORD *)long long buf = v26;
        *(_WORD *)&buf[2] = HIWORD(v76[2]);
        *(_WORD *)&uint8_t buf[4] = v43;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_2>((uint64_t)v67, (int *)buf);
      }
    }
    if (HIDWORD(v70) == 41)
    {
      if (LOBYTE(__p[0]) && BYTE8(v72))
      {
        memset(&v79[2], 0, 18);
        *(_WORD *)int v79 = v26;
        memset(buf, 0, sizeof(buf));
        *(void *)&long long v84 = 0;
        MEMORY[0x223C99180](buf, v71);
        v79[18] = 0x80;
        if (!LOBYTE(__p[0])) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (BYTE1(v73[0])) {
          v79[18] = v73[0];
        }
        CSIPacketAddress::toIPv6((CSIPacketAddress *)buf, &v79[2]);
        *(_OWORD *)v82 = *(_OWORD *)v79;
        *(_DWORD *)&v82[15] = *(_DWORD *)&v79[15];
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_8>((uint64_t)v67, (long long *)v82);
      }
      if (BYTE8(v77) && LOBYTE(v76[0]))
      {
        memset(&v79[2], 0, 18);
        *(_WORD *)int v79 = v26;
        memset(buf, 0, sizeof(buf));
        *(void *)&long long v84 = 0;
        MEMORY[0x223C99180](buf, &__p[1]);
        v79[18] = 0x80;
        if (!BYTE8(v77)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (BYTE1(v76[2])) {
          v79[18] = v76[2];
        }
        CSIPacketAddress::toIPv6((CSIPacketAddress *)buf, &v79[2]);
        *(_OWORD *)v82 = *(_OWORD *)v79;
        *(_DWORD *)&v82[15] = *(_DWORD *)&v79[15];
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_9>((uint64_t)v67, (long long *)v82);
      }
      if (BYTE1(v78))
      {
        DataIPFilter::DataIPFilter((DataIPFilter *)buf, (const DataIPFilter *)&v69);
        LOWORD(v93) = v26;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_10>((uint64_t)v67, (uint64_t)buf);
        if (BYTE8(v91) && (_BYTE)v90 && SHIBYTE(v89) < 0) {
          operator delete(v88[1]);
        }
        if (LOBYTE(v88[0]) && BYTE8(v86) && SBYTE7(v86) < 0) {
          operator delete(v85[0]);
        }
      }
      if (!BYTE8(v78)) {
        goto LABEL_161;
      }
      DataIPFilter::DataIPFilter((DataIPFilter *)buf, (const DataIPFilter *)&v69);
      LOWORD(v93) = v26;
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_11>((uint64_t)v67, (uint64_t)buf);
      goto LABEL_153;
    }
    if (HIDWORD(v70) == 4)
    {
      if (LOBYTE(__p[0]) && BYTE8(v72))
      {
        memset(buf, 0, sizeof(buf));
        *(void *)&long long v84 = 0;
        MEMORY[0x223C99180](buf, v71);
        int v46 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)buf);
        if (!LOBYTE(__p[0])) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        int v47 = v46;
        if (BYTE1(v73[0]))
        {
          CSIPacketAddress::applyMaskPrefix((CSIPacketAddress *)buf);
          CSIPacketAddress::ipv4PrefixLenToMaskAddr((uint64_t *)v79, (CSIPacketAddress *)buf);
          int v48 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)v79);
        }
        else
        {
          int v48 = -1;
        }
        *(_DWORD *)int v79 = v26;
        *(_DWORD *)&v79[4] = v47;
        *(_DWORD *)&v79[8] = v48;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_5>((uint64_t)v67, (uint64_t *)v79);
      }
      if (BYTE8(v77) && LOBYTE(v76[0]))
      {
        memset(buf, 0, sizeof(buf));
        *(void *)&long long v84 = 0;
        MEMORY[0x223C99180](buf, &__p[1]);
        int v51 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)buf);
        if (!BYTE8(v77)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        int v52 = v51;
        if (BYTE1(v76[2]))
        {
          CSIPacketAddress::applyMaskPrefix((CSIPacketAddress *)buf);
          CSIPacketAddress::ipv4PrefixLenToMaskAddr((uint64_t *)v79, (CSIPacketAddress *)buf);
          int v53 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)v79);
        }
        else
        {
          int v53 = -1;
        }
        *(_DWORD *)int v79 = v26;
        *(_DWORD *)&v79[4] = v52;
        *(_DWORD *)&v79[8] = v53;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_6>((uint64_t)v67, (uint64_t *)v79);
      }
      if (!BYTE1(v78)) {
        goto LABEL_161;
      }
      DataIPFilter::DataIPFilter((DataIPFilter *)buf, (const DataIPFilter *)&v69);
      LOWORD(v93) = v26;
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_7>((uint64_t)v67, (uint64_t)buf);
LABEL_153:
      if (BYTE8(v91) && (_BYTE)v90 && SHIBYTE(v89) < 0) {
        operator delete(v88[1]);
      }
      if (LOBYTE(v88[0]) && BYTE8(v86) && SBYTE7(v86) < 0) {
        operator delete(v85[0]);
      }
LABEL_161:
      *(void *)int v79 = (char *)a1 + 88;
      *(void *)&v79[8] = QMIServiceMsg::create();
      *(_DWORD *)&v79[16] = 25000;
      uint64_t v80 = 0;
      long long aBlock = 0;
      v56[0] = MEMORY[0x263EF8330];
      v56[1] = 1174405120;
      long long v57 = v69;
      unint64_t v56[2] = ___ZN30QMIDownLinkFilterCommandDriver16addLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke;
      v56[3] = &__block_descriptor_tmp_29_8;
      v56[4] = a1;
      long long v58 = v70;
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v59, (uint64_t)v71);
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v62, (uint64_t)&__p[1]);
      v65[0] = v78;
      *(void *)((char *)v65 + 6) = *(void *)((char *)&v78 + 6);
      unsigned __int16 v66 = v26;
      *(void *)long long buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&long long v84 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs12AddLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      *((void *)&v84 + 1) = &unk_26460DAD8;
      v85[0] = v56;
      long long v54 = _Block_copy(buf);
      long long aBlock = v54;
      if (*(void *)&v79[8])
      {
        qmi::Client::send();
        long long v54 = aBlock;
      }
      if (v54) {
        _Block_release(v54);
      }
      if (v64 && v63 && SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (v61 && v60 && SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      goto LABEL_173;
    }
    __int16 v49 = a1[2].i64[1];
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      long long v50 = "#E add ll filter: invalid IP protocol";
      goto LABEL_140;
    }
    goto LABEL_141;
  }
  int v15 = a1[2].i64[1];
  uint64_t v13 = 0;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I add ll filter: assume it belongs to other client", buf, 2u);
    uint64_t v13 = 0;
  }
LABEL_17:
  if (BYTE8(v77) && LOBYTE(v76[0]) && SHIBYTE(v75) < 0) {
    operator delete(__p[1]);
  }
  if (LOBYTE(__p[0]) && BYTE8(v72) && SBYTE7(v72) < 0) {
    operator delete(v71[0]);
  }
  return v13;
}

void sub_22244C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a37);
  if (a64) {
    BOOL v65 = a61 == 0;
  }
  else {
    BOOL v65 = 1;
  }
  if (!v65 && a60 < 0) {
    operator delete(__p);
  }
  if (a54 && a51 && a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void DataIPFilter::DataIPFilter(DataIPFilter *this, const DataIPFilter *a2)
{
  long long v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), (uint64_t)a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 88), (uint64_t)a2 + 88);
  uint64_t v5 = *((void *)a2 + 18);
  *(void *)((char *)this + 150) = *(void *)((char *)a2 + 150);
  *((void *)this + 18) = v5;
}

void sub_22244C45C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL DataIPFilter::empty(DataIPFilter *this)
{
  BOOL result = 0;
  if (!*((_DWORD *)this + 6) && !*((_DWORD *)this + 7) && !*((unsigned char *)this + 145) && !*((unsigned char *)this + 152))
  {
    if (!*((unsigned char *)this + 80)
      || (!*((unsigned char *)this + 56)
       || (*((char *)this + 55) < 0 ? (uint64_t v2 = *((void *)this + 5)) : (uint64_t v2 = *((unsigned __int8 *)this + 55)), !v2))
      && (!*((unsigned char *)this + 68) || !*((_WORD *)this + 33)))
    {
      if (!*((unsigned char *)this + 136)) {
        return 1;
      }
      if (!*((unsigned char *)this + 112)
        || (*((char *)this + 111) < 0 ? (uint64_t v3 = *((void *)this + 12)) : (uint64_t v3 = *((unsigned __int8 *)this + 111)), !v3))
      {
        if (!*((unsigned char *)this + 124) || !*((_WORD *)this + 61)) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t QMIDownLinkFilterCommandDriver::ourFilter_sync(QMIDownLinkFilterCommandDriver *this, const DataIPFilter *a2)
{
  if (!*((void *)this + 13)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(QMIDownLinkFilterCommandDriver *))(*(void *)this + 48))(this);
  if (!result) {
    return result;
  }
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 4)
  {
    int v6 = 1;
    return *((_DWORD *)this + 19) == v6;
  }
  if (v5 != 41) {
    return 0;
  }
  int v6 = 2;
  return *((_DWORD *)this + 19) == v6;
}

BOOL DataIPFilter::equivalent(DataIPFilter *this, const DataIPFilter *a2, int a3)
{
  if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6) || *((_DWORD *)this + 7) != *((_DWORD *)a2 + 7)) {
    return 0;
  }
  if (*((unsigned char *)this + 80))
  {
    if (!*((unsigned char *)a2 + 80) || !DataIPFilterEndpoint::operator==((uint64_t)this + 32, (uint64_t)a2 + 32)) {
      return 0;
    }
  }
  else if (*((unsigned char *)a2 + 80))
  {
    return 0;
  }
  if (*((unsigned char *)this + 136))
  {
    if (!*((unsigned char *)a2 + 136) || !DataIPFilterEndpoint::operator==((uint64_t)this + 88, (uint64_t)a2 + 88)) {
      return 0;
    }
  }
  else if (*((unsigned char *)a2 + 136))
  {
    return 0;
  }
  if (*((unsigned char *)this + 145))
  {
    if (!*((unsigned char *)a2 + 145) || *((unsigned __int8 *)this + 144) != *((unsigned __int8 *)a2 + 144)) {
      return 0;
    }
  }
  else if (*((unsigned char *)a2 + 145))
  {
    return 0;
  }
  if (*((unsigned char *)this + 147))
  {
    if (!*((unsigned char *)a2 + 147) || *((unsigned __int8 *)this + 146) != *((unsigned __int8 *)a2 + 146)) {
      return 0;
    }
  }
  else if (*((unsigned char *)a2 + 147))
  {
    return 0;
  }
  BOOL result = *((unsigned char *)a2 + 152) == 0;
  if (*((unsigned char *)this + 152))
  {
    if (!*((unsigned char *)a2 + 152)) {
      return 0;
    }
    int v7 = *((_DWORD *)this + 37);
    int v8 = *((_DWORD *)a2 + 37);
    BOOL result = v7 == v8;
    if (v7 != v8 || (a3 & 1) == 0) {
      return result;
    }
    goto LABEL_30;
  }
  if (!*((unsigned char *)a2 + 152) && a3)
  {
LABEL_30:
    if (*((unsigned char *)this + 157))
    {
      if (*((unsigned char *)a2 + 157) && *((unsigned __int8 *)this + 156) == *((unsigned __int8 *)a2 + 156)) {
        return 1;
      }
    }
    else if (!*((unsigned char *)a2 + 157))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void *QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(QMIDownLinkFilterCommandDriver::DataIPFilterInfo *this, char a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)((char *)this + 168);
  std::function<void ()(BOOL)>::operator()((uint64_t)this + 168, a2);
  v4[0] = &unk_26D4C8EF8;
  v4[3] = v4;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v4, v2);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v4);
}

void *std::function<void ()(BOOL)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void QMIDownLinkFilterCommandDriver::DataIPFilterInfo::~DataIPFilterInfo(QMIDownLinkFilterCommandDriver::DataIPFilterInfo *this)
{
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_1>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 23)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (char **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v6) >> 1);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x2AAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v6) >> 1);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1555555555555555) {
      unint64_t v14 = 0x2AAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v5 + 4), v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = &v15[6 * v11];
    unsigned __int16 v17 = &v15[6 * v14];
    int v18 = *a2;
    *((_WORD *)v16 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)uint64_t v16 = v18;
    uint64_t v10 = v16 + 6;
    char v20 = *v6;
    uint64_t v19 = v6[1];
    if (v19 != *v6)
    {
      do
      {
        int v21 = *(_DWORD *)(v19 - 6);
        v19 -= 6;
        __int16 v22 = *((_WORD *)v19 + 2);
        *(_DWORD *)(v16 - 6) = v21;
        v16 -= 6;
        *((_WORD *)v16 + 2) = v22;
      }
      while (v19 != v20);
      uint64_t v19 = *v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    int v9 = *a2;
    *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)unint64_t v8 = v9;
    uint64_t v10 = (char *)(v8 + 6);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_2>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 24)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (char **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v6) >> 1);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x2AAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v6) >> 1);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1555555555555555) {
      unint64_t v14 = 0x2AAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v5 + 4), v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = &v15[6 * v11];
    unsigned __int16 v17 = &v15[6 * v14];
    int v18 = *a2;
    *((_WORD *)v16 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)uint64_t v16 = v18;
    uint64_t v10 = v16 + 6;
    char v20 = *v6;
    uint64_t v19 = v6[1];
    if (v19 != *v6)
    {
      do
      {
        int v21 = *(_DWORD *)(v19 - 6);
        v19 -= 6;
        __int16 v22 = *((_WORD *)v19 + 2);
        *(_DWORD *)(v16 - 6) = v21;
        v16 -= 6;
        *((_WORD *)v16 + 2) = v22;
      }
      while (v19 != v20);
      uint64_t v19 = *v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    int v9 = *a2;
    *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)unint64_t v8 = v9;
    uint64_t v10 = (char *)(v8 + 6);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_3>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 25)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (char **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v6) >> 1);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x2AAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v6) >> 1);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1555555555555555) {
      unint64_t v14 = 0x2AAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v5 + 4), v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = &v15[6 * v11];
    unsigned __int16 v17 = &v15[6 * v14];
    int v18 = *a2;
    *((_WORD *)v16 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)uint64_t v16 = v18;
    uint64_t v10 = v16 + 6;
    char v20 = *v6;
    uint64_t v19 = v6[1];
    if (v19 != *v6)
    {
      do
      {
        int v21 = *(_DWORD *)(v19 - 6);
        v19 -= 6;
        __int16 v22 = *((_WORD *)v19 + 2);
        *(_DWORD *)(v16 - 6) = v21;
        v16 -= 6;
        *((_WORD *)v16 + 2) = v22;
      }
      while (v19 != v20);
      uint64_t v19 = *v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    int v9 = *a2;
    *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)unint64_t v8 = v9;
    uint64_t v10 = (char *)(v8 + 6);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_4>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 26)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (char **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v6) >> 1);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x2AAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v6) >> 1);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1555555555555555) {
      unint64_t v14 = 0x2AAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v5 + 4), v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = &v15[6 * v11];
    unsigned __int16 v17 = &v15[6 * v14];
    int v18 = *a2;
    *((_WORD *)v16 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)uint64_t v16 = v18;
    uint64_t v10 = v16 + 6;
    char v20 = *v6;
    uint64_t v19 = v6[1];
    if (v19 != *v6)
    {
      do
      {
        int v21 = *(_DWORD *)(v19 - 6);
        v19 -= 6;
        __int16 v22 = *((_WORD *)v19 + 2);
        *(_DWORD *)(v16 - 6) = v21;
        v16 -= 6;
        *((_WORD *)v16 + 2) = v22;
      }
      while (v19 != v20);
      uint64_t v19 = *v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    int v9 = *a2;
    *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)unint64_t v8 = v9;
    uint64_t v10 = (char *)(v8 + 6);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_5>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 16)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (char **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v6) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x1555555555555555) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v6) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x1555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::CurrentDataSystem>>((uint64_t)(v5 + 4), v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = &v15[12 * v11];
    unsigned __int16 v17 = &v15[12 * v14];
    uint64_t v18 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v16 = v18;
    uint64_t v10 = v16 + 12;
    char v20 = *v6;
    uint64_t v19 = v6[1];
    if (v19 != *v6)
    {
      do
      {
        uint64_t v21 = *(void *)(v19 - 12);
        v19 -= 12;
        int v22 = *((_DWORD *)v19 + 2);
        *(void *)(v16 - 12) = v21;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v22;
      }
      while (v19 != v20);
      uint64_t v19 = *v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    uint64_t v9 = *a2;
    *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v8 = v9;
    uint64_t v10 = (char *)(v8 + 12);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_6>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 17)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (char **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v6) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x1555555555555555) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v6) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x1555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::CurrentDataSystem>>((uint64_t)(v5 + 4), v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = &v15[12 * v11];
    unsigned __int16 v17 = &v15[12 * v14];
    uint64_t v18 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v16 = v18;
    uint64_t v10 = v16 + 12;
    char v20 = *v6;
    uint64_t v19 = v6[1];
    if (v19 != *v6)
    {
      do
      {
        uint64_t v21 = *(void *)(v19 - 12);
        v19 -= 12;
        int v22 = *((_DWORD *)v19 + 2);
        *(void *)(v16 - 12) = v21;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v22;
      }
      while (v19 != v20);
      uint64_t v19 = *v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    uint64_t v9 = *a2;
    *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v8 = v9;
    uint64_t v10 = (char *)(v8 + 12);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_7>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 18)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (void **)(v5 + 2);
  if (!*(unsigned char *)(a2 + 145)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  int v7 = *(unsigned __int16 *)(a2 + 160);
  int v8 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned char *)(a2 + 147)) {
    int v9 = *(unsigned __int8 *)(a2 + 146) << 24;
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = v5[4];
  unint64_t v11 = (int *)v5[3];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = ((char *)v11 - (unsigned char *)*v6) >> 2;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v10 - (void)*v6;
    uint64_t v15 = v14 >> 1;
    if (v14 >> 1 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unsigned __int16 v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v5 + 4), v16);
    }
    else {
      unsigned __int16 v17 = 0;
    }
    uint64_t v18 = (int *)&v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *uint64_t v18 = v7 | (v8 << 16) | v9;
    unint64_t v12 = v18 + 1;
    uint64_t v21 = (char *)*v6;
    char v20 = (char *)v6[1];
    if (v20 != *v6)
    {
      do
      {
        int v22 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--uint64_t v18 = v22;
      }
      while (v20 != v21);
      char v20 = (char *)*v6;
    }
    *int v6 = v18;
    v6[1] = v12;
    v6[2] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unint64_t v11 = v7 | (v8 << 16) | v9;
    unint64_t v12 = v11 + 1;
  }
  v6[1] = v12;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_8>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 19)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (void **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)*v6) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*v6) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x666666666666666) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>((uint64_t)(v5 + 4), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[20 * v11];
    unsigned __int16 v17 = &v15[20 * v14];
    long long v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v16 = v18;
    unint64_t v10 = v16 + 20;
    char v20 = (char *)*v6;
    uint64_t v19 = (char *)v6[1];
    if (v19 != *v6)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 20);
        *(_DWORD *)(v16 - 5) = *(_DWORD *)(v19 - 5);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v9 = *a2;
    *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v8 = v9;
    unint64_t v10 = (char *)(v8 + 20);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_9>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 20)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (void **)(v5 + 2);
  unint64_t v7 = v5[4];
  unint64_t v8 = v5[3];
  if (v8 >= v7)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)*v6) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*v6) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x666666666666666) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>((uint64_t)(v5 + 4), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[20 * v11];
    unsigned __int16 v17 = &v15[20 * v14];
    long long v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v16 = v18;
    unint64_t v10 = v16 + 20;
    char v20 = (char *)*v6;
    uint64_t v19 = (char *)v6[1];
    if (v19 != *v6)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 20);
        *(_DWORD *)(v16 - 5) = *(_DWORD *)(v19 - 5);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*v6;
    }
    *int v6 = v16;
    v6[1] = v10;
    v6[2] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v9 = *a2;
    *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v8 = v9;
    unint64_t v10 = (char *)(v8 + 20);
  }
  v6[1] = v10;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_10>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 21)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (void **)(v5 + 2);
  if (!*(unsigned char *)(a2 + 145)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  int v7 = *(unsigned __int16 *)(a2 + 160);
  int v8 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned char *)(a2 + 147)) {
    int v9 = *(unsigned __int8 *)(a2 + 146) << 24;
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = v5[4];
  unint64_t v11 = (int *)v5[3];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = ((char *)v11 - (unsigned char *)*v6) >> 2;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v10 - (void)*v6;
    uint64_t v15 = v14 >> 1;
    if (v14 >> 1 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unsigned __int16 v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v5 + 4), v16);
    }
    else {
      unsigned __int16 v17 = 0;
    }
    long long v18 = (int *)&v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *long long v18 = v7 | (v8 << 16) | v9;
    unint64_t v12 = v18 + 1;
    long long v21 = (char *)*v6;
    char v20 = (char *)v6[1];
    if (v20 != *v6)
    {
      do
      {
        int v22 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--long long v18 = v22;
      }
      while (v20 != v21);
      char v20 = (char *)*v6;
    }
    *int v6 = v18;
    v6[1] = v12;
    v6[2] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unint64_t v11 = v7 | (v8 << 16) | v9;
    unint64_t v12 = v11 + 1;
  }
  v6[1] = v12;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_11>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void ***)(a1 + 8);
  long long v4 = *(const void ***)(a1 + 16);
  if (v3 != v4)
  {
    while (*((unsigned char *)*v3 + 8) != 22)
    {
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = (void **)(v5 + 2);
  if (!*(unsigned char *)(a2 + 152)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v7 = *(unsigned __int16 *)(a2 + 160);
  uint64_t v8 = *(unsigned int *)(a2 + 148);
  unint64_t v9 = v5[4];
  unint64_t v10 = (uint64_t *)v5[3];
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = ((char *)v10 - (unsigned char *)*v6) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v9 - (void)*v6;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v5 + 4), v15);
    }
    else {
      unint64_t v16 = 0;
    }
    unsigned __int16 v17 = &v16[8 * v12];
    long long v18 = &v16[8 * v15];
    *(void *)unsigned __int16 v17 = v7 | (v8 << 32);
    unint64_t v11 = v17 + 8;
    char v20 = (char *)*v6;
    uint64_t v19 = (char *)v6[1];
    if (v19 != *v6)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*v6;
    }
    *int v6 = v17;
    v6[1] = v11;
    v6[2] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v10 = v7 | (v8 << 32);
    unint64_t v11 = v10 + 1;
  }
  v6[1] = v11;
}

void ___ZN30QMIDownLinkFilterCommandDriver16addLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *((_DWORD *)a2 + 1);
  int v6 = *(NSObject **)(v4 + 40);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      int v9 = *(_DWORD *)(v4 + 76);
      int v8 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)uint64_t v38 = 1024;
      *(_DWORD *)&void v38[2] = v9;
      *(_WORD *)&v38[6] = 1024;
      *(_DWORD *)&v38[8] = v5;
      *(_WORD *)&v38[12] = 2080;
      *(void *)&v38[14] = qmi::asString();
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E add ll filter: for pdp %d, ipFamily %d Error code = 0x%x (%s)", buf, 0x1Eu);
    }
    unint64_t v10 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 144);
    for (uint64_t i = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 152);
          v10 != i;
          unint64_t v10 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v10 + 200))
    {
      if (DataIPFilter::equivalent(v10, (const DataIPFilter *)(v3 + 40), 0))
      {
        *((void *)v10 + 20) = 0x100000000;
        QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v10, 0);
      }
    }
  }
  else
  {
    if (v7)
    {
      int v13 = *(_DWORD *)(v4 + 76);
      int v12 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v38 = 1024;
      *(_DWORD *)&void v38[2] = v13;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I AddLLFilters successful for pdp %d, ipFamily %d", buf, 0xEu);
    }
    char v32 = 0;
    *(void *)long long buf = v4;
    *(_OWORD *)uint64_t v38 = *(_OWORD *)(v3 + 40);
    *(_OWORD *)&v38[16] = *(_OWORD *)(v3 + 56);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v39, v3 + 72);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v42, v3 + 128);
    v45[0] = *(void *)(v3 + 184);
    *(void *)((char *)v45 + 6) = *(void *)(v3 + 190);
    unsigned __int16 v46 = *(_WORD *)(v3 + 200);
    int v47 = &v32;
    uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(v2);
    unint64_t v16 = TlvValue;
    if (TlvValue)
    {
      int v17 = v15;
      uint64_t v35 = 0;
      unint64_t v36 = TlvValue;
      std::string __p = 0;
      uint64_t v34 = 0;
      tlv::parseV<dfs::tlv::LLFilterHandlesList>(&v36, v15, (uint64_t *)&__p);
      long long v18 = v36;
      uint64_t v19 = __p;
      if (v36)
      {
        char v20 = v34;
        if (__p != v34)
        {
          unint64_t v29 = v36;
          uint64_t v30 = v2;
          uint64_t v31 = v3;
          uint64_t v21 = *(void *)buf;
          do
          {
            if (*(unsigned __int16 *)v19 == v46)
            {
              uint64_t v23 = *(DataIPFilter **)(v21 + 144);
              int v22 = *(DataIPFilter **)(v21 + 152);
              while (v23 != v22)
              {
                if (DataIPFilter::equivalent(v23, (const DataIPFilter *)v38, 0))
                {
                  *int v47 = 1;
                  if (*((_DWORD *)v23 + 41) != 3) {
                    *((_DWORD *)v23 + 41) = 4;
                  }
                  *((_DWORD *)v23 + 40) = v19[1];
                }
                uint64_t v23 = (DataIPFilter *)((char *)v23 + 200);
              }
            }
            v19 += 2;
          }
          while (v19 != v20);
          uint64_t v19 = __p;
          uint64_t v2 = v30;
          uint64_t v3 = v31;
          long long v18 = v29;
        }
      }
      if (v19)
      {
        uint64_t v34 = v19;
        operator delete(v19);
      }
      if (!v18) {
        ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v2, 16, v16, v17);
      }
    }
    if (v44 && v43 && SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (v41 && v40 && SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (!v32)
    {
      uint64_t v24 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = *(_DWORD *)(v4 + 76);
        int v25 = *(_DWORD *)(v4 + 80);
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v25;
        *(_WORD *)uint64_t v38 = 1024;
        *(_DWORD *)&void v38[2] = v26;
        _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#E add ll filter: for pdp %d, ipFamily %d list has no filter id", buf, 0xEu);
      }
      unint64_t v27 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 144);
      for (j = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 152);
            v27 != j;
            unint64_t v27 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v27 + 200))
      {
        if (DataIPFilter::equivalent(v27, (const DataIPFilter *)(v3 + 40), 0))
        {
          *((void *)v27 + 20) = 0x100000000;
          QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v27, 0);
        }
      }
    }
  }
}

void sub_22244E97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a33 && a30 && a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *__copy_helper_block_e8_40c18_ZTS12DataIPFilter(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 72), a2 + 72);
  BOOL result = std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 128), a2 + 128);
  uint64_t v6 = *(void *)(a2 + 184);
  *(void *)(a1 + 190) = *(void *)(a2 + 190);
  *(void *)(a1 + 184) = v6;
  return result;
}

void sub_22244EA58(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_40c18_ZTS12DataIPFilter(uint64_t a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 128);

  return std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 72);
}

void QMIDownLinkFilterCommandDriver::deleteLLFilter_sync(QMIDownLinkFilterCommandDriver *a1, long long *a2, uint64_t a3)
{
  void v65[2] = *MEMORY[0x263EF8340];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  *(_OWORD *)std::string v42 = 0u;
  long long v43 = 0u;
  long long v6 = a2[1];
  long long v40 = *a2;
  long long v41 = v6;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)v42, (uint64_t)(a2 + 2));
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)&v45 + 8), (uint64_t)a2 + 88);
  *(void *)&long long v49 = *((void *)a2 + 18);
  *(void *)((char *)&v49 + 6) = *(void *)((char *)a2 + 150);
  if (DataIPFilter::empty((DataIPFilter *)&v40))
  {
    BOOL v7 = *((void *)a1 + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      int v8 = "#E del ll filter: empty";
LABEL_20:
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 2u);
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  if (!HIDWORD(v41))
  {
    BOOL v7 = *((void *)a1 + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      int v8 = "#E del ll filter: empty IP protocol";
      goto LABEL_20;
    }
LABEL_21:
    std::function<void ()(BOOL)>::operator()(a3, 0);
    goto LABEL_22;
  }
  if ((QMIDownLinkFilterCommandDriver::ourFilter_sync(a1, (const DataIPFilter *)&v40) & 1) == 0)
  {
    int v15 = *((void *)a1 + 5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I del ll filter: assume it belongs to other client", buf, 2u);
    }
    goto LABEL_22;
  }
  int v9 = (unsigned int *)*((void *)a1 + 18);
  unint64_t v10 = (unsigned int *)*((void *)a1 + 19);
  if (v9 == v10)
  {
LABEL_41:
    long long v18 = *((void *)a1 + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#N del ll filter: did not find the filter", buf, 2u);
    }
LABEL_35:
    std::function<void ()(BOOL)>::operator()(a3, 1);
    goto LABEL_22;
  }
  char v11 = 0;
  uint64_t v35 = 0;
  LOWORD(v12) = v40;
  do
  {
    while (1)
    {
      if (!DataIPFilter::equivalent((DataIPFilter *)v9, (const DataIPFilter *)&v40, 0)) {
        goto LABEL_11;
      }
      unsigned int v13 = v9[41];
      if (v13 > 5) {
        break;
      }
      if (((1 << v13) & 0x27) != 0)
      {
LABEL_33:
        unint64_t v16 = *((void *)a1 + 5);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I del ll filter: the filter already deleted", buf, 2u);
        }
        goto LABEL_35;
      }
      uint64_t v14 = *((void *)a1 + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I del ll filter: found the filter", buf, 2u);
      }
      QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v9, 0);
      unsigned int v12 = *v9;
      uint64_t v35 = v9[40];
      v9 += 50;
      char v11 = 1;
      if (v9 == v10) {
        goto LABEL_37;
      }
    }
    if (v13 == 255) {
      goto LABEL_33;
    }
LABEL_11:
    v9 += 50;
  }
  while (v9 != v10);
  if ((v11 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  *(_OWORD *)uint64_t v38 = 0u;
  long long v39 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v38);
  int v17 = (const void **)v38[1];
  if (v38[1] != (void *)v39)
  {
    while (*((unsigned char *)*v17 + 8) != 1)
    {
      if (++v17 == (const void **)v39) {
        goto LABEL_47;
      }
    }
  }
  if (v17 == (const void **)v39) {
LABEL_47:
  }
    operator new();
  if (!v19) {
    __cxa_bad_cast();
  }
  char v20 = (void **)(v19 + 2);
  unint64_t v21 = v19[4];
  int v22 = (unint64_t *)v19[3];
  if ((unint64_t)v22 >= v21)
  {
    uint64_t v24 = ((char *)v22 - (unsigned char *)*v20) >> 3;
    if ((unint64_t)(v24 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v21 - (void)*v20;
    uint64_t v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
      uint64_t v26 = v24 + 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27) {
      unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v19 + 4), v27);
    }
    else {
      unint64_t v28 = 0;
    }
    unint64_t v29 = &v28[8 * v24];
    uint64_t v30 = &v28[8 * v27];
    *(void *)unint64_t v29 = (unsigned __int16)v12 | (unint64_t)(v35 << 32);
    uint64_t v23 = v29 + 8;
    char v32 = (char *)*v20;
    uint64_t v31 = (char *)v20[1];
    if (v31 != *v20)
    {
      do
      {
        uint64_t v33 = *((void *)v31 - 1);
        v31 -= 8;
        *((void *)v29 - 1) = v33;
        v29 -= 8;
      }
      while (v31 != v32);
      uint64_t v31 = (char *)*v20;
    }
    *char v20 = v29;
    v20[1] = v23;
    v20[2] = v30;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    *int v22 = (unsigned __int16)v12 | (unint64_t)(v35 << 32);
    uint64_t v23 = v22 + 1;
  }
  v20[1] = v23;
  uint64_t v36 = QMIServiceMsg::create();
  v55[0] = MEMORY[0x263EF8330];
  v55[1] = 1174405120;
  v55[2] = ___ZN30QMIDownLinkFilterCommandDriver19deleteLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke;
  v55[3] = &__block_descriptor_tmp_30_9;
  v55[4] = a1;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v56, a3);
  long long v57 = v40;
  long long v58 = v41;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v59, (uint64_t)v42);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v62, (uint64_t)&v45 + 8);
  v65[0] = v49;
  *(void *)((char *)v65 + 6) = *(void *)((char *)&v49 + 6);
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v51 = 0x40000000;
  int v52 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs15DeleteLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  int v53 = &unk_26460DB00;
  long long v54 = v55;
  uint64_t v34 = _Block_copy(buf);
  long long aBlock = v34;
  if (v36)
  {
    qmi::Client::send();
    uint64_t v34 = aBlock;
  }
  if (v34) {
    _Block_release(v34);
  }
  if (v64 && v63 && SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (v61 && v60 && SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v56);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v38);
LABEL_22:
  if (BYTE8(v48) && (_BYTE)v47 && SHIBYTE(v46) < 0) {
    operator delete(*((void **)&v45 + 1));
  }
  if ((_BYTE)v45 && BYTE8(v43) && SBYTE7(v43) < 0) {
    operator delete(v42[0]);
  }
}

void sub_22244F1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x200]) && a76 && a75 < 0) {
    operator delete(__p);
  }
  if (a73 && a72 && a71 < 0) {
    operator delete(a66);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v76);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  if (a44) {
    BOOL v78 = a41 == 0;
  }
  else {
    BOOL v78 = 1;
  }
  if (!v78 && a40 < 0) {
    operator delete(a35);
  }
  if (a34 && a31 && a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN30QMIDownLinkFilterCommandDriver19deleteLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *(NSObject **)(v3 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v9 = v3 + 76;
      int v7 = *(_DWORD *)(v3 + 76);
      int v8 = *(_DWORD *)(v9 + 4);
      int v15 = 67109890;
      int v16 = v8;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#E del ll filter: for pdp %d, ipFamily %d Error code = 0x%x (%s)", (uint8_t *)&v15, 0x1Eu);
    }
  }
  else
  {
    if (v6)
    {
      int v11 = *(_DWORD *)(v3 + 76);
      int v10 = *(_DWORD *)(v3 + 80);
      int v15 = 67109376;
      int v16 = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I DeleteLLFilters successful for pdp %d, ipFamily %d", (uint8_t *)&v15, 0xEu);
    }
    unsigned int v12 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v3 + 144);
    for (uint64_t i = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v3 + 152);
          v12 != i;
          unsigned int v12 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v12 + 200))
    {
      if (DataIPFilter::equivalent(v12, (const DataIPFilter *)(a1 + 72), 0))
      {
        *((void *)v12 + 20) = 0;
        QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v12, 0);
      }
    }
  }
  return std::function<void ()(BOOL)>::operator()(a1 + 40, v4 == 0);
}

std::string *__copy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE72c18_ZTS12DataIPFilter(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 104), a2 + 104);
  BOOL result = std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 160), a2 + 160);
  uint64_t v6 = *(void *)(a2 + 216);
  *(void *)(a1 + 222) = *(void *)(a2 + 222);
  *(void *)(a1 + 216) = v6;
  return result;
}

void sub_22244F4E8(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v2);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE72c18_ZTS12DataIPFilter(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 160);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 104);

  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
}

void ___ZN30QMIDownLinkFilterCommandDriver29handleLLFiltersStatusInd_syncERKN3dfs15LLFiltersStatus10IndicationE_block_invoke(uint64_t a1, unsigned int **a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *a2;
  long long v39 = a2[1];
  if (*a2 != v39)
  {
    do
    {
      int v5 = (unsigned int *)v2[18];
      long long v4 = (unsigned int *)v2[19];
      if (v5 == v4) {
        goto LABEL_24;
      }
      char v6 = 0;
      do
      {
        uint64_t v7 = *v3;
        if (v7 == v5[40])
        {
          int v8 = v5[41];
          int v9 = v3[1];
          if (v8 != v9)
          {
            int v10 = v2[5];
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              int v11 = dfs::asString(v8);
              unsigned int v12 = dfs::asString(v3[1]);
              *(_DWORD *)long long buf = 134218498;
              *(void *)&uint8_t buf[4] = v7;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v11;
              *(_WORD *)&buf[22] = 2080;
              std::string v42 = v12;
              _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I ll filter status: for %lu: changed %s to %s", buf, 0x20u);
              int v9 = v3[1];
            }
            switch(v9)
            {
              case 0:
              case 1:
              case 2:
              case 5:
                goto LABEL_9;
              case 3:
                int v18 = v2[5];
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v19 = v5[40];
                  *(_DWORD *)long long buf = 134217984;
                  *(void *)&uint8_t buf[4] = v19;
                  _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I ll filter status: activated %lu", buf, 0xCu);
                }
                QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v5, 1);
                break;
              case 4:
                int v16 = v2[5];
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v17 = v5[40];
                  *(_DWORD *)long long buf = 134217984;
                  *(void *)&uint8_t buf[4] = v17;
                  _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I ll filter status: deactivated %lu", buf, 0xCu);
                }
                break;
              default:
                if (v9 == 255)
                {
LABEL_9:
                  unsigned int v13 = v2[5];
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v14 = dfs::asString(v9);
                    uint64_t v15 = v5[40];
                    *(_DWORD *)long long buf = 136315394;
                    *(void *)&uint8_t buf[4] = v14;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = v15;
                    _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I ll filter status: %s; assume deactivated %lu",
                      buf,
                      0x16u);
                  }
                  QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v5, 0);
                }
                break;
            }
            v5[41] = v3[1];
          }
          char v6 = 1;
        }
        v5 += 50;
      }
      while (v5 != v4);
      if ((v6 & 1) == 0)
      {
LABEL_24:
        int v20 = v2[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *v3;
          uint64_t v22 = dfs::asString(v3[1]);
          *(_DWORD *)long long buf = 134218242;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v22;
          _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#N ll filter status: not found %lu: %s", buf, 0x16u);
        }
      }
      v3 += 3;
    }
    while (v3 != v39);
  }
  uint64_t v23 = v2[18];
  uint64_t v24 = v2[19];
  uint64_t v25 = (void **)(v2 + 18);
  memset(buf, 0, sizeof(buf));
  if (v23 == v24)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = 0;
    do
    {
      if ((*(_DWORD *)(v23 + 164) - 3) <= 1)
      {
        if ((unint64_t)v26 >= *(void *)&buf[16])
        {
          uint64_t v26 = (void *)std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__push_back_slow_path<QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&>((int64x2_t *)buf, v23);
        }
        else
        {
          std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>((uint64_t)v26, v23);
          v26 += 25;
        }
        *(void *)&uint8_t buf[8] = v26;
      }
      v23 += 200;
    }
    while (v23 != v24);
  }
  if (v25 != (void **)buf)
  {
    unint64_t v27 = *(void **)buf;
    uint64_t v28 = v2[20];
    unint64_t v29 = 0x8F5C28F5C28F5C29 * (((uint64_t)v26 - *(void *)buf) >> 3);
    uint64_t v30 = v2[18];
    if (0x8F5C28F5C28F5C29 * ((v28 - v30) >> 3) >= v29)
    {
      if (0x8F5C28F5C28F5C29 * ((v2[19] - v30) >> 3) >= v29)
      {
        uint64_t v38 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *>(*(uint64_t *)buf, (uint64_t)v26, v30);
        std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)(v2 + 18), v38);
        goto LABEL_53;
      }
      uint64_t v37 = (void *)(*(void *)buf + 8 * ((v2[19] - v30) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *>(*(uint64_t *)buf, (uint64_t)v37, v30);
      uint64_t v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>((uint64_t)(v2 + 20), v37, v26, v2[19]);
    }
    else
    {
      if (v30)
      {
        std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)(v2 + 18), v2[18]);
        operator delete(*v25);
        uint64_t v28 = 0;
        *uint64_t v25 = 0;
        v2[19] = 0;
        v2[20] = 0;
      }
      if (v29 > 0x147AE147AE147AELL) {
        goto LABEL_54;
      }
      unint64_t v31 = 0x8F5C28F5C28F5C29 * (v28 >> 3);
      uint64_t v32 = 2 * v31;
      if (2 * v31 <= v29) {
        uint64_t v32 = v29;
      }
      unint64_t v33 = v31 >= 0xA3D70A3D70A3D7 ? 0x147AE147AE147AELL : v32;
      if (v33 > 0x147AE147AE147AELL) {
LABEL_54:
      }
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>>(v33);
      v2[18] = v34;
      v2[19] = v34;
      v2[20] = &v34[200 * v35];
      uint64_t v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>((uint64_t)(v2 + 20), v27, v26, (uint64_t)v34);
    }
    v2[19] = v36;
  }
LABEL_53:
  long long v40 = (void **)buf;
  std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](&v40);
}

void sub_22244FA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,char a21)
{
  *(void *)(v21 + 152) = v22;
  a20 = (void **)&a21;
  std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::handleDumpState_sync(QMIDownLinkFilterCommandDriver *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 19);
    int v4 = *((_DWORD *)this + 20);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v14 = v3;
    *(_WORD *)&uint8_t v14[4] = 1024;
    *(_DWORD *)&v14[6] = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I =====DumpState for QMIDownLinkFilterCommandDriver ipFamily %d, pdpId %d ======", buf, 0xEu);
    uint64_t v2 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((unsigned __int8 *)this + 84);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)uint64_t v14 = v5;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I fPacketStateActive = %d", buf, 8u);
    uint64_t v2 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v14 = v6;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I fLLFiltersSupported = %s", buf, 0xCu);
  }
  uint64_t v7 = (int *)*((void *)this + 18);
  for (uint64_t i = (int *)*((void *)this + 19); v7 != i; v7 += 50)
  {
    int v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *v7;
      uint64_t v11 = v7[40];
      unsigned int v12 = dfs::asString(v7[41]);
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)uint64_t v14 = v10;
      *(_WORD *)&uint8_t v14[4] = 2048;
      *(void *)&v14[6] = v11;
      __int16 v15 = 2080;
      int v16 = v12;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I llFilter: id=%u, handle=%lu, status=%s", buf, 0x1Cu);
    }
  }
}

uint64_t QMIDownLinkFilterCommandDriver::getPdpActiveState_sync(QMIDownLinkFilterCommandDriver *this)
{
  return *((unsigned __int8 *)this + 84);
}

uint64_t QMIDownLinkFilterCommandDriver::setPdpActiveState_sync(uint64_t this, char a2)
{
  *(unsigned char *)(this + 84) = a2;
  return this;
}

void std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 200)
  {
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(i - 32));
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 112);
    BOOL result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 168);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *std::vector<dfs::tlv::FilterRuleType>::__init_with_size[abi:ne180100]<dfs::tlv::FilterRuleType*,dfs::tlv::FilterRuleType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<dfs::tlv::FilterRuleType>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22244FDD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<dfs::tlv::FilterRuleType>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<qos::tlv::QosFilterSpec>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[176 * v4];
  return result;
}

uint64_t std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter const&,DataIPFilter*>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), a2 + 88);
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 150) = *(void *)(a2 + 150);
  *(void *)(a1 + 144) = v5;
  return a1;
}

void sub_22244FEAC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DataIPFilter>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

BOOL DataIPFilterEndpoint::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = equalsOptional<std::string>((unsigned __int8 *)a1, (unsigned __int8 *)a2);
  if (result)
  {
    if (*(unsigned char *)(a1 + 33))
    {
      if (!*(unsigned char *)(a2 + 33) || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 33))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 36))
    {
      if (!*(unsigned char *)(a2 + 36) || *(unsigned __int16 *)(a1 + 34) != *(unsigned __int16 *)(a2 + 34)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 36))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 40))
    {
      if (*(unsigned char *)(a2 + 40) && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38)) {
        return 1;
      }
    }
    else if (!*(unsigned char *)(a2 + 40))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL equalsOptional<std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (!a1[24]) {
    return !a2[24];
  }
  if (!a2[24]) {
    return 0;
  }
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return !memcmp(*(const void **)a1, a2, *((void *)a1 + 1));
  }
  if (a1[23])
  {
    while (*a1 == *a2)
    {
      ++a1;
      ++a2;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

void std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
}

void *std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26D4C8EF8;
  return result;
}

void std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4C8EF8;
}

uint64_t std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void _ZNSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE7__cloneEv()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26D4C8F78;
  return result;
}

void _ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE7__cloneEPNS0_6__baseIS7_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4C8F78;
}

uint64_t _ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE11target_typeEv()
{
  return &_ZTIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_E;
}

uint64_t std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__push_back_slow_path<QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x8F5C28F5C28F5C29 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x147AE147AE147AELL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 1;
  if (0x1EB851EB851EB852 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1EB851EB851EB852 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8F5C28F5C28F5C29 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xA3D70A3D70A3D7) {
    unint64_t v7 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v34 = (uint64_t *)v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v31 = v7;
  v32.i64[0] = v7 + 200 * v2;
  unint64_t v33 = v7 + 200 * v8;
  std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(v32.i64[0], a2);
  uint64_t v9 = v32.i64[0];
  uint64_t v10 = v32.i64[0] + 200;
  v32.i64[1] = v32.i64[0] + 200;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v28 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = v11 + v13;
      long long v16 = *(_OWORD *)(v11 + v13 - 200);
      *(_OWORD *)(v14 - 184) = *(_OWORD *)(v11 + v13 - 184);
      *(_OWORD *)(v14 - 200) = v16;
      *(unsigned char *)(v9 + v13 - 168) = 0;
      *(unsigned char *)(v14 - 120) = 0;
      if (*(unsigned char *)(v11 + v13 - 120))
      {
        *(unsigned char *)(v14 - 144) = 0;
        if (*(unsigned char *)(v15 - 144))
        {
          uint64_t v17 = (void *)(v15 - 168);
          long long v18 = *(_OWORD *)(v15 - 168);
          *(void *)(v9 + v13 - 152) = *(void *)(v15 - 152);
          *(_OWORD *)(v9 + v13 - 168) = v18;
          v17[1] = 0;
          v17[2] = 0;
          *uint64_t v17 = 0;
          *(unsigned char *)(v14 - 144) = 1;
        }
        uint64_t v19 = v9 + v13;
        uint64_t v20 = *(void *)(v11 + v13 - 136);
        *(unsigned char *)(v19 - 128) = *(unsigned char *)(v11 + v13 - 128);
        *(void *)(v19 - 136) = v20;
        *(unsigned char *)(v14 - 120) = 1;
      }
      *(unsigned char *)(v14 - 112) = 0;
      *(unsigned char *)(v14 - 64) = 0;
      if (*(unsigned char *)(v15 - 64))
      {
        uint64_t v21 = v9 + v13;
        *(unsigned char *)(v9 + v13 - std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
        uint64_t v22 = v11 + v13;
        if (*(unsigned char *)(v11 + v13 - 88))
        {
          long long v24 = *(_OWORD *)(v15 - 112);
          uint64_t v23 = (void *)(v15 - 112);
          *(void *)(v14 - 96) = v23[2];
          *(_OWORD *)(v14 - 112) = v24;
          v23[1] = 0;
          _OWORD v23[2] = 0;
          void *v23 = 0;
          *(unsigned char *)(v21 - std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 1;
        }
        uint64_t v25 = *(void *)(v22 - 80);
        *(unsigned char *)(v21 - 72) = *(unsigned char *)(v22 - 72);
        *(void *)(v21 - 80) = v25;
        *(unsigned char *)(v14 - 64) = 1;
      }
      uint64_t v26 = v9 + v13;
      uint64_t v27 = *(void *)(v11 + v13 - 56);
      *(void *)(v26 - 50) = *(void *)(v11 + v13 - 50);
      *(void *)(v26 - 56) = v27;
      *(void *)(v26 - 40) = *(void *)(v11 + v13 - 40);
      std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](v9 + v13 - 32, v11 + v13 - 32);
      v13 -= 200;
    }
    while (v11 + v13 != v12);
    int64x2_t v28 = *a1;
    uint64_t v10 = v32.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v32 = v28;
  unint64_t v29 = a1[1].u64[0];
  a1[1].i64[0] = v33;
  unint64_t v33 = v29;
  unint64_t v31 = v28.i64[0];
  std::__split_buffer<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::~__split_buffer((uint64_t)&v31);
  return v10;
}

void sub_222450468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), a2 + 88);
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 150) = *(void *)(a2 + 150);
  *(void *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 168, a2 + 168);
  return a1;
}

void sub_2224504F4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v2);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>>(unint64_t a1)
{
  if (a1 >= 0x147AE147AE147AFLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(200 * a1);
}

uint64_t std::__split_buffer<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 200;
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(i - 32));
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 112);
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 168);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  uint64_t v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 11;
    do
    {
      long long v7 = *(_OWORD *)(v6 - 9);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)(v6 - 11);
      *(_OWORD *)(v4 + 16) = v7;
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(v4 + 32), (uint64_t)(v6 - 7));
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(v4 + 88), (uint64_t)v6);
      uint64_t v8 = v6 - 11;
      uint64_t v9 = v6[7];
      *(void *)(v4 + 150) = *(void *)((char *)v6 + 62);
      *(void *)(v4 + 144) = v9;
      *(void *)(v4 + 160) = v6[9];
      std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](v4 + 168, (uint64_t)(v6 + 10));
      uint64_t v4 = v14 + 200;
      v14 += 200;
      v6 += 25;
    }
    while (v8 + 25 != a3);
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_2224506B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v10);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v9);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 200)
    {
      std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(v4 - 32));
      std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v4 - 112);
      std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v4 - 168);
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 168;
    do
    {
      long long v6 = *(_OWORD *)(v5 - 152);
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 168);
      *(_OWORD *)(a3 + 16) = v6;
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a3 + 32), (std::string *)(v5 - 136));
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a3 + 88), (std::string *)(v5 - 80));
      uint64_t v7 = *(void *)(v5 - 24);
      *(void *)(a3 + 150) = *(void *)(v5 - 18);
      *(void *)(a3 + 144) = v7;
      *(void *)(a3 + 160) = *(void *)(v5 - 8);
      std::function<void ()(BOOL)>::operator=((void *)(a3 + 168), v5);
      a3 += 200;
      uint64_t v8 = v5 + 32;
      v5 += 200;
    }
    while (v8 != a2);
  }
  return a3;
}

void std::shared_ptr<QMIDownLinkFilterCommandDriver>::shared_ptr[abi:ne180100]<QMIDownLinkFilterCommandDriver,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2224508B8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1}::operator() const(QMIDownLinkFilterCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2224508E0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIDownLinkFilterCommandDriver *,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver *)#1},std::allocator<QMIDownLinkFilterCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIDownLinkFilterCommandDriver *,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver *)#1},std::allocator<QMIDownLinkFilterCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIDownLinkFilterCommandDriver *,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver *)#1},std::allocator<QMIDownLinkFilterCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1}::operator() const(QMIDownLinkFilterCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void SimInstanceLoggable<QMIDownLinkFilterCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<QMIDownLinkFilterCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0>(QMIDownLinkFilterCommandDriver::shutdown(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0,dispatch_queue_s *::default_delete<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (*(void *)(v2 + 104)) {
    qmi::Client::stop((qmi::Client *)(v2 + 88));
  }
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_222450A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0>(QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0,std::default_delete<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 128);
  *(void *)(v2 + 120) = v3;
  *(void *)(v2 + 128) = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (std::__shared_weak_count *)v1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  MEMORY[0x223C9A950](v1, 0x20C40960023A9);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs10BindClient8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222450E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dfs15LLFiltersStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222450F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222451104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19GetFilterCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222451208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs22SetPowersaveFilterMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224513B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0>(QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0,dispatch_queue_s *::default_delete<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v7 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (*((unsigned char *)*a1 + 12))
  {
    if (*(void *)(v2 + 104))
    {
LABEL_5:
      int v3 = 1;
LABEL_14:
      QMIDownLinkFilterCommandDriver::handlePdpStateChangeAfterClientCreation_sync(v2, *((_DWORD *)v1 + 2), v3 != 0);
      goto LABEL_15;
    }
  }
  else
  {
    if (*((_DWORD *)v1 + 2) != *(_DWORD *)(v2 + 72))
    {
      int v3 = 0;
      goto LABEL_14;
    }
    uint64_t v4 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v2 + 144);
    uint64_t v5 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v2 + 152);
    if (v4 != v5)
    {
      do
      {
        QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v4, 0);
        uint64_t v4 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v4 + 200);
      }
      while (v4 != v5);
      uint64_t v4 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v2 + 144);
    }
    std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__base_destruct_at_end[abi:ne180100](v2 + 144, (uint64_t)v4);
    int v3 = *((unsigned __int8 *)v1 + 12);
    if (*(void *)(v2 + 104) || !*((unsigned char *)v1 + 12)) {
      goto LABEL_14;
    }
  }
  if (*((_DWORD *)v1 + 2) != *(_DWORD *)(v2 + 72)) {
    goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
LABEL_15:
  MEMORY[0x223C9A950](v1, 0x1020C4034E03FFCLL);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_222451518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x1020C4034E03FFCLL);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs25RemoveAllPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22245160C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9290;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9290;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 145 * ((v2 - v1 - 176) / 0xB0uLL) + 149;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (unsigned char *)(*a2 + 3);
  *a2 = (uint64_t)v5;
  uint64_t result = dfs::tlv::writeField(v5, (_DWORD *)(a1 + 16));
  *a2 = result;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = result - (_WORD)v5;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::clone()
{
}

void sub_22245183C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19AddPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222451924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C92E0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C92E0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 4;
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  *(unsigned char *)(v4 + 3) = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  long long v6 = *(const void **)(a1 + 16);
  size_t v7 = *(void *)(a1 + 24) - (void)v6;
  uint64_t result = memcpy((void *)(v4 + 4), v6, v7);
  *a2 = v4 + 4 + v7;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v4 + 4 + v7 - v5;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::clone()
{
}

void sub_222451B38(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9330;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9330;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::clone()
{
}

void sub_222451D3C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *std::vector<dfs::tlv::PortFilter>::__init_with_size[abi:ne180100]<dfs::tlv::PortFilter*,dfs::tlv::PortFilter*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x2AAAAAAAAAAAAAABLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(result + 2), a4);
    size_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    _DWORD v4[2] = (char *)result + 6 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_222451DF4(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9380;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9380;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::clone()
{
}

void sub_222451FF0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C93D0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C93D0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::clone()
{
}

void sub_2224521F4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9420;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9420;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::clone()
{
}

void sub_2224523F8(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9470;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9470;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 10 * ((v2 - v1 - 12) / 0xCuLL) + 14;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::IPv4SrcAddrFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::clone()
{
}

void sub_2224525FC(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *std::vector<dfs::tlv::IPv4AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv4AddrFilter*,dfs::tlv::IPv4AddrFilter*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x1555555555555556) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::CurrentDataSystem>>((uint64_t)(result + 2), a4);
    size_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    _DWORD v4[2] = (char *)result + 12 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_2224526B4(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C94C0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C94C0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 10 * ((v2 - v1 - 12) / 0xCuLL) + 14;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::IPv4SrcAddrFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::clone()
{
}

void sub_2224528B0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9510;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9510;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::getSize(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
    return 4;
  }
  else {
    return ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::TosFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::clone()
{
}

void sub_222452ADC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9560;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9560;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 19 * ((v2 - v1 - 20) / 0x14uLL) + 23;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::IPv6SrcAddrFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::clone()
{
}

void sub_222452CF0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *std::vector<dfs::tlv::IPv6AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv6AddrFilter*,dfs::tlv::IPv6AddrFilter*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>((uint64_t)(result + 2), a4);
    size_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    _DWORD v4[2] = (char *)result + 20 * v8;
    uint64_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9 - 1);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_222452DA8(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C95B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C95B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 19 * ((v2 - v1 - 20) / 0x14uLL) + 23;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::IPv6SrcAddrFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::clone()
{
}

void sub_222452FA4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9600;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9600;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::getSize(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
    return 4;
  }
  else {
    return ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<dfs::tlv::TosFiltersList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  size_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::clone()
{
}

void sub_2224531D0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9650;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C9650;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 6 * ((unint64_t)(v2 - v1 - 8) >> 3) + 10;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  uint64_t v5 = v3 + 4;
  *(unsigned char *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(void *)(result + 24);
  while (v6 != v7)
  {
    *(_WORD *)uint64_t v5 = *(_WORD *)v6;
    *(_DWORD *)(v5 + 2) = *(_DWORD *)(v6 + 4);
    v5 += 6;
    v6 += 8;
  }
  *a2 = v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::clone()
{
}

void sub_222453430(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs12AddLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222453528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C96A0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C96A0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 6 * ((unint64_t)(v2 - v1 - 8) >> 3) + 10;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  uint64_t v5 = v3 + 4;
  *(unsigned char *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(void *)(result + 24);
  while (v6 != v7)
  {
    *(_WORD *)uint64_t v5 = *(_WORD *)v6;
    *(_DWORD *)(v5 + 2) = *(_DWORD *)(v6 + 4);
    v5 += 6;
    v6 += 8;
  }
  *a2 = v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::clone()
{
}

void sub_222453794(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs15DeleteLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22245388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t QMIProfileInfo::QMIProfile::asString(QMIProfileInfo::QMIProfile *this, unsigned __int8 *a2)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(_OWORD *)long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v16);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ProfileId: ", 11);
  std::to_string(&v15, *a2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v15;
  }
  else {
    uint64_t v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, size);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", State: ", 9);
  int v9 = (char)a2[1];
  if ((a2[1] + 2) > 3u) {
    std::to_string(&__p, v9);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&__p, off_26460DD20[(char)(v9 + 2)]);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17 + 8, this);
  *(void *)&long long v16 = *MEMORY[0x263F8C2B8];
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v17[-1] + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&v17[0] = v12;
  *((void *)&v17[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C9A8E0](v21);
}

void sub_222453B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t QMIProfileInfo::asString@<X0>(QMIProfileInfo *this@<X0>, void *a2@<X8>)
{
  uint64_t v24 = 0;
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)long long v20 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v18 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v18);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"3GPP: [", 7);
  QMIProfileInfo::QMIProfile::asString((QMIProfileInfo::QMIProfile *)v16, (unsigned __int8 *)this + 2);
  if ((v17 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)v16[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"], 3GPP2: [", 11);
  QMIProfileInfo::QMIProfile::asString((QMIProfileInfo::QMIProfile *)__p, (unsigned __int8 *)this + 4);
  if ((v15 & 0x80u) == 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v10 = v15;
  }
  else {
    uint64_t v10 = (uint64_t)__p[1];
  }
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"]", 1);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a2);
  *(void *)&long long v18 = *MEMORY[0x263F8C2B8];
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v19[-1] + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&v19[0] = v12;
  *((void *)&v19[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C9A8E0](v23);
}

void sub_222453DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void QMICallAudioDriver::create()
{
}

void sub_222453F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, dispatch_object_t object, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v17) {
    MEMORY[0x223C9A950](v16, 0xF1C40A9CD41A2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMICallAudioDriver::QMICallAudioDriver(uint64_t a1, long long *a2, NSObject **a3, long long *a4, long long *a5)
{
  long long v11 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  xpc_object_t object = *a3;
  *a3 = 0;
  long long v6 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v8 = *a5;
  int v9 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  CallAudioDriver::CallAudioDriver();
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)a1 = &unk_26D4C98B8;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  return a1;
}

void sub_222454060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, dispatch_object_t object)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void QMICallAudioDriver::sendAudioTone(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = asString();
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Playing tone (%s, %d)", buf, 0x12u);
  }
  if (a2 > 0xA) {
    __int16 v7 = 255;
  }
  else {
    __int16 v7 = word_22257BE6A[(char)a2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 0x40000000;
  _OWORD v18[2] = ___ZN18QMICallAudioDriver13sendAudioToneE11AudioToneIdt_block_invoke;
  v18[3] = &__block_descriptor_tmp_20;
  __int16 v19 = v7;
  __int16 v20 = a3;
  long long v8 = (const void **)__p[1];
  if (__p[1] != (void *)v22)
  {
    while (*((unsigned char *)*v8 + 8) != 17)
    {
      if (++v8 == (const void **)v22) {
        goto LABEL_13;
      }
    }
  }
  if (v8 == (const void **)v22) {
LABEL_13:
  }
    operator new();
  if (!v9) {
    __cxa_bad_cast();
  }
  ___ZN18QMICallAudioDriver13sendAudioToneE11AudioToneIdt_block_invoke((uint64_t)v18, v9 + 10);
  uint64_t v13 = a1 + 128;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  long long aBlock = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = ___ZN18QMICallAudioDriver13sendAudioToneE11AudioToneIdt_block_invoke_2;
  void v11[3] = &__block_descriptor_tmp_4_4;
  _OWORD v11[4] = a1;
  char v12 = a2;
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio9StartTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v24 = &unk_26460DE88;
  uint64_t v25 = v11;
  uint64_t v10 = _Block_copy(buf);
  long long aBlock = v10;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v10 = aBlock;
  }
  if (v10) {
    _Block_release(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_222454470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18QMICallAudioDriver13sendAudioToneE11AudioToneIdt_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18QMICallAudioDriver13sendAudioToneE11AudioToneIdt_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = asString();
      uint64_t v5 = qmi::asString();
      int v6 = *(_DWORD *)(a2 + 4);
      int v7 = 136315650;
      uint64_t v8 = v4;
      __int16 v9 = 2080;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = v6;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Sending audio tone %s failed with error code %s (0x%d)", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void QMICallAudioDriver::stopAudioTone(QMICallAudioDriver *this)
{
  memset(v8, 0, sizeof(v8));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v8);
  v3[5] = (char *)this + 128;
  uint64_t v4 = QMIServiceMsg::create();
  int v5 = 25000;
  uint64_t v6 = 0;
  int v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK18QMICallAudioDriver13stopAudioToneEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5_5;
  void v3[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio8StopTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460DEB0;
  aBlock[4] = v3;
  uint64_t v2 = _Block_copy(aBlock);
  int v7 = v2;
  if (v4)
  {
    qmi::Client::send();
    uint64_t v2 = v7;
  }
  if (v2) {
    _Block_release(v2);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_2224546BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZNK18QMICallAudioDriver13stopAudioToneEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 40), OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = qmi::asString();
      int v6 = *(_DWORD *)(a2 + 4);
      int v7 = 136315394;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Stopping audio tone failed with error code %s (0x%d)", (uint8_t *)&v7, 0x12u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v2 + 40), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Audio tones stop request sent successfully", (uint8_t *)&v7, 2u);
  }
}

void QMICallAudioDriver::playDTMFDigits(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Playing the local audio Dtmf tone", buf, 2u);
  }
  if (a3)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    _OWORD v15[2] = ___ZN18QMICallAudioDriver14playDTMFDigitsERKNSt3__16vectorIhNS0_9allocatorIhEEEEb_block_invoke;
    void v15[3] = &__block_descriptor_tmp_7_6;
    unsigned char v15[4] = a2;
    int v7 = (const void **)__p[1];
    if (__p[1] != (void *)v17)
    {
      while (*((unsigned char *)*v7 + 8) != 1)
      {
        if (++v7 == (const void **)v17) {
          goto LABEL_12;
        }
      }
    }
    if (v7 == (const void **)v17) {
LABEL_12:
    }
      operator new();
    if (!v8) {
      __cxa_bad_cast();
    }
    ___ZN18QMICallAudioDriver14playDTMFDigitsERKNSt3__16vectorIhNS0_9allocatorIhEEEEb_block_invoke(v15, v8 + 2);
    void v10[5] = a1 + 128;
    uint64_t v11 = QMIServiceMsg::create();
    int v12 = 25000;
    uint64_t v13 = 0;
    long long aBlock = 0;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 0x40000000;
    v10[2] = ___ZN18QMICallAudioDriver14playDTMFDigitsERKNSt3__16vectorIhNS0_9allocatorIhEEEEb_block_invoke_2;
    void v10[3] = &__block_descriptor_tmp_8_7;
    v10[4] = a1;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v19 = 0x40000000;
    __int16 v20 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_19;
    long long v21 = &unk_26460DED8;
    long long v22 = v10;
    __int16 v9 = _Block_copy(buf);
    long long aBlock = v9;
    if (v11)
    {
      qmi::Client::send();
      __int16 v9 = aBlock;
    }
    if (v9) {
      _Block_release(v9);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    CallAudioDriver::playLocalDtmfDigits();
  }
}

void sub_222454B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *___ZN18QMICallAudioDriver14playDTMFDigitsERKNSt3__16vectorIhNS0_9allocatorIhEEEEb_block_invoke(void *result, char **a2)
{
  uint64_t v2 = (char **)result[4];
  if (v2 != a2) {
    return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, *v2, v2[1], v2[1] - *v2);
  }
  return result;
}

uint64_t ___ZN18QMICallAudioDriver14playDTMFDigitsERKNSt3__16vectorIhNS0_9allocatorIhEEEEb_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = qmi::asString();
      int v6 = *(_DWORD *)(a2 + 4);
      int v7 = 136315394;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Sending local audio burst DTMF failed with error %s (%d)", (uint8_t *)&v7, 0x12u);
    }
    return (*(uint64_t (**)(void))(**(void **)(v3 + 48) + 32))(*(void *)(v3 + 48));
  }
  return result;
}

uint64_t QMICallAudioDriver::start(QMICallAudioDriver *this)
{
  return qmi::Client::start((QMICallAudioDriver *)((char *)this + 128));
}

uint64_t QMICallAudioDriver::bootstrap(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "CallModule: Audio Service");
  uint64_t v2 = *(NSObject **)(a1 + 24);
  dispatch_object_t v18 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "voice");
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 8), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v6 = v5;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v12, *(Registry **)(a1 + 96));
  qmi::Client::createWithQueueLocal();
  long long v7 = v23;
  long long v23 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  qmi::Client::~Client((qmi::Client *)&v21);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke;
  void v11[3] = &__block_descriptor_tmp_11_5;
  _OWORD v11[4] = a1;
  uint64_t v21 = MEMORY[0x263EF8330];
  uint64_t v22 = 0x40000000;
  *(void *)&long long v23 = ___ZNK3qmi6Client13setIndHandlerIRKN5audio13AudioToneDone10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v23 + 1) = &unk_26460DF00;
  uint64_t v24 = v11;
  qmi::Client::setIndHandler();
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  v10[2] = ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_2;
  void v10[3] = &__block_descriptor_tmp_12_8;
  v10[4] = a1;
  uint64_t v21 = MEMORY[0x263EF8330];
  uint64_t v22 = 0x40000000;
  *(void *)&long long v23 = ___ZNK3qmi6Client13setIndHandlerIRKN5audio13BurstDtmfTone10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v23 + 1) = &unk_26460DF28;
  uint64_t v24 = v10;
  qmi::Client::setIndHandler();
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  return qmi::Client::setHandler();
}

void sub_222454FF4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 184);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 - 168);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (*(char *)(v2 - 137) < 0) {
    operator delete(*(void **)(v2 - 160));
  }
  int v6 = *(NSObject **)(v2 - 136);
  if (v6) {
    dispatch_release(v6);
  }
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v12 = TlvValue;
    __int16 v8 = tlv::parseV<audio::tlv::CallProgressToneId>((unint64_t *)&v12, v5);
    if (v12)
    {
      __int16 v9 = v8;
      goto LABEL_6;
    }
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 17, v6, v7);
  }
  __int16 v9 = 255;
LABEL_6:
  (*(void (**)(void, uint64_t))(**(void **)(v3 + 64) + 24))(*(void *)(v3 + 64), 85);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 + 48) + 24))(*(void *)(v3 + 48));
  if (v9 == 7)
  {
    uint64_t v11 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I This audio indication is for call waiting, going to see if we need to send another one now...", buf, 2u);
    }
    return (*(uint64_t (**)(void))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48));
  }
  return result;
}

uint64_t ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DTMF Tones finished playing. Will process the remaining digits now.", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**(void **)(v1 + 48) + 32))(*(void *)(v1 + 48));
}

void ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_13(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I QMICallAudioDriver Audio Service client started", v2, 2u);
  }
}

uint64_t ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1)
{
  uint64_t v1 = *(CallAudioDriver **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I QMICallAudioDriver Audio Service client stopped", v4, 2u);
  }
  return CallAudioDriver::stopLocalDtmf(v1);
}

void ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_2_18(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I QMICallAudioDriver Audio Service client received a server error", v2, 2u);
  }
}

uint64_t QMICallAudioDriver::shutdown(uint64_t a1)
{
  return qmi::Client::stop((qmi::Client *)(a1 + 128));
}

void QMICallAudioDriver::~QMICallAudioDriver(QMICallAudioDriver *this)
{
  *(void *)this = &unk_26D4C98B8;
  qmi::Client::~Client((QMICallAudioDriver *)((char *)this + 128));

  CallAudioDriver::~CallAudioDriver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4C98B8;
  qmi::Client::~Client((QMICallAudioDriver *)((char *)this + 128));
  CallAudioDriver::~CallAudioDriver(this);

  JUMPOUT(0x223C9A950);
}

void std::shared_ptr<QMICallAudioDriver>::shared_ptr[abi:ne180100]<QMICallAudioDriver,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22245550C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1}::operator() const(QMICallAudioDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222455534(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMICallAudioDriver *,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver *)#1},std::allocator<QMICallAudioDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMICallAudioDriver *,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver *)#1},std::allocator<QMICallAudioDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMICallAudioDriver *,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver *)#1},std::allocator<QMICallAudioDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1}::operator() const(QMICallAudioDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::TdFragmentInfo>((_WORD **)a2, (_WORD *)(a1 + 10));
  int v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio9StartTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224557B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio8StopTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224558B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C99E8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C99E8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::NextHdrProtList>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::clone()
{
}

void sub_222455A94(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5audio13AudioToneDone10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222455B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5audio13BurstDtmfTone10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222455C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *QMIDataContextDriverInterface::QMIDataContextDriverInterface(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  __int16 v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BBDataContextDriverInterface::BBDataContextDriverInterface();
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v6 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 56)) = a2[3];
  return a1;
}

void sub_222455DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextDriverInterface::create(uint64_t a1@<X0>, dispatch_object_t *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  if (*(void *)a5
  {
    uint64_t v11 = *(void *)(a5 + 8);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v13 = *(void *)(a3 + 8);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a4 + 8);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  QMIDataContextDriver::create(&v15);
}

void sub_222455FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIDataContextDriverInterface::runDad(QMIDataContextDriverInterface *this)
{
  return 1;
}

void QMIAttachApnCommandDriverFactory::create()
{
}

void sub_2224560B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    if (!v10)
    {
LABEL_3:
      if (!v12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (!v12) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  MEMORY[0x223C9A950](v11, 0x10E1C409C49465BLL);
  goto LABEL_5;
}

void *QMIAttachApnCommandDriverFactory::QMIAttachApnCommandDriverFactory(void *a1, void *a2, NSObject **a3)
{
  *a1 = MEMORY[0x263F038E0] + 16;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, (const char *)*MEMORY[0x263F03770], "AttachAPN.QMIFactory");
  ctu::SharedLoggable<QMIAttachApnCommandDriverFactory,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(a1 + 1, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *a1 = &unk_26D4C9A38;
  a1[6] = *a2;
  uint64_t v6 = a2[1];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[10] = 0;
  a1[9] = 0;
  a1[8] = a1 + 9;
  return a1;
}

void sub_2224561DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  AttachApnCommandDriverFactory::~AttachApnCommandDriverFactory(v9);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<QMIAttachApnCommandDriverFactory,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(void *a1, NSObject **a2)
{
  *a1 = 0;
  a1[1] = 0;
  char v3 = *a2;
  a1[2] = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v5);
  return a1;
}

void QMIAttachApnCommandDriverFactory::~QMIAttachApnCommandDriverFactory(QMIAttachApnCommandDriverFactory *this)
{
  *(void *)this = &unk_26D4C9A38;
  std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(*((void **)this + 9));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x223C99A30]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 1);

  AttachApnCommandDriverFactory::~AttachApnCommandDriverFactory(this);
}

{
  uint64_t vars8;

  QMIAttachApnCommandDriverFactory::~QMIAttachApnCommandDriverFactory(this);

  JUMPOUT(0x223C9A950);
}

capabilities::ct *QMIAttachApnCommandDriverFactory::createAttachApnCmdDriverForSim@<X0>(capabilities::ct *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  char v3 = result;
  uint64_t v5 = *((void *)result + 9);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = (void *)((char *)result + 72);
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      __int16 v9 = (uint64_t *)v5;
    }
    else {
      __int16 v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = (void *)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 == (void *)((char *)result + 72) || *((_DWORD *)v6 + 8) > a2)
  {
LABEL_11:
    int v10 = (capabilities::ct *)capabilities::ct::supports5G(result);
    if (v10)
    {
      if (capabilities::ct::getCDMASettingsSupport(v10))
      {
        uint64_t v11 = *((void *)v3 + 7);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        Mav20QMIAttachApnCommandDriver::create(&v17);
      }
      uint64_t v16 = *((void *)v3 + 7);
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      Mav30QMIAttachApnCommandDriver::create(&v17);
    }
    if (capabilities::ct::supports2StepDataCallBringUp(v10))
    {
      uint64_t v12 = *((void *)v3 + 7);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      Mav16QMIAttachApnCommandDriver::create(&v17);
    }
    uint64_t v13 = *((void *)v3 + 7);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    QMIAttachApnCommandDriver::create(&v17);
  }
  uint64_t v15 = v6[5];
  uint64_t v14 = v6[6];
  *a3 = v15;
  a3[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2224565C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void QMIAttachApnCommandDriverFactory::bootstrap(QMIAttachApnCommandDriverFactory *this)
{
  uint64_t v2 = (char *)*((void *)this + 8);
  char v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      QMIAttachApnCommandDriverBase::bootstrap_sync(*((Registry ***)v2 + 5));
      uint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  int v7 = *((void *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v8 = 0;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I QMIAttachApnCommandDriverFactory bootstrapped", v8, 2u);
  }
}

void QMIAttachApnCommandDriverFactory::start(QMIAttachApnCommandDriverFactory *this)
{
  uint64_t v2 = (char *)*((void *)this + 8);
  char v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      uint64_t v4 = *((void *)v2 + 5);
      AttachApnCommandDriver::start_sync((AttachApnCommandDriver *)v4);
      qmi::Client::start((qmi::Client *)(v4 + 96));
      uint64_t v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  BOOL v8 = *((void *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v9 = 0;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I QMIAttachApnCommandDriverFactory started", v9, 2u);
  }
}

void QMIAttachApnCommandDriverFactory::shutdown(QMIAttachApnCommandDriverFactory *this)
{
  uint64_t v2 = (char *)*((void *)this + 8);
  char v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      uint64_t v4 = *((void *)v2 + 5);
      AttachApnCommandDriver::shutdown_sync((AttachApnCommandDriver *)v4);
      qmi::Client::stop((qmi::Client *)(v4 + 96));
      uint64_t v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  BOOL v8 = *((void *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v9 = 0;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I QMIAttachApnCommandDriverFactory shutdown", v9, 2u);
  }
}

void std::shared_ptr<QMIAttachApnCommandDriverFactory>::shared_ptr[abi:ne180100]<QMIAttachApnCommandDriverFactory,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22245693C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1}::operator() const(QMIAttachApnCommandDriverFactory*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222456964(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIAttachApnCommandDriverFactory *,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory *)#1},std::allocator<QMIAttachApnCommandDriverFactory>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIAttachApnCommandDriverFactory *,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory *)#1},std::allocator<QMIAttachApnCommandDriverFactory>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIAttachApnCommandDriverFactory *,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory *)#1},std::allocator<QMIAttachApnCommandDriverFactory>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1}::operator() const(QMIAttachApnCommandDriverFactory*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void Mav20QMIDesenseCommandDriver::create()
{
}

void sub_222456B08(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0xF1C40EE32BF51);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mav20QMIDesenseCommandDriver::Mav20QMIDesenseCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  v8[8] = *MEMORY[0x263EF8340];
  xpc_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  DesenseCommandDriver::DesenseCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  v7[0] = &unk_26D4BA498;
  unint64_t v7[3] = v7;
  uint64_t v4 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  if ((capabilities::ct::supportsGemini(v4) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 88)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v7);
  *(void *)a1 = &unk_26D4C9B80;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 96), *(os_log_s **)(a1 + 40));
  return a1;
}

void sub_222456D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9A950](v3, 0x10A1C40FF1576FELL);
  uint64_t v5 = *((void *)v2 + 11);
  *((void *)v2 + 11) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  DesenseCommandDriver::~DesenseCommandDriver(v2);
  _Unwind_Resume(a1);
}

void sub_222456DFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x222456DF4);
}

void Mav20QMIDesenseCommandDriver::~Mav20QMIDesenseCommandDriver(Mav20QMIDesenseCommandDriver *this)
{
  *(void *)this = &unk_26D4C9B80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  DesenseCommandDriver::~DesenseCommandDriver(this);
}

{
  uint64_t vars8;

  Mav20QMIDesenseCommandDriver::~Mav20QMIDesenseCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void *Mav20QMIDesenseCommandDriver::bootstrap(uint64_t a1, uint64_t a2, xpc_object_t *a3, dispatch_object_t *a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", (uint8_t *)&buf, 2u);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 8);
  char v20 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t object = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  dispatch_group_t group = *a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_group_enter(group);
  }
  DesenseCommandDriver::bootstrap();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  subscriber::makeSimSlotRange();
  uint64_t v10 = v21;
  if (v21 != v22)
  {
    while ((v23(*v10) & 1) == 0)
    {
      if (++v10 == v22)
      {
        uint64_t v10 = v22;
        break;
      }
    }
    while (v10 != v22)
    {
      if (*v10 == 1)
      {
        uint64_t v11 = "Desense.1";
      }
      else if (*v10 == 2)
      {
        uint64_t v11 = "Desense.2";
      }
      else
      {
        uint64_t v11 = "Desense.?";
      }
      std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&buf, (void *)(a1 + 8));
      long long v12 = buf;
      if (*((void *)&buf + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 16), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
      Registry::getServerConnection((uint64_t *)&v24, *(Registry **)(a1 + 56));
      long long buf = 0u;
      long long v36 = 0u;
      std::string::basic_string[abi:ne180100]<0>(v25, v11);
      uint64_t v13 = *(NSObject **)(a1 + 24);
      dispatch_object_t v32 = v13;
      if (v13) {
        dispatch_retain(v13);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "registration");
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      if (*((void *)&v12 + 1))
      {
        uint64_t v14 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)&v12 + 1));
        if (v14)
        {
          uint64_t v15 = v14;
          atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v28 = v12;
          unint64_t v29 = v14;
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        else
        {
          uint64_t v28 = 0;
          unint64_t v29 = 0;
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
        }
      }
      long long v27 = v24;
      long long v24 = 0uLL;
      qmi::Client::createWithQueueLocal();
      if (*((void *)&v27 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
      }
      if (v29) {
        std::__shared_weak_count::__release_weak(v29);
      }
      if (v31 < 0) {
        operator delete(__p);
      }
      if (v32) {
        dispatch_release(v32);
      }
      if (SBYTE7(v26) < 0) {
        operator delete(v25[0]);
      }
      v25[0] = 0;
      v25[1] = 0;
      long long v26 = v36;
      long long v36 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)v25);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&buf);
      if (*((void *)&v24 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
      }
      uint64_t v16 = v10 + 1;
      uint64_t v10 = v22;
      if (v16 != v22)
      {
        uint64_t v10 = v16;
        while ((v23(*v10) & 1) == 0)
        {
          if (++v10 == v22)
          {
            uint64_t v10 = v22;
            break;
          }
        }
      }
    }
  }
  v34[0] = &unk_26D4C9CC8;
  v34[1] = a1;
  v34[3] = v34;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v34);
  v33[0] = &unk_26D4C9D48;
  v33[1] = a1;
  v33[3] = v33;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v33);
  *(void *)&long long buf = &unk_26D4C9DC8;
  *((void *)&buf + 1) = a1;
  *((void *)&v36 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  return std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&buf);
}

void sub_222457364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, xpc_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,dispatch_object_t a40,char a41)
{
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100]((void *)(v41 - 144));
  _Unwind_Resume(a1);
}

uint64_t Mav20QMIDesenseCommandDriver::start(Mav20QMIDesenseCommandDriver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t Mav20QMIDesenseCommandDriver::shutdown(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutting down", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

void Mav20QMIDesenseCommandDriver::registerFrequencyReporting(uint64_t a1, int a2)
{
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Register for Frequency Reporting", buf, 2u);
  }
  memset(v6, 0, sizeof(v6));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v6);
  *qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyRegistering>((uint64_t)v6, 176) = 2;
  if ((a2 - 1) >= 3) {
    int v4 = 0;
  }
  else {
    int v4 = a2;
  }
  qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(&v5, v4);
}

void sub_222457778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  uint64_t v22 = a10;
  a10 = 0;
  if (v22) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v4 = *(NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 136315138;
    uint64_t buf_4 = asString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Set Frequency reporting mode: %s", (uint8_t *)&buf, 0xCu);
  }
  memset(v5, 0, sizeof(v5));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v5);
  *qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyReporting>((uint64_t)v5, 176) = a3;
  qmi::ClientRouter::get();
  operator new();
}

void sub_222457A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v26, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void Mav20QMIDesenseCommandDriver::processFrequencyInd_sync(uint64_t a1, unsigned int a2, qmi::MessageBase *this)
{
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v8 = TlvValue;
    int v9 = v7;
    long long v75 = (char *)TlvValue;
    char v10 = tlv::parseV<nas::tlv::BBStatus>((unint64_t *)&v75, v7);
    if (v75)
    {
      if ((v10 & 0xFD) != 0)
      {
        if (a2 - 1 >= 3) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = a2;
        }
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 48))(*(void *)(a1 + 72), v11);
        goto LABEL_16;
      }
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 177, v8, v9);
    }
  }
  uint64_t v12 = qmi::MessageBase::findTlvValue(this);
  if (v12)
  {
    uint64_t v14 = v12;
    int v15 = v13;
    long long v75 = (char *)v12;
    uint64_t v16 = tlv::parseV<nas::tlv::BBCampUplinkFreq>((unint64_t *)&v75, v13);
    if (v75)
    {
      uint64_t v18 = v17;
      if (a2 - 1 >= 3) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = a2;
      }
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), v19, v16, v18);
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 187, v14, v15);
    }
  }
LABEL_16:
  v74[0] = 0;
  v74[1] = 0;
  int v73 = v74;
  uint64_t v20 = qmi::MessageBase::findTlvValue(this);
  uint64_t v22 = v20;
  if (v20)
  {
    int v23 = v21;
    long long v75 = (char *)v20;
    tlv::parseV<nas::tlv::BBCampFreq>((unint64_t *)&v75, v21);
    if (v75) {
      DesenseCommandDriver::addSingleFrequencyToMap();
    }
    else {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 178, v22, v23);
    }
  }
  long long v24 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  uint64_t v26 = v24;
  if (v24)
  {
    int v27 = v25;
    uint64_t v77 = 0;
    BOOL v78 = v24;
    long long v75 = 0;
    unsigned int v76 = 0;
    tlv::parseV<nas::tlv::BBHoppingList>(&v78, v25, (uint64_t *)&v75);
    uint64_t v28 = v78;
    if (v78)
    {
      unint64_t v29 = v75;
      uint64_t v30 = v76;
      if (v75 == v76)
      {
LABEL_25:
        if (v29)
        {
          unsigned int v76 = v29;
          operator delete(v29);
        }
        if (!v28) {
          ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 180, v26, v27);
        }
        goto LABEL_29;
      }
      do
      {
        DesenseCommandDriver::addSingleFrequencyToMap();
        v29 += 16;
      }
      while (v29 != v30);
    }
    unint64_t v29 = v75;
    goto LABEL_25;
  }
LABEL_29:
  char v31 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  unint64_t v33 = v31;
  if (!v31) {
    goto LABEL_38;
  }
  int v34 = v32;
  uint64_t v77 = 0;
  BOOL v78 = v31;
  long long v75 = 0;
  unsigned int v76 = 0;
  tlv::parseV<nas::tlv::BBNeighborList>(&v78, v32, (uint64_t *)&v75);
  uint64_t v35 = v78;
  if (!v78) {
    goto LABEL_33;
  }
  long long v36 = v75;
  uint64_t v37 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v36 += 16;
    }
    while (v36 != v37);
LABEL_33:
    long long v36 = v75;
  }
  if (v36)
  {
    unsigned int v76 = v36;
    operator delete(v36);
  }
  if (!v35) {
    ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 181, v33, v34);
  }
LABEL_38:
  uint64_t v38 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  long long v40 = v38;
  if (!v38) {
    goto LABEL_47;
  }
  int v41 = v39;
  uint64_t v77 = 0;
  BOOL v78 = v38;
  long long v75 = 0;
  unsigned int v76 = 0;
  tlv::parseV<nas::tlv::BBHRPLMNList>(&v78, v39, (uint64_t *)&v75);
  std::string v42 = v78;
  if (!v78) {
    goto LABEL_42;
  }
  uint64_t v43 = v75;
  long long v44 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v43 += 16;
    }
    while (v43 != v44);
LABEL_42:
    uint64_t v43 = v75;
  }
  if (v43)
  {
    unsigned int v76 = v43;
    operator delete(v43);
  }
  if (!v42) {
    ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 182, v40, v41);
  }
LABEL_47:
  uint64_t v45 = qmi::MessageBase::findTlvValue(this);
  uint64_t v47 = v45;
  if (v45)
  {
    int v48 = v46;
    long long v75 = (char *)v45;
    tlv::parseV<nas::tlv::BBCampSecondFreq>((unint64_t *)&v75, v46);
    if (v75) {
      DesenseCommandDriver::addSingleFrequencyToMap();
    }
    else {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 185, v47, v48);
    }
  }
  long long v49 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  uint64_t v51 = v49;
  if (v49)
  {
    int v52 = v50;
    uint64_t v77 = 0;
    BOOL v78 = v49;
    long long v75 = 0;
    unsigned int v76 = 0;
    tlv::parseV<nas::tlv::BBNeighborSecondList>(&v78, v50, (uint64_t *)&v75);
    int v53 = v78;
    if (v78)
    {
      long long v54 = v75;
      unsigned __int16 v55 = v76;
      if (v75 == v76)
      {
LABEL_56:
        if (v54)
        {
          unsigned int v76 = v54;
          operator delete(v54);
        }
        if (!v53) {
          ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 186, v51, v52);
        }
        goto LABEL_60;
      }
      do
      {
        DesenseCommandDriver::addSingleFrequencyToMap();
        v54 += 16;
      }
      while (v54 != v55);
    }
    long long v54 = v75;
    goto LABEL_56;
  }
LABEL_60:
  long long v56 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  long long v58 = v56;
  if (!v56) {
    goto LABEL_69;
  }
  int v59 = v57;
  uint64_t v77 = 0;
  BOOL v78 = v56;
  long long v75 = 0;
  unsigned int v76 = 0;
  tlv::parseV<nas::tlv::DLSCellFrequencyList>(&v78, v57, (uint64_t *)&v75);
  char v60 = v78;
  if (!v78) {
    goto LABEL_64;
  }
  char v61 = v75;
  std::string v62 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v61 += 16;
    }
    while (v61 != v62);
LABEL_64:
    char v61 = v75;
  }
  if (v61)
  {
    unsigned int v76 = v61;
    operator delete(v61);
  }
  if (!v60) {
    ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 188, v58, v59);
  }
LABEL_69:
  char v63 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  BOOL v65 = v63;
  if (!v63) {
    goto LABEL_78;
  }
  int v66 = v64;
  uint64_t v77 = 0;
  BOOL v78 = v63;
  long long v75 = 0;
  unsigned int v76 = 0;
  tlv::parseV<nas::tlv::BBSearchFreqList>(&v78, v64, (uint64_t *)&v75);
  uint64_t v67 = v78;
  if (!v78) {
    goto LABEL_73;
  }
  long long v68 = v75;
  long long v69 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v68 += 16;
    }
    while (v68 != v69);
LABEL_73:
    long long v68 = v75;
  }
  if (v68)
  {
    unsigned int v76 = v68;
    operator delete(v68);
  }
  if (!v67) {
    ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 190, v65, v66);
  }
LABEL_78:
  uint64_t v70 = *(void *)(a1 + 72);
  std::map<unsigned long long,DesenseFreq>::map[abi:ne180100](v72, (uint64_t)&v73);
  if (a2 - 1 >= 3) {
    uint64_t v71 = 0;
  }
  else {
    uint64_t v71 = a2;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v70 + 32))(v70, v71, v72);
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)v72, (void *)v72[1]);
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)&v73, v74[0]);
}

void sub_222458128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void std::shared_ptr<Mav20QMIDesenseCommandDriver>::shared_ptr[abi:ne180100]<Mav20QMIDesenseCommandDriver,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22245826C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1}::operator() const(Mav20QMIDesenseCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222458294(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<Mav20QMIDesenseCommandDriver *,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver *)#1},std::allocator<Mav20QMIDesenseCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav20QMIDesenseCommandDriver *,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver *)#1},std::allocator<Mav20QMIDesenseCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav20QMIDesenseCommandDriver *,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver *)#1},std::allocator<Mav20QMIDesenseCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1}::operator() const(Mav20QMIDesenseCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void SimInstanceLoggable<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C9CC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C9CC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::operator()(capabilities::ct *a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = *((void *)a1 + 1);
  if (capabilities::ct::supportsGemini(a1))
  {
    memset(v7, 0, sizeof(v7));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v7);
    *qmi::MutableMessageBase::getTLV<nas::tlv::SubType>((uint64_t)v7, 1) = v2 == 2;
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>(&v6, v2);
  }
  int v4 = *(uint64_t (**)(void))(**(void **)(v3 + 72) + 16);

  return v4();
}

void sub_222458608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  uint64_t v23 = a10;
  a10 = 0;
  if (v23) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C9D48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C9D48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  if ((*a2 - 1) >= 3) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 16))(v2, v3, 0);
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C9DC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C9DC8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v9 = 0;
    uint64_t v10 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v7, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
    if (__p)
    {
      int v9 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  nas::SetFreqReportMode::RespInd::RespInd((qmi::MessageBase *)&__p, v7);
  Mav20QMIDesenseCommandDriver::processFrequencyInd_sync(v6, v4, (qmi::MessageBase *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_222458930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

qmi::MessageBase *nas::SetFreqReportMode::RespInd::RespInd(qmi::MessageBase *a1, void *a2)
{
  qmi::Indication<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Indication((qmi::MessageBase *)v4, a2);
  qmi::RespInd<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::RespInd(a1, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
  return a1;
}

void sub_222458A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::RespInd<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::RespInd(qmi::MessageBase *this, void *a2)
{
  *(void *)this = *a2;
  uint64_t v3 = a2[2];
  *((void *)this + 1) = a2[1];
  *((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_222458A78(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Indication(qmi::MessageBase *this, void *a2)
{
  *(void *)this = *a2;
  uint64_t v3 = a2[2];
  *((void *)this + 1) = a2[1];
  *((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_222458ADC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = *v3;
    unsigned int v5 = *((_DWORD *)v3 + 2);
    if (v5 - 1 >= 3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    int v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 88) + 16))(*(void *)(v4 + 88), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = qmi::asString();
      int v9 = *(_DWORD *)(a2 + 4);
      int v10 = 136315394;
      uint64_t v11 = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v10, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C9E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C9E78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_222458CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyRegistering>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyRegistering>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyRegistering>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__1EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(void ***)v2;
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void *, void))(*v3[11] + 16))(v3[11], *(unsigned int *)(v2 + 8));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a2 + 4);
      v8[0] = 67109378;
      v8[1] = v6;
      __int16 v9 = 2080;
      uint64_t v10 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not register with stop report: 0x%x (%s)", (uint8_t *)v8, 0x12u);
    }
  }
  else
  {
    int v7 = (void (*)(void))(*v3)[3];
    v7();
  }
}

uint64_t __copy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C9F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C9F48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyReporting>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyReporting>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyReporting>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__1EEOS1_OT__block_invoke(uint64_t a1, qmi::ResponseBase *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)v3;
  if (*((_DWORD *)a2 + 1))
  {
    uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v4 + 88) + 16))(*(void *)(v4 + 88), *(unsigned int *)(v3 + 8));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *((_DWORD *)a2 + 1);
      v9[0] = 67109378;
      v9[1] = v6;
      __int16 v10 = 2080;
      uint64_t v11 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not set frequency reporting mode: 0x%x (%s)", (uint8_t *)v9, 0x12u);
    }
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(v3 + 8);
    if (v7 - 1 >= 3) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = v7;
    }
    nas::SetFreqReportMode::RespInd::RespInd((nas::SetFreqReportMode::RespInd *)v9, a2);
    Mav20QMIDesenseCommandDriver::processFrequencyInd_sync(v4, v8, (qmi::MessageBase *)v9);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v9);
  }
}

void sub_222459594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c137_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c137_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CA018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CA018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

nas::SetFreqReportMode::RespInd *nas::SetFreqReportMode::RespInd::RespInd(nas::SetFreqReportMode::RespInd *this, const qmi::ResponseBase *a2)
{
  qmi::Response<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Response((qmi::MessageBase *)v4, a2);
  qmi::RespInd<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::RespInd(this, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
  return this;
}

void sub_2224596A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Response<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Response(qmi::MessageBase *this, void *a2)
{
  *(void *)this = *a2;
  uint64_t v3 = a2[2];
  *((void *)this + 1) = a2[1];
  *((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_222459704(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,DesenseFreq>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long long,DesenseFreq>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,DesenseFreq>,std::__tree_node<std::__value_type<unsigned long long,DesenseFreq>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_222459758(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,DesenseFreq>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,DesenseFreq>,std::__tree_node<std::__value_type<unsigned long long,DesenseFreq>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,DesenseFreq> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      unsigned int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          unsigned int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,DesenseFreq> const&>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v6 = (void **)std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    unsigned int v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__find_equal<unsigned long long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t VinylTransaction::dumpLongDescription(uint64_t a1, uint64_t a2)
{
  VinylTransaction::shortDescription(&__p, a1);
  MEMORY[0x223C99C00](a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x223C99BF0](a2, " outBytes=");
  uint64_t result = ctu::operator<<();
  if (*(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    MEMORY[0x223C99BF0](a2, " (");
    uint64_t v5 = ctu::operator<<();
    MEMORY[0x223C99BF0](v5, "/");
    uint64_t v6 = ctu::operator<<();
    return MEMORY[0x223C99BF0](v6, " seg sent)");
  }
  return result;
}

void sub_222459B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylTransaction::shortDescription(std::string *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 17))
  {
    uint64_t v4 = (char *)vinyl::asString(*(unsigned __int8 *)(a2 + 8));
    std::string::basic_string[abi:ne180100]<0>(&v20, v4);
    uint64_t v5 = std::string::insert(&v20, 0, "Transaction[", 0xCuLL);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v7 = std::string::append(&v21, ", txid=", 7uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *(_DWORD *)(a2 + 12));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    uint64_t v11 = (char *)vinyl::asString(*(unsigned __int8 *)(a2 + 8));
    std::string::basic_string[abi:ne180100]<0>(&v20, v11);
    uint64_t v12 = std::string::insert(&v20, 0, "Transaction[", 0xCuLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = std::string::append(&v21, ", txid=", 7uLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *(_DWORD *)(a2 + 12));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  uint64_t v16 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v23, "]", 1uLL);
  *this = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_222459D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VinylTransactionWithDataResult::dumpLongDescription(uint64_t a1, uint64_t a2)
{
  VinylTransaction::dumpLongDescription(a1, a2);
  MEMORY[0x223C99BF0](a2, " inBytes=");
  uint64_t result = ctu::operator<<();
  if (*(void *)(a1 + 64) != *(void *)(a1 + 72) || *(_DWORD *)(a1 + 92))
  {
    MEMORY[0x223C99BF0](a2, " (");
    uint64_t v5 = ctu::operator<<();
    MEMORY[0x223C99BF0](v5, "/");
    ctu::operator<<();
    JUMPOUT(0x223C99BF0);
  }
  return result;
}

void VinylQMICommandDriver::create(capabilities::ct *a1@<X0>, void *a2@<X8>)
{
  if (!((unint64_t)capabilities::ct::supportedVinylSlotCount(a1) >> 31))
  {
    *a2 = 0;
    a2[1] = 0;
    operator new();
  }
  __assert_rtn("create", "VinylQMICommandDriver.cpp", 137, "capabilities::ct::supportedVinylSlotCount() <= std::numeric_limits<int>::max()");
}

void sub_222459F3C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F3C40BB43328BLL);
  _Unwind_Resume(a1);
}

uint64_t VinylQMICommandDriver::VinylQMICommandDriver(uint64_t a1, void *a2, int a3)
{
  VinylCommandDriver::VinylCommandDriver((VinylCommandDriver *)a1, "VinylQMICommandDriver");
  *(void *)long long v6 = &unk_26D4CA068;
  uint64_t v7 = a2[1];
  *((void *)v6 + 10) = *a2;
  *((void *)v6 + 11) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  long long v8 = (void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = 1;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if (a3 == 1)
  {
    capabilities::ct::defaultVinylSlotID(v6);
    int v9 = VinylSlotIdFromInt();
    int v10 = v9;
    uint64_t v12 = *(char **)(a1 + 144);
    unint64_t v11 = *(void *)(a1 + 152);
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v28 = (char *)*v8;
      uint64_t v29 = (v12 - (unsigned char *)*v8) >> 2;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v31 = v11 - (void)v28;
      if (v31 >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      BOOL v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v32) {
        unint64_t v33 = v30;
      }
      if (v33)
      {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v33);
        uint64_t v28 = *(char **)(a1 + 136);
        uint64_t v12 = *(char **)(a1 + 144);
      }
      else
      {
        uint64_t v34 = 0;
      }
      uint64_t v35 = (_DWORD *)(v33 + 4 * v29);
      unint64_t v36 = v33 + 4 * v34;
      _DWORD *v35 = v10;
      long long v13 = v35 + 1;
      while (v12 != v28)
      {
        int v37 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *--uint64_t v35 = v37;
      }
      *(void *)(a1 + 136) = v35;
      *(void *)(a1 + 144) = v13;
      *(void *)(a1 + 152) = v36;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v12 = v9;
      long long v13 = v12 + 4;
    }
    *(void *)(a1 + 144) = v13;
  }
  else if (a3 >= 1)
  {
    int v14 = 0;
    do
    {
      ++v14;
      int v15 = VinylSlotIdFromInt();
      int v16 = v15;
      unint64_t v18 = *(char **)(a1 + 144);
      unint64_t v17 = *(void *)(a1 + 152);
      if ((unint64_t)v18 >= v17)
      {
        std::string v20 = (char *)*v8;
        uint64_t v21 = (v18 - (unsigned char *)*v8) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v24);
          std::string v20 = *(char **)(a1 + 136);
          unint64_t v18 = *(char **)(a1 + 144);
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = (_DWORD *)(v24 + 4 * v21);
        *uint64_t v26 = v16;
        uint64_t v19 = v26 + 1;
        while (v18 != v20)
        {
          int v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *--uint64_t v26 = v27;
        }
        *(void *)(a1 + 136) = v26;
        *(void *)(a1 + 144) = v19;
        *(void *)(a1 + 152) = v24 + 4 * v25;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v18 = v15;
        uint64_t v19 = v18 + 4;
      }
      *(void *)(a1 + 144) = v19;
    }
    while (v14 != a3);
  }
  return a1;
}

void sub_22245A1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::~__value_func[abi:ne180100]((void *)(v11 + 88));
  a10 = (void **)(v11 + 64);
  std::vector<std::unique_ptr<VinylTransaction>>::__destroy_vector::operator()[abi:ne180100](&a10);
  int v14 = *v12;
  if (*v12)
  {
    *((void *)v10 + 18) = v14;
    operator delete(v14);
  }
  qmi::Client::~Client((qmi::Client *)v11);
  int v15 = (std::__shared_weak_count *)*((void *)v10 + 11);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  VinylCommandDriver::~VinylCommandDriver(v10);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::~VinylQMICommandDriver(VinylQMICommandDriver *this)
{
  *(void *)this = &unk_26D4CA068;
  uint64_t v2 = (VinylQMICommandDriver *)((char *)this + 96);
  qmi::Client::stop((VinylQMICommandDriver *)((char *)this + 96));
  std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::~__value_func[abi:ne180100]((void *)this + 23);
  uint64_t v5 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<VinylTransaction>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  qmi::Client::~Client(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  VinylCommandDriver::~VinylCommandDriver(this);
}

{
  uint64_t vars8;

  VinylQMICommandDriver::~VinylQMICommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void VinylQMICommandDriver::bootstrap_sync(VinylQMICommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (v3 = *((void *)this + 1), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  std::string::basic_string[abi:ne180100]<0>(v35, "Vinyl");
  long long v6 = *((void *)this + 3);
  dispatch_object_t v50 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "vinyl");
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v7 || (v8 = *((void *)this + 1), (int v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v10 = v9;
  uint64_t v48 = v8;
  long long v49 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v46, *((Registry **)this + 10));
  qmi::Client::createWithQueueLocal();
  long long v11 = v42;
  long long v42 = 0uLL;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 15);
  *((_OWORD *)this + 7) = v11;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  qmi::Client::~Client((qmi::Client *)v41);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v49) {
    std::__shared_weak_count::__release_weak(v49);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if (v50) {
    dispatch_release(v50);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = 1174405120;
  *(void *)&long long v42 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke;
  *((void *)&v42 + 1) = &__block_descriptor_tmp_41;
  uint64_t v43 = this;
  uint64_t v44 = v3;
  uint64_t v45 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  v35[0] = (void *)MEMORY[0x263EF8330];
  v35[1] = (void *)1174405120;
  unint64_t v36 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_16;
  int v37 = &__block_descriptor_tmp_19_14;
  uint64_t v38 = this;
  uint64_t v39 = v3;
  long long v40 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  __p[0] = (void *)MEMORY[0x263EF8330];
  __p[1] = (void *)1174405120;
  unint64_t v30 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_20;
  uint64_t v31 = &__block_descriptor_tmp_23_8;
  BOOL v32 = this;
  uint64_t v33 = v3;
  uint64_t v34 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  qmi::Client::setIndShouldWake((VinylQMICommandDriver *)((char *)this + 96));
  qmi::Client::setIndShouldWake((VinylQMICommandDriver *)((char *)this + 96));
  qmi::Client::setIndShouldWake((VinylQMICommandDriver *)((char *)this + 96));
  uint64_t v22 = MEMORY[0x263EF8330];
  uint64_t v23 = 1174405120;
  unint64_t v24 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_24;
  uint64_t v25 = &__block_descriptor_tmp_28_4;
  uint64_t v26 = this;
  uint64_t v27 = v3;
  uint64_t v28 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setIndHandler();
  uint64_t v15 = MEMORY[0x263EF8330];
  uint64_t v16 = 1174405120;
  unint64_t v17 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_29;
  unint64_t v18 = &__block_descriptor_tmp_32_12;
  uint64_t v19 = this;
  uint64_t v20 = v3;
  uint64_t v21 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setIndHandler();
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  v13[2] = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_33;
  v13[3] = &__block_descriptor_tmp_36_11;
  v13[4] = this;
  void v13[5] = v3;
  int v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v51 = MEMORY[0x263EF8330];
  uint64_t v52 = 0x40000000;
  int v53 = ___ZNK3qmi6Client13setIndHandlerIN5vinyl10VSimEnable10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  long long v54 = &unk_26460E298;
  unsigned __int16 v55 = v13;
  qmi::Client::setIndHandler();
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_22245A7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  if (a39) {
    std::__shared_weak_count::__release_weak(a39);
  }
  if (a49) {
    std::__shared_weak_count::__release_weak(a49);
  }
  uint64_t v52 = *(std::__shared_weak_count **)(v50 - 168);
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  std::__shared_weak_count::__release_weak(v49);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        ready = (capabilities::ct *)VinylCommandDriver::sendReadyCallback_sync();
        uint64_t v7 = *(int **)(v3 + 136);
        for (uint64_t i = *(int **)(v3 + 144); v7 != i; ++v7)
        {
          int v9 = *v7;
          ready = (capabilities::ct *)capabilities::ct::requireVinylManagerInd(ready);
          if (ready)
          {
            v10[0] = MEMORY[0x263EF8330];
            v10[1] = 0x40000000;
            v10[2] = ___ZN21VinylQMICommandDriver24handleClientStarted_syncEv_block_invoke;
            void v10[3] = &__block_descriptor_tmp_38_3;
            v10[4] = v3;
            int v11 = v9;
            VinylQMICommandDriver::queryCsn_sync(v3, v9, v10);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22245A9F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSKNSt3__18weak_ptrI18VinylCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSKNSt3__18weak_ptrI18VinylCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_16(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (VinylQMICommandDriver *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        VinylQMICommandDriver::handleClientStopped_sync(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22245AAB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::handleClientStopped_sync(VinylQMICommandDriver *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  VinylCommandDriver::sendReadyCallback_sync();
  uint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 21);
  if (v2 != v3)
  {
    uint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 134217984;
      uint64_t v6 = (v3 - v2) >> 3;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI client stopped but %lu transactions outstanding; force-cancelling.",
        (uint8_t *)&v5,
        0xCu);
      uint64_t v2 = *((void *)this + 20);
      uint64_t v3 = *((void *)this + 21);
    }
    if (v2 != v3)
    {
      do
      {
        VinylQMICommandDriver::cancelTransactionWithError_sync(this, *(_DWORD *)(*(void *)v2 + 12), 3, 0, 0);
        uint64_t v2 = *((void *)this + 20);
      }
      while (v2 != *((void *)this + 21));
    }
  }
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_20(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (VinylQMICommandDriver *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5]) {
        VinylQMICommandDriver::handleClientStopped_sync(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22245AC34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_24(void *a1, qmi::MessageBase *a2)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  int v5 = (void (*)(uint64_t))a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5]) {
    goto LABEL_93;
  }
  v116[0] = 0;
  v116[1] = 0;
  qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)v116);
  if (!LOBYTE(v116[0]))
  {
    unint64_t v17 = *((void *)v5 + 5);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#E vinyl::Info missing required result TLV! Ignoring.", buf, 2u);
    }
    goto LABEL_93;
  }
  int v8 = BYTE4(v116[0]);
  uint64_t v9 = BYTE4(v116[0]) - 16;
  if (v9 > 0x31)
  {
LABEL_20:
    switch(BYTE4(v116[0]))
    {
      case 0:
        *(void *)int buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZN21VinylQMICommandDriver30handleInfoNoCommandResult_syncERKN5vinyl4Info10IndicationE_block_invoke;
        *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_40_6;
        uint64_t v118 = v5;
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        uint64_t v20 = TlvValue;
        if (TlvValue)
        {
          int v21 = v19;
          *(void *)unint64_t v136 = TlvValue;
          uint64_t v22 = tlv::parseV<vinyl::tlv::IndManagerReady>((unsigned char **)v136, v19);
          LOWORD(v95[0]) = v22;
          BYTE2(v95[0]) = BYTE2(v22);
          if (*(void *)v136) {
            (*(void (**)(unsigned char *, char **))&buf[16])(buf, v95);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 49, v20, v21);
          }
        }
        goto LABEL_93;
      case 1:
        uint64_t v45 = *((void *)v5 + 5);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
          goto LABEL_93;
        }
        uint64_t v46 = vinyl::asString(1);
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v46;
        uint64_t v47 = "vinyl::Info for command %s should not exist! Ignoring";
        goto LABEL_54;
      case 3:
        *(void *)int buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
        if (!buf[0]) {
          goto LABEL_118;
        }
        int v39 = buf[4];
        int v40 = buf[5];
        int v41 = *(_DWORD *)&buf[8];
        unsigned int v94 = buf[12];
        uint64_t v42 = buf[13];
        Transaction_sync = (const void *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v5, *(int *)&buf[8]);
        if (Transaction_sync) {
        else
        }
          uint64_t v44 = 0;
        if (!VinylQMICommandDriver::validateIndication((uint64_t)v5, v39, v41, (uint64_t)v44)) {
          goto LABEL_93;
        }
        if (v40)
        {
          unsigned __int16 v55 = *((void *)v5 + 5);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            int v73 = vinyl::asString(v39);
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v73;
            _os_log_error_impl(&dword_22231A000, v55, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
          }
          uint64_t v56 = 2;
        }
        else
        {
          *(void *)int buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = ___ZN21VinylQMICommandDriver34handleIndAvailableSpaceResult_syncERKN5vinyl4Info10IndicationE_block_invoke;
          *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_42_2;
          uint64_t v118 = v44;
          std::string v62 = (char *)qmi::MessageBase::findTlvValue(a2);
          int v92 = v63;
          int v64 = v62;
          if (v62)
          {
            v95[0] = v62;
            memset(v136, 0, 24);
            tlv::parseV<vinyl::tlv::IndAvailableSpace>(v95, v63, v136);
            BOOL v65 = v95[0];
            if (v95[0]) {
              (*(void (**)(unsigned char *, uint8_t *))&buf[16])(buf, v136);
            }
            if (*(void *)v136)
            {
              *(void *)&v136[8] = *(void *)v136;
              operator delete(*(void **)v136);
            }
            if (v65
              || (((uint64_t (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 32, v64, v92) & 1) != 0)
            {
              VinylQMICommandDriver::finishTransactionWithData_sync((os_log_t *)v5, v41);
              goto LABEL_93;
            }
          }
          int v66 = *((void *)v5 + 5);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            int v88 = vinyl::asString(v39);
            *(_DWORD *)unint64_t v136 = 136315138;
            *(void *)&v136[4] = v88;
            _os_log_error_impl(&dword_22231A000, v66, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s was marked successful but had no payload. Cancelling transaction.", v136, 0xCu);
          }
          uint64_t v56 = 1;
        }
        VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, v41, v56, v94, v42);
        break;
      case 5:
        goto LABEL_24;
      default:
        uint64_t v45 = *((void *)v5 + 5);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
          goto LABEL_93;
        }
        long long v54 = vinyl::asString(v8);
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v54;
        uint64_t v47 = "vinyl::Info for command %s is unexpected and I dont know what to do. Ignoring";
LABEL_54:
        _os_log_error_impl(&dword_22231A000, v45, OS_LOG_TYPE_ERROR, v47, buf, 0xCu);
        goto LABEL_93;
    }
    goto LABEL_93;
  }
  if (((1 << (BYTE4(v116[0]) - 16)) & 0x70) != 0)
  {
    *(void *)int buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
    if (buf[0])
    {
      int v30 = buf[4];
      int v31 = buf[5];
      int v32 = *(_DWORD *)&buf[8];
      uint64_t v33 = buf[12];
      uint64_t v34 = buf[13];
      uint64_t v35 = VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v5, *(int *)&buf[8]);
      if (VinylQMICommandDriver::validateIndication((uint64_t)v5, v30, v32, v35))
      {
        if (v31)
        {
          unint64_t v36 = *((void *)v5 + 5);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            long long v72 = vinyl::asString(v30);
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v72;
            _os_log_error_impl(&dword_22231A000, v36, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
          }
          VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, v32, 2, v33, v34);
        }
        else
        {
          VinylQMICommandDriver::finishTransactionWithResult_sync((os_log_t *)v5, v32);
        }
      }
      goto LABEL_93;
    }
    goto LABEL_118;
  }
  if (((1 << (BYTE4(v116[0]) - 16)) & 0x2000000000081) != 0)
  {
LABEL_24:
    *(void *)int buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
    if (buf[0])
    {
      int v23 = buf[4];
      int v24 = buf[5];
      int v25 = *(_DWORD *)&buf[8];
      uint64_t v26 = buf[12];
      uint64_t v27 = buf[13];
      uint64_t v28 = (const void *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v5, *(int *)&buf[8]);
      if (v28) {
      else
      }
        uint64_t v29 = 0;
      if (VinylQMICommandDriver::validateIndication((uint64_t)v5, v23, v25, (uint64_t)v29))
      {
        if (v24)
        {
          int v37 = *((void *)v5 + 5);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            uint64_t v67 = vinyl::asString(v23);
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v67;
            _os_log_error_impl(&dword_22231A000, v37, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
          }
          uint64_t v38 = 2;
        }
        else
        {
          uint64_t v118 = 0;
          memset(buf, 0, sizeof(buf));
          qmi::MessageBase::tryTlv<vinyl::tlv::PayloadData>(a2, 17, buf);
          if (buf[0])
          {
            if (*((_DWORD *)v29 + 22) == *(unsigned __int16 *)&buf[10])
            {
              std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)(v29 + 8), v29[9], *(char **)&buf[16], *(char **)&buf[24], *(void *)&buf[24] - *(void *)&buf[16]);
              if (!buf[0]) {
                __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
              }
              int v48 = *(unsigned __int16 *)&buf[8];
              int v49 = *((_DWORD *)v29 + 22) + 1;
              *((_DWORD *)v29 + 22) = v49;
              *((_DWORD *)v29 + 23) = v48;
              if (v49 == v48)
              {
                uint64_t v50 = *((void *)v5 + 5);
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v51 = vinyl::asString(v23);
                  *(_DWORD *)unint64_t v136 = 136315138;
                  *(void *)&v136[4] = v51;
                  _os_log_impl(&dword_22231A000, v50, OS_LOG_TYPE_DEFAULT, "#I vinyl::Info for command %s has received all segments", v136, 0xCu);
                }
                char v52 = 0;
                int v53 = 1;
                uint64_t v38 = 1;
              }
              else
              {
                uint64_t v38 = 0;
                int v53 = 1;
                char v52 = 1;
              }
            }
            else
            {
              char v61 = *((void *)v5 + 5);
              if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
              {
                int v85 = vinyl::asString(v23);
                int v86 = *((_DWORD *)v29 + 22);
                *(_DWORD *)unint64_t v136 = 136315394;
                *(void *)&v136[4] = v85;
                *(_WORD *)&v136[12] = 1024;
                *(_DWORD *)&v136[14] = v86;
                _os_log_error_impl(&dword_22231A000, v61, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s segment arrived out of order! Expecting #%d", v136, 0x12u);
              }
              char v52 = 0;
              uint64_t v38 = 1;
              int v53 = 2;
            }
            if (*(void *)&buf[16]) {
              operator delete(*(void **)&buf[16]);
            }
            if (v53 == 1)
            {
              if ((v52 & 1) == 0) {
                VinylQMICommandDriver::finishTransactionWithData_sync((os_log_t *)v5, v25);
              }
              goto LABEL_93;
            }
          }
          else
          {
            char v60 = *((void *)v5 + 5);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              long long v84 = vinyl::asString(v23);
              *(_DWORD *)unint64_t v136 = 136315138;
              *(void *)&v136[4] = v84;
              _os_log_error_impl(&dword_22231A000, v60, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s had no payload!? Cancelling transaction.", v136, 0xCu);
            }
            uint64_t v38 = 1;
          }
        }
        VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, v25, v38, v26, v27);
      }
      goto LABEL_93;
    }
LABEL_118:
    __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
  }
  if (v9 != 48) {
    goto LABEL_20;
  }
  *(void *)int buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
  if (!buf[0]) {
    goto LABEL_118;
  }
  int v10 = buf[4];
  int v11 = buf[5];
  __int16 v91 = *(_WORD *)&buf[6];
  int v12 = *(_DWORD *)&buf[8];
  unsigned int v93 = buf[12];
  uint64_t v13 = buf[13];
  __int16 v14 = *(_WORD *)&buf[14];
  uint64_t v15 = (const void *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v5, *(int *)&buf[8]);
  if (!VinylQMICommandDriver::validateIndication((uint64_t)v5, v10, v12, (uint64_t)v15)) {
    goto LABEL_93;
  }
  if (!v15
  {
    int v57 = *((void *)v5 + 5);
    if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
      goto LABEL_93;
    }
    VinylTransaction::shortDescription((std::string *)buf, (uint64_t)v15);
    long long v58 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)unint64_t v136 = 136315138;
    *(void *)&v136[4] = v58;
    _os_log_error_impl(&dword_22231A000, v57, OS_LOG_TYPE_ERROR, "%s is not handling FirmwareUpdateData. Ignoring", v136, 0xCu);
    if ((buf[23] & 0x80000000) == 0) {
      goto LABEL_93;
    }
    int v59 = *(void **)buf;
    goto LABEL_117;
  }
  if (v11)
  {
    uint64_t v16 = *((void *)v5 + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v87 = vinyl::asString(v10);
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = v87;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v13 | (v93 << 8);
      _os_log_error_impl(&dword_22231A000, v16, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure (%.4x). Cancelling transaction.", buf, 0x12u);
    }
    VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, v12, 2, v93, v13);
    goto LABEL_93;
  }
  *(void *)int buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x14002000000;
  *(void *)&unsigned char buf[24] = __Block_byref_object_copy__4;
  uint64_t v118 = __Block_byref_object_dispose__4;
  long long v133 = 0u;
  memset(v134, 0, sizeof(v134));
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  LOWORD(v120) = -1;
  int v135 = 0;
  v111[0] = MEMORY[0x263EF8330];
  v111[1] = 0x40000000;
  int v112 = ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke;
  int v113 = &unk_26460E000;
  int v114 = buf;
  uint64_t v68 = qmi::MessageBase::findTlvValue(a2);
  uint64_t v70 = v68;
  if (!v68) {
    goto LABEL_100;
  }
  int v71 = v69;
  *(void *)unint64_t v136 = v68;
  LOBYTE(v95[0]) = tlv::parseV<vinyl::tlv::IndFwUpdChipId>((unint64_t *)v136, v69);
  if (!*(void *)v136)
  {
    if (((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 65, v70, v71))goto LABEL_101; {
LABEL_100:
    }
    *(_DWORD *)(*(void *)&buf[8] + 292) = 0;
    goto LABEL_101;
  }
  v112((uint64_t)v111, (char *)v95);
LABEL_101:
  v107[0] = MEMORY[0x263EF8330];
  v107[1] = 0x40000000;
  uint64_t v108 = ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke_2;
  int v109 = &unk_26460E028;
  int v110 = buf;
  uint64_t v74 = (char *)qmi::MessageBase::findTlvValue(a2);
  int v90 = v75;
  unsigned int v76 = v74;
  if (v74)
  {
    v95[0] = v74;
    memset(v136, 0, sizeof(v136));
    tlv::parseV<vinyl::tlv::IndFwUpdProfileSummary>((unint64_t *)v95, v75, v136);
    uint64_t v77 = v95[0];
    if (v95[0]) {
      v108((uint64_t)v107, v136);
    }
    if (*(void *)&v136[8])
    {
      *(void *)&v136[16] = *(void *)&v136[8];
      operator delete(*(void **)&v136[8]);
    }
    if (!v77) {
      ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 66, v76, v90);
    }
  }
  v95[0] = (char *)MEMORY[0x263EF8330];
  v95[1] = (char *)0x40000000;
  uint64_t v96 = ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke_3;
  uint64_t v97 = &unk_26460E050;
  long long v98 = buf;
  int v99 = v5;
  char v100 = v10;
  char v101 = 0;
  __int16 v102 = v91;
  int v103 = v12;
  char v104 = v93;
  uint64_t v78 = v13;
  char v105 = v13;
  __int16 v106 = v14;
  uint64_t v79 = qmi::MessageBase::findTlvValue(a2);
  uint64_t v81 = v79;
  if (!v79) {
    goto LABEL_112;
  }
  int v82 = v80;
  uint64_t v115 = v79;
  long long v148 = 0u;
  memset(v149, 0, sizeof(v149));
  long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  long long v137 = 0u;
  memset(v136, 0, sizeof(v136));
  tlv::parseV<vinyl::tlv::IndFwUpdGetData>((unint64_t *)&v115, v80, v136);
  if (v115)
  {
    v96((uint64_t)v95, (uint64_t)v136);
    goto LABEL_115;
  }
  if ((((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 64, v81, v82) & 1) == 0)
  {
LABEL_112:
    int v83 = *((void *)v5 + 5);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      long long v89 = vinyl::asString(v10);
      *(_DWORD *)unint64_t v136 = 136315138;
      *(void *)&v136[4] = v89;
      _os_log_error_impl(&dword_22231A000, v83, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s does not have firmware TLV. Cancelling transaction.", v136, 0xCu);
      uint64_t v78 = v13;
    }
    VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, v12, 2, v93, v78);
  }
LABEL_115:
  _Block_object_dispose(buf, 8);
  int v59 = *(void **)&v134[16];
  if (*(void *)&v134[16])
  {
    *(void *)&v134[24] = *(void *)&v134[16];
LABEL_117:
    operator delete(v59);
  }
LABEL_93:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_22245BB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  _Block_object_dispose(&a33, 8);
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_29(void *a1, qmi::MessageBase *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  int v5 = (VinylQMICommandDriver *)a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (a1[5])
  {
    v41[0] = 0;
    v41[1] = 0;
    int v42 = 0;
    qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(a2, (uint64_t)v41);
    if (!LOBYTE(v41[0]))
    {
      uint64_t v16 = *((void *)v5 + 5);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#E vinyl::TapeInfo missing required result TLV! Ignoring.", buf, 2u);
      }
      goto LABEL_47;
    }
    int v8 = BYTE4(v41[0]);
    if (BYTE4(v41[0]) <= 0x19u)
    {
      if (((1 << SBYTE4(v41[0])) & 0x2BBFBF8) != 0)
      {
        memset(buf, 0, sizeof(buf));
        LODWORD(__p[0]) = 0;
        qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(a2, (uint64_t)buf);
        if (buf[0])
        {
          int v9 = buf[4];
          int v10 = *(unsigned __int16 *)&buf[6];
          int v11 = *(_DWORD *)&buf[12];
          uint64_t v12 = LOBYTE(__p[0]);
          uint64_t v13 = BYTE1(__p[0]);
          Transaction_sync = (const void *)VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[12]);
          if (Transaction_sync) {
          else
          }
            uint64_t v15 = 0;
          if (!VinylQMICommandDriver::validateIndication((uint64_t)v5, v9, v11, (uint64_t)v15)) {
            goto LABEL_47;
          }
          if (v10 == 1)
          {
            unint64_t v17 = *((void *)v5 + 5);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v18 = vinyl::asString(v9);
              *(_DWORD *)int buf = 136315138;
              *(void *)&uint8_t buf[4] = v18;
              _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#N Command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
            }
            uint64_t v19 = 2;
LABEL_46:
            VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v19, v12, v13);
            goto LABEL_47;
          }
          uint64_t v49 = 0;
          *(_OWORD *)int buf = 0u;
          *(_OWORD *)std::string __p = 0u;
          qmi::MessageBase::tryTlv<vinyl::tlv::PayloadData>(a2, 16, buf);
          if (buf[0])
          {
            if (*((_DWORD *)v15 + 22) == *(unsigned __int16 *)&buf[10])
            {
              std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)(v15 + 8), v15[9], (char *)__p[0], (char *)__p[1], (char *)__p[1] - (char *)__p[0]);
              if (!buf[0]) {
                __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
              }
              int v20 = *(unsigned __int16 *)&buf[8];
              int v21 = *((_DWORD *)v15 + 22) + 1;
              *((_DWORD *)v15 + 22) = v21;
              *((_DWORD *)v15 + 23) = v20;
              if (v21 == v20)
              {
                uint64_t v22 = *((void *)v5 + 5);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  int v23 = vinyl::asString(v9);
                  *(_DWORD *)uint64_t v43 = 136315138;
                  uint64_t v44 = v23;
                  _os_log_impl(&dword_22231A000, v22, OS_LOG_TYPE_DEFAULT, "#I vinyl::TapeInfo for command %s has received all segments", v43, 0xCu);
                }
                char v24 = 0;
                int v25 = 1;
                uint64_t v19 = 1;
              }
              else
              {
                uint64_t v19 = 0;
                int v25 = 1;
                char v24 = 1;
              }
            }
            else
            {
              uint64_t v34 = *((void *)v5 + 5);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              {
                int v37 = vinyl::asString(v9);
                int v38 = *((_DWORD *)v15 + 22);
                *(_DWORD *)uint64_t v43 = 136315394;
                uint64_t v44 = v37;
                __int16 v45 = 1024;
                int v46 = v38;
                _os_log_error_impl(&dword_22231A000, v34, OS_LOG_TYPE_ERROR, "vinyl::TapeInfo for command %s segment arrived out of order! Expecting #%d", v43, 0x12u);
              }
              char v24 = 0;
              uint64_t v19 = 1;
              int v25 = 2;
            }
            if (__p[0]) {
              operator delete(__p[0]);
            }
            if (v25 != 1) {
              goto LABEL_46;
            }
            if (v24) {
              goto LABEL_47;
            }
          }
          else if (v9 != 21)
          {
            uint64_t v26 = *((void *)v5 + 5);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              int v39 = vinyl::asString(v9);
              *(_DWORD *)uint64_t v43 = 136315138;
              uint64_t v44 = v39;
              _os_log_error_impl(&dword_22231A000, v26, OS_LOG_TYPE_ERROR, "Command %s had no payload!? Cancelling transaction.", v43, 0xCu);
            }
            uint64_t v19 = 1;
            goto LABEL_46;
          }
          VinylQMICommandDriver::finishTransactionWithData_sync((os_log_t *)v5, v11);
          goto LABEL_47;
        }
LABEL_53:
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      }
      if (BYTE4(v41[0]) == 22)
      {
        memset(buf, 0, sizeof(buf));
        LODWORD(__p[0]) = 0;
        qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(a2, (uint64_t)buf);
        if (buf[0])
        {
          int v27 = buf[4];
          int v28 = *(unsigned __int16 *)&buf[6];
          int v29 = *(_DWORD *)&buf[12];
          uint64_t v30 = LOBYTE(__p[0]);
          uint64_t v31 = BYTE1(__p[0]);
          uint64_t v32 = VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[12]);
          if (VinylQMICommandDriver::validateIndication((uint64_t)v5, v27, v29, v32))
          {
            if (v28 == 1)
            {
              uint64_t v33 = *((void *)v5 + 5);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                int v40 = vinyl::asString(v27);
                *(_DWORD *)int buf = 136315138;
                *(void *)&uint8_t buf[4] = v40;
                _os_log_error_impl(&dword_22231A000, v33, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
              }
              VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v29, 2, v30, v31);
            }
            else
            {
              VinylQMICommandDriver::finishTransactionWithResult_sync((os_log_t *)v5, v29);
            }
          }
          goto LABEL_47;
        }
        goto LABEL_53;
      }
    }
    uint64_t v35 = *((void *)v5 + 5);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      unint64_t v36 = vinyl::asString(v8);
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v36;
      _os_log_error_impl(&dword_22231A000, v35, OS_LOG_TYPE_ERROR, "vinyl::TapeInfo for command %s is unexpected and I dont know what to do. Ignoring", buf, 0xCu);
    }
  }
LABEL_47:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_22245C230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_33(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5]) {
    goto LABEL_25;
  }
  if (!*(void *)(v5 + 208))
  {
    uint64_t v16 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19[0]) = 0;
      _os_log_error_impl(&dword_22231A000, v16, OS_LOG_TYPE_ERROR, "no callback to process vsim enablement indication, ignoring...", (uint8_t *)v19, 2u);
    }
    goto LABEL_25;
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
  uint64_t v10 = TlvValue;
  if (!TlvValue) {
    goto LABEL_20;
  }
  int v11 = v9;
  v19[0] = TlvValue;
  char v12 = tlv::parseV<vinyl::tlv::IndVSimEnableError>(v19, v9);
  if (v19[0]) {
    goto LABEL_9;
  }
  if (!((unsigned int (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v10, v11))
  {
LABEL_20:
    unint64_t v17 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19[0]) = 0;
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I Successfully enabled vsim", (uint8_t *)v19, 2u);
    }
    *(unsigned char *)(v5 + 216) = 1;
    uint64_t v18 = *(void *)(v5 + 208);
    if (!v18) {
      goto LABEL_25;
    }
    LOWORD(v19[0]) = 257;
    (*(void (**)(uint64_t, unint64_t *))(*(void *)v18 + 48))(v18, v19);
    goto LABEL_24;
  }
  char v12 = 0;
LABEL_9:
  uint64_t v13 = *(void *)(v5 + 208);
  if (v13)
  {
    if (v12 == 3) {
      char v14 = 3;
    }
    else {
      char v14 = 0;
    }
    if (v12 == 1) {
      char v15 = 11;
    }
    else {
      char v15 = v14;
    }
    LOBYTE(v19[0]) = 2;
    BYTE1(v19[0]) = v15;
    (*(void (**)(uint64_t, unint64_t *))(*(void *)v13 + 48))(v13, v19);
LABEL_24:
    LOBYTE(v19[0]) = 0;
    std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::operator=[abi:ne180100]((void *)(v5 + 184));
  }
LABEL_25:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_22245C494(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::queryCsn_sync(int a1, int a2, void *aBlock)
{
  if (aBlock) {
    _Block_copy(aBlock);
  }
  operator new();
}

void sub_22245C7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21VinylQMICommandDriver24handleClientStarted_syncEv_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (v2 == 1) {
    goto LABEL_4;
  }
  if (v2 != 2)
  {
    exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    __cxa_throw(exception, MEMORY[0x263F8BDC8], MEMORY[0x263F8BDB8]);
  }
  if (a2[1] == 6)
  {
LABEL_4:
    uint64_t v3 = *(NSObject **)(*(void *)(result + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Received CSN query callback", v5, 2u);
    }
    return VinylCommandDriver::sendReadyCallback_sync();
  }
  return result;
}

void sub_22245C8F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::cancelTransactionWithError_sync(VinylQMICommandDriver *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Transaction_sync = VinylQMICommandDriver::findTransaction_sync(a1, a2);
  if (Transaction_sync)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)Transaction_sync + 16))(Transaction_sync, a3, a4, a5);
    VinylQMICommandDriver::deleteTransaction_sync(a1, a2);
  }
}

void VinylQMICommandDriver::createTransaction_sync()
{
}

{
  operator new();
}

{
  operator new();
}

uint64_t VinylQMICommandDriver::findTransaction_sync(VinylQMICommandDriver *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 20);
  uint64_t v4 = *((void *)this + 21);
  uint64_t v5 = v3;
  if (v3 != v4)
  {
    while (*(_DWORD *)(*(void *)v5 + 12) != a2)
    {
      v5 += 8;
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
  }
  if (v5 != v4) {
    return *(void *)v5;
  }
LABEL_7:
  uint64_t v7 = *((void *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 2048;
    uint64_t v10 = (v4 - v3) >> 3;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I transaction id not found %u, total = %lu", (uint8_t *)v8, 0x12u);
  }
  return 0;
}

void VinylQMICommandDriver::deleteTransaction_sync(VinylQMICommandDriver *this, int a2)
{
  uint64_t v4 = (void *)*((void *)this + 20);
  uint64_t v3 = (void *)*((void *)this + 21);
  if (v4 != v3)
  {
    while (*(_DWORD *)(*v4 + 12) != a2)
    {
      if (++v4 == v3) {
        goto LABEL_15;
      }
    }
  }
  if (v4 == v3)
  {
LABEL_15:
    __int16 v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E Attempt to delete transaction that doesn't exist!", v10, 2u);
    }
  }
  else
  {
    uint64_t v5 = v4 + 1;
    if (v4 + 1 != v3)
    {
      do
      {
        uint64_t v6 = *(v5 - 1);
        *(v5 - 1) = *v5;
        *uint64_t v5 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        ++v5;
      }
      while (v5 != v3);
      uint64_t v3 = (void *)*((void *)this + 21);
      uint64_t v4 = v5 - 1;
    }
    while (v3 != v4)
    {
      uint64_t v8 = *--v3;
      uint64_t v7 = v8;
      *uint64_t v3 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    *((void *)this + std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 21) = v4;
  }
}

uint64_t ___ZN21VinylQMICommandDriver30handleInfoNoCommandResult_syncERKN5vinyl4Info10IndicationE_block_invoke()
{
  VinylSlotIdFromInt();

  return VinylCommandDriver::sendReadyCallback_sync();
}

BOOL VinylQMICommandDriver::validateIndication(uint64_t a1, unsigned __int8 a2, int a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v8 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = a3;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)vinyl::asString(a2);
    _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Invalid vinyl transaction for %d for command %s. Ignoring", (uint8_t *)&__p, 0x12u);
    return 0;
  }
  if (*(unsigned __int8 *)(a4 + 8) == a2) {
    return 1;
  }
  __int16 v9 = *(NSObject **)(a1 + 40);
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v10 = vinyl::asString(a2);
    VinylTransaction::shortDescription(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315394;
    char v14 = v10;
    __int16 v15 = 2080;
    uint64_t v16 = p_p;
    _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "vinyl::Info has command %s, but our transaction is %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  return result;
}

{
  BOOL result;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  std::string *v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v8 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = a3;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)vinyl::asString(a2);
    _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Invalid tape transaction for %d for tape command %s. Ignoring", (uint8_t *)&__p, 0x12u);
    return 0;
  }
  if (*(unsigned __int8 *)(a4 + 8) == a2) {
    return 1;
  }
  __int16 v9 = *(NSObject **)(a1 + 40);
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v10 = vinyl::asString(a2);
    VinylTransaction::shortDescription(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315394;
    char v14 = v10;
    __int16 v15 = 2080;
    uint64_t v16 = p_p;
    _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "vinyl::Info has command %s, but our transaction is %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  return result;
}

double ___ZN21VinylQMICommandDriver34handleIndAvailableSpaceResult_syncERKN5vinyl4Info10IndicationE_block_invoke(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = std::vector<unsigned char>::__move_assign(*(void *)(a1 + 32) + 64, a2).n128_u64[0];
  return result;
}

void VinylQMICommandDriver::finishTransactionWithData_sync(os_log_t *this, int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)this, a2);
  if (Transaction_sync)
  {
    uint64_t v5 = Transaction_sync;
    uint64_t v7 = this[5];
    if (v6)
    {
      uint64_t v8 = v6;
      if (os_log_type_enabled(this[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&__p, (uint64_t)v8);
        __int16 v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        uint64_t v10 = v8[9] - v8[8];
        int v13 = 136315394;
        char v14 = v9;
        __int16 v15 = 2048;
        uint64_t v16 = v10;
        _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with %lu bytes", (uint8_t *)&v13, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v11 = v8[7];
      __p.__r_.__value_.__s.__data_[0] = 1;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *((_OWORD *)v8 + 4);
      uint64_t v18 = v8[10];
      v8[8] = 0;
      void v8[9] = 0;
      v8[10] = 0;
      (*(void (**)(void))(v11 + 16))();
      if (__p.__r_.__value_.__s.__data_[0] == 1)
      {
        if (__p.__r_.__value_.__l.__size_)
        {
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
      }
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)this, a2);
    }
    else if (os_log_type_enabled(this[5], OS_LOG_TYPE_ERROR))
    {
      char v12 = vinyl::asString(v5[8]);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with data for %s was quite unexpected! Ignoring", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_22245D330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  long long v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  long long v8 = *(_OWORD *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v10 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  __n128 result = *(__n128 *)(a2 + 232);
  long long v12 = *(_OWORD *)(a2 + 248);
  long long v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(__n128 *)(a1 + 2std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = result;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  uint64_t v14 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v14;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke(uint64_t result, char *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 292) = *a2;
  return result;
}

unsigned __int8 *___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke_2(uint64_t a1, unsigned __int8 *a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 286) = *a2 | 0x100;
  __n128 result = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 296);
  if (result != a2 + 8) {
    return (unsigned __int8 *)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(result, *((char **)a2 + 1), *((char **)a2 + 2), *((void *)a2 + 2) - *((void *)a2 + 1));
  }
  return result;
}

void ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  long long v2 = *(os_log_t **)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v3 + 56) == 1)
  {
    *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 3);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 57) = *(unsigned char *)(a2 + 19);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v5 = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(v4 + 74) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)(v4 + 58) = v5;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 90) = *(void *)(a2 + 52);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 98) = *(void *)(a2 + 60);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 106) = *(void *)(a2 + 68);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v7 = *(_OWORD *)(a2 + 76);
    *(_OWORD *)(v6 + 130) = *(_OWORD *)(a2 + 92);
    *(_OWORD *)(v6 + 114) = v7;
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v9 = *(_OWORD *)(a2 + 108);
    *(void *)(v8 + 162) = *(void *)(a2 + 124);
    *(_OWORD *)(v8 + 146) = v9;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    __int16 v11 = *(_WORD *)(a2 + 132);
    *(unsigned char *)(v10 + 172) = *(unsigned char *)(a2 + 134);
    *(_WORD *)(v10 + 170) = v11;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 173) = *(void *)(a2 + 135);
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v13 = *(_OWORD *)(a2 + 143);
    *(_OWORD *)(v12 + 197) = *(_OWORD *)(a2 + 159);
    *(_OWORD *)(v12 + 181) = v13;
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v15 = *(_OWORD *)(a2 + 175);
    *(void *)(v14 + 229) = *(void *)(a2 + 191);
    *(_OWORD *)(v14 + 213) = v15;
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
    __int16 v17 = *(_WORD *)(a2 + 199);
    *(unsigned char *)(v16 + 239) = *(unsigned char *)(a2 + 201);
    *(_WORD *)(v16 + 237) = v17;
    *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 240) = *(_WORD *)(a2 + 202);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 242) = *(void *)(a2 + 204);
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8);
    __int16 v19 = *(_WORD *)(a2 + 212);
    *(unsigned char *)(v18 + 252) = *(unsigned char *)(a2 + 214);
    *(_WORD *)(v18 + 250) = v19;
    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v21 = *(_OWORD *)(a2 + 231);
    *(_OWORD *)(v20 + 253) = *(_OWORD *)(a2 + 215);
    *(_OWORD *)(v20 + 269) = v21;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 285) = *(unsigned char *)(a2 + 247);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 2std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = *(unsigned char *)(a2 + 248);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  int v22 = *(_DWORD *)(a1 + 52);
  long long v35 = *(_OWORD *)(v3 + 72);
  long long v36 = *(_OWORD *)(v3 + 88);
  long long v39 = *(_OWORD *)(v3 + 136);
  long long v40 = *(_OWORD *)(v3 + 152);
  long long v43 = *(_OWORD *)(v3 + 200);
  long long v44 = *(_OWORD *)(v3 + 216);
  long long v45 = *(_OWORD *)(v3 + 232);
  long long v46 = *(_OWORD *)(v3 + 248);
  long long v41 = *(_OWORD *)(v3 + 168);
  long long v42 = *(_OWORD *)(v3 + 184);
  long long v37 = *(_OWORD *)(v3 + 104);
  long long v38 = *(_OWORD *)(v3 + 120);
  long long v33 = *(_OWORD *)(v3 + 40);
  long long v34 = *(_OWORD *)(v3 + 56);
  long long v47 = *(_OWORD *)(v3 + 264);
  long long v48 = *(_OWORD *)(v3 + 280);
  v49[0] = 0;
  v49[1] = 0;
  int v23 = *(const void **)(v3 + 296);
  uint64_t v24 = *(void *)(v3 + 304);
  uint64_t v50 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v49, v23, v24, v24 - (void)v23);
  uint64_t Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v2, v22);
  if (Transaction_sync)
  {
    uint64_t v26 = Transaction_sync;
    int v28 = v2[5];
    if (v27)
    {
      uint64_t v29 = (uint64_t)v27;
      if (os_log_type_enabled(v2[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&__p, v29);
        uint64_t v30 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)int buf = 136315138;
        char v52 = v30;
        _os_log_impl(&dword_22231A000, v28, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with firmware update data", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v31 = *(void *)(v29 + 56);
      long long v65 = v45;
      long long v66 = v46;
      long long v67 = v47;
      long long v68 = v48;
      long long v61 = v41;
      long long v62 = v42;
      long long v63 = v43;
      long long v64 = v44;
      long long v57 = v37;
      long long v58 = v38;
      long long v59 = v39;
      long long v60 = v40;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v33;
      long long v54 = v34;
      long long v55 = v35;
      __p.__r_.__value_.__s.__data_[0] = 1;
      long long v56 = v36;
      long long v69 = *(_OWORD *)v49;
      uint64_t v70 = v50;
      v49[1] = 0;
      uint64_t v50 = 0;
      v49[0] = 0;
      (*(void (**)(void))(v31 + 16))();
      if (__p.__r_.__value_.__s.__data_[0] == 1 && (void)v69)
      {
        *((void *)&v69 + 1) = v69;
        operator delete((void *)v69);
      }
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)v2, v22);
    }
    else if (os_log_type_enabled(v2[5], OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = vinyl::asString(v26[8]);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      _os_log_error_impl(&dword_22231A000, v28, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with BOOL result for %s was quite unexpected! Ignoring", (uint8_t *)&__p, 0xCu);
    }
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_22245DA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a47 == 1)
  {
    long long v48 = (void *)STACK[0x238];
    if (STACK[0x238])
    {
      STACK[0x240] = (unint64_t)v48;
      operator delete(v48);
    }
  }
  if (a41) {
    operator delete(a41);
  }
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::finishTransactionWithResult_sync(os_log_t *this, int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)this, a2);
  if (Transaction_sync)
  {
    long long v5 = Transaction_sync;
    long long v7 = this[5];
    if (v6)
    {
      uint64_t v8 = (uint64_t)v6;
      if (os_log_type_enabled(this[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&__p, v8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315394;
        uint64_t v14 = p_p;
        __int16 v15 = 1024;
        int v16 = 1;
        _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with result=%d", buf, 0x12u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v10 = *(void *)(v8 + 56);
      LOWORD(__p.__r_.__value_.__l.__data_) = 257;
      (*(void (**)(uint64_t))(v10 + 16))(v10);
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)this, a2);
    }
    else if (os_log_type_enabled(this[5], OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = vinyl::asString(v5[8]);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with BOOL result for %s was quite unexpected! Ignoring", (uint8_t *)&__p, 0xCu);
    }
  }
}

void VinylQMICommandDriver::sendOutgoingData_sync(VinylQMICommandDriver *this, int a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t Transaction_sync = VinylQMICommandDriver::findTransaction_sync(this, a2);
  if (Transaction_sync)
  {
    uint64_t v5 = Transaction_sync;
    uint64_t v6 = Transaction_sync + 24;
    unint64_t v7 = (*(void *)(Transaction_sync + 32) - *(void *)(Transaction_sync + 24) + 1499) / 0x5DCuLL;
    if (v7 == *(_DWORD *)(Transaction_sync + 48))
    {
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&__p, v5);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = p_p;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: all outgoing segments complete", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      *(_OWORD *)int v23 = 0u;
      long long v24 = 0u;
      int v11 = *(_DWORD *)(v5 + 48);
      __p.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      __p.__r_.__value_.__l.__size_ = 0x40000000;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12_GLOBAL__N_111sAttachDataERN5vinyl7Message7RequestERKNSt3__16vectorIhNS4_9allocatorIhEEEEjm_block_invoke;
      uint64_t v30 = &__block_descriptor_tmp_138_1;
      int v33 = v11;
      uint64_t v31 = (void *)v7;
      uint64_t v32 = v6;
      uint64_t v12 = (const void **)v23[1];
      if (v23[1] != (void *)v24)
      {
        while (*((unsigned char *)*v12 + 8) != 17)
        {
          if (++v12 == (const void **)v24) {
            goto LABEL_18;
          }
        }
      }
      if (v12 == (const void **)v24) {
LABEL_18:
      }
        operator new();
      if (!v13) {
        __cxa_bad_cast();
      }
      ___ZN12_GLOBAL__N_111sAttachDataERN5vinyl7Message7RequestERKNSt3__16vectorIhNS4_9allocatorIhEEEEjm_block_invoke((uint64_t)&__p, (uint64_t)v13 + 16);
      ++*(_DWORD *)(v5 + 48);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v14 || (uint64_t v15 = *((void *)this + 1), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v17 = v16;
      p_unint64_t shared_weak_owners = &v16->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      *(void *)&long long buf = (char *)this + 96;
      *((void *)&buf + 1) = QMIServiceMsg::create();
      int v26 = 25000;
      uint64_t v27 = 0;
      long long aBlock = 0;
      v20[0] = MEMORY[0x263EF8330];
      v20[1] = 1174405120;
      v20[2] = ___ZN21VinylQMICommandDriver21sendOutgoingData_syncEj_block_invoke;
      v20[3] = &__block_descriptor_tmp_48_11;
      v20[4] = this;
      v20[5] = v15;
      long long v21 = v17;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      int v22 = a2;
      __p.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      __p.__r_.__value_.__l.__size_ = 0x40000000;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      uint64_t v30 = &unk_26460E2C0;
      uint64_t v31 = v20;
      __int16 v19 = _Block_copy(&__p);
      long long aBlock = v19;
      if (*((void *)&buf + 1))
      {
        qmi::Client::send();
        __int16 v19 = aBlock;
      }
      if (v19) {
        _Block_release(v19);
      }
      if (v21) {
        std::__shared_weak_count::__release_weak(v21);
      }
      std::__shared_weak_count::__release_weak(v17);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = a2;
      _os_log_error_impl(&dword_22231A000, v10, OS_LOG_TYPE_ERROR, "sendOutgoingData[txid=%d] failed due to missing transaction info for %d", (uint8_t *)&__p, 0xEu);
    }
  }
}

void sub_22245E160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::sCreateBasicMessage(qmi::MutableMessageBase *a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  uint64_t v3 = qmi::MutableMessageBase::MutableMessageBase(a1);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  _DWORD v8[2] = ___ZN12_GLOBAL__N_119sCreateBasicMessageERKNSt3__110shared_ptrIK8RegistryEERK16VinylTransaction_block_invoke;
  void v8[3] = &__block_descriptor_tmp_134_2;
  v8[4] = a2;
  uint64_t v4 = *(const void ***)(v3 + 8);
  uint64_t v5 = *(const void ***)(v3 + 16);
  if (v4 != v5)
  {
    while (*((unsigned char *)*v4 + 8) != 2)
    {
      if (++v4 == v5) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == v5) {
LABEL_8:
  }
    operator new();
  if (!v6) {
    __cxa_bad_cast();
  }
  return ___ZN12_GLOBAL__N_119sCreateBasicMessageERKNSt3__110shared_ptrIK8RegistryEERK16VinylTransaction_block_invoke((uint64_t)v8, (uint64_t)v6 + 12);
}

void sub_22245E3FC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver21sendOutgoingData_syncEj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          long long v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I sendOutgoingData [txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
        else
        {
          VinylQMICommandDriver::sendOutgoingData_sync(v5, *(_DWORD *)(a1 + 56));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22245E52C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::asVinylDriverError(int a1)
{
  if (a1 > 516)
  {
    if (a1 == 517) {
      return 9;
    }
    if (a1 == 65537) {
      return 1;
    }
  }
  else
  {
    if (a1 == 102) {
      return 10;
    }
    if (a1 == 516) {
      return 6;
    }
  }
  if (qmi::isInternalError()) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21VinylQMICommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21VinylQMICommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL VinylQMICommandDriver::sendOutgoingTapeData_sync(VinylQMICommandDriver *this, int a2, char a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t Transaction_sync = VinylQMICommandDriver::findTransaction_sync(this, a2);
  uint64_t v7 = Transaction_sync;
  if (Transaction_sync)
  {
    unint64_t v8 = (*(void *)(Transaction_sync + 32) - *(void *)(Transaction_sync + 24) + 1499) / 0x5DCuLL;
    if (v8 == *(_DWORD *)(Transaction_sync + 48))
    {
      long long v9 = *((void *)this + 5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription((std::string *)__p, v7);
        if (__p[23] >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = *(unsigned char **)__p;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
        _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: all outgoing segments complete", (uint8_t *)&buf, 0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    else
    {
      *(_OWORD *)uint64_t v30 = 0u;
      long long v31 = 0u;
      int v12 = *(_DWORD *)(v7 + 48);
      *(void *)std::string __p = MEMORY[0x263EF8330];
      *(void *)&__p[8] = 0x40000000;
      *(void *)&__p[16] = ___ZN12_GLOBAL__N_111sAttachDataERN5vinyl11TapeMessage7RequestERKNSt3__16vectorIhNS4_9allocatorIhEEEEjmb_block_invoke;
      *(void *)&unsigned char __p[24] = &__block_descriptor_tmp_142_0;
      int v38 = v12;
      char v39 = a3;
      long long v36 = (void *)v8;
      uint64_t v37 = v7 + 24;
      long long v13 = (const void **)v30[1];
      if (v30[1] != (void *)v31)
      {
        while (*((unsigned char *)*v13 + 8) != 16)
        {
          if (++v13 == (const void **)v31) {
            goto LABEL_18;
          }
        }
      }
      if (v13 == (const void **)v31) {
LABEL_18:
      }
        operator new();
      if (!v14) {
        __cxa_bad_cast();
      }
      ___ZN12_GLOBAL__N_111sAttachDataERN5vinyl11TapeMessage7RequestERKNSt3__16vectorIhNS4_9allocatorIhEEEEjmb_block_invoke((uint64_t)__p, (uint64_t)v14 + 16);
      ++*(_DWORD *)(v7 + 48);
      uint64_t v15 = *((void *)this + 5);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::longDescription(&buf, v7);
        uint64_t v17 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        int v18 = *(_DWORD *)(v7 + 48);
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v17;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v18;
        *(_WORD *)&__p[18] = 2048;
        *(void *)&__p[20] = v8;
        _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s: sending subsegment #%d (of %zu total subsegments)", __p, 0x1Cu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      __int16 v19 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v19 || (uint64_t v20 = *((void *)this + 1), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v22 = v21;
      p_unint64_t shared_weak_owners = &v21->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 96;
      buf.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
      LODWORD(buf.__r_.__value_.__r.__words[2]) = 25000;
      uint64_t v33 = 0;
      long long aBlock = 0;
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 1174405120;
      v26[2] = ___ZN21VinylQMICommandDriver25sendOutgoingTapeData_syncEjb_block_invoke;
      v26[3] = &__block_descriptor_tmp_51_9;
      v26[4] = this;
      v26[5] = v20;
      uint64_t v27 = v22;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      int v28 = a2;
      char v29 = a3;
      *(void *)std::string __p = MEMORY[0x263EF8330];
      *(void *)&__p[8] = 0x40000000;
      *(void *)&__p[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl11TapeMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      *(void *)&unsigned char __p[24] = &unk_26460E2E8;
      long long v36 = v26;
      long long v24 = _Block_copy(__p);
      long long aBlock = v24;
      if (buf.__r_.__value_.__l.__size_)
      {
        qmi::Client::send();
        long long v24 = aBlock;
      }
      if (v24) {
        _Block_release(v24);
      }
      if (v27) {
        std::__shared_weak_count::__release_weak(v27);
      }
      std::__shared_weak_count::__release_weak(v22);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v30);
    }
  }
  else
  {
    int v11 = *((void *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 67109376;
      *(_DWORD *)&__p[4] = a2;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = a2;
      _os_log_error_impl(&dword_22231A000, v11, OS_LOG_TYPE_ERROR, "sendOutgoingTapeData[txid=%d] failed due to missing transaction info for %d", __p, 0xEu);
    }
  }
  return v7 != 0;
}

void sub_22245EB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t anonymous namespace'::sCreateBasicTapeMessage(_anonymous_namespace_ *this, const VinylTransaction *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(this);
  if (!*((unsigned char *)a2 + 17)) {
    __assert_rtn("sCreateBasicTapeMessage", "VinylQMICommandDriver.cpp", 75, "\"type is not tape\" && transaction.fTapeType");
  }
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  _DWORD v8[2] = ___ZN12_GLOBAL__N_123sCreateBasicTapeMessageERK16VinylTransaction_block_invoke;
  void v8[3] = &__block_descriptor_tmp_141;
  v8[4] = a2;
  uint64_t v4 = (const void **)*((void *)this + 1);
  uint64_t v5 = (const void **)*((void *)this + 2);
  if (v4 != v5)
  {
    while (*((unsigned char *)*v4 + 8) != 1)
    {
      if (++v4 == v5) {
        goto LABEL_9;
      }
    }
  }
  if (v4 == v5) {
LABEL_9:
  }
    operator new();
  if (!v6) {
    __cxa_bad_cast();
  }
  return ___ZN12_GLOBAL__N_123sCreateBasicTapeMessageERK16VinylTransaction_block_invoke((uint64_t)v8, (uint64_t)v6 + 12);
}

void sub_22245EE34(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void VinylTransaction::longDescription(std::string *this, uint64_t a2)
{
  VinylTransaction::shortDescription(&v28, a2);
  uint64_t v4 = std::string::append(&v28, " outBytes=", 0xAuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v27, *(void *)(a2 + 32) - *(void *)(a2 + 24));
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v27;
  }
  else {
    uint64_t v6 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  unint64_t v8 = std::string::append(&v29, (const std::string::value_type *)v6, size);
  std::string v30 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a2 + 24) == *(void *)(a2 + 32))
  {
    *this = v30;
    return;
  }
  int v9 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v10 = v30.__r_.__value_.__l.__size_;
  }
  memset(&v26, 0, sizeof(v26));
  int v11 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v10 + 2);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v11 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (v9 >= 0) {
      int v12 = &v30;
    }
    else {
      int v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, " (");
  std::to_string(&v25, *(_DWORD *)(a2 + 48));
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v13 = &v25;
  }
  else {
    long long v13 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v25.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&v26, (const std::string::value_type *)v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = std::string::append(&v27, "/", 1uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v24, (*(void *)(a2 + 32) - *(void *)(a2 + 24) + 1499) / 0x5DCuLL);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v19 = &v24;
  }
  else {
    __int16 v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v24.__r_.__value_.__l.__size_;
  }
  long long v21 = std::string::append(&v28, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  int v23 = std::string::append(&v29, " seg sent)", 0xAuLL);
  *this = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0) {
      return;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    return;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_22245F14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v40 < 0) {
    operator delete(*(void **)(v41 - 96));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver25sendOutgoingTapeData_syncEjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    long long v5 = *(VinylQMICommandDriver **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          int v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I sendNextOutgoingTapeData[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
        else
        {
          VinylQMICommandDriver::sendOutgoingTapeData_sync(v5, *(_DWORD *)(a1 + 56), *(unsigned char *)(a1 + 60));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22245F358(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::finishTransactionWithProfileId_sync(os_log_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(void *)&long long v24 = a3;
  *((void *)&v24 + 1) = a4;
  uint64_t Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)a1, a2);
  if (Transaction_sync)
  {
    uint64_t v7 = Transaction_sync;
    int v9 = a1[5];
    if (v8)
    {
      uint64_t v10 = (uint64_t)v8;
      if (os_log_type_enabled(a1[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&v19, v10);
        int v11 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
        std::string::size_type v12 = v19.__r_.__value_.__r.__words[0];
        sVinylProfileIdAsString();
        long long v13 = &v19;
        if (v11 < 0) {
          long long v13 = (std::string *)v12;
        }
        if (v18 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)std::string buf = 136315394;
        long long v21 = v13;
        __int16 v22 = 2080;
        int v23 = p_p;
        _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with data=%s", buf, 0x16u);
        if (v18 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v15 = *(void *)(v10 + 56);
      v19.__r_.__value_.__s.__data_[0] = 1;
      *(_OWORD *)((char *)&v19.__r_.__value_.__l.__data_ + 1) = v24;
      (*(void (**)(void))(v15 + 16))();
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)a1, a2);
    }
    else if (os_log_type_enabled(a1[5], OS_LOG_TYPE_ERROR))
    {
      long long v16 = vinyl::asString(v7[8]);
      LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with BOOL result for %s was quite unexpected! Ignoring", (uint8_t *)&v19, 0xCu);
    }
  }
}

void sub_22245F56C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver13queryCsn_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    long long v5 = *(VinylQMICommandDriver **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *((_DWORD *)a2 + 1);
        if (!v8)
        {
          v17[0] = MEMORY[0x263EF8330];
          v17[1] = 0x40000000;
          char v18 = ___ZN21VinylQMICommandDriver13queryCsn_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2;
          std::string v19 = &__block_descriptor_tmp_52_1;
          std::string::size_type v20 = v5;
          int v21 = *(_DWORD *)(a1 + 56);
          uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
          uint64_t v13 = TlvValue;
          if (TlvValue)
          {
            int v14 = v12;
            uint64_t v22 = TlvValue;
            *(void *)std::string buf = tlv::parseV<vinyl::tlv::RespCsn>((unint64_t *)&v22, v12);
            uint64_t v24 = v15;
            if (v22)
            {
              v18((uint64_t)v17, (uint64_t *)buf);
              goto LABEL_13;
            }
            if (((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 32, v13, v14))goto LABEL_13; {
          }
            }
          long long v16 = *((void *)v5 + 5);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#E CSN response is missing the CSN TLV; that's really bad.",
              buf,
              2u);
          }
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, *(_DWORD *)(a1 + 56), 5, 0, 0);
          goto LABEL_13;
        }
        int v9 = *(_DWORD *)(a1 + 56);
        VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v9, v10, 0, 0);
      }
LABEL_13:
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22245F75C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver13queryCsn_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
}

void VinylQMICommandDriver::getFirmwareUpdateData_sync(int a1, int a2, void *aBlock)
{
  if (aBlock) {
    _Block_copy(aBlock);
  }
  operator new();
}

void sub_22245FAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver26getFirmwareUpdateData_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultI23VinylFirmwareUpdateDataNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    long long v5 = *(VinylQMICommandDriver **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          int v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E getFirmwareUpdateData[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22245FC10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::secureAuth_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      long long v5 = _Block_copy(aBlock);
    }
    else {
      long long v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E secure AKA failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_22245FDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::signPayload_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      long long v5 = _Block_copy(aBlock);
    }
    else {
      long long v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E signPayload failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222460014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::getSignIdMap_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      long long v5 = _Block_copy(aBlock);
    }
    else {
      long long v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E getSignIdMap failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222460234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::fetchProfiles_sync(int a1, int a2, void *aBlock)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0;
  }
  aBlocka = v3;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_2224604FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver18fetchProfiles_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          int v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E fetchProfiles[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_222460680(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::activateProfile_sync(int a1, int a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  uint64_t v8 = a4;
  if (aBlock) {
    uint64_t v5 = _Block_copy(aBlock);
  }
  else {
    uint64_t v5 = 0;
  }
  aBlocka = v5;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_2224609B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

__n128 ___ZN21VinylQMICommandDriver20activateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(__n128 *a1, __n128 *a2)
{
  __n128 result = a1[2];
  *a2 = result;
  return result;
}

void ___ZN21VinylQMICommandDriver20activateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          uint64_t v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E activateProfile[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_222460B58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::deactivateProfile_sync(int a1, int a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  uint64_t v8 = a4;
  if (aBlock) {
    uint64_t v5 = _Block_copy(aBlock);
  }
  else {
    uint64_t v5 = 0;
  }
  aBlocka = v5;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_222460E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

__n128 ___ZN21VinylQMICommandDriver22deactivateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(__n128 *a1, __n128 *a2)
{
  __n128 result = a1[2];
  *a2 = result;
  return result;
}

void ___ZN21VinylQMICommandDriver22deactivateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          uint64_t v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E deactivateProfile[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_222461030(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::deleteProfiles_sync(int a1, int a2, uint64_t a3, uint64_t a4, int a5, void *aBlock)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v8 = a3;
  uint64_t v9 = a4;
  if (aBlock) {
    uint64_t v6 = _Block_copy(aBlock);
  }
  else {
    uint64_t v6 = 0;
  }
  aBlocka = v6;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_22246156C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *___ZN21VinylQMICommandDriver19deleteProfiles_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEENS2_6vectorIS4_NS2_9allocatorIS4_EEEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(void *result, void **a2)
{
  if (result + 4 != a2)
  {
    uint64_t v3 = (char *)result[4];
    uint64_t v4 = (unsigned char *)result[5];
    size_t v5 = v4 - v3;
    unint64_t v6 = (v4 - v3) >> 4;
    uint64_t v7 = (uint64_t)a2[2];
    uint64_t v8 = (char *)*a2;
    if (v6 <= (v7 - (uint64_t)*a2) >> 4)
    {
      int v11 = a2 + 1;
      uint64_t v13 = (char *)a2[1];
      unint64_t v14 = (v13 - v8) >> 4;
      if (v14 < v6)
      {
        uint64_t v15 = &v3[16 * v14];
        if (v13 != v8)
        {
          __n128 result = memmove(*a2, v3, v13 - v8);
          uint64_t v8 = (char *)*v11;
        }
        size_t v5 = v4 - v15;
        if (v4 == v15) {
          goto LABEL_20;
        }
        long long v16 = v8;
        uint64_t v17 = v15;
        goto LABEL_19;
      }
    }
    else
    {
      if (v8)
      {
        a2[1] = v8;
        operator delete(v8);
        uint64_t v7 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v7 >> 3;
      if (v7 >> 3 <= v6) {
        uint64_t v9 = (v4 - v3) >> 4;
      }
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      __n128 result = std::vector<wms::tlv::Route>::__vallocate[abi:ne180100](a2, v10);
      uint64_t v12 = (char *)a2[1];
      int v11 = a2 + 1;
      uint64_t v8 = v12;
    }
    if (v4 == v3)
    {
LABEL_20:
      *int v11 = &v8[v5];
      return result;
    }
    long long v16 = v8;
    uint64_t v17 = v3;
LABEL_19:
    __n128 result = memmove(v16, v17, v5);
    goto LABEL_20;
  }
  return result;
}

void *__copy_helper_block_e8_32c58_ZTSNSt3__16vectorINS_5arrayIhLm16EEENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<std::array<unsigned char,16ul>>::__init_with_size[abi:ne180100]<std::array<unsigned char,16ul>*,std::array<unsigned char,16ul>*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
}

void __destroy_helper_block_e8_32c58_ZTSNSt3__16vectorINS_5arrayIhLm16EEENS_9allocatorIS2_EEEE(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

__n128 ___ZN21VinylQMICommandDriver19deleteProfiles_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEENS2_6vectorIS4_NS2_9allocatorIS4_EEEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_71(__n128 *a1, __n128 *a2)
{
  __n128 result = a1[2];
  *a2 = result;
  return result;
}

void ___ZN21VinylQMICommandDriver19deleteProfiles_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEENS2_6vectorIS4_NS2_9allocatorIS4_EEEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    size_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          uint64_t v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E deleteProfile[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_222461864(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getCardInfo_sync(int a1, int a2, void *aBlock)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0;
  }
  aBlocka = v3;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_222461AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver16getCardInfo_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          uint64_t v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E getCardInfo[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_222461C68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getSessionData_sync(int a1, int a2, void *aBlock)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0;
  }
  aBlocka = v3;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_222461EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver19getSessionData_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          uint64_t v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            v13[0] = 67109120;
            v13[1] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E getSessionData[txid=%d] received an error; cancelling this transaction.",
              (uint8_t *)v13,
              8u);
            int v8 = *(_DWORD *)(a2 + 4);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22246223C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t VinylQMICommandDriver::clearSessionData_sync(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1]) {
    operator new();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#E clearSessionData failed: empty data is not allowed", buf, 2u);
  }
  int v7 = 1026;
  return (*(uint64_t (**)(uint64_t, int *))(a4 + 16))(a4, &v7);
}

void sub_22246254C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getVinylSlotTestMode_sync(uint64_t a1, uint64_t a2)
{
  v16[4] = *MEMORY[0x263EF8340];
  memset(v12, 0, sizeof(v12));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v5 = *(void *)(a1 + 8), (unint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  p_unint64_t shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  uint64_t v10 = QMIServiceMsg::create();
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1174405120;
  void v14[2] = ___ZN21VinylQMICommandDriver25getVinylSlotTestMode_syncENSt3__18functionIFvbEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_82_7;
  uint8_t v14[4] = a1;
  v14[5] = v5;
  uint64_t v15 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl23EnableVinylSlotTestMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460E310;
  aBlock[4] = v14;
  uint64_t v9 = _Block_copy(aBlock);
  int v11 = v9;
  if (v10)
  {
    qmi::Client::send();
    uint64_t v9 = v11;
  }
  if (v9) {
    _Block_release(v9);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v16);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::__release_weak(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_222462730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v32);
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  std::__shared_weak_count::__release_weak(v31);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver25getVinylSlotTestMode_syncENSt3__18functionIFvbEEE_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (!a1[5])
      {
LABEL_16:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
      if (*((_DWORD *)a2 + 1))
      {
        int v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v16 = 136315138;
          *(void *)&v16[4] = qmi::asString();
          _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Failed to retrieve vinyl slot test mode %s", v16, 0xCu);
        }
        std::function<void ()(BOOL)>::operator()((uint64_t)(a1 + 7), 0);
        goto LABEL_16;
      }
      uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
      uint64_t v11 = TlvValue;
      if (!TlvValue) {
        goto LABEL_12;
      }
      int v12 = v10;
      *(void *)long long v16 = TlvValue;
      char v13 = tlv::parseV<vinyl::tlv::VinylSlotTestModeResp>((unint64_t *)v16, v10);
      if (*(void *)v16)
      {
        char v14 = v13 != 0;
LABEL_15:
        std::function<void ()(BOOL)>::operator()((uint64_t)(a1 + 7), v14);
        goto LABEL_16;
      }
      if ((((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v11, v12) & 1) == 0)
      {
LABEL_12:
        uint64_t v15 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long v16 = 0;
          _os_log_error_impl(&dword_22231A000, v15, OS_LOG_TYPE_ERROR, "Did not status for vinyl slot test mode, defaulting to false", v16, 2u);
        }
      }
      char v14 = 0;
      goto LABEL_15;
    }
  }
}

void sub_22246293C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_2224629A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void VinylQMICommandDriver::enableVinylSlotTestMode_sync(uint64_t a1, char a2, uint64_t a3)
{
  v21[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  unint64_t v6 = (const void **)__p[1];
  if (__p[1] != (void *)v17)
  {
    while (*((unsigned char *)*v6 + 8) != 16)
    {
      if (++v6 == (const void **)v17) {
        goto LABEL_8;
      }
    }
  }
  if (v6 == (const void **)v17) {
LABEL_8:
  }
    operator new();
  if (!v7) {
    __cxa_bad_cast();
  }
  void v7[9] = a2;
  int v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (uint64_t v9 = *(void *)(a1 + 8), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  p_unint64_t shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  uint64_t v14 = QMIServiceMsg::create();
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1174405120;
  unint64_t v19[2] = ___ZN21VinylQMICommandDriver28enableVinylSlotTestMode_syncEbNSt3__18functionIFvbEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_85_4;
  _OWORD v19[4] = a1;
  v19[5] = v9;
  std::string::size_type v20 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v21, a3);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl23EnableVinylSlotTestMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460E310;
  aBlock[4] = v19;
  char v13 = _Block_copy(aBlock);
  uint64_t v15 = v13;
  if (v14)
  {
    qmi::Client::send();
    char v13 = v15;
  }
  if (v13) {
    _Block_release(v13);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v21);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_222462D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v31);
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  std::__shared_weak_count::__release_weak(v32);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver28enableVinylSlotTestMode_syncEbNSt3__18functionIFvbEEE_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        if (*(_DWORD *)(a2 + 4))
        {
          int v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            int v10 = 136315138;
            uint64_t v11 = qmi::asString();
            _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Failed to set vinyl slot test mode %s", (uint8_t *)&v10, 0xCu);
            char v9 = *(_DWORD *)(a2 + 4) == 0;
          }
          else
          {
            char v9 = 0;
          }
        }
        else
        {
          char v9 = 1;
        }
        std::function<void ()(BOOL)>::operator()((uint64_t)(a1 + 7), v9);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_222462EDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getTapeEid_sync()
{
}

void sub_222463408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21VinylQMICommandDriver15getTapeEid_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(_DWORD *)a2 = *(_DWORD *)(v2 + 12);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(v2 + 16);
  return result;
}

void ___ZN21VinylQMICommandDriver15getTapeEid_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(VinylQMICommandDriver **)(a1 + 32);
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *((_DWORD *)a2 + 1);
        if (v8)
        {
          char v9 = *((void *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E getTapeEid[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            int v8 = *((_DWORD *)a2 + 1);
          }
          int v11 = *(_DWORD *)(a1 + 56);
          if (v8 == 3) {
            uint64_t v12 = 9;
          }
          else {
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
          }
          goto LABEL_18;
        }
        v19[0] = MEMORY[0x263EF8330];
        v19[1] = 0x40000000;
        std::string::size_type v20 = ___ZN21VinylQMICommandDriver15getTapeEid_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_88;
        int v21 = &__block_descriptor_tmp_89_1;
        uint64_t v22 = v5;
        int v23 = *(_DWORD *)(a1 + 56);
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        uint64_t v15 = TlvValue;
        if (TlvValue)
        {
          int v16 = v14;
          uint64_t v24 = TlvValue;
          *(void *)std::string buf = tlv::parseV<vinyl::tlv::RespTapeEidResultEid>((unint64_t *)&v24, v14);
          uint64_t v26 = v17;
          if (v24)
          {
            v20((uint64_t)v19, (uint64_t *)buf);
            goto LABEL_18;
          }
          if (((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 17, v15, v16))goto LABEL_18; {
        }
          }
        char v18 = *((void *)v5 + 5);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#E CSN response is missing the CSN TLV; that's really bad.",
            buf,
            2u);
        }
        VinylQMICommandDriver::cancelTransactionWithError_sync(v5, *(_DWORD *)(a1 + 56), 5, 0, 0);
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22246369C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver15getTapeEid_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_88(uint64_t a1, uint64_t *a2)
{
}

void VinylQMICommandDriver::enableTapeProfile_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E enableTapeProfile failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222463894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::disableTapeProfile_sync(uint64_t a1, int a2, void *a3, int a4, void *aBlock)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      unint64_t v6 = _Block_copy(aBlock);
    }
    else {
      unint64_t v6 = 0;
    }
    void v8[3] = v6;
    VinylQMICommandDriver::createTransaction_sync();
  }
  int v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#E disableTapeProfile failed: empty data is not allowed", (uint8_t *)v8, 2u);
  }
  v9[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v9);
  if (v9[0] == 1 && __p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_222463AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::deleteTapeProfile_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E deleteTapeProfile failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222463CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::getTapeEuiccInfo_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeEuiccInfo failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222463F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeSetProprietaryData_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeSetProprietaryData failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_22246413C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::getTapeEuiccChallenge_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E getTapeEuiccChallenge failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222464360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeAuthenticateServer_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeAuthenticateServer failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222464584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapePrepareDownload_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapePrepareDownload failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_2224647A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeLoadBoundProfilePackage_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    aBlocka = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeLoadBoundProfilePackage failed: empty data is not allowed", buf, 2u);
  }
  v9[0] = 2;
  LOWORD(v10) = 4;
  BYTE2(v10) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v9);
  if (v9[0] == 1 && v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_222464AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,char a25,void *__p,uint64_t a27)
{
  if (a25 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeListProfilesInfo_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeListProfilesInfo failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222464D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeListNotifications_sync(int a1, int a2, void *aBlock)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0;
  }
  aBlocka = v3;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_222464EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeGetNotification_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeGetNotification failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_2224650EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeDeleteNotification_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeDeleteNotification failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_222465310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeResetMemory_sync(int a1, int a2, void *aBlock)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0;
  }
  aBlocka = v3;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_2224654C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeCancelSession_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E tapeCancelSession failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_2224656C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeSetNickname_sync(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    if (aBlock) {
      uint64_t v5 = _Block_copy(aBlock);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v7[3] = v5;
    VinylQMICommandDriver::createTransaction_sync();
  }
  unint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E TapeSetNickname failed: empty data is not allowed", (uint8_t *)v7, 2u);
  }
  v8[0] = 2;
  LOWORD(__p) = 4;
  BYTE2(__p) = 0;
  (*((void (**)(void *, char *))aBlock + 2))(aBlock, v8);
  if (v8[0] == 1 && __p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_2224658E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeGetRulesAuthTable_sync(int a1, int a2, void *aBlock)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0;
  }
  aBlocka = v3;
  VinylQMICommandDriver::createTransaction_sync();
}

void sub_222465A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeGetDeviceCapabilities_sync()
{
}

void sub_222465FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 12);
  return result;
}

void ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(os_log_t **)(a1 + 32);
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (!*(void *)(a1 + 40))
      {
LABEL_38:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
      int v8 = *((_DWORD *)a2 + 1);
      if (v8)
      {
        char v9 = v5[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v10;
          _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E getDeviceCapabilities[txid=%d] received an error; cancelling this transaction.",
            buf,
            8u);
          int v8 = *((_DWORD *)a2 + 1);
        }
        int v11 = *(_DWORD *)(a1 + 56);
        VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, v11, v12, 0, 0);
        goto LABEL_38;
      }
      *(void *)std::string buf = 0;
      long long v56 = buf;
      uint64_t v57 = 0x5002000000;
      long long v58 = __Block_byref_object_copy__95;
      long long v59 = __Block_byref_object_dispose__96;
      long long v60 = 0u;
      long long v61 = 0u;
      char v62 = 0;
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 0x40000000;
      long long v48 = (void (*)(uint64_t, uint8_t *))___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_97;
      uint64_t v49 = &__block_descriptor_tmp_99_3;
      uint64_t v50 = v5;
      int v51 = *(_DWORD *)(a1 + 56);
      uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
      uint64_t v15 = TlvValue;
      if (TlvValue)
      {
        int v16 = v14;
        *(void *)long long v65 = TlvValue;
        *(_DWORD *)long long v63 = tlv::parseV<vinyl::tlv::RespTapeDeviceCapsResultTransactionId>((unint64_t *)v65, v14);
        if (*(void *)v65)
        {
          v48((uint64_t)v47, v63);
          goto LABEL_12;
        }
        if (((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v15, v16))
        {
LABEL_12:
          v43[0] = MEMORY[0x263EF8330];
          v43[1] = 0x40000000;
          long long v44 = ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_100;
          long long v45 = &unk_26460E178;
          long long v46 = buf;
          uint64_t v17 = (capabilities::ct *)qmi::MessageBase::findTlvValue(a2);
          std::string v19 = v17;
          if (v17)
          {
            int v20 = v18;
            *(void *)long long v65 = v17;
            unint64_t v21 = tlv::parseV<vinyl::tlv::RespTapeDeviceCapsRadioRelVers>((unsigned char **)v65, v18);
            *(_DWORD *)long long v63 = v21;
            LOWORD(v64) = WORD2(v21);
            if (*(void *)v65)
            {
              uint64_t v17 = (capabilities::ct *)v44((uint64_t)v43, v63);
              LODWORD(v19) = 1;
            }
            else
            {
              uint64_t v17 = (capabilities::ct *)((uint64_t (*)(void, uint64_t, capabilities::ct *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 17, v19, v20);
              LODWORD(v19) = v17;
            }
          }
          if ((capabilities::ct::supports5G(v17) & v19) == 1)
          {
            v39[0] = MEMORY[0x263EF8330];
            v39[1] = 0x40000000;
            int v40 = ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2_103;
            uint64_t v41 = &unk_26460E1A0;
            long long v42 = buf;
            uint64_t v24 = qmi::MessageBase::findTlvValue(a2);
            uint64_t v26 = v24;
            if (v24)
            {
              int v27 = v25;
              *(void *)long long v65 = v24;
              uint64_t v28 = tlv::parseV<vinyl::tlv::RespTapeDeviceCapsRadioRel5GVers>((unsigned char **)v65, v25);
              *(_WORD *)long long v63 = v28;
              v63[2] = BYTE2(v28);
              if (*(void *)v65) {
                v40((uint64_t)v39, v63);
              }
              else {
                ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 18, v26, v27);
              }
            }
          }
          if (v19)
          {
            int v29 = *(_DWORD *)(a1 + 56);
            long long v30 = *(_OWORD *)(v56 + 56);
            long long v52 = *(_OWORD *)(v56 + 40);
            long long v53 = v30;
            uint8_t v54 = v56[72];
            uint64_t Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v5, v29);
            if (Transaction_sync)
            {
              uint64_t v32 = Transaction_sync;
              uint64_t v34 = v5[5];
              if (v33)
              {
                uint64_t v35 = (uint64_t)v33;
                if (os_log_type_enabled(v5[5], OS_LOG_TYPE_DEFAULT))
                {
                  VinylTransaction::shortDescription((std::string *)v65, v35);
                  long long v36 = (SBYTE6(v66) & 0x80u) == 0 ? v65 : *(unsigned char **)v65;
                  *(_DWORD *)long long v63 = 136315138;
                  long long v64 = v36;
                  _os_log_impl(&dword_22231A000, v34, OS_LOG_TYPE_DEFAULT, "#I %s completed.", v63, 0xCu);
                  if (SBYTE6(v66) < 0) {
                    operator delete(*(void **)v65);
                  }
                }
                uint64_t v37 = *(void *)(v35 + 56);
                v65[0] = 1;
                *(_OWORD *)&v65[1] = v52;
                long long v66 = v53;
                uint8_t v67 = v54;
                (*(void (**)(uint64_t, unsigned char *))(v37 + 16))(v37, v65);
                VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)v5, v29);
              }
              else if (os_log_type_enabled(v5[5], OS_LOG_TYPE_ERROR))
              {
                int v38 = vinyl::asString(v32[8]);
                *(_DWORD *)long long v65 = 136315138;
                *(void *)&v65[4] = v38;
                _os_log_error_impl(&dword_22231A000, v34, OS_LOG_TYPE_ERROR, "Vinyl Response for command with deice cap result for %s was quite unexpected! Ignoring", v65, 0xCu);
              }
            }
            goto LABEL_37;
          }
          uint64_t v22 = v5[5];
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v65 = 0;
            int v23 = "#E Did not actually do something.";
            goto LABEL_35;
          }
          goto LABEL_36;
        }
      }
      uint64_t v22 = v5[5];
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v65 = 0;
        int v23 = "#E TxId response is missing the TLV; that's really bad.";
LABEL_35:
        _os_log_impl(&dword_22231A000, v22, OS_LOG_TYPE_DEFAULT, v23, v65, 2u);
      }
LABEL_36:
      VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, *(_DWORD *)(a1 + 56), 5, 0, 0);
LABEL_37:
      _Block_object_dispose(buf, 8);
      goto LABEL_38;
    }
  }
}

void sub_2224665D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__95(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_97(uint64_t a1, _DWORD *a2)
{
  if (*a2 != *(_DWORD *)(a1 + 40))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v3 = 0;
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#E TxId response is missing the TLV; that's really bad.",
        v3,
        2u);
    }
  }
}

uint64_t ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_100(uint64_t result, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v2 + 40) = *a2;
    *(_WORD *)(v2 + 41) = 0;
  }
  if (a2[2])
  {
    uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v3 + 46) = a2[2];
    *(_WORD *)(v3 + 47) = 0;
  }
  if (a2[3])
  {
    uint64_t v4 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v4 + 49) = a2[3];
    *(_WORD *)(v4 + 50) = 0;
  }
  if (a2[4])
  {
    uint64_t v5 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v5 + 52) = a2[4];
    *(_WORD *)(v5 + 53) = 0;
  }
  if (a2[1])
  {
    uint64_t v6 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v6 + 43) = a2[1];
    *(_WORD *)(v6 + 44) = 0;
  }
  if (a2[5])
  {
    uint64_t v7 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v7 + 55) = a2[5];
    *(_WORD *)(v7 + 56) = 0;
  }
  return result;
}

uint64_t ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2_103(uint64_t result, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v2 + 64) = *a2;
    *(_WORD *)(v2 + 65) = 0;
  }
  if (a2[1])
  {
    uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v3 + 67) = a2[1];
    *(_WORD *)(v3 + 68) = 0;
  }
  if (a2[2])
  {
    uint64_t v4 = *(void *)(*(void *)(result + 32) + 8);
    *(unsigned char *)(v4 + 70) = a2[2];
    *(_WORD *)(v4 + 71) = 0;
  }
  return result;
}

void VinylQMICommandDriver::setVirtualSimMode_sync(void *a1, char a2, int a3, uint64_t a4)
{
  v27[4] = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3)
    {
      uint64_t v6 = a1[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        LOWORD(aBlock[0]) = 0;
        _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "dual vsim unsupported", (uint8_t *)aBlock, 2u);
      }
      __int16 v22 = 2818;
      uint64_t v7 = *(void *)(a4 + 24);
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, __int16 *))(*(void *)v7 + 48))(v7, &v22);
    }
    else if (a1[26])
    {
      int v10 = a1[5];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(aBlock[0]) = 0;
        _os_log_error_impl(&dword_22231A000, v10, OS_LOG_TYPE_ERROR, "previous vsim enablement waiting for response, busy", (uint8_t *)aBlock, 2u);
      }
      __int16 v21 = 1282;
      uint64_t v11 = *(void *)(a4 + 24);
      if (!v11) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, __int16 *))(*(void *)v11 + 48))(v11, &v21);
    }
    else
    {
      memset(v20, 0, sizeof(v20));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v20);
      uint64_t v12 = (std::__shared_weak_count *)a1[2];
      if (!v12 || (uint64_t v13 = a1[1], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v15 = v14;
      p_unint64_t shared_weak_owners = &v14->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      uint64_t v18 = QMIServiceMsg::create();
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 1174405120;
      v25[2] = ___ZN21VinylQMICommandDriver22setVirtualSimMode_syncEbbNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE_block_invoke;
      v25[3] = &__block_descriptor_tmp_109_1;
      v25[4] = a1;
      v25[5] = v13;
      uint64_t v26 = v15;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::__value_func[abi:ne180100]((uint64_t)v27, a4);
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl17VSimEnableMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      aBlock[3] = &unk_26460E388;
      aBlock[4] = v25;
      uint64_t v17 = _Block_copy(aBlock);
      std::string v19 = v17;
      if (v18)
      {
        qmi::Client::send();
        uint64_t v17 = v19;
      }
      if (v17) {
        _Block_release(v17);
      }
      std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::~__value_func[abi:ne180100](v27);
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      std::__shared_weak_count::__release_weak(v15);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v20);
    }
  }
  else
  {
    int v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(aBlock[0]) = 0;
      _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "disabling vsim mode unsupported", (uint8_t *)aBlock, 2u);
    }
    __int16 v23 = 2818;
    uint64_t v9 = *(void *)(a4 + 24);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, __int16 *))(*(void *)v9 + 48))(v9, &v23);
  }
}

void sub_222466AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::~__value_func[abi:ne180100](v34);
  if (a33) {
    std::__shared_weak_count::__release_weak(a33);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  std::__shared_weak_count::__release_weak(v33);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver22setVirtualSimMode_syncEbbNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE_block_invoke(void *a1, qmi::MessageBase *a2)
{
  v33[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (!a1[5])
      {
LABEL_36:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
      int v8 = *((_DWORD *)a2 + 1);
      if (!v8)
      {
        std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)(a1 + 7));
        uint64_t v10 = v5 + 184;
        if (buf != (unsigned char *)(v5 + 184))
        {
          uint64_t v11 = v32;
          uint64_t v12 = *(void *)(v5 + 208);
          if (v32 == buf)
          {
            if (v12 == v10)
            {
              memset(v33, 0, 24);
              (*(void (**)(unsigned char *, void *))(*(void *)buf + 24))(buf, v33);
              (*(void (**)(unsigned char *))(*(void *)v32 + 32))(v32);
              uint64_t v32 = 0;
              (*(void (**)(void, unsigned char *))(**(void **)(v5 + 208) + 24))(*(void *)(v5 + 208), buf);
              (*(void (**)(void))(**(void **)(v5 + 208) + 32))(*(void *)(v5 + 208));
              *(void *)(v5 + 208) = 0;
              uint64_t v32 = buf;
              (*(void (**)(void *, uint64_t))(v33[0] + 24))(v33, v5 + 184);
              (*(void (**)(void *))(v33[0] + 32))(v33);
            }
            else
            {
              (*(void (**)(unsigned char *, uint64_t))(*(void *)buf + 24))(buf, v5 + 184);
              (*(void (**)(unsigned char *))(*(void *)v32 + 32))(v32);
              uint64_t v32 = *(unsigned char **)(v5 + 208);
            }
            *(void *)(v5 + 208) = v10;
          }
          else if (v12 == v10)
          {
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 24))(v5 + 184, buf);
            (*(void (**)(void))(**(void **)(v5 + 208) + 32))(*(void *)(v5 + 208));
            *(void *)(v5 + 208) = v32;
            uint64_t v32 = buf;
          }
          else
          {
            uint64_t v32 = *(unsigned char **)(v5 + 208);
            *(void *)(v5 + 208) = v11;
          }
        }
        std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::~__value_func[abi:ne180100](buf);
        goto LABEL_36;
      }
      if (v8 == 57)
      {
        __int16 v30 = 2818;
        uint64_t v9 = a1[10];
        if (!v9) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, __int16 *))(*(void *)v9 + 48))(v9, &v30);
        LOBYTE(v30) = 0;
        goto LABEL_36;
      }
      uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
      uint64_t v15 = TlvValue;
      if (TlvValue)
      {
        int v16 = v14;
        *(void *)std::string buf = TlvValue;
        char v17 = tlv::parseV<vinyl::tlv::RespVSimEnableError>((unint64_t *)buf, v14);
        if (*(void *)buf)
        {
          char v18 = v17;
          if (v17 == 2)
          {
            if (*(unsigned char *)(v5 + 216))
            {
              __int16 v28 = 257;
              uint64_t v19 = a1[10];
              if (!v19) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t, __int16 *))(*(void *)v19 + 48))(v19, &v28);
              LOBYTE(v28) = 0;
            }
            else
            {
              uint64_t v24 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_error_impl(&dword_22231A000, v24, OS_LOG_TYPE_ERROR, "previous vsim enablement waiting for indication, busy", buf, 2u);
              }
              __int16 v29 = 1282;
              uint64_t v25 = a1[10];
              if (!v25) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t, __int16 *))(*(void *)v25 + 48))(v25, &v29);
              LOBYTE(v29) = 0;
            }
            goto LABEL_36;
          }
LABEL_22:
          int v20 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            uint64_t v26 = qmi::asString();
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v26;
            _os_log_error_impl(&dword_22231A000, v20, OS_LOG_TYPE_ERROR, "Failed to dynamically enable VSIM: %s", buf, 0xCu);
          }
          if (v18 == 3) {
            char v21 = 3;
          }
          else {
            char v21 = 0;
          }
          if (v18 == 1) {
            char v22 = 11;
          }
          else {
            char v22 = v21;
          }
          v27[0] = 2;
          v27[1] = v22;
          uint64_t v23 = a1[10];
          if (!v23) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 48))(v23, v27);
          v27[0] = 0;
          goto LABEL_36;
        }
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v15, v16);
      }
      char v18 = 0;
      goto LABEL_22;
    }
  }
}

void sub_222467068(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c54_ZTSNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_222467108(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c54_ZTSNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t VinylQMICommandDriver::start_sync(VinylQMICommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Command driver start called", v4, 2u);
  }
  return qmi::Client::start((VinylQMICommandDriver *)((char *)this + 96));
}

uint64_t VinylQMICommandDriver::stop_sync(VinylQMICommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Command driver STOP called", v4, 2u);
  }
  std::vector<std::unique_ptr<VinylTransaction>>::__clear[abi:ne180100]((void *)this + 20);
  return qmi::Client::stop((VinylQMICommandDriver *)((char *)this + 96));
}

void VinylQMICommandDriver::dumpState_sync(VinylQMICommandDriver *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 32);
    uint64_t v4 = (uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3;
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I fNextTxid=%d; %lu outstanding transactions",
      (uint8_t *)&buf,
      0x12u);
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 20);
  for (uint64_t i = (uint64_t *)*((void *)this + 21); v5 != i; ++v5)
  {
    uint64_t v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&buf, *v5);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = p_buf;
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s", v10, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
}

void VinylTransactionWithBoolResult::~VinylTransactionWithBoolResult(VinylTransactionWithBoolResult *this)
{
  *(void *)this = &unk_26D4CA820;
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)this = &unk_26D4CA618;
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  VinylTransactionWithBoolResult::~VinylTransactionWithBoolResult(this);

  JUMPOUT(0x223C9A950);
}

void VinylTransactionWithProfileIdResult::~VinylTransactionWithProfileIdResult(VinylTransactionWithProfileIdResult *this)
{
  *(void *)this = &unk_26D4CA880;
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)this = &unk_26D4CA618;
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  VinylTransactionWithProfileIdResult::~VinylTransactionWithProfileIdResult(this);

  JUMPOUT(0x223C9A950);
}

void VinylTransactionWithFirmwareUpdateDataResult::~VinylTransactionWithFirmwareUpdateDataResult(VinylTransactionWithFirmwareUpdateDataResult *this)
{
  *(void *)this = &unk_26D4CA8B0;
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)this = &unk_26D4CA618;
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  VinylTransactionWithFirmwareUpdateDataResult::~VinylTransactionWithFirmwareUpdateDataResult(this);

  JUMPOUT(0x223C9A950);
}

void VinylTapeTransactionWithDeviceCapabilitiesResult::~VinylTapeTransactionWithDeviceCapabilitiesResult(VinylTapeTransactionWithDeviceCapabilitiesResult *this)
{
  *(void *)this = &unk_26D4CAA20;
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)this = &unk_26D4CA618;
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  VinylTapeTransactionWithDeviceCapabilitiesResult::~VinylTapeTransactionWithDeviceCapabilitiesResult(this);

  JUMPOUT(0x223C9A950);
}

void VinylTransactionWithDataResult::~VinylTransactionWithDataResult(VinylTransactionWithDataResult *this)
{
  *(void *)this = &unk_26D4CA648;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26D4CA850;
  int v3 = (const void *)*((void *)this + 7);
  if (v3) {
    _Block_release(v3);
  }
  *(void *)this = &unk_26D4CA618;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  const void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26D4CA648;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26D4CA850;
  int v3 = (const void *)*((void *)this + 7);
  if (v3) {
    _Block_release(v3);
  }
  *(void *)this = &unk_26D4CA618;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x223C9A950);
}

void VinylTransactionResultBase<std::vector<unsigned char>>::sendError(uint64_t a1)
{
}

void sub_222467880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *__p, uint64_t a11)
{
  if (a9 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t VinylTransactionResultBase<BOOL>::sendError(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  char v6 = 2;
  char v8 = a4;
  __int16 v7 = a2 | (a3 << 8);
  return (*(uint64_t (**)(void))(v4 + 16))();
}

uint64_t VinylTransactionResultBase<std::array<unsigned char,16ul>>::sendError(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 56);
  char v6 = 2;
  char v8 = a4;
  __int16 v7 = a2 | (a3 << 8);
  return (*(uint64_t (**)(void))(v4 + 16))();
}

void VinylTransactionResultBase<VinylFirmwareUpdateData>::sendError(uint64_t a1)
{
}

void sub_2224679F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (a10 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t VinylTransactionResultBase<TapeDeviceCapabilities>::sendError(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  char v6 = 2;
  char v8 = a4;
  __int16 v7 = a2 | (a3 << 8);
  return (*(uint64_t (**)(void))(v4 + 16))();
}

void std::vector<std::unique_ptr<VinylTransaction>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<VinylTransaction>>::__clear[abi:ne180100](v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<VinylTransaction>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  int v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    __n128 result = v4;
    *int v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *VinylTransactionResultBase<BOOL>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA820;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<BOOL>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA820;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x223C9A950);
}

void *VinylTransactionResultBase<std::vector<unsigned char>>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA850;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<std::vector<unsigned char>>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA850;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x223C9A950);
}

void *VinylTransactionResultBase<std::array<unsigned char,16ul>>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA880;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<std::array<unsigned char,16ul>>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA880;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x223C9A950);
}

void *VinylTransactionResultBase<VinylFirmwareUpdateData>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA8B0;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<VinylFirmwareUpdateData>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CA8B0;
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x223C9A950);
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v5 = a5;
  char v6 = __src;
  uint64_t v10 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      int v16 = operator new(v15);
    }
    else {
      int v16 = 0;
    }
    uint64_t v26 = &v13[(void)v16];
    int v27 = &v13[(void)v16 + v5];
    __int16 v28 = v26;
    do
    {
      char v29 = *v6++;
      *v28++ = v29;
      --v5;
    }
    while (v5);
    __int16 v30 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      long long v31 = __dst;
      do
      {
        char v32 = *--v31;
        *--uint64_t v26 = v32;
      }
      while (v31 != v30);
      uint64_t v10 = *(unsigned char **)(a1 + 8);
    }
    uint64_t v33 = (char *)v16 + v15;
    if (v10 != __dst) {
      memmove(v27, __dst, v10 - __dst);
    }
    uint64_t v34 = *(char **)a1;
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = &v27[v10 - __dst];
    *(void *)(a1 + 16) = v33;
    if (v34)
    {
      operator delete(v34);
    }
    return;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    char v18 = &__src[a5];
    int v20 = *(unsigned char **)(a1 + 8);
LABEL_17:
    char v21 = &__dst[v5];
    char v22 = &v20[-v5];
    uint64_t v23 = v20;
    if (&v20[-v5] < v10)
    {
      uint64_t v24 = (char *)(&v10[v5] - v20);
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[v5], __dst, v20 - v21);
    }
    if (v18 != v6)
    {
      memmove(__dst, v6, v18 - v6);
    }
    return;
  }
  char v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  int v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

uint64_t ___ZN12_GLOBAL__N_119sCreateBasicMessageERKNSt3__110shared_ptrIK8RegistryEERK16VinylTransaction_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(unsigned char *)a2 = *(unsigned char *)(v2 + 8);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v2 + 12);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(v2 + 16);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::getSize()
{
  return tlv::size<wms::tlv::MessageTag>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<vinyl::tlv::ReqCommand>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::clone()
{
}

void *___ZN12_GLOBAL__N_111sAttachDataERN5vinyl7Message7RequestERKNSt3__16vectorIhNS4_9allocatorIhEEEEjm_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 48);
  *(_WORD *)(a2 + 2) = v2;
  char v3 = *(uint64_t **)(a1 + 40);
  *(_WORD *)a2 = *(void *)(a1 + 32);
  uint64_t v5 = *v3;
  uint64_t v4 = (char *)v3[1];
  char v6 = (char *)(v5 + 1500 * v2);
  if ((unint64_t)(v4 - v6) <= 0x5DC) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v6 + 1500;
  }
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(a2 + 8), v6, v7, v7 - v6);
}

void *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CA948;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CA948;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::getSize(uint64_t a1)
{
  return tlv::size<uim::tlv::WriteTransparent>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<vinyl::tlv::PayloadData>((_WORD **)a2, a1 + 16);
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::clone()
{
}

void sub_2224684F4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40970CA704);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_123sCreateBasicTapeMessageERK16VinylTransaction_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(unsigned char *)a2 = *(unsigned char *)(v2 + 8);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v2 + 12);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(v2 + 16);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::getSize()
{
  return tlv::size<wms::tlv::MessageTag>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<vinyl::tlv::ReqCommand>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::clone()
{
}

void *___ZN12_GLOBAL__N_111sAttachDataERN5vinyl11TapeMessage7RequestERKNSt3__16vectorIhNS4_9allocatorIhEEEEjmb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 48);
  *(_WORD *)(a2 + 4) = v2;
  char v3 = *(uint64_t **)(a1 + 40);
  *(_WORD *)(a2 + 2) = *(void *)(a1 + 32);
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 52);
  uint64_t v5 = *v3;
  uint64_t v4 = (char *)v3[1];
  char v6 = (char *)(v5 + 1500 * v2);
  if ((unint64_t)(v4 - v6) <= 0x5DC) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v6 + 1500;
  }
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(a2 + 8), v6, v7, v7 - v6);
}

void *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CA9E8;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CA9E8;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::getSize(uint64_t a1)
{
  return tlv::size<vinyl::tlv::TapeRequestPayloadData>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<vinyl::tlv::TapeRequestPayloadData>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::clone()
{
}

void sub_222468810(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C4022169CEDLL);
  _Unwind_Resume(a1);
}

void *std::vector<std::array<unsigned char,16ul>>::__init_with_size[abi:ne180100]<std::array<unsigned char,16ul>*,std::array<unsigned char,16ul>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    __n128 result = std::vector<wms::tlv::Route>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222468894(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *VinylTransactionResultBase<TapeDeviceCapabilities>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CAA20;
  unsigned int v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  char v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<TapeDeviceCapabilities>::~VinylTransactionResultBase(void *a1)
{
  *a1 = &unk_26D4CAA20;
  unsigned int v2 = (const void *)a1[7];
  if (v2) {
    _Block_release(v2);
  }
  *a1 = &unk_26D4CA618;
  char v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x223C9A950);
}

void std::shared_ptr<VinylCommandDriver>::shared_ptr[abi:ne180100]<VinylCommandDriver,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_222468A94(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1}::operator() const(VinylCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222468ABC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<VinylCommandDriver *,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver *)#1},std::allocator<VinylCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<VinylCommandDriver *,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver *)#1},std::allocator<VinylCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<VinylCommandDriver *,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver *)#1},std::allocator<VinylCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1}::operator() const(VinylCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZNK3qmi6Client13setIndHandlerIN5vinyl4Info10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222468CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIN5vinyl8TapeInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222468DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIN5vinyl10VSimEnable10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222468EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v6[0] = result;
  v6[1] = v4;
  if (result)
  {
    uint64_t result = tlv::parseV<vinyl::tlv::IndResult>(v6, v4);
    if (*(unsigned char *)a2)
    {
      *(_WORD *)(a2 + 12) = v5;
    }
    else
    {
      *(_DWORD *)(a2 + 12) = v5;
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 4) = result;
    if (!v6[0]) {
      *(unsigned char *)a2 = 0;
    }
  }
  return result;
}

uint64_t qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v6[0] = result;
  v6[1] = v4;
  if (result)
  {
    uint64_t result = tlv::parseV<vinyl::tlv::IndTapeIndResult>(v6, v4);
    if (*(unsigned char *)a2)
    {
      *(_DWORD *)(a2 + 12) = v5;
      *(_WORD *)(a2 + 16) = WORD2(v5);
    }
    else
    {
      *(void *)(a2 + 12) = v5;
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 4) = result;
    if (!v6[0]) {
      *(unsigned char *)a2 = 0;
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void qmi::MessageBase::tryTlv<vinyl::tlv::PayloadData>(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  v12[0] = qmi::MessageBase::findTlvValue(a1);
  v12[1] = v4;
  if (v12[0])
  {
    tlv::parseV<vinyl::tlv::PayloadData>(v12, v4, &v9);
    int v5 = *a3;
    *((_DWORD *)a3 + 2) = v9;
    if (v5)
    {
      char v6 = (void *)*((void *)a3 + 2);
      if (v6)
      {
        *((void *)a3 + 3) = v6;
        operator delete(v6);
        int v7 = *a3;
      }
      else
      {
        int v7 = 1;
      }
      size_t v8 = (void *)v10;
      *((_OWORD *)a3 + 1) = v10;
      *((void *)a3 + 4) = v11;
    }
    else
    {
      size_t v8 = (void *)v10;
      *((_OWORD *)a3 + 1) = v10;
      *((void *)a3 + 4) = v11;
      int v7 = 1;
      *a3 = 1;
    }
    if (!v12[0] && v7)
    {
      if (v8)
      {
        *((void *)a3 + 3) = v8;
        operator delete(v8);
      }
      *a3 = 0;
    }
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22246920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl11TapeMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222469310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<vinyl::tlv::ReqProfileId>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 16)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::getSize()
{
  return tlv::size<wds::tlv::Ipv4AddressExtended>();
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::write(uint64_t a1, __n128 **a2)
{
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  unint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2)->n128_i64 + 3;
  *a2 = (__n128 *)v5;
  tlv::writeV<vinyl::tlv::ReqProfileId>(a2, (__n128 *)(a1 + 9));
  char v6 = (char *)*a2 - v5;
  v4->n128_u8[0] = v3;
  *(unsigned __int16 *)((char *)v4->n128_u16 + 1) = (unsigned __int16)v6;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CAB18;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CAB18;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::getSize(uint64_t a1)
{
  return tlv::size<vinyl::tlv::ReqProfileIdList>((void *)(a1 + 16));
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<vinyl::tlv::ReqProfileIdList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::clone()
{
}

void sub_22246978C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl23EnableVinylSlotTestMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222469874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::getSize()
{
  return tlv::size<wms::tlv::MemoryStorageIdentification>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<vinyl::tlv::TapeReqGetEid>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl17TapeGetEidMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222469B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::getSize()
{
  return tlv::size<wms::tlv::MemoryStorageIdentification>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<vinyl::tlv::TapeReqGetEid>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl32TapeGetDeviceCapabilitiesMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222469D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__function::__value_func<void ()(ctu::result<BOOL,VinylError>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl17VSimEnableMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222469EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *EurOTASPService::EurOTASPService(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  xpc_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  OTASPService::OTASPService();
  if (object) {
    dispatch_release(object);
  }
  *a1 = &unk_26D4CAC40;
  return a1;
}

void sub_222469F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EurOTASPService::isOTASPCallNumber(uint64_t a1, qmi::MessageBase *a2, uint64_t a3)
{
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x4002000000;
  uint64_t v26 = __Block_byref_object_copy__5;
  int v27 = __Block_byref_object_dispose__5;
  memset(v28, 0, sizeof(v28));
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 0x40000000;
  v22[2] = ___ZNK15EurOTASPService17isOTASPCallNumberERKN2vs15VoiceCallStatus10IndicationEN10subscriber7SimSlotE_block_invoke;
  v22[3] = &unk_26460E3B0;
  uint8_t v22[4] = &v23;
  *(void *)std::string buf = v22;
  if (!qmi::MessageBase::applyTlv<vs::tlv::RemoteNumberList,void({block_pointer})(vs::tlv::RemoteNumberList const&)>(a2, 16, (uint64_t)buf)|| (v5 = v24[5], uint64_t v6 = v24[6], v5 == v6))
  {
    uint64_t v19 = 0;
    goto LABEL_21;
  }
  uint64_t v7 = MEMORY[0x263F035E8];
  while (1)
  {
    size_t v8 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      size_t v8 = (void *)*v8;
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
    long long v10 = ServiceMap;
    uint64_t v11 = *(void *)(v7 + 8);
    if (v11 < 0)
    {
      uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v13 = 5381;
      do
      {
        uint64_t v11 = v13;
        unsigned int v14 = *v12++;
        uint64_t v13 = (33 * v13) ^ v14;
      }
      while (v14);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string buf = v11;
    size_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v10[1].__m_.__sig, (unint64_t *)buf);
    if (v15) {
      break;
    }
    uint64_t v17 = 0;
LABEL_14:
    std::mutex::unlock(v10);
    int v16 = 0;
    char v18 = 1;
    if (v17) {
      goto LABEL_15;
    }
LABEL_16:
    if ((v18 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    v5 += 32;
    if (v5 == v6)
    {
      uint64_t v19 = 0;
      goto LABEL_21;
    }
  }
  uint64_t v17 = v15[3];
  int v16 = (std::__shared_weak_count *)v15[4];
  if (!v16) {
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v10);
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  char v18 = 0;
  if (!v17) {
    goto LABEL_16;
  }
LABEL_15:
  if (!(*(unsigned int (**)(uint64_t, void *, uint64_t))(*(void *)v17 + 16))(v17, v8, a3)) {
    goto LABEL_16;
  }
  char v21 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, "#I Number being dialed out is an OTASP number", buf, 2u);
  }
  if ((v18 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v19 = 1;
LABEL_21:
  _Block_object_dispose(&v23, 8);
  *(void *)std::string buf = v28;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v19;
}

void sub_22246A244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(void *)(v8 - 96) = v7;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 96));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZNK15EurOTASPService17isOTASPCallNumberERKN2vs15VoiceCallStatus10IndicationEN10subscriber7SimSlotE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = (void **)(v2 + 5);
  if (v2 + 5 != a2)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    uint64_t v6 = v4 - *a2;
    unint64_t v7 = v6 >> 5;
    uint64_t v8 = v2[7];
    int v9 = (_WORD *)v2[5];
    if (v6 >> 5 > (unint64_t)((v8 - (uint64_t)v9) >> 5))
    {
      if (v9)
      {
        std::vector<vs::tlv::RemoteNumberListItem>::__clear[abi:ne180100](v2 + 5);
        operator delete(*v3);
        uint64_t v8 = 0;
        *uint64_t v3 = 0;
        v2[6] = 0;
        v2[7] = 0;
      }
      if (v6 < 0) {
        goto LABEL_22;
      }
      uint64_t v10 = v8 >> 4;
      if (v8 >> 4 <= v7) {
        uint64_t v10 = v6 >> 5;
      }
      unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v10;
      if (v11 >> 59) {
LABEL_22:
      }
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>((uint64_t)(v2 + 7), v11);
      v2[5] = (uint64_t)v12;
      v2[6] = (uint64_t)v12;
      v2[7] = (uint64_t)v12 + 32 * v13;
      uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*>((uint64_t)(v2 + 7), v5, v4, (uint64_t)v12);
      goto LABEL_15;
    }
    unint64_t v15 = (v2[6] - (uint64_t)v9) >> 5;
    if (v15 < v7)
    {
      int v16 = (_WORD *)(v5 + 32 * v15);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,0>((_WORD *)*a2, v16, v9);
      uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*>((uint64_t)(v2 + 7), (uint64_t)v16, v4, v2[6]);
LABEL_15:
      v2[6] = v14;
      return;
    }
    uint64_t v17 = (void **)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,0>((_WORD *)*a2, (_WORD *)a2[1], v9);
    for (uint64_t i = (void **)v2[6]; i != v17; i -= 4)
    {
      if (*((char *)i - 1) < 0) {
        operator delete(*(i - 3));
      }
    }
    v2[6] = (uint64_t)v17;
  }
}

void sub_22246A448(_Unwind_Exception *a1)
{
  *(void *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

void sub_22246A450(_Unwind_Exception *a1)
{
  *(void *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

const void **EurOTASPService::startOTASP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
  unint64_t v7 = ServiceMap;
  uint64_t v8 = *(void *)(MEMORY[0x263F03598] + 8);
  if (v8 < 0)
  {
    int v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v8;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v7[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    uint64_t v14 = v12[3];
    uint64_t v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      char v15 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  uint64_t v13 = 0;
  char v15 = 1;
LABEL_9:
  (*(void (**)(uint64_t, void))(*(void *)v14 + 392))(v14, 0);
  if ((v15 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  long long v42 = 0;
  int v16 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(MEMORY[0x263F035C8] + 8);
  if (v18 < 0)
  {
    uint64_t v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = 5381;
    do
    {
      uint64_t v18 = v20;
      unsigned int v21 = *v19++;
      uint64_t v20 = (33 * v20) ^ v21;
    }
    while (v21);
  }
  std::mutex::lock(v16);
  *(void *)std::string buf = v18;
  char v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v17[1].__m_.__sig, (unint64_t *)buf);
  if (!v22)
  {
    uint64_t v24 = 0;
    goto LABEL_18;
  }
  uint64_t v24 = v22[3];
  uint64_t v23 = (std::__shared_weak_count *)v22[4];
  if (!v23)
  {
LABEL_18:
    std::mutex::unlock(v17);
    uint64_t v23 = 0;
    char v25 = 1;
    goto LABEL_19;
  }
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v17);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  char v25 = 0;
LABEL_19:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, __CFString *, void, void))(*(void *)v24 + 96))(&aBlock, v24, a3, 1, @"NumberToDialForOTAProvisioning", 0, 0);
  uint64_t v26 = aBlock;
  if (aBlock && (CFTypeID v27 = CFGetTypeID(aBlock), v27 == CFStringGetTypeID()))
  {
    long long v42 = v26;
    CFRetain(v26);
  }
  else
  {
    long long v42 = 0;
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&aBlock);
  if ((v25 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, "*22899");
  ctu::cf::assign();
  *(_OWORD *)std::string __p = v38;
  uint64_t v41 = v39;
  uint64_t v39 = 0;
  long long v38 = 0uLL;
  int v28 = *(unsigned __int8 *)(a1 + 76);
  char v29 = *(NSObject **)(a1 + 24);
  BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
  if (v28)
  {
    if (v30)
    {
      long long v31 = __p;
      if (v41 < 0) {
        long long v31 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v31;
      _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, "#I Starting OTASP with number (using NumberToDialForOTAProvisioning): %s", buf, 0xCu);
    }
    *(unsigned char *)(a1 + 81) = 0;
    *(unsigned char *)(a1 + 77) = 1;
    uint64_t v32 = *(void *)(a2 + 8);
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = __p;
      if (v41 < 0) {
        uint64_t v34 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v34;
      _os_log_impl(&dword_22231A000, v33, OS_LOG_TYPE_DEFAULT, "#I Dialing OTASP Call( %s)", buf, 0xCu);
    }
    memset(v52, 0, 32);
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v52);
    v48[0] = MEMORY[0x263EF8330];
    v48[1] = 0x40000000;
    uint64_t v49 = (void *(*)(uint64_t, char *))___ZN15EurOTASPService11sendDialReqEN3qmi12ClientRouterERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotE_block_invoke;
    uint64_t v50 = &__block_descriptor_tmp_6_6;
    int v51 = __p;
    uint64_t v35 = qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>((uint64_t)v52, 1);
    v49((uint64_t)v48, v35);
    v44[0] = MEMORY[0x263EF8330];
    v44[1] = 0x40000000;
    long long v45 = ___ZN15EurOTASPService11sendDialReqEN3qmi12ClientRouterERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotE_block_invoke_2;
    long long v46 = &__block_descriptor_tmp_8_8;
    int v47 = 0;
    long long v36 = qmi::MutableMessageBase::getTLV<vs::tlv::CallType>((uint64_t)v52, 16);
    v45((uint64_t)v44, v36);
    if ((a3 - 1) >= 3) {
      LODWORD(a3) = 0;
    }
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<vs::VoiceDialCall::Request>(&v43, a3);
  }
  if (v30)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, "#I Phone not registered, pending OTASP to after registering", buf, 2u);
  }
  *(unsigned char *)(a1 + 81) = 1;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v42);
}

void sub_22246AA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *___ZN15EurOTASPService11sendDialReqEN3qmi12ClientRouterERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(char **)(a1 + 32);
  if (v3[23] < 0)
  {
    uint64_t v3 = *(char **)v3;
    unint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    unint64_t v4 = v3[23];
  }
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a2, v3, &v3[v4], v4);
}

uint64_t ___ZN15EurOTASPService11sendDialReqEN3qmi12ClientRouterERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN15EurOTASPService14sendEndcallReqEN3qmi12ClientRouterEhN10subscriber7SimSlotE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN15EurOTASPService24handleOtaspVoiceDialRespEN2vs13VoiceDialCall8ResponseE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void EurOTASPService::handleVoiceOtaspInd(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    convertOtaspStatusToString();
    if (v32 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    buf[0] = 136315394;
    *(void *)&buf[1] = p_p;
    __int16 v34 = 1024;
    int v35 = a5;
    _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I --->BB Incoming Indication: OTASP_STATUS: %s (%d)", (uint8_t *)buf, 0x12u);
    if (v32 < 0) {
      operator delete(__p);
    }
    uint64_t v10 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = a4;
    _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I Recived OTASP Call Id: %d", (uint8_t *)&__p, 8u);
  }
  switch((int)a5)
  {
    case 0:
      if (*(unsigned char *)(a1 + 78)) {
        *(unsigned char *)(a1 + 82) = 1;
      }
      return;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      if (*(unsigned char *)(a1 + 78)) {
        *(unsigned char *)(a1 + 83) = 1;
      }
      return;
    case 8:
      if (*(unsigned char *)(a1 + 77))
      {
        uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*MEMORY[0x263F03540] != a4)
        {
          memset(v30, 0, sizeof(v30));
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v30);
          v28[0] = MEMORY[0x263EF8330];
          v28[1] = 0x40000000;
          v28[2] = ___ZN15EurOTASPService14sendEndcallReqEN3qmi12ClientRouterEhN10subscriber7SimSlotE_block_invoke;
          void v28[3] = &__block_descriptor_tmp_10_7;
          char v29 = a4;
          uint64_t v24 = qmi::MutableMessageBase::getTLV<vs::tlv::CallIdentifier>((uint64_t)v30, 1);
          ___ZN15EurOTASPService14sendEndcallReqEN3qmi12ClientRouterEhN10subscriber7SimSlotE_block_invoke((uint64_t)v28, v24);
          unsigned int v25 = a2 - 1;
          if ((a2 - 1) >= 3) {
            unsigned int v25 = -1;
          }
          if (v25 < 3) {
            int v26 = v25 + 1;
          }
          else {
            int v26 = 0;
          }
          qmi::ClientRouter::get();
          qmi::ClientRouter::SendProxy::SendProxy<vs::EndCall::Request>(&v27, v26);
        }
        uint64_t v13 = *(NSObject **)(a1 + 24);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#E OTASP call end: We should never send an END with FF. Not ending.", (uint8_t *)&__p, 2u);
        }
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      else if (!*(unsigned char *)(a1 + 79))
      {
        *(unsigned char *)(a1 + 80) = 1;
      }
      *(unsigned char *)(a1 + 84) = 1;
      return;
    case 9:
    case 10:
    case 11:
      return;
    default:
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
      char v15 = ServiceMap;
      uint64_t v16 = *(void *)(MEMORY[0x263F035D8] + 8);
      if (v16 < 0)
      {
        uint64_t v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v18 = 5381;
        do
        {
          uint64_t v16 = v18;
          unsigned int v19 = *v17++;
          uint64_t v18 = (33 * v18) ^ v19;
        }
        while (v19);
      }
      std::mutex::lock(ServiceMap);
      std::string __p = (void *)v16;
      uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v15[1].__m_.__sig, (unint64_t *)&__p);
      if (v20)
      {
        uint64_t v21 = v20[3];
        char v22 = (std::__shared_weak_count *)v20[4];
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v15);
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          char v23 = 0;
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      std::mutex::unlock(v15);
      char v22 = 0;
      char v23 = 1;
LABEL_31:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 56))(v21, a5);
      if ((v23 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), a5);
      return;
  }
}

void sub_22246B0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  uint64_t v30 = a13;
  a13 = 0;
  if (v30) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a13, v30);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void EurOTASPService::handleNonStdOtaspCallStatusIndication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
  unint64_t v7 = ServiceMap;
  unint64_t v8 = *(void *)(MEMORY[0x263F035A8] + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    int v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v8;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v7[1].__m_.__sig, &v19);
  if (v12)
  {
    uint64_t v14 = v12[3];
    uint64_t v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      char v15 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  uint64_t v13 = 0;
  char v15 = 1;
LABEL_9:
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 168))(v14, a3);
  if ((v15 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!*(unsigned char *)(a1 + 79)
    && v16 == 1
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, a3))
  {
    *(unsigned char *)(a1 + 79) = 1;
    uint64_t v17 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I Sim has triggered an OTASP", v18, 2u);
    }
  }
}

void sub_22246B324(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EurOTASPService::handleOtaspCallStatusIndication(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 32))(a1, a2 == 9);
}

void EurOTASPService::handleRegistered(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v4 = *(unsigned __int8 *)(a1 + 81);
  if (a3 == 8)
  {
    *(unsigned char *)(a1 + 76) = 1;
    if (v4)
    {
      uint64_t v5 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      int v9 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v8, a4);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 81))
  {
    uint64_t v6 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      WirelessTechnologyAsString();
      unint64_t v7 = v11 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v13 = v7;
      _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "Registered, but current technology is %s and not C2K and we don't need to OTASP now. Returning.", buf, 0xCu);
      if (v11 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 76) = 1;
  }
}

void sub_22246B4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void EurOTASPService::~EurOTASPService(EurOTASPService *this)
{
  OTASPService::~OTASPService(this);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  uint64_t v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_WORD *)uint64_t v4 = *((_WORD *)v6 - 4);
      uint64_t v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      uint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_22246B5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_WORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,0>(_WORD *a1, _WORD *a2, _WORD *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = (const std::string *)(v5 + 4);
      __int16 v7 = *v5;
      v5 += 16;
      uint64_t v8 = (std::string *)(a3 + 4);
      *a3 = v7;
      a3 += 16;
      std::string::operator=(v8, v6);
    }
    while (v5 != a2);
  }
  return a3;
}

const void **ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(const void **a1)
{
  char v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<EurOTASPService,std::allocator<EurOTASPService>,std::shared_ptr<Registry const> const&,dispatch::queue &,std::shared_ptr<ServiceProvisioningInterface> const&,char const* const&,void>(uint64_t a1@<X1>, NSObject **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x88uLL);
  std::__shared_ptr_emplace<EurOTASPService>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Registry const> const&,dispatch::queue &,std::shared_ptr<ServiceProvisioningInterface> const&,char const* const&,std::allocator<EurOTASPService>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<QMIATCommandDriver>::__enable_weak_this[abi:ne180100]<ATCommandDriver,QMIATCommandDriver,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_22246B6F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<EurOTASPService>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Registry const> const&,dispatch::queue &,std::shared_ptr<ServiceProvisioningInterface> const&,char const* const&,std::allocator<EurOTASPService>,0>(void *a1, uint64_t a2, NSObject **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D4CACC0;
  std::construct_at[abi:ne180100]<EurOTASPService,std::shared_ptr<Registry const> const&,dispatch::queue &,std::shared_ptr<ServiceProvisioningInterface> const&,char const* const&,EurOTASPService*>(a1 + 3, a2, a3);
  return a1;
}

void sub_22246B74C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EurOTASPService>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CACC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EurOTASPService>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CACC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_emplace<EurOTASPService>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::construct_at[abi:ne180100]<EurOTASPService,std::shared_ptr<Registry const> const&,dispatch::queue &,std::shared_ptr<ServiceProvisioningInterface> const&,char const* const&,EurOTASPService*>(void *a1, uint64_t a2, NSObject **a3)
{
  uint64_t v5 = *a3;
  dispatch_object_t v7 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  EurOTASPService::EurOTASPService(a1, a2, &v7);
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

void sub_22246B87C(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MessageBase::applyTlv<vs::tlv::RemoteNumberList,void({block_pointer})(vs::tlv::RemoteNumberList const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<vs::tlv::RemoteNumberList,void({block_pointer})(vs::tlv::RemoteNumberList const&)>((uint64_t)a1, (unsigned __int8 *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<vs::tlv::RemoteNumberList,void({block_pointer})(vs::tlv::RemoteNumberList const&)>(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v8 = a2;
  memset(v7, 0, sizeof(v7));
  tlv::parseV<vs::tlv::RemoteNumberList>(&v8, a3, v7);
  uint64_t v5 = v8;
  if (v8) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  int v9 = (void **)v7;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100](&v9);
  return v5 != 0;
}

void sub_22246B9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN15EurOTASPService11sendDialReqES0_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotEE3__0EEOS1_OT__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = **(void **)(a1 + 32);
  uint64_t v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  uint64_t v4 = a2[2];
  _OWORD v7[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (HIDWORD(v7[0]))
  {
    uint64_t v5 = *(NSObject **)(v2 + 24);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)&v13[4] = qmi::asString();
      *(_WORD *)&_WORD v13[12] = 1024;
      *(_DWORD *)&v13[14] = WORD2(v7[0]);
      _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "Error in otaps (voice) dail response with %s (0x%02x)", v13, 0x12u);
    }
    *(unsigned char *)(v2 + 77) = 0;
    *(_DWORD *)(v2 + 72) = -1;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x2000000000;
    int v12 = -1;
    *(void *)uint64_t v13 = MEMORY[0x263EF8330];
    *(void *)&v13[8] = 0x40000000;
    *(void *)&v13[16] = ___ZN15EurOTASPService24handleOtaspVoiceDialRespEN2vs13VoiceDialCall8ResponseE_block_invoke;
    uint64_t v14 = &unk_26460E438;
    char v15 = &v9;
    *(void *)std::string buf = v13;
    if (qmi::MessageBase::applyTlv<vs::tlv::CallIdentifier,void({block_pointer})(vs::tlv::CallIdentifier const&)>((qmi::MessageBase *)v7, 16, (uint64_t)buf))
    {
      *(_DWORD *)(v2 + 72) = *((_DWORD *)v10 + 6);
    }
    else
    {
      uint64_t v6 = *(NSObject **)(v2 + 24);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#E Mandatory TLV, callId, (0x01) not present. Ignoring response.", buf, 2u);
      }
    }
    _Block_object_dispose(&v9, 8);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_22246BBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c190_ZTSNSt3__110shared_ptrIZN15EurOTASPService11sendDialReqEN3qmi12ClientRouterERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c190_ZTSNSt3__110shared_ptrIZN15EurOTASPService11sendDialReqEN3qmi12ClientRouterERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<EurOTASPService::sendDialReq(qmi::ClientRouter,std::string const&,vs::callList::Call_Type,subscriber::SimSlot)::$_0,std::allocator<EurOTASPService::sendDialReq(qmi::ClientRouter,std::string const&,vs::callList::Call_Type,subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CAD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EurOTASPService::sendDialReq(qmi::ClientRouter,std::string const&,vs::callList::Call_Type,subscriber::SimSlot)::$_0,std::allocator<EurOTASPService::sendDialReq(qmi::ClientRouter,std::string const&,vs::callList::Call_Type,subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CAD40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2vs13VoiceDialCall8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<vs::VoiceDialCall::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_22246BCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<vs::VoiceDialCall::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_22246BD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_22246BDCC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_22246BE10(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::SendProxy::SendProxy<vs::EndCall::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_22246BE98(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN15EurOTASPService14sendEndcallReqEN3qmi12ClientRouterEhN10subscriber7SimSlotEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN15EurOTASPService14sendEndcallReqEN3qmi12ClientRouterEhN10subscriber7SimSlotEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<EurOTASPService::sendEndcallReq(qmi::ClientRouter,unsigned char,subscriber::SimSlot)::$_0,std::allocator<EurOTASPService::sendEndcallReq(qmi::ClientRouter,unsigned char,subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CADC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EurOTASPService::sendEndcallReq(qmi::ClientRouter,unsigned char,subscriber::SimSlot)::$_0,std::allocator<EurOTASPService::sendEndcallReq(qmi::ClientRouter,unsigned char,subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CADC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2vs7EndCall8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<vs::EndCall::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_22246BFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<vs::EndCall::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)33,vs::EndCall::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)33,vs::EndCall::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_22246C06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)33,vs::EndCall::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_22246C0B8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)33,vs::EndCall::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_22246C0FC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t subscriber::sGetSimFilePath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  subscriber::sConvertFileId(v5, a3);
  uint64_t SimFilePath = subscriber::getSimFilePath();
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return SimFilePath;
}

void sub_22246C170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void subscriber::EURSimCommandDriver::create()
{
}

void sub_22246C204(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10E1C40E6D98D44);
  _Unwind_Resume(a1);
}

uint64_t subscriber::EURSimCommandDriver::EURSimCommandDriver(uint64_t a1)
{
  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26D4CB328;
  v3[3] = v3;
  subscriber::SimCommandDriver::SimCommandDriver();
  std::__function::__value_func<char const* const ()(subscriber::HardwareSimSlot)>::~__value_func[abi:ne180100](v3);
  *(void *)a1 = &unk_26D4CAE10;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 2std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 2std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(_WORD *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 298) = 0;
  *(void *)(a1 + 300) = 0;
  return a1;
}

void sub_22246C33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<char const* const ()(subscriber::HardwareSimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t subscriber::EURSimCommandDriver::init_sync(subscriber::EURSimCommandDriver *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "subscriber::EURSimCommandDriver");
  uint64_t v2 = *((void *)this + 3);
  dispatch_object_t v20 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "sim");
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v3 || (uint64_t v4 = *((void *)this + 1), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  uint64_t v16 = v4;
  uint64_t v17 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v14, *((Registry **)this + 7));
  qmi::Client::createWithQueueLocal();
  long long v7 = v25;
  long long v25 = 0uLL;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 19);
  *((_OWORD *)this + 9) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  qmi::Client::~Client((qmi::Client *)&v23);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 0x40000000;
  _DWORD v13[2] = ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_22;
  v13[4] = this;
  uint64_t v23 = MEMORY[0x263EF8330];
  uint64_t v24 = 0x40000000;
  *(void *)&long long v25 = ___ZNK3qmi6Client13setIndHandlerIRKN3uim16CardStatusChange10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v25 + 1) = &unk_26460E850;
  int v26 = v13;
  qmi::Client::setIndHandler();
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  unint64_t v12[2] = ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_2;
  void v12[3] = &__block_descriptor_tmp_4_5;
  v12[4] = this;
  uint64_t v23 = MEMORY[0x263EF8330];
  uint64_t v24 = 0x40000000;
  *(void *)&long long v25 = ___ZNK3qmi6Client13setIndHandlerIRKN3uim7Refresh10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v25 + 1) = &unk_26460E878;
  int v26 = v12;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake((subscriber::EURSimCommandDriver *)((char *)this + 128));
  qmi::Client::setIndShouldWake((subscriber::EURSimCommandDriver *)((char *)this + 128));
  v11[10] = MEMORY[0x263EF8330];
  v11[11] = 0x40000000;
  v11[12] = ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_3;
  v11[13] = &__block_descriptor_tmp_6_7;
  v11[14] = this;
  qmi::Client::setHandler();
  void v11[5] = MEMORY[0x263EF8330];
  v11[6] = 0x40000000;
  v11[7] = ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_4;
  v11[8] = &__block_descriptor_tmp_7_7;
  v11[9] = this;
  uint64_t v9 = (capabilities::ct *)qmi::Client::setHandler();
  uint64_t result = capabilities::ct::supportsSIMDetectionInterrupt(v9);
  if (result)
  {
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 0x40000000;
    v11[2] = ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_5;
    void v11[3] = &__block_descriptor_tmp_8_9;
    _OWORD v11[4] = this;
    uint64_t v23 = MEMORY[0x263EF8330];
    uint64_t v24 = 0x40000000;
    *(void *)&long long v25 = ___ZNK3qmi6Client13setIndHandlerIRKN3uim18CardDebounceStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    *((void *)&v25 + 1) = &unk_26460E8A0;
    int v26 = v11;
    return qmi::Client::setIndHandler();
  }
  return result;
}

void sub_22246C724(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 184);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 - 168);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (*(char *)(v2 - 137) < 0) {
    operator delete(*(void **)(v2 - 160));
  }
  uint64_t v6 = *(NSObject **)(v2 - 136);
  if (v6) {
    dispatch_release(v6);
  }
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I handling uim::CardStatusChange::Indication", buf, 2u);
  }
  if (!*(unsigned char *)(v3 + 296))
  {
    uint64_t v11 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v8 = "#I CardStatusChange ignored while offline";
    uint64_t v9 = v11;
    uint32_t v10 = 2;
    goto LABEL_9;
  }
  int v5 = *((_DWORD *)a2 + 1);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v7 = qmi::asString();
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v5;
    LOWORD(v22) = 2080;
    *(void *)((char *)&v22 + 2) = v7;
    uint64_t v8 = "#N CardStatusChange returns error: 0x%04x (%s)";
    uint64_t v9 = v6;
    uint32_t v10 = 18;
LABEL_9:
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    return;
  }
  std::vector<subscriber::VinylCapability>::__assign_with_size[abi:ne180100]<subscriber::VinylCapability const*,subscriber::VinylCapability const*>((char *)(v3 + 200), 0, 0, 0);
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber19sHandleVinylAbilityIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_148_0;
  uint64_t v24 = v3 + 200;
  uint64_t v14 = buf;
  if ((qmi::MessageBase::applyTlv<uim::tlv::VinylSupport,void({block_pointer}&)(uim::tlv::VinylSupport const&)>(a2, (uint64_t)&v14) & 1) == 0)
  {
    uint64_t v14 = (uint8_t *)MEMORY[0x263EF8330];
    uint64_t v15 = 0x40000000;
    uint64_t v16 = ___ZN10subscriber19sHandleVinylAbilityIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke_2;
    uint64_t v17 = &__block_descriptor_tmp_149_2;
    uint64_t v18 = v3 + 200;
    dispatch_object_t v20 = &v14;
    qmi::MessageBase::applyTlv<uim::tlv::VinylSupportLegacy,void({block_pointer}&)(uim::tlv::VinylSupportLegacy const&)>(a2, (uint64_t)&v20);
  }
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber13sHandleIccidsIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_150_0;
  uint64_t v24 = v3 + 224;
  uint64_t v14 = buf;
  qmi::MessageBase::applyTlv<uim::tlv::Iccids,void({block_pointer}&)(uim::tlv::Iccids const&)>(a2, (uint64_t)&v14);
  uint64_t v14 = (uint8_t *)MEMORY[0x263EF8330];
  uint64_t v15 = 0x40000000;
  uint64_t v16 = ___ZN10subscriber13sHandleIccidsIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke_2;
  uint64_t v17 = &__block_descriptor_tmp_151_2;
  uint64_t v18 = v3 + 224;
  dispatch_object_t v20 = &v14;
  qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardInfoList,void({block_pointer}&)(uim::tlv::ExtendedCardInfoList const&)>(a2, 20, (uint64_t)&v20);
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber19sHandleCardInfoListIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__13mapIjNS7_6vectorIhNS7_9allocatorIhEEEENS7_4lessIjEENSA_INS7_4pairIKjSC_EEEEEE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_152;
  uint64_t v24 = v3 + 272;
  uint64_t v14 = buf;
  qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardInfoList,void({block_pointer}&)(uim::tlv::ExtendedCardInfoList const&)>(a2, 20, (uint64_t)&v14);
  uint64_t v13 = *(std::__shared_weak_count **)(v3 + 64);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (capabilities::ct::supportsSIMMomentaryPowerDown(v12))
  {
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(void **)(v3 + 256));
    *(void *)(v3 + 256) = 0;
    *(void *)(v3 + 264) = 0;
    *(void *)(v3 + 248) = v3 + 256;
    *(void *)std::string buf = MEMORY[0x263EF8330];
    *(void *)&long long v22 = 0x40000000;
    *((void *)&v22 + 1) = ___ZN10subscriber27sHandleIsMomentaryPowerDownIN3uim16CardStatusChange10IndicationEEEvNSt3__110shared_ptrIK8RegistryEERKT_RNS4_3mapIjbNS4_4lessIjEENS4_9allocatorINS4_4pairIKjbEEEEEE_block_invoke;
    uint64_t v23 = &__block_descriptor_tmp_153_0;
    uint64_t v24 = v3 + 248;
    uint64_t v14 = buf;
    qmi::MessageBase::applyTlv<uim::tlv::IsMomentaryPowerDown,void({block_pointer}&)(uim::tlv::IsMomentaryPowerDown const&)>(a2, 21, (uint64_t)&v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber19EURSimCommandDriver20handleCardStatus_indERKN3uim16CardStatusChange10IndicationE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_22_7;
  uint64_t v24 = v3;
  long long v25 = a2;
  uint64_t v14 = buf;
  if ((qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardStatus,void({block_pointer})(uim::tlv::ExtendedCardStatus const&)>(a2, 18, (uint64_t)&v14) & 1) == 0)
  {
    uint64_t v14 = (uint8_t *)MEMORY[0x263EF8330];
    uint64_t v15 = 0x40000000;
    uint64_t v16 = ___ZN10subscriber19EURSimCommandDriver20handleCardStatus_indERKN3uim16CardStatusChange10IndicationE_block_invoke_2;
    uint64_t v17 = &__block_descriptor_tmp_23_4;
    uint64_t v18 = v3;
    char v19 = a2;
    dispatch_object_t v20 = &v14;
    qmi::MessageBase::applyTlv<uim::tlv::CardStatus,void({block_pointer})(uim::tlv::CardStatus const&)>(a2, (uint64_t)&v20);
  }
}

void sub_22246CBEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_2(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  int v12 = ___ZN10subscriber19EURSimCommandDriver17handleRefresh_indERKN3uim7Refresh10IndicationE_block_invoke;
  uint64_t v13 = &__block_descriptor_tmp_42_3;
  uint64_t v14 = v3;
  uint64_t TlvValue = (uim::tlv *)qmi::MessageBase::findTlvValue(this);
  if (!TlvValue) {
    goto LABEL_8;
  }
  uint64_t v7 = TlvValue;
  int v8 = v5;
  uint64_t v18 = TlvValue;
  memset(v17, 0, sizeof(v17));
  *(_OWORD *)std::string buf = 0u;
  *(_OWORD *)std::string __p = 0u;
  tlv::parseV<uim::tlv::Refresh>(&v18, v5, v6, (uint64_t)buf);
  uint64_t v9 = v18;
  if (v18) {
    v12((uint64_t)v11, buf);
  }
  char v19 = (void **)v17 + 1;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v9
    && (((uint64_t (*)(void, uint64_t, uim::tlv *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v7, v8) & 1) == 0)
  {
LABEL_8:
    uint32_t v10 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I Got uim::Refresh::Indication with no refresh TLV; ignoring",
        buf,
        2u);
    }
  }
}

void sub_22246CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  *(void *)(v19 - 72) = v18 + 40;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 72));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(subscriber::EURSimCommandDriver **)(a1 + 32);
  *((unsigned char *)v1 + 296) = 1;
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v2 = (const void **)__p[1];
  if (__p[1] != (void *)v8)
  {
    while (*((unsigned char *)*v2 + 8) != 1)
    {
      if (++v2 == (const void **)v8) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == (const void **)v8) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (int *)((char *)v3 + 12);
  if (capabilities::ct::supportsHydra(v3)) {
    int v6 = 4;
  }
  else {
    int v6 = 1;
  }
  *uint64_t v4 = v6;
  if (QMIServiceMsg::create()) {
    qmi::Client::send();
  }
  subscriber::EURSimCommandDriver::queryStatus(v1);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_22246CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 296) = 0;
  uint64_t v2 = *(NSObject **)(v1 + 168);
  *(void *)(v1 + 168) = 0;
  if (v2) {
    dispatch_release(v2);
  }
  std::__tree<std::__value_type<uim::SessionType,dispatch::group_session>,std::__map_value_compare<uim::SessionType,std::__value_type<uim::SessionType,dispatch::group_session>,std::less<uim::SessionType>,true>,std::allocator<std::__value_type<uim::SessionType,dispatch::group_session>>>::destroy(*(void **)(v1 + 184));
  *(void *)(v1 + 176) = v1 + 184;
  *(void *)(v1 + 192) = 0;
  *(void *)(v1 + 184) = 0;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(char **)(v1 + 232));
  *(void *)(v1 + 224) = v1 + 232;
  *(void *)(v1 + 240) = 0;
  *(void *)(v1 + 2std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(*(void **)(v1 + 280));
  *(void *)(v1 + 280) = 0;
  *(void *)(v1 + 2std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  *(void *)(v1 + 272) = v1 + 280;
  memset(v3, 0, sizeof(v3));
  subscriber::SimCommandDriver::sendSimDriverInfo();
  uint64_t v4 = (void **)v3;
  std::vector<subscriber::SimDriverInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_22246D0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<subscriber::SimDriverInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver9init_syncEv_block_invoke_5(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  uint32_t v10 = ___ZNK10subscriber19EURSimCommandDriver27handleCardDebounceState_indERKN3uim18CardDebounceStatus10IndicationE_block_invoke;
  uint64_t v11 = &__block_descriptor_tmp_10_8;
  uint64_t v12 = v3;
  uint64_t result = qmi::MessageBase::findTlvValue(this);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v14 = result;
    v13[0] = tlv::parseV<uim::tlv::DebouncingState>((unint64_t *)&v14, v5);
    v13[1] = v8;
    if (v14) {
      return ((uint64_t (*)(void *, void *))v10)(v9, v13);
    }
    else {
      return ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 241, v6, v7);
    }
  }
  return result;
}

void ___ZNK10subscriber19EURSimCommandDriver27handleCardDebounceState_indERKN3uim18CardDebounceStatus10IndicationE_block_invoke(uint64_t a1, unsigned char *a2)
{
  if (*a2 == 1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Sim tray detected", v3, 2u);
    }
  }
}

uint64_t subscriber::EURSimCommandDriver::start(Registry **this)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(this[7]);
  uint64_t v3 = ServiceMap;
  unint64_t v4 = *(void *)(MEMORY[0x263F035C0] + 8);
  if ((v4 & 0x8000000000000000) != 0)
  {
    int v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v4;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v3[1].__m_.__sig, &v15);
  if (v8)
  {
    uint64_t v10 = v8[3];
    uint64_t v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  uint64_t v9 = 0;
  char v11 = 1;
LABEL_9:
  uint64_t v12 = (capabilities::ct *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10);
  if (v12)
  {
    char v13 = capabilities::ct::supportsDualPhysicalSIM(v12);
    if ((v11 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if ((v13 & 1) == 0) {
      *((unsigned char *)this + 160) = 1;
    }
  }
  else if ((v11 & 1) == 0)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return qmi::Client::start((qmi::Client *)(this + 16));
}

void sub_22246D340(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t subscriber::EURSimCommandDriver::stop(subscriber::EURSimCommandDriver *this)
{
  return qmi::Client::stop((subscriber::EURSimCommandDriver *)((char *)this + 128));
}

void subscriber::EURSimCommandDriver::queryStatus(subscriber::EURSimCommandDriver *this)
{
  if (*((unsigned char *)this + 296))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v12 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    char v2 = (const void **)__p[1];
    if (__p[1] != (void *)v12)
    {
      while (*((unsigned char *)*v2 + 8) != 16)
      {
        if (++v2 == (const void **)v12) {
          goto LABEL_11;
        }
      }
    }
    if (v2 == (const void **)v12) {
LABEL_11:
    }
      operator new();
    if (!v3) {
      __cxa_bad_cast();
    }
    *((unsigned char *)v3 + 9) = capabilities::ct::supportsHydra(v3);
    v6[5] = (char *)this + 128;
    uint64_t v7 = QMIServiceMsg::create();
    uint64_t v9 = 0;
    long long aBlock = 0;
    int v8 = 240000;
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 0x40000000;
    unint64_t v6[2] = ___ZN10subscriber19EURSimCommandDriver11queryStatusEv_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_18_9;
    void v6[4] = this;
    *(void *)std::string buf = MEMORY[0x263EF8330];
    uint64_t v14 = 0x40000000;
    unint64_t v15 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim13GetCardStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v16 = &unk_26460E8C8;
    uint64_t v17 = v6;
    int v5 = _Block_copy(buf);
    long long aBlock = v5;
    if (v7)
    {
      qmi::Client::send();
      int v5 = aBlock;
    }
    if (v5) {
      _Block_release(v5);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    unint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Skipping CardStatus query while baseband in reset", buf, 2u);
    }
  }
}

void sub_22246D65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver11queryStatusEv_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I handling uim::GetCardStatus::Response", buf, 2u);
  }
  if (!*(unsigned char *)(v3 + 296))
  {
    uint64_t v11 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    int v8 = "#I CardStatus response ignored while offline";
    uint64_t v9 = v11;
    uint32_t v10 = 2;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v3 + 298)) {
    *(unsigned char *)(v3 + 298) = 0;
  }
  int v5 = *((_DWORD *)a2 + 1);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v7 = qmi::asString();
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v5;
    LOWORD(v22) = 2080;
    *(void *)((char *)&v22 + 2) = v7;
    int v8 = "#N GetCardStatus returns error: 0x%04x (%s)";
    uint64_t v9 = v6;
    uint32_t v10 = 18;
LABEL_11:
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    return;
  }
  std::vector<subscriber::VinylCapability>::__assign_with_size[abi:ne180100]<subscriber::VinylCapability const*,subscriber::VinylCapability const*>((char *)(v3 + 200), 0, 0, 0);
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber19sHandleVinylAbilityIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_140_1;
  uint64_t v24 = v3 + 200;
  uint64_t v14 = buf;
  if ((qmi::MessageBase::applyTlv<uim::tlv::VinylSupport,void({block_pointer}&)(uim::tlv::VinylSupport const&)>(a2, (uint64_t)&v14) & 1) == 0)
  {
    uint64_t v14 = (uint8_t *)MEMORY[0x263EF8330];
    uint64_t v15 = 0x40000000;
    uint64_t v16 = ___ZN10subscriber19sHandleVinylAbilityIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke_2;
    uint64_t v17 = &__block_descriptor_tmp_142_1;
    uint64_t v18 = v3 + 200;
    dispatch_object_t v20 = &v14;
    qmi::MessageBase::applyTlv<uim::tlv::VinylSupportLegacy,void({block_pointer}&)(uim::tlv::VinylSupportLegacy const&)>(a2, (uint64_t)&v20);
  }
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber13sHandleIccidsIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_143_0;
  uint64_t v24 = v3 + 224;
  uint64_t v14 = buf;
  qmi::MessageBase::applyTlv<uim::tlv::Iccids,void({block_pointer}&)(uim::tlv::Iccids const&)>(a2, (uint64_t)&v14);
  uint64_t v14 = (uint8_t *)MEMORY[0x263EF8330];
  uint64_t v15 = 0x40000000;
  uint64_t v16 = ___ZN10subscriber13sHandleIccidsIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke_2;
  uint64_t v17 = &__block_descriptor_tmp_144;
  uint64_t v18 = v3 + 224;
  dispatch_object_t v20 = &v14;
  qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardInfoList,void({block_pointer}&)(uim::tlv::ExtendedCardInfoList const&)>(a2, 23, (uint64_t)&v20);
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber19sHandleCardInfoListIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__13mapIjNS7_6vectorIhNS7_9allocatorIhEEEENS7_4lessIjEENSA_INS7_4pairIKjSC_EEEEEE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_145_1;
  uint64_t v24 = v3 + 272;
  uint64_t v14 = buf;
  qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardInfoList,void({block_pointer}&)(uim::tlv::ExtendedCardInfoList const&)>(a2, 23, (uint64_t)&v14);
  char v13 = *(std::__shared_weak_count **)(v3 + 64);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (capabilities::ct::supportsSIMMomentaryPowerDown(v12))
  {
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(void **)(v3 + 256));
    *(void *)(v3 + 256) = 0;
    *(void *)(v3 + 264) = 0;
    *(void *)(v3 + 248) = v3 + 256;
    *(void *)std::string buf = MEMORY[0x263EF8330];
    *(void *)&long long v22 = 0x40000000;
    *((void *)&v22 + 1) = ___ZN10subscriber27sHandleIsMomentaryPowerDownIN3uim13GetCardStatus8ResponseEEEvNSt3__110shared_ptrIK8RegistryEERKT_RNS4_3mapIjbNS4_4lessIjEENS4_9allocatorINS4_4pairIKjbEEEEEE_block_invoke;
    uint64_t v23 = &__block_descriptor_tmp_146;
    uint64_t v24 = v3 + 248;
    uint64_t v14 = buf;
    qmi::MessageBase::applyTlv<uim::tlv::IsMomentaryPowerDown,void({block_pointer}&)(uim::tlv::IsMomentaryPowerDown const&)>(a2, 24, (uint64_t)&v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v22 = 0x40000000;
  *((void *)&v22 + 1) = ___ZN10subscriber19EURSimCommandDriver21handleCardStatus_respERKN3uim13GetCardStatus8ResponseE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_20_6;
  uint64_t v24 = v3;
  long long v25 = a2;
  uint64_t v14 = buf;
  if ((qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardStatus,void({block_pointer})(uim::tlv::ExtendedCardStatus const&)>(a2, 19, (uint64_t)&v14) & 1) == 0)
  {
    uint64_t v14 = (uint8_t *)MEMORY[0x263EF8330];
    uint64_t v15 = 0x40000000;
    uint64_t v16 = ___ZN10subscriber19EURSimCommandDriver21handleCardStatus_respERKN3uim13GetCardStatus8ResponseE_block_invoke_2;
    uint64_t v17 = &__block_descriptor_tmp_21_6;
    uint64_t v18 = v3;
    uint64_t v19 = a2;
    dispatch_object_t v20 = &v14;
    qmi::MessageBase::applyTlv<uim::tlv::CardStatus,void({block_pointer})(uim::tlv::CardStatus const&)>(a2, (uint64_t)&v20);
  }
}

void sub_22246DAEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t subscriber::EURSimCommandDriver::isAppPresentButNotInitialized(_DWORD *a1, _DWORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6)
{
  while (a4 != a5)
  {
    int v6 = a4[1];
    if (v6 == a3 && v6 != 255 && *a4 != 255) {
      return 0;
    }
    a4 += 2;
  }
  if (a1 == a2) {
    return 0;
  }
  while (1)
  {
    int v7 = *a1 - 1;
    if (v7 <= 4 && dword_22257E150[v7] == a6) {
      break;
    }
    a1 += 18;
    if (a1 == a2) {
      return 0;
    }
  }
  return 1;
}

void subscriber::EURSimCommandDriver::checkInstanceConsistency_sync(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = (_DWORD *)*a2;
  unint64_t v4 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 == v4) {
    goto LABEL_11;
  }
  int v6 = (_DWORD *)*a2;
  do
  {
    if (v6[1]) {
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 300) == *v6)
    {
      int v7 = 1;
    }
    else
    {
      if (*(_DWORD *)(a1 + 304) != *v6) {
        goto LABEL_9;
      }
      int v7 = 2;
    }
    v6[1] = v7;
LABEL_9:
    v6 += 36;
  }
  while (v6 != v4);
  if (!*(_DWORD *)(a1 + 300))
  {
    while (v5[1])
    {
      v5 += 36;
      if (v5 == v4) {
        goto LABEL_11;
      }
    }
    v5[1] = 1;
    int v8 = *(NSObject **)(a1 + 40);
    a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      int v13 = 136315394;
      uint64_t v14 = subscriber::asString();
      __int16 v15 = 2080;
      uint64_t v16 = subscriber::asString();
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Default instance for slot (%s) to (%s)", (uint8_t *)&v13, 0x16u);
    }
  }
LABEL_11:
  if (capabilities::ct::supportsGemini((capabilities::ct *)a1) && !*(_DWORD *)(v3 + 304))
  {
    for (uint64_t i = (_DWORD *)*a2; i != (_DWORD *)a2[1]; i += 36)
    {
      if (!i[1])
      {
        i[1] = 2;
        uint32_t v10 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = subscriber::asString();
          uint64_t v12 = subscriber::asString();
          int v13 = 136315394;
          uint64_t v14 = v11;
          __int16 v15 = 2080;
          uint64_t v16 = v12;
          _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I Default instance for slot (%s) to (%s)", (uint8_t *)&v13, 0x16u);
        }
        return;
      }
    }
  }
}

void subscriber::EURSimCommandDriver::checkHardwareConfiguration_sync(NSObject **this, void *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a3)
  {
    unsigned __int8 v6 = 0;
    *((void *)&v23 + 1) = 0;
    uint64_t v24 = 0;
    *(void *)&long long v23 = (char *)&v23 + 8;
    do
    {
      uint64_t v7 = *(void *)(a3 + 8);
      if (*(void *)(a3 + 16) - v7 <= (unint64_t)v6) {
        break;
      }
      unsigned __int8 v8 = v6;
      char v9 = *(unsigned char *)(v7 + v6);
      int v10 = subscriber::SimCommandDriver::indexToHardwareSimSlot((subscriber::SimCommandDriver *)this);
      int v11 = v10;
      uint64_t v12 = (uint64_t *)*((void *)&v23 + 1);
      int v13 = (uint64_t **)&v23 + 1;
      uint64_t v14 = (uint64_t **)&v23 + 1;
      if (*((void *)&v23 + 1))
      {
        do
        {
          while (1)
          {
            uint64_t v14 = (uint64_t **)v12;
            int v15 = *((_DWORD *)v12 + 7);
            if (v15 <= v10) {
              break;
            }
            uint64_t v12 = *v14;
            int v13 = v14;
            if (!*v14) {
              goto LABEL_12;
            }
          }
          if (v15 >= v10)
          {
            uint64_t v17 = v14;
            goto LABEL_15;
          }
          uint64_t v12 = v14[1];
        }
        while (v12);
        int v13 = v14 + 1;
      }
LABEL_12:
      uint64_t v17 = operator new(0x28uLL);
      v17[7] = v11;
      *((unsigned char *)v17 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = v14;
      *int v13 = (uint64_t *)v17;
      uint64_t v16 = (uint64_t *)v17;
      if (*(void *)v23)
      {
        *(void *)&long long v23 = *(void *)v23;
        uint64_t v16 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v23 + 1), v16);
      ++v24;
LABEL_15:
      *((unsigned char *)v17 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v9;
      unsigned __int8 v6 = v8 + 1;
    }
    while (*(unsigned char *)a3);
    subscriber::SimCommandDriver::checkSimHwIdConfig_sync();
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*((void **)&v23 + 1));
  }
  if (capabilities::ct::supportsGemini((capabilities::ct *)this))
  {
    subscriber::SimCommandDriver::appendMissingDriverInfo_sync();
    if (*((unsigned char *)this + 160))
    {
      uint64_t v18 = this[5];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[1] == *a2) {
          std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
        }
        LODWORD(v23) = 136315138;
        *(void *)((char *)&v23 + 4) = subscriber::asString();
        _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I Overriding slot kTwo using %s", (uint8_t *)&v23, 0xCu);
      }
      uint64_t v19 = (_DWORD *)a2[1];
      if ((_DWORD *)*a2 == v19) {
        std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
      }
      dispatch_object_t v20 = (_DWORD *)*a2;
      while (*v20 != 2)
      {
        v20 += 36;
        if (v20 == v19)
        {
          dispatch_object_t v20 = (_DWORD *)a2[1];
          break;
        }
      }
      uint64_t v21 = *(int *)(*a2 + 8);
      if (v21 > 3) {
        int v22 = 0;
      }
      else {
        int v22 = dword_22257E1F0[v21];
      }
      _OWORD v20[2] = v22;
    }
  }
}

void sub_22246DFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void subscriber::EURSimCommandDriver::setSimInfo(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  int v7 = *a2;
  int v8 = *a2 == 2;
  if (*a2 == 3) {
    int v8 = 2;
  }
  if (v8 == (*a4)[1] || v8 == (*a5)[1])
  {
    int v9 = *(_DWORD *)(a1 + 300);
    if (v9) {
      BOOL v10 = v9 == v7;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if (!capabilities::ct::defaultVinylCardTypeToGSMA((capabilities::ct *)a1)) {
        goto LABEL_22;
      }
      int v7 = *a2;
    }
    a2[1] = 1;
    int v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = subscriber::asString();
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = subscriber::asString();
      _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I Instance for slot (%s): (%s)", buf, 0x16u);
      int v7 = *a2;
    }
    *(_DWORD *)(a1 + 300) = v7;
    if (*(_DWORD *)(a1 + 304) == *a2)
    {
      uint64_t v12 = (_DWORD *)(a1 + 304);
LABEL_21:
      *uint64_t v12 = 0;
    }
  }
  else if (v8 == (*a4)[3] || v8 == (*a5)[3])
  {
    a2[1] = 2;
    int v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = subscriber::asString();
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = subscriber::asString();
      _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I Instance for slot (%s): (%s)", buf, 0x16u);
      int v7 = *a2;
    }
    *(_DWORD *)(a1 + 304) = v7;
    if (*(_DWORD *)(a1 + 300) == *a2)
    {
      uint64_t v12 = (_DWORD *)(a1 + 300);
      goto LABEL_21;
    }
  }
LABEL_22:
  unsigned int v14 = a2[1];
  if (v14 == 2)
  {
    subscriber::EURSimCommandDriver::setSimAppInfo((uint64_t)a2, a2 + 8, a3, *a4 + 2);
    subscriber::EURSimCommandDriver::setSimAppInfo((uint64_t)a2, a2 + 16, a3, *a5 + 2);
  }
  else if (v14 == 1)
  {
    subscriber::EURSimCommandDriver::setSimAppInfo((uint64_t)a2, a2 + 8, a3, *a4);
    subscriber::EURSimCommandDriver::setSimAppInfo((uint64_t)a2, a2 + 16, a3, *a5);
  }
  else
  {
    int v15 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I Unknown instance, skipping to read apps info", buf, 2u);
  }
  unsigned int v14 = a2[1];
LABEL_29:
  if (v14)
  {
    uint64_t v16 = *(void *)(a3 + 16);
    for (uint64_t i = *(void *)(a3 + 24); v16 != i; v16 += 72)
    {
      if (*(_DWORD *)v16 == 5)
      {
        int v18 = *(_DWORD *)(v16 + 4);
        if (v18 == 7 || v18 == 1)
        {
          unint64_t v21 = *((void *)a2 + 13);
          unint64_t v20 = *((void *)a2 + 14);
          if (v21 >= v20)
          {
            uint64_t v23 = *((void *)a2 + 12);
            unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v23) >> 3);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x666666666666666) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v23) >> 3);
            if (2 * v26 > v25) {
              unint64_t v25 = 2 * v26;
            }
            if (v26 >= 0x333333333333333) {
              unint64_t v27 = 0x666666666666666;
            }
            else {
              unint64_t v27 = v25;
            }
            int v114 = a2 + 28;
            if (v27)
            {
              if (v27 > 0x666666666666666) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v28 = operator new(40 * v27);
            }
            else
            {
              int v28 = 0;
            }
            char v29 = (char *)&v28[10 * v24];
            *(void *)std::string buf = v28;
            *(void *)&uint8_t buf[8] = v29;
            *(void *)&uint8_t buf[16] = v29;
            int v113 = (const char *)&v28[10 * v27];
            *(_DWORD *)char v29 = 0;
            *((void *)v29 + 2) = 0;
            *((void *)v29 + 3) = 0;
            *((void *)v29 + 1) = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v29 + 1, *(const void **)(v16 + 24), *(void *)(v16 + 32), *(void *)(v16 + 32) - *(void *)(v16 + 24));
            v28[10 * v24 + 8] = 4;
            uint64_t v30 = *(void *)&buf[8];
            uint64_t v22 = *(void *)&buf[16] + 40;
            *(void *)&buf[16] += 40;
            uint64_t v32 = *((void *)a2 + 12);
            unint64_t v31 = *((void *)a2 + 13);
            if (v31 == v32)
            {
              int64x2_t v36 = vdupq_n_s64(v31);
            }
            else
            {
              uint64_t v33 = 0;
              do
              {
                uint64_t v34 = v30 + v33;
                uint64_t v35 = v31 + v33;
                *(_DWORD *)(v34 - 40) = *(_DWORD *)(v31 + v33 - 40);
                *(void *)(v34 - 24) = 0;
                *(void *)(v34 - 16) = 0;
                *(void *)(v34 - std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
                *(_OWORD *)(v34 - std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(_OWORD *)(v31 + v33 - 32);
                *(void *)(v34 - 16) = *(void *)(v31 + v33 - 16);
                *(void *)(v35 - std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
                *(void *)(v35 - 24) = 0;
                *(void *)(v35 - 16) = 0;
                *(_DWORD *)(v34 - 8) = *(_DWORD *)(v31 + v33 - 8);
                v33 -= 40;
              }
              while (v31 + v33 != v32);
              int64x2_t v36 = *((int64x2_t *)a2 + 6);
              uint64_t v22 = *(void *)&buf[16];
              v30 += v33;
            }
            *((void *)a2 + 12) = v30;
            *((void *)a2 + 13) = v22;
            *(int64x2_t *)&uint8_t buf[8] = v36;
            uint64_t v37 = (const char *)*((void *)a2 + 14);
            *((void *)a2 + 14) = v113;
            int v113 = v37;
            *(void *)std::string buf = v36.i64[0];
            std::__split_buffer<subscriber::NpAppInfo>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(_DWORD *)unint64_t v21 = 0;
            *(void *)(v21 + 16) = 0;
            *(void *)(v21 + 24) = 0;
            *(void *)(v21 + 8) = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v21 + 8), *(const void **)(v16 + 24), *(void *)(v16 + 32), *(void *)(v16 + 32) - *(void *)(v16 + 24));
            *(_DWORD *)(v21 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 4;
            uint64_t v22 = v21 + 40;
            *((void *)a2 + 13) = v21 + 40;
          }
          *((void *)a2 + 13) = v22;
        }
      }
    }
  }
  long long v38 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *a2);
  if (*a2 == 3) {
    unint64_t v39 = 2;
  }
  else {
    unint64_t v39 = *a2 == 2;
  }
  uint64_t v40 = *(void *)(a1 + 200);
  if (v39 >= (*(void *)(a1 + 208) - v40) >> 2) {
    int v41 = 1;
  }
  else {
    int v41 = *(_DWORD *)(v40 + 4 * v39);
  }
  int v42 = *(_DWORD *)a3;
  int v111 = v41;
  a2[5] = v41;
  int isEsimCapable = subscriber::isEsimCapable();
  int v44 = isEsimCapable;
  char v110 = isEsimCapable;
  switch(*(_DWORD *)a3)
  {
    case 0:
      if (isEsimCapable) {
        int v45 = 2;
      }
      else {
        int v45 = 3;
      }
      goto LABEL_76;
    case 1:
      goto LABEL_75;
    case 2:
      unsigned int v46 = *(unsigned __int8 *)(a3 + 12);
      if (v46 > 3)
      {
        if (v46 - 4 >= 6 && v46 != 64)
        {
LABEL_70:
          int v45 = 0;
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      if (v46 < 3)
      {
LABEL_75:
        int v45 = 2;
        goto LABEL_76;
      }
      int v45 = 3;
LABEL_76:
      a2[2] = v45;
      if (*((char *)a2 + 143) < 0)
      {
        **((unsigned char **)a2 + 15) = 0;
        *((void *)a2 + 16) = 0;
      }
      else
      {
        *((unsigned char *)a2 + 120) = 0;
        *((unsigned char *)a2 + 143) = 0;
      }
      int v47 = *(uint64_t **)(a1 + 232);
      if (!v47) {
        goto LABEL_92;
      }
      long long v48 = *(uint64_t **)(a1 + 232);
      break;
    case 3:
      if (isEsimCapable) {
        int v45 = 2;
      }
      else {
        int v45 = 1;
      }
      goto LABEL_76;
    default:
      goto LABEL_70;
  }
  while (1)
  {
    unsigned int v49 = *((_DWORD *)v48 + 8);
    if (v39 >= v49) {
      break;
    }
LABEL_84:
    long long v48 = (uint64_t *)*v48;
    if (!v48) {
      goto LABEL_92;
    }
  }
  if (v49 < v39)
  {
    ++v48;
    goto LABEL_84;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v50 = *((_DWORD *)v47 + 8);
      if (v50 <= v39) {
        break;
      }
      int v47 = (uint64_t *)*v47;
      if (!v47) {
LABEL_232:
      }
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    if (v50 >= v39) {
      break;
    }
    int v47 = (uint64_t *)v47[1];
    if (!v47) {
      goto LABEL_232;
    }
  }
  std::string::operator=((std::string *)a2 + 5, (const std::string *)(v47 + 5));
LABEL_92:
  if (*((unsigned char *)a2 + 25)) {
    *((unsigned char *)a2 + 25) = 0;
  }
  int v51 = *(uint64_t **)(a1 + 280);
  if (!v51) {
    goto LABEL_107;
  }
  long long v52 = *(uint64_t **)(a1 + 280);
  while (2)
  {
    unsigned int v53 = *((_DWORD *)v52 + 8);
    if (v39 < v53)
    {
LABEL_99:
      long long v52 = (uint64_t *)*v52;
      if (!v52) {
        goto LABEL_107;
      }
      continue;
    }
    break;
  }
  if (v53 < v39)
  {
    ++v52;
    goto LABEL_99;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v54 = *((_DWORD *)v51 + 8);
      if (v54 <= v39) {
        break;
      }
      int v51 = (uint64_t *)*v51;
      if (!v51) {
LABEL_233:
      }
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    if (v54 >= v39) {
      break;
    }
    int v51 = (uint64_t *)v51[1];
    if (!v51) {
      goto LABEL_233;
    }
  }
  *((_WORD *)a2 + 12) = subscriber::SimCommandDriver::getVinylCapabilitiesFromATR();
LABEL_107:
  switch(v42)
  {
    case 0:
      uint64_t v55 = *(void *)(a1 + 256);
      if (v55)
      {
        uint64_t v56 = a1 + 256;
        do
        {
          unsigned int v57 = *(_DWORD *)(v55 + 28);
          BOOL v58 = v57 >= v39;
          if (v57 >= v39) {
            long long v59 = (uint64_t *)v55;
          }
          else {
            long long v59 = (uint64_t *)(v55 + 8);
          }
          if (v58) {
            uint64_t v56 = v55;
          }
          uint64_t v55 = *v59;
        }
        while (*v59);
        if (v56 != a1 + 256 && v39 >= *(_DWORD *)(v56 + 28) && *(unsigned char *)(v56 + 32))
        {
          os_log_t v60 = *v38;
          if (!os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_197;
          }
          *(_WORD *)std::string buf = 0;
          long long v61 = "#I Momentary power down detected, treat as unknown";
          goto LABEL_195;
        }
      }
      int v82 = *v38;
      BOOL v84 = os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT);
      if (v44)
      {
        if (!v84) {
          goto LABEL_162;
        }
        *(_WORD *)std::string buf = 0;
        goto LABEL_161;
      }
      if (!v84) {
        goto LABEL_177;
      }
      *(_WORD *)std::string buf = 0;
      int v90 = "#I SIM card absent (tray present)";
      goto LABEL_176;
    case 1:
      if (a2[8] | a2[16])
      {
        int v85 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *a2);
        int v86 = v85;
        if (a2[8] == 2 || a2[16] == 2)
        {
          os_log_t v60 = *v85;
          if (!os_log_type_enabled(*v85, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_197;
          }
          *(_WORD *)std::string buf = 0;
          long long v61 = "#I SIM slot not ready yet; some app is detected and not yet ready.";
LABEL_195:
          long long v65 = v60;
          uint32_t v66 = 2;
LABEL_196:
          _os_log_impl(&dword_22231A000, v65, OS_LOG_TYPE_DEFAULT, v61, buf, v66);
        }
        else
        {
          if (*a2 == 3) {
            int v87 = 2;
          }
          else {
            int v87 = *a2 == 2;
          }
          long long v89 = *(_DWORD **)(a3 + 16);
          int v88 = *(_DWORD **)(a3 + 24);
          if (subscriber::EURSimCommandDriver::isAppPresentButNotInitialized(v89, v88, v87, *a4, a4[1], 1))
          {
            os_log_t v60 = *v86;
            if (!os_log_type_enabled(*v86, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_197;
            }
            *(_WORD *)std::string buf = 0;
            long long v61 = "#I SIM slot not ready yet; Gw app is present but not initialized yet; waiting.";
            goto LABEL_195;
          }
          if (!subscriber::EURSimCommandDriver::isAppPresentButNotInitialized(v89, v88, v87, *a5, a5[1], 2))goto LABEL_199; {
          os_log_t v60 = *v86;
          }
          if (os_log_type_enabled(*v86, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            long long v61 = "#I SIM slot not ready yet; Gw app is present but not initialized yet; waiting.";
            goto LABEL_195;
          }
        }
LABEL_197:
        if (*((unsigned char *)a2 + 16)) {
LABEL_198:
        }
          *((unsigned char *)a2 + 16) = 0;
      }
      else
      {
        if (v44)
        {
          uint64_t v77 = *((unsigned __int8 *)a2 + 143);
          char v78 = v77;
          uint64_t v79 = *((void *)a2 + 16);
          if ((v77 & 0x80u) == 0) {
            uint64_t v80 = *((unsigned __int8 *)a2 + 143);
          }
          else {
            uint64_t v80 = *((void *)a2 + 16);
          }
          if (v80) {
            BOOL v81 = a2[1] == 0;
          }
          else {
            BOOL v81 = 1;
          }
          if (!v81)
          {
LABEL_189:
            if (v78 < 0) {
              uint64_t v77 = v79;
            }
            if (v77)
            {
              int v71 = 2;
              goto LABEL_163;
            }
            goto LABEL_199;
          }
        }
        else if (a2[1])
        {
          uint64_t v77 = *((unsigned __int8 *)a2 + 143);
          uint64_t v79 = *((void *)a2 + 16);
          char v78 = *((unsigned char *)a2 + 143);
          goto LABEL_189;
        }
        a2[3] = 8;
        *((unsigned char *)a2 + 16) = 1;
        os_log_t v93 = *v38;
        if (!os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_199;
        }
        uint64_t v95 = printers::asString((printers *)&v110, v94);
        uint64_t v96 = subscriber::asString();
        if (*((unsigned char *)a2 + 16)) {
          uint64_t v97 = (const char *)subscriber::asString();
        }
        else {
          uint64_t v97 = "<uninitialized_value>";
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v95;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v96;
        *(_WORD *)&buf[22] = 2080;
        int v113 = v97;
        char v104 = "#I vinyl (%s), instance (%s) -> state: %s";
        char v105 = v93;
        uint32_t v106 = 32;
LABEL_231:
        _os_log_impl(&dword_22231A000, v105, OS_LOG_TYPE_DEFAULT, v104, buf, v106);
      }
LABEL_199:
      if (*((unsigned char *)a2 + 16))
      {
        unsigned int v91 = a2[3];
        if (v91 <= 9)
        {
          int v92 = 1 << v91;
          if ((v92 & 0x78) != 0)
          {
            subscriber::maybeMarkNotPresent();
            subscriber::maybeMarkNotPresent();
          }
          else if ((v92 & 0x382) != 0)
          {
            subscriber::markNotPresent();
            subscriber::markNotPresent();
          }
        }
      }
      return;
    case 2:
      int v67 = *(unsigned __int8 *)(a3 + 12);
      uint64_t v68 = (v67 - 1);
      if (v68 > 0x3F) {
        goto LABEL_183;
      }
      if (((1 << (v67 - 1)) & 0xCA) != 0) {
        goto LABEL_127;
      }
      if (v67 == 1)
      {
        uint64_t v98 = *(void *)(a1 + 256);
        if (!v98) {
          goto LABEL_177;
        }
        uint64_t v99 = a1 + 256;
        do
        {
          unsigned int v100 = *(_DWORD *)(v98 + 28);
          BOOL v101 = v100 >= v39;
          if (v100 >= v39) {
            __int16 v102 = (uint64_t *)v98;
          }
          else {
            __int16 v102 = (uint64_t *)(v98 + 8);
          }
          if (v101) {
            uint64_t v99 = v98;
          }
          uint64_t v98 = *v102;
        }
        while (*v102);
        if (v99 == a1 + 256 || v39 < *(_DWORD *)(v99 + 28) || !*(unsigned char *)(v99 + 32)) {
          goto LABEL_177;
        }
        if (*((unsigned char *)a2 + 16)) {
          *((unsigned char *)a2 + 16) = 0;
        }
        os_log_t v103 = *v38;
        if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          char v104 = "#I Momentary power down detected, treat as unknown";
          char v105 = v103;
          uint32_t v106 = 2;
          goto LABEL_231;
        }
        goto LABEL_199;
      }
      if (v68 == 63)
      {
        os_log_t v60 = *v38;
        if (!os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_197;
        }
        *(_WORD *)std::string buf = 0;
        long long v61 = "#I SIM is in recovery; ignoring SIM state for now";
        goto LABEL_195;
      }
LABEL_183:
      if (!*(unsigned char *)(a3 + 12))
      {
LABEL_127:
        long long v69 = *v38;
        if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v70 = uim::asString(v67);
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v70;
          _os_log_impl(&dword_22231A000, v69, OS_LOG_TYPE_DEFAULT, "#I SIM slot being marked as 'dead' due to SIM error (%s)", buf, 0xCu);
        }
        int v71 = 7;
        goto LABEL_163;
      }
      if (a2[8] | a2[16]) {
        goto LABEL_199;
      }
      int v82 = *v38;
      if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        int v90 = "#I No ATR Received, assuming SIM is not present.";
        goto LABEL_176;
      }
      goto LABEL_177;
    case 3:
      uint64_t v72 = *(void *)(a1 + 256);
      if (!v72) {
        goto LABEL_155;
      }
      uint64_t v73 = a1 + 256;
      do
      {
        unsigned int v74 = *(_DWORD *)(v72 + 28);
        BOOL v75 = v74 >= v39;
        if (v74 >= v39) {
          unsigned int v76 = (uint64_t *)v72;
        }
        else {
          unsigned int v76 = (uint64_t *)(v72 + 8);
        }
        if (v75) {
          uint64_t v73 = v72;
        }
        uint64_t v72 = *v76;
      }
      while (*v76);
      if (v73 == a1 + 256 || v39 < *(_DWORD *)(v73 + 28) || !*(unsigned char *)(v73 + 32))
      {
LABEL_155:
        int v82 = *v38;
        BOOL v83 = os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT);
        if (v44)
        {
          if (v83)
          {
            *(_WORD *)std::string buf = 0;
LABEL_161:
            _os_log_impl(&dword_22231A000, v82, OS_LOG_TYPE_DEFAULT, "#I SIM has no profiles", buf, 2u);
          }
LABEL_162:
          int v71 = 8;
LABEL_163:
          a2[3] = v71;
        }
        else
        {
          if (v83)
          {
            *(_WORD *)std::string buf = 0;
            int v90 = "#I SIM card absent (tray removed)";
LABEL_176:
            _os_log_impl(&dword_22231A000, v82, OS_LOG_TYPE_DEFAULT, v90, buf, 2u);
          }
LABEL_177:
          a2[3] = 1;
        }
        *((unsigned char *)a2 + 16) = 1;
        goto LABEL_199;
      }
      os_log_t v60 = *v38;
      if (!os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_197;
      }
      *(_WORD *)std::string buf = 0;
      long long v61 = "#I Momentary power down detected, treat as unknown";
      goto LABEL_195;
    case 4:
      if (!*((unsigned char *)a2 + 16)) {
        goto LABEL_199;
      }
      os_log_t v62 = *v38;
      if (!os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_198;
      }
      uint64_t v63 = subscriber::asString();
      long long v64 = uim::asString(4u);
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v63;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v64;
      long long v61 = "#I Resetting overall reported SIM state from %s to 'none' due to CardState=%s";
      long long v65 = v62;
      uint32_t v66 = 22;
      goto LABEL_196;
    default:
      goto LABEL_199;
  }
}

void sub_22246ED4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 + 104) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t subscriber::EURSimCommandDriver::setSimAppInfo(uint64_t result, _DWORD *a2, uint64_t a3, unsigned __int8 *a4)
{
  if (a4[1] != 255)
  {
    unint64_t v5 = *a4;
    if (v5 != 255)
    {
      uint64_t v8 = result;
      uint64_t v9 = *(void *)(a3 + 16);
      if (0x8E38E38E38E38E39 * ((*(void *)(a3 + 24) - v9) >> 3) <= v5)
      {
        uint64_t result = __TUAssertTrigger();
        LODWORD(v5) = *a4;
        uint64_t v9 = *(void *)(a3 + 16);
      }
      int v10 = *(_DWORD *)(v9 + 72 * v5) - 1;
      if (v10 > 4) {
        int v11 = 0;
      }
      else {
        int v11 = dword_22257E164[v10];
      }
      a2[1] = v11;
      int v12 = *(_DWORD *)(v9 + 72 * v5 + 4);
      if (v12)
      {
        unsigned int v13 = *(_DWORD *)(v9 + 72 * v5 + 52);
        if (v13)
        {
          *(_WORD *)(v8 + 27) = *(_WORD *)(v9 + 72 * v5 + 56);
          if (v13 <= 5 && ((1 << v13) & 0x36) != 0) {
            *(unsigned char *)(v8 + 26) = 1;
          }
        }
        switch(v12)
        {
          case 1:
          case 4:
            goto LABEL_16;
          case 2:
            unsigned int v16 = 3;
            *a2 = 3;
            if (!*(unsigned char *)(v8 + 16)) {
              break;
            }
            unsigned int v17 = *(_DWORD *)(v8 + 12) - 1;
            if (v17 <= 7)
            {
              int v18 = &unk_22257E178;
              goto LABEL_28;
            }
            unsigned int v16 = 3;
            break;
          case 3:
            *a2 = 3;
            if (*(unsigned char *)(v8 + 16) && (unsigned int v17 = *(_DWORD *)(v8 + 12) - 1, v17 <= 7))
            {
              int v18 = &unk_22257E198;
LABEL_28:
              unsigned int v16 = v18[v17];
            }
            else
            {
              unsigned int v16 = 4;
            }
            break;
          case 5:
            *a2 = 3;
            if (!*(unsigned char *)(v8 + 16) || (unsigned int v16 = *(_DWORD *)(v8 + 12), v16 > 8) || ((1 << v16) & 0x182) == 0) {
              unsigned int v16 = 6;
            }
            break;
          case 6:
          case 7:
            *a2 = 4;
            int v15 = *(_DWORD *)(v8 + 12);
            if ((v15 - 1) >= 8) {
              int v15 = 5;
            }
            if (*(unsigned char *)(v8 + 16)) {
              unsigned int v16 = v15;
            }
            else {
              unsigned int v16 = 5;
            }
            break;
          default:
            return result;
        }
        *(_DWORD *)(v8 + 12) = v16;
        *(unsigned char *)(v8 + 16) = 1;
      }
      else
      {
LABEL_16:
        *a2 = 2;
      }
    }
  }
  return result;
}

void ___ZN10subscriber19EURSimCommandDriver21handleCardStatus_respERKN3uim13GetCardStatus8ResponseE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  qmi::Message<uim::GetCardStatus::ResponseTLVList,qmi::ResponseBase>::get<uim::tlv::HardwareSlotTypes>((uint64_t)v5, *(qmi::MessageBase **)(a1 + 40));
  subscriber::EURSimCommandDriver::sendSimInfo<uim::tlv::ExtendedCardStatus>(v3, a2, (uint64_t)v5);
  if (v5[0])
  {
    unint64_t v4 = __p;
    if (__p)
    {
      operator delete(v4);
    }
  }
}

void sub_22246F084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void subscriber::EURSimCommandDriver::sendSimInfo<uim::tlv::ExtendedCardStatus>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 48) == *(void *)(a2 + 56))
  {
    int64x2_t v32 = 0uLL;
    unint64_t v33 = 0;
    subscriber::SimCommandDriver::sendSimDriverInfo();
    char v29 = &v32;
  }
  else
  {
    int64x2_t v32 = 0uLL;
    unint64_t v33 = 0;
    unsigned __int8 v6 = std::vector<subscriber::SimDriverInfo>::__emplace_back_slow_path<>(&v32);
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    v32.i64[1] = (uint64_t)v6;
    *((_DWORD *)v6 - 36) = 1;
    if (v8 - v7 == 40) {
      *((_DWORD *)v6 - 35) = 1;
    }
    uint64_t v9 = (capabilities::ct *)capabilities::ct::supportsGemini((capabilities::ct *)v6);
    if ((v9 & 1) != 0
      || (int v10 = (capabilities::ct *)capabilities::ct::supportsDynamicSID(v9), (v10 & 1) != 0)
      || (int v11 = (char *)capabilities::ct::dataOnlySingleSIMDevice(v10), v11))
    {
      uint64_t v12 = v32.i64[1];
      if (v32.i64[1] >= v33)
      {
        int v11 = std::vector<subscriber::SimDriverInfo>::__emplace_back_slow_path<>(&v32);
      }
      else
      {
        *(void *)(v32.i64[1] + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 8) = 0;
        *(_DWORD *)uint64_t v12 = 1;
        *(unsigned char *)(v12 + 12) = 0;
        *(void *)(v12 + 4) = 0;
        *(void *)(v12 + 20) = 0;
        *(unsigned char *)(v12 + 28) = 0;
        *(_OWORD *)(v12 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        int v11 = (char *)(v12 + 144);
        *(_OWORD *)(v12 + 128) = 0u;
      }
      v32.i64[1] = (uint64_t)v11;
      *((_DWORD *)v11 - 36) = 2;
    }
    if (capabilities::ct::supportsHydra((capabilities::ct *)v11)
      && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3) >= 3)
    {
      uint64_t v13 = v32.i64[1];
      if (v32.i64[1] >= v33)
      {
        uint64_t v14 = std::vector<subscriber::SimDriverInfo>::__emplace_back_slow_path<>(&v32);
      }
      else
      {
        *(void *)(v32.i64[1] + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(void *)(v13 + 8) = 0;
        *(_DWORD *)uint64_t v13 = 1;
        *(unsigned char *)(v13 + 12) = 0;
        *(void *)(v13 + 4) = 0;
        *(void *)(v13 + 20) = 0;
        *(unsigned char *)(v13 + 28) = 0;
        *(_OWORD *)(v13 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        uint64_t v14 = (char *)(v13 + 144);
        *(_OWORD *)(v13 + 128) = 0u;
      }
      v32.i64[1] = (uint64_t)v14;
      *((_DWORD *)v14 - 36) = 3;
    }
    char v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    if (&v29 != (void **)a2) {
      std::vector<uim::tlv::AppIndex>::__assign_with_size[abi:ne180100]<uim::tlv::AppIndex*,uim::tlv::AppIndex*>(&v29, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    }
    if ((void **)(a2 + 24) != &__p) {
      std::vector<uim::tlv::AppIndex>::__assign_with_size[abi:ne180100]<uim::tlv::AppIndex*,uim::tlv::AppIndex*>(&__p, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 1);
    }
    if ((unint64_t)(v30 - (unsigned char *)v29) > 3 || (unint64_t)(v27 - (unsigned char *)__p) > 3)
    {
      uint64_t v17 = v32.i64[1];
      for (uint64_t i = (unsigned int *)v32.i64[0]; i != (unsigned int *)v17; i += 36)
      {
        if (*i == 3) {
          unsigned int v18 = 2;
        }
        else {
          unsigned int v18 = *i == 2;
        }
        subscriber::EURSimCommandDriver::setSimInfo(a1, i, *(void *)(a2 + 48) + 40 * v18, (unsigned __int8 **)&v29, (unsigned __int8 **)&__p);
      }
      subscriber::EURSimCommandDriver::checkHardwareConfiguration_sync((NSObject **)a1, &v32, a3);
      subscriber::EURSimCommandDriver::checkInstanceConsistency_sync(a1, &v32);
      subscriber::SimCommandDriver::sendSimDriverInfo();
      v25[0] = 0;
      v25[1] = 0;
      *(void *)std::string buf = v25;
      uint64_t v20 = v32.i64[1];
      for (uint64_t j = v32.i64[0]; j != v20; j += 144)
      {
        if (*(unsigned char *)(j + 16) && (subscriber::isSimSettled() & 1) != 0)
        {
          int v21 = *(_DWORD *)j;
          if (*(_DWORD *)(j + 64) == 4) {
            std::__tree<std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,BOOL>>>::__emplace_unique_key_args<subscriber::HardwareSimSlot,subscriber::HardwareSimSlot const&,BOOL>((uint64_t *)buf, v21, *(_DWORD *)j, 1);
          }
          else {
            std::__tree<std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,BOOL>>>::__emplace_unique_key_args<subscriber::HardwareSimSlot,subscriber::HardwareSimSlot const&,BOOL>((uint64_t *)buf, v21, *(_DWORD *)j, 0);
          }
        }
      }
      std::map<subscriber::HardwareSimSlot,BOOL>::map[abi:ne180100]((uint64_t)v22, buf);
      subscriber::SimCommandDriver::markAllowedToReadCDMAAuxInfo();
      std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v23);
      std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v25[0]);
    }
    else
    {
      int v15 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_22231A000, v15, OS_LOG_TYPE_ERROR, "Not enough app indices, required at least 2", buf, 2u);
      }
    }
    if (__p)
    {
      unint64_t v27 = __p;
      operator delete(__p);
    }
    if (v29)
    {
      uint64_t v30 = v29;
      operator delete(v29);
    }
    char v29 = &v32;
  }
  std::vector<subscriber::SimDriverInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
}

void sub_22246F438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  a19 = (void *)(v20 - 88);
  std::vector<subscriber::SimDriverInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void qmi::Message<uim::GetCardStatus::ResponseTLVList,qmi::ResponseBase>::get<uim::tlv::HardwareSlotTypes>(uint64_t a1, qmi::MessageBase *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  qmi::MessageBase::tryTlv<uim::tlv::HardwareSlotTypes>(a2, (unsigned __int8 *)a1);
}

void sub_22246F4F8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)v1)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    *(unsigned char *)uint64_t v1 = 0;
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10subscriber19EURSimCommandDriver21handleCardStatus_respERKN3uim13GetCardStatus8ResponseE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  qmi::Message<uim::GetCardStatus::ResponseTLVList,qmi::ResponseBase>::get<uim::tlv::HardwareSlotTypes>((uint64_t)v5, *(qmi::MessageBase **)(a1 + 40));
  subscriber::EURSimCommandDriver::sendSimInfo<uim::tlv::CardStatus>(v3, a2, (uint64_t)v5);
  if (v5[0])
  {
    unint64_t v4 = __p;
    if (__p)
    {
      operator delete(v4);
    }
  }
}

void sub_22246F5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void subscriber::EURSimCommandDriver::sendSimInfo<uim::tlv::CardStatus>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8) == *(void *)(a2 + 16))
  {
    int64x2_t v32 = 0uLL;
    unint64_t v33 = 0;
    subscriber::SimCommandDriver::sendSimDriverInfo();
    char v29 = &v32;
  }
  else
  {
    int64x2_t v32 = 0uLL;
    unint64_t v33 = 0;
    unsigned __int8 v6 = std::vector<subscriber::SimDriverInfo>::__emplace_back_slow_path<>(&v32);
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a2 + 16);
    v32.i64[1] = (uint64_t)v6;
    *((_DWORD *)v6 - 36) = 1;
    if (v8 - v7 == 40) {
      *((_DWORD *)v6 - 35) = 1;
    }
    uint64_t v9 = (capabilities::ct *)capabilities::ct::supportsGemini((capabilities::ct *)v6);
    if ((v9 & 1) != 0
      || (int v10 = (capabilities::ct *)capabilities::ct::supportsDynamicSID(v9), (v10 & 1) != 0)
      || (int v11 = (char *)capabilities::ct::dataOnlySingleSIMDevice(v10), v11))
    {
      uint64_t v12 = v32.i64[1];
      if (v32.i64[1] >= v33)
      {
        int v11 = std::vector<subscriber::SimDriverInfo>::__emplace_back_slow_path<>(&v32);
      }
      else
      {
        *(void *)(v32.i64[1] + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 8) = 0;
        *(_DWORD *)uint64_t v12 = 1;
        *(unsigned char *)(v12 + 12) = 0;
        *(void *)(v12 + 4) = 0;
        *(void *)(v12 + 20) = 0;
        *(unsigned char *)(v12 + 28) = 0;
        *(_OWORD *)(v12 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        int v11 = (char *)(v12 + 144);
        *(_OWORD *)(v12 + 128) = 0u;
      }
      v32.i64[1] = (uint64_t)v11;
      *((_DWORD *)v11 - 36) = 2;
    }
    if (capabilities::ct::supportsHydra((capabilities::ct *)v11)
      && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3) >= 3)
    {
      uint64_t v13 = v32.i64[1];
      if (v32.i64[1] >= v33)
      {
        uint64_t v14 = std::vector<subscriber::SimDriverInfo>::__emplace_back_slow_path<>(&v32);
      }
      else
      {
        *(void *)(v32.i64[1] + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(void *)(v13 + 8) = 0;
        *(_DWORD *)uint64_t v13 = 1;
        *(unsigned char *)(v13 + 12) = 0;
        *(void *)(v13 + 4) = 0;
        *(void *)(v13 + 20) = 0;
        *(unsigned char *)(v13 + 28) = 0;
        *(_OWORD *)(v13 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        uint64_t v14 = (char *)(v13 + 144);
        *(_OWORD *)(v13 + 128) = 0u;
      }
      v32.i64[1] = (uint64_t)v14;
      *((_DWORD *)v14 - 36) = 3;
    }
    char v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    std::vector<vs::tlv::IsHandoverCallItem>::resize((uint64_t)&v29, 2uLL);
    *(_WORD *)char v29 = *(_WORD *)a2;
    *((_WORD *)v29 + 1) = *(_WORD *)(a2 + 4);
    std::vector<vs::tlv::IsHandoverCallItem>::resize((uint64_t)&__p, 2uLL);
    *(_WORD *)std::string __p = *(_WORD *)(a2 + 2);
    *((_WORD *)__p + 1) = *(_WORD *)(a2 + 6);
    if ((unint64_t)(v30 - (unsigned char *)v29) > 3 || (unint64_t)(v27 - (unsigned char *)__p) > 3)
    {
      uint64_t v17 = v32.i64[1];
      for (uint64_t i = (unsigned int *)v32.i64[0]; i != (unsigned int *)v17; i += 36)
      {
        if (*i == 3) {
          unsigned int v18 = 2;
        }
        else {
          unsigned int v18 = *i == 2;
        }
        subscriber::EURSimCommandDriver::setSimInfo(a1, i, *(void *)(a2 + 8) + 40 * v18, (unsigned __int8 **)&v29, (unsigned __int8 **)&__p);
      }
      subscriber::EURSimCommandDriver::checkHardwareConfiguration_sync((NSObject **)a1, &v32, a3);
      subscriber::EURSimCommandDriver::checkInstanceConsistency_sync(a1, &v32);
      subscriber::SimCommandDriver::sendSimDriverInfo();
      v25[0] = 0;
      v25[1] = 0;
      *(void *)std::string buf = v25;
      uint64_t v20 = v32.i64[1];
      for (uint64_t j = v32.i64[0]; j != v20; j += 144)
      {
        if (*(unsigned char *)(j + 16) && (subscriber::isSimSettled() & 1) != 0)
        {
          int v21 = *(_DWORD *)j;
          if (*(_DWORD *)(j + 64) == 4) {
            std::__tree<std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,BOOL>>>::__emplace_unique_key_args<subscriber::HardwareSimSlot,subscriber::HardwareSimSlot const&,BOOL>((uint64_t *)buf, v21, *(_DWORD *)j, 1);
          }
          else {
            std::__tree<std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,BOOL>>>::__emplace_unique_key_args<subscriber::HardwareSimSlot,subscriber::HardwareSimSlot const&,BOOL>((uint64_t *)buf, v21, *(_DWORD *)j, 0);
          }
        }
      }
      std::map<subscriber::HardwareSimSlot,BOOL>::map[abi:ne180100]((uint64_t)v22, buf);
      subscriber::SimCommandDriver::markAllowedToReadCDMAAuxInfo();
      std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v23);
      std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v25[0]);
    }
    else
    {
      int v15 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_22231A000, v15, OS_LOG_TYPE_ERROR, "Not enough app indices, required at least 2", buf, 2u);
      }
    }
    if (__p)
    {
      unint64_t v27 = __p;
      operator delete(__p);
    }
    if (v29)
    {
      uint64_t v30 = v29;
      operator delete(v29);
    }
    char v29 = &v32;
  }
  std::vector<subscriber::SimDriverInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
}

void sub_22246F990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  a19 = (void *)(v20 - 88);
  std::vector<subscriber::SimDriverInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver20handleCardStatus_indERKN3uim16CardStatusChange10IndicationE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  qmi::Message<uim::CardStatusChange::IndicationTLVList,qmi::IndicationBase>::get<uim::tlv::HardwareSlotTypes>((uint64_t)v5, *(qmi::MessageBase **)(a1 + 40));
  subscriber::EURSimCommandDriver::sendSimInfo<uim::tlv::ExtendedCardStatus>(v3, a2, (uint64_t)v5);
  if (v5[0])
  {
    unint64_t v4 = __p;
    if (__p)
    {
      operator delete(v4);
    }
  }
}

void sub_22246FAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void qmi::Message<uim::CardStatusChange::IndicationTLVList,qmi::IndicationBase>::get<uim::tlv::HardwareSlotTypes>(uint64_t a1, qmi::MessageBase *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  qmi::MessageBase::tryTlv<uim::tlv::HardwareSlotTypes>(a2, (unsigned __int8 *)a1);
}

void sub_22246FB30(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)v1)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    *(unsigned char *)uint64_t v1 = 0;
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10subscriber19EURSimCommandDriver20handleCardStatus_indERKN3uim16CardStatusChange10IndicationE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  qmi::Message<uim::CardStatusChange::IndicationTLVList,qmi::IndicationBase>::get<uim::tlv::HardwareSlotTypes>((uint64_t)v5, *(qmi::MessageBase **)(a1 + 40));
  subscriber::EURSimCommandDriver::sendSimInfo<uim::tlv::CardStatus>(v3, a2, (uint64_t)v5);
  if (v5[0])
  {
    unint64_t v4 = __p;
    if (__p)
    {
      operator delete(v4);
    }
  }
}

void sub_22246FC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void subscriber::EURSimCommandDriver::unlockPin(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned __int8 v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *a2);
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v7 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v28);
  uint64_t v8 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>(v7);
  uint64_t v9 = (const void **)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1) != (void)v29)
  {
    while (*((unsigned char *)*v9 + 8) != 2)
    {
      if (++v9 == (const void **)v29) {
        goto LABEL_8;
      }
    }
  }
  if (v9 == (const void **)v29) {
LABEL_8:
  }
    operator new();
  if (!v10) {
    __cxa_bad_cast();
  }
  *((_DWORD *)v10 + 4) = 1;
  std::string::operator=((std::string *)v10 + 1, (const std::string *)a3);
  memset(&v27, 0, sizeof(v27));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v27 = *(std::string *)a3;
  }
  long long v23 = *(_OWORD *)a2;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  unint64_t v24 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v24, *((const void **)a2 + 2), *((void *)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
  uint64_t v18 = a1 + 128;
  uint64_t v19 = QMIServiceMsg::create();
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v20 = 240000;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  unint64_t v12[2] = ___ZN10subscriber19EURSimCommandDriver9unlockPinERKNS_11SimCardInfoERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke;
  void v12[3] = &__block_descriptor_tmp_24_15;
  v12[4] = a1;
  void v12[5] = v6;
  long long v13 = v23;
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v14, v24, (uint64_t)v25, v25 - (unsigned char *)v24);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v27;
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim9VerifyPin8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EA70;
  aBlock[4] = v12;
  int v11 = _Block_copy(aBlock);
  uint64_t v22 = v11;
  if (v19)
  {
    qmi::Client::send();
    int v11 = v22;
  }
  if (v11) {
    _Block_release(v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14)
  {
    int v15 = v14;
    operator delete(v14);
  }
  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v28);
}

void sub_222470058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (*(char *)(v35 - 169) < 0) {
    operator delete(*(void **)(v35 - 192));
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v35 - 160));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver9unlockPinERKNS_11SimCardInfoERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v7 = TlvValue;
    int v8 = v6;
    *(void *)std::string buf = TlvValue;
    __int16 v9 = tlv::parseV<uim::tlv::RetriesLeft>((unint64_t *)buf, v6);
    if (*(void *)buf)
    {
      BYTE4(v20) = 1;
      LODWORD(v20) = v9;
      BYTE4(v19) = 1;
      LODWORD(v19) = HIBYTE(v9);
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v7, v8);
    }
  }
  int v10 = *((_DWORD *)this + 1);
  if (v10)
  {
    if ((v10 - 35) >= 2)
    {
      if (v10 == 12)
      {
        int v11 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
LABEL_11:
          uint64_t v12 = qmi::asString();
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v12;
          long long v13 = "#I VerifyPin did not succeed: %s";
          uint64_t v14 = v11;
          uint32_t v15 = 12;
LABEL_14:
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
        }
      }
      else
      {
        uint64_t v16 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = qmi::asString();
          *(_DWORD *)std::string buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v17;
          long long v13 = "#I VerifyPin returns error: 0x%04x (%s); reseting Sim state to try again";
          uint64_t v14 = v16;
          uint32_t v15 = 18;
          goto LABEL_14;
        }
      }
    }
    else
    {
      int v11 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_11;
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t, BOOL, uint64_t *, uint64_t *))(**(void **)(v4 + 88)
                                                                                                 + 48))(*(void *)(v4 + 88), a1 + 48, 0, a1 + 88, v10 == 0, &v20, &v19);
}

void __copy_helper_block_e8_48c32_ZTSKN10subscriber11SimCardInfoE88c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (std::string *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = v3;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), *(void *)(a2 + 72) - *(void *)(a2 + 64));
  unint64_t v5 = v4 + 1;
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 88);
    v4[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 104);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_22247039C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c32_ZTSKN10subscriber11SimCardInfoE88c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  char v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void subscriber::EURSimCommandDriver::unlockPuk(uint64_t a1, unsigned int *a2, const std::string *a3, uint64_t a4)
{
  int v8 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *a2);
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v9 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v31);
  int v10 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>(v9);
  int v11 = (const void **)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1) != (void)v32)
  {
    while (*((unsigned char *)*v11 + 8) != 2)
    {
      if (++v11 == (const void **)v32) {
        goto LABEL_8;
      }
    }
  }
  if (v11 == (const void **)v32) {
LABEL_8:
  }
    operator new();
  if (!v12) {
    __cxa_bad_cast();
  }
  long long v13 = v12 + 16;
  *((_DWORD *)v12 + 4) = 1;
  std::string::operator=((std::string *)v12 + 1, a3);
  std::string::operator=((std::string *)(v13 + 32), (const std::string *)a4);
  memset(&v30, 0, sizeof(v30));
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v30 = *(std::string *)a4;
  }
  long long v26 = *(_OWORD *)a2;
  long long v28 = 0;
  uint64_t v29 = 0;
  std::string v27 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v27, *((const void **)a2 + 2), *((void *)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
  uint64_t v21 = a1 + 128;
  uint64_t v22 = QMIServiceMsg::create();
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  int v23 = 240000;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1174405120;
  _OWORD v15[2] = ___ZN10subscriber19EURSimCommandDriver9unlockPukERKNS_11SimCardInfoERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC__block_invoke;
  void v15[3] = &__block_descriptor_tmp_27_6;
  unsigned char v15[4] = a1;
  void v15[5] = v8;
  long long v16 = v26;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v17, v27, (uint64_t)v28, v28 - (unsigned char *)v27);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v30;
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim10UnblockPin8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EA98;
  aBlock[4] = v15;
  uint64_t v14 = _Block_copy(aBlock);
  unint64_t v25 = v14;
  if (v22)
  {
    qmi::Client::send();
    uint64_t v14 = v25;
  }
  if (v14) {
    _Block_release(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v27)
  {
    long long v28 = v27;
    operator delete(v27);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
}

void sub_222470848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (*(char *)(v35 - 169) < 0) {
    operator delete(*(void **)(v35 - 192));
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v35 - 160));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver9unlockPukERKNS_11SimCardInfoERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v7 = TlvValue;
    int v8 = v6;
    *(void *)std::string buf = TlvValue;
    __int16 v9 = tlv::parseV<uim::tlv::RetriesLeft>((unint64_t *)buf, v6);
    if (*(void *)buf)
    {
      BYTE4(v20) = 1;
      LODWORD(v20) = v9;
      BYTE4(v19) = 1;
      LODWORD(v19) = HIBYTE(v9);
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v7, v8);
    }
  }
  int v10 = *((_DWORD *)this + 1);
  if (v10)
  {
    if ((v10 - 35) >= 2)
    {
      if (v10 == 12)
      {
        int v11 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
LABEL_11:
          uint64_t v12 = qmi::asString();
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v12;
          long long v13 = "#I UnblockPin did not succeed: %s";
          uint64_t v14 = v11;
          uint32_t v15 = 12;
LABEL_14:
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
        }
      }
      else
      {
        long long v16 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = qmi::asString();
          *(_DWORD *)std::string buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v17;
          long long v13 = "#I UnblockPin returns error: 0x%04x (%s); reseting Sim state to try again";
          uint64_t v14 = v16;
          uint32_t v15 = 18;
          goto LABEL_14;
        }
      }
    }
    else
    {
      int v11 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_11;
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, BOOL, uint64_t *, uint64_t *))(**(void **)(v4 + 88)
                                                                                                  + 48))(*(void *)(v4 + 88), a1 + 48, 1, a1 + 88, v10 == 0, &v20, &v19);
}

void subscriber::EURSimCommandDriver::changePin(uint64_t a1, unsigned int *a2, const std::string *a3, uint64_t a4)
{
  int v8 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *a2);
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v9 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v31);
  int v10 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>(v9);
  int v11 = (const void **)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1) != (void)v32)
  {
    while (*((unsigned char *)*v11 + 8) != 2)
    {
      if (++v11 == (const void **)v32) {
        goto LABEL_8;
      }
    }
  }
  if (v11 == (const void **)v32) {
LABEL_8:
  }
    operator new();
  if (!v12) {
    __cxa_bad_cast();
  }
  long long v13 = v12 + 16;
  *((_DWORD *)v12 + 4) = 1;
  std::string::operator=((std::string *)v12 + 1, a3);
  std::string::operator=((std::string *)(v13 + 32), (const std::string *)a4);
  memset(&v30, 0, sizeof(v30));
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v30 = *(std::string *)a4;
  }
  long long v26 = *(_OWORD *)a2;
  long long v28 = 0;
  uint64_t v29 = 0;
  std::string v27 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v27, *((const void **)a2 + 2), *((void *)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
  uint64_t v21 = a1 + 128;
  uint64_t v22 = QMIServiceMsg::create();
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  int v23 = 240000;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1174405120;
  _OWORD v15[2] = ___ZN10subscriber19EURSimCommandDriver9changePinERKNS_11SimCardInfoERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC__block_invoke;
  void v15[3] = &__block_descriptor_tmp_30_10;
  unsigned char v15[4] = a1;
  void v15[5] = v8;
  long long v16 = v26;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v17, v27, (uint64_t)v28, v28 - (unsigned char *)v27);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v30;
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim9ChangePin8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EAC0;
  aBlock[4] = v15;
  uint64_t v14 = _Block_copy(aBlock);
  unint64_t v25 = v14;
  if (v22)
  {
    qmi::Client::send();
    uint64_t v14 = v25;
  }
  if (v14) {
    _Block_release(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v27)
  {
    long long v28 = v27;
    operator delete(v27);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
}

void sub_222470F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (*(char *)(v35 - 169) < 0) {
    operator delete(*(void **)(v35 - 192));
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v35 - 160));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver9changePinERKNS_11SimCardInfoERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v7 = TlvValue;
    int v8 = v6;
    *(void *)std::string buf = TlvValue;
    __int16 v9 = tlv::parseV<uim::tlv::RetriesLeft>((unint64_t *)buf, v6);
    if (*(void *)buf)
    {
      BYTE4(vstd::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 21) = 1;
      LODWORD(vstd::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 21) = v9;
      BYTE4(v20) = 1;
      LODWORD(v20) = HIBYTE(v9);
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v7, v8);
    }
  }
  int v10 = *((_DWORD *)this + 1);
  if (v10)
  {
    if ((v10 - 35) >= 2)
    {
      if (v10 == 12)
      {
        int v11 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
LABEL_12:
          uint64_t v13 = qmi::asString();
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v13;
          uint64_t v14 = "#I ChangePin did not succeed: %s";
          uint32_t v15 = v11;
          uint32_t v16 = 12;
LABEL_15:
          _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
        }
      }
      else
      {
        uint64_t v17 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = qmi::asString();
          *(_DWORD *)std::string buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v18;
          uint64_t v14 = "#I ChangePin returns error: 0x%04x (%s); reseting Sim state to try again";
          uint32_t v15 = v17;
          uint32_t v16 = 18;
          goto LABEL_15;
        }
      }
    }
    else
    {
      int v11 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
    }
    uint64_t v12 = 42;
    return (*(uint64_t (**)(void, uint64_t, uint64_t, BOOL, uint64_t, uint64_t *, uint64_t *))(**(void **)(v4 + 88) + 56))(*(void *)(v4 + 88), a1 + 48, a1 + 88, v10 == 0, v12, &v21, &v20);
  }
  uint64_t v12 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, BOOL, uint64_t, uint64_t *, uint64_t *))(**(void **)(v4 + 88)
                                                                                                  + 56))(*(void *)(v4 + 88), a1 + 48, a1 + 88, v10 == 0, v12, &v21, &v20);
}

void subscriber::EURSimCommandDriver::setPinEnabled(uint64_t a1, unsigned int *a2, char a3, uint64_t a4)
{
  int v8 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *a2);
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v9 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v31);
  int v10 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>(v9);
  int v11 = (const void **)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1) != (void)v32)
  {
    while (*((unsigned char *)*v11 + 8) != 2)
    {
      if (++v11 == (const void **)v32) {
        goto LABEL_8;
      }
    }
  }
  if (v11 == (const void **)v32) {
LABEL_8:
  }
    operator new();
  if (!v12) {
    __cxa_bad_cast();
  }
  *((_DWORD *)v12 + 4) = 1;
  *((unsigned char *)v12 + 20) = a3;
  std::string::operator=((std::string *)v12 + 1, (const std::string *)a4);
  memset(&v30, 0, sizeof(v30));
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v30 = *(std::string *)a4;
  }
  long long v26 = *(_OWORD *)a2;
  long long v28 = 0;
  uint64_t v29 = 0;
  std::string v27 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v27, *((const void **)a2 + 2), *((void *)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
  uint64_t v21 = a1 + 128;
  uint64_t v22 = QMIServiceMsg::create();
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  int v23 = 240000;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1174405120;
  void v14[2] = ___ZN10subscriber19EURSimCommandDriver13setPinEnabledERKNS_11SimCardInfoEbRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_33_10;
  uint8_t v14[4] = a1;
  v14[5] = v8;
  long long v15 = v26;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint32_t v16 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v16, v27, (uint64_t)v28, v28 - (unsigned char *)v27);
  char v20 = a3;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v30;
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim16SetPinProtection8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EAE8;
  aBlock[4] = v14;
  uint64_t v13 = _Block_copy(aBlock);
  unint64_t v25 = v13;
  if (v22)
  {
    qmi::Client::send();
    uint64_t v13 = v25;
  }
  if (v13) {
    _Block_release(v13);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v27)
  {
    long long v28 = v27;
    operator delete(v27);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
}

void sub_22247163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (*(char *)(v35 - 169) < 0) {
    operator delete(*(void **)(v35 - 192));
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v35 - 160));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver13setPinEnabledERKNS_11SimCardInfoEbRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v7 = TlvValue;
    int v8 = v6;
    *(void *)std::string buf = TlvValue;
    tlv::parseV<uim::tlv::RetriesLeft>((unint64_t *)buf, v6);
    if (!*(void *)buf) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v7, v8);
    }
  }
  int v9 = *((_DWORD *)this + 1);
  if ((v9 - 35) < 2)
  {
    uint64_t v14 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = qmi::asString();
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      uint64_t v12 = "#I SetPinProtection did not succeed: %s";
      uint64_t v13 = v14;
      goto LABEL_11;
    }
  }
  else
  {
    if (!v9) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 88) + 64))(*(void *)(v4 + 88), a1 + 48);
    }
    if (v9 == 12)
    {
      int v10 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = qmi::asString();
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v11;
        uint64_t v12 = "#I SetPinProtection did not succeed: %s";
        uint64_t v13 = v10;
LABEL_11:
        uint32_t v16 = 12;
LABEL_15:
        _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v16);
      }
    }
    else
    {
      uint64_t v17 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = qmi::asString();
        *(_DWORD *)std::string buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v9;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v18;
        uint64_t v12 = "#I SetPinProtection returns error: 0x%04x (%s); reseting Sim state to try again";
        uint64_t v13 = v17;
        uint32_t v16 = 18;
        goto LABEL_15;
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 88) + 64))(*(void *)(v4 + 88), a1 + 48);
}

void subscriber::EURSimCommandDriver::setObservedFiles(uint64_t a1, char **a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned int *)a2);
  uint64_t v7 = (os_log_t *)v6;
  unsigned int v46 = 0;
  int v47 = 0;
  unint64_t v48 = 0;
  int v8 = (void *)*a3;
  if ((void *)*a3 == a3 + 1) {
    goto LABEL_32;
  }
  uint64_t v33 = a1;
  uint64_t v34 = (os_log_t *)v6;
  do
  {
    subscriber::sGetFileId((char *)&v36);
    int v9 = v47;
    if ((unint64_t)v47 >= v48)
    {
      uint64_t v11 = (v47 - v46) >> 5;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 59) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v48 - (void)v46;
      if ((uint64_t)(v48 - (void)v46) >> 4 > v12) {
        unint64_t v12 = v13 >> 4;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      int v51 = &v48;
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>((uint64_t)&v48, v14);
      uint32_t v16 = &v15[32 * v11];
      *(void *)std::string buf = v15;
      *(void *)&uint8_t buf[8] = v16;
      unsigned int v50 = &v15[32 * v17];
      *(_WORD *)uint32_t v16 = v36;
      *((void *)v16 + 2) = 0;
      *((void *)v16 + 3) = 0;
      *((void *)v16 + 1) = 0;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)__p;
      *((void *)v16 + 3) = v38;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(void *)&uint8_t buf[16] = v16 + 32;
      std::vector<uim::tlv::FileId>::__swap_out_circular_buffer((uint64_t *)&v46, buf);
      int v10 = v47;
      std::__split_buffer<at::tlv::CommandCallback>::~__split_buffer((uint64_t)buf);
      int v47 = v10;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
        int v10 = v47;
      }
    }
    else
    {
      *(_WORD *)int v47 = v36;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = 0;
      *((void *)v9 + 1) = 0;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)__p;
      *((void *)v9 + 3) = v38;
      int v10 = v9 + 32;
      int v47 = v9 + 32;
    }
    if (subscriber::sIsFileIdInvalid((uint64_t)(v10 - 32)))
    {
      uint64_t v18 = v47;
      uint64_t v19 = (void *)*((void *)v47 - 3);
      if (v19)
      {
        *((void *)v47 - 2) = v19;
        operator delete(v19);
      }
      int v47 = v18 - 32;
    }
    char v20 = (void *)v8[1];
    if (v20)
    {
      do
      {
        uint64_t v21 = v20;
        char v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = (void *)v8[2];
        BOOL v22 = *v21 == (void)v8;
        int v8 = v21;
      }
      while (!v22);
    }
    int v8 = v21;
  }
  while (v21 != a3 + 1);
  uint64_t v7 = v34;
  if (v46 == v47)
  {
LABEL_32:
    uint64_t v29 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = subscriber::asString();
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, "#I Observed files list for %s ended up empty, probably due to unknown sim type; skipping for now",
        buf,
        0xCu);
    }
  }
  else
  {
    int v23 = *v34;
    if (os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = a3[2];
      uint64_t v25 = subscriber::asString();
      *(_DWORD *)std::string buf = 134218242;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v25;
      _os_log_impl(&dword_22231A000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting observed files (count = %lu) for %s", buf, 0x16u);
    }
    long long v44 = 0u;
    long long v45 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
    long long v26 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)&v44);
    std::string v27 = (unsigned int *)(v26 + 8);
    if (v27 != (unsigned int *)(a2 + 2)) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v27, a2[2], a2[3], a2[3] - a2[2]);
    }
    v40[0] = MEMORY[0x263EF8330];
    v40[1] = 1174405120;
    int v41 = ___ZN10subscriber19EURSimCommandDriver16setObservedFilesERKNS_11SimCardInfoERKNSt3__13setINS_11SimFilePathENS4_4lessIS6_EENS4_9allocatorIS6_EEEE_block_invoke;
    int v42 = &__block_descriptor_tmp_35_8;
    memset(v43, 0, sizeof(v43));
    std::vector<uim::tlv::FileId>::__init_with_size[abi:ne180100]<uim::tlv::FileId*,uim::tlv::FileId*>(v43, (uint64_t)v46, (uint64_t)v47, (v47 - v46) >> 5);
    long long v28 = (const void **)*((void *)&v44 + 1);
    if (*((void *)&v44 + 1) != (void)v45)
    {
      while (*((unsigned char *)*v28 + 8) != 2)
      {
        if (++v28 == (const void **)v45) {
          goto LABEL_37;
        }
      }
    }
    if (v28 == (const void **)v45) {
LABEL_37:
    }
      operator new();
    if (!v31) {
      __cxa_bad_cast();
    }
    v41(v40, (uint64_t)v31 + 16);
    uint64_t v36 = v33 + 128;
    __p[0] = (void *)QMIServiceMsg::create();
    uint64_t v38 = 0;
    long long aBlock = 0;
    LODWORD(__p[1]) = 240000;
    v35[0] = MEMORY[0x263EF8330];
    v35[1] = 0x40000000;
    v35[2] = ___ZN10subscriber19EURSimCommandDriver16setObservedFilesERKNS_11SimCardInfoERKNSt3__13setINS_11SimFilePathENS4_4lessIS6_EENS4_9allocatorIS6_EEEE_block_invoke_36;
    v35[3] = &__block_descriptor_tmp_37_5;
    v35[4] = v34;
    *(void *)std::string buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_21;
    unsigned int v50 = (char *)&unk_26460EB10;
    int v51 = v35;
    long long v32 = _Block_copy(buf);
    long long aBlock = v32;
    if (__p[0])
    {
      qmi::Client::send();
      long long v32 = aBlock;
    }
    if (v32) {
      _Block_release(v32);
    }
    *(void *)std::string buf = v43;
    std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
  }
  *(void *)std::string buf = &v46;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_222471FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  a17 = v29 - 168;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void subscriber::sGetFileId(char *a1)
{
  subscriber::getFileId();
  subscriber::sConvertFileId(a1, (uint64_t)&v2);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_2224720A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t subscriber::sIsFileIdInvalid(uint64_t a1)
{
  subscriber::sConvertFileId(v3, a1);
  uint64_t isFileIdInvalid = subscriber::isFileIdInvalid();
  if (__p)
  {
    unint64_t v5 = __p;
    operator delete(__p);
  }
  return isFileIdInvalid;
}

void sub_222472114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver16setObservedFilesERKNS_11SimCardInfoERKNSt3__13setINS_11SimFilePathENS4_4lessIS6_EENS4_9allocatorIS6_EEEE_block_invoke(uint64_t *a1, uint64_t a2)
{
  *(unsigned char *)a2 = 1;
  uint64_t v3 = a2 + 8;
  if ((uint64_t *)(a2 + 8) == a1 + 4) {
    goto LABEL_20;
  }
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v6 = (v4 - v5) >> 5;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 8);
  if (v6 > (v7 - v8) >> 5)
  {
    if (v8)
    {
      std::vector<at::tlv::CommandCallback>::__clear[abi:ne180100]((uint64_t *)(a2 + 8));
      operator delete(*(void **)v3);
      uint64_t v7 = 0;
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
    }
    if (v4 - v5 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v7 >> 4;
    if (v7 >> 4 <= v6) {
      uint64_t v9 = (v4 - v5) >> 5;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<uim::tlv::FileId>::__vallocate[abi:ne180100]((void *)v3, v10);
    a1 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<uim::tlv::FileId>,uim::tlv::FileId*,uim::tlv::FileId*,uim::tlv::FileId*>(a2 + 24, v5, v4, *(void *)(a2 + 16));
    goto LABEL_14;
  }
  unint64_t v11 = (*(void *)(a2 + 16) - v8) >> 5;
  if (v11 < v6)
  {
    uint64_t v12 = v5 + 32 * v11;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<uim::tlv::FileId *,uim::tlv::FileId *,uim::tlv::FileId *>(a1[4], v12, v8);
    a1 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<uim::tlv::FileId>,uim::tlv::FileId*,uim::tlv::FileId*,uim::tlv::FileId*>(a2 + 24, v12, v4, *(void *)(a2 + 16));
LABEL_14:
    *(void *)(a2 + 16) = a1;
    goto LABEL_20;
  }
  a1 = (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<uim::tlv::FileId *,uim::tlv::FileId *,uim::tlv::FileId *>(a1[4], v4, v8);
  uint64_t v13 = a1;
  unint64_t v14 = *(uint64_t **)(a2 + 16);
  if (v14 != a1)
  {
    do
    {
      a1 = (uint64_t *)*(v14 - 3);
      if (a1)
      {
        *(v14 - 2) = (uint64_t)a1;
        operator delete(a1);
      }
      v14 -= 4;
    }
    while (v14 != v13);
  }
  *(void *)(a2 + 16) = v13;
LABEL_20:
  uint64_t result = capabilities::ct::supportsVoiceCall((capabilities::ct *)a1);
  if (result) {
    *(unsigned char *)(a2 + 1) = 1;
  }
  return result;
}

void sub_2224722A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_2224722A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c57_ZTSNSt3__16vectorIN3uim3tlv6FileIdENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<uim::tlv::FileId>::__init_with_size[abi:ne180100]<uim::tlv::FileId*,uim::tlv::FileId*>(v2, *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
}

void __destroy_helper_block_e8_32c57_ZTSNSt3__16vectorIN3uim3tlv6FileIdENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN10subscriber19EURSimCommandDriver16setObservedFilesERKNS_11SimCardInfoERKNSt3__13setINS_11SimFilePathENS4_4lessIS6_EENS4_9allocatorIS6_EEEE_block_invoke_36(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = **(NSObject ***)(a1 + 32);
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "RefreshReg returns error: 0x%04x (%s); should reset?",
        (uint8_t *)v4,
        0x12u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Refresh indication for the observed files has been registered successfully", (uint8_t *)v4, 2u);
  }
}

void *___ZNK10subscriber19EURSimCommandDriver19sendRefreshCompleteEN8dispatch13group_sessionERKN3uim3tlv11SessionInfoEb_block_invoke(void *result, uint64_t a2)
{
  uint64_t v2 = result[4];
  *(unsigned char *)a2 = *(unsigned char *)v2;
  if (v2 != a2) {
    return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a2 + 8), *(char **)(v2 + 8), *(char **)(v2 + 16), *(void *)(v2 + 16) - *(void *)(v2 + 8));
  }
  return result;
}

uint64_t ___ZNK10subscriber19EURSimCommandDriver19sendRefreshCompleteEN8dispatch13group_sessionERKN3uim3tlv11SessionInfoEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZNK10subscriber19EURSimCommandDriver19sendRefreshCompleteEN8dispatch13group_sessionERKN3uim3tlv11SessionInfoEb_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    v8[0] = 67109378;
    v8[1] = v2;
    __int16 v9 = 2080;
    uint64_t v10 = qmi::asString();
    __int16 v5 = "#I RefreshComplete returns error: 0x%04x (%s); should reset?";
    uint64_t v6 = v3;
    uint32_t v7 = 18;
  }
  else
  {
    if (!v4) {
      return;
    }
    LOWORD(v8[0]) = 0;
    __int16 v5 = "#I RefreshComplete sent to baseband successfully";
    uint64_t v6 = v3;
    uint32_t v7 = 2;
  }
  _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void ___ZN10subscriber19EURSimCommandDriver17handleRefresh_indERKN3uim7Refresh10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(NSObject **)(v3 + 40);
  int v82 = (os_log_t *)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v5 = uim::asString(*a2);
    uint64_t v6 = uim::asString(*((_DWORD *)a2 + 1));
    uint32_t v7 = uim::asString(a2[8]);
    ctu::hex();
    uint64_t v8 = (SBYTE7(v86) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2080;
    BOOL v101 = v7;
    LOWORD(aBlock) = 2080;
    *(void *)((char *)&aBlock + 2) = v8;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Got uim::Refresh::Indication (stage=%s, mode=%s, type=%s, appID=%s)", buf, 0x2Au);
    if (SBYTE7(v86) < 0) {
      operator delete(__p[0]);
    }
  }
  switch(*a2)
  {
    case 0u:
      *(_OWORD *)std::string __p = 0u;
      long long v86 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      __int16 v9 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)__p);
      *__int16 v9 = a2[8];
      if (a2 + 8 != (unsigned __int8 *)v9) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)v9 + 1, *((char **)a2 + 2), *((char **)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
      }
      uint64_t v10 = (const void **)__p[1];
      if (__p[1] == (void *)v86) {
        goto LABEL_20;
      }
      while (*((unsigned char *)*v10 + 8) != 2)
      {
        if (++v10 == (const void **)v86) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if (v10 == (const void **)v86) {
LABEL_23:
      }
        operator new();
      if (!v19) {
        __cxa_bad_cast();
      }
      char v20 = v19 + 9;
      if (*(unsigned char *)(v3 + 296))
      {
        char v71 = subscriber::SimCommandDriver::allowSimRefresh((subscriber::SimCommandDriver *)v3);
        *char v20 = v71;
        if (v71) {
          goto LABEL_157;
        }
      }
      else
      {
        *char v20 = 0;
      }
      uint64_t v72 = *v82;
      if (os_log_type_enabled(*v82, OS_LOG_TYPE_DEFAULT))
      {
        int v73 = *(unsigned __int8 *)(v3 + 296);
        int v74 = subscriber::SimCommandDriver::allowSimRefresh((subscriber::SimCommandDriver *)v3);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v73;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v74;
        _os_log_impl(&dword_22231A000, v72, OS_LOG_TYPE_DEFAULT, "#I Preventing Sim refresh, should process sim updates, %d, celluar IMS call %d", buf, 0xEu);
      }
LABEL_157:
      *(void *)std::string buf = v3 + 128;
      *(void *)&uint8_t buf[8] = QMIServiceMsg::create();
      BOOL v101 = 0;
      *(void *)&long long aBlock = 0;
      *(_DWORD *)&uint8_t buf[16] = 240000;
      if (*(void *)&buf[8])
      {
        qmi::Client::send();
        if ((void)aBlock) {
          _Block_release((const void *)aBlock);
        }
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
      return;
    case 1u:
      unsigned int v15 = a2[8];
      BOOL v16 = v15 < 0x11;
      uint64_t v98 = 0;
      long long v96 = 0u;
      long long v97 = 0u;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      uint64_t v95 = 0;
      std::vector<uim::tlv::FileId>::__init_with_size[abi:ne180100]<uim::tlv::FileId*,uim::tlv::FileId*>(&v93, *((void *)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 5);
      unsigned int v17 = v16 & (0x10030u >> v15);
      switch(*((_DWORD *)a2 + 1))
      {
        case 0:
          goto LABEL_148;
        case 1:
        case 2:
        case 4:
          unsigned int v18 = v16 & (0x10030u >> v15);
          goto LABEL_55;
        case 3:
          unsigned int v18 = 1;
          LOBYTE(v17) = 1;
          goto LABEL_55;
        case 5:
          unsigned int v18 = 0;
          goto LABEL_55;
        case 6:
          unsigned int v18 = 1;
          goto LABEL_55;
        default:
          unsigned int v18 = 0;
          LOBYTE(v17) = 0;
LABEL_55:
          uint64_t v33 = dispatch_group_create();
          uint64_t v34 = v33;
          unsigned int v35 = a2[8];
          dispatch_object_t v92 = v33;
          if (v33)
          {
            dispatch_retain(v33);
            dispatch_group_enter(v34);
          }
          dispatch_object_t object = v34;
          subscriber::EURSimCommandDriver::setRefreshGroupForSession(v3, v35, &v92);
          if (v34)
          {
            dispatch_group_leave(v34);
            dispatch_release(v34);
          }
          uint64_t v36 = *((int *)a2 + 1);
          if (v36 > 6) {
            unsigned int v37 = 0;
          }
          else {
            unsigned int v37 = dword_22257E1B8[v36];
          }
          unsigned int v38 = a2[8];
          int v39 = 1;
          if (v38 <= 0x10)
          {
            if (((1 << v38) & 0x10030) != 0)
            {
              int v39 = 3;
            }
            else if (((1 << v38) & 0xA) != 0)
            {
              int v39 = 2;
            }
          }
          uint64_t v77 = a2;
          uint64_t v80 = (void *)v3;
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          std::vector<uim::tlv::FileId>::__init_with_size[abi:ne180100]<uim::tlv::FileId*,uim::tlv::FileId*>(&v89, v93, v94, (v94 - v93) >> 5);
          int v40 = 1;
          uint64_t v41 = v89;
          uint64_t v42 = v90;
          if (v38 <= 0x10)
          {
            if (((1 << v38) & 0x10030) != 0)
            {
              int v40 = 3;
            }
            else if (((1 << v38) & 0xA) != 0)
            {
              int v40 = 2;
            }
          }
          int v78 = v39;
          unsigned int v79 = v37;
          unsigned int v75 = v18;
          char v76 = v17;
          if (v89 == v90)
          {
            int v43 = 0;
            unsigned int v46 = 0;
            goto LABEL_103;
          }
          int v43 = 0;
          long long v44 = 0;
          unint64_t v45 = 0;
          unsigned int v46 = 0;
          break;
      }
      break;
    case 2u:
      uint64_t v11 = *((int *)a2 + 1);
      if (v11 > 6) {
        int v12 = 0;
      }
      else {
        int v12 = dword_22257E1B8[v11];
      }
      unsigned int v21 = a2[8];
      if (((1 << v21) & 0xA) != 0) {
        int v22 = 2;
      }
      else {
        int v22 = 1;
      }
      if (((1 << v21) & 0x10030) != 0) {
        int v23 = 3;
      }
      else {
        int v23 = v22;
      }
      if (v21 <= 0x10) {
        int v24 = v23;
      }
      else {
        int v24 = 1;
      }
      v87[0] = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v86 = 0u;
      uint64_t v25 = *(void *)(v3 + 88);
      *(_DWORD *)std::string buf = v12;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_DWORD *)&uint8_t buf[8] = 2;
      BOOL v101 = 0;
      *(void *)&long long aBlock = 0;
      *(void *)&uint8_t buf[16] = 0;
      WORD4(aBlock) = 256;
      int v107 = &unk_26D4CB998;
      char v110 = &v107;
      (*(void (**)(uint64_t, void **, uint8_t *, void **))(*(void *)v25 + 80))(v25, __p, buf, &v107);
      std::__function::__value_func<void ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](&v107);
      if (*(void *)&buf[16])
      {
        BOOL v101 = *(const char **)&buf[16];
        operator delete(*(void **)&buf[16]);
      }
      goto LABEL_49;
    case 3u:
      uint64_t v13 = *((int *)a2 + 1);
      if (v13 > 6) {
        int v14 = 0;
      }
      else {
        int v14 = dword_22257E1B8[v13];
      }
      unsigned int v26 = a2[8];
      if (((1 << v26) & 0xA) != 0) {
        int v27 = 2;
      }
      else {
        int v27 = 1;
      }
      if (((1 << v26) & 0x10030) != 0) {
        int v28 = 3;
      }
      else {
        int v28 = v27;
      }
      if (v26 <= 0x10) {
        int v29 = v28;
      }
      else {
        int v29 = 1;
      }
      v87[0] = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v86 = 0u;
      uint64_t v30 = *(void *)(v3 + 88);
      *(_DWORD *)std::string buf = v14;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_DWORD *)&uint8_t buf[8] = 3;
      BOOL v101 = 0;
      *(void *)&long long aBlock = 0;
      *(void *)&uint8_t buf[16] = 0;
      WORD4(aBlock) = 0;
      int v107 = &unk_26D4CBA18;
      char v110 = &v107;
      (*(void (**)(uint64_t, void **, uint8_t *, void **))(*(void *)v30 + 80))(v30, __p, buf, &v107);
      std::__function::__value_func<void ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](&v107);
      if (*(void *)&buf[16])
      {
        BOOL v101 = *(const char **)&buf[16];
        operator delete(*(void **)&buf[16]);
      }
LABEL_49:
      unsigned int v31 = a2[8];
      *(void *)&long long v96 = 0;
      subscriber::EURSimCommandDriver::setRefreshGroupForSession(v3, v31, (dispatch_object_t *)&v96);
      long long v32 = (void *)v86;
      if (!(void)v86) {
        return;
      }
      *((void *)&v86 + 1) = v86;
      goto LABEL_150;
    default:
      return;
  }
  do
  {
    memset(buf, 0, sizeof(buf));
    *(_WORD *)std::string buf = *(_WORD *)v41;
    BOOL v101 = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&buf[8], *(const void **)(v41 + 8), *(void *)(v41 + 16), (uint64_t)(*(void *)(v41 + 16) - *(void *)(v41 + 8)) >> 1);
    if (v40 == 1)
    {
      int SimFilePath = subscriber::sGetSimFilePath((uint64_t)v82, 2, (uint64_t)buf);
      if (SimFilePath != 40) {
        goto LABEL_81;
      }
      uint64_t v47 = 1;
    }
    else if (v40 == 2)
    {
      uint64_t v47 = 3;
    }
    else
    {
      uint64_t v47 = 5;
    }
    int SimFilePath = subscriber::sGetSimFilePath((uint64_t)v82, v47, (uint64_t)buf);
LABEL_81:
    if ((unint64_t)v46 >= v45)
    {
      uint64_t v49 = (v46 - v44) >> 2;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v45 - (void)v44) >> 1 > v50) {
        unint64_t v50 = (uint64_t)(v45 - (void)v44) >> 1;
      }
      if (v45 - (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      if (v51) {
        unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v51);
      }
      else {
        uint64_t v52 = 0;
      }
      int v43 = (char *)(v51 + 4 * v49);
      *(_DWORD *)int v43 = SimFilePath;
      unsigned int v53 = v43 + 4;
      while (v46 != v44)
      {
        int v54 = *((_DWORD *)v46 - 1);
        v46 -= 4;
        *((_DWORD *)v43 - 1) = v54;
        v43 -= 4;
      }
      unint64_t v45 = v51 + 4 * v52;
      if (v44) {
        operator delete(v44);
      }
      long long v44 = v43;
      unsigned int v46 = v53;
    }
    else
    {
      *(_DWORD *)unsigned int v46 = SimFilePath;
      v46 += 4;
    }
    if (*(void *)&buf[8])
    {
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
    v41 += 32;
  }
  while (v41 != v42);
LABEL_103:
  *(void *)std::string buf = &v89;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  uint64_t v55 = v80[11];
  int v107 = (void *)__PAIR64__(v78, v79);
  int v108 = 1;
  char v110 = 0;
  int v111 = 0;
  int v109 = 0;
  uint64_t v56 = v46 - v43;
  if (v46 != v43)
  {
    if (v56 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v57 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v56 >> 2);
    int v109 = v57;
    char v110 = v57;
    int v111 = (char *)v57 + 4 * v58;
    memmove(v57, v43, v46 - v43);
    char v110 = (void **)((char *)v57 + 4 * (v56 >> 2));
  }
  if (v75) {
    __int16 v59 = 257;
  }
  else {
    __int16 v59 = 1;
  }
  __int16 v112 = v59;
  __p[0] = v80;
  __p[1] = object;
  if (object)
  {
    dispatch_retain(object);
    if (__p[1]) {
      dispatch_group_enter((dispatch_group_t)__p[1]);
    }
  }
  LOBYTE(v86) = v76;
  BYTE8(v86) = v77[8];
  v87[1] = 0;
  uint64_t v88 = 0;
  v87[0] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v87, *((const void **)v77 + 2), *((void *)v77 + 3), *((void *)v77 + 3) - *((void *)v77 + 2));
  uint32_t v106 = 0;
  os_log_t v60 = (char *)operator new(0x40uLL);
  *(void *)os_log_t v60 = &unk_26D4CB698;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)__p;
  __p[1] = 0;
  v60[24] = v86;
  v60[32] = BYTE8(v86);
  *(_OWORD *)(v60 + 40) = *(_OWORD *)v87;
  *((void *)v60 + 7) = v88;
  v87[1] = 0;
  uint64_t v88 = 0;
  v87[0] = 0;
  uint32_t v106 = v60;
  (*(void (**)(uint64_t, long long *, void **, void *))(*(void *)v55 + 80))(v55, &v96, &v107, v105);
  std::__function::__value_func<void ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v105);
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (__p[1])
  {
    dispatch_group_leave((dispatch_group_t)__p[1]);
    if (__p[1]) {
      dispatch_release((dispatch_object_t)__p[1]);
    }
  }
  if (v109)
  {
    char v110 = v109;
    operator delete(v109);
  }
  if (v80[21])
  {
    long long v61 = *v82;
    if (os_log_type_enabled(*v82, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_22231A000, v61, OS_LOG_TYPE_DEFAULT, "#I Multiple refreshes in progress; chaining groups together",
        buf,
        2u);
    }
    if (object)
    {
      dispatch_retain(object);
      dispatch_group_enter(object);
    }
    os_log_t v62 = v80[21];
    uint64_t v63 = v80[3];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN10subscriber19EURSimCommandDriver18handleRefreshStartERKN3uim3tlv7RefreshE_block_invoke;
    block[3] = &__block_descriptor_tmp_43_9;
    dispatch_group_t group = object;
    if (object)
    {
      dispatch_retain(object);
      dispatch_group_enter(group);
    }
    dispatch_group_notify(v62, v63, block);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (object)
    {
      dispatch_group_leave(object);
      dispatch_release(object);
      goto LABEL_132;
    }
LABEL_133:
    long long v64 = v80[21];
    v80[21] = object;
    if (v64) {
      dispatch_release(v64);
    }
  }
  else
  {
    if (object)
    {
LABEL_132:
      dispatch_retain(object);
      goto LABEL_133;
    }
    v80[21] = 0;
  }
  long long v65 = (std::__shared_weak_count *)v80[2];
  if (!v65 || (uint64_t v66 = v80[1], (v67 = std::__shared_weak_count::lock(v65)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v68 = v67;
  p_unint64_t shared_weak_owners = &v67->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v67->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  uint64_t v70 = v80[3];
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = ___ZN10subscriber19EURSimCommandDriver18handleRefreshStartERKN3uim3tlv7RefreshE_block_invoke_44;
  BOOL v101 = (const char *)&__block_descriptor_tmp_45_8;
  *(void *)&long long aBlock = v80;
  *((void *)&aBlock + 1) = v66;
  os_log_t v103 = v68;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_object_t v104 = object;
  if (object) {
    dispatch_retain(object);
  }
  dispatch_group_notify(object, v70, buf);
  if (v104) {
    dispatch_release(v104);
  }
  if (v103) {
    std::__shared_weak_count::__release_weak(v103);
  }
  std::__shared_weak_count::__release_weak(v68);
  if (v43) {
    operator delete(v43);
  }
  if (object) {
    dispatch_release(object);
  }
LABEL_148:
  uint64_t v99 = (void **)&v93;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v99);
  long long v32 = (void *)v97;
  if ((void)v97)
  {
    *((void *)&v97 + 1) = v97;
LABEL_150:
    operator delete(v32);
  }
}

void sub_222473224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,dispatch_group_t group,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,void *a42,void *a43,uint64_t a44)
{
  std::__function::__value_func<void ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((void *)(v45 - 184));
  if (__p) {
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v47 = *(void **)(v45 - 136);
  if (v47)
  {
    *(void *)(v45 - 128) = v47;
    operator delete(v47);
  }
  if (v44) {
    operator delete(v44);
  }
  if (object) {
    dispatch_release(object);
  }
  a41 = &a32;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::sSimCardInfoFromSessionType(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 0;
      uint64_t v3 = 1;
      goto LABEL_9;
    case 1:
      uint64_t v2 = 0;
      uint64_t v3 = 1;
      goto LABEL_11;
    case 2:
      uint64_t v2 = 0;
      uint64_t v3 = 2;
LABEL_9:
      uint64_t v4 = 1;
      return MEMORY[0x270EE8C70](a1, v2, v3, v4, 0);
    case 3:
      uint64_t v2 = 0;
      uint64_t v3 = 2;
LABEL_11:
      uint64_t v4 = 2;
      return MEMORY[0x270EE8C70](a1, v2, v3, v4, 0);
    case 4:
    case 6:
      uint64_t v2 = 1;
      goto LABEL_5;
    case 5:
    case 7:
      uint64_t v2 = 2;
      goto LABEL_5;
    case 16:
    case 19:
      uint64_t v2 = 3;
LABEL_5:
      uint64_t v3 = 0;
      uint64_t v4 = 3;
      break;
    default:
      uint64_t v2 = 0;
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      break;
  }
  return MEMORY[0x270EE8C70](a1, v2, v3, v4, 0);
}

void subscriber::EURSimCommandDriver::setRefreshGroupForSession(uint64_t a1, unsigned int a2, dispatch_object_t *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t **)(a1 + 184);
  __int16 v5 = *(char **)(a1 + 184);
  if (*a3)
  {
    uint64_t v8 = (char *)(a1 + 184);
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = v5;
          unsigned int v9 = v5[32];
          if (v9 <= a2) {
            break;
          }
          __int16 v5 = *(char **)v8;
          uint64_t v6 = (uint64_t **)v8;
          if (!*(void *)v8) {
            goto LABEL_9;
          }
        }
        if (v9 >= a2) {
          break;
        }
        __int16 v5 = (char *)*((void *)v8 + 1);
        if (!v5)
        {
          uint64_t v6 = (uint64_t **)(v8 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      uint64_t v10 = v8;
      uint64_t v8 = (char *)operator new(0x30uLL);
      v8[32] = a2;
      *((void *)v8 + 5) = 0;
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = v10;
      *uint64_t v6 = (uint64_t *)v8;
      uint64_t v11 = **(void **)(a1 + 176);
      int v12 = (uint64_t *)v8;
      if (v11)
      {
        *(void *)(a1 + 176) = v11;
        int v12 = *v6;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v12);
      ++*(void *)(a1 + 192);
    }
    uint64_t v13 = *((void *)v8 + 5);
    int v14 = *(NSObject **)(a1 + 40);
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v15)
      {
        int v30 = 136315138;
        unsigned int v31 = uim::asString(a2);
        BOOL v16 = "#E Session start: replacing start for session type %s; it was not expected to overlap!";
LABEL_30:
        _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v30, 0xCu);
      }
    }
    else if (v15)
    {
      int v30 = 136315138;
      unsigned int v31 = uim::asString(a2);
      BOOL v16 = "#I Session start: marking start for session type %s";
      goto LABEL_30;
    }
    int v22 = *a3;
    if (*a3)
    {
      dispatch_retain(*a3);
      dispatch_group_enter(v22);
    }
    int v23 = *((void *)v8 + 5);
    *((void *)v8 + 5) = v22;
    if (v23)
    {
      dispatch_group_leave(v23);
      dispatch_release(v23);
    }
    return;
  }
  if (!v5) {
    goto LABEL_26;
  }
  unsigned int v17 = (uint64_t **)(a1 + 184);
  do
  {
    unsigned int v18 = v5[32];
    BOOL v19 = v18 >= a2;
    if (v18 >= a2) {
      char v20 = (char **)v5;
    }
    else {
      char v20 = (char **)(v5 + 8);
    }
    if (v19) {
      unsigned int v17 = (uint64_t **)v5;
    }
    __int16 v5 = *v20;
  }
  while (*v20);
  if (v17 != v6 && *((unsigned __int8 *)v17 + 32) <= a2)
  {
    int v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 136315138;
      unsigned int v31 = uim::asString(a2);
      _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I Session end: marking end for session type %s", (uint8_t *)&v30, 0xCu);
    }
    uint64_t v25 = v17[1];
    if (v25)
    {
      do
      {
        unsigned int v26 = v25;
        uint64_t v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      int v27 = v17;
      do
      {
        unsigned int v26 = v27[2];
        BOOL v28 = *v26 == (void)v27;
        int v27 = (uint64_t **)v26;
      }
      while (!v28);
    }
    if (*(uint64_t ***)(a1 + 176) == v17) {
      *(void *)(a1 + 176) = v26;
    }
    int v29 = *(uint64_t **)(a1 + 184);
    --*(void *)(a1 + 192);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, (uint64_t *)v17);
    std::__destroy_at[abi:ne180100]<std::pair<uim::SessionType const,dispatch::group_session>,0>((uint64_t)(v17 + 4));
    operator delete(v17);
  }
  else
  {
LABEL_26:
    unsigned int v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 136315138;
      unsigned int v31 = uim::asString(a2);
      _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, "#E Session end: did not find a prior start for %s; this was not expected.",
        (uint8_t *)&v30,
        0xCu);
    }
  }
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN10subscriber19EURSimCommandDriver18handleRefreshStartERKN3uim3tlv7RefreshE_block_invoke_44(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (subscriber::EURSimCommandDriver *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      __int16 v5 = v4;
      if (!a1[5]) {
        goto LABEL_17;
      }
      uint64_t v6 = *((void *)v3 + 21);
      if (!v6)
      {
        uint64_t v13 = *((void *)v3 + 5);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          uint64_t v10 = "#I Prior refresh group no longer active (is now null); returning";
          uint64_t v11 = buf;
          int v12 = v13;
          goto LABEL_10;
        }
LABEL_17:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        return;
      }
      uint32_t v7 = a1[7];
      uint64_t v8 = *((void *)v3 + 5);
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v7 != v6)
      {
        if (v9)
        {
          __int16 v15 = 0;
          uint64_t v10 = "#I Prior refresh group finished, but a new one has taken its place; returning now";
          uint64_t v11 = (uint8_t *)&v15;
          int v12 = v8;
LABEL_10:
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, v10, v11, 2u);
          goto LABEL_17;
        }
        goto LABEL_17;
      }
      if (v9)
      {
        *(_WORD *)int v14 = 0;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Refresh groups complete; querying SIM state once for free",
          v14,
          2u);
        uint64_t v6 = *((void *)v3 + 21);
        *((void *)v3 + std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 21) = 0;
        if (!v6) {
          goto LABEL_16;
        }
      }
      else
      {
        *((void *)v3 + std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 21) = 0;
      }
      dispatch_release(v6);
LABEL_16:
      subscriber::EURSimCommandDriver::queryStatus(v3);
      goto LABEL_17;
    }
  }
}

void sub_2224739A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c55_ZTSNSt3__18weak_ptrIN10subscriber16SimCommandDriverEEE56c21_ZTSN8dispatch5groupE(void *a1, void *a2)
{
  uint64_t v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  a1[7] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__18weak_ptrIN10subscriber16SimCommandDriverEEE56c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void subscriber::EURSimCommandDriver::readTransparentFile(uint64_t a1, char **a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned int *)a2);
  BOOL v9 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = subscriber::asString();
    int v11 = *a3;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v11;
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Reading Transparent %s file 0x%04x", buf, 0x12u);
  }
  *(_OWORD *)int v27 = 0u;
  long long v28 = 0u;
  subscriber::sConvertFileId((char *)v27, (uint64_t)a3);
  if (subscriber::sIsFileIdInvalid((uint64_t)v27))
  {
    int v12 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *a3;
      uint64_t v14 = subscriber::asString();
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v14;
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I No path and file id known, sending file data error for file 0x%04x under SIM %s", buf, 0x12u);
    }
    uint64_t v25 = 0;
    unsigned int v26 = 0;
    uint64_t v15 = *(void *)(a4 + 24);
    if (!v15) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v25);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
  }
  else
  {
    *(_OWORD *)std::string __p = 0u;
    long long v24 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    BOOL v16 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)__p);
    unsigned int v17 = (unsigned int *)(v16 + 8);
    if (v17 != (unsigned int *)(a2 + 2)) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v17, a2[2], a2[3], a2[3] - a2[2]);
    }
    unsigned int v18 = qmi::MutableMessageBase::getTLV<uim::tlv::FileId>((uint64_t)__p);
    *(_WORD *)unsigned int v18 = v27[0];
    if (v18 != (char *)v27) {
      std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v18 + 8, (char *)v27[1], v28, (uint64_t)(v28 - (unint64_t)v27[1]) >> 1);
    }
    BOOL v19 = (const void **)__p[1];
    if (__p[1] != (void *)v24)
    {
      while (*((unsigned char *)*v19 + 8) != 3)
      {
        if (++v19 == (const void **)v24) {
          goto LABEL_20;
        }
      }
    }
    if (v19 == (const void **)v24) {
LABEL_20:
    }
      operator new();
    uint64_t v21 = QMIServiceMsg::create();
    v29[0] = MEMORY[0x263EF8330];
    v29[1] = 1174405120;
    v29[2] = ___ZN10subscriber19EURSimCommandDriver19readTransparentFileERKNS_11SimCardInfoERKNS_6FileIdENSt3__18functionIFvNS7_10shared_ptrINS7_6vectorIhNS7_9allocatorIhEEEEEEEEE_block_invoke;
    v29[3] = &__block_descriptor_tmp_48_12;
    v29[4] = a1;
    std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::__value_func[abi:ne180100]((uint64_t)v30, a4);
    *(void *)std::string buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim15ReadTransparent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v32 = &unk_26460EB38;
    uint64_t v33 = v29;
    char v20 = _Block_copy(buf);
    long long aBlock = v20;
    if (v21)
    {
      qmi::Client::send();
      char v20 = aBlock;
    }
    if (v20) {
      _Block_release(v20);
    }
    std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v30);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  if (v27[1])
  {
    *(void **)&long long v28 = v27[1];
    operator delete(v27[1]);
  }
}

void sub_222473F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *subscriber::sConvertFileId(char *result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  *(_WORD *)uint64_t result = *(_WORD *)a2;
  if (result != (char *)a2) {
    return std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(result + 8, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 1);
  }
  return result;
}

{
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  *(_WORD *)uint64_t result = *(_WORD *)a2;
  if (result != (char *)a2) {
    return std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(result + 8, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 1);
  }
  return result;
}

void sub_222474000(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10subscriber19EURSimCommandDriver19readTransparentFileERKNS_11SimCardInfoERKNS_6FileIdENSt3__18functionIFvNS7_10shared_ptrINS7_6vectorIhNS7_9allocatorIhEEEEEEEEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 1))
  {
    uint64_t v23 = 0;
    long long v24 = 0;
    uint64_t v3 = *(void *)(a1 + 64);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v23);
    uint64_t v4 = v24;
    if (!v24) {
      return;
    }
LABEL_21:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    return;
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
  {
LABEL_18:
    __TUAssertTrigger();
LABEL_19:
    uint64_t v21 = 0;
    int v22 = 0;
    uint64_t v19 = *(void *)(a1 + 64);
    if (!v19) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 48))(v19, &v21);
    uint64_t v4 = v22;
    if (v22) {
      goto LABEL_21;
    }
    return;
  }
  uint64_t v8 = TlvValue;
  int v9 = v7;
  v31[0] = TlvValue;
  unsigned __int8 v10 = tlv::parseV<uim::tlv::CardResult>(v31, v7);
  if (!v31[0])
  {
    if (((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v8, v9))goto LABEL_19; {
    goto LABEL_18;
    }
  }
  if (!subscriber::isCardResultSW1Good((subscriber *)v10)) {
    goto LABEL_19;
  }
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::__value_func[abi:ne180100]((uint64_t)v31, a1 + 40);
  uint64_t v11 = qmi::MessageBase::findTlvValue(this);
  uint64_t v13 = v11;
  if (!v11)
  {
    std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v31);
LABEL_25:
    __TUAssertTrigger();
    return;
  }
  int v14 = v12;
  uint64_t v27 = 0;
  unint64_t v28 = v11;
  std::string __p = 0;
  unsigned int v26 = 0;
  tlv::parseV<uim::tlv::ReadResult>(&v28, v12, &__p);
  unint64_t v15 = v28;
  if (v28)
  {
    BOOL v16 = __p;
    uint64_t v17 = (uint64_t)v26;
    unsigned int v18 = (std::__shared_weak_count *)operator new(0x30uLL);
    v18->__shared_owners_ = 0;
    v18->__shared_weak_owners_ = 0;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CBB88;
    v18[1].__vftable = 0;
    v18[1].__shared_owners_ = 0;
    v18[1].__shared_weak_owners_ = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v18[1].__vftable, v16, v17, v17 - (void)v16);
    int v29 = v18 + 1;
    int v30 = v18;
    if (!v32) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v32 + 48))(v32, &v29);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
  }
  if (__p)
  {
    unsigned int v26 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v31);
    return;
  }
  char v20 = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 17, v13, v14);
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v31);
  if ((v20 & 1) == 0) {
    goto LABEL_25;
  }
}

void sub_2224742D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c75_ZTSNSt3__18functionIFvNS_10shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c75_ZTSNSt3__18functionIFvNS_10shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void subscriber::EURSimCommandDriver::writeTransparentFile(uint64_t a1, char **a2, uint64_t a3, char **a4, uint64_t a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v9 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned int *)a2);
  unsigned __int8 v10 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = subscriber::asString();
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = subscriber::asString();
    _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I Writing to Transparent %s file %s", buf, 0x16u);
  }
  *(_OWORD *)uint64_t v27 = 0u;
  long long v28 = 0u;
  subscriber::sGetFileId((char *)v27);
  if (subscriber::sIsFileIdInvalid((uint64_t)v27))
  {
    uint64_t v11 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = subscriber::asString();
      uint64_t v13 = subscriber::asString();
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I No path and file id known, sending file data error for file %s under SIM %s", buf, 0x16u);
    }
    (*(void (**)(uint64_t, void))(a5 + 16))(a5, 0);
  }
  else
  {
    *(_OWORD *)std::string __p = 0u;
    long long v26 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    int v14 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)__p);
    unint64_t v15 = (unsigned int *)(v14 + 8);
    if (v15 != (unsigned int *)(a2 + 2)) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v15, a2[2], a2[3], a2[3] - a2[2]);
    }
    BOOL v16 = qmi::MutableMessageBase::getTLV<uim::tlv::FileId>((uint64_t)__p);
    *(_WORD *)BOOL v16 = v27[0];
    if (v16 != (char *)v27) {
      std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v16 + 8, (char *)v27[1], v28, (uint64_t)(v28 - (unint64_t)v27[1]) >> 1);
    }
    uint64_t v17 = (const void **)__p[1];
    if (__p[1] != (void *)v26)
    {
      while (*((unsigned char *)*v17 + 8) != 3)
      {
        if (++v17 == (const void **)v26) {
          goto LABEL_18;
        }
      }
    }
    if (v17 == (const void **)v26) {
LABEL_18:
    }
      operator new();
    if (!v18) {
      __cxa_bad_cast();
    }
    uint8_t v18[8] = 0;
    if (v18 + 12 != (_WORD *)a4) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)v18 + 3, *a4, a4[1], a4[1] - *a4);
    }
    v20[5] = a1 + 128;
    uint64_t v21 = QMIServiceMsg::create();
    uint64_t v23 = 0;
    long long aBlock = 0;
    int v22 = 240000;
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 0x40000000;
    _OWORD v20[2] = ___ZN10subscriber19EURSimCommandDriver20writeTransparentFileERKNS_11SimCardInfoENS_11SimFilePathERKNSt3__16vectorIhNS5_9allocatorIhEEEEU13block_pointerFvbE_block_invoke;
    v20[3] = &unk_26460E690;
    v20[4] = a5;
    *(void *)std::string buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim16WriteTransparent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    int v30 = &unk_26460EB60;
    unsigned int v31 = v20;
    uint64_t v19 = _Block_copy(buf);
    long long aBlock = v19;
    if (v21)
    {
      qmi::Client::send();
      uint64_t v19 = aBlock;
    }
    if (v19) {
      _Block_release(v19);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  if (v27[1])
  {
    *(void **)&long long v28 = v27[1];
    operator delete(v27[1]);
  }
}

void sub_222474848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver20writeTransparentFileERKNS_11SimCardInfoENS_11SimFilePathERKNSt3__16vectorIhNS5_9allocatorIhEEEEU13block_pointerFvbE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t subscriber::EURSimCommandDriver::readRecordFile(uint64_t result, unsigned int *a2, unsigned __int16 *a3, int a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a4)
  {
    __int16 v5 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(result + 48) + 16))(*(void *)(result + 48), *a2);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      int v7 = *a3;
      buf[0] = 136315394;
      *(void *)&buf[1] = v6;
      __int16 v9 = 1024;
      int v10 = v7;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Reading record %s file 0x%04x", (uint8_t *)buf, 0x12u);
    }
    operator new();
  }
  return result;
}

void sub_222474ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](&a15);
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void subscriber::EURSimCommandDriver::readRecordInFile(uint64_t a1, char **a2, unsigned __int16 *a3, int a4, __int16 a5, uint64_t a6, void *a7)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v14 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned int *)a2);
  unint64_t v15 = *v14;
  if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = subscriber::asString();
    int v17 = *a3;
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a4;
    LOWORD(v49) = 2080;
    *(void *)((char *)&v49 + 2) = v16;
    WORD5(v49) = 1024;
    HIDWORD(v49) = v17;
    _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I Received read record for id: %d in %s file 0x%04x", buf, 0x18u);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v33 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  unsigned int v18 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)__p);
  uint64_t v19 = (unsigned int *)(v18 + 8);
  if (v19 != (unsigned int *)(a2 + 2)) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v19, a2[2], a2[3], a2[3] - a2[2]);
  }
  subscriber::sConvertFileId((char *)buf, (uint64_t)a3);
  char v20 = qmi::MutableMessageBase::getTLV<uim::tlv::FileId>((uint64_t)__p);
  *(_WORD *)char v20 = *(_WORD *)buf;
  uint64_t v21 = (void *)*((void *)v20 + 1);
  if (v21)
  {
    *((void *)v20 + 2) = v21;
    operator delete(v21);
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
    *((void *)v20 + 3) = 0;
  }
  *(_OWORD *)(v20 + 8) = v49;
  *((void *)v20 + 3) = v50;
  int v22 = (const void **)__p[1];
  if (__p[1] != (void *)v33)
  {
    while (*((unsigned char *)*v22 + 8) != 3)
    {
      if (++v22 == (const void **)v33) {
        goto LABEL_14;
      }
    }
  }
  if (v22 == (const void **)v33) {
LABEL_14:
  }
    operator new();
  if (!v23) {
    __cxa_bad_cast();
  }
  void v23[5] = a4;
  v23[6] = 0;
  long long v28 = *(_OWORD *)a2;
  int v30 = 0;
  uint64_t v31 = 0;
  int v29 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v29, a2[2], (uint64_t)a2[3], a2[3] - a2[2]);
  uint64_t v26 = QMIServiceMsg::create();
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 1174405120;
  v34[2] = ___ZN10subscriber19EURSimCommandDriver16readRecordInFileERKNS_11SimCardInfoENS_6FileIdEttNSt3__18functionIFvNS5_10shared_ptrINS5_6vectorIhNS5_9allocatorIhEEEEEEEEENS7_INS5_3mapItSB_NS5_4lessItEENS9_INS5_4pairIKtSB_EEEEEEEE_block_invoke;
  v34[3] = &__block_descriptor_tmp_51_10;
  long long v35 = v28;
  void v34[4] = a1;
  uint64_t v36 = 0;
  unsigned int v37 = 0;
  uint64_t v38 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v36, v29, (uint64_t)v30, v30 - (unsigned char *)v29);
  __int16 v39 = *a3;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v40 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&v40, *((const void **)a3 + 1), *((void *)a3 + 2), (uint64_t)(*((void *)a3 + 2) - *((void *)a3 + 1)) >> 1);
  __int16 v46 = a4;
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::__value_func[abi:ne180100]((uint64_t)v43, a6);
  long long v24 = (std::__shared_weak_count *)a7[1];
  uint8_t v43[4] = *a7;
  long long v44 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = v14;
  __int16 v47 = a5;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&long long v49 = 0x40000000;
  *((void *)&v49 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_21;
  unint64_t v50 = &unk_26460EB10;
  unint64_t v51 = v34;
  uint64_t v25 = _Block_copy(buf);
  long long aBlock = v25;
  if (v26)
  {
    qmi::Client::send();
    uint64_t v25 = aBlock;
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v43);
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (v36)
  {
    unsigned int v37 = v36;
    operator delete(v36);
  }
  if (v29)
  {
    int v30 = v29;
    operator delete(v29);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_22247506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v44);
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void subscriber::EURSimCommandDriver::queryFileAttributes(uint64_t a1, char **a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned int *)a2);
  __int16 v9 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = subscriber::asString();
    int v11 = *a3;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v11;
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Reading record %s file 0x%04x", buf, 0x12u);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v25 = 0u;
  subscriber::sConvertFileId((char *)__p, (uint64_t)a3);
  if (subscriber::sIsFileIdInvalid((uint64_t)__p))
  {
    uint64_t v12 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *a3;
      uint64_t v14 = subscriber::asString();
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v14;
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I No path and file id known, sending file data error for file 0x%04x under SIM %s", buf, 0x12u);
    }
    std::function<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::operator()(*(void *)(a4 + 24), 0, 0, 0);
  }
  else
  {
    memset(v23, 0, sizeof(v23));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v23);
    unint64_t v15 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)v23);
    uint64_t v16 = (unsigned int *)(v15 + 8);
    if (v16 != (unsigned int *)(a2 + 2)) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v16, a2[2], a2[3], a2[3] - a2[2]);
    }
    int v17 = qmi::MutableMessageBase::getTLV<uim::tlv::FileId>((uint64_t)v23);
    *(_WORD *)int v17 = __p[0];
    if (v17 != (char *)__p) {
      std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v17 + 8, (char *)__p[1], v25, (uint64_t)(v25 - (unint64_t)__p[1]) >> 1);
    }
    __int16 v18 = *a3;
    unsigned int v19 = *((_DWORD *)a2 + 3);
    uint64_t v21 = QMIServiceMsg::create();
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 1174405120;
    v26[2] = ___ZN10subscriber19EURSimCommandDriver19queryFileAttributesERKNS_11SimCardInfoERKNS_6FileIdENSt3__18functionIFvNS7_8optionalINS_17SimFileAttributesEEEhNS_11SimFileTypeEEEE_block_invoke;
    v26[3] = &__block_descriptor_tmp_50_7;
    v26[4] = a1;
    v26[5] = v8;
    unsigned int v28 = v19;
    __int16 v29 = v18;
    std::__function::__value_func<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::__value_func[abi:ne180100]((uint64_t)v27, a4);
    *(void *)std::string buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim17GetFileAttributes8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v31 = &unk_26460EB88;
    uint64_t v32 = v26;
    char v20 = _Block_copy(buf);
    long long aBlock = v20;
    if (v21)
    {
      qmi::Client::send();
      char v20 = aBlock;
    }
    if (v20) {
      _Block_release(v20);
    }
    std::__function::__value_func<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::~__value_func[abi:ne180100](v27);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
  }
  if (__p[1])
  {
    *(void **)&long long v25 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_22247546C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::operator()(uint64_t a1, __int16 a2, char a3, int a4)
{
  __int16 v7 = a2;
  char v6 = a3;
  int v5 = a4;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *, char *, int *))(*(void *)a1 + 48))(a1, &v7, &v6, &v5);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver19queryFileAttributesERKNS_11SimCardInfoERKNS_6FileIdENSt3__18functionIFvNS7_8optionalINS_17SimFileAttributesEEEhNS_11SimFileTypeEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a2 + 1);
  int v5 = **(NSObject ***)(a1 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      int v8 = *(unsigned __int16 *)(a1 + 84);
      int v9 = *((_DWORD *)a2 + 1);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v8;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v9;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I GetFileAttributes(%s file 0x%04x) returns error: 0x%04x (%s)", buf, 0x22u);
    }
    return std::function<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::operator()(*(void *)(a1 + 72), 0, 0, 0);
  }
  if (v6)
  {
    uint64_t v10 = subscriber::asString();
    int v11 = *(unsigned __int16 *)(a1 + 84);
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v11;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Got the file attributes for %s file 0x%04x", buf, 0x12u);
  }
  if (qmi::MessageBase::findTlvValue(a2))
  {
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v14 = TlvValue;
    if (TlvValue)
    {
      int v15 = v13;
      *(void *)std::string buf = TlvValue;
      unsigned __int8 v16 = tlv::parseV<uim::tlv::CardResult>((unint64_t *)buf, v13);
      if (*(void *)buf)
      {
        if ((subscriber::isCardResultSW1Good((subscriber *)v16) & 1) == 0)
        {
          int v17 = **(NSObject ***)(a1 + 40);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_error_impl(&dword_22231A000, v17, OS_LOG_TYPE_ERROR, "Get File Attributes returned with card result failed", buf, 2u);
          }
          return std::function<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::operator()(*(void *)(a1 + 72), 0, 0, 0);
        }
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v14, v15);
      }
    }
  }
  if (!qmi::MessageBase::findTlvValue(a2))
  {
    long long v25 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_22231A000, v25, OS_LOG_TYPE_ERROR, "Get File Attributes returned without FileAttributes", buf, 2u);
    }
    return std::function<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::operator()(*(void *)(a1 + 72), 0, 0, 0);
  }
  uint64_t v18 = qmi::MessageBase::findTlvValue(a2);
  uint64_t v20 = v18;
  if (v18)
  {
    int v21 = v19;
    unint64_t v28 = v18;
    *(_OWORD *)std::string __p = 0u;
    long long v31 = 0u;
    memset(buf, 0, sizeof(buf));
    tlv::parseV<uim::tlv::FileAttributes>(&v28, v19, buf);
    unint64_t v22 = v28;
    if (v28)
    {
      char v23 = buf[10];
      if (*(_DWORD *)&buf[20] == 4)
      {
        __int16 v24 = *(_DWORD *)&buf[24] == 1;
      }
      else if (*(_DWORD *)&buf[20] == 3)
      {
        __int16 v24 = buf[24] & 1;
      }
      else
      {
        __int16 v24 = *(_DWORD *)&buf[20] == 0;
      }
      if (*(_DWORD *)&buf[4] <= 4u)
      {
        int v27 = dword_22257E1D4[*(int *)&buf[4]];
LABEL_31:
        if (__p[1])
        {
          *(void **)&long long v31 = __p[1];
          operator delete(__p[1]);
        }
        if (!v22) {
          ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 17, v20, v21);
        }
        return std::function<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::operator()(*(void *)(a1 + 72), v24 | 0x100u, v23, v27);
      }
    }
    else
    {
      char v23 = 0;
      __int16 v24 = 0;
    }
    int v27 = 0;
    goto LABEL_31;
  }
  char v23 = 0;
  __int16 v24 = 0;
  int v27 = 0;
  return std::function<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::operator()(*(void *)(a1 + 72), v24 | 0x100u, v23, v27);
}

uint64_t __copy_helper_block_e8_48c93_ZTSNSt3__18functionIFvNS_8optionalIN10subscriber17SimFileAttributesEEEhNS2_11SimFileTypeEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void *__destroy_helper_block_e8_48c93_ZTSNSt3__18functionIFvNS_8optionalIN10subscriber17SimFileAttributesEEEhNS2_11SimFileTypeEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

void ___ZN10subscriber19EURSimCommandDriver16readRecordInFileERKNS_11SimCardInfoENS_6FileIdEttNSt3__18functionIFvNS5_10shared_ptrINS5_6vectorIhNS5_9allocatorIhEEEEEEEEENS7_INS5_3mapItSB_NS5_4lessItEENS9_INS5_4pairIKtSB_EEEEEEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 168);
  uint64_t v5 = a2[1];
  v64[0] = *a2;
  v64[1] = v5;
  uint64_t v6 = a2[2];
  v64[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v64);
  int v8 = *(uint64_t ***)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (HIDWORD(v64[0]))
  {
    int v9 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48), *(unsigned int *)(a1 + 40));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = subscriber::asString();
      int v11 = *(unsigned __int16 *)(a1 + 80);
      int v12 = HIDWORD(v64[0]);
      uint64_t v13 = qmi::asString();
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v11;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      __int16 v68 = 2080;
      uint64_t v69 = v13;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I ReadRecord(%s file 0x%04x) returns error: 0x%04x (%s)", buf, 0x22u);
    }
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v14 = *(void *)(a1 + 136);
    if (!v14) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    goto LABEL_27;
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v64);
  uint64_t v17 = TlvValue;
  if (!TlvValue) {
    goto LABEL_25;
  }
  int v18 = v16;
  *(void *)std::string buf = TlvValue;
  unsigned __int8 v19 = tlv::parseV<uim::tlv::CardResult>((unint64_t *)buf, v16);
  if (*(void *)buf)
  {
    if (subscriber::isCardResultSW1Good((subscriber *)v19))
    {
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v64);
      int v56 = v21;
      uint64_t v22 = v20;
      if (v20)
      {
        unint64_t v65 = v20;
        memset(buf, 0, sizeof(buf));
        tlv::parseV<uim::tlv::ReadResult>(&v65, v21, buf);
        unint64_t v55 = v65;
        if (v65)
        {
          __int16 v24 = v8 + 1;
          char v23 = v8[1];
          if (v23)
          {
            while (1)
            {
              while (1)
              {
                long long v25 = (uint64_t **)v23;
                unsigned int v26 = *((unsigned __int16 *)v23 + 16);
                if (v26 <= v4) {
                  break;
                }
                char v23 = *v25;
                __int16 v24 = v25;
                if (!*v25) {
                  goto LABEL_62;
                }
              }
              if (v26 >= v4) {
                break;
              }
              char v23 = v25[1];
              if (!v23)
              {
                __int16 v24 = v25 + 1;
                goto LABEL_62;
              }
            }
            uint64_t v52 = v25;
          }
          else
          {
            long long v25 = v8 + 1;
LABEL_62:
            uint64_t v52 = operator new(0x40uLL);
            v52[16] = v4;
            *((void *)v52 + 6) = 0;
            *((void *)v52 + 7) = 0;
            *((void *)v52 + 5) = 0;
            *(void *)uint64_t v52 = 0;
            *((void *)v52 + 1) = 0;
            *((void *)v52 + 2) = v25;
            *__int16 v24 = (uint64_t *)v52;
            unsigned int v53 = (uint64_t *)**v8;
            int v54 = (uint64_t *)v52;
            if (v53)
            {
              *int v8 = v53;
              int v54 = *v24;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v8[1], v54);
            _DWORD v8[2] = (uint64_t *)((char *)v8[2] + 1);
          }
          if (v52 + 20 != (_WORD *)buf) {
            std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)v52 + 5, *(char **)buf, *(char **)&buf[8], *(void *)&buf[8] - *(void *)buf);
          }
        }
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        if (v55) {
          LOBYTE(v22) = 1;
        }
        else {
          LOBYTE(v22) = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v64[0]), 17, v22, v56);
        }
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if ((v22 & 1) == 0) {
        __TUAssertTrigger();
      }
      char v27 = 1;
      if (v7) {
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    goto LABEL_26;
  }
  if ((((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v64[0]), 16, v17, v18) & 1) == 0) {
LABEL_25:
  }
    __TUAssertTrigger();
LABEL_26:
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v14 = *(void *)(a1 + 136);
  if (!v14) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_27:
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 48))(v14, buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  char v27 = 0;
  if (v7) {
LABEL_30:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_31:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v64);
  if (v27)
  {
    unsigned int v28 = *(unsigned __int16 *)(a1 + 168);
    unsigned int v29 = *(unsigned __int16 *)(a1 + 170);
    int v30 = **(NSObject ***)(a1 + 160);
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v28 >= v29)
    {
      if (v31)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_22231A000, v30, OS_LOG_TYPE_DEFAULT, "#I All records have been collected, assembling now", buf, 2u);
      }
      memset(buf, 0, sizeof(buf));
      uint64_t v41 = *(void **)(a1 + 144);
      long long v44 = (void *)*v41;
      uint64_t v42 = v41 + 1;
      int v43 = v44;
      if (v44 == v42)
      {
        uint64_t v48 = 0;
        long long v49 = 0;
      }
      else
      {
        do
        {
          std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)buf, *(char **)&buf[8], (char *)v43[5], (char *)v43[6], v43[6] - v43[5]);
          uint64_t v45 = (void *)v43[1];
          if (v45)
          {
            do
            {
              __int16 v46 = v45;
              uint64_t v45 = (void *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              __int16 v46 = (void *)v43[2];
              BOOL v47 = *v46 == (void)v43;
              int v43 = v46;
            }
            while (!v47);
          }
          int v43 = v46;
        }
        while (v46 != v42);
        long long v49 = *(const void **)buf;
        uint64_t v48 = *(void *)&buf[8];
      }
      unint64_t v50 = (std::__shared_weak_count *)operator new(0x30uLL);
      v50->__shared_owners_ = 0;
      v50->__shared_weak_owners_ = 0;
      v50->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CBB88;
      v50[1].__vftable = 0;
      v50[1].__shared_owners_ = 0;
      v50[1].__shared_weak_owners_ = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v50[1].__vftable, v49, v48, v48 - (void)v49);
      unsigned int v57 = v50 + 1;
      uint64_t v58 = v50;
      uint64_t v51 = *(void *)(a1 + 136);
      if (!v51) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v51 + 48))(v51, &v57);
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      unsigned int v37 = *(void **)buf;
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        goto LABEL_59;
      }
    }
    else
    {
      unsigned __int16 v32 = v28 + 1;
      if (v31)
      {
        uint64_t v33 = subscriber::asString();
        int v34 = *(unsigned __int16 *)(a1 + 80);
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v33;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v34;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v28 + 1;
        _os_log_impl(&dword_22231A000, v30, OS_LOG_TYPE_DEFAULT, "#I There are more records for %s file 0x%04x. Sending read record for ID: %d", buf, 0x18u);
      }
      __int16 v60 = *(_WORD *)(a1 + 80);
      os_log_t v62 = 0;
      uint64_t v63 = 0;
      long long v61 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&v61, *(const void **)(a1 + 88), *(void *)(a1 + 96), (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 1);
      uint64_t v35 = *(unsigned __int16 *)(a1 + 170);
      std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::__value_func[abi:ne180100]((uint64_t)v66, a1 + 112);
      uint64_t v36 = *(std::__shared_weak_count **)(a1 + 152);
      v59[0] = *(void *)(a1 + 144);
      v59[1] = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      subscriber::EURSimCommandDriver::readRecordInFile(v3, a1 + 40, &v60, v32, v35, v66, v59);
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v66);
      unsigned int v37 = v61;
      if (v61)
      {
        os_log_t v62 = v61;
LABEL_59:
        operator delete(v37);
      }
    }
  }
  else
  {
    uint64_t v38 = **(NSObject ***)(a1 + 160);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = subscriber::asString();
      int v40 = *(unsigned __int16 *)(a1 + 80);
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v39;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v40;
      _os_log_error_impl(&dword_22231A000, v38, OS_LOG_TYPE_ERROR, "Not continuing to read record for %s file 0x%04x. File Data Error has been sent out", buf, 0x12u);
    }
  }
}

void sub_222475FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c32_ZTSKN10subscriber11SimCardInfoE80c25_ZTSN10subscriber6FileIdE112c75_ZTSNSt3__18functionIFvNS_10shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEEEEE144c103_ZTSNSt3__110shared_ptrINS_3mapItNS_6vectorIhNS_9allocatorIhEEEENS_4lessItEENS3_INS_4pairIKtS5_EEEEEEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 64) - *(void *)(a2 + 56));
  __int16 v5 = *(_WORD *)(a2 + 80);
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  *(_WORD *)(a1 + 80) = v5;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 1);
  uint64_t result = std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::__value_func[abi:ne180100](a1 + 112, a2 + 112);
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_222476148(_Unwind_Exception *exception_object)
{
  __int16 v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c32_ZTSKN10subscriber11SimCardInfoE80c25_ZTSN10subscriber6FileIdE112c75_ZTSNSt3__18functionIFvNS_10shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEEEEE144c103_ZTSNSt3__110shared_ptrINS_3mapItNS_6vectorIhNS_9allocatorIhEEEENS_4lessItEENS3_INS_4pairIKtS5_EEEEEEEE(void *a1)
{
  uint64_t v2 = a1 + 14;
  uint64_t v3 = (std::__shared_weak_count *)a1[19];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v2);
  long long v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
}

void subscriber::EURSimCommandDriver::authenticate(uint64_t a1, char **a2, int a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  uint64_t v10 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned int *)a2);
  int v11 = v10;
  std::string __p = 0;
  unint64_t v136 = 0;
  unint64_t v137 = 0;
  switch(a3)
  {
    case 1:
      unsigned int v12 = *((_DWORD *)a2 + 3);
      if (v12 == 2)
      {
        *(_DWORD *)std::string buf = 0;
        __int16 v24 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 0, buf);
        int v25 = *((_DWORD *)v24 + 12) - *((_DWORD *)v24 + 10);
        uint64_t v37 = v136 - (unsigned char *)__p;
        int64_t v38 = v136 - (unsigned char *)__p + 1;
        if (v38 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v39 = v137 - (void)__p;
        if (2 * (v137 - (unint64_t)__p) > v38) {
          int64_t v38 = 2 * v39;
        }
        if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v40 = v38;
        }
        if (v40) {
          uint64_t v41 = operator new(v40);
        }
        else {
          uint64_t v41 = 0;
        }
        v41[v37] = v25;
        std::string __p = &v41[v37];
        unint64_t v137 = (unint64_t)&v41[v40];
        unint64_t v136 = &v41[v37 + 1];
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v136, (char *)v24[5], (char *)v24[6], (char *)v24[6] - (char *)v24[5]);
        int v14 = 2;
      }
      else
      {
        if (v12 != 1) {
          goto LABEL_20;
        }
        *(_DWORD *)std::string buf = 0;
        uint64_t v13 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 0, buf);
        if (&__p != (void **)(v13 + 5)) {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, (char *)v13[5], (char *)v13[6], (char *)v13[6] - (char *)v13[5]);
        }
        int v14 = 0;
      }
      goto LABEL_138;
    case 2:
      unsigned int v19 = *((_DWORD *)a2 + 3);
      if (v19 > 5) {
        goto LABEL_20;
      }
      if (((1 << v19) & 0x33) == 0)
      {
        *(_DWORD *)std::string buf = 0;
        int v34 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 0, buf);
        *(_DWORD *)std::string buf = 1;
        uint64_t v35 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 1, buf);
        int v36 = *((_DWORD *)v34 + 12) - *((_DWORD *)v34 + 10);
        BOOL v117 = v35;
        uint64_t v42 = v136 - (unsigned char *)__p;
        int64_t v43 = v136 - (unsigned char *)__p + 1;
        if (v43 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v44 = v137 - (void)__p;
        if (2 * (v137 - (unint64_t)__p) > v43) {
          int64_t v43 = 2 * v44;
        }
        if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v45 = v43;
        }
        if (v45) {
          __int16 v46 = operator new(v45);
        }
        else {
          __int16 v46 = 0;
        }
        os_log_t v62 = &v46[v45];
        v46[v42] = v36;
        uint64_t v63 = &v46[v42 + 1];
        long long v64 = &v46[v42];
        unint64_t v65 = v117;
        std::string __p = v64;
        unint64_t v137 = (unint64_t)v62;
        unint64_t v136 = v63;
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v63, (char *)v34[5], (char *)v34[6], (char *)v34[6] - (char *)v34[5]);
        int v66 = *((_DWORD *)v65 + 12) - *((_DWORD *)v65 + 10);
        int v67 = v136;
        if ((unint64_t)v136 >= v137)
        {
          uint64_t v69 = (char *)__p;
          uint64_t v70 = v136 - (unsigned char *)__p;
          int64_t v71 = v136 - (unsigned char *)__p + 1;
          if (v71 < 0) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v72 = v137 - (void)__p;
          if (2 * (v137 - (unint64_t)__p) > v71) {
            int64_t v71 = 2 * v72;
          }
          if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v73 = v71;
          }
          if (v73) {
            int v74 = operator new(v73);
          }
          else {
            int v74 = 0;
          }
          unsigned int v75 = (char *)v74 + v73;
          *((unsigned char *)v74 + v70) = v66;
          __int16 v68 = (char *)v74 + v70 + 1;
          if (v67 == v69)
          {
            int v74 = (char *)v74 + v70;
            unint64_t v65 = v117;
          }
          else
          {
            char v76 = &v67[~(unint64_t)v69];
            unint64_t v65 = v117;
            do
            {
              char v77 = *--v67;
              (v76--)[(void)v74] = v77;
            }
            while (v67 != v69);
            int v67 = (char *)__p;
          }
          std::string __p = v74;
          unint64_t v136 = v68;
          unint64_t v137 = (unint64_t)v75;
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *unint64_t v136 = v66;
          __int16 v68 = v67 + 1;
        }
        unint64_t v136 = v68;
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v68, (char *)v65[5], (char *)v65[6], (char *)v65[6] - (char *)v65[5]);
        int v14 = 3;
        goto LABEL_138;
      }
      int v16 = *v10;
      if (!os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      goto LABEL_19;
    case 3:
      unsigned int v17 = *((_DWORD *)a2 + 3);
      if (v17 < 5)
      {
        int v16 = *v10;
        if (!os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      if (v17 != 5) {
        goto LABEL_20;
      }
      *(_DWORD *)std::string buf = 0;
      unsigned int v28 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 0, buf);
      *(_DWORD *)std::string buf = 1;
      unsigned int v29 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 1, buf);
      int v30 = *((_DWORD *)v28 + 12) - *((_DWORD *)v28 + 10);
      uint64_t v115 = v29;
      uint64_t v52 = v136 - (unsigned char *)__p;
      int64_t v53 = v136 - (unsigned char *)__p + 1;
      if (v53 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v54 = v137 - (void)__p;
      if (2 * (v137 - (unint64_t)__p) > v53) {
        int64_t v53 = 2 * v54;
      }
      if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v55 = v53;
      }
      if (v55) {
        int v56 = operator new(v55);
      }
      else {
        int v56 = 0;
      }
      int v78 = &v56[v55];
      v56[v52] = v30;
      unsigned int v79 = &v56[v52 + 1];
      int v82 = &v56[v52];
      BOOL v83 = v115;
      std::string __p = v82;
      unint64_t v137 = (unint64_t)v78;
      unint64_t v136 = v79;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v79, (char *)v28[5], (char *)v28[6], (char *)v28[6] - (char *)v28[5]);
      int v84 = *((_DWORD *)v115 + 12) - *((_DWORD *)v115 + 10);
      int v85 = v136;
      if ((unint64_t)v136 >= v137)
      {
        int v87 = (char *)__p;
        uint64_t v88 = v136 - (unsigned char *)__p;
        int64_t v89 = v136 - (unsigned char *)__p + 1;
        if (v89 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v90 = v137 - (void)__p;
        if (2 * (v137 - (unint64_t)__p) > v89) {
          int64_t v89 = 2 * v90;
        }
        if (v90 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v91 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v91 = v89;
        }
        if (v91) {
          dispatch_object_t v92 = operator new(v91);
        }
        else {
          dispatch_object_t v92 = 0;
        }
        dispatch_object_t v104 = (char *)v92 + v91;
        *((unsigned char *)v92 + vstd::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = v84;
        long long v86 = (char *)v92 + v88 + 1;
        if (v85 == v87)
        {
          dispatch_object_t v92 = (char *)v92 + v88;
          BOOL v83 = v115;
        }
        else
        {
          char v105 = &v85[~(unint64_t)v87];
          BOOL v83 = v115;
          do
          {
            char v106 = *--v85;
            (v105--)[(void)v92] = v106;
          }
          while (v85 != v87);
          int v85 = (char *)__p;
        }
        std::string __p = v92;
        unint64_t v136 = v86;
        unint64_t v137 = (unint64_t)v104;
        if (v85) {
          operator delete(v85);
        }
      }
      else
      {
        *unint64_t v136 = v84;
        long long v86 = v85 + 1;
      }
      unint64_t v136 = v86;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v86, (char *)v83[5], (char *)v83[6], (char *)v83[6] - (char *)v83[5]);
      int v14 = 11;
      goto LABEL_138;
    case 4:
      unsigned int v18 = *((_DWORD *)a2 + 3);
      if (v18 < 5)
      {
        int v16 = *v10;
        if (!os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      if (v18 != 5) {
        goto LABEL_20;
      }
      *(_DWORD *)std::string buf = 0;
      BOOL v31 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 0, buf);
      *(_DWORD *)std::string buf = 1;
      unsigned __int16 v32 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 1, buf);
      int v33 = *((_DWORD *)v31 + 12) - *((_DWORD *)v31 + 10);
      int v116 = v32;
      uint64_t v57 = v136 - (unsigned char *)__p;
      int64_t v58 = v136 - (unsigned char *)__p + 1;
      if (v58 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v59 = v137 - (void)__p;
      if (2 * (v137 - (unint64_t)__p) > v58) {
        int64_t v58 = 2 * v59;
      }
      if (v59 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v60 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v60 = v58;
      }
      if (v60) {
        long long v61 = operator new(v60);
      }
      else {
        long long v61 = 0;
      }
      uint64_t v80 = &v61[v60];
      v61[v57] = v33;
      BOOL v81 = &v61[v57 + 1];
      uint64_t v93 = &v61[v57];
      uint64_t v94 = v116;
      std::string __p = v93;
      unint64_t v137 = (unint64_t)v80;
      unint64_t v136 = v81;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v81, (char *)v31[5], (char *)v31[6], (char *)v31[6] - (char *)v31[5]);
      int v95 = *((_DWORD *)v116 + 12) - *((_DWORD *)v116 + 10);
      long long v96 = v136;
      if ((unint64_t)v136 >= v137)
      {
        uint64_t v98 = (char *)__p;
        uint64_t v99 = v136 - (unsigned char *)__p;
        int64_t v100 = v136 - (unsigned char *)__p + 1;
        if (v100 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v101 = v137 - (void)__p;
        if (2 * (v137 - (unint64_t)__p) > v100) {
          int64_t v100 = 2 * v101;
        }
        if (v101 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v102 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v102 = v100;
        }
        if (v102) {
          os_log_t v103 = operator new(v102);
        }
        else {
          os_log_t v103 = 0;
        }
        int v107 = (char *)v103 + v102;
        *((unsigned char *)v103 + v99) = v95;
        long long v97 = (char *)v103 + v99 + 1;
        if (v96 == v98)
        {
          os_log_t v103 = (char *)v103 + v99;
          uint64_t v94 = v116;
        }
        else
        {
          int v108 = &v96[~(unint64_t)v98];
          uint64_t v94 = v116;
          do
          {
            char v109 = *--v96;
            (v108--)[(void)v103] = v109;
          }
          while (v96 != v98);
          long long v96 = (char *)__p;
        }
        std::string __p = v103;
        unint64_t v136 = v97;
        unint64_t v137 = (unint64_t)v107;
        if (v96) {
          operator delete(v96);
        }
      }
      else
      {
        *unint64_t v136 = v95;
        long long v97 = v96 + 1;
      }
      unint64_t v136 = v97;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v97, (char *)v94[5], (char *)v94[6], (char *)v94[6] - (char *)v94[5]);
      int v14 = 5;
      goto LABEL_138;
    case 5:
      unsigned int v15 = *((_DWORD *)a2 + 3);
      if (v15 < 5)
      {
        int v16 = *v10;
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
        {
LABEL_19:
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = subscriber::asString();
          _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#N SIM authenticate fails because SIM type=%s", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v15 != 5)
      {
LABEL_20:
        uint64_t v20 = *v11;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = subscriber::asString();
          uint64_t v22 = subscriber::asString();
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v22;
          _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#N SIM authenticate type %s fails because SIM type=%s", buf, 0x16u);
        }
        v134[0] = 0;
        v134[1] = 0;
        long long v133 = v134;
        uint64_t v23 = *(void *)(a5 + 24);
        if (!v23) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void ***))(*(void *)v23 + 48))(v23, &v133);
        std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(v134[0]);
        goto LABEL_159;
      }
      *(_DWORD *)std::string buf = 2;
      unsigned int v26 = std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(a4, 2, buf);
      int v27 = *((_DWORD *)v26 + 12) - *((_DWORD *)v26 + 10);
      uint64_t v47 = v136 - (unsigned char *)__p;
      int64_t v48 = v136 - (unsigned char *)__p + 1;
      if (v48 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v49 = v137 - (void)__p;
      if (2 * (v137 - (unint64_t)__p) > v48) {
        int64_t v48 = 2 * v49;
      }
      if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v50 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v50 = v48;
      }
      if (v50) {
        uint64_t v51 = operator new(v50);
      }
      else {
        uint64_t v51 = 0;
      }
      v51[v47] = v27;
      std::string __p = &v51[v47];
      unint64_t v137 = (unint64_t)&v51[v50];
      unint64_t v136 = &v51[v47 + 1];
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, v136, (char *)v26[5], (char *)v26[6], (char *)v26[6] - (char *)v26[5]);
      int v14 = 6;
LABEL_138:
      long long v131 = 0u;
      long long v132 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v131);
      char v110 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)&v131);
      int v111 = (unsigned int *)(v110 + 8);
      if (v111 != (unsigned int *)(a2 + 2)) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v111, a2[2], a2[3], a2[3] - a2[2]);
      }
      v124[0] = MEMORY[0x263EF8330];
      v124[1] = 1174405120;
      long long v125 = (void (*)(void *, char *))___ZN10subscriber19EURSimCommandDriver12authenticateERKNS_11SimCardInfoENS_8AuthTypeENSt3__13mapINS_8AuthInfoENS5_6vectorIhNS5_9allocatorIhEEEENS5_4lessIS7_EENS9_INS5_4pairIKS7_SB_EEEEEENS5_8functionIFvSI_EEE_block_invoke;
      long long v126 = &__block_descriptor_tmp_52_6;
      int v130 = v14;
      long long v128 = 0;
      uint64_t v129 = 0;
      long long v127 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v127, __p, (uint64_t)v136, v136 - (unsigned char *)__p);
      __int16 v112 = (const void **)*((void *)&v131 + 1);
      if (*((void *)&v131 + 1) != (void)v132)
      {
        while (*((unsigned char *)*v112 + 8) != 2)
        {
          if (++v112 == (const void **)v132) {
            goto LABEL_147;
          }
        }
      }
      if (v112 == (const void **)v132) {
LABEL_147:
      }
        operator new();
      if (!v113) {
        __cxa_bad_cast();
      }
      v125(v124, v113 + 16);
      long long v120 = *(_OWORD *)a2;
      long long v122 = 0;
      uint64_t v123 = 0;
      long long v121 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v121, a2[2], (uint64_t)a2[3], a2[3] - a2[2]);
      uint64_t v118 = QMIServiceMsg::create();
      v138[0] = MEMORY[0x263EF8330];
      v138[1] = 1174405120;
      v138[2] = ___ZN10subscriber19EURSimCommandDriver12authenticateERKNS_11SimCardInfoENS_8AuthTypeENSt3__13mapINS_8AuthInfoENS5_6vectorIhNS5_9allocatorIhEEEENS5_4lessIS7_EENS9_INS5_4pairIKS7_SB_EEEEEENS5_8functionIFvSI_EEE_block_invoke_53;
      v138[3] = &__block_descriptor_tmp_56_3;
      v138[4] = a1;
      v138[5] = v11;
      int v144 = v14;
      long long v139 = v120;
      long long v141 = 0;
      uint64_t v142 = 0;
      long long v140 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v140, v121, (uint64_t)v122, v122 - (unsigned char *)v121);
      std::__function::__value_func<void ()(std::map<subscriber::AuthInfo,std::vector<unsigned char>>)>::__value_func[abi:ne180100]((uint64_t)v143, a5);
      *(void *)std::string buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim12Authenticate8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      long long v146 = &unk_26460EBB0;
      long long v147 = v138;
      int v114 = _Block_copy(buf);
      long long aBlock = v114;
      if (v118)
      {
        qmi::Client::send();
        int v114 = aBlock;
      }
      if (v114) {
        _Block_release(v114);
      }
      std::__function::__value_func<void ()(std::map<subscriber::AuthInfo,std::vector<unsigned char>>)>::~__value_func[abi:ne180100](v143);
      if (v140)
      {
        long long v141 = v140;
        operator delete(v140);
      }
      if (v121)
      {
        long long v122 = v121;
        operator delete(v121);
      }
      if (v127)
      {
        long long v128 = v127;
        operator delete(v127);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v131);
LABEL_159:
      if (__p)
      {
        unint64_t v136 = (char *)__p;
        operator delete(__p);
      }
      return;
    default:
      goto LABEL_20;
  }
}

void sub_222477174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *___ZN10subscriber19EURSimCommandDriver12authenticateERKNS_11SimCardInfoENS_8AuthTypeENSt3__13mapINS_8AuthInfoENS5_6vectorIhNS5_9allocatorIhEEEENS5_4lessIS7_EENS9_INS5_4pairIKS7_SB_EEEEEENS5_8functionIFvSI_EEE_block_invoke(void *result, _DWORD *a2)
{
  *a2 = *((_DWORD *)result + 14);
  uint64_t v2 = a2 + 2;
  if (v2 != result + 4) {
    return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v2, (char *)result[4], (char *)result[5], result[5] - result[4]);
  }
  return result;
}

void *__copy_helper_block_e8_32c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN10subscriber19EURSimCommandDriver12authenticateERKNS_11SimCardInfoENS_8AuthTypeENSt3__13mapINS_8AuthInfoENS5_6vectorIhNS5_9allocatorIhEEEENS5_4lessIS7_EENS9_INS5_4pairIKS7_SB_EEEEEENS5_8functionIFvSI_EEE_block_invoke_53(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v47 = 0;
  int64_t v48 = &v47;
  uint64_t v49 = 0x4002000000;
  size_t v50 = __Block_byref_object_copy__6;
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v51 = __Block_byref_object_dispose__6;
  uint64_t v52 = v53;
  int v5 = *((_DWORD *)a2 + 1);
  if (v5 && v5 != 34)
  {
    uint64_t v13 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = qmi::asString();
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v14;
      _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#N SIM authenticate fails due to error 0x%04x (%s)", buf, 0x12u);
    }
  }
  else
  {
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 1174405120;
    uint64_t v37 = ___ZN10subscriber19EURSimCommandDriver12authenticateERKNS_11SimCardInfoENS_8AuthTypeENSt3__13mapINS_8AuthInfoENS5_6vectorIhNS5_9allocatorIhEEEENS5_4lessIS7_EENS9_INS5_4pairIKS7_SB_EEEEEENS5_8functionIFvSI_EEE_block_invoke_54;
    int64_t v38 = &unk_26D4CB0E8;
    int v46 = *(_DWORD *)(a1 + 120);
    unint64_t v39 = &v47;
    uint64_t v40 = v4;
    uint64_t v41 = *(void *)(a1 + 40);
    long long v42 = *(_OWORD *)(a1 + 48);
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 72) - *(void *)(a1 + 64));
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v8 = TlvValue;
    if (!TlvValue) {
      goto LABEL_10;
    }
    int v9 = v7;
    unint64_t v54 = TlvValue;
    memset(buf, 0, sizeof(buf));
    tlv::parseV<uim::tlv::AuthResult>(&v54, v7, buf);
    unint64_t v10 = v54;
    if (v54) {
      ((void (*)(void *, uint8_t *))v37)(v36, buf);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    if (!v10
      && (((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 17, v8, v9) & 1) == 0)
    {
LABEL_10:
      int v11 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = subscriber::asString();
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I SIM authenticate success but no data for card %s", buf, 0xCu);
      }
    }
    if (__p)
    {
      unint64_t v44 = __p;
      operator delete(__p);
    }
  }
  int v34 = 0;
  uint64_t v35 = 0;
  int v33 = &v34;
  unsigned int v15 = (uint64_t *)v48[5];
  int v16 = v48 + 6;
  if (v15 != v48 + 6)
  {
    unsigned int v17 = 0;
    unsigned int v18 = &v34;
    while (1)
    {
      unsigned int v19 = &v34;
      if (v18 == &v34) {
        break;
      }
      uint64_t v20 = v17;
      uint64_t v21 = &v34;
      if (v17)
      {
        do
        {
          unsigned int v19 = (uint64_t **)v20;
          uint64_t v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        do
        {
          unsigned int v19 = (uint64_t **)v21[2];
          BOOL v22 = *v19 == (uint64_t *)v21;
          uint64_t v21 = v19;
        }
        while (v22);
      }
      int v23 = *((_DWORD *)v15 + 8);
      if (*((_DWORD *)v19 + 8) < v23) {
        break;
      }
      int v25 = &v34;
      __int16 v24 = &v34;
      if (!v17) {
        goto LABEL_40;
      }
      unsigned int v26 = v17;
      while (1)
      {
        while (1)
        {
          __int16 v24 = (uint64_t **)v26;
          int v27 = *((_DWORD *)v26 + 8);
          if (v27 <= v23) {
            break;
          }
          unsigned int v26 = *v24;
          int v25 = v24;
          if (!*v24) {
            goto LABEL_40;
          }
        }
        if (v27 >= v23) {
          break;
        }
        unsigned int v26 = v24[1];
        if (!v26)
        {
          int v25 = v24 + 1;
          goto LABEL_40;
        }
      }
LABEL_43:
      int v30 = (uint64_t *)v15[1];
      if (v30)
      {
        do
        {
          BOOL v31 = v30;
          int v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          BOOL v31 = (uint64_t *)v15[2];
          BOOL v22 = *v31 == (void)v15;
          unsigned int v15 = v31;
        }
        while (!v22);
      }
      if (v31 == v16) {
        goto LABEL_50;
      }
      unsigned int v18 = v33;
      unsigned int v17 = v34;
      unsigned int v15 = v31;
    }
    if (v17) {
      __int16 v24 = v19;
    }
    else {
      __int16 v24 = &v34;
    }
    if (v17)
    {
      int v25 = v19 + 1;
    }
    else
    {
      unsigned int v19 = (uint64_t **)&v33;
      int v25 = &v34;
    }
    if (v19[1]) {
      goto LABEL_43;
    }
LABEL_40:
    unsigned int v28 = operator new(0x40uLL);
    int v29 = *((_DWORD *)v15 + 8);
    v28[5] = 0;
    *((_DWORD *)v28 + 8) = v29;
    v28[6] = 0;
    v28[7] = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v28 + 5, (const void *)v15[5], v15[6], v15[6] - v15[5]);
    *unsigned int v28 = 0;
    v28[1] = 0;
    v28[2] = v24;
    *int v25 = v28;
    if (*v33)
    {
      int v33 = (uint64_t **)*v33;
      unsigned int v28 = *v25;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v34, v28);
    ++v35;
    goto LABEL_43;
  }
LABEL_50:
  uint64_t v32 = *(void *)(a1 + 112);
  if (!v32) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t ***))(*(void *)v32 + 48))(v32, &v33);
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(v34);
  _Block_object_dispose(&v47, 8);
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(v53[0]);
}

void sub_222477774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a26, 8);
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(a32);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__6(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    void *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void ___ZN10subscriber19EURSimCommandDriver12authenticateERKNS_11SimCardInfoENS_8AuthTypeENSt3__13mapINS_8AuthInfoENS5_6vectorIhNS5_9allocatorIhEEEENS5_4lessIS7_EENS9_INS5_4pairIKS7_SB_EEEEEENS5_8functionIFvSI_EEE_block_invoke_54(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)(a1 + 96))
  {
    case 0:
      if ((subscriber::SimCommandDriver::parseEapSim() & 1) == 0)
      {
        uint64_t v2 = **(NSObject ***)(a1 + 48);
        if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        LOWORD(v9) = 0;
        uint64_t v3 = "EAP-SIM response received, but response is error or not parsable; dropping";
        goto LABEL_22;
      }
      break;
    case 2:
      if ((subscriber::SimCommandDriver::parseEapSim() & 1) == 0)
      {
        uint64_t v2 = **(NSObject ***)(a1 + 48);
        if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        LOWORD(v9) = 0;
        uint64_t v3 = "EAP-SIM response received, but response is error or not parsable; dropping";
        goto LABEL_22;
      }
      break;
    case 3:
      if ((subscriber::SimCommandDriver::parseEapAka() & 1) == 0)
      {
        uint64_t v2 = **(NSObject ***)(a1 + 48);
        if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        LOWORD(v9) = 0;
        uint64_t v3 = "EAP-AKA response received, but response is error or not parsable; dropping";
        goto LABEL_22;
      }
      break;
    case 5:
      if ((subscriber::SimCommandDriver::parseImsGbaBs() & 1) == 0)
      {
        uint64_t v2 = **(NSObject ***)(a1 + 48);
        if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        LOWORD(v9) = 0;
        uint64_t v3 = "GBA-BS response received, but response is error or not parsable; dropping";
        goto LABEL_22;
      }
      break;
    case 6:
      if ((subscriber::SimCommandDriver::parseImsGbaNaf() & 1) == 0)
      {
        uint64_t v2 = **(NSObject ***)(a1 + 48);
        if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        LOWORD(v9) = 0;
        uint64_t v3 = "IMS-GBA-NAF response received, but response is error or not parsable; dropping";
        goto LABEL_22;
      }
      break;
    case 0xB:
      if ((subscriber::SimCommandDriver::parseImsAka() & 1) == 0)
      {
        uint64_t v2 = **(NSObject ***)(a1 + 48);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v9) = 0;
          uint64_t v3 = "AKA response received, but response is error or not parsable; dropping";
LABEL_22:
          _os_log_error_impl(&dword_22231A000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v9, 2u);
        }
LABEL_23:
        int v7 = *(void **)(*(void *)(a1 + 32) + 8);
        uint64_t v8 = (void *)v7[6];
        v7 += 6;
        std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(v8);
        *(v7 - 1) = v7;
        *int v7 = 0;
        v7[1] = 0;
      }
      break;
    default:
      uint64_t v4 = **(NSObject ***)(a1 + 48);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = subscriber::asString();
        uint64_t v6 = uim::asString(*(_DWORD *)(a1 + 96));
        int v9 = 136315394;
        uint64_t v10 = v5;
        __int16 v11 = 2080;
        uint64_t v12 = v6;
        _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "SIM authenticate response for card %s uses unknown context %s; dropping",
          (uint8_t *)&v9,
          0x16u);
      }
      break;
  }
}

void *__copy_helper_block_e8_56c32_ZTSKN10subscriber11SimCardInfoE(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  uint64_t v3 = (void *)(a1 + 72);
  *((_OWORD *)v3 - 1) = v2;
  v3[1] = 0;
  v3[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v3, *(const void **)(a2 + 72), *(void *)(a2 + 80), *(void *)(a2 + 80) - *(void *)(a2 + 72));
}

void __destroy_helper_block_e8_56c32_ZTSKN10subscriber11SimCardInfoE(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

uint64_t __copy_helper_block_e8_48c32_ZTSKN10subscriber11SimCardInfoE88c129_ZTSNSt3__18functionIFvNS_3mapIN10subscriber8AuthInfoENS_6vectorIhNS_9allocatorIhEEEENS_4lessIS3_EENS5_INS_4pairIKS3_S7_EEEEEEEEE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = a1 + 64;
  *(_OWORD *)(a1 + 48) = v3;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), *(void *)(a2 + 72) - *(void *)(a2 + 64));
  return std::__function::__value_func<void ()(std::map<subscriber::AuthInfo,std::vector<unsigned char>>)>::__value_func[abi:ne180100](v4 + 24, a2 + 88);
}

void sub_222477C00(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c32_ZTSKN10subscriber11SimCardInfoE88c129_ZTSNSt3__18functionIFvNS_3mapIN10subscriber8AuthInfoENS_6vectorIhNS_9allocatorIhEEEENS_4lessIS3_EENS5_INS_4pairIKS3_S7_EEEEEEEEE(void *a1)
{
  std::__function::__value_func<void ()(std::map<subscriber::AuthInfo,std::vector<unsigned char>>)>::~__value_func[abi:ne180100](a1 + 11);
  long long v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
}

void subscriber::EURSimCommandDriver::sendSimApdu(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  *(void *)&v19[1] = *MEMORY[0x263EF8340];
  *(void *)unsigned int v18 = 0x10F15330000000A0;
  *(void *)&void v18[7] = 0x5652500101058310;
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v18, (uint64_t)v19, 0xFuLL);
  int v8 = *a2;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1174405120;
  _OWORD v15[2] = ___ZN10subscriber19EURSimCommandDriver11sendSimApduERKNS_11SimCardInfoENSt3__110shared_ptrINS4_6vectorIhNS4_9allocatorIhEEEEEENS4_8functionIFvbEEE_block_invoke;
  void v15[3] = &__block_descriptor_tmp_58_6;
  uint64_t v10 = *a3;
  int v9 = (std::__shared_weak_count *)a3[1];
  unsigned char v15[4] = a1;
  void v15[5] = v10;
  int v16 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v17, a4);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v14, a4);
  subscriber::EURSimCommandDriver::sendSimApdu_start(a1, v8, (uint64_t)&__p, (uint64_t)v15, (uint64_t)v14);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v17);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_222477DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](&a13);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v23);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void subscriber::EURSimCommandDriver::sendSimApdu_start(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = 0u;
  long long v20 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  _OWORD v17[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke;
  unsigned int v17[3] = &__block_descriptor_tmp_63_1;
  int v18 = a2;
  uint64_t v10 = qmi::MutableMessageBase::getTLV<uim::tlv::SlotId>((uint64_t)__p);
  ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke((uint64_t)v17, v10);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  _OWORD v16[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke_2;
  void v16[3] = &__block_descriptor_tmp_64_1;
  v16[4] = a3;
  __int16 v11 = (const void **)__p[1];
  if (__p[1] != (void *)v20)
  {
    while (*((unsigned char *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v20) {
        goto LABEL_8;
      }
    }
  }
  if (v11 == (const void **)v20) {
LABEL_8:
  }
    operator new();
  if (!v12) {
    __cxa_bad_cast();
  }
  ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke_2((uint64_t)v16, v12 + 2);
  uint64_t v14 = QMIServiceMsg::create();
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 1174405120;
  v22[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke_3;
  v22[3] = &unk_26D4CB1B0;
  void v22[5] = a1;
  int v24 = a2;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v23, a5);
  uint8_t v22[4] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim14LogicalChannel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EBD8;
  aBlock[4] = v22;
  uint64_t v13 = _Block_copy(aBlock);
  unsigned int v15 = v13;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v13 = v15;
  }
  if (v13) {
    _Block_release(v13);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_222478204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver11sendSimApduERKNS_11SimCardInfoENSt3__110shared_ptrINS4_6vectorIhNS4_9allocatorIhEEEEEENS4_8functionIFvbEEE_block_invoke(void *a1, int a2, char a3)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[4];
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  v7[0] = a1[5];
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 7));
  subscriber::EURSimCommandDriver::sendSimApdu_block(v5, a2, a3, v7, 0, (uint64_t)v8);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_22247830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void subscriber::EURSimCommandDriver::sendSimApdu_block(uint64_t a1, int a2, char a3, void *a4, int a5, uint64_t a6)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v12 = 248;
  unint64_t v13 = 248 * a5;
  unint64_t v14 = *(void *)(*a4 + 8) - *(void *)*a4;
  if (v14 - v13 < 0xF8) {
    uint64_t v12 = v14 - v13;
  }
  if (v14 <= v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v12;
  }
  memset(v39, 0, sizeof(v39));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v39);
  v37[0] = MEMORY[0x263EF8330];
  v37[1] = 0x40000000;
  v37[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke;
  v37[3] = &__block_descriptor_tmp_77_2;
  int v38 = a2;
  uint64_t v16 = qmi::MutableMessageBase::getTLV<uim::tlv::SlotId>((uint64_t)v39);
  ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke((uint64_t)v37, v16);
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 1174405120;
  unsigned int v28 = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_2;
  int v29 = &__block_descriptor_tmp_79_3;
  char v36 = a3;
  int v35 = a5;
  uint64_t v30 = a1;
  uint64_t v31 = v15;
  uint64_t v17 = (std::__shared_weak_count *)a4[1];
  uint64_t v32 = *a4;
  int v33 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v34 = v13;
  uint64_t v18 = qmi::MutableMessageBase::getTLV<uim::tlv::APDU>((uint64_t)v39);
  v28((uint64_t)v27, (unint64_t *)v18);
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 0x40000000;
  v25[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_80;
  v25[3] = &__block_descriptor_tmp_81_2;
  char v26 = a3;
  uint64_t v19 = qmi::MutableMessageBase::getTLV<uim::tlv::LChannelId>((uint64_t)v39);
  ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_80((uint64_t)v25, v19);
  uint64_t v23 = QMIServiceMsg::create();
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = 1174405120;
  void v41[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_2_82;
  void v41[3] = &__block_descriptor_tmp_85_5;
  void v41[4] = a1;
  int v44 = a2;
  char v46 = a3;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v42, a6);
  int v45 = a5;
  uint64_t v21 = *a4;
  long long v20 = (std::__shared_weak_count *)a4[1];
  void v42[4] = v15;
  v42[5] = v21;
  int64_t v43 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim8SendAPDU8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EC00;
  aBlock[4] = v41;
  BOOL v22 = _Block_copy(aBlock);
  int v24 = v22;
  if (v23)
  {
    qmi::Client::send();
    BOOL v22 = v24;
  }
  if (v22) {
    _Block_release(v22);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v42);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v39);
}

void sub_222478674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  int v38 = *(std::__shared_weak_count **)(v36 - 128);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v35);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a35);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE56c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_22247872C(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE56c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void subscriber::EURSimCommandDriver::sendSimSingleApduCommand(uint64_t a1, int *a2, uint64_t *a3, char a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v8 = *a2;
  uint64_t v9 = *a3;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN10subscriber19EURSimCommandDriver24sendSimSingleApduCommandERKNS_11SimCardInfoENSt3__110shared_ptrINS4_6vectorIhNS4_9allocatorIhEEEEEEhSA_NS4_8functionIFvbEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_61_11;
  char v16 = a4;
  uint64_t v11 = *a5;
  uint64_t v10 = (std::__shared_weak_count *)a5[1];
  v13[4] = a1;
  void v13[5] = v11;
  unint64_t v14 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v15, a6);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v12, a6);
  subscriber::EURSimCommandDriver::sendSimApdu_start(a1, v8, v9, (uint64_t)v13, (uint64_t)v12);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_2224788B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](&a10);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v20);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(a1);
}

void *___ZN10subscriber19EURSimCommandDriver24sendSimSingleApduCommandERKNS_11SimCardInfoENSt3__110shared_ptrINS4_6vectorIhNS4_9allocatorIhEEEEEEhSA_NS4_8functionIFvbEEE_block_invoke(uint64_t a1, int a2, char a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(a1 + 88);
  long long v11 = *(_OWORD *)(a1 + 32);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 56);
  memset(v22, 0, sizeof(v22));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  _OWORD v20[2] = ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke;
  v20[3] = &__block_descriptor_tmp_69_2;
  int v21 = a2;
  uint64_t v6 = qmi::MutableMessageBase::getTLV<uim::tlv::SlotId>((uint64_t)v22);
  ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke((uint64_t)v20, v6);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  _OWORD v16[2] = ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_2;
  void v16[3] = &__block_descriptor_tmp_71_0;
  char v18 = a3;
  char v19 = v5;
  long long v17 = v11;
  uint64_t v7 = (unint64_t *)qmi::MutableMessageBase::getTLV<uim::tlv::APDU>((uint64_t)v22);
  ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_2((uint64_t)v16, v7);
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 0x40000000;
  void v14[2] = ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_3;
  v14[3] = &__block_descriptor_tmp_73_1;
  char v15 = a3;
  int v8 = qmi::MutableMessageBase::getTLV<uim::tlv::LChannelId>((uint64_t)v22);
  ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_3((uint64_t)v14, v8);
  uint64_t v12 = QMIServiceMsg::create();
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 1174405120;
  v25[2] = ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_4;
  v25[3] = &__block_descriptor_tmp_76_8;
  void v25[4] = v11;
  int v27 = a2;
  char v28 = a3;
  char v29 = v5;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v24);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim8SendAPDU8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EC00;
  aBlock[4] = v25;
  uint64_t v9 = _Block_copy(aBlock);
  unint64_t v13 = v9;
  if (v12)
  {
    qmi::Client::send();
    uint64_t v9 = v13;
  }
  if (v9) {
    _Block_release(v9);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v26);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v24);
}

void sub_222478BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v33);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(v34 - 184));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 32);
  if (v2 >= 4) {
    LOBYTE(v2) = 0;
  }
  *a2 = v2;
  return result;
}

void *___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke_2(uint64_t a1, void *a2)
{
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(a2, **(char ***)(a1 + 32), *(char **)(*(void *)(a1 + 32) + 8), *(void *)(*(void *)(a1 + 32) + 8) - **(void **)(a1 + 32));
}

void ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke_3(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  if (*((_DWORD *)this + 1))
  {
    char v5 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      int v7 = *((_DWORD *)this + 1);
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I uim::LogicalChannel, slot:%s open() get QMI error 0x%04x (%s)", buf, 0x1Cu);
    }
    std::function<void ()(BOOL)>::operator()(a1 + 48, 0);
  }
  else
  {
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2000000000;
    uint8_t buf[24] = 0;
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    char v16 = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke_65;
    long long v17 = &unk_26460E6F8;
    char v18 = buf;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
    uint64_t v10 = TlvValue;
    if (TlvValue)
    {
      int v11 = v9;
      *(void *)long long v20 = TlvValue;
      char v19 = tlv::parseV<uim::tlv::LChannelId>((unint64_t *)v20, v9);
      if (*(void *)v20) {
        v16((uint64_t)v15, &v19);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v10, v11);
      }
    }
    uint64_t v12 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = subscriber::asString();
      int v14 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
      *(_DWORD *)long long v20 = 136315394;
      *(void *)&void v20[4] = v13;
      __int16 v21 = 1024;
      int v22 = v14;
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I uim::LogicalChannel, slot:%s channel %d opened", v20, 0x12u);
    }
    (*(void (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 80));
    _Block_object_dispose(buf, 8);
  }
}

void sub_222478E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_startENS_15HardwareSimSlotERKNSt3__16vectorIhNS2_9allocatorIhEEEEU13block_pointerFvS1_hENS2_8functionIFvbEEE_block_invoke_65(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t __copy_helper_block_e8_48c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void *__destroy_helper_block_e8_48c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

uint64_t ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 32);
  if (v2 >= 4) {
    LOBYTE(v2) = 0;
  }
  *a2 = v2;
  return result;
}

void ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_2(uint64_t a1, unint64_t *a2)
{
  std::vector<unsigned char>::reserve(a2);
  char v5 = (unsigned char *)a2[1];
  unint64_t v4 = a2[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a2;
    int v8 = &v5[-*a2];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      goto LABEL_134;
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v12 + v11);
    v8[v12] = *(unsigned char *)(a1 + 48);
    uint64_t v6 = &v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      int v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      char v5 = (unsigned char *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v6;
    a2[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *char v5 = *(unsigned char *)(a1 + 48);
    uint64_t v6 = v5 + 1;
  }
  a2[1] = (unint64_t)v6;
  unint64_t v16 = a2[2];
  if ((unint64_t)v6 < v16)
  {
    *uint64_t v6 = *(unsigned char *)(a1 + 49);
    long long v17 = v6 + 1;
    goto LABEL_37;
  }
  unint64_t v18 = *a2;
  char v19 = &v6[-*a2];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
    goto LABEL_134;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = (char *)(v23 + v22);
  v19[v23] = *(unsigned char *)(a1 + 49);
  long long v17 = &v19[v23 + 1];
  if (v6 == (unsigned char *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = (unint64_t)v17;
    a2[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  uint64_t v25 = &v6[~v18];
  do
  {
    char v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (unsigned char *)v18);
  uint64_t v6 = (unsigned char *)*a2;
  *a2 = v23;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  a2[1] = (unint64_t)v17;
  unint64_t v27 = a2[2];
  if ((unint64_t)v17 < v27)
  {
    *long long v17 = 0;
    char v28 = v17 + 1;
    goto LABEL_55;
  }
  unint64_t v29 = *a2;
  uint64_t v30 = &v17[-*a2];
  unint64_t v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0) {
    goto LABEL_134;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    unint64_t v34 = (unint64_t)operator new(v33);
  }
  else {
    unint64_t v34 = 0;
  }
  int v35 = (char *)(v34 + v33);
  v30[v34] = 0;
  char v28 = &v30[v34 + 1];
  if (v17 == (unsigned char *)v29)
  {
    *a2 = (unint64_t)&v30[v34];
    a2[1] = (unint64_t)v28;
    a2[2] = (unint64_t)v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  uint64_t v36 = &v17[~v29];
  do
  {
    char v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (unsigned char *)v29);
  long long v17 = (unsigned char *)*a2;
  *a2 = v34;
  a2[1] = (unint64_t)v28;
  a2[2] = (unint64_t)v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  a2[1] = (unint64_t)v28;
  unint64_t v38 = a2[2];
  if ((unint64_t)v28 < v38)
  {
    *char v28 = 0;
    unint64_t v39 = v28 + 1;
    goto LABEL_73;
  }
  unint64_t v40 = *a2;
  uint64_t v41 = &v28[-*a2];
  unint64_t v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0) {
    goto LABEL_134;
  }
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    unint64_t v45 = (unint64_t)operator new(v44);
  }
  else {
    unint64_t v45 = 0;
  }
  char v46 = (char *)(v45 + v44);
  v41[v45] = 0;
  unint64_t v39 = &v41[v45 + 1];
  if (v28 == (unsigned char *)v40)
  {
    *a2 = (unint64_t)&v41[v45];
    a2[1] = (unint64_t)v39;
    a2[2] = (unint64_t)v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  uint64_t v47 = &v28[~v40];
  do
  {
    char v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (unsigned char *)v40);
  char v28 = (unsigned char *)*a2;
  *a2 = v45;
  a2[1] = (unint64_t)v39;
  a2[2] = (unint64_t)v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  a2[1] = (unint64_t)v39;
  uint64_t v49 = **(void **)(a1 + 40);
  uint64_t v50 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v51 = v50 - v49;
  if (v50 == v49 || v51 > 0xF7)
  {
    unint64_t v54 = a2[2];
    if ((unint64_t)v39 >= v54)
    {
      unint64_t v62 = *a2;
      uint64_t v63 = &v39[-*a2];
      unint64_t v64 = (unint64_t)(v63 + 1);
      if ((uint64_t)(v63 + 1) < 0) {
        goto LABEL_134;
      }
      unint64_t v65 = v54 - v62;
      if (2 * v65 > v64) {
        unint64_t v64 = 2 * v65;
      }
      if (v65 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v66 = v64;
      }
      if (v66) {
        unint64_t v67 = (unint64_t)operator new(v66);
      }
      else {
        unint64_t v67 = 0;
      }
      int64_t v71 = (char *)(v67 + v66);
      v63[v67] = 0;
      uint64_t v55 = (uint64_t)&v63[v67 + 1];
      if (v39 == (unsigned char *)v62)
      {
        *a2 = (unint64_t)&v63[v67];
        a2[1] = v55;
        a2[2] = (unint64_t)v71;
      }
      else
      {
        unint64_t v72 = &v39[~v62];
        do
        {
          char v73 = *--v39;
          (v72--)[v67] = v73;
        }
        while (v39 != (unsigned char *)v62);
        unint64_t v39 = (unsigned char *)*a2;
        *a2 = v67;
        a2[1] = v55;
        a2[2] = (unint64_t)v71;
        if (!v39) {
          goto LABEL_132;
        }
      }
      operator delete(v39);
    }
    else
    {
      unsigned char *v39 = 0;
      uint64_t v55 = (uint64_t)(v39 + 1);
    }
LABEL_132:
    a2[1] = v55;
    return;
  }
  unint64_t v52 = a2[2];
  if ((unint64_t)v39 < v52)
  {
    unsigned char *v39 = v51;
    int64_t v53 = v39 + 1;
    goto LABEL_109;
  }
  unint64_t v56 = *a2;
  uint64_t v57 = &v39[-*a2];
  unint64_t v58 = (unint64_t)(v57 + 1);
  if ((uint64_t)(v57 + 1) < 0) {
LABEL_134:
  }
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  unint64_t v59 = v52 - v56;
  if (2 * v59 > v58) {
    unint64_t v58 = 2 * v59;
  }
  if (v59 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v60 = v58;
  }
  if (v60) {
    unint64_t v61 = (unint64_t)operator new(v60);
  }
  else {
    unint64_t v61 = 0;
  }
  __int16 v68 = (char *)(v61 + v60);
  v57[v61] = v51;
  int64_t v53 = &v57[v61 + 1];
  if (v39 == (unsigned char *)v56)
  {
    *a2 = (unint64_t)&v57[v61];
    a2[1] = (unint64_t)v53;
    a2[2] = (unint64_t)v68;
LABEL_108:
    operator delete(v39);
    goto LABEL_109;
  }
  uint64_t v69 = &v39[~v56];
  do
  {
    char v70 = *--v39;
    (v69--)[v61] = v70;
  }
  while (v39 != (unsigned char *)v56);
  unint64_t v39 = (unsigned char *)*a2;
  *a2 = v61;
  a2[1] = (unint64_t)v53;
  a2[2] = (unint64_t)v68;
  if (v39) {
    goto LABEL_108;
  }
LABEL_109:
  a2[1] = (unint64_t)v53;
  uint64_t v74 = *(void *)(a1 + 40);
  unsigned int v75 = *(unsigned char **)v74;
  char v76 = *(unsigned char **)(v74 + 8);
  if (*(unsigned char **)v74 != v76)
  {
    do
    {
      unint64_t v77 = a2[2];
      if ((unint64_t)v53 >= v77)
      {
        unint64_t v79 = *a2;
        uint64_t v80 = &v53[-*a2];
        unint64_t v81 = (unint64_t)(v80 + 1);
        if ((uint64_t)(v80 + 1) < 0) {
          goto LABEL_134;
        }
        unint64_t v82 = v77 - v79;
        if (2 * v82 > v81) {
          unint64_t v81 = 2 * v82;
        }
        if (v82 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v83 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v83 = v81;
        }
        if (v83) {
          unint64_t v84 = (unint64_t)operator new(v83);
        }
        else {
          unint64_t v84 = 0;
        }
        int v85 = (char *)(v84 + v83);
        v80[v84] = *v75;
        uint64_t v78 = (uint64_t)&v80[v84 + 1];
        if (v53 == (unsigned char *)v79)
        {
          *a2 = (unint64_t)&v80[v84];
          a2[1] = v78;
          a2[2] = (unint64_t)v85;
        }
        else
        {
          long long v86 = &v53[~v79];
          do
          {
            char v87 = *--v53;
            (v86--)[v84] = v87;
          }
          while (v53 != (unsigned char *)v79);
          int64_t v53 = (unsigned char *)*a2;
          *a2 = v84;
          a2[1] = v78;
          a2[2] = (unint64_t)v85;
          if (!v53) {
            goto LABEL_128;
          }
        }
        operator delete(v53);
      }
      else
      {
        unsigned char *v53 = *v75;
        uint64_t v78 = (uint64_t)(v53 + 1);
      }
LABEL_128:
      a2[1] = v78;
      ++v75;
      int64_t v53 = (unsigned char *)v78;
    }
    while (v75 != v76);
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (a1[2] - *a1 <= 0xFC)
  {
    long long v3 = (char *)a1[1];
    unint64_t v4 = operator new(0xFDuLL);
    char v5 = &v3[(void)v4 - v1];
    uint64_t v6 = v5;
    if (v3 != (char *)v1)
    {
      unint64_t v7 = &v3[~v1];
      do
      {
        char v8 = *--v3;
        (v7--)[(void)v4] = v8;
      }
      while (v3 != (char *)v1);
      uint64_t v6 = v4;
    }
    *a1 = (unint64_t)v6;
    a1[1] = (unint64_t)v5;
    a1[2] = (unint64_t)(v4 + 253);
    if (v1)
    {
      operator delete((void *)v1);
    }
  }
}

uint64_t ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v18 = 0;
  char v19 = &v18;
  uint64_t v20 = 0x2000000000;
  char v21 = 1;
  if (*((_DWORD *)a2 + 1))
  {
    char v5 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      int v7 = *(unsigned __int8 *)(a1 + 76);
      int v8 = *(unsigned __int8 *)(a1 + 77);
      int v9 = *((_DWORD *)a2 + 1);
      uint64_t v10 = qmi::asString();
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v24 = 1024;
      int v25 = v7;
      __int16 v26 = 1024;
      int v27 = v8;
      __int16 v28 = 1024;
      int v29 = v9;
      __int16 v30 = 2080;
      uint64_t v31 = v10;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I uim::SendAPDU, slot:%s chan:%d sending cmnd %d, get QMI error 0x%04x (%s)", buf, 0x28u);
      size_t v11 = (char *)(v19 + 3);
    }
    else
    {
      size_t v11 = &v21;
    }
    int v12 = 0;
    *size_t v11 = 0;
  }
  else
  {
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    void v15[2] = ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_74;
    void v15[3] = &unk_26460E780;
    void v15[4] = &v18;
    void v15[5] = v4;
    int v16 = *(_DWORD *)(a1 + 72);
    __int16 v17 = *(_WORD *)(a1 + 76);
    *(void *)std::string buf = v15;
    qmi::MessageBase::applyTlv<uim::tlv::APDU,void({block_pointer}&)(uim::tlv::APDU const&)>(a2, (uint64_t)buf);
    int v12 = *((unsigned __int8 *)v19 + 24);
  }
  int v13 = *(_DWORD *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 76);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v22, a1 + 40);
  subscriber::EURSimCommandDriver::sendSimApdu_close(v4, v13, v14, v12 != 0, (uint64_t)v22);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v22);
  _Block_object_dispose(&v18, 8);
}

void sub_222479750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver19sendSimApdu_commandENS_15HardwareSimSlotEhhRNSt3__16vectorIhNS2_9allocatorIhEEEENS2_8functionIFvbEEE_block_invoke_74(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *a2;
  if ((unint64_t)(a2[1] - *a2) < 2)
  {
    char v14 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v15 = subscriber::asString();
    int v16 = *(unsigned __int8 *)(a1 + 52);
    int v17 = *(unsigned __int8 *)(a1 + 53);
    int v18 = 136315650;
    uint64_t v19 = v15;
    __int16 v20 = 1024;
    int v21 = v16;
    __int16 v22 = 1024;
    int v23 = v17;
    size_t v11 = "#I uim::SendAPDU, slot:%s, chan:%d, cmnd:%d get empty CSIM response, treat as OK";
    int v12 = v14;
    uint32_t v13 = 24;
    goto LABEL_8;
  }
  int v5 = *v4;
  if (v5 != 145)
  {
    uint64_t v6 = (subscriber *)(v4[1] | (v5 << 8));
    if ((v4[1] & 0xFE | (unsigned __int16)((_WORD)v5 << 8)) != 0x9000)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      int v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = subscriber::asString();
        int v9 = *(unsigned __int8 *)(a1 + 52);
        int v10 = *(unsigned __int8 *)(a1 + 53);
        int v18 = 136316162;
        uint64_t v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        __int16 v22 = 1024;
        int v23 = v10;
        __int16 v24 = 1024;
        int v25 = (int)v6;
        __int16 v26 = 2080;
        int v27 = subscriber::sendAdpuResponseString(v6);
        size_t v11 = "#I uim::SendAPDU, slot:%s, chan:%d, cmnd:%d, CSIM return code is 0x%X '%s'";
        int v12 = v7;
        uint32_t v13 = 40;
LABEL_8:
        _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v18, v13);
      }
    }
  }
}

const char *subscriber::sendAdpuResponseString(subscriber *this)
{
  if ((int)this > 28576)
  {
    if ((int)this < 36864)
    {
      if (this == 28577) {
        return "Critical Error. Internal buffer overflow";
      }
      if (this == 28593) {
        return "Critical error. Data formatting error";
      }
    }
    else
    {
      switch(this)
      {
        case 0x9000:
          return "Success";
        case 0x9862:
          return "Security error: MAC not verified";
        case 0x9001:
          return "Success, unsupported field ignored";
      }
    }
  }
  else
  {
    if ((int)this > 27903)
    {
      switch((int)this)
      {
        case 28416:
          return "Critical error. No precise diagnosis";
        case 28417:
          uint64_t result = "Mobile IP Shared Secret file update error";
          break;
        case 28418:
          uint64_t result = "Mobile IP UPP file update error";
          break;
        case 28419:
          uint64_t result = "IMSI_M file update error";
          break;
        case 28420:
          uint64_t result = "MDN file update error";
          break;
        case 28421:
          uint64_t result = "ACCOLC file update error";
          break;
        case 28422:
          uint64_t result = "IMEI file update error";
          break;
        default:
          if (this != 27904) {
            goto LABEL_21;
          }
          uint64_t result = "APDU is incorrect or has invalid instruction";
          break;
      }
      return result;
    }
    switch(this)
    {
      case 0x6982:
        return "Security error: synchronization failure";
      case 0x6985:
        return "APDU is not in right sequence";
      case 0x6A80:
        return "Last group failed to be updated";
    }
  }
LABEL_21:
  unsigned int v2 = this >> 8;
  if (this >> 8 == 145) {
    return "Success";
  }
  if (v2 == 111)
  {
    if ((this & 0xF0) == 0) {
      return "Critical error. No precise diagnosis";
    }
  }
  else if (v2 == 103)
  {
    return "Incorrect data length field (‘LL’) in APDU";
  }
  return "Unknown unspecified error";
}

void subscriber::EURSimCommandDriver::sendSimApdu_close(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = 0u;
  long long v21 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 0x40000000;
  _OWORD v18[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke;
  v18[3] = &__block_descriptor_tmp_86_2;
  int v19 = a2;
  int v10 = qmi::MutableMessageBase::getTLV<uim::tlv::SlotId>((uint64_t)__p);
  ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke((uint64_t)v18, v10);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  _OWORD v16[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke_2;
  void v16[3] = &__block_descriptor_tmp_88_3;
  char v17 = a3;
  size_t v11 = (const void **)__p[1];
  if (__p[1] != (void *)v21)
  {
    while (*((unsigned char *)*v11 + 8) != 17)
    {
      if (++v11 == (const void **)v21) {
        goto LABEL_8;
      }
    }
  }
  if (v11 == (const void **)v21) {
LABEL_8:
  }
    operator new();
  if (!v12) {
    __cxa_bad_cast();
  }
  ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke_2((uint64_t)v16, v12 + 9);
  uint64_t v14 = QMIServiceMsg::create();
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 1174405120;
  _OWORD v23[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke_3;
  v23[3] = &__block_descriptor_tmp_91_3;
  void v23[4] = a1;
  int v25 = a2;
  char v26 = a3;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v24, a5);
  char v27 = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim14LogicalChannel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EBD8;
  aBlock[4] = v23;
  uint32_t v13 = _Block_copy(aBlock);
  uint64_t v15 = v13;
  if (v14)
  {
    qmi::Client::send();
    uint32_t v13 = v15;
  }
  if (v13) {
    _Block_release(v13);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v24);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_222479EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 32);
  if (v2 >= 4) {
    LOBYTE(v2) = 0;
  }
  *a2 = v2;
  return result;
}

void ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_2(uint64_t a1, unint64_t *a2)
{
  std::vector<unsigned char>::reserve(a2);
  int v5 = (unsigned char *)a2[1];
  unint64_t v4 = a2[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a2;
    uint64_t v8 = &v5[-*a2];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      goto LABEL_118;
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v12 + v11);
    v8[v12] = *(unsigned char *)(a1 + 76);
    uint64_t v6 = &v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      uint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      int v5 = (unsigned char *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v6;
    a2[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int v5 = *(unsigned char *)(a1 + 76);
    uint64_t v6 = v5 + 1;
  }
  a2[1] = (unint64_t)v6;
  if (*(_DWORD *)(a1 + 72))
  {
    if (*(void *)(a1 + 40) == 248) {
      char v16 = -94;
    }
    else {
      char v16 = -93;
    }
  }
  else
  {
    char v16 = -95;
  }
  unint64_t v17 = a2[2];
  if ((unint64_t)v6 < v17)
  {
    *uint64_t v6 = v16;
    uint64_t v18 = v6 + 1;
    goto LABEL_42;
  }
  unint64_t v19 = *a2;
  __int16 v20 = &v6[-*a2];
  unint64_t v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0) {
    goto LABEL_118;
  }
  unint64_t v22 = v17 - v19;
  if (2 * v22 > v21) {
    unint64_t v21 = 2 * v22;
  }
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v23 = v21;
  }
  if (v23) {
    unint64_t v24 = (unint64_t)operator new(v23);
  }
  else {
    unint64_t v24 = 0;
  }
  int v25 = (char *)(v24 + v23);
  v20[v24] = v16;
  uint64_t v18 = &v20[v24 + 1];
  if (v6 == (unsigned char *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_41:
    operator delete(v6);
    goto LABEL_42;
  }
  char v26 = &v6[~v19];
  do
  {
    char v27 = *--v6;
    (v26--)[v24] = v27;
  }
  while (v6 != (unsigned char *)v19);
  uint64_t v6 = (unsigned char *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v6) {
    goto LABEL_41;
  }
LABEL_42:
  a2[1] = (unint64_t)v18;
  int v28 = *(_DWORD *)(a1 + 72);
  unint64_t v29 = a2[2];
  if ((unint64_t)v18 < v29)
  {
    *uint64_t v18 = BYTE1(v28);
    __int16 v30 = v18 + 1;
    goto LABEL_60;
  }
  unint64_t v31 = *a2;
  uint64_t v32 = &v18[-*a2];
  unint64_t v33 = (unint64_t)(v32 + 1);
  if ((uint64_t)(v32 + 1) < 0) {
    goto LABEL_118;
  }
  unint64_t v34 = v29 - v31;
  if (2 * v34 > v33) {
    unint64_t v33 = 2 * v34;
  }
  if (v34 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v35 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v35 = v33;
  }
  if (v35) {
    unint64_t v36 = (unint64_t)operator new(v35);
  }
  else {
    unint64_t v36 = 0;
  }
  char v37 = (char *)(v36 + v35);
  v32[v36] = BYTE1(v28);
  __int16 v30 = &v32[v36 + 1];
  if (v18 == (unsigned char *)v31)
  {
    *a2 = (unint64_t)&v32[v36];
    a2[1] = (unint64_t)v30;
    a2[2] = (unint64_t)v37;
LABEL_59:
    operator delete(v18);
    goto LABEL_60;
  }
  unint64_t v38 = &v18[~v31];
  do
  {
    char v39 = *--v18;
    (v38--)[v36] = v39;
  }
  while (v18 != (unsigned char *)v31);
  uint64_t v18 = (unsigned char *)*a2;
  *a2 = v36;
  a2[1] = (unint64_t)v30;
  a2[2] = (unint64_t)v37;
  if (v18) {
    goto LABEL_59;
  }
LABEL_60:
  a2[1] = (unint64_t)v30;
  int v40 = *(_DWORD *)(a1 + 72);
  unint64_t v41 = a2[2];
  if ((unint64_t)v30 < v41)
  {
    *__int16 v30 = v40;
    unint64_t v42 = v30 + 1;
    goto LABEL_78;
  }
  unint64_t v43 = *a2;
  size_t v44 = &v30[-*a2];
  unint64_t v45 = (unint64_t)(v44 + 1);
  if ((uint64_t)(v44 + 1) < 0) {
    goto LABEL_118;
  }
  unint64_t v46 = v41 - v43;
  if (2 * v46 > v45) {
    unint64_t v45 = 2 * v46;
  }
  if (v46 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v47 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v47 = v45;
  }
  if (v47) {
    unint64_t v48 = (unint64_t)operator new(v47);
  }
  else {
    unint64_t v48 = 0;
  }
  uint64_t v49 = (char *)(v48 + v47);
  v44[v48] = v40;
  unint64_t v42 = &v44[v48 + 1];
  if (v30 == (unsigned char *)v43)
  {
    *a2 = (unint64_t)&v44[v48];
    a2[1] = (unint64_t)v42;
    a2[2] = (unint64_t)v49;
LABEL_77:
    operator delete(v30);
    goto LABEL_78;
  }
  uint64_t v50 = &v30[~v43];
  do
  {
    char v51 = *--v30;
    (v50--)[v48] = v51;
  }
  while (v30 != (unsigned char *)v43);
  __int16 v30 = (unsigned char *)*a2;
  *a2 = v48;
  a2[1] = (unint64_t)v42;
  a2[2] = (unint64_t)v49;
  if (v30) {
    goto LABEL_77;
  }
LABEL_78:
  a2[1] = (unint64_t)v42;
  char v52 = *(unsigned char *)(a1 + 40);
  unint64_t v53 = a2[2];
  if ((unint64_t)v42 < v53)
  {
    *unint64_t v42 = v52;
    unint64_t v54 = v42 + 1;
    goto LABEL_96;
  }
  unint64_t v55 = *a2;
  unint64_t v56 = &v42[-*a2];
  unint64_t v57 = (unint64_t)(v56 + 1);
  if ((uint64_t)(v56 + 1) < 0) {
LABEL_118:
  }
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  unint64_t v58 = v53 - v55;
  if (2 * v58 > v57) {
    unint64_t v57 = 2 * v58;
  }
  if (v58 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v59 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v59 = v57;
  }
  if (v59) {
    unint64_t v60 = (unint64_t)operator new(v59);
  }
  else {
    unint64_t v60 = 0;
  }
  unint64_t v61 = (char *)(v60 + v59);
  v56[v60] = v52;
  unint64_t v54 = &v56[v60 + 1];
  if (v42 == (unsigned char *)v55)
  {
    *a2 = (unint64_t)&v56[v60];
    a2[1] = (unint64_t)v54;
    a2[2] = (unint64_t)v61;
LABEL_95:
    operator delete(v42);
    goto LABEL_96;
  }
  unint64_t v62 = &v42[~v55];
  do
  {
    char v63 = *--v42;
    (v62--)[v60] = v63;
  }
  while (v42 != (unsigned char *)v55);
  unint64_t v42 = (unsigned char *)*a2;
  *a2 = v60;
  a2[1] = (unint64_t)v54;
  a2[2] = (unint64_t)v61;
  if (v42) {
    goto LABEL_95;
  }
LABEL_96:
  a2[1] = (unint64_t)v54;
  uint64_t v64 = *(void *)(a1 + 40);
  if (v64 >= 1)
  {
    unint64_t v65 = (unsigned char *)(**(void **)(a1 + 48) + *(void *)(a1 + 64));
    size_t v66 = &v65[v64];
    do
    {
      unint64_t v67 = a2[2];
      if ((unint64_t)v54 >= v67)
      {
        unint64_t v69 = *a2;
        char v70 = &v54[-*a2];
        unint64_t v71 = (unint64_t)(v70 + 1);
        if ((uint64_t)(v70 + 1) < 0) {
          goto LABEL_118;
        }
        unint64_t v72 = v67 - v69;
        if (2 * v72 > v71) {
          unint64_t v71 = 2 * v72;
        }
        if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v73 = v71;
        }
        if (v73) {
          unint64_t v74 = (unint64_t)operator new(v73);
        }
        else {
          unint64_t v74 = 0;
        }
        unsigned int v75 = (char *)(v74 + v73);
        v70[v74] = *v65;
        uint64_t v68 = (uint64_t)&v70[v74 + 1];
        if (v54 == (unsigned char *)v69)
        {
          *a2 = (unint64_t)&v70[v74];
          a2[1] = v68;
          a2[2] = (unint64_t)v75;
        }
        else
        {
          char v76 = &v54[~v69];
          do
          {
            char v77 = *--v54;
            (v76--)[v74] = v77;
          }
          while (v54 != (unsigned char *)v69);
          unint64_t v54 = (unsigned char *)*a2;
          *a2 = v74;
          a2[1] = v68;
          a2[2] = (unint64_t)v75;
          if (!v54) {
            goto LABEL_116;
          }
        }
        operator delete(v54);
      }
      else
      {
        unsigned char *v54 = *v65;
        uint64_t v68 = (uint64_t)(v54 + 1);
      }
LABEL_116:
      a2[1] = v68;
      ++v65;
      unint64_t v54 = (unsigned char *)v68;
    }
    while (v65 < v66);
  }
}

uint64_t __copy_helper_block_e8_48c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_80(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_2_82(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  if (*((_DWORD *)a2 + 1))
  {
    int v5 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      int v7 = *(unsigned __int8 *)(a1 + 104);
      int v8 = *((_DWORD *)a2 + 1);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v8;
      __int16 v27 = 2080;
      uint64_t v28 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I uim::SendAPDU, slot:%s, chan:%d, sending block, get QMI error 0x%04x (%s)", buf, 0x22u);
    }
    int v9 = *(_DWORD *)(a1 + 96);
    char v10 = *(unsigned char *)(a1 + 104);
    std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 40);
    subscriber::EURSimCommandDriver::sendSimApdu_close(v4, v9, v10, 0, (uint64_t)v25);
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v25);
  }
  else
  {
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2000000000;
    LOBYTE(v27) = 1;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 0x40000000;
    void v19[2] = ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_83;
    v19[3] = &unk_26460E7E8;
    _OWORD v19[4] = buf;
    v19[5] = v4;
    int v20 = *(_DWORD *)(a1 + 96);
    char v21 = *(unsigned char *)(a1 + 104);
    unint64_t v22 = v19;
    qmi::MessageBase::applyTlv<uim::tlv::APDU,void({block_pointer}&)(uim::tlv::APDU const&)>(a2, (uint64_t)&v22);
    int v11 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    if (*(unsigned char *)(*(void *)&buf[8] + 24) && (*(void *)(a1 + 72) == 248 || !*(_DWORD *)(a1 + 100)))
    {
      uint64_t v14 = *(unsigned int *)(a1 + 96);
      uint64_t v15 = *(unsigned __int8 *)(a1 + 104);
      char v16 = *(std::__shared_weak_count **)(a1 + 88);
      v18[0] = *(void *)(a1 + 80);
      v18[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v17 = *(_DWORD *)(a1 + 100);
      std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
      subscriber::EURSimCommandDriver::sendSimApdu_block(v4, v14, v15, v18, (v17 + 1), v24);
      std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v24);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 96);
      char v13 = *(unsigned char *)(a1 + 104);
      std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v23, a1 + 40);
      subscriber::EURSimCommandDriver::sendSimApdu_close(v4, v12, v13, v11 != 0, (uint64_t)v23);
      std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v23);
    }
    _Block_object_dispose(buf, 8);
  }
}

void sub_22247A6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](va);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Block_object_dispose((const void *)(v16 - 112), 8);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_blockENS_15HardwareSimSlotEhNSt3__110shared_ptrINS2_6vectorIhNS2_9allocatorIhEEEEEEiNS2_8functionIFvbEEE_block_invoke_83(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *a2;
  if ((unint64_t)(a2[1] - *a2) < 2)
  {
    char v13 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v14 = subscriber::asString();
    int v15 = *(unsigned __int8 *)(a1 + 52);
    int v16 = 136315394;
    uint64_t v17 = v14;
    __int16 v18 = 1024;
    int v19 = v15;
    char v10 = "#I uim::SendAPDU, slot:%s, chan:%d, sending block, get empty CSIM response, treat as OK";
    int v11 = v13;
    uint32_t v12 = 18;
    goto LABEL_8;
  }
  int v5 = *v4;
  if (v5 != 145)
  {
    uint64_t v6 = (subscriber *)(v4[1] | (v5 << 8));
    if ((v4[1] & 0xFE | (unsigned __int16)((_WORD)v5 << 8)) != 0x9000)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      int v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = subscriber::asString();
        int v9 = *(unsigned __int8 *)(a1 + 52);
        int v16 = 136315906;
        uint64_t v17 = v8;
        __int16 v18 = 1024;
        int v19 = v9;
        __int16 v20 = 1024;
        int v21 = (int)v6;
        __int16 v22 = 2080;
        size_t v23 = subscriber::sendAdpuResponseString(v6);
        char v10 = "#I uim::SendAPDU, slot:%s, chan:%d, sending block, CSIM return code is 0x%X '%s'";
        int v11 = v7;
        uint32_t v12 = 34;
LABEL_8:
        _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v16, v12);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE80c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *__destroy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE80c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

uint64_t ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 32);
  if (v2 >= 4) {
    LOBYTE(v2) = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN10subscriber19EURSimCommandDriver17sendSimApdu_closeENS_15HardwareSimSlotEhbNSt3__18functionIFvbEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a2 + 4);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v7 = subscriber::asString();
    int v8 = *(unsigned __int8 *)(a1 + 76);
    int v9 = *(_DWORD *)(a2 + 4);
    int v18 = 136315906;
    uint64_t v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    __int16 v22 = 1024;
    int v23 = v9;
    __int16 v24 = 2080;
    uint64_t v25 = qmi::asString();
    char v10 = "#I uim::LogicalChannel, slot:%s, chan:%d, close() failed with QMI error 0x%04x (%s)";
    int v11 = v5;
    uint32_t v12 = 34;
  }
  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v13 = subscriber::asString();
    int v14 = *(unsigned __int8 *)(a1 + 76);
    int v18 = 136315394;
    uint64_t v19 = v13;
    __int16 v20 = 1024;
    int v21 = v14;
    char v10 = "#I uim::LogicalChannel, slot:%s channel %d closed";
    int v11 = v5;
    uint32_t v12 = 18;
  }
  _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v18, v12);
LABEL_7:
  if (*(unsigned char *)(a1 + 77)) {
    BOOL v15 = *(_DWORD *)(a2 + 4) == 0;
  }
  else {
    BOOL v15 = 0;
  }
  char v16 = v15;
  return std::function<void ()(BOOL)>::operator()(a1 + 40, v16);
}

void subscriber::EURSimCommandDriver::~EURSimCommandDriver(subscriber::EURSimCommandDriver *this)
{
  subscriber::EURSimCommandDriver::~EURSimCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

{
  void *v2;
  NSObject *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D4CAE10;
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(*((void **)this + 35));
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*((void **)this + 32));
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 29));
  unsigned int v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<uim::SessionType,dispatch::group_session>,std::__map_value_compare<uim::SessionType,std::__value_type<uim::SessionType,dispatch::group_session>,std::less<uim::SessionType>,true>,std::allocator<std::__value_type<uim::SessionType,dispatch::group_session>>>::destroy(*((void **)this + 23));
  uint64_t v3 = *((void *)this + 21);
  if (v3) {
    dispatch_release(v3);
  }
  qmi::Client::~Client((subscriber::EURSimCommandDriver *)((char *)this + 128));

  MEMORY[0x270EE9438](this);
}

void sub_22247AB78(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<subscriber::SimDriverInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::__destroy_at[abi:ne180100]<subscriber::SimDriverInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<subscriber::SimDriverInfo,0>(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  uint64_t v4 = (void **)(a1 + 96);
  std::vector<pbm::tlv::AdditionalNumberParam>::__destroy_vector::operator()[abi:ne180100](&v4);
  unsigned int v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<subscriber::NpAppInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<uim::tlv::FileId>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<uim::tlv::FileId>,uim::tlv::FileId*,uim::tlv::FileId*,uim::tlv::FileId*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _DWORD v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_WORD *)uint64_t v4 = *(_WORD *)v6;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 8) = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)(v4 + 8), *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 1);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<at::tlv::CommandCallback>,at::tlv::CommandCallback*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22247ADCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<uim::tlv::FileId *,uim::tlv::FileId *,uim::tlv::FileId *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_WORD *)a3 = *(_WORD *)v5;
      if (v5 != a3) {
        std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)(a3 + 8), *(char **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 1);
      }
      v5 += 32;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::vector<uim::tlv::FileId>::__init_with_size[abi:ne180100]<uim::tlv::FileId*,uim::tlv::FileId*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<uim::tlv::FileId>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<uim::tlv::FileId>,uim::tlv::FileId*,uim::tlv::FileId*,uim::tlv::FileId*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22247AEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<uim::SessionType,dispatch::group_session>,std::__map_value_compare<uim::SessionType,std::__value_type<uim::SessionType,dispatch::group_session>,std::less<uim::SessionType>,true>,std::allocator<std::__value_type<uim::SessionType,dispatch::group_session>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<uim::SessionType,dispatch::group_session>,std::__map_value_compare<uim::SessionType,std::__value_type<uim::SessionType,dispatch::group_session>,std::less<uim::SessionType>,true>,std::allocator<std::__value_type<uim::SessionType,dispatch::group_session>>>::destroy(*a1);
    std::__tree<std::__value_type<uim::SessionType,dispatch::group_session>,std::__map_value_compare<uim::SessionType,std::__value_type<uim::SessionType,dispatch::group_session>,std::less<uim::SessionType>,true>,std::allocator<std::__value_type<uim::SessionType,dispatch::group_session>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<uim::SessionType const,dispatch::group_session>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<uim::SessionType const,dispatch::group_session>,0>(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 8);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void std::shared_ptr<subscriber::EURSimCommandDriver>::shared_ptr[abi:ne180100]<subscriber::EURSimCommandDriver,std::shared_ptr<subscriber::EURSimCommandDriver> ctu::SharedSynchronizable<subscriber::SimCommandDriver>::make_shared_ptr<subscriber::EURSimCommandDriver>(subscriber::EURSimCommandDriver*)::{lambda(subscriber::EURSimCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22247B194(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<subscriber::EURSimCommandDriver> ctu::SharedSynchronizable<subscriber::SimCommandDriver>::make_shared_ptr<subscriber::EURSimCommandDriver>(subscriber::EURSimCommandDriver*)::{lambda(subscriber::EURSimCommandDriver*)#1}::operator() const(subscriber::EURSimCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_22247B1BC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<subscriber::EURSimCommandDriver *,std::shared_ptr<subscriber::EURSimCommandDriver> ctu::SharedSynchronizable<subscriber::SimCommandDriver>::make_shared_ptr<subscriber::EURSimCommandDriver>(subscriber::EURSimCommandDriver*)::{lambda(subscriber::EURSimCommandDriver *)#1},std::allocator<subscriber::EURSimCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<subscriber::EURSimCommandDriver *,std::shared_ptr<subscriber::EURSimCommandDriver> ctu::SharedSynchronizable<subscriber::SimCommandDriver>::make_shared_ptr<subscriber::EURSimCommandDriver>(subscriber::EURSimCommandDriver*)::{lambda(subscriber::EURSimCommandDriver *)#1},std::allocator<subscriber::EURSimCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<subscriber::EURSimCommandDriver *,std::shared_ptr<subscriber::EURSimCommandDriver> ctu::SharedSynchronizable<subscriber::SimCommandDriver>::make_shared_ptr<subscriber::EURSimCommandDriver>(subscriber::EURSimCommandDriver*)::{lambda(subscriber::EURSimCommandDriver *)#1},std::allocator<subscriber::EURSimCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<subscriber::EURSimCommandDriver> ctu::SharedSynchronizable<subscriber::SimCommandDriver>::make_shared_ptr<subscriber::EURSimCommandDriver>(subscriber::EURSimCommandDriver*)::{lambda(subscriber::EURSimCommandDriver*)#1}::operator() const(subscriber::EURSimCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void std::__function::__func<char const* const (*)(subscriber::HardwareSimSlot),std::allocator<char const* const (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::~__func()
{
}

void *std::__function::__func<char const* const (*)(subscriber::HardwareSimSlot),std::allocator<char const* const (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4CB328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<char const* const (*)(subscriber::HardwareSimSlot),std::allocator<char const* const (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4CB328;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<char const* const (*)(subscriber::HardwareSimSlot),std::allocator<char const* const (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<char const* const (*)(subscriber::HardwareSimSlot),std::allocator<char const* const (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<char const* const (*)(subscriber::HardwareSimSlot),std::allocator<char const* const (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::target_type()
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3uim16CardStatusChange10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247B440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3uim7Refresh10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247B544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3uim18CardDebounceStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247B648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::EventMask>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::EventMask>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<uim::tlv::EventMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::EventMask>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::GetExtendedStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::GetExtendedStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::GetExtendedStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::GetExtendedStatus>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim13GetCardStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247B904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZN10subscriber19sHandleVinylAbilityIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke(uint64_t a1, char **a2)
{
  uint64_t v4 = *(char ***)(a1 + 32);
  unint64_t v5 = a2[1] - *a2;
  int v12 = 1;
  std::vector<subscriber::VinylCapability>::resize(v4, v5, &v12);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    int v8 = **(int ***)(a1 + 32);
    do
    {
      char v9 = *v6++;
      int v10 = (v9 - 1) + 2;
      if (((v9 - 1) & 0xFC) != 0) {
        int v11 = 1;
      }
      else {
        int v11 = v10;
      }
      *v8++ = v11;
    }
    while (v6 != v7);
  }
}

void std::vector<subscriber::VinylCapability>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    char v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      int v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)unint64_t v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v12);
      BOOL v15 = &v13[4 * v7];
      char v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      int v18 = v15;
      do
      {
        *(_DWORD *)int v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      uint64_t v19 = &v13[4 * v14];
      __int16 v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

char *___ZN10subscriber19sHandleVinylAbilityIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke_2(uint64_t a1, unsigned char *a2)
{
  if (*a2) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  int __src = v2;
  return std::vector<subscriber::VinylCapability>::__assign_with_size[abi:ne180100]<subscriber::VinylCapability const*,subscriber::VinylCapability const*>(*(char **)(a1 + 32), &__src, (uint64_t)&vars0, 1uLL);
}

char *std::vector<subscriber::VinylCapability>::__assign_with_size[abi:ne180100]<subscriber::VinylCapability const*,subscriber::VinylCapability const*>(char *result, void *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *((void *)result + 2);
  int v8 = *(char **)result;
  if (a4 <= (v7 - *(void *)result) >> 2)
  {
    uint64_t v13 = (void **)(result + 8);
    uint64_t v14 = (unsigned char *)*((void *)result + 1);
    if (a4 > (v14 - v8) >> 2 && v14 != v8)
    {
      uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v8);
      int v8 = (char *)*v13;
    }
    size_t v12 = a3 - (void)__src;
    if (v12) {
      uint64_t result = (char *)memmove(v8, __src, v12);
    }
  }
  else
  {
    if (v8)
    {
      *((void *)result + 1) = v8;
      operator delete(v8);
      uint64_t v7 = 0;
      *uint64_t v6 = 0;
      v6[1] = 0;
      unint64_t v6[2] = 0;
    }
    uint64_t v9 = v7 >> 1;
    if ((unint64_t)(v7 >> 1) <= 1) {
      uint64_t v9 = 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v10);
    int v8 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    unint64_t v6[2] = &result[4 * v11];
    size_t v12 = a3 - (void)__src;
    if (v12) {
      uint64_t result = (char *)memmove(result, __src, v12);
    }
    uint64_t v13 = (void **)(v6 + 1);
  }
  *uint64_t v13 = &v8[v12];
  return result;
}

uint64_t qmi::MessageBase::applyTlv<uim::tlv::VinylSupport,void({block_pointer}&)(uim::tlv::VinylSupport const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v13 = 0;
    uint64_t v14 = (char *)result;
    std::string __p = 0;
    size_t v12 = 0;
    tlv::parseV<uim::tlv::VinylSupport>(&v14, v5, &__p);
    int v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      size_t v12 = __p;
      operator delete(__p);
    }
    if (v8)
    {
      return 1;
    }
    else
    {
      uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, 33, v6, v7);
    }
  }
  return result;
}

void sub_22247BD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MessageBase::applyTlv<uim::tlv::VinylSupportLegacy,void({block_pointer}&)(uim::tlv::VinylSupportLegacy const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<uim::tlv::VinylSupportLegacy>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      int v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 32, v6, v7);
    }
  }
  return result;
}

double ___ZN10subscriber13sHandleIccidsIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(char **)(v4 + 8));
  *(void *)uint64_t v4 = v4 + 8;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 8) = 0;
  int v7 = *a2;
  uint64_t v6 = a2[1];
  while (v7 != v6)
  {
    subscriber::sDecodeIccid((subscriber *)(v7 + 1), (const unsigned __int8 *)0xA);
    int v8 = *(uint64_t ***)(a1 + 32);
    unsigned int v9 = *v7;
    unsigned int v12 = v9;
    uint64_t v10 = std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v8, v9, &v12);
    uint64_t v11 = v10 + 5;
    if (*((char *)v10 + 63) < 0) {
      operator delete(*v11);
    }
    double result = *(double *)&v13;
    *(_OWORD *)uint64_t v11 = v13;
    void v11[2] = v14;
    v7 += 11;
  }
  return result;
}

void sub_22247BEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ___ZN10subscriber13sHandleIccidsIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  unsigned int v13 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(char **)(v4 + 8));
  *(void *)uint64_t v4 = v4 + 8;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    unsigned int v8 = 0;
    do
    {
      subscriber::sDecodeIccid(*(subscriber **)v6, (const unsigned __int8 *)(*(void *)(v6 + 8) - *(void *)v6));
      unsigned int v9 = std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(*(uint64_t ***)(a1 + 32), v8, &v13);
      uint64_t v10 = v9 + 5;
      if (*((char *)v9 + 63) < 0) {
        operator delete(*v10);
      }
      double result = *(double *)&v11;
      *(_OWORD *)uint64_t v10 = v11;
      v10[2] = v12;
      unsigned int v13 = ++v8;
      v6 += 72;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_22247BF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<uim::tlv::Iccids,void({block_pointer}&)(uim::tlv::Iccids const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    uint64_t v14 = TlvValue;
    std::string __p = 0;
    unsigned int v12 = 0;
    tlv::parseV<uim::tlv::Iccids>(&v14, v5, (uint64_t)&__p);
    unsigned int v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      unsigned int v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      unsigned int v9 = (void (*)(uint64_t, uint64_t, tlv *, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 34, v6, v7);
    }
  }
}

void sub_22247C078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = operator new(0x40uLL);
    char v9[8] = *a3;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardInfoList,void({block_pointer}&)(uim::tlv::ExtendedCardInfoList const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    unsigned int v8 = TlvValue;
    int v9 = v7;
    uint64_t v13 = TlvValue;
    memset(v12, 0, sizeof(v12));
    tlv::parseV<uim::tlv::ExtendedCardInfoList>(&v13, v7, v12);
    if (v13)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      uint64_t v14 = (void **)v12;
      std::vector<uim::tlv::ExtendedCardInfo>::__destroy_vector::operator()[abi:ne180100](&v14);
    }
    else
    {
      uint64_t v14 = (void **)v12;
      std::vector<uim::tlv::ExtendedCardInfo>::__destroy_vector::operator()[abi:ne180100](&v14);
      uint64_t v10 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      v10(v11, a2, v8, v9);
    }
  }
}

void sub_22247C228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<uim::tlv::ExtendedCardInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19sHandleCardInfoListIN3uim13GetCardStatus8ResponseEEEvRKT_RNSt3__13mapIjNS7_6vectorIhNS7_9allocatorIhEEEENS7_4lessIjEENSA_INS7_4pairIKjSC_EEEEEE_block_invoke(uint64_t a1, char ***a2)
{
  unsigned int v11 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(*(void **)(v4 + 8));
  *(void *)uint64_t v4 = v4 + 8;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 8) = 0;
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    unsigned int v7 = 0;
    unsigned int v8 = v5 + 3;
    do
    {
      int v9 = std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(*(uint64_t ***)(a1 + 32), v7, &v11)+ 5;
      if (v8 != (char **)v9) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v9, *v8, v8[1], v8[1] - *v8);
      }
      unsigned int v11 = ++v7;
      uint64_t v10 = v8 + 6;
      v8 += 9;
    }
    while (v10 != v6);
  }
}

uint64_t **___ZN10subscriber27sHandleIsMomentaryPowerDownIN3uim13GetCardStatus8ResponseEEEvNSt3__110shared_ptrIK8RegistryEERKT_RNS4_3mapIjbNS4_4lessIjEENS4_9allocatorINS4_4pairIKjbEEEEEE_block_invoke(uint64_t **result, uint64_t *a2)
{
  int v7 = 0;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
    {
      BOOL v6 = *(unsigned char *)(v2 + v5) != 0;
      double result = std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v4[4], v5, &v7);
      *((unsigned char *)result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v6;
      int v7 = ++v5;
    }
    while (v2 + v5 != v3);
  }
  return result;
}

void qmi::MessageBase::applyTlv<uim::tlv::IsMomentaryPowerDown,void({block_pointer}&)(uim::tlv::IsMomentaryPowerDown const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v8 = TlvValue;
    int v9 = v7;
    uint64_t v15 = 0;
    unint64_t v16 = TlvValue;
    std::string __p = 0;
    uint64_t v14 = 0;
    tlv::parseV<uim::tlv::IsMomentaryPowerDown>(&v16, v7, &__p);
    unint64_t v10 = v16;
    if (v16) {
      (*(void (**)(void))(*(void *)a3 + 16))();
    }
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    if (!v10)
    {
      unsigned int v11 = (void (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v12 = *(unsigned __int16 *)a1;
      v11(v12, a2, v8, v9);
    }
  }
}

void sub_22247C440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((unsigned char *)v7 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
    *int v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *BOOL v6 = (uint64_t *)v7;
    unint64_t v10 = (uint64_t *)**a1;
    unsigned int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unsigned int v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void qmi::MessageBase::tryTlv<uim::tlv::HardwareSlotTypes>(qmi::MessageBase *a1, unsigned __int8 *a2)
{
  v9[0] = (tlv *)qmi::MessageBase::findTlvValue(a1);
  v9[1] = v3;
  if (v9[0])
  {
    tlv::parseV<uim::tlv::HardwareSlotTypes>(v9, (int)v3, (unint64_t *)&v7);
    if (*a2)
    {
      uint64_t v4 = (void *)*((void *)a2 + 1);
      if (v4)
      {
        *((void *)a2 + 2) = v4;
        operator delete(v4);
        int v5 = *a2;
      }
      else
      {
        int v5 = 1;
      }
      BOOL v6 = (void *)v7;
      *(_OWORD *)(a2 + 8) = v7;
      *((void *)a2 + 3) = v8;
    }
    else
    {
      BOOL v6 = (void *)v7;
      *(_OWORD *)(a2 + 8) = v7;
      *((void *)a2 + 3) = v8;
      int v5 = 1;
      *a2 = 1;
    }
    if (!v9[0] && v5)
    {
      if (v6)
      {
        *((void *)a2 + 2) = v6;
        operator delete(v6);
      }
      *a2 = 0;
    }
  }
}

char *std::vector<subscriber::SimDriverInfo>::__emplace_back_slow_path<>(int64x2_t *a1)
{
  uint64_t v2 = a1->i64[0];
  unint64_t v1 = a1->u64[1];
  unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(v1 - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  BOOL v6 = (char *)a1[1].i64[0];
  if (0x1C71C71C71C71C72 * ((uint64_t)&v6[-v2] >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((uint64_t)&v6[-v2] >> 4);
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)&v6[-v2] >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v7 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v7 = v4;
  }
  int v22 = a1 + 1;
  if (v7)
  {
    if (v7 > 0x1C71C71C71C71C7) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(144 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  int v9 = &v8[144 * v3];
  *(_DWORD *)int v9 = 1;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 1) = 0;
  unint64_t v10 = &v8[144 * v7];
  *(void *)(v9 + 4) = 0;
  v9[12] = 0;
  v9[28] = 0;
  *(void *)(v9 + 20) = 0;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  unsigned int v11 = v9 + 144;
  v20.i64[1] = (uint64_t)(v9 + 144);
  int v21 = v10;
  if (v1 == v2)
  {
    int64x2_t v17 = vdupq_n_s64(v1);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = &v9[v12];
      uint64_t v14 = v1 + v12;
      long long v15 = *(_OWORD *)(v1 + v12 - 144);
      *(_OWORD *)(v13 - 131) = *(_OWORD *)(v1 + v12 - 131);
      *((_OWORD *)v13 - 9) = v15;
      *((void *)v13 - 14) = *(void *)(v1 + v12 - 112);
      *((void *)v13 - 12) = 0;
      *((void *)v13 - 11) = 0;
      *(_OWORD *)(v13 - 104) = *(_OWORD *)(v1 + v12 - 104);
      *((void *)v13 - 11) = *(void *)(v1 + v12 - 88);
      *(void *)(v14 - 96) = 0;
      *(void *)(v14 - std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
      *(void *)(v14 - 104) = 0;
      *((void *)v13 - 10) = *(void *)(v1 + v12 - 80);
      *((void *)v13 - 8) = 0;
      *((void *)v13 - 7) = 0;
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v1 + v12 - 72);
      *((void *)v13 - 7) = *(void *)(v1 + v12 - 56);
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 56) = 0;
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 4) = 0;
      *((_OWORD *)v13 - 3) = *(_OWORD *)(v1 + v12 - 48);
      *((void *)v13 - 4) = *(void *)(v1 + v12 - 32);
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
      long long v16 = *(_OWORD *)(v1 + v12 - 24);
      *((void *)v13 - 1) = *(void *)(v1 + v12 - 8);
      *(_OWORD *)(v13 - 24) = v16;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      *(void *)(v14 - 24) = 0;
      v12 -= 144;
    }
    while (v1 + v12 != v2);
    int64x2_t v17 = *a1;
    BOOL v6 = (char *)a1[1].i64[0];
    v9 += v12;
    unsigned int v11 = (char *)v20.i64[1];
    unint64_t v10 = v21;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v20 = v17;
  a1[1].i64[0] = (uint64_t)v10;
  int v21 = v6;
  uint64_t v19 = v17.i64[0];
  std::__split_buffer<subscriber::SimDriverInfo>::~__split_buffer((uint64_t)&v19);
  return v11;
}

uint64_t std::__split_buffer<subscriber::SimDriverInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    std::__destroy_at[abi:ne180100]<subscriber::SimDriverInfo,0>(i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<uim::tlv::AppIndex>::__assign_with_size[abi:ne180100]<uim::tlv::AppIndex*,uim::tlv::AppIndex*>(void *result, char *__src, char *a3, unint64_t a4)
{
  BOOL v6 = __src;
  unint64_t v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  unint64_t v8 = result[2];
  unint64_t v10 = (char *)*result;
  if (a4 > (uint64_t)(v8 - *result) >> 1)
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      unint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0
      || (v8 <= a4 ? (unint64_t v11 = a4) : (unint64_t v11 = v8),
          v8 >= 0x7FFFFFFFFFFFFFFELL ? (uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL) : (uint64_t v12 = v11),
          v12 < 0))
    {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    double result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v9, v12);
    unint64_t v10 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    void v7[2] = (char *)result + 2 * v13;
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memmove(result, v6, v14);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_23;
  }
  long long v15 = (void **)(result + 1);
  long long v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v10) >> 1;
  if (v17 >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_23;
    }
    uint64_t v19 = (void *)*result;
LABEL_22:
    double result = memmove(v19, __src, v14);
    goto LABEL_23;
  }
  int v18 = &__src[2 * v17];
  if (v16 != v10)
  {
    double result = memmove((void *)*result, __src, v16 - v10);
    unint64_t v10 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v10;
    int __src = v18;
    goto LABEL_22;
  }
LABEL_23:
  *long long v15 = &v10[v14];
  return result;
}

uint64_t *std::__tree<std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,BOOL>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,BOOL>>>::__emplace_unique_key_args<subscriber::HardwareSimSlot,subscriber::HardwareSimSlot const&,BOOL>(uint64_t *result, int a2, int a3, char a4)
{
  BOOL v6 = (uint64_t **)result;
  unint64_t v8 = (uint64_t **)(result + 1);
  unint64_t v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 7);
        if (v10 <= a2) {
          break;
        }
        unint64_t v7 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        break;
      }
      unint64_t v7 = v9[1];
      if (!v7)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v11 = operator new(0x28uLL);
    v11[7] = a3;
    *((unsigned char *)v11 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = a4;
    return std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v6, (uint64_t)v9, v8, (uint64_t *)v11);
  }
  return result;
}

uint64_t std::map<subscriber::HardwareSimSlot,BOOL>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      unint64_t v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          unint64_t v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = v7;
        }
        else {
          uint64_t v12 = v3;
        }
        if (v6) {
          uint64_t v13 = v7 + 1;
        }
        else {
          uint64_t v13 = v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v13 = v3;
        uint64_t v12 = v3;
        if (v6)
        {
          size_t v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v14;
              int v15 = *((_DWORD *)v14 + 7);
              if (v15 <= v11) {
                break;
              }
              size_t v14 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v11) {
              goto LABEL_25;
            }
            size_t v14 = v12[1];
            if (!v14)
            {
              uint64_t v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      long long v16 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v16 + 28) = *(void *)((char *)v5 + 28);
      std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      unint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          unint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v18 = (void *)v5[2];
          BOOL v10 = *v18 == (void)v5;
          int v5 = v18;
        }
        while (!v10);
      }
      int v5 = v18;
    }
    while (v18 != v4);
  }
  return a1;
}

void sub_22247CB98(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<uim::tlv::ExtendedCardStatus,void({block_pointer})(uim::tlv::ExtendedCardStatus const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v9 = result;
    int v10 = v7;
    uint64_t v19 = (uim::tlv *)result;
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)size_t v14 = 0u;
    *(_OWORD *)std::string __p = 0u;
    tlv::parseV<uim::tlv::ExtendedCardStatus>(&v19, v7, v8, (uint64_t)v14);
    int v11 = v19;
    if (v19) {
      (*(void (**)(void))(*(void *)a3 + 16))();
    }
    int64x2_t v20 = (void **)&v17;
    std::vector<uim::tlv::Slot>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (__p[1])
    {
      *(void **)&long long v16 = __p[1];
      operator delete(__p[1]);
    }
    if (v14[0])
    {
      v14[1] = v14[0];
      operator delete(v14[0]);
    }
    if (v11)
    {
      return 1;
    }
    else
    {
      uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v13 = *(unsigned __int16 *)a1;
      return v12(v13, a2, v9, v10);
    }
  }
  return result;
}

void sub_22247CCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  *(void *)(v14 - 72) = v13 + 48;
  std::vector<uim::tlv::Slot>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void qmi::MessageBase::applyTlv<uim::tlv::CardStatus,void({block_pointer})(uim::tlv::CardStatus const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    int v11 = TlvValue;
    memset(v10, 0, sizeof(v10));
    tlv::parseV<uim::tlv::CardStatus>(&v11, v5, v10);
    if (v11)
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      uint64_t v12 = (void **)v10 + 1;
      std::vector<uim::tlv::Slot>::__destroy_vector::operator()[abi:ne180100](&v12);
    }
    else
    {
      uint64_t v12 = (void **)v10 + 1;
      std::vector<uim::tlv::Slot>::__destroy_vector::operator()[abi:ne180100](&v12);
      uint64_t v8 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      v8(v9, 16, v6, v7);
    }
  }
}

void sub_22247CDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)(v14 | 8);
  std::vector<uim::tlv::Slot>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void ___ZN10subscriber19sHandleVinylAbilityIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke(uint64_t a1, char **a2)
{
  unint64_t v4 = *(char ***)(a1 + 32);
  unint64_t v5 = a2[1] - *a2;
  int v12 = 1;
  std::vector<subscriber::VinylCapability>::resize(v4, v5, &v12);
  uint64_t v6 = *a2;
  int v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = **(int ***)(a1 + 32);
    do
    {
      char v9 = *v6++;
      int v10 = (v9 - 1) + 2;
      if (((v9 - 1) & 0xFC) != 0) {
        int v11 = 1;
      }
      else {
        int v11 = v10;
      }
      *v8++ = v11;
    }
    while (v6 != v7);
  }
}

char *___ZN10subscriber19sHandleVinylAbilityIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__16vectorINS_15VinylCapabilityENS7_9allocatorIS9_EEEE_block_invoke_2(uint64_t a1, unsigned char *a2)
{
  if (*a2) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  int __src = v2;
  return std::vector<subscriber::VinylCapability>::__assign_with_size[abi:ne180100]<subscriber::VinylCapability const*,subscriber::VinylCapability const*>(*(char **)(a1 + 32), &__src, (uint64_t)&vars0, 1uLL);
}

double ___ZN10subscriber13sHandleIccidsIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(char **)(v4 + 8));
  *(void *)uint64_t v4 = v4 + 8;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 8) = 0;
  int v7 = *a2;
  uint64_t v6 = a2[1];
  while (v7 != v6)
  {
    subscriber::sDecodeIccid((subscriber *)(v7 + 1), (const unsigned __int8 *)0xA);
    uint64_t v8 = *(uint64_t ***)(a1 + 32);
    unsigned int v9 = *v7;
    unsigned int v12 = v9;
    int v10 = std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v8, v9, &v12);
    int v11 = v10 + 5;
    if (*((char *)v10 + 63) < 0) {
      operator delete(*v11);
    }
    double result = *(double *)&v13;
    *(_OWORD *)int v11 = v13;
    void v11[2] = v14;
    v7 += 11;
  }
  return result;
}

void sub_22247CF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ___ZN10subscriber13sHandleIccidsIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__13mapIjNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4lessIjEENSC_INS7_4pairIKjSE_EEEEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  unsigned int v13 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(char **)(v4 + 8));
  *(void *)uint64_t v4 = v4 + 8;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    unsigned int v8 = 0;
    do
    {
      subscriber::sDecodeIccid(*(subscriber **)v6, (const unsigned __int8 *)(*(void *)(v6 + 8) - *(void *)v6));
      unsigned int v9 = std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(*(uint64_t ***)(a1 + 32), v8, &v13);
      int v10 = v9 + 5;
      if (*((char *)v9 + 63) < 0) {
        operator delete(*v10);
      }
      double result = *(double *)&v11;
      *(_OWORD *)int v10 = v11;
      _OWORD v10[2] = v12;
      unsigned int v13 = ++v8;
      v6 += 72;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_22247D064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10subscriber19sHandleCardInfoListIN3uim16CardStatusChange10IndicationEEEvRKT_RNSt3__13mapIjNS7_6vectorIhNS7_9allocatorIhEEEENS7_4lessIjEENSA_INS7_4pairIKjSC_EEEEEE_block_invoke(uint64_t a1, char ***a2)
{
  unsigned int v11 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(*(void **)(v4 + 8));
  *(void *)uint64_t v4 = v4 + 8;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 8) = 0;
  unint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    unsigned int v7 = 0;
    unsigned int v8 = v5 + 3;
    do
    {
      unsigned int v9 = std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(*(uint64_t ***)(a1 + 32), v7, &v11)+ 5;
      if (v8 != (char **)v9) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v9, *v8, v8[1], v8[1] - *v8);
      }
      unsigned int v11 = ++v7;
      int v10 = v8 + 6;
      v8 += 9;
    }
    while (v10 != v6);
  }
}

uint64_t **___ZN10subscriber27sHandleIsMomentaryPowerDownIN3uim16CardStatusChange10IndicationEEEvNSt3__110shared_ptrIK8RegistryEERKT_RNS4_3mapIjbNS4_4lessIjEENS4_9allocatorINS4_4pairIKjbEEEEEE_block_invoke(uint64_t **result, uint64_t *a2)
{
  int v7 = 0;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
    {
      BOOL v6 = *(unsigned char *)(v2 + v5) != 0;
      double result = std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v4[4], v5, &v7);
      *((unsigned char *)result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v6;
      int v7 = ++v5;
    }
    while (v2 + v5 != v3);
  }
  return result;
}

char *qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>(uint64_t a1)
{
  unint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::SessionInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CB480;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SessionInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CB480;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::SessionInfo>::getSize(uint64_t a1)
{
  return tlv::size<vs::tlv::USSInfo>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::SessionInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<vs::tlv::BurstDtmfInfo>((unsigned char **)a2, a1 + 16);
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SessionInfo>::clone()
{
}

void sub_22247D50C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40AD8DF7F0);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::sToSessionType(os_log_t *a1, _DWORD *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v2 = a2[2];
  switch(v2)
  {
    case 3:
      unsigned int v4 = *a2 - 1;
      if (v4 >= 3) {
        goto LABEL_12;
      }
      unsigned int v3 = 0x100504u >> (8 * v4);
      break;
    case 2:
      unsigned int v3 = a2[1];
      if (v3 != 1)
      {
        if (v3 != 2) {
          goto LABEL_12;
        }
        LOBYTE(v3) = 3;
      }
      break;
    case 1:
      unsigned int v3 = a2[1];
      if (v3 == 1)
      {
LABEL_14:
        LOBYTE(v3) = 0;
        return v3;
      }
      if (v3 != 2)
      {
LABEL_12:
        uint64_t v5 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_FAULT))
        {
          int v7 = 136315650;
          uint64_t v8 = subscriber::asString();
          __int16 v9 = 2080;
          uint64_t v10 = subscriber::asString();
          __int16 v11 = 2080;
          uint64_t v12 = subscriber::asString();
          _os_log_fault_impl(&dword_22231A000, v5, OS_LOG_TYPE_FAULT, "bad type %s or slot %s | %s", (uint8_t *)&v7, 0x20u);
        }
        goto LABEL_14;
      }
      break;
    default:
      goto LABEL_12;
  }
  return v3;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::VerifyPin>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB4D0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::VerifyPin>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB4D0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::VerifyPin>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::TextString>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::VerifyPin>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<uim::tlv::VerifyPin>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::VerifyPin>::clone()
{
}

void sub_22247D844(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C40FA1C946DLL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim9VerifyPin8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    BOOL v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      BOOL v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247D92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::UnblockPin>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB520;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::UnblockPin>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB520;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::UnblockPin>::getSize(uint64_t a1)
{
  return tlv::size<uim::tlv::UnblockPin>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<uim::tlv::UnblockPin>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  double result = tlv::writeV<uim::tlv::UnblockPin>(a2, a1 + 16);
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::UnblockPin>::clone()
{
}

void sub_22247DB80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x223C9A950](v1, 0x1093C40A530C863);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim10UnblockPin8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    BOOL v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      BOOL v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247DC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::ChangePin>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB570;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::ChangePin>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB570;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::ChangePin>::getSize(uint64_t a1)
{
  return tlv::size<uim::tlv::UnblockPin>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<uim::tlv::ChangePin>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  double result = tlv::writeV<uim::tlv::UnblockPin>(a2, a1 + 16);
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::ChangePin>::clone()
{
}

void sub_22247DED4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x223C9A950](v1, 0x1093C40A530C863);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim9ChangePin8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    BOOL v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      BOOL v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247DFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::SetPinProtection>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB5C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SetPinProtection>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB5C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::SetPinProtection>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::Address>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::SetPinProtection>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<uim::tlv::SetPinProtection>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SetPinProtection>::clone()
{
}

void sub_22247E1D8(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C403CC153C4);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim16SetPinProtection8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    BOOL v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      BOOL v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22247E2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshReg>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CB610;
  char v3 = (void **)(a1 + 24);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D4CB610;
  char v3 = (void **)(a1 + 24);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C9A950](a1, 0x10A1C406F1F2BB1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshReg>::getSize(uint64_t a1)
{
  return tlv::size<uim::tlv::RefreshReg>(a1 + 16);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshReg>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<uim::tlv::RefreshReg>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshReg>::clone()
{
}

void sub_22247E4AC(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C406F1F2BB1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshComplete>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshComplete>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshComplete>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::RefreshComplete>::clone()
{
}

void *std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::~__func(void *a1)
{
  *a1 = &unk_26D4CB698;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  char v3 = a1[2];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[2];
    if (v4) {
      dispatch_release(v4);
    }
  }
  return a1;
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::~__func(void *a1)
{
  *a1 = &unk_26D4CB698;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  char v3 = a1[2];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[2];
    if (v4) {
      dispatch_release(v4);
    }
  }

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26D4CB698;
  std::__compressed_pair_elem<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22247E6EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4CB698;
  return std::__compressed_pair_elem<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::destroy(uint64_t a1)
{
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  uint64_t v4 = *(NSObject **)(a1 + 8);
  isa = v4[5].isa;
  if (os_log_type_enabled(isa, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = printers::asString((printers *)(a1 + 24), v6);
    _os_log_impl(&dword_22231A000, isa, OS_LOG_TYPE_DEFAULT, "#I shouldSendComplete (%s)", buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v7 = *(NSObject **)(a1 + 16);
    if (v7)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 16));
      dispatch_group_enter(v7);
    }
    *(_OWORD *)std::string __p = 0u;
    long long v63 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    *(void *)char v70 = MEMORY[0x263EF8330];
    *(void *)&v70[8] = 0x40000000;
    *(void *)&v70[16] = ___ZNK10subscriber19EURSimCommandDriver19sendRefreshCompleteEN8dispatch13group_sessionERKN3uim3tlv11SessionInfoEb_block_invoke;
    *(void *)&v70[24] = &__block_descriptor_tmp_38_4;
    uint64_t v71 = a1 + 32;
    uint64_t v8 = qmi::MutableMessageBase::getTLV<uim::tlv::SessionInfo>((uint64_t)__p);
    (*(void (**)(unsigned char *, char *))&v70[16])(v70, v8);
    unint64_t v57 = (uint8_t *)MEMORY[0x263EF8330];
    uint64_t v58 = 0x40000000;
    size_t v59 = ___ZNK10subscriber19EURSimCommandDriver19sendRefreshCompleteEN8dispatch13group_sessionERKN3uim3tlv11SessionInfoEb_block_invoke_2;
    unint64_t v60 = &__block_descriptor_tmp_40_7;
    char v61 = 1;
    __int16 v9 = (const void **)__p[1];
    if (__p[1] != (void *)v63)
    {
      while (*((unsigned char *)*v9 + 8) != 2)
      {
        if (++v9 == (const void **)v63) {
          goto LABEL_13;
        }
      }
    }
    if (v9 == (const void **)v63) {
LABEL_13:
    }
      operator new();
    if (!v10) {
      __cxa_bad_cast();
    }
    ___ZNK10subscriber19EURSimCommandDriver19sendRefreshCompleteEN8dispatch13group_sessionERKN3uim3tlv11SessionInfoEb_block_invoke_2((uint64_t)&v57, v10 + 9);
    char v52 = v4 + 16;
    uint64_t v53 = QMIServiceMsg::create();
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    LODWORD(v54) = 240000;
    *(void *)std::string buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 1174405120;
    *(void *)&long long v73 = ___ZNK10subscriber19EURSimCommandDriver19sendRefreshCompleteEN8dispatch13group_sessionERKN3uim3tlv11SessionInfoEb_block_invoke_3;
    *((void *)&v73 + 1) = &__block_descriptor_tmp_41_5;
    group[0] = v4;
    group[1] = v7;
    if (v7)
    {
      dispatch_retain(v7);
      if (group[1]) {
        dispatch_group_enter(group[1]);
      }
    }
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 0x40000000;
    *(void *)&long long v65 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_21;
    *((void *)&v65 + 1) = &unk_26460EB10;
    size_t v66 = buf;
    __int16 v11 = _Block_copy(&aBlock);
    unint64_t v56 = v11;
    if (v53)
    {
      qmi::Client::send();
      __int16 v11 = v56;
    }
    if (v11) {
      _Block_release(v11);
    }
    if (group[1])
    {
      dispatch_group_leave(group[1]);
      if (group[1]) {
        dispatch_release(group[1]);
      }
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
    if (v7)
    {
      dispatch_group_leave(v7);
      dispatch_release(v7);
    }
  }
  unsigned int v12 = *(unsigned __int8 *)(a1 + 32);
  LODWORD(v52) = v3;
  uint64_t v88 = 0;
  if (((1 << v12) & 0xA) != 0) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  long long v86 = 0u;
  long long v87 = 0u;
  if (((1 << v12) & 0x10030) != 0) {
    int v14 = 3;
  }
  else {
    int v14 = v13;
  }
  if (v12 <= 0x10) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  long long v84 = 0uLL;
  long long v85 = 0uLL;
  long long v82 = 0uLL;
  *(_OWORD *)size_t v83 = 0uLL;
  long long v80 = 0uLL;
  long long v81 = 0uLL;
  long long v78 = 0uLL;
  long long v79 = 0uLL;
  *(_OWORD *)char v76 = 0uLL;
  long long v77 = 0uLL;
  *(_OWORD *)dispatch_group_t group = 0uLL;
  long long v75 = 0uLL;
  *(_OWORD *)std::string buf = 0uLL;
  long long v73 = 0uLL;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  long long v16 = (void *)subscriber::operator<<();
  long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  uint64_t v18 = (const char *)subscriber::asString();
  size_t v19 = strlen(v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &aBlock);
  BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t v21 = MEMORY[0x263F03820];
  if (v20)
  {
    uint64_t v22 = *(void *)(MEMORY[0x263F03820] + 24);
    p_long long aBlock = &aBlock;
    if (SBYTE7(v65) < 0) {
      p_long long aBlock = (long long *)aBlock;
    }
    *(_DWORD *)char v70 = 136315394;
    *(void *)&v70[4] = v22;
    *(_WORD *)&v70[12] = 2080;
    *(void *)&v70[14] = p_aBlock;
    _os_log_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Firing event '%s': with params= %s", v70, 0x16u);
  }
  if (SBYTE7(v65) < 0) {
    operator delete((void *)aBlock);
  }
  *(void *)std::string buf = *MEMORY[0x263F8C2C8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v77) < 0) {
    operator delete(v76[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C9A8E0](&v79);
  uint64_t v24 = *(uint64_t **)(v21 + 8);
  if (!v24) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  int v68 = v15;
  int v69 = v3;
  long long v67 = 0uLL;
  long long v82 = 0u;
  *(_OWORD *)size_t v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  *(_OWORD *)char v76 = 0u;
  long long v77 = 0u;
  *(_OWORD *)dispatch_group_t group = 0u;
  long long v75 = 0u;
  *(_OWORD *)std::string buf = 0u;
  long long v73 = 0u;
  uint64_t v25 = (pthread_mutex_t *)boost::shared_ptr<boost::signals2::mutex>::operator*(v24 + 3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::garbage_collecting_lock(buf, v25);
  uint64_t v26 = v24[1];
  if (v26)
  {
    if (atomic_load_explicit((atomic_uint *volatile)(v26 + 8), memory_order_acquire) == 1)
    {
      uint64_t v27 = v24[1];
      if (!v27 || atomic_load_explicit((atomic_uint *volatile)(v27 + 8), memory_order_acquire) != 1) {
        __assert_rtn("nolock_cleanup_connections", "signal_template.hpp", 461, "_shared_state.unique()");
      }
      uint64_t v28 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(*v24);
      uint64_t v29 = boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v28);
      uint64_t v30 = v24[2];
      if (v30 == v29)
      {
        unint64_t v31 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(*v24);
        uint64_t v30 = *(void *)(boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v31)
                        + 8);
      }
      *(void *)&long long aBlock = v30;
      boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::nolock_cleanup_connections_from(v24, (uint64_t **)&aBlock, 1);
    }
    uint64_t v32 = *v24;
    uint64_t v33 = v24[1];
    if (v33) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v32 = *v24;
  }
  long long v34 = v67;
  *(void *)&long long v67 = v32;
  *((void *)&v67 + 1) = v33;
  long long aBlock = v34;
  boost::detail::shared_count::~shared_count((atomic_uint **)&aBlock + 1);
  boost::signals2::mutex::unlock((pthread_mutex_t *)v83[1]);
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(buf);
  long long v85 = 0u;
  long long v86 = 0u;
  *(_OWORD *)size_t v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  *(_OWORD *)char v76 = 0u;
  long long v73 = 0u;
  *(_OWORD *)dispatch_group_t group = 0u;
  *(_OWORD *)std::string buf = 0u;
  *(void *)&long long v87 = 0;
  *((void *)&v87 + 1) = 10;
  uint64_t v88 = &buf[8];
  uint64_t v89 = 0;
  unint64_t v90 = &v69;
  size_t v91 = &v68;
  uint64_t v93 = 0;
  uint64_t v92 = 0;
  size_t v35 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(v67);
  uint64_t v36 = boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v35);
  unint64_t v57 = buf;
  uint64_t v58 = (uint64_t)v24;
  size_t v59 = (uint64_t (*)(uint64_t, unsigned char *))v36;
  if (!*(void *)(boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(v67)
                  + 16))
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  char v37 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(v67);
  uint64_t v38 = *(void *)(boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v37)
                  + 8);
  char v39 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(v67);
  uint64_t v40 = boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v39);
  *(void *)char v70 = v38;
  *(void *)&v70[8] = v40;
  *(void *)&v70[16] = buf;
  *(void *)&v70[24] = v40;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::lock_next_callable((uint64_t *)v70);
  uint64_t v41 = *(void *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(v67);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(v41);
  unint64_t v42 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(v67);
  uint64_t v43 = boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v42);
  char v52 = v41;
  uint64_t v53 = v43;
  unint64_t v54 = buf;
  uint64_t v55 = v43;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::lock_next_callable((uint64_t *)&v52);
  long long aBlock = *(_OWORD *)v70;
  long long v65 = *(_OWORD *)&v70[16];
  uint64_t v44 = (uint64_t)v52;
  uint64_t v45 = *(void *)v70;
  if (*(NSObject **)v70 != v52)
  {
    uint64_t v46 = v65;
    int v47 = *(unsigned __int8 *)v65;
    BOOL v48 = *(unsigned char *)v65 == 0;
    do
    {
      if (v48)
      {
        uint64_t v49 = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator->(*(void *)(v45 + 16));
        uint64_t v50 = boost::shared_ptr<boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>>::operator*(*(void *)(v49 + 32));
        uint64_t v51 = *(void *)(v50 + 24);
        if (!v51)
        {
          std::runtime_error::runtime_error((std::runtime_error *)__p, "call to empty boost::function");
          __p[0] = &unk_26D4CB870;
          boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)__p);
        }
        (*(void (**)(uint64_t, void, void))((v51 & 0xFFFFFFFFFFFFFFFELL) + 8))(v50 + 32, **(unsigned int **)(v46 + 272), **(unsigned int **)(v46 + 280));
        if (!*(unsigned char *)v46) {
          *(unsigned char *)uint64_t v46 = 1;
        }
      }
      else if (!v47)
      {
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      }
      *(void *)&long long aBlock = *(void *)(v45 + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::lock_next_callable((uint64_t *)&aBlock);
      uint64_t v46 = v65;
      if (*(unsigned char *)v65) {
        *(unsigned char *)long long v65 = 0;
      }
      int v47 = 0;
      uint64_t v45 = aBlock;
      BOOL v48 = 1;
    }
    while ((void)aBlock != v44);
  }
  boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v57);
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>>::~slot_call_iterator_cache((uint64_t)buf);
  boost::detail::shared_count::~shared_count((atomic_uint **)&v67 + 1);
}

void sub_22247F218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,dispatch_group_t group,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  if (v55)
  {
    dispatch_group_leave(v55);
    dispatch_release(v55);
  }
  _Unwind_Resume(a1);
}

void sub_22247F390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  boost::signals2::mutex::unlock((pthread_mutex_t *)a64);
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(&a41);
  JUMPOUT(0x22247F3A4);
}

void sub_22247F3C0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x22247F3C8);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = *(NSObject **)(a1 + 8);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  return a1;
}

void sub_22247F490(_Unwind_Exception *exception_object)
{
  int v3 = *(NSObject **)(v1 + 8);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 8);
    if (v4) {
      dispatch_release(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  int v3 = a1[1];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[1];
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

uint64_t boost::shared_ptr<boost::signals2::mutex>::operator*(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

void *boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::garbage_collecting_lock(void *a1, pthread_mutex_t *this)
{
  a1[20] = 10;
  a1[21] = a1;
  a1[22] = 0;
  a1[23] = this;
  boost::signals2::mutex::lock(this);
  return a1;
}

void sub_22247F60C(_Unwind_Exception *a1)
{
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::mutex::lock(pthread_mutex_t *this)
{
  uint64_t result = pthread_mutex_lock(this);
  if (result) {
    __assert_rtn("lock", "lwm_pthreads.hpp", 60, "pthread_mutex_lock(&m_) == 0");
  }
  return result;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(void *a1)
{
  uint64_t v1 = (void *)a1[21];
  if (v1)
  {
    unint64_t v2 = a1[20];
    if (v2 < 0xA || (v1 == a1 ? (BOOL v3 = v2 == 10) : (BOOL v3 = 1), !v3 || a1[22] > v2)) {
      __assert_rtn("auto_buffer_destroy", "auto_buffer.hpp", 255, "is_valid()");
    }
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(a1);
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  unint64_t v2 = a1[22];
  if (v2) {
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::destroy_back_n((uint64_t)a1, v2);
  }
  if (a1[20] >= 0xBuLL)
  {
    BOOL v3 = (void *)a1[21];
    operator delete(v3);
  }
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::destroy_back_n(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("destroy_back_n", "auto_buffer.hpp", 263, "n > 0");
  }
  if (a2 - 1 >= 0)
  {
    uint64_t v2 = *(void *)(a1 + 168) + 16 * *(void *)(a1 + 176);
    unint64_t v3 = v2 + 16 * ~a2;
    unint64_t v4 = v2 - 16;
    do
    {
      boost::detail::shared_count::~shared_count((atomic_uint **)(v4 + 8));
      v4 -= 16;
    }
    while (v4 > v3);
  }
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (v1) {
    boost::detail::sp_counted_base::release(v1);
  }
}

atomic_uint *boost::detail::sp_counted_base::release(atomic_uint *this)
{
  if (atomic_fetch_add(this + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = this + 3;
    this = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 16))(this);
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
    {
      unint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 24);
      return (atomic_uint *)v3(v1);
    }
  }
  return this;
}

uint64_t boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::nolock_cleanup_connections_from(uint64_t *a1, uint64_t **a2, int a3)
{
  uint64_t v3 = a1[1];
  if (!v3 || atomic_load_explicit((atomic_uint *volatile)(v3 + 8), memory_order_acquire) != 1) {
    __assert_rtn("nolock_cleanup_connections_from", "signal_template.hpp", 436, "_shared_state.unique()");
  }
  uint64_t v5 = a1;
  char v6 = *a2;
  char v7 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(*a1);
  uint64_t result = boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v7);
  if ((uint64_t *)result != v6)
  {
    unsigned int v9 = 0;
    unsigned int v10 = a3 - 1;
    __int16 v11 = v6;
    uint64_t v38 = v5;
    do
    {
      if (*(unsigned char *)(boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator->(v11[2])
                    + 24))
      {
        char v6 = (uint64_t *)v11[1];
      }
      else
      {
        unsigned int v12 = *(uint64_t **)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(*v5);
        boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*((uint64_t)v12);
        uint64_t v13 = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator->(v11[2]);
        if (v11 == v12) {
          __assert_rtn("erase", "slot_groups.hpp", 148, "it != _list.end()");
        }
        int v14 = v12 + 4;
        int v15 = (void *)v12[4];
        if (!v15) {
          goto LABEL_45;
        }
        uint64_t v16 = v13 + 64;
        char v39 = (uint64_t **)(v12 + 3);
        long long v17 = v12 + 4;
        do
        {
          BOOL v18 = boost::signals2::detail::group_key_less<int,std::less<int>>::operator()((uint64_t)(v12 + 6), (uint64_t)(v15 + 4), v16);
          size_t v19 = v15 + 1;
          if (!v18)
          {
            size_t v19 = v15;
            long long v17 = v15;
          }
          int v15 = (void *)*v19;
        }
        while (*v19);
        if (v17 == v14) {
LABEL_45:
        }
          __assert_rtn("erase", "slot_groups.hpp", 150, "map_it != _group_map.end()");
        if (boost::signals2::detail::group_key_less<int,std::less<int>>::operator()((uint64_t)(v12 + 7), (uint64_t)(v17 + 4), v16)|| boost::signals2::detail::group_key_less<int,std::less<int>>::operator()((uint64_t)(v12 + 7), v16, (uint64_t)(v17 + 4)))
        {
          __assert_rtn("erase", "slot_groups.hpp", 151, "weakly_equivalent(map_it->first, key)");
        }
        if ((uint64_t *)v17[6] == v11)
        {
          uint64_t v37 = v11[1];
          BOOL v20 = (void *)*v14;
          uint64_t v21 = v12;
          if (*v14)
          {
            uint64_t v22 = v12 + 4;
            do
            {
              BOOL v23 = boost::signals2::detail::group_key_less<int,std::less<int>>::operator()((uint64_t)(v12 + 6), v16, (uint64_t)(v20 + 4));
              uint64_t v24 = v20 + 1;
              if (v23)
              {
                uint64_t v24 = v20;
                uint64_t v22 = v20;
              }
              BOOL v20 = (void *)*v24;
            }
            while (*v24);
            uint64_t v21 = v12;
            if (v22 != v14) {
              uint64_t v21 = (uint64_t *)v22[6];
            }
          }
          if ((uint64_t *)v37 == v21)
          {
            uint64_t v29 = (uint64_t *)v17[1];
            uint64_t v30 = v17;
            if (v29)
            {
              do
              {
                unint64_t v31 = v29;
                uint64_t v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                unint64_t v31 = (uint64_t *)v30[2];
                BOOL v32 = *v31 == (void)v30;
                uint64_t v30 = v31;
              }
              while (!v32);
            }
            if (*v39 == v17) {
              uint64_t *v39 = v31;
            }
            uint64_t v33 = (uint64_t *)v12[4];
            --v12[5];
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v33, v17);
            operator delete(v17);
          }
          else
          {
            uint64_t v40 = 0;
            uint64_t v25 = (void **)std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>((uint64_t)v39, &v40, v16);
            uint64_t v26 = *v25;
            if (!*v25)
            {
              uint64_t v27 = (uint64_t **)v25;
              uint64_t v26 = operator new(0x38uLL);
              int v28 = *(_DWORD *)(v16 + 8);
              void v26[4] = *(void *)v16;
              *((_DWORD *)v26 + 10) = v28;
              void v26[6] = 0;
              std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v39, v40, v27, v26);
            }
            void v26[6] = v37;
          }
        }
        uint64_t v34 = *v11;
        char v6 = (uint64_t *)v11[1];
        *(void *)(v34 + 8) = v6;
        *(void *)v11[1] = v34;
        --v12[2];
        boost::detail::shared_count::~shared_count((atomic_uint **)v11 + 3);
        operator delete(v11);
        uint64_t v5 = v38;
      }
      ++v9;
      size_t v35 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(*v5);
      uint64_t result = boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v35);
      BOOL v36 = v6 != (uint64_t *)result && v10 >= v9;
      __int16 v11 = v6;
    }
    while (v36);
  }
  _OWORD v5[2] = (uint64_t)v6;
  return result;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator->(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

uint64_t boost::signals2::slot_base::expired(boost::signals2::slot_base *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this == *((void *)this + 1)) {
    return 0;
  }
  do
  {
    uint64_t result = boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::expired_weak_ptr_visitor const>(v1);
    if (result) {
      break;
    }
    v1 += 24;
  }
  while (v1 != *((void *)this + 1));
  return result;
}

uint64_t boost::shared_ptr<boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>>::operator*(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::expired_weak_ptr_visitor const>(uint64_t a1)
{
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 1:
      uint64_t v1 = *(void *)(a1 + 16);
      if (v1) {
        uint64_t result = atomic_load_explicit((atomic_uint *volatile)(v1 + 8), memory_order_acquire) == 0;
      }
      else {
        uint64_t result = 1;
      }
      break;
    case 2:
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)boost::scoped_ptr<boost::signals2::detail::foreign_weak_ptr_impl_base>::operator->((uint64_t *)(a1 + 8))
                               + 24);
      uint64_t result = v3();
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t boost::scoped_ptr<boost::signals2::detail::foreign_weak_ptr_impl_base>::operator->(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "scoped_ptr.hpp", 105, "px != 0");
  }
  return result;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, void *a2)
{
  int v2 = a1[7];
  if (!v2) {
    __assert_rtn("dec_slot_refcount", "connection.hpp", 124, "m_slot_refcount != 0");
  }
  int v3 = v2 - 1;
  a1[7] = v3;
  if (!v3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v5);
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::push_back(a2, &v5);
    boost::detail::shared_count::~shared_count((atomic_uint **)&v5 + 1);
  }
}

void sub_22247FE88(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[22];
  if (v4 == a1[20]) {
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve(a1, v4 + 1);
  }

  return boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::unchecked_push_back(a1, a2);
}

void *boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::unchecked_push_back(void *result, long long *a2)
{
  uint64_t v2 = result[22];
  if (v2 == result[20]) {
    __assert_rtn("unchecked_push_back", "auto_buffer.hpp", 767, "!full()");
  }
  long long v3 = *a2;
  *(_OWORD *)(result[21] + 16 * v2) = *a2;
  if (*((void *)&v3 + 1))
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v3 + 1) + 8), 1u, memory_order_relaxed);
    uint64_t v2 = result[22];
  }
  result[22] = v2 + 1;
  return result;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[20];
  if (v2 <= 9) {
    __assert_rtn("reserve", "auto_buffer.hpp", 793, "members_.capacity_ >= N");
  }
  unint64_t v3 = a2;
  if (v2 < a2)
  {
    unint64_t v5 = 4 * v2;
    if (v5 > a2) {
      a2 = v5;
    }
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(a1, a2);
    if (a1[20] < v3) {
      __assert_rtn("reserve", "auto_buffer.hpp", 799, "members_.capacity_ >= n");
    }
  }
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(void *a1, unint64_t a2)
{
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::move_to_new_buffer((uint64_t)a1, a2);
  uint64_t v5 = v4;
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(a1);
  a1[20] = a2;
  a1[21] = v5;
  if (a1[22] > a2) {
    __assert_rtn("reserve_impl", "auto_buffer.hpp", 316, "size_ <= members_.capacity_");
  }
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::move_to_new_buffer(uint64_t a1, unint64_t a2)
{
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::allocate(a1, a2);
  uint64_t v4 = *(void *)(a1 + 176);
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 168);
    char v6 = &v5[2 * v4];
    char v7 = v3;
    do
    {
      uint64_t v8 = v5[1];
      *char v7 = *v5;
      v7[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
      }
      v5 += 2;
      v7 += 2;
    }
    while (v5 != v6);
  }
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::allocate(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB)
  {
    if (a2 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    operator new(16 * a2);
  }
}

BOOL boost::signals2::detail::group_key_less<int,std::less<int>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(_DWORD *)a2 < *(_DWORD *)a3;
  if (*(_DWORD *)a2 == *(_DWORD *)a3)
  {
    if (*(_DWORD *)a2 != 1) {
      return 0;
    }
    if (!*(unsigned char *)(a2 + 4) || !*(unsigned char *)(a3 + 4)) {
      __assert_rtn("get", "optional.hpp", 1211, "this->is_initialized()");
    }
    return *(_DWORD *)(a2 + 8) < *(_DWORD *)(a3 + 8);
  }
  return v3;
}

void *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 24;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!boost::signals2::detail::group_key_less<int,std::less<int>>::operator()(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!boost::signals2::detail::group_key_less<int,std::less<int>>::operator()(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t boost::signals2::mutex::unlock(pthread_mutex_t *this)
{
  uint64_t result = pthread_mutex_unlock(this);
  if (result) {
    __assert_rtn("unlock", "lwm_pthreads.hpp", 70, "pthread_mutex_unlock(&m_) == 0");
  }
  return result;
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  long long v3 = 0u;
  memset(v2, 0, sizeof(v2));
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::garbage_collecting_lock(v2, (uint64_t)this);
  if (*((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v2);
  }
  (*(void (**)(void))(**((void **)&v3 + 1) + 32))(*((void *)&v3 + 1));
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(v2);
}

void sub_22248035C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_2224803D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_26D4CB840;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_26D4CB7C8;
  *(void *)(a1 + 8) = &unk_26D4CB7F8;
  *(void *)(a1 + 24) = &unk_26D4CB820;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D4CB898;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::bad_function_call>::clone()
{
}

void sub_2224806B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_222480778(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D4CB898;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D4CB898;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26D4CB898;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(void *a1)
{
  *a1 = &unk_26D4CB898;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_26D4CB898;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  JUMPOUT(0x223C9A950);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x223C9A950);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D4CB840;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_26D4CB870;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_26D4CB898;
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_26D4CB7C8;
  *(void *)(a1 + 8) = &unk_26D4CB7F8;
  *(void *)(a1 + 24) = &unk_26D4CB820;
  return a1;
}

void sub_222480B64(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  return a1;
}

void *boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::garbage_collecting_lock(void *a1, uint64_t a2)
{
  a1[20] = 10;
  a1[21] = a1;
  a1[22] = 0;
  a1[23] = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  return a1;
}

void sub_222480CC4(_Unwind_Exception *a1)
{
  boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(v1);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, void *a2)
{
  int v2 = a1[7];
  if (!v2) {
    __assert_rtn("dec_slot_refcount", "connection.hpp", 124, "m_slot_refcount != 0");
  }
  int v3 = v2 - 1;
  a1[7] = v3;
  if (!v3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v5);
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::push_back(a2, &v5);
    boost::detail::shared_count::~shared_count((atomic_uint **)&v5 + 1);
  }
}

void sub_222480D78(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
  _Unwind_Resume(a1);
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::lock_next_callable(uint64_t *a1)
{
  v48[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  if (*a1 != a1[3])
  {
    if (v1 == a1[1]) {
      goto LABEL_41;
    }
    while (1)
    {
      uint64_t v3 = a1[2];
      uint64_t v4 = *(void *)(v3 + 264);
      if (v4)
      {
        if (v4 - 1 < 0)
        {
          uint64_t v7 = *(void *)(v3 + 264);
        }
        else
        {
          unint64_t v5 = *(void *)(v3 + 256);
          unint64_t v6 = v5 + 24 * v4;
          do
          {
            v6 -= 24;
            boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::destroy_content(v6);
          }
          while (v6 > v5);
          uint64_t v7 = *(void *)(v3 + 264);
          uint64_t v1 = *a1;
        }
        *(void *)(v3 + 264) = v7 - v4;
      }
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      uint64_t v8 = *(void *)(v1 + 16);
      boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator*(v8);
      boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::garbage_collecting_lock(&v36, v8);
      uint64_t v9 = *(void *)(*a1 + 16);
      boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator->(v9);
      uint64_t v10 = *(_DWORD ***)(v9 + 32);
      if (v10)
      {
        __int16 v11 = (void *)a1[2];
        unsigned int v12 = *v10;
        if (v12 != *(_DWORD **)(boost::shared_ptr<boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>>::operator*((uint64_t)v10)
                               + 8))
        {
          while (1)
          {
            memset(v48, 0, 24);
            boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v12, (uint64_t)v48);
            if (boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::expired_weak_ptr_visitor const>((uint64_t)v12)) {
              break;
            }
            unint64_t v13 = v11[33];
            unint64_t v14 = v11[31];
            if (v13 == v14)
            {
              if (v13 <= 9)
              {
                int v27 = 793;
                int v28 = "reserve";
                uint64_t v29 = "members_.capacity_ >= N";
                goto LABEL_46;
              }
              if (v13 == -1) {
                goto LABEL_47;
              }
              if (4 * v13 <= v13 + 1) {
                unint64_t v14 = v13 + 1;
              }
              else {
                unint64_t v14 = 4 * v13;
              }
              if (v14 >= 0xAAAAAAAAAAAAAABLL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v15 = operator new(24 * v14);
              uint64_t v16 = 0;
              v30[0] = 0;
              unint64_t v31 = v11 + 1;
              BOOL v32 = boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::deallocate;
              uint64_t v33 = 0;
              uint64_t v34 = v15;
              unint64_t v35 = v14;
              uint64_t v17 = 24 * v13;
              uint64_t v18 = v11[32];
              do
              {
                boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::variant((uint64_t)v15 + v16, v18 + v16);
                v16 += 24;
              }
              while (v17 != v16);
              v30[0] = 1;
              boost::signals2::detail::scope_guard_impl_base::safe_execute<boost::signals2::detail::obj_scope_guard_impl2<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>,void (boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::*)(boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>*,unsigned long),boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>*,unsigned long>>((uint64_t)v30);
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(v11 + 1);
              v11[31] = v14;
              v11[32] = v15;
              unint64_t v13 = v11[33];
              if (v13 > v14)
              {
                int v27 = 316;
                int v28 = "reserve_impl";
                uint64_t v29 = "size_ <= members_.capacity_";
                goto LABEL_46;
              }
            }
            if (v13 == v14)
            {
LABEL_47:
              int v27 = 767;
              int v28 = "unchecked_push_back";
              uint64_t v29 = "!full()";
LABEL_46:
              __assert_rtn(v28, "auto_buffer.hpp", v27, v29);
            }
            boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::variant(v11[32] + 24 * v13, (uint64_t)v48);
            ++v11[33];
            boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::destroy_content((uint64_t)v48);
            v12 += 6;
            if (v12 == *(_DWORD **)(boost::shared_ptr<boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>>::operator*(*(void *)(v9 + 32))
                                   + 8))
              goto LABEL_29;
          }
          if (*(unsigned char *)(v9 + 24))
          {
            *(unsigned char *)(v9 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v9, &v36);
          }
          boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::destroy_content((uint64_t)v48);
        }
      }
LABEL_29:
      uint64_t v19 = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator->(*(void *)(*a1 + 16));
      uint64_t v20 = a1[2];
      if (*(unsigned char *)(v19 + 24)) {
        ++*(_DWORD *)(v20 + 288);
      }
      else {
        ++*(_DWORD *)(v20 + 292);
      }
      uint64_t v21 = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator->(*(void *)(*a1 + 16));
      if (!*(unsigned char *)(v21 + 24)
        || (uint64_t v22 = *(void *)(v21 + 16)) != 0
        && atomic_load_explicit((atomic_uint *volatile)(v22 + 8), memory_order_acquire))
      {
        int v23 = 1;
      }
      else
      {
        boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::set_callable_iter(a1, &v36, *a1);
        int v23 = 0;
      }
      (*(void (**)(void))(**((void **)&v47 + 1) + 32))(*((void *)&v47 + 1));
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(&v36);
      uint64_t v1 = *a1;
      uint64_t v24 = a1[1];
      if (!v23) {
        break;
      }
      uint64_t v1 = *(void *)(v1 + 8);
      *a1 = v1;
      if (v1 == v24)
      {
        uint64_t v1 = v24;
        goto LABEL_41;
      }
    }
    if (v1 == v24)
    {
LABEL_41:
      uint64_t v25 = a1[3];
      if (v25 != v1)
      {
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        uint64_t v26 = *(void *)(v25 + 16);
        boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator*(v26);
        boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::garbage_collecting_lock(&v36, v26);
        boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::set_callable_iter(a1, &v36, a1[1]);
        (*(void (**)(void))(**((void **)&v47 + 1) + 32))(*((void *)&v47 + 1));
        boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(&v36);
      }
    }
  }
}

void sub_2224811DC()
{
}

void sub_22248120C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    for (; v3; v3 -= 24)
    {
      boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::destroy_content(v2);
      v2 += 24;
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x222481278);
}

void sub_22248123C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_222481254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::operator*(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>::set_callable_iter(void *a1, void *a2, uint64_t a3)
{
  a1[3] = a3;
  uint64_t v3 = a1[2];
  if (a1[1] == a3)
  {
    uint64_t v7 = *(_DWORD **)(v3 + 296);
    if (v7) {
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v7, a2);
    }
    *(void *)(v3 + 296) = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(a3 + 16);
    unint64_t v5 = *(_DWORD **)(v3 + 296);
    if (v5) {
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v5, a2);
    }
    *(void *)(v3 + 296) = v4;
    if (v4)
    {
      int v6 = *(_DWORD *)(v4 + 28);
      if (!v6) {
        __assert_rtn("inc_slot_refcount", "connection.hpp", 114, "m_slot_refcount != 0");
      }
      *(_DWORD *)(v4 + 28) = v6 + 1;
    }
  }
}

void boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::destroy_content(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 == 1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
  else
  {
    if (v1) {
      boost::detail::variant::forced_return<void>();
    }
    uint64_t v2 = (atomic_uint **)(a1 + 16);
    boost::detail::shared_count::~shared_count(v2);
  }
}

void boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t *)(a1 + 2);
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 0:
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      uint64_t v3 = 0;
      *(_DWORD *)a2 = 0;
      boost::detail::shared_count::~shared_count(&v3);
      break;
    case 1:
      boost::signals2::detail::lock_weak_ptr_visitor::operator()<boost::weak_ptr<void>>(v2, a2);
      break;
    case 2:
      boost::signals2::detail::lock_weak_ptr_visitor::operator()<boost::signals2::detail::foreign_void_weak_ptr>(v2, a2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::signals2::detail::lock_weak_ptr_visitor::operator()<boost::weak_ptr<void>>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = (atomic_uint *)a1[1];
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = v2[2];
    while (v3)
    {
      uint64_t v4 = v3;
      atomic_compare_exchange_strong_explicit(v2 + 2, (unsigned int *)&v4, v3 + 1, memory_order_relaxed, memory_order_relaxed);
      BOOL v5 = v4 == v3;
      uint64_t v3 = v4;
      if (v5)
      {
        uint64_t v6 = *a1;
        goto LABEL_9;
      }
    }
    uint64_t v2 = 0;
  }
  uint64_t v6 = 0;
LABEL_9:
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v2;
  uint64_t v7 = 0;
  *(_DWORD *)a2 = 0;
  boost::detail::shared_count::~shared_count(&v7);
}

uint64_t boost::signals2::detail::lock_weak_ptr_visitor::operator()<boost::signals2::detail::foreign_void_weak_ptr>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = boost::scoped_ptr<boost::signals2::detail::foreign_weak_ptr_impl_base>::operator->(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 16))(&v5);
  *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  *(_DWORD *)a2 = 1;
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void sub_222481608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::variant(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2 ^ (*(int *)a2 >> 31))
  {
    case 0:
      uint64_t v4 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
      }
      break;
    case 1:
      *(void *)(a1 + 8) = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(void *a1)
{
  int v1 = (void *)a1[31];
  if (v1)
  {
    unint64_t v3 = a1[30];
    if (v3 < 0xA || (v1 == a1 ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), !v4 || (v5 = a1[32], v5 > v3))) {
      __assert_rtn("auto_buffer_destroy", "auto_buffer.hpp", 255, "is_valid()");
    }
    if ((uint64_t)(v5 - 1) >= 0)
    {
      unint64_t v6 = (unint64_t)&v1[3 * v5];
      do
      {
        v6 -= 24;
        boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::destroy_content(v6);
      }
      while (v6 > (unint64_t)v1);
      unint64_t v3 = a1[30];
    }
    if (v3 >= 0xB)
    {
      uint64_t v7 = (void *)a1[31];
      operator delete(v7);
    }
  }
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::deallocate(int a1, void *__p, unint64_t a3)
{
  if (a3 >= 0xB) {
    operator delete(__p);
  }
}

uint64_t boost::signals2::detail::scope_guard_impl_base::safe_execute<boost::signals2::detail::obj_scope_guard_impl2<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>,void (boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::*)(boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>*,unsigned long),boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>*,unsigned long>>(uint64_t result)
{
  if (!*(unsigned char *)result)
  {
    int v1 = *(uint64_t (**)(void *, void, void))(result + 16);
    uint64_t v2 = *(void *)(result + 24);
    unint64_t v3 = (void *)(*(void *)(result + 8) + (v2 >> 1));
    if (v2) {
      int v1 = *(uint64_t (**)(void *, void, void))(*v3 + v1);
    }
    return v1(v3, *(void *)(result + 32), *(void *)(result + 40));
  }
  return result;
}

void sub_222481868(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void *boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(void *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288))
  {
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v2 = a1[2];
    long long v11 = 0u;
    memset(v10, 0, sizeof(v10));
    BOOL v4 = (pthread_mutex_t *)boost::shared_ptr<boost::signals2::mutex>::operator*(v3 + 3);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::garbage_collecting_lock(v10, v4);
    unint64_t v5 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(*v3);
    if (boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v5) == v2)
    {
      uint64_t v6 = v3[1];
      if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1) {
        operator new();
      }
      uint64_t v7 = (uint64_t *)boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::operator->(*v3);
      uint64_t v9 = *(uint64_t **)(boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::operator*(*v7)
                       + 8);
      boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::nolock_cleanup_connections_from(v3, &v9, 0);
    }
    boost::signals2::mutex::unlock(*((pthread_mutex_t **)&v11 + 1));
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(v10);
  }
  return a1;
}

void sub_222481E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    boost::checked_delete<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>(a12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_222481E3C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (a2)
  {
    __cxa_end_catch();
    boost::detail::shared_count::~shared_count(v10);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)va);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_222481E58(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    boost::checked_delete<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_222481E78(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::detail::shared_count::~shared_count(v12);
    MEMORY[0x223C9A950](a12, 0x20C40DC1BFBCFLL);
    JUMPOUT(0x222481F28);
  }
  _Unwind_Resume(a1);
}

void sub_222481E94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  MEMORY[0x223C9A950](a12, 0x20C40DC1BFBCFLL);
  JUMPOUT(0x222481F28);
}

void sub_222481EA0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (!a2) {
    _Unwind_Resume(a1);
  }
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)va);
  __clang_call_terminate(a1);
}

void sub_222481ECC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x222481F30);
}

uint64_t boost::checked_delete<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    boost::detail::shared_count::~shared_count((atomic_uint **)(result + 24));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
    JUMPOUT(0x223C9A950);
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::~sp_counted_impl_p()
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 24));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(subscriber::SimSlot,subscriber::SimCard),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>,boost::function<void ()(boost::signals2::connection const&,subscriber::SimSlot,subscriber::SimCard)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

void std::__list_imp<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>::clear(atomic_uint **a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (atomic_uint **)a1[1];
    BOOL v4 = *v3;
    *((void *)v4 + 1) = *((void *)*a1 + 1);
    **((void **)v2 + 1) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (atomic_uint **)v3[1];
        boost::detail::shared_count::~shared_count(v3 + 3);
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t boost::checked_delete<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (atomic_uint **)result;
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(void **)(result + 32));
    std::__list_imp<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>::clear(v1);
    JUMPOUT(0x223C9A950);
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::~sp_counted_impl_p()
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(void **)(v1 + 32));
    std::__list_imp<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>::clear((atomic_uint **)v1);
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(subscriber::SimSlot,subscriber::SimCard),boost::function<void ()(subscriber::SimSlot,subscriber::SimCard)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,subscriber::SimSlot,subscriber::SimCard>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    long long v5 = 0u;
    memset(v4, 0, sizeof(v4));
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::garbage_collecting_lock(v4, v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v4);
    (*(void (**)(void))(**((void **)&v5 + 1) + 32))(*((void *)&v5 + 1));
    boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::auto_buffer_destroy(v4);
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_22248228C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::~__func()
{
}

void *std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4CB998;
  return result;
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4CB998;
}

uint64_t std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshEnd(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::target_type()
{
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::~__func()
{
}

void *std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4CBA18;
  return result;
}

void std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4CBA18;
}

uint64_t std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0,std::allocator<subscriber::EURSimCommandDriver::handleRefreshAbortBeforeStart(uim::tlv::Refresh const&)::$_0>,void ()(subscriber::SimSlot)>::target_type()
{
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::OkToRefresh>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::OkToRefresh>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::OkToRefresh>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *BOOL v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::OkToRefresh>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<uim::tlv::FileId>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 2)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::FileId>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBB00;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::FileId>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBB00;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::FileId>::getSize(uint64_t a1)
{
  return tlv::size<wms::tlv::RawSend>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::FileId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<uim::tlv::FileId>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::FileId>::clone()
{
}

void sub_222482900(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C405E63A369);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadTransparent>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadTransparent>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadTransparent>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::TdFragmentInfo>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadTransparent>::clone()
{
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::shared_ptr<std::vector<unsigned char>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CBB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CBB88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v2;
    operator delete(v2);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim15ReadTransparent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222482C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::WriteTransparent>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBBF0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::WriteTransparent>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBBF0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::WriteTransparent>::getSize(uint64_t a1)
{
  return tlv::size<uim::tlv::WriteTransparent>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::WriteTransparent>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<uim::tlv::WriteTransparent>((_WORD **)a2, a1 + 16);
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::WriteTransparent>::clone()
{
}

void sub_222482E58(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C405E63A369);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim16WriteTransparent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222482F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__shared_ptr_pointer<std::map<unsigned short,std::vector<unsigned char>> *,std::shared_ptr<std::map<unsigned short,std::vector<unsigned char>>>::__shared_ptr_default_delete<std::map<unsigned short,std::vector<unsigned char>>,std::map<unsigned short,std::vector<unsigned char>>>,std::allocator<std::map<unsigned short,std::vector<unsigned char>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned short,std::vector<unsigned char>> *,std::shared_ptr<std::map<unsigned short,std::vector<unsigned char>>>::__shared_ptr_default_delete<std::map<unsigned short,std::vector<unsigned char>>,std::map<unsigned short,std::vector<unsigned char>>>,std::allocator<std::map<unsigned short,std::vector<unsigned char>>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned short,std::vector<unsigned char>> *,std::shared_ptr<std::map<unsigned short,std::vector<unsigned char>>>::__shared_ptr_default_delete<std::map<unsigned short,std::vector<unsigned char>>,std::map<unsigned short,std::vector<unsigned char>>>,std::allocator<std::map<unsigned short,std::vector<unsigned char>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::unique_ptr<std::map<unsigned short,std::vector<unsigned char>>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned char>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned char>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned char>>>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x223C9A950);
  }
  return result;
}

void *std::__function::__value_func<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::optional<subscriber::SimFileAttributes>,unsigned char,subscriber::SimFileType)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim17GetFileAttributes8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22248329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadRecord>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadRecord>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadRecord>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::TdFragmentInfo>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::ReadRecord>::clone()
{
}

uint64_t **std::__tree<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::__map_value_compare<subscriber::AuthInfo,std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>,std::less<subscriber::AuthInfo>,true>,std::allocator<std::__value_type<subscriber::AuthInfo,std::vector<unsigned char>>>>::__emplace_unique_key_args<subscriber::AuthInfo,std::piecewise_construct_t const&,std::tuple<subscriber::AuthInfo&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x40uLL);
    char v9[8] = *a3;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::AuthData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBD08;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::AuthData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBD08;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::AuthData>::getSize(uint64_t a1)
{
  return tlv::size<wms::tlv::RawSend>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::AuthData>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<uim::tlv::AuthData>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::AuthData>::clone()
{
}

void sub_222483610(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40970CA704);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::map<subscriber::AuthInfo,std::vector<unsigned char>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::map<subscriber::AuthInfo,std::vector<unsigned char>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim12Authenticate8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222483814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<uim::tlv::SlotId>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SlotId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::SlotId>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::SlotId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SlotId>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::OpenLChannelData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBDA8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::OpenLChannelData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBDA8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::OpenLChannelData>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::OpenLChannelData>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::NextHdrProtList>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::OpenLChannelData>::clone()
{
}

void sub_222483C70(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim14LogicalChannel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222483D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<uim::tlv::APDU>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 2)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::APDU>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBDF8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::APDU>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CBDF8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::APDU>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::MessageData>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<uim::tlv::APDU>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<p2p::tlv::MessageData>((_WORD **)a2, a1 + 16);
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::APDU>::clone()
{
}

void sub_2224840F0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<uim::tlv::LChannelId>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 16)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::LChannelId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::LChannelId>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::LChannelId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::LChannelId>::clone()
{
}

void qmi::MessageBase::applyTlv<uim::tlv::APDU,void({block_pointer}&)(uim::tlv::APDU const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    unint64_t v14 = TlvValue;
    std::string __p = 0;
    uint64_t v12 = 0;
    tlv::parseV<uim::tlv::APDU>(&v14, v5, &__p);
    unint64_t v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 16, v6, v7);
    }
  }
}

void sub_22248446C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim8SendAPDU8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22248454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::CloseLChannelData>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::CloseLChannelData>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::CloseLChannelData>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::CloseLChannelData>::clone()
{
}

void QMIProfileManager::~QMIProfileManager(QMIProfileManager *this)
{
  *(void *)this = &unk_26D4CBED0;
  ctu::RestModule::disconnect((QMIProfileManager *)((char *)this + 56));
  qmi::Client::~Client((QMIProfileManager *)((char *)this + 72));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x223C99A30]((char *)this + 8);
}

{
  uint64_t vars8;

  QMIProfileManager::~QMIProfileManager(this);

  JUMPOUT(0x223C9A950);
}

void ___ZN17QMIProfileManager22handleQmiClientStartedERN3qmi6ClientE_block_invoke(void *a1, qmi::MessageBase *a2)
{
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        v12[0] = MEMORY[0x263EF8330];
        v12[1] = 0x40000000;
        uint64_t v13 = ___ZN17QMIProfileManager38handleDeleteAllProfilesIndication_syncERKN3wds17DeleteAllProfiles10IndicationE_block_invoke;
        unint64_t v14 = &__block_descriptor_tmp_15_6;
        uint64_t v15 = v5;
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        uint64_t v10 = TlvValue;
        if (TlvValue)
        {
          int v11 = v9;
          uint64_t v17 = TlvValue;
          char v16 = tlv::parseV<wds::tlv::DeleteProfileStatus>((unint64_t *)&v17, v9);
          if (v17) {
            v13((uint64_t)v12, (unsigned __int8 *)&v16);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v10, v11);
          }
        }
        *(unsigned char *)(v5 + 104) = 1;
        LODWORD(v17) = *(_DWORD *)(v5 + 48);
        BYTE4(v17) = 1;
        ctu::rest::event_t<rest::mav16_data_profile_creation_ready,std::pair<subscriber::SimSlot,BOOL>>::send(v5 + 56, (int *)&v17);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_222484870(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17QMIProfileManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17QMIProfileManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::rest::event_t<rest::mav16_data_profile_creation_ready,std::pair<subscriber::SimSlot,BOOL>>::send(uint64_t a1, int *a2)
{
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x223C9AD60](v3) == MEMORY[0x263EF8708])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int v5 = *a2;
  uint64_t v6 = subscriber::asString();
  ctu::rest::detail::write_enum_string_value((uint64_t *)&object, (ctu::rest::detail *)v5, v6, v7);
  xpc::dict::object_proxy::operator=(&v16, v4, "first", &object);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v13 = xpc_BOOL_create(*((unsigned char *)a2 + 4));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc::dict::object_proxy::operator=(&v14, v4, "second", &v13);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v8 = v4;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_release(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/cc/events/mav16_data_profile_creation_ready");
  xpc_object_t v10 = v8;
  xpc_object_t v9 = xpc_null_create();
  ctu::RestModule::sendEvent();
  xpc_release(v10);
  if (v12 < 0) {
    operator delete(__p);
  }
  xpc_release(v9);
}

void sub_222484A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZN17QMIProfileManager22deleteAllProfiles_syncEv_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *(NSObject **)(v3 + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      int v9 = 136315394;
      uint64_t v10 = v7;
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Failed to delete all non-persistent profiles. Error: %s (0x%x). This is a best effort. Future profile creation will be allowed", (uint8_t *)&v9, 0x12u);
    }
    *(unsigned char *)(v3 + 104) = 1;
    int v9 = *(_DWORD *)(v3 + 48);
    LOBYTE(v10) = 1;
    ctu::rest::event_t<rest::mav16_data_profile_creation_ready,std::pair<subscriber::SimSlot,BOOL>>::send(v3 + 56, &v9);
  }
  else if (v6)
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Delete profiles response received. Waiting for indication...", (uint8_t *)&v9, 2u);
  }
}

void ___ZN17QMIProfileManager38handleDeleteAllProfilesIndication_syncERKN3wds17DeleteAllProfiles10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = wds::asString(*a2);
    int v5 = *a2;
    int v6 = 136315394;
    uint64_t v7 = v4;
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Deleting all profiles status: %s (%d)", (uint8_t *)&v6, 0x12u);
  }
}

void Mav16QMIDataContextIPAggregator::Mav16QMIDataContextIPAggregator(uint64_t a1, void *a2, NSObject **a3, char *a4, void *a5)
{
  uint64_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v11 = *a3;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v9 = a5[1];
  v10[0] = *a5;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  QMIDataContextIPAggregator::QMIDataContextIPAggregator(a1, v12, &v11, a4, v10);
}

void sub_222484EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, dispatch_object_t object, dispatch_object_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v22 = (std::__shared_weak_count *)v20[47];
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  int v23 = (std::__shared_weak_count *)v20[45];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  qmi::Client::~Client((qmi::Client *)(v20 + 40));
  uint64_t v24 = (std::__shared_weak_count *)v20[38];
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  QMIDataContextIPAggregator::~QMIDataContextIPAggregator((QMIDataContextIPAggregator *)v20);
  _Unwind_Resume(a1);
}

void Mav16QMIDataContextIPAggregator::~Mav16QMIDataContextIPAggregator(Mav16QMIDataContextIPAggregator *this)
{
  *(void *)this = &unk_26D4CBF20;
  *((void *)this + 2) = &unk_26D4CC228;
  *((void *)this + 36) = &unk_26D4CC3E8;
  ctu::RestModule::disconnect((Mav16QMIDataContextIPAggregator *)((char *)this + 296));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  qmi::Client::~Client((Mav16QMIDataContextIPAggregator *)((char *)this + 320));
  int v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  QMIDataContextIPAggregator::~QMIDataContextIPAggregator(this);
}

{
  uint64_t vars8;

  Mav16QMIDataContextIPAggregator::~Mav16QMIDataContextIPAggregator(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'Mav16QMIDataContextIPAggregator::~Mav16QMIDataContextIPAggregator(Mav16QMIDataContextIPAggregator *this)
{
}

{
  Mav16QMIDataContextIPAggregator::~Mav16QMIDataContextIPAggregator((Mav16QMIDataContextIPAggregator *)((char *)this - 288));
}

{
  uint64_t vars8;

  Mav16QMIDataContextIPAggregator::~Mav16QMIDataContextIPAggregator((Mav16QMIDataContextIPAggregator *)((char *)this - 16));

  JUMPOUT(0x223C9A950);
}

{
  uint64_t vars8;

  Mav16QMIDataContextIPAggregator::~Mav16QMIDataContextIPAggregator((Mav16QMIDataContextIPAggregator *)((char *)this - 288));

  JUMPOUT(0x223C9A950);
}

void Mav16QMIDataContextIPAggregator::initialize(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v9 = (char *)operator new(0x88uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)uint64_t v9 = &unk_26D4CC8E8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(NSObject **)(a1 + 40);
  if (v10) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 40));
  }
  int v11 = *(_DWORD *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, (const char *)*MEMORY[0x263F03770], "DATA.pfm");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  int v12 = v9 + 24;
  MEMORY[0x223C99A30](&v24);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 6) = 0;
  *((void *)v9 + 3) = &unk_26D4CBED0;
  *((void *)v9 + 7) = v7;
  *((void *)v9 + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v9 + 18) = v11;
  std::string::basic_string[abi:ne180100]<0>(v13, "QMIProfileManager");
  uint64_t v22 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  dispatch_object_t v27 = 0;
  ctu::RestModule::RestModule();
  if (v27) {
    dispatch_release(v27);
  }
  if (v22) {
    dispatch_release(v22);
  }
  if (v29 < 0) {
    operator delete(*(void **)buf);
  }
  *((_OWORD *)v9 + 6) = 0u;
  v9[128] = 0;
  *((_OWORD *)v9 + 7) = 0u;
  Registry::createRestModuleOneTimeUseConnection((uint64_t *)&v24, *((Registry **)v9 + 7));
  ctu::RestModule::connect();
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *((void *)v9 + 3) = &unk_26D4CC938;
  xpc_object_t v14 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v14)
  {
    if (v14->__shared_owners_ != -1) {
      goto LABEL_27;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 2, 1uLL, memory_order_relaxed);
    *((void *)v9 + 5) = v12;
    *((void *)v9 + 6) = v9;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 2, 1uLL, memory_order_relaxed);
    *((void *)v9 + 5) = v12;
    *((void *)v9 + 6) = v9;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
LABEL_27:
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 376);
  *(void *)(a1 + 368) = v12;
  *(void *)(a1 + 376) = v9;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
LABEL_29:
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v22, (void *)(a1 + 24));
  if (v22
  {
    uint64_t v16 = v23;
    if (v23)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v17 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "initialize";
      _os_log_error_impl(&dword_22231A000, v17, OS_LOG_TYPE_ERROR, "%s: dynamic cast failure: mav16Aggregator", buf, 0xCu);
      uint64_t v17 = *(NSObject **)(a1 + 56);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "initialize";
      _os_log_error_impl(&dword_22231A000, v17, OS_LOG_TYPE_ERROR, "%s: dynamic cast failure: profileManager", buf, 0xCu);
    }
    uint64_t v16 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "/cc/events/mav16_data_profile_creation_ready");
  *(void *)std::string buf = &unk_26D4CC970;
  *(void *)&uint8_t buf[8] = a1;
  uint64_t v30 = buf;
  ctu::RestModule::observeEvent();
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](buf);
  if (v26 < 0) {
    operator delete(v24);
  }
  uint64_t v18 = *(void *)(a1 + 72);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *(void *)(a3 + 8);
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(NSObject **)(a1 + 40);
  if (v20) {
    dispatch_retain(v20);
  }
  uint64_t v21 = *(void *)(a4 + 8);
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  Mav16QMIDataContextIP::create(buf);
}

void sub_2224857CC(_Unwind_Exception *a1)
{
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 168);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  qmi::Client::~Client(v1);
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v2[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  uint64_t v10 = (std::__shared_weak_count *)v2[2].__shared_weak_owners_;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  int v11 = (std::__shared_weak_count *)v2[2].__vftable;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  MEMORY[0x223C99A30](v5);
  if (v4) {
    dispatch_release(v4);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void Mav16QMIDataContextIP::create(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_222485BC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Mav16QMIDataContextIPAggregator::qmiClientStarted(Mav16QMIDataContextIPAggregator *this, qmi::Client *a2)
{
  if (*((void *)this + 42))
  {
    uint64_t v3 = *((void *)this + 7);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30[0]) = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I aggregator fWDSClient already set", (uint8_t *)v30, 2u);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t v5 = *((void *)a2 + 3);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 43);
    *((void *)this + 42) = v6;
    *((void *)this + 43) = v5;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v8 = *((void *)this + 7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30[0]) = 0;
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I aggregator fWDSClient created on-demand", (uint8_t *)v30, 2u);
    }
    uint64_t v9 = *((void *)this + 46);
    if (v9)
    {
      uint64_t v10 = *(NSObject **)(v9 + 8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v30[0]) = 0;
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I lazy creation of fWDSClient", (uint8_t *)v30, 2u);
      }
      uint64_t v11 = *((void *)a2 + 2);
      uint64_t v12 = *((void *)a2 + 3);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(std::__shared_weak_count **)(v9 + 96);
      *(void *)(v9 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = v11;
      *(void *)(v9 + 96) = v12;
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        uint64_t v11 = *(void *)(v9 + 88);
      }
      if (v11)
      {
        xpc_object_t v14 = *(std::__shared_weak_count **)(v9 + 24);
        if (!v14 || (uint64_t v15 = *(void *)(v9 + 16), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v17 = v16;
        p_unint64_t shared_weak_owners = &v16->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        v30[0] = MEMORY[0x263EF8330];
        v30[1] = 1174405120;
        _OWORD v30[2] = ___ZN17QMIProfileManager22handleQmiClientStartedERN3qmi6ClientE_block_invoke;
        v30[3] = &__block_descriptor_tmp_42;
        void v30[4] = v9;
        v30[5] = v15;
        uint64_t v31 = v17;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        *(void *)std::string buf = MEMORY[0x263EF8330];
        uint64_t v40 = 0x40000000;
        long long v41 = ___ZNK3qmi6Client13setIndHandlerIRKN3wds17DeleteAllProfiles10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
        long long v42 = &unk_26460EE98;
        long long v43 = v30;
        qmi::Client::setIndHandler();
        if (*(unsigned char *)(v9 + 104))
        {
          uint64_t v19 = *(NSObject **)(v9 + 8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I Deleting all profiles was already done", buf, 2u);
          }
        }
        else if (*(void *)(v9 + 88))
        {
          *(_OWORD *)std::string __p = 0u;
          long long v38 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
          uint64_t v21 = (const void **)__p[1];
          uint64_t v22 = (const void **)v38;
          uint64_t v23 = (const void **)__p[1];
          if (__p[1] != (void *)v38)
          {
            uint64_t v23 = (const void **)__p[1];
            while (*((unsigned char *)*v23 + 8) != 1)
            {
              if (++v23 == (const void **)v38) {
                goto LABEL_36;
              }
            }
          }
          if (v23 == (const void **)v38) {
LABEL_36:
          }
            operator new();
          if (!v24) {
            goto LABEL_63;
          }
          v24[2] = 3;
          if (v21 == v22) {
            goto LABEL_45;
          }
          char v26 = v21;
          while (*((unsigned char *)*v26 + 8) != 16)
          {
            if (++v26 == v22) {
              goto LABEL_45;
            }
          }
          if (v26 == v22) {
LABEL_45:
          }
            operator new();
          if (!v27) {
            goto LABEL_63;
          }
          void v27[2] = 1;
          while (1)
          {
            if (v21 == v22) {
              goto LABEL_52;
            }
            if (*((unsigned char *)*v21 + 8) == 17) {
              break;
            }
            ++v21;
          }
          if (v21 == v22) {
LABEL_52:
          }
            operator new();
          if (!v28) {
LABEL_63:
          }
            __cxa_bad_cast();
          v28[2] = 1;
          v32[5] = v9 + 72;
          uint64_t v33 = QMIServiceMsg::create();
          int v34 = 25000;
          uint64_t v35 = 0;
          long long aBlock = 0;
          v32[0] = MEMORY[0x263EF8330];
          v32[1] = 0x40000000;
          v32[2] = ___ZN17QMIProfileManager22deleteAllProfiles_syncEv_block_invoke_4;
          v32[3] = &__block_descriptor_tmp_13_7;
          v32[4] = v9;
          *(void *)std::string buf = MEMORY[0x263EF8330];
          uint64_t v40 = 0x40000000;
          long long v41 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17DeleteAllProfiles8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          long long v42 = &unk_26460EEC0;
          long long v43 = v32;
          char v29 = _Block_copy(buf);
          long long aBlock = v29;
          if (v33)
          {
            qmi::Client::send();
            char v29 = aBlock;
          }
          if (v29) {
            _Block_release(v29);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        }
        else
        {
          uint64_t v25 = *(NSObject **)(v9 + 8);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_error_impl(&dword_22231A000, v25, OS_LOG_TYPE_ERROR, "invalid QMI client", buf, 2u);
          }
        }
        if (v31) {
          std::__shared_weak_count::__release_weak(v31);
        }
        std::__shared_weak_count::__release_weak(v17);
      }
      else
      {
        uint64_t v20 = *(NSObject **)(v9 + 8);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v30[0]) = 0;
          _os_log_error_impl(&dword_22231A000, v20, OS_LOG_TYPE_ERROR, "handleQmiClientStarted() called with an invalid QMI client", (uint8_t *)v30, 2u);
        }
      }
    }
  }
}

void sub_222486530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27)
{
  if (a23) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v27);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Mav16QMIDataContextIPAggregator::qmiClientStarted(Mav16QMIDataContextIPAggregator *this, qmi::Client *a2)
{
}

void Mav16QMIDataContextIPAggregator::qmiClientStopped(Mav16QMIDataContextIPAggregator *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((void *)this + 42))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 43);
    *((void *)this + 42) = 0;
    *((void *)this + 43) = 0;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    qmi::Client::~Client((qmi::Client *)&v9);
    uint64_t v3 = *((void *)this + 44);
    *(_WORD *)uint64_t v3 = 0;
    *(_DWORD *)(v3 + 2) = -1;
    int v4 = *((void *)this + 7);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v9) = 136315138;
      *(void *)((char *)&v9 + 4) = "qmiClientStopped";
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Reset profiles", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v5 = *((void *)this + 46);
    if (v5)
    {
      uint64_t v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I handleQmiClientStop()", (uint8_t *)&v9, 2u);
      }
      *(unsigned char *)(v5 + 104) = 0;
      LODWORD(v9) = *(_DWORD *)(v5 + 48);
      BYTE4(v9) = 0;
      ctu::rest::event_t<rest::mav16_data_profile_creation_ready,std::pair<subscriber::SimSlot,BOOL>>::send(v5 + 56, (int *)&v9);
      long long v9 = 0u;
      long long v10 = 0u;
      uint64_t v7 = *(std::__shared_weak_count **)(v5 + 96);
      *(void *)(v5 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
      *(void *)(v5 + 96) = 0;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      qmi::Client::~Client((qmi::Client *)&v9);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I null fWDSClient in aggreator client stop", (uint8_t *)&v9, 2u);
    }
  }
}

void non-virtual thunk to'Mav16QMIDataContextIPAggregator::qmiClientStopped(Mav16QMIDataContextIPAggregator *this)
{
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator17delete3gppProfileEv_block_invoke(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = 0;
  a2[1] = *(unsigned char *)(*(void *)(v2 + 352) + 2);
  return result;
}

void ___ZN31Mav16QMIDataContextIPAggregator17delete3gppProfileEv_block_invoke_18(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  uint64_t v5 = v3[7];
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    int v7 = *(unsigned __int8 *)(v3[44] + 2);
    uint64_t v8 = qmi::asString();
    int v9 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v7;
    LOWORD(v30) = 2080;
    *(void *)((char *)&v30 + 2) = v8;
    WORD5(v30) = 1024;
    HIDWORD(v30) = v9;
    long long v10 = "#I Failed to delete 3gpp profile %d. Error: %s (0x%x)";
    uint64_t v11 = v5;
    uint32_t v12 = 24;
  }
  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    int v13 = *(unsigned __int8 *)(v3[44] + 2);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v13;
    long long v10 = "#I Delete 3gpp profile %d succeeded";
    uint64_t v11 = v5;
    uint32_t v12 = 8;
  }
  _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
LABEL_7:
  if (!v3[42])
  {
    uint64_t v18 = v3[7];
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v19 = "#I null fWDSClient after delete 3gpp profile";
    goto LABEL_24;
  }
  if (capabilities::ct::supportsCapabilityC2KDevice((capabilities::ct *)v6))
  {
    if (v3[42])
    {
      memset(v28, 0, sizeof(v28));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 0x40000000;
      void v27[2] = ___ZN31Mav16QMIDataContextIPAggregator18delete3gpp2ProfileEv_block_invoke;
      v27[3] = &__block_descriptor_tmp_20_7;
      void v27[4] = v3;
      xpc_object_t v14 = qmi::MutableMessageBase::getTLV<wds::tlv::ProfileIdentifer>((uint64_t)v28);
      ___ZN31Mav16QMIDataContextIPAggregator18delete3gpp2ProfileEv_block_invoke((uint64_t)v27, v14);
      uint64_t v15 = v3[7];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(unsigned __int8 *)(v3[44] + 4);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I delete 3gpp2 profile %d", buf, 8u);
      }
      void v22[5] = v3 + 40;
      uint64_t v23 = QMIServiceMsg::create();
      int v24 = 25000;
      uint64_t v25 = 0;
      long long aBlock = 0;
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 0x40000000;
      _OWORD v22[2] = ___ZN31Mav16QMIDataContextIPAggregator18delete3gpp2ProfileEv_block_invoke_21;
      v22[3] = &__block_descriptor_tmp_22_8;
      void v22[4] = v3;
      *(void *)std::string buf = MEMORY[0x263EF8330];
      *(void *)&long long v30 = 0x40000000;
      *((void *)&v30 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds13DeleteProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      uint64_t v31 = &unk_26460EEE8;
      BOOL v32 = v22;
      uint64_t v17 = _Block_copy(buf);
      long long aBlock = v17;
      if (v23)
      {
        qmi::Client::send();
        uint64_t v17 = aBlock;
      }
      if (v17) {
        _Block_release(v17);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
      return;
    }
    uint64_t v18 = v3[7];
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v19 = "#I null fWDSClient in delete3gpp2Profile";
LABEL_24:
    _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 2u);
    return;
  }
  uint64_t v20 = v3[7];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I 3GPP2 profile not supported. ReleaseQmiClient: Reset profiles", buf, 2u);
  }
  uint64_t v21 = v3[44];
  *(_WORD *)uint64_t v21 = 0;
  *(_DWORD *)(v21 + 2) = -1;
  qmi::Client::release((qmi::Client *)(v3 + 40));
}

void sub_222486B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator18delete3gpp2ProfileEv_block_invoke(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = 1;
  a2[1] = *(unsigned char *)(*(void *)(v2 + 352) + 4);
  return result;
}

void ___ZN31Mav16QMIDataContextIPAggregator18delete3gpp2ProfileEv_block_invoke_21(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  uint64_t v5 = v3[7];
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    int v7 = *(unsigned __int8 *)(v3[44] + 4);
    uint64_t v8 = qmi::asString();
    int v9 = *(_DWORD *)(a2 + 4);
    int v18 = 67109634;
    int v19 = v7;
    __int16 v20 = 2080;
    uint64_t v21 = v8;
    __int16 v22 = 1024;
    int v23 = v9;
    uint64_t v10 = "#I Failed to delete 3gpp2 profile %d. Error: %s (0x%x)";
    uint64_t v11 = v5;
    uint32_t v12 = 24;
  }
  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    int v13 = *(unsigned __int8 *)(v3[44] + 4);
    int v18 = 67109120;
    int v19 = v13;
    uint64_t v10 = "#I Delete 3gpp2 profile %d succeeded";
    uint64_t v11 = v5;
    uint32_t v12 = 8;
  }
  _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v18, v12);
LABEL_7:
  uint64_t v14 = v3[42];
  uint64_t v15 = v3[7];
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      LOWORD(v18) = 0;
      _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I releaseQmiClient: Reset profiles", (uint8_t *)&v18, 2u);
    }
    uint64_t v17 = v3[44];
    *(_WORD *)uint64_t v17 = 0;
    *(_DWORD *)(v17 + 2) = -1;
    qmi::Client::release((qmi::Client *)(v3 + 40));
  }
  else if (v16)
  {
    LOWORD(v18) = 0;
    _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I null fWDSClient after delete 3gpp2 profile", (uint8_t *)&v18, 2u);
  }
}

void Mav16QMIDataContextIPAggregator::releaseQmiClient(Mav16QMIDataContextIPAggregator *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*((void *)this + 42))
  {
    uint64_t v2 = (unsigned __int8 *)*((void *)this + 44);
    if (v2[3] != 254 && v2[2] == 255 || v2[5] != 254 && v2[4] == 255)
    {
      qmi::Client::release((Mav16QMIDataContextIPAggregator *)((char *)this + 320));
      uint64_t v11 = *((void *)this + 7);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I No valid profile. fWDSClient deleted", buf, 2u);
      }
    }
    else
    {
      uint64_t v3 = *((void *)this + 7);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
        && (*(_WORD *)std::string buf = 0,
            _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I delete created Profile upon fWDSClient release", buf, 2u), !*((void *)this + 42)))
      {
        uint32_t v12 = *((void *)this + 7);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I null fWDSClient in delete3gppProfile", buf, 2u);
        }
      }
      else
      {
        memset(v19, 0, sizeof(v19));
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
        v18[0] = MEMORY[0x263EF8330];
        v18[1] = 0x40000000;
        void v18[2] = ___ZN31Mav16QMIDataContextIPAggregator17delete3gppProfileEv_block_invoke;
        v18[3] = &__block_descriptor_tmp_17_10;
        void v18[4] = this;
        int v4 = qmi::MutableMessageBase::getTLV<wds::tlv::ProfileIdentifer>((uint64_t)v19);
        ___ZN31Mav16QMIDataContextIPAggregator17delete3gppProfileEv_block_invoke((uint64_t)v18, v4);
        uint64_t v5 = *((void *)this + 7);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = *(unsigned __int8 *)(*((void *)this + 44) + 2);
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I delete 3gpp profile %d", buf, 8u);
        }
        void v13[5] = (char *)this + 320;
        uint64_t v14 = QMIServiceMsg::create();
        int v15 = 25000;
        uint64_t v16 = 0;
        long long aBlock = 0;
        v13[0] = MEMORY[0x263EF8330];
        v13[1] = 0x40000000;
        void v13[2] = ___ZN31Mav16QMIDataContextIPAggregator17delete3gppProfileEv_block_invoke_18;
        v13[3] = &__block_descriptor_tmp_19_6;
        v13[4] = this;
        *(void *)std::string buf = MEMORY[0x263EF8330];
        uint64_t v21 = 0x40000000;
        __int16 v22 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds13DeleteProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        int v23 = &unk_26460EEE8;
        uint64_t v24 = v13;
        int v7 = _Block_copy(buf);
        long long aBlock = v7;
        if (v14)
        {
          qmi::Client::send();
          int v7 = aBlock;
        }
        if (v7) {
          _Block_release(v7);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 11);
      if (v8)
      {
        uint64_t v8 = std::__shared_weak_count::lock(v8);
        int v9 = v8;
        if (v8) {
          uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
        }
      }
      else
      {
        int v9 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, void))v8->__vftable[10].__get_deleter)(v8, *((unsigned int *)this + 2), 0);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    QMIDataContextIPAggregator::resetfActivationGuard(this);
  }
  else
  {
    uint64_t v10 = *((void *)this + 7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I null fWDSClient in aggregator releaseQmiClient", buf, 2u);
    }
  }
}

void sub_2224870C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Mav16QMIDataContextIPAggregator::releaseQmiClient(Mav16QMIDataContextIPAggregator *this)
{
}

void Mav16QMIDataContextIPAggregator::handleBasebandRefreshComplete(Mav16QMIDataContextIPAggregator *this)
{
  uint64_t v1 = *((void *)this + 44);
  if (v1)
  {
    *(_WORD *)uint64_t v1 = 0;
    *(_DWORD *)(v1 + 2) = -1;
    uint64_t v2 = *((void *)this + 7);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Reset profiles", v3, 2u);
    }
  }
}

uint64_t Mav16QMIDataContextIPAggregator::canCreateProfile(Mav16QMIDataContextIPAggregator *this)
{
  return *((unsigned __int8 *)this + 313);
}

uint64_t non-virtual thunk to'Mav16QMIDataContextIPAggregator::canCreateProfile(Mav16QMIDataContextIPAggregator *this)
{
  return *((unsigned __int8 *)this + 25);
}

uint64_t Mav16QMIDataContextIPAggregator::getProfileInfo@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 360);
  *a2 = *(void *)(this + 352);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t non-virtual thunk to'Mav16QMIDataContextIPAggregator::getProfileInfo@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 72);
  *a2 = *(void *)(this + 64);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Mav16QMIDataContextIPAggregator::createProfileIfNeeded(uint64_t a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 313))
  {
    int v6 = *(NSObject **)(a1 + 56);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return 2;
    }
    *(_DWORD *)std::string buf = 136315138;
    int v23 = "createProfileIfNeeded";
    int v7 = "#I %s: Baseband is not ready to support profile creation";
LABEL_9:
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
    return 2;
  }
  int v4 = *(unsigned __int8 **)(a1 + 352);
  if ((v4[3] == 254 || v4[2] != 255) && (v4[5] == 254 || v4[4] != 255)) {
    return 0;
  }
  if (*v4) {
    return 1;
  }
  uint64_t v8 = *(NSObject **)(a1 + 56);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    QMIProfileInfo::asString((QMIProfileInfo *)v4, __p);
    if (v21 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    int v23 = "createProfileIfNeeded";
    __int16 v24 = 2080;
    uint64_t v25 = a2;
    __int16 v26 = 2080;
    dispatch_object_t v27 = v10;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: %s Profiles not assigned. %s", buf, 0x20u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!*(void *)(a1 + 336))
  {
    int v6 = *(NSObject **)(a1 + 56);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return 2;
    }
    *(_DWORD *)std::string buf = 136315138;
    int v23 = "createProfileIfNeeded";
    int v7 = "#I %s: Invalid WDS client. Cannot create profiles";
    goto LABEL_9;
  }
  uint64_t v11 = (capabilities::ct *)capabilities::ct::supportsCapabilityC2KDevice((capabilities::ct *)v9);
  uint64_t v12 = *(unsigned char **)(a1 + 352);
  if ((v11 & 1) == 0) {
    void v12[5] = -2;
  }
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 0x40000000;
  _OWORD v19[2] = ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_24_5;
  _OWORD v19[4] = a1;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 0x40000000;
  uint64_t v15 = ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_2;
  uint64_t v16 = &unk_26460ED90;
  uint64_t v17 = v19;
  uint64_t v18 = a1;
  if (!*v12) {
    *uint64_t v12 = 1;
  }
  if (capabilities::ct::supportsDataQMIExtensions(v11))
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 96) + 256))(*(void *)(a1 + 96), 255);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 112) + 256))(*(void *)(a1 + 112), 255);
  }
  uint64_t v13 = (capabilities::ct *)((uint64_t (*)(void *, void))v15)(v14, 0);
  if (capabilities::ct::supportsCapabilityC2KDevice(v13)) {
    v15((uint64_t)v14, 1);
  }
  return 1;
}

void ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  int v4 = (const void *)v3[12];
  if (v4)
  {
    if (v5)
    {
      int v6 = (std::__shared_weak_count *)v3[13];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v5 + 16))(v5, a2);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  int v7 = (const void *)v3[14];
  if (v7)
  {
    if (v8)
    {
      BOOL v9 = (std::__shared_weak_count *)v3[15];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v8 + 16))(v8, a2);
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
}

void sub_222487698(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  long long v24 = 0u;
  long long v25 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v24);
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 0x40000000;
  _OWORD v22[2] = ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_3;
  v22[3] = &__block_descriptor_tmp_26_2;
  int v23 = a2;
  uint64_t v5 = (const void **)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1) != (void)v25)
  {
    while (*((unsigned char *)*v5 + 8) != 1)
    {
      if (++v5 == (const void **)v25) {
        goto LABEL_8;
      }
    }
  }
  if (v5 == (const void **)v25) {
LABEL_8:
  }
    operator new();
  if (!v6) {
    goto LABEL_37;
  }
  ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_3((uint64_t)v22, v6 + 9);
  int v7 = (const void **)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1) != (void)v25)
  {
    while (*((unsigned __int8 *)*v7 + 8) != 143)
    {
      if (++v7 == (const void **)v25) {
        goto LABEL_16;
      }
    }
  }
  if (v7 == (const void **)v25) {
LABEL_16:
  }
    operator new();
  if (!v8) {
    goto LABEL_37;
  }
  void v8[9] = 0;
  BOOL v9 = *(std::__shared_weak_count **)(v4 + 88);
  if (v9)
  {
    BOOL v9 = std::__shared_weak_count::lock(v9);
    uint64_t v10 = v9;
    if (v9) {
      BOOL v9 = *(std::__shared_weak_count **)(v4 + 80);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v11 = ((uint64_t (*)(std::__shared_weak_count *))v9->__vftable[10].__on_zero_shared)(v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v11)
  {
    uint64_t v12 = (const void **)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1) != (void)v25)
    {
      while (*((unsigned __int8 *)*v12 + 8) != 221)
      {
        if (++v12 == (const void **)v25) {
          goto LABEL_31;
        }
      }
    }
    if (v12 == (const void **)v25) {
LABEL_31:
    }
      operator new();
    if (v13)
    {
      void v13[2] = 1;
      goto LABEL_32;
    }
LABEL_37:
    __cxa_bad_cast();
  }
LABEL_32:
  uint64_t v17 = v4 + 320;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  char v21 = 0;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  void v15[2] = ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_6;
  void v15[3] = &unk_26460ED68;
  int v16 = a2;
  void v15[4] = *(void *)(a1 + 32);
  void v15[5] = v4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds13CreateProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460EF10;
  aBlock[4] = v15;
  uint64_t v14 = _Block_copy(aBlock);
  char v21 = v14;
  if (v18)
  {
    qmi::Client::send();
    uint64_t v14 = v21;
  }
  if (v14) {
    _Block_release(v14);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v24);
}

void sub_222487D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_6(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  if (*((_DWORD *)this + 1))
  {
    uint64_t v5 = *(NSObject **)(v4 + 56);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = wds::asString(*(_DWORD *)(a1 + 48));
      int v7 = *((_DWORD *)this + 1);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "createProfileIfNeeded_block_invoke_6";
      __int16 v21 = 2080;
      __int16 v22 = v6;
      __int16 v23 = 1024;
      int v24 = v7;
      __int16 v25 = 2080;
      uint64_t v26 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Failed to create profile %s. Error: 0x%x (%s). Profiles are reset", buf, 0x26u);
    }
    uint64_t v8 = *(void *)(v4 + 352);
    *(_WORD *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 2) = -1;
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 0x40000000;
    uint64_t v14 = ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_35;
    uint64_t v15 = &unk_26460ED40;
    int v18 = *(_DWORD *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = v4;
    uint64_t result = qmi::MessageBase::findTlvValue(this);
    if (result)
    {
      uint64_t v11 = result;
      int v12 = v10;
      *(void *)std::string buf = result;
      uint64_t v19 = tlv::parseV<wds::tlv::ProfileId>((unint64_t *)buf, v10);
      if (*(void *)buf) {
        return ((uint64_t (*)(void *, uint64_t *))v14)(v13, &v19);
      }
      else {
        return ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 1, v11, v12);
      }
    }
  }
  return result;
}

void ___ZN31Mav16QMIDataContextIPAggregator21createProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_35(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(NSObject **)(v4 + 56);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    int v7 = wds::asString(*(_DWORD *)(a1 + 48));
    int v8 = *(unsigned __int8 *)(a2 + 4);
    int v17 = 136315650;
    int v18 = "createProfileIfNeeded_block_invoke";
    __int16 v19 = 2080;
    uint64_t v20 = v7;
    __int16 v21 = 1024;
    int v22 = v8;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Profile %s is assigned profileID: %d", (uint8_t *)&v17, 0x1Cu);
  }
  int v9 = *(_DWORD *)(a1 + 48);
  if (v9 == 1)
  {
    *(unsigned char *)(*(void *)(v4 + 352) + 4) = *(unsigned char *)(a2 + 4);
  }
  else if (v9)
  {
    int v10 = *(NSObject **)(v4 + 56);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = wds::asString(v9);
      int v12 = *(unsigned __int8 *)(a2 + 4);
      int v17 = 136315650;
      int v18 = "createProfileIfNeeded_block_invoke";
      __int16 v19 = 2080;
      uint64_t v20 = v11;
      __int16 v21 = 1024;
      int v22 = v12;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Unknown profile %s is assigned profileID: %d", (uint8_t *)&v17, 0x1Cu);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(v4 + 352) + 2) = *(unsigned char *)(a2 + 4);
    if (capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)v6))
    {
      (*(void (**)(void, void))(**(void **)(v4 + 96) + 256))(*(void *)(v4 + 96), *(unsigned __int8 *)(a2 + 4));
      (*(void (**)(void))(**(void **)(v4 + 112) + 256))();
    }
  }
  uint64_t v13 = *(unsigned char **)(v4 + 352);
  int v14 = v13[3];
  if (v14 != 254 && v13[2] == 255
    || (int v15 = v13[5], v15 != 254) && v13[4] == 255)
  {
    uint64_t v16 = *(NSObject **)(v4 + 56);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      int v18 = "createProfileIfNeeded_block_invoke";
      _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: Still waiting for more profile creation result", (uint8_t *)&v17, 0xCu);
    }
  }
  else if ((v14 == 254 || v13[2] != 255) && (v15 == 254 || v13[4] != 255))
  {
    if (*v13) {
      *uint64_t v13 = 0;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t non-virtual thunk to'Mav16QMIDataContextIPAggregator::createProfileIfNeeded(uint64_t a1, uint64_t *a2)
{
  return Mav16QMIDataContextIPAggregator::createProfileIfNeeded(a1 - 288, a2);
}

uint64_t Mav16QMIDataContextIPAggregator::isReconfigurationNeeded(Mav16QMIDataContextIPAggregator *this)
{
  int DataContextState = QMIDataContextIPAggregator::getDataContextState((uint64_t)this, 0);
  LODWORD(result) = (*(uint64_t (**)(Mav16QMIDataContextIPAggregator *))(*(void *)this + 304))(this);
  if (DataContextState) {
    return result;
  }
  else {
    return 1;
  }
}

uint64_t non-virtual thunk to'Mav16QMIDataContextIPAggregator::isReconfigurationNeeded(Mav16QMIDataContextIPAggregator *this)
{
  uint64_t v1 = (char *)this - 288;
  int DataContextState = QMIDataContextIPAggregator::getDataContextState((uint64_t)this - 288, 0);
  LODWORD(result) = (*(uint64_t (**)(char *))(*(void *)v1 + 304))(v1);
  if (DataContextState) {
    return result;
  }
  else {
    return 1;
  }
}

uint64_t Mav16QMIDataContextIPAggregator::configureProfileIfNeeded(void *a1, uint64_t *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned char *)a1[44];
  if (v3[1]) {
    return 1;
  }
  if (a3)
  {
    int v8 = a1[7];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "configureProfileIfNeeded";
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: No IP family active. Reset profiles", buf, 0xCu);
      uint64_t v3 = (unsigned char *)a1[44];
    }
    void v3[3] = -1;
    void v3[5] = -1;
    goto LABEL_14;
  }
  int v9 = v3[3];
  if (v9 == 254)
  {
    int v10 = v3[5];
    if (v10 != 254) {
      goto LABEL_12;
    }
  }
  else if (v9 == 1)
  {
    int v10 = v3[5];
LABEL_12:
    uint64_t v4 = 0;
    if (v10 == 1 || v10 == 254) {
      return v4;
    }
  }
LABEL_14:
  uint64_t v11 = a1[7];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v12 = a2;
    }
    else {
      int v12 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "configureProfileIfNeeded";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v12;
    _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: %s Profiles not yet configured", buf, 0x16u);
  }
  if (a1[42])
  {
    int v14 = (unsigned char *)a1[44];
    uint64_t v13 = (std::__shared_weak_count *)a1[45];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v15 = (std::__shared_weak_count *)a1[11];
    if (v15)
    {
      int v15 = std::__shared_weak_count::lock(v15);
      uint64_t v16 = v15;
      if (v15) {
        int v15 = (std::__shared_weak_count *)a1[10];
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    ((void (*)(unsigned char *__return_ptr))v15->__on_zero_shared_weak)(buf);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    int v18 = (std::__shared_weak_count *)a1[11];
    if (v18)
    {
      int v18 = std::__shared_weak_count::lock(v18);
      __int16 v19 = v18;
      if (v18) {
        int v18 = (std::__shared_weak_count *)a1[10];
      }
    }
    else
    {
      __int16 v19 = 0;
    }
    int v20 = ((uint64_t (*)(std::__shared_weak_count *))v18->__get_deleter)(v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 1174405120;
    int v22 = ___ZN31Mav16QMIDataContextIPAggregator24configureProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
    uint64_t v23 = &__block_descriptor_tmp_51_11;
    int v24 = a1;
    uint64_t v25 = *(void *)buf;
    uint64_t v26 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    int v29 = v20;
    uint64_t v27 = v14;
    uint64_t v28 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v22((uint64_t)v21, 0, v14[2]) && v22((uint64_t)v21, 1, v14[4]))
    {
      uint64_t v4 = 1;
      if (!v14[1]) {
        v14[1] = 1;
      }
    }
    else
    {
      uint64_t v4 = 2;
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    int v17 = a1[7];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "configureProfileIfNeeded";
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Invalid WDS client. Cannot configure profiles", buf, 0xCu);
    }
    return 2;
  }
  return v4;
}

void sub_222488690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator24configureProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1, int a2, char a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  BOOL v6 = *(void **)(a1 + 32);
  memset(v49, 0, sizeof(v49));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v49);
  v46[0] = MEMORY[0x263EF8330];
  v46[1] = 0x40000000;
  v46[2] = ___ZN31Mav16QMIDataContextIPAggregator24configureProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke_2;
  v46[3] = &__block_descriptor_tmp_42_4;
  int v47 = a2;
  char v48 = a3;
  int v7 = qmi::MutableMessageBase::getTLV<wds::tlv::ProfileId>((uint64_t)v49, 1);
  int v8 = (capabilities::ct *)___ZN31Mav16QMIDataContextIPAggregator24configureProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke_2((uint64_t)v46, (uint64_t)v7);
  if (*(void *)(a1 + 40) && capabilities::ct::supportsDataQMIExtensions(v8))
  {
    uint64_t v9 = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 40) + 216))(*(void *)(a1 + 40), 0, 0, 0);
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 40) + 216))(*(void *)(a1 + 40), 1, 0, 0);
    uint64_t v11 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>((uint64_t)v49, 221);
    *(void *)uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(*v6 + 704))(v6, v10 | v9);
  }
  int v12 = (std::__shared_weak_count *)v6[11];
  if (v12)
  {
    int v12 = std::__shared_weak_count::lock(v12);
    uint64_t v13 = v12;
    if (v12) {
      int v12 = (std::__shared_weak_count *)v6[10];
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = ((uint64_t (*)(std::__shared_weak_count *))v12->__vftable[6].__on_zero_shared)(v12);
  int v15 = v14;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  switch(v15)
  {
    case 0:
      uint64_t v14 = *(void *)(a1 + 40);
      if (!v14) {
        goto LABEL_17;
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)v14 + 88))(v14, 0);
      if (v14) {
        goto LABEL_17;
      }
      uint64_t v16 = v6[7];
      uint64_t v17 = 0;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = "configureProfileIfNeeded_block_invoke";
        int v18 = "#I %s: Wrong wireless technology, can't activate";
        goto LABEL_43;
      }
      goto LABEL_64;
    case 1:
      if (a2) {
        goto LABEL_25;
      }
      int v21 = 1;
      goto LABEL_39;
    case 2:
      if (a2 == 1)
      {
        if (capabilities::ct::supportsCapabilityeHRPDDevice((capabilities::ct *)v14)) {
LABEL_35:
        }
          Mav16QMIDataContextIPAggregator::set3GPP2Parameters(v6, (uint64_t)v49, *(_DWORD *)(a1 + 72));
        else {
          *qmi::MutableMessageBase::getTLV<wds::tlv::Profile3GPP2_AuthPref>((uint64_t)v49) = 2;
        }
      }
      else
      {
        if (a2) {
          goto LABEL_29;
        }
LABEL_40:
        Mav16QMIDataContextIPAggregator::set3GPPParameters((unint64_t)v6, (uint64_t)v49, *(_DWORD *)(a1 + 72), 0, 0);
      }
      goto LABEL_47;
    case 3:
      if (!a2) {
        goto LABEL_40;
      }
      if (a2 == 1) {
        goto LABEL_35;
      }
      goto LABEL_29;
    case 4:
LABEL_17:
      if (!a2) {
        goto LABEL_23;
      }
      if (a2 != 1) {
        goto LABEL_29;
      }
      if (capabilities::ct::supportsCapabilityeHRPDDevice((capabilities::ct *)v14))
      {
        std::string __p = 0;
        __int16 v19 = (std::__shared_weak_count *)v6[11];
        if (v19)
        {
          __int16 v19 = std::__shared_weak_count::lock(v19);
          int v20 = v19;
          if (v19) {
            __int16 v19 = (std::__shared_weak_count *)v6[10];
          }
        }
        else
        {
          int v20 = 0;
        }
        ((void (*)(void **__return_ptr))v19->__vftable[9].~__shared_weak_count_0)(&__p);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        BOOL v32 = (BOOL *)__p;
        buf[0] = 0;
        if (__p)
        {
          CFTypeID v33 = CFGetTypeID(__p);
          if (v33 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)buf, v32, v34);
          }
          if (buf[0])
          {
            uint64_t v35 = v6[7];
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = "configureProfileIfNeeded_block_invoke";
              _os_log_impl(&dword_22231A000, v35, OS_LOG_TYPE_DEFAULT, "#I %s: The device supports eHRPD Capability and  carrier too filling 3GPP2 parameters", buf, 0xCu);
            }
            Mav16QMIDataContextIPAggregator::set3GPP2Parameters(v6, (uint64_t)v49, *(_DWORD *)(a1 + 72));
            ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&__p);
            goto LABEL_47;
          }
        }
        long long v36 = v6[7];
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = "configureProfileIfNeeded_block_invoke";
          _os_log_impl(&dword_22231A000, v36, OS_LOG_TYPE_DEFAULT, "#I %s: The device supports eHRPD Capability but carrier doesn't. No need to fill 3GPP2 parameters", buf, 0xCu);
        }
        ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&__p);
      }
      else
      {
        uint64_t v23 = v6[7];
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = "configureProfileIfNeeded_block_invoke";
          _os_log_impl(&dword_22231A000, v23, OS_LOG_TYPE_DEFAULT, "#I %s: The device doesn't support eHRPD Capability No need to fill 3GPP2 parameters", buf, 0xCu);
        }
      }
      goto LABEL_26;
    case 5:
    case 6:
      if (a2)
      {
LABEL_25:
        if (a2 == 1)
        {
LABEL_26:
          int v22 = v6[7];
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = "configureProfileIfNeeded_block_invoke";
            _os_log_impl(&dword_22231A000, v22, OS_LOG_TYPE_DEFAULT, "#I %s: 3GPP2 profile activation not needed", buf, 0xCu);
          }
          *(unsigned char *)(*(void *)(a1 + 56) + 5) = -2;
        }
LABEL_29:
        Mav16QMIDataContextIPAggregator::handleProfileConfiguredResult((uint64_t)v6, a2, 0, 0);
      }
      else
      {
LABEL_23:
        int v21 = 0;
LABEL_39:
        Mav16QMIDataContextIPAggregator::set3GPPParameters((unint64_t)v6, (uint64_t)v49, *(_DWORD *)(a1 + 72), v21, 1);
LABEL_47:
        std::string __p = v6 + 40;
        uint64_t v41 = QMIServiceMsg::create();
        uint64_t v44 = 0;
        long long aBlock = 0;
        int v42 = 210000;
        v37[0] = MEMORY[0x263EF8330];
        v37[1] = 0x40000000;
        v37[2] = ___ZN31Mav16QMIDataContextIPAggregator24configureProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke_48;
        v37[3] = &__block_descriptor_tmp_49_6;
        void v37[4] = v6;
        int v38 = a2;
        char v39 = a3;
        *(void *)std::string buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds29ResetAndModifyProfileSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        uint64_t v51 = &unk_26460EF38;
        char v52 = v37;
        int v24 = _Block_copy(buf);
        long long aBlock = v24;
        if (v41)
        {
          qmi::Client::send();
          int v24 = aBlock;
        }
        if (v24) {
          _Block_release(v24);
        }
        uint64_t v25 = v6[7];
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = (std::__shared_weak_count *)v6[11];
          if (v26)
          {
            uint64_t v26 = std::__shared_weak_count::lock(v26);
            uint64_t v27 = v26;
            if (v26) {
              uint64_t v26 = (std::__shared_weak_count *)v6[10];
            }
          }
          else
          {
            uint64_t v27 = 0;
          }
          ((void (*)(void **__return_ptr))v26->__vftable[7].__on_zero_shared_weak)(&__p);
          if (v43 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          uint64_t v29 = asString();
          uint64_t v30 = asStringBool();
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = p_p;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v29;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v51 = (void *)v30;
          _os_log_impl(&dword_22231A000, v25, OS_LOG_TYPE_DEFAULT, "#I configureProfileIfNeeded: apn=%{public}s: sent ResetAndModifyProfileSettings tech=%s eHRPD=%s", buf, 0x20u);
          if (v43 < 0) {
            operator delete(__p);
          }
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
      }
      uint64_t v17 = 1;
LABEL_64:
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v49);
      return v17;
    default:
      uint64_t v16 = v6[7];
      uint64_t v17 = 0;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = "configureProfileIfNeeded_block_invoke";
        int v18 = "#I %s: Wrong wireless technology";
LABEL_43:
        _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
        uint64_t v17 = 0;
      }
      goto LABEL_64;
  }
}

void sub_222488EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a28);
  _Unwind_Resume(a1);
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator24configureProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke_2(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(result + 32);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(result + 36);
  return result;
}

void Mav16QMIDataContextIPAggregator::set3GPPParameters(unint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v170 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 88);
  if (v10)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v10);
    uint64_t v11 = v10;
    if (v10) {
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v164 = 0;
  long long v165 = 0;
  ((void (*)(uint64_t *__return_ptr))v10->__on_zero_shared_weak)(&v164);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!v164) {
    goto LABEL_292;
  }
  memset(&v163, 0, sizeof(v163));
  std::string::basic_string[abi:ne180100]<0>(&v163, (char *)&unk_222543CCE);
  int v12 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, void))(*(void *)v164 + 88))(v164, 0);
  if (v12)
  {
    if (capabilities::ct::supportsDataQMIExtensions(v12))
    {
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      {
        v163.__r_.__value_.__l.__size_ = 3;
        uint64_t v13 = (std::string *)v163.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v163.__r_.__value_.__s + 23) = 3;
        uint64_t v13 = &v163;
      }
      LODWORD(v13->__r_.__value_.__l.__data_) = 7565171;
    }
  }
  else
  {
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 88);
    if (v14)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v14);
      int v15 = v14;
      if (v14) {
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 80);
      }
    }
    else
    {
      int v15 = 0;
    }
    ((void (*)(std::string *__return_ptr))v14->__vftable[7].__on_zero_shared_weak)(&buf);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    std::string v163 = buf;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)v164 + 104))(v164, 0)
      && (*(unsigned int (**)(uint64_t))(*(void *)v164 + 80))(v164))
    {
      uint64_t v16 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
        std::string::size_type v18 = v163.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr))(*(void *)v164 + 288))(&v162);
        __int16 v19 = &v163;
        if (v17 < 0) {
          __int16 v19 = (std::string *)v18;
        }
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v20 = &v162;
        }
        else {
          int v20 = (std::string *)v162.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v19;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        long long v167 = v20;
        _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: Modifying APN name %s to alt-name %s in 3GPP parameters", (uint8_t *)&buf, 0x20u);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v164 + 288))(&buf);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v163.__r_.__value_.__l.__data_);
      }
      std::string v163 = buf;
    }
  }
  std::string::size_type size = HIBYTE(v163.__r_.__value_.__r.__words[2]);
  if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v163.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    v158[0] = MEMORY[0x263EF8330];
    v158[1] = 1174405120;
    v159 = ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke;
    long long v160 = &__block_descriptor_tmp_55_12;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v163;
    }
    int v22 = *(const void ***)(a2 + 8);
    uint64_t v23 = *(const void ***)(a2 + 16);
    if (v22 != v23)
    {
      while (*((unsigned char *)*v22 + 8) != 20)
      {
        if (++v22 == v23) {
          goto LABEL_48;
        }
      }
    }
    if (v22 == v23) {
LABEL_48:
    }
      operator new();
    if (!v24) {
      __cxa_bad_cast();
    }
    v159((uint64_t)v158, (std::string *)(v24 + 16));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v156[0] = MEMORY[0x263EF8330];
  v156[1] = 0x40000000;
  v156[2] = ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_56;
  v156[3] = &__block_descriptor_tmp_60_6;
  v156[4] = a1;
  int v157 = a3;
  uint64_t v25 = *(const void ***)(a2 + 8);
  uint64_t v26 = *(const void ***)(a2 + 16);
  if (v25 != v26)
  {
    while (*((unsigned char *)*v25 + 8) != 17)
    {
      if (++v25 == v26) {
        goto LABEL_58;
      }
    }
  }
  if (v25 == v26) {
LABEL_58:
  }
    operator new();
  if (!v27) {
    __cxa_bad_cast();
  }
  ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_56((uint64_t)v156, v27 + 3);
  memset(&v162, 0, sizeof(v162));
  (*(void (**)(std::string *__return_ptr))(*(void *)v164 + 264))(&v162);
  memset(&__s, 0, sizeof(__s));
  (*(void (**)(std::string *__return_ptr))(*(void *)v164 + 272))(&__s);
  std::string::size_type v28 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v28 = v162.__r_.__value_.__l.__size_;
  }
  if (v28)
  {
    v151[0] = MEMORY[0x263EF8330];
    v151[1] = 1174405120;
    v152 = ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_61;
    v153 = &__block_descriptor_tmp_64_6;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v154, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
    }
    else {
      std::string v154 = v162;
    }
    uint64_t v29 = *(const void ***)(a2 + 8);
    uint64_t v30 = *(const void ***)(a2 + 16);
    if (v29 != v30)
    {
      while (*((unsigned char *)*v29 + 8) != 27)
      {
        if (++v29 == v30) {
          goto LABEL_72;
        }
      }
    }
    if (v29 == v30) {
LABEL_72:
    }
      operator new();
    if (!v31) {
      __cxa_bad_cast();
    }
    v152((uint64_t)v151, (std::string *)(v31 + 16));
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v154.__r_.__value_.__l.__data_);
    }
  }
  std::string::size_type v32 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v32 = __s.__r_.__value_.__l.__size_;
  }
  if (v32)
  {
    v147[0] = MEMORY[0x263EF8330];
    v147[1] = 1174405120;
    uint64_t v148 = ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_65;
    v149 = &__block_descriptor_tmp_68_5;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v150, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v150 = __s;
    }
    CFTypeID v33 = *(const void ***)(a2 + 8);
    CFBooleanRef v34 = *(const void ***)(a2 + 16);
    if (v33 != v34)
    {
      while (*((unsigned char *)*v33 + 8) != 28)
      {
        if (++v33 == v34) {
          goto LABEL_88;
        }
      }
    }
    if (v33 == v34) {
LABEL_88:
    }
      operator new();
    if (!v35) {
      __cxa_bad_cast();
    }
    v148((uint64_t)v147, (std::string *)(v35 + 16));
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
  }
  long long v36 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = asString();
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v37;
    _os_log_impl(&dword_22231A000, v36, OS_LOG_TYPE_DEFAULT, "#I %s: Auth Type requirement = %s", (uint8_t *)&buf, 0x16u);
  }
  if (a4 == 1) {
    goto LABEL_100;
  }
  std::string::size_type v38 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v38 = v162.__r_.__value_.__l.__size_;
  }
  if (v38) {
    goto LABEL_100;
  }
  std::string::size_type v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v39 = __s.__r_.__value_.__l.__size_;
  }
  if (v39)
  {
LABEL_100:
    v142[0] = MEMORY[0x263EF8330];
    v142[1] = 1174405120;
    long long v143 = ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_69;
    int v144 = &__block_descriptor_tmp_73_5;
    uint64_t v145 = v164;
    long long v146 = v165;
    if (v165) {
      atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = *(const void ***)(a2 + 8);
    uint64_t v41 = *(const void ***)(a2 + 16);
    if (v40 != v41)
    {
      while (*((unsigned char *)*v40 + 8) != 29)
      {
        if (++v40 == v41) {
          goto LABEL_109;
        }
      }
    }
    if (v40 == v41) {
LABEL_109:
    }
      operator new();
    if (!v42) {
      __cxa_bad_cast();
    }
    v143((uint64_t)v142, v42 + 9);
    if (v146) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v146);
    }
  }
  char v43 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    int v44 = (*(uint64_t (**)(uint64_t, void))(*(void *)v164 + 56))(v164, 0);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v44;
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = a5;
    _os_log_impl(&dword_22231A000, v43, OS_LOG_TYPE_DEFAULT, "#I %s: ims=%d, sigInd=%d", (uint8_t *)&buf, 0x18u);
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v164 + 56))(v164, 0))
  {
    long long v45 = *(const void ***)(a2 + 8);
    long long v46 = *(const void ***)(a2 + 16);
    if (v45 != v46)
    {
      while (*((unsigned char *)*v45 + 8) != 31)
      {
        if (++v45 == v46) {
          goto LABEL_122;
        }
      }
    }
    if (v45 == v46) {
LABEL_122:
    }
      operator new();
    if (!v47) {
      goto LABEL_297;
    }
    v47[9] = 1;
    if (a5)
    {
      *(void *)context = 0;
      char v48 = *(std::__shared_weak_count **)(a1 + 88);
      if (v48)
      {
        char v48 = std::__shared_weak_count::lock(v48);
        uint64_t v49 = v48;
        if (v48) {
          char v48 = *(std::__shared_weak_count **)(a1 + 80);
        }
      }
      else
      {
        uint64_t v49 = 0;
      }
      ((void (*)(unsigned char *__return_ptr))v48->__vftable[9].~__shared_weak_count_0)(context);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      uint64_t v50 = *(BOOL **)context;
      buf.__r_.__value_.__s.__data_[0] = 0;
      if (!*(void *)context) {
        goto LABEL_140;
      }
      CFTypeID v51 = CFGetTypeID(*(CFTypeRef *)context);
      if (v51 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)&buf, v50, v52);
      }
      if (buf.__r_.__value_.__s.__data_[0])
      {
        uint64_t v53 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
          _os_log_impl(&dword_22231A000, v53, OS_LOG_TYPE_DEFAULT, "#I %s: The carrier supports IMSSignalingIndication Capability", (uint8_t *)&buf, 0xCu);
        }
        unint64_t v54 = *(const void ***)(a2 + 8);
        uint64_t v55 = *(const void ***)(a2 + 16);
        if (v54 != v55)
        {
          while (*((unsigned char *)*v54 + 8) != 41)
          {
            if (++v54 == v55) {
              goto LABEL_145;
            }
          }
        }
        if (v54 == v55) {
LABEL_145:
        }
          operator new();
        if (!v57) {
          __cxa_bad_cast();
        }
        v57[12] = 3;
        *((_DWORD *)v57 + 12) = 1;
        v57[52] = 1;
      }
      else
      {
LABEL_140:
        unint64_t v56 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
          _os_log_impl(&dword_22231A000, v56, OS_LOG_TYPE_DEFAULT, "#I %s: The device supports IMSSignalingIndication Capability but carrier doesn't. No need to fill SigInd parameters", (uint8_t *)&buf, 0xCu);
        }
      }
      ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)context);
    }
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v164 + 88))(v164, 0))
  {
    uint64_t v58 = *(std::__shared_weak_count **)(a1 + 88);
    if (v58)
    {
      uint64_t v58 = std::__shared_weak_count::lock(v58);
      size_t v59 = v58;
      if (v58) {
        uint64_t v58 = *(std::__shared_weak_count **)(a1 + 80);
      }
    }
    else
    {
      size_t v59 = 0;
    }
    int v60 = ((uint64_t (*)(std::__shared_weak_count *))v58->__vftable[6].__on_zero_shared)(v58);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v60 != 2)
    {
      char v61 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
        _os_log_impl(&dword_22231A000, v61, OS_LOG_TYPE_DEFAULT, "#I %s: Applying SupportEm tlv to start network", (uint8_t *)&buf, 0xCu);
      }
      unint64_t v62 = *(const void ***)(a2 + 8);
      long long v63 = *(const void ***)(a2 + 16);
      if (v62 != v63)
      {
        while (*((unsigned char *)*v62 + 8) != 54)
        {
          if (++v62 == v63) {
            goto LABEL_164;
          }
        }
      }
      if (v62 == v63) {
LABEL_164:
      }
        operator new();
      if (v64)
      {
        v64[9] = 1;
        goto LABEL_165;
      }
LABEL_297:
      __cxa_bad_cast();
    }
  }
LABEL_165:
  long long v65 = (capabilities::ct *)(*(uint64_t (**)(uint64_t))(*(void *)v164 + 152))(v164);
  if (v65)
  {
    size_t v66 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
      _os_log_impl(&dword_22231A000, v66, OS_LOG_TYPE_DEFAULT, "#I %s: Applying PCO to SNI", (uint8_t *)&buf, 0xCu);
    }
    v137[0] = MEMORY[0x263EF8330];
    v137[1] = 1174405120;
    long long v138 = ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_92;
    long long v139 = &__block_descriptor_tmp_96_3;
    uint64_t v140 = v164;
    long long v141 = v165;
    if (v165) {
      atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v67 = *(const void ***)(a2 + 8);
    int v68 = *(const void ***)(a2 + 16);
    if (v67 != v68)
    {
      while (*((unsigned char *)*v67 + 8) != 55)
      {
        if (++v67 == v68) {
          goto LABEL_177;
        }
      }
    }
    if (v67 == v68) {
LABEL_177:
    }
      operator new();
    if (!v69) {
      __cxa_bad_cast();
    }
    v138((uint64_t)v137, v69 + 5);
    long long v65 = (capabilities::ct *)v141;
    if (v141) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v141);
    }
  }
  char v70 = (capabilities::ct *)capabilities::ct::supports5G(v65);
  if (!v70) {
    goto LABEL_276;
  }
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 64));
  unint64_t v72 = ServiceMap;
  std::string::size_type v73 = *(void *)(MEMORY[0x263F035C8] + 8);
  std::string::size_type v74 = v73;
  if ((v73 & 0x8000000000000000) != 0)
  {
    long long v75 = (unsigned __int8 *)(v73 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v76 = 5381;
    do
    {
      std::string::size_type v74 = v76;
      unsigned int v77 = *v75++;
      uint64_t v76 = (33 * v76) ^ v77;
    }
    while (v77);
  }
  std::mutex::lock(ServiceMap);
  buf.__r_.__value_.__r.__words[0] = v74;
  long long v78 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v72[1].__m_.__sig, (unint64_t *)&buf);
  if (v78)
  {
    uint64_t v80 = v78[3];
    long long v79 = (std::__shared_weak_count *)v78[4];
    if (v79)
    {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v72);
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      char v81 = 0;
      goto LABEL_189;
    }
  }
  else
  {
    uint64_t v80 = 0;
  }
  std::mutex::unlock(v72);
  long long v79 = 0;
  char v81 = 1;
LABEL_189:
  uint64_t v82 = *(unsigned int *)(a1 + 8);
  size_t v83 = operator new(0x10uLL);
  uint64_t v84 = *MEMORY[0x263F037C8];
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v83 + 2);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v83 + 2);
  void *v83 = v84;
  v83[1] = @"ContainerIds";
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, uint64_t, std::string *, void, void))(*(void *)v80 + 88))(&cf, v80, v82, 1, &buf, 0, 0);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((v81 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  long long v85 = 0;
  CFArrayRef v86 = (const __CFArray *)cf;
  if (cf) {
    long long v87 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    long long v87 = 0;
  }
  if (v87)
  {
    std::string::size_type v135 = 0;
    if (cf)
    {
      CFTypeID v88 = CFGetTypeID(cf);
      if (v88 == CFArrayGetTypeID())
      {
        memset(&buf, 0, sizeof(buf));
        *(void *)context = &buf;
        v171.length = CFArrayGetCount(v86);
        v171.location = 0;
        CFArrayApplyFunction(v86, v171, (CFArrayApplierFunction)ctu::cf::_Applier_InsertArrayDefault<unsigned short,std::back_insert_iterator<std::vector<unsigned short>>>, context);
        std::string::size_type v135 = buf.__r_.__value_.__l.__size_;
        long long v85 = (void *)buf.__r_.__value_.__r.__words[0];
      }
      else
      {
        long long v85 = 0;
        std::string::size_type v135 = 0;
      }
    }
  }
  else
  {
    std::string::size_type v135 = 0;
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  *(void *)context = 0;
  uint64_t v89 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 64));
  unint64_t v90 = v89;
  std::string::size_type v91 = v73;
  if ((v73 & 0x8000000000000000) != 0)
  {
    uint64_t v92 = (unsigned __int8 *)(v73 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v93 = 5381;
    do
    {
      std::string::size_type v91 = v93;
      unsigned int v94 = *v92++;
      uint64_t v93 = (33 * v93) ^ v94;
    }
    while (v94);
  }
  std::mutex::lock(v89);
  buf.__r_.__value_.__r.__words[0] = v91;
  int v95 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v90[1].__m_.__sig, (unint64_t *)&buf);
  if (v95)
  {
    uint64_t v97 = v95[3];
    long long v96 = (std::__shared_weak_count *)v95[4];
    if (v96)
    {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v90);
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v96);
      char v98 = 0;
      goto LABEL_210;
    }
  }
  else
  {
    uint64_t v97 = 0;
  }
  std::mutex::unlock(v90);
  long long v96 = 0;
  char v98 = 1;
LABEL_210:
  uint64_t v99 = *(unsigned int *)(a1 + 8);
  int64_t v100 = operator new(0x10uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v100 + 2);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v100 + 2);
  *int64_t v100 = v84;
  v100[1] = @"PcoMcc";
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, uint64_t, std::string *, void, void))(*(void *)v97 + 88))(context, v97, v99, 1, &buf, 0, 0);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((v98 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v96);
  }
  unint64_t v101 = *(unsigned __int16 **)context;
  if (*(void *)context) {
    size_t v102 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    size_t v102 = 0;
  }
  if (v102)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    if (*(void *)context)
    {
      CFTypeID v103 = CFGetTypeID(*(CFTypeRef *)context);
      if (v103 == CFNumberGetTypeID()) {
        ctu::cf::assign((ctu::cf *)&buf, v101, v104);
      }
    }
    int data_low = LOWORD(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    int data_low = 0;
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)context);
  *(void *)context = 0;
  char v106 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 64));
  int v107 = v106;
  if ((v73 & 0x8000000000000000) != 0)
  {
    int v108 = (unsigned __int8 *)(v73 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v109 = 5381;
    do
    {
      std::string::size_type v73 = v109;
      unsigned int v110 = *v108++;
      uint64_t v109 = (33 * v109) ^ v110;
    }
    while (v110);
  }
  std::mutex::lock(v106);
  buf.__r_.__value_.__r.__words[0] = v73;
  int v111 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v107[1].__m_.__sig, (unint64_t *)&buf);
  if (!v111)
  {
    uint64_t v113 = 0;
    goto LABEL_230;
  }
  uint64_t v113 = v111[3];
  __int16 v112 = (std::__shared_weak_count *)v111[4];
  if (!v112)
  {
LABEL_230:
    std::mutex::unlock(v107);
    __int16 v112 = 0;
    char v114 = 1;
    goto LABEL_231;
  }
  atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v107);
  atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  char v114 = 0;
LABEL_231:
  uint64_t v115 = *(unsigned int *)(a1 + 8);
  int v116 = operator new(0x10uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v116 + 2);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v116 + 2);
  *int v116 = v84;
  v116[1] = @"PcoMnc";
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, uint64_t, std::string *, void, void))(*(void *)v113 + 88))(context, v113, v115, 1, &buf, 0, 0);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((v114 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  }
  BOOL v117 = *(unsigned __int16 **)context;
  if (*(void *)context) {
    uint64_t v118 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    uint64_t v118 = 0;
  }
  if (v118)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v119 = v135;
    if (*(void *)context)
    {
      CFTypeID v120 = CFGetTypeID(*(CFTypeRef *)context);
      if (v120 == CFNumberGetTypeID()) {
        ctu::cf::assign((ctu::cf *)&buf, v117, v121);
      }
    }
    int v122 = LOWORD(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    int v122 = 0;
    uint64_t v119 = v135;
  }
  char v70 = (capabilities::ct *)ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)context);
  if (data_low && v122 && (void *)v119 != v85)
  {
    uint64_t v123 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPPParameters";
      _os_log_impl(&dword_22231A000, v123, OS_LOG_TYPE_DEFAULT, "#I %s: Request PcoContainerIds", (uint8_t *)&buf, 0xCu);
    }
    long long v124 = *(const void ***)(a2 + 8);
    long long v125 = *(const void ***)(a2 + 16);
    long long v126 = v124;
    if (v124 != v125)
    {
      long long v126 = *(const void ***)(a2 + 8);
      while (*((unsigned char *)*v126 + 8) != 56)
      {
        if (++v126 == v125) {
          goto LABEL_257;
        }
      }
    }
    if (v126 == v125) {
LABEL_257:
    }
      operator new();
    if (!v127) {
      __cxa_bad_cast();
    }
    v127[5] = data_low;
    while (1)
    {
      if (v124 == v125) {
        goto LABEL_264;
      }
      if (*((unsigned char *)*v124 + 8) == 57) {
        break;
      }
      ++v124;
    }
    if (v124 == v125) {
LABEL_264:
    }
      operator new();
    if (!v128) {
      __cxa_bad_cast();
    }
    void v128[5] = v122;
    *((unsigned char *)v128 + 12) = 1;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = a1;
    buf.__r_.__value_.__r.__words[2] = 0;
    long long v167 = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&buf.__r_.__value_.__l.__size_, v85, v119, (v119 - (uint64_t)v85) >> 1);
    unint64_t v168 = (v119 - (uint64_t)v85) >> 1;
    uint64_t v129 = qmi::MutableMessageBase::getTLV<wds::tlv::PcoContainerIds>(a2, 71);
    if (v168 >= 0xB)
    {
      int v130 = *(NSObject **)(buf.__r_.__value_.__r.__words[0] + 56);
      if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)context = 134217984;
        *(void *)&context[4] = 10;
        _os_log_impl(&dword_22231A000, v130, OS_LOG_TYPE_DEFAULT, "#E Too many container IDs in CB. Using only the first %lu IDs", context, 0xCu);
      }
    }
    *(void *)uint64_t v129 = 0;
    *((void *)v129 + 1) = 0;
    *((_DWORD *)v129 + 4) = 0;
    uint64_t v131 = v168;
    if (v168 >= 0xA) {
      uint64_t v131 = 10;
    }
    if (v131) {
      memmove(v129, (const void *)buf.__r_.__value_.__l.__size_, 2 * v131);
    }
    char v70 = (capabilities::ct *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__l.__size_;
      operator delete((void *)buf.__r_.__value_.__l.__size_);
    }
  }
  if (v85) {
    operator delete(v85);
  }
LABEL_276:
  if (capabilities::ct::supportsDataQMIExtensions(v70)
    && (*(unsigned int (**)(uint64_t))(*(void *)v164 + 176))(v164))
  {
    long long v132 = *(const void ***)(a2 + 8);
    long long v133 = *(const void ***)(a2 + 16);
    if (v132 != v133)
    {
      while (*((unsigned char *)*v132 + 8) != 78)
      {
        if (++v132 == v133) {
          goto LABEL_285;
        }
      }
    }
    if (v132 == v133) {
LABEL_285:
    }
      operator new();
    if (!v134) {
      __cxa_bad_cast();
    }
    v134[9] = 1;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
LABEL_292:
  if (v165) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v165);
  }
}

void sub_22248B4C8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  if (*(void *)(v1 - 184)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v1 - 184));
  }
  _Unwind_Resume(a1);
}

void Mav16QMIDataContextIPAggregator::set3GPP2Parameters(void *a1, uint64_t a2, int a3)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  BOOL v6 = (std::__shared_weak_count *)a1[11];
  if (v6)
  {
    BOOL v6 = std::__shared_weak_count::lock(v6);
    int v7 = v6;
    if (v6) {
      BOOL v6 = (std::__shared_weak_count *)a1[10];
    }
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v93 = 0;
  unsigned int v94 = 0;
  ((void (*)(uint64_t *__return_ptr))v6->__on_zero_shared_weak)(&v93);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v93) {
    goto LABEL_178;
  }
  memset(&v92, 0, sizeof(v92));
  std::string::basic_string[abi:ne180100]<0>(&v92, (char *)&unk_222543CCE);
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)v93 + 88))(v93, 0) & 1) == 0)
  {
    int v8 = (std::__shared_weak_count *)a1[11];
    if (v8)
    {
      int v8 = std::__shared_weak_count::lock(v8);
      uint64_t v9 = v8;
      if (v8) {
        int v8 = (std::__shared_weak_count *)a1[10];
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    ((void (*)(std::string *__return_ptr))v8->__vftable[7].__on_zero_shared_weak)(&buf);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    std::string v92 = buf;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)v93 + 104))(v93, 0)
      && (*(unsigned int (**)(uint64_t))(*(void *)v93 + 80))(v93))
    {
      uint64_t v10 = a1[7];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = SHIBYTE(v92.__r_.__value_.__r.__words[2]);
        std::string::size_type v12 = v92.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr))(*(void *)v93 + 288))(&__p);
        uint64_t v13 = &v92;
        if (v11 < 0) {
          uint64_t v13 = (std::string *)v12;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPP2Parameters";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        uint64_t v97 = p_p;
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Modifying APN name %s to alt-name %s in 3GPP2 parameters", (uint8_t *)&buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v93 + 288))(&buf);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      std::string v92 = buf;
    }
  }
  std::string::size_type size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v92.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    v87[0] = MEMORY[0x263EF8330];
    v87[1] = 1174405120;
    CFTypeID v88 = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke;
    uint64_t v89 = &__block_descriptor_tmp_113_4;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v90, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
    }
    else {
      std::string v90 = v92;
    }
    uint64_t v16 = *(const void ***)(a2 + 8);
    int v17 = *(const void ***)(a2 + 16);
    if (v16 != v17)
    {
      while (*((unsigned __int8 *)*v16 + 8) != 161)
      {
        if (++v16 == v17) {
          goto LABEL_43;
        }
      }
    }
    if (v16 == v17) {
LABEL_43:
    }
      operator new();
    if (!v18) {
      __cxa_bad_cast();
    }
    v88((uint64_t)v87, (std::string *)(v18 + 16));
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  v85[0] = MEMORY[0x263EF8330];
  v85[1] = 0x40000000;
  v85[2] = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_114;
  v85[3] = &__block_descriptor_tmp_116_1;
  v85[4] = a1;
  int v86 = a3;
  __int16 v19 = *(const void ***)(a2 + 8);
  int v20 = *(const void ***)(a2 + 16);
  if (v19 != v20)
  {
    while (*((unsigned __int8 *)*v19 + 8) != 162)
    {
      if (++v19 == v20) {
        goto LABEL_53;
      }
    }
  }
  if (v19 == v20) {
LABEL_53:
  }
    operator new();
  if (!v21) {
    __cxa_bad_cast();
  }
  ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_114((uint64_t)v85, v21 + 3);
  memset(&buf, 0, sizeof(buf));
  (*(void (**)(std::string *__return_ptr))(*(void *)v93 + 264))(&buf);
  memset(&__p, 0, sizeof(__p));
  (*(void (**)(std::string *__return_ptr))(*(void *)v93 + 272))(&__p);
  (*(void (**)(std::string *__return_ptr))(*(void *)v93 + 280))(&v95);
  int v22 = wds::apply(&v95);
  int v23 = v22;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  int v24 = (std::__shared_weak_count *)a1[11];
  if (v24)
  {
    int v24 = std::__shared_weak_count::lock(v24);
    uint64_t v25 = v24;
    if (v24) {
      int v24 = (std::__shared_weak_count *)a1[10];
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  char v26 = ((uint64_t (*)(std::__shared_weak_count *))v24->__vftable[9].__on_zero_shared)(v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::string::size_type v27 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = buf.__r_.__value_.__l.__size_;
  }
  if (v26)
  {
    if (v27)
    {
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
      }
      if (v28)
      {
        v71[0] = MEMORY[0x263EF8330];
        v71[1] = 1174405120;
        unint64_t v72 = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_2;
        std::string::size_type v73 = &__block_descriptor_tmp_129_2;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v74, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v74 = buf;
        }
        std::string::size_type v32 = *(const void ***)(a2 + 8);
        CFTypeID v33 = *(const void ***)(a2 + 16);
        if (v32 != v33)
        {
          while (*((unsigned __int8 *)*v32 + 8) != 174)
          {
            if (++v32 == v33) {
              goto LABEL_91;
            }
          }
        }
        if (v32 == v33) {
LABEL_91:
        }
          operator new();
        if (!v34) {
          __cxa_bad_cast();
        }
        v72((uint64_t)v71, (std::string *)(v34 + 16));
        v67[0] = MEMORY[0x263EF8330];
        v67[1] = 1174405120;
        int v68 = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_130;
        int v69 = &__block_descriptor_tmp_133_1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v70, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v70 = __p;
        }
        int v42 = *(const void ***)(a2 + 8);
        char v43 = *(const void ***)(a2 + 16);
        if (v42 != v43)
        {
          while (*((unsigned __int8 *)*v42 + 8) != 175)
          {
            if (++v42 == v43) {
              goto LABEL_127;
            }
          }
        }
        if (v42 == v43) {
LABEL_127:
        }
          operator new();
        if (!v44) {
          __cxa_bad_cast();
        }
        v68((uint64_t)v67, (std::string *)(v44 + 16));
        v65[0] = MEMORY[0x263EF8330];
        v65[1] = 0x40000000;
        void v65[2] = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_134;
        v65[3] = &__block_descriptor_tmp_136_1;
        int v66 = v23;
        long long v45 = *(const void ***)(a2 + 8);
        long long v46 = *(const void ***)(a2 + 16);
        if (v45 != v46)
        {
          while (*((unsigned __int8 *)*v45 + 8) != 173)
          {
            if (++v45 == v46) {
              goto LABEL_135;
            }
          }
        }
        if (v45 == v46) {
LABEL_135:
        }
          operator new();
        if (!v47) {
          __cxa_bad_cast();
        }
        ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_134((uint64_t)v65, v47 + 9);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  else
  {
    if (v27)
    {
      v81[0] = MEMORY[0x263EF8330];
      v81[1] = 1174405120;
      uint64_t v82 = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_117;
      size_t v83 = &__block_descriptor_tmp_120_0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v84, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else {
        std::string v84 = buf;
      }
      uint64_t v29 = *(const void ***)(a2 + 8);
      uint64_t v30 = *(const void ***)(a2 + 16);
      if (v29 != v30)
      {
        while (*((unsigned __int8 *)*v29 + 8) != 155)
        {
          if (++v29 == v30) {
            goto LABEL_82;
          }
        }
      }
      if (v29 == v30) {
LABEL_82:
      }
        operator new();
      if (!v31) {
        __cxa_bad_cast();
      }
      v82((uint64_t)v81, (std::string *)(v31 + 16));
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
    }
    if (v35)
    {
      v77[0] = MEMORY[0x263EF8330];
      v77[1] = 1174405120;
      long long v78 = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_121;
      long long v79 = &__block_descriptor_tmp_124_0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v80, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v80 = __p;
      }
      long long v36 = *(const void ***)(a2 + 8);
      uint64_t v37 = *(const void ***)(a2 + 16);
      if (v36 != v37)
      {
        while (*((unsigned __int8 *)*v36 + 8) != 156)
        {
          if (++v36 == v37) {
            goto LABEL_107;
          }
        }
      }
      if (v36 == v37) {
LABEL_107:
      }
        operator new();
      if (!v38) {
        __cxa_bad_cast();
      }
      v78((uint64_t)v77, (std::string *)(v38 + 16));
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v39 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v39 = buf.__r_.__value_.__l.__size_;
    }
    if (v39) {
      goto LABEL_116;
    }
    std::string::size_type v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
    }
    if (v40)
    {
LABEL_116:
      v75[0] = MEMORY[0x263EF8330];
      v75[1] = 0x40000000;
      v75[2] = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_125;
      v75[3] = &__block_descriptor_tmp_126;
      int v76 = v23;
      uint64_t v41 = qmi::MutableMessageBase::getTLV<wds::tlv::Profile3GPP2_AuthPref>(a2);
      ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_125((uint64_t)v75, v41);
    }
  }
  v64[0] = MEMORY[0x263EF8330];
  v64[1] = 0x40000000;
  v64[2] = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_2_137;
  void v64[3] = &__block_descriptor_tmp_142_2;
  v64[4] = a1;
  char v48 = *(const void ***)(a2 + 8);
  uint64_t v49 = *(const void ***)(a2 + 16);
  if (v48 != v49)
  {
    while (*((unsigned __int8 *)*v48 + 8) != 170)
    {
      if (++v48 == v49) {
        goto LABEL_147;
      }
    }
  }
  if (v48 == v49) {
LABEL_147:
  }
    operator new();
  if (!v50) {
    goto LABEL_181;
  }
  ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_2_137((uint64_t)v64, v50 + 3);
  if (!(*(unsigned int (**)(uint64_t, void))(*(void *)v93 + 56))(v93, 0)) {
    goto LABEL_157;
  }
  CFBooleanRef v52 = *(const void ***)(a2 + 8);
  uint64_t v53 = *(const void ***)(a2 + 16);
  if (v52 != v53)
  {
    while (*((unsigned __int8 *)*v52 + 8) != 163)
    {
      if (++v52 == v53) {
        goto LABEL_156;
      }
    }
  }
  if (v52 == v53) {
LABEL_156:
  }
    operator new();
  if (!v54) {
LABEL_181:
  }
    __cxa_bad_cast();
  v54[9] = 1;
LABEL_157:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v93 + 152))(v93))
  {
    uint64_t v55 = a1[7];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v95.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)"set3GPP2Parameters";
      _os_log_impl(&dword_22231A000, v55, OS_LOG_TYPE_DEFAULT, "#I %s: Applying PCO to SNI2", (uint8_t *)&v95, 0xCu);
    }
    v59[0] = MEMORY[0x263EF8330];
    v59[1] = 1174405120;
    int v60 = ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_147;
    char v61 = &__block_descriptor_tmp_151_3;
    uint64_t v62 = v93;
    long long v63 = v94;
    if (v94) {
      atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v56 = *(const void ***)(a2 + 8);
    unint64_t v57 = *(const void ***)(a2 + 16);
    if (v56 != v57)
    {
      while (*((unsigned __int8 *)*v56 + 8) != 189)
      {
        if (++v56 == v57) {
          goto LABEL_169;
        }
      }
    }
    if (v56 == v57) {
LABEL_169:
    }
      operator new();
    if (!v58) {
      __cxa_bad_cast();
    }
    v60((uint64_t)v59, v58 + 5);
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
LABEL_178:
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
}

void sub_22248D090(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 217) < 0) {
    operator delete(*(void **)(v1 - 240));
  }
  if (*(void *)(v1 - 200)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v1 - 200));
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ___ZN31Mav16QMIDataContextIPAggregator24configureProfileIfNeededERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke_48(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    BOOL v6 = *(NSObject **)(v3 + 56);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = wds::asString(*(_DWORD *)(a1 + 40));
      int v8 = *(unsigned __int8 *)(a1 + 44);
      int v9 = *(_DWORD *)(a2 + 4);
      int v10 = 136316162;
      int v11 = "configureProfileIfNeeded_block_invoke";
      __int16 v12 = 2080;
      uint64_t v13 = v7;
      __int16 v14 = 1024;
      int v15 = v8;
      __int16 v16 = 1024;
      int v17 = v9;
      __int16 v18 = 2080;
      uint64_t v19 = qmi::asString();
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Failed to modify settings for profile %s (%d). Error: 0x%x(%s)", (uint8_t *)&v10, 0x2Cu);
    }
  }
  Mav16QMIDataContextIPAggregator::handleProfileConfiguredResult(v3, *(_DWORD *)(a1 + 40), 1, v4 == 0);
}

void Mav16QMIDataContextIPAggregator::handleProfileConfiguredResult(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v8 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315906;
    CFTypeID v33 = "handleProfileConfiguredResult";
    __int16 v34 = 2080;
    std::string::size_type v35 = wds::asString(a2);
    __int16 v36 = 1024;
    int v37 = a3;
    __int16 v38 = 1024;
    int v39 = a4;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: profileType: %s, activationNeeded: %d, success: %d", buf, 0x22u);
  }
  int v10 = *(unsigned char **)(a1 + 352);
  int v9 = *(std::__shared_weak_count **)(a1 + 360);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a3)
  {
    if (a2 == 1)
    {
      void v10[5] = a4;
    }
    else if (!a2)
    {
      void v10[3] = a4;
    }
  }
  int v11 = v10[3];
  if (v11 == 255 || (int v12 = v10[5], v12 == 255))
  {
    uint64_t v13 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      CFTypeID v33 = "handleProfileConfiguredResult";
      _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Still waiting for more profile settings result", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v10[1]) {
    v10[1] = 0;
  }
  if (v11 == 1)
  {
    if (v12 != 1 && v12 != 254) {
      goto LABEL_28;
    }
LABEL_25:
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    __int16 v14 = *(std::__shared_weak_count **)(a1 + 88);
    if (v14)
    {
      __int16 v14 = std::__shared_weak_count::lock(v14);
      int v15 = v14;
      if (v14) {
        __int16 v14 = *(std::__shared_weak_count **)(a1 + 80);
      }
    }
    else
    {
      int v15 = 0;
    }
    ((void (*)(uint64_t *__return_ptr))v14->__on_zero_shared_weak)(&v30);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v30)
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v30 + 216))(v30, 0, 0, 0);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v30 + 216))(v30, 1, 0, 0) | v18;
      uint64_t v20 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = subscriber::asString();
        *(_DWORD *)std::string buf = 136315394;
        CFTypeID v33 = (const char *)v21;
        __int16 v34 = 2048;
        std::string::size_type v35 = (const char *)v19;
        _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I updateLastActiveProfileConnectionMask [Sim %s, 0x%llx]", buf, 0x16u);
      }
      int v22 = *(std::__shared_weak_count **)(a1 + 88);
      if (v22)
      {
        int v22 = std::__shared_weak_count::lock(v22);
        int v23 = v22;
        if (v22) {
          int v22 = *(std::__shared_weak_count **)(a1 + 80);
        }
      }
      else
      {
        int v23 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t))v22->__vftable[10].__get_deleter)(v22, *(unsigned int *)(a1 + 8), v19);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    uint64_t v17 = 1;
    goto LABEL_46;
  }
  if (v11 == 254 && v12 == 1) {
    goto LABEL_25;
  }
LABEL_28:
  __int16 v16 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    CFTypeID v33 = "handleProfileConfiguredResult";
    _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: Failed to configure profile. Reset profiles", buf, 0xCu);
  }
  uint64_t v17 = 0;
  void v10[3] = -1;
  void v10[5] = -1;
LABEL_46:
  int v24 = *(const void **)(a1 + 96);
  if (v24)
  {
    if (v25)
    {
      char v26 = *(std::__shared_weak_count **)(a1 + 104);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v25 + 24))(v25, v17);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
  }
  std::string::size_type v27 = *(const void **)(a1 + 112);
  if (v27)
  {
    if (v28)
    {
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 120);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v28 + 24))(v28, v17);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
    }
  }
LABEL_14:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_22248D7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c57_ZTSNSt3__110shared_ptrIK28DataAPNSettingsInfoInterfaceEE56c42_ZTSNSt3__110shared_ptrI14QMIProfileInfoEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c57_ZTSNSt3__110shared_ptrIK28DataAPNSettingsInfoInterfaceEE56c42_ZTSNSt3__110shared_ptrI14QMIProfileInfoEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t non-virtual thunk to'Mav16QMIDataContextIPAggregator::configureProfileIfNeeded(uint64_t a1, uint64_t *a2, int a3)
{
  return Mav16QMIDataContextIPAggregator::configureProfileIfNeeded((void *)(a1 - 288), a2, a3);
}

void ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_56(uint64_t a1, int *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  std::string::size_type v4 = *(void **)(a1 + 32);
  uint64_t v5 = (std::__shared_weak_count *)v4[11];
  if (v5)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v5);
    BOOL v6 = v5;
    if (v5) {
      uint64_t v5 = (std::__shared_weak_count *)v4[10];
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  int v7 = ((uint64_t (*)(std::__shared_weak_count *))v5->__vftable[9].__get_deleter)(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7)
  {
    int v8 = v4[7];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      __int16 v14 = "set3GPPParameters_block_invoke";
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Required to ask for v4 & v6 PDP types, asking for 3GPP types v4v6", (uint8_t *)&v13, 0xCu);
    }
    int v9 = 3;
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 40);
    if ((v10 & 2) == 0) {
      return;
    }
    int v11 = v4[7];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = "v4v6";
      if ((v10 & 1) == 0) {
        int v12 = "v6";
      }
      int v13 = 136315394;
      __int16 v14 = "set3GPPParameters_block_invoke";
      __int16 v15 = 2080;
      __int16 v16 = v12;
      _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Asking for 3GPP type(s) %s", (uint8_t *)&v13, 0x16u);
      int v10 = *(_DWORD *)(a1 + 40);
    }
    int v9 = v10 & 1 | 2;
  }
  *a2 = v9;
}

void sub_22248DAB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_61(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_65(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_69(uint64_t a1, char *a2)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 280))(&v9);
  int v4 = std::string::compare(&v9, "PAP");
  int v5 = v4;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_3;
    }
LABEL_7:
    char v8 = 1;
    goto LABEL_10;
  }
  if (!v4) {
    goto LABEL_7;
  }
LABEL_3:
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 280))(&v9);
  int v6 = std::string::compare(&v9, "CHAP");
  int v7 = v6;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v7) {
      return;
    }
  }
  else if (v6)
  {
    return;
  }
  char v8 = 2;
LABEL_10:
  *a2 = v8;
}

uint64_t __copy_helper_block_e8_32c57_ZTSNSt3__110shared_ptrIK28DataAPNSettingsInfoInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c57_ZTSNSt3__110shared_ptrIK28DataAPNSettingsInfoInterfaceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator17set3GPPParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily19AuthTypeRequirementb_block_invoke_92(uint64_t a1, _WORD *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 152))(*(void *)(a1 + 32));
  *a2 = result;
  return result;
}

void Mav16QMIDataContextIPAggregator::reportHandoverWwanPduSessionId(Mav16QMIDataContextIPAggregator *this, uint64_t a2)
{
  int v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4)
  {
    int v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      int v4 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v7 = 0;
  char v8 = 0;
  int v6 = (capabilities::ct *)((capabilities::ct *(*)(uint64_t *__return_ptr))v4->__on_zero_shared_weak)(&v7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v7
    && capabilities::ct::supports5G(v6)
    && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 192))(v7))
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 12) + 264))(*((void *)this + 12), a2);
    (*(void (**)(void, uint64_t))(**((void **)this + 14) + 264))(*((void *)this + 14), a2);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_22248DDD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_22248DDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x22248DDE4);
  }
  JUMPOUT(0x22248DDDCLL);
}

uint64_t Mav16QMIDataContextIPAggregator::updateAnbrFilters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 96);
  std::__optional_copy_base<DataIPFilter,false>::__optional_copy_base[abi:ne180100](v12, a2);
  std::__optional_copy_base<DataIPFilter,false>::__optional_copy_base[abi:ne180100](v11, a3);
  (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v6 + 272))(v6, v12, v11);
  std::__optional_destruct_base<DataIPFilter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v11);
  std::__optional_destruct_base<DataIPFilter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
  uint64_t v7 = *(void *)(a1 + 112);
  std::__optional_copy_base<DataIPFilter,false>::__optional_copy_base[abi:ne180100](v10, a2);
  std::__optional_copy_base<DataIPFilter,false>::__optional_copy_base[abi:ne180100](v9, a3);
  (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v7 + 272))(v7, v10, v9);
  std::__optional_destruct_base<DataIPFilter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
  return std::__optional_destruct_base<DataIPFilter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v10);
}

void sub_22248DF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t Mav16QMIDataContextIPAggregator::getAnbr(Mav16QMIDataContextIPAggregator *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 14) + 280))(*((void *)this + 14));
  if (!result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 12) + 280);
    return v3();
  }
  return result;
}

void *Mav16QMIDataContextIPAggregator::getAnbrActivationState(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 112);
  std::__function::__value_func<void ()(BOOL,BOOL)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 288))(v4, v8);
  uint64_t result = std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100](v8);
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 96);
    std::__function::__value_func<void ()(BOOL,BOOL)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    LOBYTE(v6) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 288))(v6, v7);
    uint64_t result = std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100](v7);
    if ((v6 & 1) == 0) {
      return (void *)std::function<void ()(BOOL,BOOL)>::operator()(a2, 0, 0);
    }
  }
  return result;
}

void sub_22248E0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *Mav16QMIDataContextIPAggregator::queryAnbrBitrate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v15[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[14];
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v15, a4);
  LOBYTE(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 296))(v8, a2, a3, v15);
  uint64_t result = std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v15);
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = a1[12];
    std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v14, a4);
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v10 + 296))(v10, a2, a3, v14);
    uint64_t result = std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v14);
    if ((v11 & 1) == 0)
    {
      int v12 = a1[7];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#E ANBR cannot be queried by either QMI client", v13, 2u);
      }
      return (void *)std::function<void ()(BOOL)>::operator()(a4, 0);
    }
  }
  return result;
}

void sub_22248E290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t Mav16QMIDataContextIPAggregator::setCoalescing(uint64_t a1, unsigned __int16 a2)
{
  (*(void (**)(void, void))(**(void **)(a1 + 112) + 304))(*(void *)(a1 + 112), a2);
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 304);

  return v3();
}

void ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_114(uint64_t a1, int *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  std::string::size_type v4 = *(void **)(a1 + 32);
  int v5 = (std::__shared_weak_count *)v4[11];
  if (v5)
  {
    int v5 = std::__shared_weak_count::lock(v5);
    uint64_t v6 = v5;
    if (v5) {
      int v5 = (std::__shared_weak_count *)v4[10];
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  int v7 = ((uint64_t (*)(std::__shared_weak_count *))v5->__vftable[9].__get_deleter)(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7)
  {
    uint64_t v8 = v4[7];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      __int16 v14 = "set3GPP2Parameters_block_invoke";
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Required to ask for v4 & v6 PDP types, asking for 3GPP2 types v4v6", (uint8_t *)&v13, 0xCu);
    }
    int v9 = 2;
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 40);
    if ((v10 & 2) == 0) {
      return;
    }
    char v11 = v4[7];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = "v4v6";
      if ((v10 & 1) == 0) {
        int v12 = "v6";
      }
      int v13 = 136315394;
      __int16 v14 = "set3GPP2Parameters_block_invoke";
      __int16 v15 = 2080;
      __int16 v16 = v12;
      _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Asking for 3GPP2 type(s) %s", (uint8_t *)&v13, 0x16u);
      int v10 = *(_DWORD *)(a1 + 40);
    }
    if (v10) {
      int v9 = 2;
    }
    else {
      int v9 = 1;
    }
  }
  *a2 = v9;
}

void sub_22248E538(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_117(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_121(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_125(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_2(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_130(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_134(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

const void **___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_2_137(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int valuePtr = 0;
  std::string::size_type v4 = *(std::__shared_weak_count **)(v3 + 88);
  if (v4)
  {
    std::string::size_type v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      std::string::size_type v4 = *(std::__shared_weak_count **)(v3 + 80);
    }
  }
  else
  {
    int v5 = 0;
  }
  CFNumberRef number = 0;
  ((void (*)(const void **__return_ptr))v4->__vftable[9].~__shared_weak_count_0)(&v8);
  ctu::cf::CFSharedRef<__CFNumber const>::CFSharedRef<void const,void>(&number, &v8);
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (number) {
    uint64_t v6 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    LODWORD(v6) = valuePtr;
    if (!valuePtr) {
      int valuePtr = 0;
    }
  }
  *a2 = v6;
  return ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&number);
}

void sub_22248E708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN31Mav16QMIDataContextIPAggregator18set3GPP2ParametersERN3wds29ResetAndModifyProfileSettings7RequestE18DataProtocolFamily_block_invoke_147(uint64_t a1, _WORD *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 152))(*(void *)(a1 + 32));
  *a2 = result;
  return result;
}

void Mav16QMIDataContextIPAggregator::createQoSClientOnDemand(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 440))(*(void *)(a1 + 80), a2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_22248E80C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Mav16QMIDataContextIPAggregator::createQoSClientOnDemand(uint64_t a1, uint64_t a2)
{
}

void Mav16QMIDataContextIPAggregator::releaseDataContextClient(Mav16QMIDataContextIPAggregator *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (capabilities::ct::supportsDataQMIExtensions(this))
  {
    if (QMIDataContextIPAggregator::getDataContextState((uint64_t)this, 3))
    {
      uint64_t v2 = *((void *)this + 7);
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(v7[0]) = 0;
      uint64_t v3 = "#I cannot destroy QMI client as context is not idle yet";
      goto LABEL_11;
    }
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 12) + 320))(*((void *)this + 12));
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 14) + 320))();
    uint64_t v6 = *((void *)this + 7);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109376;
      v7[1] = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I release shadow fWDSClient in Aggregator ipv4released = %d, ipv6released = %d", (uint8_t *)v7, 0xEu);
    }
    if ((v4 & v5) == 1)
    {
      (*(void (**)(Mav16QMIDataContextIPAggregator *))(*(void *)this + 672))(this);
      return;
    }
    uint64_t v2 = *((void *)this + 7);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      uint64_t v3 = "#I do not release shadow fWDSClient in Aggreator";
LABEL_11:
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)v7, 2u);
    }
  }
}

void Mav16QMIDataContextIPAggregator::releaseQoSClient(uint64_t a1, uint64_t a2)
{
  int v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 448))(*(void *)(a1 + 80), a2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_22248EA8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Mav16QMIDataContextIPAggregator::releaseQoSClient(uint64_t a1, uint64_t a2)
{
}

void std::__shared_ptr_pointer<Mav16QMIDataContextIP *,std::shared_ptr<Mav16QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<Mav16QMIDataContextIP>(Mav16QMIDataContextIP*)::{lambda(Mav16QMIDataContextIP *)#1},std::allocator<Mav16QMIDataContextIP>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav16QMIDataContextIP *,std::shared_ptr<Mav16QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<Mav16QMIDataContextIP>(Mav16QMIDataContextIP*)::{lambda(Mav16QMIDataContextIP *)#1},std::allocator<Mav16QMIDataContextIP>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav16QMIDataContextIP *,std::shared_ptr<Mav16QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<Mav16QMIDataContextIP>(Mav16QMIDataContextIP*)::{lambda(Mav16QMIDataContextIP *)#1},std::allocator<Mav16QMIDataContextIP>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav16QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<Mav16QMIDataContextIP>(Mav16QMIDataContextIP*)::{lambda(Mav16QMIDataContextIP*)#1}::operator() const(Mav16QMIDataContextIP*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unsigned char *std::__optional_copy_base<DataIPFilter,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[160] = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter const&,DataIPFilter*>((uint64_t)a1, a2);
    a1[160] = 1;
  }
  return a1;
}

void sub_22248EBB4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilter,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<DataIPFilter,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 88);
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 32);
  }
  return a1;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds17DeleteAllProfiles10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22248ECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

xpc_object_t xpc::dict::object_proxy::operator=(xpc_object_t *a1, xpc_object_t xdict, char *key, xpc_object_t *a4)
{
  xpc_dictionary_set_value(xdict, key, *a4);
  *a1 = *a4;
  xpc_object_t result = xpc_null_create();
  *a4 = result;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileTypeMask>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileTypeMask>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileTypeMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileTypeMask>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfilePersistenceMask>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfilePersistenceMask>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfilePersistenceMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfilePersistenceMask>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileClientTypeMask>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileClientTypeMask>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileClientTypeMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileClientTypeMask>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17DeleteAllProfiles8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22248F0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__shared_ptr_pointer<QMIProfileInfo *,std::shared_ptr<QMIProfileInfo>::__shared_ptr_default_delete<QMIProfileInfo,QMIProfileInfo>,std::allocator<QMIProfileInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<QMIProfileInfo *,std::shared_ptr<QMIProfileInfo>::__shared_ptr_default_delete<QMIProfileInfo,QMIProfileInfo>,std::allocator<QMIProfileInfo>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIProfileInfo *,std::shared_ptr<QMIProfileInfo>::__shared_ptr_default_delete<QMIProfileInfo,QMIProfileInfo>,std::allocator<QMIProfileInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<std::shared_ptr<QMIProfileManager> ctu::enable_make_shared<QMIProfileManager>::make_shared<std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &>(std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &)::enabler,std::allocator<std::allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CC8E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::shared_ptr<QMIProfileManager> ctu::enable_make_shared<QMIProfileManager>::make_shared<std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &>(std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &)::enabler,std::allocator<std::allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CC8E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_emplace<std::shared_ptr<QMIProfileManager> ctu::enable_make_shared<QMIProfileManager>::make_shared<std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &>(std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &)::enabler,std::allocator<std::allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ctu::enable_make_shared<QMIProfileManager>::make_shared<std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &>(std::shared_ptr<Registry> &,dispatch::queue const&,subscriber::SimSlot &)::enabler::~enabler(QMIProfileManager *a1)
{
  QMIProfileManager::~QMIProfileManager(a1);

  JUMPOUT(0x223C9A950);
}

void std::__function::__func<void ctu::rest::event_sink_impl_t<std::pair<subscriber::SimSlot,BOOL>,ctu::rest::path_generator_t<rest::mav16_data_profile_creation_ready>>::bind_impl<Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0>(ctu::RestModule &,Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(xpc::object const&)#1},std::allocator<xpc::object const&>,void ()(xpc)>::~__func()
{
}

void *std::__function::__func<void ctu::rest::event_sink_impl_t<std::pair<subscriber::SimSlot,BOOL>,ctu::rest::path_generator_t<rest::mav16_data_profile_creation_ready>>::bind_impl<Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0>(ctu::RestModule &,Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(xpc::object const&)#1},std::allocator<xpc::object const&>,void ()(xpc)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4CC970;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void ctu::rest::event_sink_impl_t<std::pair<subscriber::SimSlot,BOOL>,ctu::rest::path_generator_t<rest::mav16_data_profile_creation_ready>>::bind_impl<Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0>(ctu::RestModule &,Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(xpc::object const&)#1},std::allocator<xpc::object const&>,void ()(xpc)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4CC970;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void ctu::rest::event_sink_impl_t<std::pair<subscriber::SimSlot,BOOL>,ctu::rest::path_generator_t<rest::mav16_data_profile_creation_ready>>::bind_impl<Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0>(ctu::RestModule &,Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(xpc::object const&)#1},std::allocator<xpc::object const&>,void ()(xpc)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  xpc_object_t v3 = *a2;
  xpc_object_t v13 = v3;
  uint64_t v4 = MEMORY[0x263EF8708];
  if (v3 && MEMORY[0x223C9AD60](v3) == v4)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v13 = v3;
  }
  if (MEMORY[0x223C9AD60](v3) == v4)
  {
    *(void *)std::string buf = &v13;
    *(void *)&uint8_t buf[8] = "first";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &object);
    uint64_t v7 = MEMORY[0x223C9AD60](object);
    if (v7 == MEMORY[0x263EF8798])
    {
      int v14 = 0;
      ctu::rest::detail::read_enum_string_value();
      int v6 = v14;
    }
    else if (v7 == MEMORY[0x263EF86E0] || v7 == MEMORY[0x263EF8738] || v7 == MEMORY[0x263EF87A0])
    {
      int v6 = xpc::dyn_cast_or_default();
    }
    else
    {
      int v6 = 0;
    }
    xpc_release(object);
    *(void *)std::string buf = &v13;
    *(void *)&uint8_t buf[8] = "second";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &object);
    int v8 = xpc::dyn_cast_or_default();
    xpc_release(object);
    xpc_object_t v3 = v13;
    if (v8) {
      uint64_t v5 = 0x100000000;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  xpc_release(v3);
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v9 + 8) == v6)
  {
    *(unsigned char *)(v9 + 313) = BYTE4(v5);
    uint64_t v10 = *(NSObject **)(v9 + 56);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      char v11 = "allowed";
      if (!v5) {
        char v11 = "NOT allowed";
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v11;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Profile creation %s", buf, 0x16u);
    }
  }
}

void sub_22248F530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<void ctu::rest::event_sink_impl_t<std::pair<subscriber::SimSlot,BOOL>,ctu::rest::path_generator_t<rest::mav16_data_profile_creation_ready>>::bind_impl<Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0>(ctu::RestModule &,Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(xpc::object const&)#1},std::allocator<xpc::object const&>,void ()(xpc)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ctu::rest::event_sink_impl_t<std::pair<subscriber::SimSlot,BOOL>,ctu::rest::path_generator_t<rest::mav16_data_profile_creation_ready>>::bind_impl<Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0>(ctu::RestModule &,Mav16QMIDataContextIPAggregator::initialize(BOOL,std::shared_ptr<QMIClientContextObserver>,std::shared_ptr<BBDataContextHelper>,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(xpc::object const&)#1},std::allocator<xpc::object const&>,void ()(xpc)>::target_type()
{
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::ProfileIdentifer>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifer>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifer>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifer>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::ProfileIdentifer>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifer>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds13DeleteProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22248F988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileType>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Persistence>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Persistence>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Persistence>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Persistence>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnType>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnType>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds13CreateProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22248FD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::Profile3GPP2_AuthPref>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned __int8 *)*v1 + 8) != 154)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_AuthPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_AuthPref>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_AuthPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::Profile3GPP_ProfileIdentifier>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_AuthPref>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds29ResetAndModifyProfileSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224900A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ApnName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCB98;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ApnName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCB98;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ApnName>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ApnName>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  xpc_object_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ApnName>::clone()
{
}

void sub_222490290(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PdpType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PdpType>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PdpType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::Profile3GPP_PdpType>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PdpType>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_UserName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCC38;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_UserName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCC38;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_UserName>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_UserName>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  xpc_object_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_UserName>::clone()
{
}

void sub_222490544(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_Password>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCC88;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_Password>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCC88;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_Password>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_Password>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  xpc_object_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_Password>::clone()
{
}

void sub_222490718(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_AuthPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_AuthPref>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_AuthPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::Profile3GPP_ProfileIdentifier>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_AuthPref>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProxyAddrUsingPco>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProxyAddrUsingPco>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProxyAddrUsingPco>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  xpc_object_t result = tlv::writeV<wds::tlv::Profile3GPP_ProfileIdentifier>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProxyAddrUsingPco>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_IMSRequestQoSWithSigInd>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_IMSRequestQoSWithSigInd>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_IMSRequestQoSWithSigInd>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_IMSRequestQoSWithSigInd>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_IMSRequestQoSWithSigInd>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_IMSRequestQoSWithSigInd>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_SupportEmergencyCalls>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_SupportEmergencyCalls>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_SupportEmergencyCalls>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_SupportEmergencyCalls>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_OperatorReservedPcoId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_OperatorReservedPcoId>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_OperatorReservedPcoId>();
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_OperatorReservedPcoId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_OperatorReservedPcoId>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_OperatorReservedPcoId>::clone()
{
}

void ctu::cf::_Applier_InsertArrayDefault<unsigned short,std::back_insert_iterator<std::vector<unsigned short>>>(void *a1, uint64_t *a2)
{
  __int16 v20 = 0;
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFNumberGetTypeID()) {
      ctu::cf::assign((ctu::cf *)&v20, (unsigned __int16 *)a1, v5);
    }
  }
  uint64_t v6 = *a2;
  uint64_t v7 = *(_WORD **)(v6 + 8);
  unint64_t v8 = *(void *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = *(_WORD **)v6;
    uint64_t v11 = (uint64_t)v7 - *(void *)v6;
    if (v11 <= -3) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v11 >> 1;
    unint64_t v13 = v8 - (void)v10;
    if (v13 <= (v11 >> 1) + 1) {
      unint64_t v14 = v12 + 1;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15)
    {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v6 + 16, v15);
      uint64_t v10 = *(_WORD **)v6;
      uint64_t v7 = *(_WORD **)(v6 + 8);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[2 * v12];
    uint64_t v18 = &v16[2 * v15];
    *(_WORD *)uint64_t v17 = v20;
    uint64_t v9 = v17 + 2;
    while (v7 != v10)
    {
      __int16 v19 = *--v7;
      *((_WORD *)v17 - 1) = v19;
      v17 -= 2;
    }
    *(void *)uint64_t v6 = v17;
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = v18;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v7 = v20;
    uint64_t v9 = v7 + 1;
  }
  *(void *)(v6 + 8) = v9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMcc>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMcc>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMcc>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  CFTypeID v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)CFTypeID v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMcc>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMnc>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMnc>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMnc>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMnc>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMnc>(a2, a1 + 10);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_PcoMnc>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::AlwaysOnPdu>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AlwaysOnPdu>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::AlwaysOnPdu>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::AlwaysOnPdu>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ApnName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCF58;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ApnName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCF58;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ApnName>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ApnName>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ApnName>::clone()
{
}

void sub_2224910F4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PdpType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PdpType>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PdpType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PdpType>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PdpType>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_UserName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCFF8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_UserName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CCFF8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_UserName>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_UserName>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_UserName>::clone()
{
}

void sub_2224913A8(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_Password>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CD048;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_Password>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CD048;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_Password>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_Password>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_Password>::clone()
{
}

void sub_22249157C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNUserName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CD098;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNUserName>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CD098;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNUserName>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNUserName>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNUserName>::clone()
{
}

void sub_222491750(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNPassword>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CD0E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNPassword>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CD0E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNPassword>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Profile3GPP_ApnName>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNPassword>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ApnName>(a2, (void *)(a1 + 16));
  uint64_t v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNPassword>::clone()
{
}

void sub_222491924(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNAuthPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNAuthPref>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNAuthPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ProfileIdentifier>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_PDNAuthPref>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_InactivityTimer>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_InactivityTimer>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP2_InactivityTimer>();
}

_DWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_InactivityTimer>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP2_InactivityTimer>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_InactivityTimer>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProxyAddrNeeded>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProxyAddrNeeded>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProxyAddrNeeded>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ProfileIdentifier>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProxyAddrNeeded>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_OperatorReservedPcoId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_OperatorReservedPcoId>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_OperatorReservedPcoId>();
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_OperatorReservedPcoId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_OperatorReservedPcoId>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_OperatorReservedPcoId>::clone()
{
}

void QMIQOSClientIPInterface::createQMIQOSClientIP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, dispatch_object_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a5) {
    dispatch_retain(*a5);
  }
  QMIQOSClientIP::create(&v7);
}

void sub_222491D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void QMIQOSClientIP::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_222491F48(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIQOSClientIP> ctu::SharedSynchronizable<QMIQOSClientIP>::make_shared_ptr<QMIQOSClientIP>(QMIQOSClientIP*)::{lambda(QMIQOSClientIP*)#1}::operator() const(QMIQOSClientIP*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222491F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIQOSClientIP *,std::shared_ptr<QMIQOSClientIP> ctu::SharedSynchronizable<QMIQOSClientIP>::make_shared_ptr<QMIQOSClientIP>(QMIQOSClientIP*)::{lambda(QMIQOSClientIP *)#1},std::allocator<QMIQOSClientIP>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIQOSClientIP *,std::shared_ptr<QMIQOSClientIP> ctu::SharedSynchronizable<QMIQOSClientIP>::make_shared_ptr<QMIQOSClientIP>(QMIQOSClientIP*)::{lambda(QMIQOSClientIP *)#1},std::allocator<QMIQOSClientIP>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIQOSClientIP *,std::shared_ptr<QMIQOSClientIP> ctu::SharedSynchronizable<QMIQOSClientIP>::make_shared_ptr<QMIQOSClientIP>(QMIQOSClientIP*)::{lambda(QMIQOSClientIP *)#1},std::allocator<QMIQOSClientIP>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIQOSClientIP> ctu::SharedSynchronizable<QMIQOSClientIP>::make_shared_ptr<QMIQOSClientIP>(QMIQOSClientIP*)::{lambda(QMIQOSClientIP*)#1}::operator() const(QMIQOSClientIP*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void QMIDesenseCommandDriver::create()
{
}

void sub_222492174(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0xF1C40FB9B6D2BLL);
  }
  _Unwind_Resume(exception_object);
}

void *QMIDesenseCommandDriver::QMIDesenseCommandDriver(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  xpc_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  DesenseCommandDriver::DesenseCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  *a1 = &unk_26D4CD2D0;
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = &unk_26D4CD328;
  return a1;
}

void sub_222492254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void QMIDesenseCommandDriver::~QMIDesenseCommandDriver(QMIDesenseCommandDriver *this)
{
  *(void *)this = &unk_26D4CD2D0;
  *((void *)this + 11) = &unk_26D4CD328;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  DesenseCommandDriver::~DesenseCommandDriver(this);
}

{
  uint64_t vars8;

  QMIDesenseCommandDriver::~QMIDesenseCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMIDesenseCommandDriver::~QMIDesenseCommandDriver(QMIDesenseCommandDriver *this)
{
}

{
  uint64_t vars8;

  QMIDesenseCommandDriver::~QMIDesenseCommandDriver((QMIDesenseCommandDriver *)((char *)this - 88));

  JUMPOUT(0x223C9A950);
}

void QMIDesenseCommandDriver::bootstrap(uint64_t a1, uint64_t *a2, xpc_endpoint_t *a3, NSObject **a4)
{
  long long v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v50 = *a2;
  CFTypeID v51 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_endpoint_t v8 = *a3;
  xpc_object_t object = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v9 = *a4;
  dispatch_group_t group = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
  DesenseCommandDriver::bootstrap();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  uint64_t v11 = ServiceMap;
  uint64_t v12 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    unint64_t v13 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = (char *)v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  CFBooleanRef v52 = v12;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v11[1].__m_.__sig, (unint64_t *)&v52);
  if (v16)
  {
    uint64_t v18 = (void *)v16[3];
    uint64_t v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      char v19 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  uint64_t v17 = 0;
  char v19 = 1;
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(__p, "registration");
  xpc_object_t v20 = xpc_null_create();
  xpc_object_t v45 = v20;
  if (MEMORY[0x223C9AD60](*a3) == MEMORY[0x263EF8718])
  {
    uint64_t v21 = xpc_connection_create_from_endpoint(*a3);
    if (!v21) {
      uint64_t v21 = xpc_null_create();
    }
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v45 = v21;
    xpc_release(v20);
    xpc_release(v22);
  }
  QMIClientPool::requestClient(v18, 3u, (uint64_t *)__p, a1 + 88, (uint64_t)&v45, &aBlock);
  long long v23 = aBlock;
  long long aBlock = 0uLL;
  int v24 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v23;
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (*((void *)&aBlock + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&aBlock + 1));
    }
  }
  xpc_release(v45);
  xpc_object_t v45 = 0;
  if (v47 < 0)
  {
    operator delete(__p[0]);
    if (v19) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if ((v19 & 1) == 0) {
LABEL_29:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_30:
  uint64_t v25 = *(void *)(a1 + 96);
  v44[0] = MEMORY[0x263EF8330];
  v44[1] = 0x40000000;
  void v44[2] = ___ZN23QMIDesenseCommandDriver9bootstrapENSt3__110shared_ptrI37DesenseCommandDriverDelegateInterfaceEEN3xpc8endpointEN8dispatch13group_sessionE_block_invoke;
  v44[3] = &__block_descriptor_tmp_23;
  v44[4] = a1;
  char v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    std::string::size_type v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      CFTypeID v33 = v27;
      uint64_t v34 = *(void *)v25;
      if (*(void *)v25)
      {
        CFBooleanRef v52 = (char *)(v25 + 88);
        uint64_t v53 = 1;
        MEMORY[0x223C999F0](v25 + 88, v28, v29, v30, v31, v32);
        uint64_t v35 = *(void *)(v25 + 24);
        if (v35)
        {
          uint64_t v36 = v25 + 24;
          do
          {
            unsigned int v37 = *(unsigned __int16 *)(v35 + 32);
            BOOL v38 = v37 >= 0x555B;
            if (v37 >= 0x555B) {
              int v39 = (uint64_t *)v35;
            }
            else {
              int v39 = (uint64_t *)(v35 + 8);
            }
            if (v38) {
              uint64_t v36 = v35;
            }
            uint64_t v35 = *v39;
          }
          while (*v39);
          if (v36 != v25 + 24 && *(unsigned __int16 *)(v36 + 32) <= 0x555Bu) {
            __TUAssertTrigger();
          }
        }
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 0x40000000;
        uint64_t v58 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3nas17SetFreqReportMode10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        size_t v59 = &unk_26460F128;
        int v60 = v44;
        uint64_t v40 = (uint64_t *)_Block_copy(&aBlock);
        unsigned __int16 v56 = 21851;
        char v61 = &v56;
        uint64_t v41 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v25 + 16), &v56, (uint64_t)&std::piecewise_construct, &v61);
        int v42 = v41[5];
        void v41[5] = v40;
        if (v42) {
          _Block_release(v42);
        }
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v52);
        CFBooleanRef v52 = 0;
        uint64_t v53 = 0;
        uint64_t v43 = *(void *)(v25 + 64);
        uint64_t v54 = *(void *)(v25 + 56);
        uint64_t v55 = v43;
        if (v43) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
        }
        QMIClientPool::registerUnsolicitedHandler(v34, (uint64_t)&v52, v25, 0x555Bu);
        qmi::Client::~Client((qmi::Client *)&v52);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
}

void sub_222492764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,dispatch_group_t group,xpc_object_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void ___ZN23QMIDesenseCommandDriver9bootstrapENSt3__110shared_ptrI37DesenseCommandDriverDelegateInterfaceEEN3xpc8endpointEN8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t QMIDesenseCommandDriver::shutdown(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  v4[0] = v2 + 88;
  v4[1] = 1;
  MEMORY[0x223C999F0](v2 + 88, a2);
  *(unsigned char *)(v2 + 74) = 0;
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v4);
}

void QMIDesenseCommandDriver::registered(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIDesenseCommandDriver::registered(uint64_t a1, uint64_t a2)
{
}

void QMIDesenseCommandDriver::deregistered(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIDesenseCommandDriver::deregistered(uint64_t a1)
{
}

void QMIDesenseCommandDriver::registerFrequencyReporting(void *a1)
{
  uint64_t v2 = a1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Register for Frequency Reporting", buf, 2u);
  }
  memset(v7, 0, sizeof(v7));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v7);
  *qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyRegistering>((uint64_t)v7, 176) = 2;
  uint64_t v3 = a1[12];
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(buf, a1 + 1);
  uint64_t v5 = *(void *)buf;
  uint64_t v4 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (!*(unsigned char *)(v3 + 72) || !*(void *)(v3 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v15 = v3 + 40;
  uint64_t v16 = QMIServiceMsg::create();
  int v17 = 25000;
  uint64_t v18 = 0;
  char v19 = 0;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  uint64_t v9 = 1174405120;
  uint64_t v10 = ___ZN16QMIVirtualClient4sendIN3nas18IndicationRegister7RequestE20DesenseCommandDriverZN23QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS9_8weak_ptrIT0_EESB__block_invoke;
  uint64_t v11 = &__block_descriptor_tmp_38_9;
  uint64_t v12 = v5;
  unint64_t v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a1;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_22;
  aBlock[3] = &unk_26460F150;
  aBlock[4] = buf;
  uint64_t v6 = _Block_copy(aBlock);
  char v19 = v6;
  if (v16)
  {
    qmi::Client::send();
    uint64_t v6 = v19;
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v7);
}

void sub_222492DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a21);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void QMIDesenseCommandDriver::setFrequencyReportingMode(void *a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = asString();
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Set Frequency reporting mode: %s", (uint8_t *)&buf, 0xCu);
  }
  memset(v12, 0, sizeof(v12));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  void v10[2] = ___ZN23QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingMode_block_invoke;
  void v10[3] = &__block_descriptor_tmp_8_10;
  int v11 = a3;
  uint64_t v6 = qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyReporting>((uint64_t)v12, 176);
  ___ZN23QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingMode_block_invoke((uint64_t)v10, v6);
  uint64_t v7 = a1[12];
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&buf, a1 + 1);
  long long v8 = buf;
  if (*((void *)&buf + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 16), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  if (!*(unsigned char *)(v7 + 72) || !*(void *)(v7 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v13 = v7 + 40;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  int v17 = 0;
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 1174405120;
  xpc_object_t v20 = ___ZN16QMIVirtualClient4sendIN3nas17SetFreqReportMode7RequestE20DesenseCommandDriverZN23QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
  uint64_t v21 = &__block_descriptor_tmp_42_10;
  long long v22 = v8;
  if (*((void *)&v8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  long long v23 = a1;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_22;
  aBlock[3] = &unk_26460F150;
  aBlock[4] = &buf;
  uint64_t v9 = _Block_copy(aBlock);
  int v17 = v9;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v9 = v17;
  }
  if (v9) {
    _Block_release(v9);
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_222493078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v10 = *(std::__shared_weak_count **)(v8 - 88);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va1);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingMode_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void QMIDesenseCommandDriver::processFrequencyInd_sync(QMIDesenseCommandDriver *this, const nas::SetFreqReportMode::RespInd *a2)
{
  uint64_t v110 = 0;
  int v111 = &v110;
  uint64_t v112 = 0x2000000000;
  int v113 = 0;
  v106[0] = MEMORY[0x263EF8330];
  v106[1] = 0x40000000;
  int v107 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke;
  int v108 = &unk_26460EFA0;
  uint64_t v109 = &v110;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
  uint64_t v6 = TlvValue;
  if (TlvValue)
  {
    int v7 = v5;
    uint64_t v95 = TlvValue;
    LOBYTE(v114) = tlv::parseV<nas::tlv::BBStatus>((unint64_t *)&v95, v5);
    if (v95) {
      v107((uint64_t)v106, (unsigned __int8 *)&v114);
    }
    else {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 177, v6, v7);
    }
  }
  if ((*((_DWORD *)v111 + 6) | 2) == 2)
  {
    v102[0] = MEMORY[0x263EF8330];
    v102[1] = 0x40000000;
    CFTypeID v103 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_2;
    CFNumberRef v104 = &__block_descriptor_tmp_12_10;
    char v105 = this;
    uint64_t v8 = (void *)qmi::MessageBase::findTlvValue(a2);
    uint64_t v10 = v8;
    if (v8)
    {
      int v11 = v9;
      char v114 = v8;
      uint64_t v95 = tlv::parseV<nas::tlv::BBCampUplinkFreq>((unint64_t *)&v114, v9);
      long long v96 = v12;
      if (v114) {
        v103((uint64_t)v102, (uint64_t)&v95);
      }
      else {
        ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 187, v10, v11);
      }
    }
  }
  else
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 9) + 48))(*((void *)this + 9), 1);
  }
  uint64_t v95 = 0;
  long long v96 = &v95;
  uint64_t v97 = 0x4002000000;
  uint64_t v98 = __Block_byref_object_copy__7;
  v101[0] = 0;
  v101[1] = 0;
  uint64_t v99 = __Block_byref_object_dispose__7;
  int64_t v100 = v101;
  v90[0] = MEMORY[0x263EF8330];
  v90[1] = 0x40000000;
  std::string::size_type v91 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_13;
  std::string v92 = &unk_26460EFE8;
  uint64_t v93 = &v95;
  unsigned int v94 = this;
  uint64_t v13 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v15 = v13;
  if (v13)
  {
    int v16 = v14;
    BOOL v117 = v13;
    char v114 = (void *)tlv::parseV<nas::tlv::BBCampFreq>((unint64_t *)&v117, v14);
    uint64_t v115 = v17;
    if (v117) {
      ((void (*)(void *, void **))v91)(v90, &v114);
    }
    else {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 178, v15, v16);
    }
  }
  v85[0] = MEMORY[0x263EF8330];
  v85[1] = 0x40000000;
  int v86 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_2_16;
  long long v87 = &unk_26460F010;
  CFTypeID v88 = &v95;
  uint64_t v89 = this;
  uint64_t v18 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  xpc_object_t v20 = v18;
  if (v18)
  {
    int v21 = v19;
    BOOL v117 = v18;
    char v114 = (void *)tlv::parseV<nas::tlv::BBSearchFreq>((unint64_t *)&v117, v19);
    uint64_t v115 = v22;
    if (v117) {
      ((void (*)(void *, void **))v86)(v85, &v114);
    }
    else {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 179, v20, v21);
    }
  }
  v80[0] = MEMORY[0x263EF8330];
  v80[1] = 0x40000000;
  char v81 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_3;
  uint64_t v82 = &unk_26460F038;
  size_t v83 = &v95;
  std::string v84 = this;
  long long v23 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v25 = v23;
  if (v23)
  {
    int v26 = v24;
    uint64_t v116 = 0;
    BOOL v117 = v23;
    char v114 = 0;
    uint64_t v115 = 0;
    tlv::parseV<nas::tlv::BBHoppingList>(&v117, v24, (uint64_t *)&v114);
    std::string::size_type v27 = v117;
    if (v117) {
      v81((uint64_t)v80, (uint64_t *)&v114);
    }
    if (v114)
    {
      uint64_t v115 = v114;
      operator delete(v114);
    }
    if (!v27) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 180, v25, v26);
    }
  }
  v75[0] = MEMORY[0x263EF8330];
  v75[1] = 0x40000000;
  int v76 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_4;
  unsigned int v77 = &unk_26460F060;
  long long v78 = &v95;
  long long v79 = this;
  uint64_t v28 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v30 = v28;
  if (v28)
  {
    int v31 = v29;
    uint64_t v116 = 0;
    BOOL v117 = v28;
    char v114 = 0;
    uint64_t v115 = 0;
    tlv::parseV<nas::tlv::BBNeighborList>(&v117, v29, (uint64_t *)&v114);
    uint64_t v32 = v117;
    if (v117) {
      v76((uint64_t)v75, (uint64_t *)&v114);
    }
    if (v114)
    {
      uint64_t v115 = v114;
      operator delete(v114);
    }
    if (!v32) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 181, v30, v31);
    }
  }
  v70[0] = MEMORY[0x263EF8330];
  v70[1] = 0x40000000;
  uint64_t v71 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_5;
  unint64_t v72 = &unk_26460F088;
  std::string::size_type v73 = &v95;
  std::string v74 = this;
  CFTypeID v33 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v35 = v33;
  if (v33)
  {
    int v36 = v34;
    uint64_t v116 = 0;
    BOOL v117 = v33;
    char v114 = 0;
    uint64_t v115 = 0;
    tlv::parseV<nas::tlv::BBHRPLMNList>(&v117, v34, (uint64_t *)&v114);
    unsigned int v37 = v117;
    if (v117) {
      v71((uint64_t)v70, (uint64_t *)&v114);
    }
    if (v114)
    {
      uint64_t v115 = v114;
      operator delete(v114);
    }
    if (!v37) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 182, v35, v36);
    }
  }
  v65[0] = MEMORY[0x263EF8330];
  v65[1] = 0x40000000;
  int v66 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_6;
  long long v67 = &unk_26460F0B0;
  int v68 = &v95;
  int v69 = this;
  BOOL v38 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v40 = v38;
  if (v38)
  {
    int v41 = v39;
    BOOL v117 = v38;
    char v114 = (void *)tlv::parseV<nas::tlv::BBCampSecondFreq>((unint64_t *)&v117, v39);
    uint64_t v115 = v42;
    if (v117) {
      ((void (*)(void *, void **))v66)(v65, &v114);
    }
    else {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 185, v40, v41);
    }
  }
  v60[0] = MEMORY[0x263EF8330];
  v60[1] = 0x40000000;
  char v61 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_7;
  uint64_t v62 = &unk_26460F0D8;
  long long v63 = &v95;
  uint64_t v64 = this;
  uint64_t v43 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  xpc_object_t v45 = v43;
  if (v43)
  {
    int v46 = v44;
    uint64_t v116 = 0;
    BOOL v117 = v43;
    char v114 = 0;
    uint64_t v115 = 0;
    tlv::parseV<nas::tlv::BBNeighborSecondList>(&v117, v44, (uint64_t *)&v114);
    char v47 = v117;
    if (v117) {
      v61((uint64_t)v60, (uint64_t *)&v114);
    }
    if (v114)
    {
      uint64_t v115 = v114;
      operator delete(v114);
    }
    if (!v47) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 186, v45, v46);
    }
  }
  v55[0] = MEMORY[0x263EF8330];
  v55[1] = 0x40000000;
  unsigned __int16 v56 = ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_8;
  unint64_t v57 = &unk_26460F100;
  uint64_t v58 = &v95;
  size_t v59 = this;
  char v48 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v50 = v48;
  if (v48)
  {
    int v51 = v49;
    uint64_t v116 = 0;
    BOOL v117 = v48;
    char v114 = 0;
    uint64_t v115 = 0;
    tlv::parseV<nas::tlv::DLSCellFrequencyList>(&v117, v49, (uint64_t *)&v114);
    CFBooleanRef v52 = v117;
    if (v117) {
      v56((uint64_t)v55, (uint64_t *)&v114);
    }
    if (v114)
    {
      uint64_t v115 = v114;
      operator delete(v114);
    }
    if (!v52) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 188, v50, v51);
    }
  }
  uint64_t v53 = *((void *)this + 9);
  std::map<unsigned long long,DesenseFreq>::map[abi:ne180100](v54, (uint64_t)(v96 + 5));
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v53 + 32))(v53, 1, v54);
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)v54, (void *)v54[1]);
  _Block_object_dispose(&v95, 8);
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)&v100, v101[0]);
  _Block_object_dispose(&v110, 8);
}

void sub_222493934(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(*(void *)(a1 + 32) + 72) + 40))(*(void *)(*(void *)(a1 + 32) + 72), 1, *(void *)a2, *(unsigned int *)(a2 + 8));
}

void *__Block_byref_object_copy__7(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    void *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_13()
{
  return DesenseCommandDriver::addSingleFrequencyToMap();
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_2_16()
{
  return DesenseCommandDriver::addSingleFrequencyToMap();
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t result = DesenseCommandDriver::addSingleFrequencyToMap();
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t result = DesenseCommandDriver::addSingleFrequencyToMap();
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t result = DesenseCommandDriver::addSingleFrequencyToMap();
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_6()
{
  return DesenseCommandDriver::addSingleFrequencyToMap();
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_7(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t result = DesenseCommandDriver::addSingleFrequencyToMap();
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t ___ZN23QMIDesenseCommandDriver24processFrequencyInd_syncERKN3nas17SetFreqReportMode7RespIndE_block_invoke_8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t result = DesenseCommandDriver::addSingleFrequencyToMap();
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

void std::shared_ptr<QMIDesenseCommandDriver>::shared_ptr[abi:ne180100]<QMIDesenseCommandDriver,std::shared_ptr<QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<QMIDesenseCommandDriver>(QMIDesenseCommandDriver*)::{lambda(QMIDesenseCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_222493D80(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<QMIDesenseCommandDriver>(QMIDesenseCommandDriver*)::{lambda(QMIDesenseCommandDriver*)#1}::operator() const(QMIDesenseCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222493DA8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIDesenseCommandDriver *,std::shared_ptr<QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<QMIDesenseCommandDriver>(QMIDesenseCommandDriver*)::{lambda(QMIDesenseCommandDriver *)#1},std::allocator<QMIDesenseCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIDesenseCommandDriver *,std::shared_ptr<QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<QMIDesenseCommandDriver>(QMIDesenseCommandDriver*)::{lambda(QMIDesenseCommandDriver *)#1},std::allocator<QMIDesenseCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIDesenseCommandDriver *,std::shared_ptr<QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<QMIDesenseCommandDriver>(QMIDesenseCommandDriver*)::{lambda(QMIDesenseCommandDriver *)#1},std::allocator<QMIDesenseCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<QMIDesenseCommandDriver>(QMIDesenseCommandDriver*)::{lambda(QMIDesenseCommandDriver*)#1}::operator() const(QMIDesenseCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI20DesenseCommandDriverE15execute_wrappedIZZN23QMIDesenseCommandDriver9bootstrapENSt3__110shared_ptrI37DesenseCommandDriverDelegateInterfaceEEN3xpc8endpointENS_13group_sessionEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISF_NS7_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(QMIDesenseCommandDriver **)v1;
  nas::SetFreqReportMode::RespInd::RespInd((qmi::MessageBase *)v6, (void *)(v1 + 8));
  QMIDesenseCommandDriver::processFrequencyInd_sync(v2, (const nas::SetFreqReportMode::RespInd *)v6);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v6);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_222493EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va2);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3nas17SetFreqReportMode10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  qmi::Indication<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Indication((qmi::MessageBase *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_222493F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DesenseCommandDriver>::execute_wrapped<QMIDesenseCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIDesenseCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDesenseCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIDesenseCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  QMIVirtualClient::disableNasServingSystemIndications(*(QMIVirtualClient **)v1, (const ctu::OsLogLogger *)(v2 + 40));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 72) + 16))(*(void *)(v2 + 72), 1, 1);
  std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>::~unique_ptr[abi:ne180100](&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_222493FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DesenseCommandDriver>::execute_wrapped<QMIDesenseCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIDesenseCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDesenseCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIDesenseCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)a1;
  (*(void (**)(void, uint64_t, void))(**(void **)(**(void **)a1 + 72) + 16))(*(void *)(**(void **)a1 + 72), 1, 0);
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_222494084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN3nas18IndicationRegister7RequestE20DesenseCommandDriverZN23QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS9_8weak_ptrIT0_EESB__block_invoke(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4])
      {
        uint64_t v7 = a1[6];
        int v8 = *(_DWORD *)(a2 + 4);
        if (!v8)
        {
          uint64_t v10 = *(std::__shared_weak_count **)(v7 + 16);
          if (v10 && std::__shared_weak_count::lock(v10)) {
            operator new();
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v9 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v8;
          __int16 v12 = 2080;
          uint64_t v13 = qmi::asString();
          _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N Could not register with stop report: 0x%x (%s)", buf, 0x12u);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_222494250(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrI20DesenseCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrI20DesenseCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DesenseCommandDriver>::execute_wrapped<QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *a1;
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)**a1 + 24))(**a1, 1, 1);
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v3);
}

void sub_222494324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN3nas17SetFreqReportMode7RequestE20DesenseCommandDriverZN23QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4])
      {
        uint64_t v7 = a1[6];
        int v8 = *((_DWORD *)a2 + 1);
        if (!v8)
        {
          uint64_t v10 = *a2;
          uint64_t v11 = a2[1];
          *(void *)long long buf = v7;
          *(void *)&long long v15 = v10;
          uint64_t v12 = a2[2];
          *((void *)&v15 + 1) = v11;
          uint64_t v16 = v12;
          if (v12) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v13 = *(std::__shared_weak_count **)(v7 + 16);
          if (v13 && std::__shared_weak_count::lock(v13)) {
            operator new();
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v9 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v8;
          LOWORD(v15) = 2080;
          *(void *)((char *)&v15 + 2) = qmi::asString();
          _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N Could not set frequency reporting mode: 0x%x (%s)", buf, 0x12u);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_22249453C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DesenseCommandDriver>::execute_wrapped<QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(QMIDesenseCommandDriver ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *v1;
  nas::SetFreqReportMode::RespInd::RespInd((nas::SetFreqReportMode::RespInd *)v6, (const qmi::ResponseBase *)(v1 + 1));
  QMIDesenseCommandDriver::processFrequencyInd_sync(v2, (const nas::SetFreqReportMode::RespInd *)v6);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v6);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_2224945C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va2);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void QMIClientPool::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_222494664(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10E1C40E9888AC1);
  _Unwind_Resume(a1);
}

uint64_t QMIClientPool::QMIClientPool(uint64_t a1, void *a2)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v7, (const char *)*MEMORY[0x263F03770], "qmi.pool");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v7);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26D4CD460;
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  *(void *)(a1 + 48) = dispatch_queue_create("QMIClientPool.QMIClient.Callback", v5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void QMIClientPool::~QMIClientPool(QMIClientPool *this)
{
  *(void *)this = &unk_26D4CD460;
  uint64_t v2 = (void **)*((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = (void **)*((void *)this + 8);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        QMIClientPool::QMIClientInfo::~QMIClientInfo(v3 - 9);
      while (v3 != v2);
      uint64_t v4 = (void **)*((void *)this + 7);
    }
    *((void *)this + 8) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  MEMORY[0x223C99A30]((char *)this + 8);
}

{
  uint64_t vars8;

  QMIClientPool::~QMIClientPool(this);

  JUMPOUT(0x223C9A950);
}

uint64_t QMIClientPool::requestClient@<X0>(void *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  unsigned __int8 v71 = a2;
  v69[1] = 1;
  uint64_t v70 = a4;
  v69[0] = a1 + 10;
  MEMORY[0x223C999F0]();
  uint64_t v10 = a1[7];
  uint64_t v11 = (void **)a1[8];
  if ((void **)v10 == v11) {
    goto LABEL_54;
  }
  uint64_t v12 = (std::string *)a1[7];
  while (1)
  {
    std::string::size_type size = v12->__r_.__value_.__l.__size_;
    if (!size || *(void *)(size + 8) == -1) {
      break;
    }
    v12 += 3;
    if (v12 == (std::string *)v11) {
      goto LABEL_25;
    }
  }
  if (v12 != (std::string *)v11)
  {
    uint64_t v14 = v12 + 3;
    if (&v12[3] != (std::string *)v11)
    {
      do
      {
        std::string::size_type v15 = v14->__r_.__value_.__l.__size_;
        if (v15 && *(void *)(v15 + 8) != -1)
        {
          std::string::size_type v17 = v14->__r_.__value_.__r.__words[0];
          std::string::size_type v16 = v14->__r_.__value_.__l.__size_;
          if (v16) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
          }
          uint64_t v18 = (std::__shared_weak_count *)v12->__r_.__value_.__l.__size_;
          v12->__r_.__value_.__r.__words[0] = v17;
          v12->__r_.__value_.__l.__size_ = v16;
          if (v18) {
            std::__shared_weak_count::__release_weak(v18);
          }
          v12->__r_.__value_.__s.__data_[16] = v14->__r_.__value_.__s.__data_[16];
          std::string::operator=(v12 + 1, v14 + 1);
          if (v14 != v12) {
            std::vector<std::weak_ptr<QMIVirtualClient>>::__assign_with_size[abi:ne180100]<std::weak_ptr<QMIVirtualClient>*,std::weak_ptr<QMIVirtualClient>*>((uint64_t *)&v12[2], (uint64_t *)v14[2].__r_.__value_.__l.__data_, (uint64_t *)v14[2].__r_.__value_.__l.__size_, (uint64_t)(v14[2].__r_.__value_.__l.__size_ - v14[2].__r_.__value_.__r.__words[0]) >> 4);
          }
          v12 += 3;
        }
        v14 += 3;
      }
      while (v14 != (std::string *)v11);
      uint64_t v10 = a1[7];
      uint64_t v11 = (void **)a1[8];
    }
  }
  if (v12 == (std::string *)v11)
  {
LABEL_25:
    uint64_t v12 = (std::string *)v11;
    goto LABEL_26;
  }
  while (v11 != (void **)v12)
  {
    v11 -= 9;
    QMIClientPool::QMIClientInfo::~QMIClientInfo(v11);
  }
  a1[8] = v12;
  uint64_t v10 = a1[7];
LABEL_26:
  if ((std::string *)v10 == v12)
  {
LABEL_54:
    memset(&v66, 0, sizeof(v66));
    std::string::basic_string[abi:ne180100]<0>(&v66, "QMIClientPool: ");
    int v30 = v71;
    int v31 = (const char *)qmi::asShortString();
    size_t v32 = strlen(v31);
    std::string::append(&v66, v31, v32);
    CFTypeID v33 = a1[1];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = qmi::asShortString();
      uint64_t v35 = a3;
      if (*((char *)a3 + 23) < 0) {
        uint64_t v35 = (uint64_t *)*a3;
      }
      int v36 = &v66;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v36 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = v34;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v30;
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v35;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v36;
      _os_log_impl(&dword_22231A000, v33, OS_LOG_TYPE_DEFAULT, "#I Create QMI client of type=%s(%d) for service=%{public}s, clientName='%{public}s'", buf, 0x26u);
    }
    unsigned int v37 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v38 = &v66;
    }
    else {
      BOOL v38 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    int v39 = dispatch_queue_create((const char *)v38, v37);
    dispatch_object_t object = v39;
    *(void *)long long buf = a1;
    *(void *)&uint8_t buf[8] = &object;
    *(void *)&uint8_t buf[16] = &v66;
    *(void *)&unsigned char buf[24] = &v71;
    *(void *)&unsigned char buf[32] = a3;
    unsigned int v77 = &v70;
    uint64_t v78 = a5;
    uint64_t v40 = MEMORY[0x263EF8330];
    *a6 = 0;
    a6[1] = 0;
    *(void *)&long long block = v40;
    *((void *)&block + 1) = 0x40000000;
    *(void *)&long long v73 = ___ZN8dispatch9sync_implIZN13QMIClientPool13requestClientEN3qmi11ServiceTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEP24QMIVirtualClientCallbackN3xpc10connectionEE3__0EENS4_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    *((void *)&v73 + 1) = &__block_descriptor_tmp_38_6;
    std::string v74 = a6;
    long long v75 = buf;
    dispatch_sync(v39, &block);
    if (object) {
      dispatch_release(object);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v69);
  }
  while (1)
  {
    int v19 = *(long long **)(v10 + 48);
    xpc_object_t v20 = *(long long **)(v10 + 56);
    if (v19 != v20)
    {
      int v21 = v19 + 1;
      while (1)
      {
        uint64_t v22 = *((void *)v21 - 1);
        if (!v22 || *(void *)(v22 + 8) == -1) {
          break;
        }
        if (v21++ == v20) {
          goto LABEL_50;
        }
      }
      int v24 = v21 - 1;
      if (v21 - 1 != v20 && v21 != v20)
      {
        do
        {
          uint64_t v25 = *((void *)v21 + 1);
          if (v25 && *(void *)(v25 + 8) != -1)
          {
            long long v26 = *v21;
            *(void *)int v21 = 0;
            *((void *)v21 + 1) = 0;
            std::string::size_type v27 = (std::__shared_weak_count *)*((void *)v24 + 1);
            *int v24 = v26;
            if (v27) {
              std::__shared_weak_count::__release_weak(v27);
            }
            ++v24;
          }
          ++v21;
        }
        while (v21 != v20);
        xpc_object_t v20 = *(long long **)(v10 + 56);
      }
      if (v24 != v20)
      {
        while (v20 != v24)
        {
          uint64_t v28 = (std::__shared_weak_count *)*((void *)v20 - 1);
          if (v28) {
            std::__shared_weak_count::__release_weak(v28);
          }
          --v20;
        }
        *(void *)(v10 + 56) = v24;
      }
    }
LABEL_50:
    long long block = 0u;
    long long v73 = 0u;
    qmi::Client::Client();
    if (!(void)v73) {
      goto LABEL_53;
    }
    int SvcType = qmi::Client::getSvcType((qmi::Client *)&block);
    if (SvcType == v71) {
      break;
    }
    qmi::Client::release((qmi::Client *)&block);
LABEL_53:
    qmi::Client::~Client((qmi::Client *)&block);
    v10 += 72;
    if (v10 == a1[8]) {
      goto LABEL_54;
    }
  }
  int v41 = a1[1];
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = SvcType;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = a3;
    _os_log_impl(&dword_22231A000, v41, OS_LOG_TYPE_DEFAULT, "#I Reuse existing QMI client of type=%d for service=%{public}s", buf, 0x12u);
  }
  int v42 = (std::__shared_weak_count *)a1[3];
  if (!v42 || (uint64_t v43 = a1[2], (v44 = std::__shared_weak_count::lock(v42)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v45 = v44;
  std::allocate_shared[abi:ne180100]<QMIVirtualClient,std::allocator<QMIVirtualClient>,std::shared_ptr<QMIClientPool>,qmi::Client &,QMIVirtualClientCallback *&,void>(buf, v43, v44, (uint64_t)&block, &v70);
  long long v64 = *(_OWORD *)buf;
  std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  if (*((void *)&v64 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v46 = *(void *)(v10 + 64);
  char v47 = *(_OWORD **)(v10 + 56);
  if ((unint64_t)v47 >= v46)
  {
    uint64_t v49 = *(void *)(v10 + 48);
    uint64_t v50 = ((uint64_t)v47 - v49) >> 4;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v52 = v46 - v49;
    if (v52 >> 3 > v51) {
      unint64_t v51 = v52 >> 3;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    *(void *)&unsigned char buf[32] = v10 + 64;
    uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::weak_ptr<QMIVirtualClient>>>(v53);
    unsigned __int16 v56 = &v54[16 * v50];
    *(_OWORD *)unsigned __int16 v56 = v64;
    char v48 = v56 + 16;
    uint64_t v58 = *(void **)(v10 + 48);
    unint64_t v57 = *(void **)(v10 + 56);
    if (v57 == v58)
    {
      int64x2_t v60 = vdupq_n_s64((unint64_t)v57);
    }
    else
    {
      do
      {
        long long v59 = *((_OWORD *)v57 - 1);
        v57 -= 2;
        *((_OWORD *)v56 - 1) = v59;
        v56 -= 16;
        void *v57 = 0;
        v57[1] = 0;
      }
      while (v57 != v58);
      int64x2_t v60 = *(int64x2_t *)(v10 + 48);
    }
    *(void *)(v10 + 48) = v56;
    *(void *)(v10 + 56) = v48;
    *(int64x2_t *)&uint8_t buf[8] = v60;
    uint64_t v61 = *(void *)(v10 + 64);
    *(void *)(v10 + 64) = &v54[16 * v55];
    *(void *)&unsigned char buf[24] = v61;
    *(void *)long long buf = v60.i64[0];
    std::__split_buffer<std::weak_ptr<QMIVirtualClient>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *char v47 = v64;
    char v48 = v47 + 1;
    *(void *)(v10 + 56) = v47 + 1;
  }
  *(void *)(v10 + 56) = v48;
  if (*(unsigned char *)(v10 + 16))
  {
    uint64_t v62 = a1[6];
    v67[0] = MEMORY[0x263EF8330];
    v67[1] = 1174405120;
    void v67[2] = ___ZN13QMIClientPool13requestClientEN3qmi11ServiceTypeENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke;
    v67[3] = &__block_descriptor_tmp_43;
    long long v68 = v64;
    if (*((void *)&v64 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    dispatch_async(v62, v67);
    if (*((void *)&v68 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
    }
  }
  *(_OWORD *)a6 = v64;
  qmi::Client::~Client((qmi::Client *)&block);
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v69);
}

void sub_222494FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v28)
  {
    std::__shared_weak_count::__release_weak(v28);
    qmi::Client::~Client((qmi::Client *)&a28);
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  else
  {
    qmi::Client::~Client((qmi::Client *)&a28);
  }
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void ___ZN13QMIClientPool13requestClientEN3qmi11ServiceTypeENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  v4[0] = v2;
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIVirtualClient::dispatchRegistered(v2, v4);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_2224950B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIVirtualClient::dispatchRegistered(uint64_t a1, uint64_t *a2)
{
  v9[0] = a1 + 88;
  v9[1] = 1;
  MEMORY[0x223C999F0]();
  if (*(unsigned char *)(a1 + 74))
  {
    if (!*(unsigned char *)(a1 + 73))
    {
      uint64_t v4 = *(void *)(a1 + 80);
      if (v4)
      {
        uint64_t v5 = (std::__shared_weak_count *)a2[1];
        uint64_t v7 = *a2;
        int v8 = v5;
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 16))(v4, &v7);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        *(unsigned char *)(a1 + 73) = 1;
      }
    }
  }
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
}

void sub_222495180(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16QMIVirtualClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16QMIVirtualClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = v3 + 80;
        MEMORY[0x223C999F0](v3 + 80);
        qmi::Client::Client();
        uint64_t QMIClientInfo = QMIClientPool::findQMIClientInfo(v3, (uint64_t)v14);
        qmi::Client::~Client((qmi::Client *)v14);
        if (*(void *)(v3 + 64) == QMIClientInfo) {
          __TUAssertTrigger();
        }
        for (uint64_t i = *(uint64_t **)(QMIClientInfo + 48); i != *(uint64_t **)(QMIClientInfo + 56); i += 2)
        {
          int v9 = (std::__shared_weak_count *)i[1];
          if (v9)
          {
            uint64_t v10 = std::__shared_weak_count::lock(v9);
            if (v10)
            {
              uint64_t v11 = v10;
              uint64_t v12 = *i;
              if (*i)
              {
                v13[0] = *i;
                v13[1] = (uint64_t)v11;
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
                QMIVirtualClient::dispatchRegistered(v12, v13);
                std::__shared_weak_count::__release_shared[abi:ne180100](v11);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
          }
        }
        *(unsigned char *)(QMIClientInfo + 16) = 1;
        MEMORY[0x223C99A00](v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2224952E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIClientPool::findQMIClientInfo(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return *(void *)(a1 + 64);
  }
  for (uint64_t i = *(void *)(a1 + 56); i != *(void *)(a1 + 64); i += 72)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    qmi::Client::Client();
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = v9;
    qmi::Client::~Client((qmi::Client *)&v8);
    if (v5 == v6) {
      break;
    }
  }
  return i;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke_9(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = v3 + 80;
        MEMORY[0x223C999F0](v3 + 80);
        qmi::Client::Client();
        uint64_t QMIClientInfo = QMIClientPool::findQMIClientInfo(v3, (uint64_t)v14);
        qmi::Client::~Client((qmi::Client *)v14);
        if (*(void *)(v3 + 64) == QMIClientInfo) {
          __TUAssertTrigger();
        }
        for (uint64_t i = *(uint64_t **)(QMIClientInfo + 48); i != *(uint64_t **)(QMIClientInfo + 56); i += 2)
        {
          long long v9 = (std::__shared_weak_count *)i[1];
          if (v9)
          {
            uint64_t v10 = std::__shared_weak_count::lock(v9);
            if (v10)
            {
              uint64_t v11 = v10;
              uint64_t v12 = *i;
              if (*i)
              {
                v13[0] = *i;
                v13[1] = (uint64_t)v11;
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
                QMIVirtualClient::dispatchDeregistered(v12, v13);
                std::__shared_weak_count::__release_shared[abi:ne180100](v11);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
          }
        }
        *(unsigned char *)(QMIClientInfo + 16) = 0;
        MEMORY[0x223C99A00](v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22249550C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIVirtualClient::dispatchDeregistered(uint64_t a1, uint64_t *a2)
{
  v9[0] = a1 + 88;
  v9[1] = 1;
  MEMORY[0x223C999F0]();
  if (*(unsigned char *)(a1 + 74))
  {
    if (*(unsigned char *)(a1 + 73))
    {
      uint64_t v4 = *(void *)(a1 + 80);
      if (v4)
      {
        uint64_t v5 = (std::__shared_weak_count *)a2[1];
        uint64_t v7 = *a2;
        long long v8 = v5;
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 24))(v4, &v7);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        *(unsigned char *)(a1 + 73) = 0;
      }
    }
  }
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
}

void sub_2224955FC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke_13(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = v5 + 80;
        MEMORY[0x223C999F0](v5 + 80);
        qmi::Client::Client();
        uint64_t QMIClientInfo = QMIClientPool::findQMIClientInfo(v5, (uint64_t)v16);
        qmi::Client::~Client((qmi::Client *)v16);
        if (*(void *)(v5 + 64) == QMIClientInfo) {
          __TUAssertTrigger();
        }
        for (uint64_t i = *(uint64_t **)(QMIClientInfo + 48); i != *(uint64_t **)(QMIClientInfo + 56); i += 2)
        {
          uint64_t v11 = (std::__shared_weak_count *)i[1];
          if (v11)
          {
            uint64_t v12 = std::__shared_weak_count::lock(v11);
            if (v12)
            {
              uint64_t v13 = v12;
              uint64_t v14 = *i;
              if (*i)
              {
                atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                v19[0] = v14 + 88;
                v19[1] = 1;
                MEMORY[0x223C999F0]();
                if (*(unsigned char *)(v14 + 74))
                {
                  if (*(unsigned char *)(v14 + 73))
                  {
                    uint64_t v15 = *(void *)(v14 + 80);
                    if (v15)
                    {
                      uint64_t v17 = v14;
                      uint64_t v18 = v13;
                      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
                      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, &v17, a2, 1);
                      if (v18) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                      }
                    }
                  }
                }
                std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v19);
                std::__shared_weak_count::__release_shared[abi:ne180100](v13);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
        }
        MEMORY[0x223C99A00](v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_2224957A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke_18(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = v3 + 80;
        MEMORY[0x223C999F0](v3 + 80);
        qmi::Client::Client();
        uint64_t QMIClientInfo = QMIClientPool::findQMIClientInfo(v3, (uint64_t)v15);
        qmi::Client::~Client((qmi::Client *)v15);
        if (*(void *)(v3 + 64) == QMIClientInfo) {
          __TUAssertTrigger();
        }
        long long v9 = *(uint64_t **)(QMIClientInfo + 48);
        for (uint64_t i = *(uint64_t **)(QMIClientInfo + 56); v9 != i; v9 += 2)
        {
          uint64_t v10 = (std::__shared_weak_count *)v9[1];
          if (v10)
          {
            uint64_t v11 = std::__shared_weak_count::lock(v10);
            if (v11)
            {
              uint64_t v12 = v11;
              uint64_t v13 = *v9;
              if (*v9)
              {
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
                v18[0] = v13 + 88;
                v18[1] = 1;
                MEMORY[0x223C999F0]();
                if (*(unsigned char *)(v13 + 74))
                {
                  if (*(unsigned char *)(v13 + 73))
                  {
                    uint64_t v14 = *(void *)(v13 + 80);
                    if (v14)
                    {
                      uint64_t v16 = v13;
                      uint64_t v17 = v12;
                      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                      (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 40))(v14, &v16);
                      if (v17) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                      }
                    }
                  }
                }
                std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v18);
                std::__shared_weak_count::__release_shared[abi:ne180100](v12);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
          }
        }
        MEMORY[0x223C99A00](v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22249597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  qmi::Client::~Client((qmi::Client *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t QMIClientPool::registerUnsolicitedHandler(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v27[0] = a1 + 80;
  v27[1] = 1;
  MEMORY[0x223C999F0]();
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v8 = *(void *)(a2 + 24);
  v26[2] = *(void *)(a2 + 16);
  v26[3] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t QMIClientInfo = QMIClientPool::findQMIClientInfo(a1, (uint64_t)v26);
  qmi::Client::~Client((qmi::Client *)v26);
  if (*(void *)(a1 + 64) == QMIClientInfo) {
    __TUAssertTrigger();
  }
  for (uint64_t i = *(uint64_t **)(QMIClientInfo + 48); i != *(uint64_t **)(QMIClientInfo + 56); i += 2)
  {
    uint64_t v11 = (std::__shared_weak_count *)i[1];
    if (v11)
    {
      uint64_t v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        uint64_t v13 = *i;
        if (*i)
        {
          if (v13 != a3)
          {
            uint64_t v16 = *(void *)(v13 + 24);
            uint64_t v14 = v13 + 24;
            uint64_t v15 = v16;
            if (v16)
            {
              uint64_t v17 = v14;
              do
              {
                unsigned int v18 = *(unsigned __int16 *)(v15 + 32);
                BOOL v19 = v18 >= a4;
                if (v18 >= a4) {
                  xpc_object_t v20 = (uint64_t *)v15;
                }
                else {
                  xpc_object_t v20 = (uint64_t *)(v15 + 8);
                }
                if (v19) {
                  uint64_t v17 = v15;
                }
                uint64_t v15 = *v20;
              }
              while (*v20);
              if (v17 != v14 && *(unsigned __int16 *)(v17 + 32) <= a4)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v12);
                return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v27);
              }
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    qmi::Client::operator std::weak_ptr<qmi::Client::State>();
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 1174405120;
    _OWORD v22[2] = ___ZN13QMIClientPool26registerUnsolicitedHandlerEN3qmi6ClientEPK16QMIVirtualClientt_block_invoke;
    v22[3] = &__block_descriptor_tmp_27_7;
    void v22[4] = a1;
    void v22[5] = 0;
    long long v23 = 0;
    void v27[2] = MEMORY[0x263EF8330];
    v27[3] = 0x40000000;
    void v27[4] = ___ZNK3qmi6Client13setIndHandlerIRKNS_14IndicationBaseEEEvtU13block_pointerFvT_E_block_invoke;
    void v27[5] = &unk_26460F1B8;
    v27[6] = v22;
    qmi::Client::setIndHandler();
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    if (v25) {
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v27);
}

void sub_222495BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void ___ZN13QMIClientPool26registerUnsolicitedHandlerEN3qmi6ClientEPK16QMIVirtualClientt_block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  qmi::Client::Client();
  v31[0] = v3 + 80;
  v31[1] = 1;
  MEMORY[0x223C999F0]();
  v30[0] = 0;
  v30[1] = 0;
  _OWORD v30[2] = v28;
  v30[3] = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t QMIClientInfo = QMIClientPool::findQMIClientInfo(v3, (uint64_t)v30);
  qmi::Client::~Client((qmi::Client *)v30);
  if (*(void *)(v3 + 64) == QMIClientInfo) {
    __TUAssertTrigger();
  }
  for (uint64_t i = *(uint64_t **)(QMIClientInfo + 48); i != *(uint64_t **)(QMIClientInfo + 56); i += 2)
  {
    uint64_t v6 = (std::__shared_weak_count *)i[1];
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *i;
        if (*i)
        {
          v32[0] = v9 + 88;
          v32[1] = 1;
          MEMORY[0x223C999F0]();
          if (*(unsigned char *)(v9 + 74))
          {
            if (*(unsigned char *)(v9 + 72))
            {
              uint64_t v12 = *(uint64_t **)(v9 + 24);
              uint64_t v11 = (uint64_t *)(v9 + 24);
              uint64_t v10 = v12;
              if (v12)
              {
                unsigned int v13 = *a2;
                uint64_t v14 = v11;
                uint64_t v15 = v10;
                do
                {
                  unsigned int v16 = *((unsigned __int16 *)v15 + 16);
                  BOOL v17 = v16 >= v13;
                  if (v16 >= v13) {
                    unsigned int v18 = (uint64_t **)v15;
                  }
                  else {
                    unsigned int v18 = (uint64_t **)(v15 + 1);
                  }
                  if (v17) {
                    uint64_t v14 = v15;
                  }
                  uint64_t v15 = *v18;
                }
                while (*v18);
                if (v14 != v11 && v13 >= *((unsigned __int16 *)v14 + 16))
                {
                  do
                  {
                    while (1)
                    {
                      BOOL v19 = (uint64_t **)v10;
                      unsigned int v20 = *((unsigned __int16 *)v10 + 16);
                      if (v20 <= v13) {
                        break;
                      }
                      uint64_t v10 = *v19;
                      if (!*v19)
                      {
                        long long v26 = a2;
                        int v21 = v19;
                        goto LABEL_28;
                      }
                    }
                    if (v20 >= v13) {
                      goto LABEL_29;
                    }
                    uint64_t v10 = v19[1];
                  }
                  while (v10);
                  long long v26 = a2;
                  int v21 = v19 + 1;
LABEL_28:
                  v33[2] = 1;
                  uint64_t v22 = operator new(0x30uLL);
                  v33[1] = v11;
                  v22[16] = v13;
                  *((void *)v22 + 5) = 0;
                  std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at((uint64_t **)v11 - 1, (uint64_t)v19, v21, (uint64_t *)v22);
                  v33[0] = 0;
                  std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33, 0);
                  BOOL v19 = (uint64_t **)v22;
                  a2 = v26;
LABEL_29:
                  long long v23 = v19[5];
                  if (v23)
                  {
                    uint64_t v24 = _Block_copy(v23);
                    uint64_t v25 = v24;
                    if (v24)
                    {
                      (*((void (**)(void *, unsigned __int16 *))v24 + 2))(v24, a2);
                      _Block_release(v25);
                    }
                  }
                }
              }
            }
          }
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v32);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v31);
  qmi::Client::~Client((qmi::Client *)v27);
}

void sub_222495E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  _Block_release(v21);
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a20);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a18);
  qmi::Client::~Client((qmi::Client *)&a10);
  _Unwind_Resume(a1);
}

void QMIClientPool::QMIClientInfo::~QMIClientInfo(void **this)
{
  uint64_t v3 = this + 6;
  std::vector<std::weak_ptr<QMIVirtualClient>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t QMIVirtualClient::disconnect(QMIVirtualClient *this, uint64_t a2)
{
  v4[0] = (char *)this + 88;
  v4[1] = 1;
  MEMORY[0x223C999F0]((char *)this + 88, a2);
  *((unsigned char *)this + 74) = 0;
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v4);
}

void QMIVirtualClient::disableNasServingSystemIndications(QMIVirtualClient *this, const ctu::OsLogLogger *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = *((void *)this + 8);
  v3[2] = *((void *)this + 7);
  void v3[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  disableNasServingSystemIndications((uint64_t)a2, (qmi::Client *)v3);
  qmi::Client::~Client((qmi::Client *)v3);
}

void sub_222495FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::weak_ptr<QMIVirtualClient>>::__assign_with_size[abi:ne180100]<std::weak_ptr<QMIVirtualClient>*,std::weak_ptr<QMIVirtualClient>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v9)
    {
      std::vector<std::weak_ptr<QMIVirtualClient>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::weak_ptr<QMIVirtualClient>>::__vallocate[abi:ne180100](a1, v11);
    for (uint64_t i = (uint64_t *)a1[1]; v6 != a3; v6 += 2)
    {
      uint64_t v13 = v6[1];
      *uint64_t i = *v6;
      i[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
LABEL_20:
    a1[1] = (uint64_t)i;
    return;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIVirtualClient> *,std::weak_ptr<QMIVirtualClient> *,std::weak_ptr<QMIVirtualClient> *>(a2, v15, v9);
    for (uint64_t i = (uint64_t *)a1[1]; v15 != a3; v15 += 2)
    {
      uint64_t v16 = v15[1];
      *uint64_t i = *v15;
      i[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    goto LABEL_20;
  }
  BOOL v17 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIVirtualClient> *,std::weak_ptr<QMIVirtualClient> *,std::weak_ptr<QMIVirtualClient> *>(a2, a3, v9);
  for (uint64_t j = (void *)a1[1]; j != v17; j -= 2)
  {
    BOOL v19 = (std::__shared_weak_count *)*(j - 1);
    if (v19) {
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  a1[1] = (uint64_t)v17;
}

char *std::vector<std::weak_ptr<QMIVirtualClient>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::weak_ptr<QMIVirtualClient>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIVirtualClient> *,std::weak_ptr<QMIVirtualClient> *,std::weak_ptr<QMIVirtualClient> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::weak_ptr<QMIVirtualClient>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::weak_ptr<QMIVirtualClient>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::weak_ptr<QMIVirtualClient>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::construct_at[abi:ne180100]<QMIClientPool::QMIClientInfo,QMIClientPool::QMIClientInfo,QMIClientPool::QMIClientInfo*>(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 8);
  a1->__r_.__value_.__r.__words[0] = *(void *)a2;
  a1->__r_.__value_.__l.__size_ = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  a1->__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 1, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&a1[1].__r_.__value_.__l.__data_ = v5;
  }
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::weak_ptr<QMIVirtualClient>>::__init_with_size[abi:ne180100]<std::weak_ptr<QMIVirtualClient>*,std::weak_ptr<QMIVirtualClient>*>((char *)&a1[2], *(void **)(a2 + 48), *(void **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  return a1;
}

void sub_222496374(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::weak_ptr<QMIVirtualClient>>::__init_with_size[abi:ne180100]<std::weak_ptr<QMIVirtualClient>*,std::weak_ptr<QMIVirtualClient>*>(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::weak_ptr<QMIVirtualClient>>::__vallocate[abi:ne180100](result, a4);
    for (uint64_t i = (void *)*((void *)v6 + 1); a2 != a3; a2 += 2)
    {
      *uint64_t i = *a2;
      uint64_t v8 = a2[1];
      i[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_222496430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::weak_ptr<QMIVirtualClient>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<QMIVirtualClient>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<QMIClientPool::QMIClientInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    QMIClientPool::QMIClientInfo::~QMIClientInfo((void **)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::shared_ptr<QMIClientPool>::shared_ptr[abi:ne180100]<QMIClientPool,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_222496568(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<QMIClientPool *,std::shared_ptr<QMIClientPool>::__shared_ptr_default_delete<QMIClientPool,QMIClientPool>,std::allocator<QMIClientPool>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<QMIClientPool *,std::shared_ptr<QMIClientPool>::__shared_ptr_default_delete<QMIClientPool,QMIClientPool>,std::allocator<QMIClientPool>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIClientPool *,std::shared_ptr<QMIClientPool>::__shared_ptr_default_delete<QMIClientPool,QMIClientPool>,std::allocator<QMIClientPool>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::allocate_shared[abi:ne180100]<QMIVirtualClient,std::allocator<QMIVirtualClient>,std::shared_ptr<QMIClientPool>,qmi::Client &,QMIVirtualClientCallback *&,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = operator new(0x78uLL);
  unint64_t v11 = v10;
  v10[1] = 0;
  void v10[2] = 0;
  *uint64_t v10 = &unk_26D4CD6E0;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t v13 = *(void *)(a4 + 24);
  void v15[2] = v12;
  void v15[3] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *a5;
  void v10[3] = a2;
  void v10[4] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v10[8] = 0;
  v10[7] = 0;
  void v10[6] = 0;
  void v10[5] = v10 + 6;
  v10[9] = 0;
  v10[10] = v12;
  _OWORD v10[11] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)v10 + 48) = 1;
  *((unsigned char *)v10 + 98) = 1;
  v10[13] = v14;
  *((_DWORD *)v10 + 28) = 0;
  if (!v12) {
    __TUAssertTrigger();
  }
  qmi::Client::~Client((qmi::Client *)v15);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *a1 = v11 + 3;
  a1[1] = v11;
}

void sub_222496778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::Client::~Client(v11);
  std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::destroy(&v9[2].~__shared_weak_count);
  unint64_t shared_owners = (std::__shared_weak_count *)v9[1].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  qmi::Client::~Client((qmi::Client *)&a9);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QMIVirtualClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CD6E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIVirtualClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4CD6E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<QMIVirtualClient>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 104))
  {
    v3[0] = 0;
    v3[1] = 0;
    QMIVirtualClient::dispatchDeregistered(a1 + 24, v3);
  }
  qmi::Client::~Client((qmi::Client *)(a1 + 64));
  std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::destroy(*(void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN8dispatch9sync_implIZN13QMIClientPool13requestClientEN3qmi11ServiceTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEP24QMIVirtualClientCallbackN3xpc10connectionEE3__0EENS4_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  uint64_t v2 = (dispatch_object_t *)v1[1];
  std::string::size_type v4 = *v2;
  if (*v2) {
    dispatch_retain(*v2);
  }
  long long v5 = (long long *)v1[4];
  uint64_t v6 = *(void *)v1[5];
  uint64_t v7 = (xpc_object_t *)v1[6];
  xpc_object_t v8 = *v7;
  if (*v7) {
    xpc_retain(*v7);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  uint64_t v105 = v6;
  dispatch_object_t v102 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  long long v103 = 0u;
  long long v104 = 0u;
  uint64_t v9 = *(std::__shared_weak_count **)(v3 + 24);
  if (!v9 || (uint64_t v10 = *(void *)(v3 + 16), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  uint64_t v100 = v10;
  unint64_t v101 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (MEMORY[0x223C9AD60](v8) == MEMORY[0x263EF86F0] && (xpc_object_t v99 = v8) != 0) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t v99 = xpc_null_create();
  }
  qmi::Client::createWithQueue();
  xpc_release(v99);
  xpc_object_t v99 = 0;
  std::__shared_weak_count::__release_weak(v101);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (v102) {
    dispatch_release(v102);
  }
  if (!(void)v104) {
    __TUAssertTrigger();
  }
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  qmi::Client::operator std::weak_ptr<qmi::Client::State>();
  uint64_t v90 = MEMORY[0x263EF8330];
  uint64_t v91 = 1174405120;
  std::string v92 = ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke;
  uint64_t v93 = &__block_descriptor_tmp_8_17;
  uint64_t v94 = v3;
  uint64_t v95 = 0;
  long long v96 = 0;
  qmi::Client::setHandler();
  uint64_t v83 = MEMORY[0x263EF8330];
  uint64_t v84 = 1174405120;
  long long v85 = ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke_9;
  int v86 = &__block_descriptor_tmp_12_18;
  uint64_t v87 = v3;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  qmi::Client::setHandler();
  uint64_t v76 = MEMORY[0x263EF8330];
  uint64_t v77 = 1174405120;
  uint64_t v78 = ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke_13;
  uint64_t v79 = &__block_descriptor_tmp_17_14;
  uint64_t v80 = v3;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  qmi::Client::setHandler();
  v74[1] = MEMORY[0x263EF8330];
  v74[2] = 1174405120;
  v74[3] = ___ZN13QMIClientPool26createVirtualClientOnQueueEN8dispatch5queueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3qmi11ServiceTypeESA_P24QMIVirtualClientCallbackN3xpc10connectionE_block_invoke_18;
  v74[4] = &__block_descriptor_tmp_21_10;
  v74[5] = v3;
  v74[6] = 0;
  long long v75 = 0;
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  long long v67 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v3 + 24);
  if (!v13 || (uint64_t v14 = *(void *)(v3 + 16), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = v15;
  std::allocate_shared[abi:ne180100]<QMIVirtualClient,std::allocator<QMIVirtualClient>,std::shared_ptr<QMIClientPool>,qmi::Client &,QMIVirtualClientCallback *&,void>(&v67, v14, v15, (uint64_t)&v103, &v105);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  qmi::Client::operator std::weak_ptr<qmi::Client::State>();
  long long v65 = v67;
  BOOL v17 = (std::__shared_weak_count *)*((void *)&v67 + 1);
  if (*((void *)&v67 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v67 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v70[0] = v68;
  v70[1] = v69;
  if (v69) {
    atomic_fetch_add_explicit(&v69->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v71 = 0;
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v18 = *v5;
    v72.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v18;
  }
  int64x2_t v73 = 0uLL;
  v74[0] = 0;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = v73.i64[1];
    uint64_t v19 = v74[0];
    if (v73.i64[1] < v74[0])
    {
      *(_OWORD *)v73.i64[1] = v65;
      int v21 = (_OWORD *)(v20 + 16);
      v73.i64[1] = (uint64_t)v21;
      goto LABEL_43;
    }
    uint64_t v22 = v73.i64[0];
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v23 = (v20 - v22) >> 4;
  if ((unint64_t)(v23 + 1) >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v24 = v19 - v22;
  uint64_t v25 = v24 >> 3;
  if (v24 >> 3 <= (unint64_t)(v23 + 1)) {
    uint64_t v25 = v23 + 1;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v25;
  }
  int v108 = v74;
  std::string::size_type v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::weak_ptr<QMIVirtualClient>>>(v26);
  uint64_t v29 = &v27[16 * v23];
  *(_OWORD *)uint64_t v29 = v65;
  int v21 = v29 + 16;
  int v30 = (void *)v73.i64[1];
  int v31 = (void *)v73.i64[0];
  if (v73.i64[1] == v73.i64[0])
  {
    int64x2_t v33 = vdupq_n_s64(v73.u64[1]);
  }
  else
  {
    do
    {
      long long v32 = *((_OWORD *)v30 - 1);
      v30 -= 2;
      *((_OWORD *)v29 - 1) = v32;
      v29 -= 16;
      *int v30 = 0;
      v30[1] = 0;
    }
    while (v30 != v31);
    int64x2_t v33 = v73;
  }
  v73.i64[0] = (uint64_t)v29;
  v73.i64[1] = (uint64_t)v21;
  *(int64x2_t *)int v107 = v33;
  uint64_t v34 = v74[0];
  v74[0] = &v27[16 * v28];
  *(void *)&v107[16] = v34;
  char v106 = (char *)v33.i64[0];
  std::__split_buffer<std::weak_ptr<QMIVirtualClient>>::~__split_buffer((uint64_t)&v106);
LABEL_43:
  v73.i64[1] = (uint64_t)v21;
  unint64_t v35 = *(void *)(v3 + 72);
  unint64_t v36 = *(void *)(v3 + 64);
  if (v36 >= v35)
  {
    uint64_t v38 = *(void *)(v3 + 56);
    unint64_t v39 = 0x8E38E38E38E38E39 * ((uint64_t)(v36 - v38) >> 3);
    if (v39 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v40 = 0x8E38E38E38E38E39 * ((uint64_t)(v35 - v38) >> 3);
    uint64_t v41 = 2 * v40;
    if (2 * v40 <= v39 + 1) {
      uint64_t v41 = v39 + 1;
    }
    if (v40 >= 0x1C71C71C71C71C7) {
      unint64_t v42 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v42 = v41;
    }
    int v108 = (void *)(v3 + 72);
    if (v42)
    {
      if (v42 > 0x38E38E38E38E38ELL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v43 = (char *)operator new(72 * v42);
    }
    else
    {
      uint64_t v43 = 0;
    }
    char v106 = v43;
    *(void *)int v107 = &v43[72 * v39];
    *(void *)&v107[8] = *(void *)v107;
    *(void *)&v107[16] = &v43[72 * v42];
    std::construct_at[abi:ne180100]<QMIClientPool::QMIClientInfo,QMIClientPool::QMIClientInfo,QMIClientPool::QMIClientInfo*>(*(std::string **)v107, (uint64_t)v70);
    uint64_t v44 = 0;
    uint64_t v45 = *(void *)v107;
    *(void *)&v107[8] += 72;
    uint64_t v47 = *(void *)(v3 + 56);
    uint64_t v46 = *(void *)(v3 + 64);
    while (1)
    {
      uint64_t v48 = v44;
      uint64_t v49 = v46 + v44;
      if (v49 == v47) {
        break;
      }
      uint64_t v50 = v45 + v48;
      *(void *)(v50 - 72) = *(void *)(v49 - 72);
      uint64_t v51 = *(void *)(v49 - 64);
      *(void *)(v50 - 64) = v51;
      if (v51) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 16), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(v50 - 56) = *(unsigned char *)(v49 - 56);
      uint64_t v52 = (std::string *)(v50 - 48);
      unint64_t v53 = (const std::string::value_type **)(v46 + v48 - 48);
      if (*(char *)(v49 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(v52, *v53, *(void *)(v46 + v48 - 40));
      }
      else
      {
        long long v54 = *(_OWORD *)v53;
        v52->__r_.__value_.__r.__words[2] = *(void *)(v46 + v48 - 32);
        *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v54;
      }
      uint64_t v55 = v45 + v48;
      *(void *)(v55 - 24) = 0;
      *(void *)(v55 - 16) = 0;
      uint64_t v56 = v45 + v48 - 24;
      *(void *)(v56 + 16) = 0;
      unint64_t v57 = *(char **)(v49 - 24);
      uint64_t v58 = *(char **)(v49 - 16);
      uint64_t v44 = v48 - 72;
      std::vector<std::weak_ptr<QMIVirtualClient>>::__init_with_size[abi:ne180100]<std::weak_ptr<QMIVirtualClient>*,std::weak_ptr<QMIVirtualClient>*>((char *)v56, v57, v58, (v58 - v57) >> 4);
    }
    uint64_t v59 = *(void *)(v3 + 72);
    unint64_t v66 = *(void *)&v107[8];
    long long v60 = *(_OWORD *)&v107[8];
    long long v61 = *(_OWORD *)(v3 + 56);
    *(void *)(v3 + 56) = v45 + v48;
    *(_OWORD *)int v107 = v61;
    *(_OWORD *)(v3 + 64) = v60;
    *(void *)&v107[16] = v59;
    char v106 = (char *)v61;
    std::__split_buffer<QMIClientPool::QMIClientInfo>::~__split_buffer((uint64_t)&v106);
    unint64_t v37 = v66;
  }
  else
  {
    std::construct_at[abi:ne180100]<QMIClientPool::QMIClientInfo,QMIClientPool::QMIClientInfo,QMIClientPool::QMIClientInfo*>(*(std::string **)(v3 + 64), (uint64_t)v70);
    unint64_t v37 = v36 + 72;
    *(void *)(v3 + 64) = v36 + 72;
  }
  *(void *)(v3 + 64) = v37;
  QMIClientPool::QMIClientInfo::~QMIClientInfo(v70);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v69) {
    std::__shared_weak_count::__release_weak(v69);
  }
  qmi::Client::start((qmi::Client *)&v103);
  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
  if (v82) {
    std::__shared_weak_count::__release_weak(v82);
  }
  if (v89) {
    std::__shared_weak_count::__release_weak(v89);
  }
  if (v96) {
    std::__shared_weak_count::__release_weak(v96);
  }
  if (v98) {
    std::__shared_weak_count::__release_weak(v98);
  }
  qmi::Client::~Client((qmi::Client *)&v103);
  xpc_release(v8);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v62 = *(void *)(a1 + 32);
  long long v63 = *(std::__shared_weak_count **)(v62 + 8);
  *(_OWORD *)uint64_t v62 = v67;
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
}

void sub_22249703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (a36) {
    std::__shared_weak_count::__release_weak(a36);
  }
  if (a43) {
    std::__shared_weak_count::__release_weak(a43);
  }
  if (a50) {
    std::__shared_weak_count::__release_weak(a50);
  }
  if (a57) {
    std::__shared_weak_count::__release_weak(a57);
  }
  uint64_t v62 = *(std::__shared_weak_count **)(v60 - 248);
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
  qmi::Client::~Client((qmi::Client *)(v60 - 208));
  xpc_release(v58);
  if (v57) {
    dispatch_release(v57);
  }
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKNS_14IndicationBaseEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224972F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned short const,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t Mav16QMIDataContextIP::Mav16QMIDataContextIP(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4, uint64_t *a5, void *a6, int a7, NSObject **a8, uint64_t *a9)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  uint64_t v28 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a3[1];
  uint64_t v25 = *a3;
  unint64_t v26 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a5[1];
  uint64_t v23 = *a5;
  uint64_t v24 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a8;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  BOOL v17 = (std::__shared_weak_count *)a9[1];
  uint64_t v20 = *a9;
  int v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIDataContextIPBase::QMIDataContextIPBase(a1, &v27, &v25, a4, &v23, a7, &object, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  *(void *)a1 = &unk_26D4CD730;
  *(void *)(a1 + 864) = &unk_26D4CD8B8;
  uint64_t v18 = a6[1];
  *(void *)(a1 + 872) = *a6;
  *(void *)(a1 + 880) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 8std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  *(unsigned char *)(a1 + 890) = 0;
  return a1;
}

void sub_2224974EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void Mav16QMIDataContextIP::~Mav16QMIDataContextIP(Mav16QMIDataContextIP *this)
{
  *(void *)this = &unk_26D4CD730;
  *((void *)this + 108) = &unk_26D4CD8B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  QMIDataContextIPBase::~QMIDataContextIPBase((std::__shared_weak_count **)this);
}

{
  uint64_t vars8;

  Mav16QMIDataContextIP::~Mav16QMIDataContextIP(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'Mav16QMIDataContextIP::~Mav16QMIDataContextIP(Mav16QMIDataContextIP *this)
{
}

{
  uint64_t vars8;

  Mav16QMIDataContextIP::~Mav16QMIDataContextIP((Mav16QMIDataContextIP *)((char *)this - 864));

  JUMPOUT(0x223C9A950);
}

void Mav16QMIDataContextIP::handleBasebandOff_sync(Mav16QMIDataContextIP *this)
{
  QMIDataContextIPBase::handleBasebandOff_sync(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2
    && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0
    && (uint64_t v4 = *((void *)this + 12), std::__shared_weak_count::__release_shared[abi:ne180100](v3), v4))
  {
    long long v5 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v5)
    {
      long long v5 = std::__shared_weak_count::lock(v5);
      uint64_t v6 = v5;
      if (v5) {
        long long v5 = (std::__shared_weak_count *)*((void *)this + 12);
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    ((void (*)(std::__shared_weak_count *))v5->__get_deleter)(v5);
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v8 = 0;
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Observer not ready", v8, 2u);
    }
  }
}

void sub_222497724(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void Mav16QMIDataContextIP::handleQmiClientStarted(Mav16QMIDataContextIP *this)
{
  QMIDataContextIPBase::handleQmiClientStarted(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2
    && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0
    && (uint64_t v4 = *((void *)this + 12), std::__shared_weak_count::__release_shared[abi:ne180100](v3), v4))
  {
    long long v5 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v5)
    {
      long long v5 = std::__shared_weak_count::lock(v5);
      uint64_t v6 = v5;
      if (v5) {
        long long v5 = (std::__shared_weak_count *)*((void *)this + 12);
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    ((void (*)(std::__shared_weak_count *, char *))v5->__on_zero_shared)(v5, (char *)this + 144);
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v8 = 0;
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "lazy fWDSClient skipped in handleQmiClientStarted", v8, 2u);
    }
  }
}

void sub_222497834(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mav16QMIDataContextIP::activateDataContextIP_Internal(uint64_t a1, int a2, uint64_t *a3, char a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  xpc_object_t v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (v8)
  {
    xpc_object_t v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    if (v8) {
      xpc_object_t v8 = *(std::__shared_weak_count **)(a1 + 96);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v32 = 0;
  int64x2_t v33 = 0;
  ((void (*)(uint64_t *__return_ptr))v8->__vftable[6].~__shared_weak_count)(&v32);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v32)
  {
    uint64_t v13 = *(NSObject **)(a1 + 40);
    uint64_t v14 = 0;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_76;
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = "activateDataContextIP_Internal";
    uint64_t v15 = "#E %s: Do not expect activation at this point !";
LABEL_25:
    _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, v15, __p, 0xCu);
    uint64_t v14 = 0;
    goto LABEL_76;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 880);
  if (v10)
  {
    unint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11) {
      uint64_t v12 = *(void *)(a1 + 872);
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  if (*(_DWORD *)(a1 + 140) == 1) {
    uint64_t v16 = "IPv4:";
  }
  else {
    uint64_t v16 = "IPv6:";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  int v17 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v12 + 32))(v12, __p);
  if (SHIBYTE(v35) < 0) {
    operator delete(*(void **)__p);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v17 == 2)
  {
    uint64_t v13 = *(NSObject **)(a1 + 40);
    uint64_t v14 = 0;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_76;
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = "activateDataContextIP_Internal";
    uint64_t v15 = "#I %s: Failed to create profiles";
    goto LABEL_25;
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v19 = *a3;
    uint64_t v18 = a3[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 560) = v19;
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 568);
    *(void *)(a1 + 568) = v18;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  int v21 = *(std::__shared_weak_count **)(a1 + 880);
  if (v21)
  {
    int v21 = std::__shared_weak_count::lock(v21);
    uint64_t v22 = v21;
    if (v21) {
      int v21 = *(std::__shared_weak_count **)(a1 + 872);
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = ((uint64_t (*)(std::__shared_weak_count *))v21->__vftable[1].~__shared_weak_count)(v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  QMIDataContextIPBase::setDataContextIPState(a1, 4u);
  *(unsigned char *)(a1 + 8std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = v17 == 1;
  if (v17 == 1)
  {
    uint64_t v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = "activateDataContextIP_Internal";
      _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Profile creation pending...", __p, 0xCu);
    }
    *(unsigned char *)(a1 + 890) = a2;
  }
  else
  {
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 880);
    if (v25)
    {
      uint64_t v25 = std::__shared_weak_count::lock(v25);
      unint64_t v26 = v25;
      if (v25) {
        uint64_t v25 = *(std::__shared_weak_count **)(a1 + 872);
      }
    }
    else
    {
      unint64_t v26 = 0;
    }
    ((void (*)(unsigned char *__return_ptr))v25->__get_deleter)(__p);
    BOOL v27 = (*(unsigned __int8 *)(*(void *)__p + 3) == 254 || *(unsigned __int8 *)(*(void *)__p + 2) != 255)
       && (*(unsigned __int8 *)(*(void *)__p + 5) == 254 || *(unsigned __int8 *)(*(void *)__p + 4) != 255);
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (!v27)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "Profile not created";
        *(_WORD *)&__p[12] = 2080;
        *(void *)&__p[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Da"
                              "ta/QMI/Context/Mav16QMIDataContextIP.cpp";
        __int16 v35 = 1024;
        int v36 = 103;
        _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT getProfileManager()->getProfileInfo()->isProfileCreated()\n %s\n at %s:%d\n**********", __p, 0x1Cu);
      }
      uint64_t v28 = *(std::__shared_weak_count **)(a1 + 880);
      if (v28)
      {
        uint64_t v28 = std::__shared_weak_count::lock(v28);
        uint64_t v29 = v28;
        if (v28) {
          uint64_t v28 = *(std::__shared_weak_count **)(a1 + 872);
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      ((void (*)(unsigned char *__return_ptr))v28->__get_deleter)(__p);
      BOOL v30 = (*(unsigned __int8 *)(*(void *)__p + 3) == 254 || *(unsigned __int8 *)(*(void *)__p + 2) != 255)
         && (*(unsigned __int8 *)(*(void *)__p + 5) == 254 || *(unsigned __int8 *)(*(void *)__p + 4) != 255);
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (!v30) {
        __TUAssertTrigger();
      }
    }
    Mav16QMIDataContextIP::activateDataContextIPAfterProfileCreation(a1, a2, v23);
  }
  uint64_t v14 = 1;
LABEL_76:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  return v14;
}

void sub_222497D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_222497DB0()
{
  if (!v0) {
    JUMPOUT(0x222497DA8);
  }
  JUMPOUT(0x222497DA0);
}

void Mav16QMIDataContextIP::activateDataContextIPAfterProfileCreation(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = "activateDataContextIPAfterProfileCreation";
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", __p, 0xCu);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 880);
  if (v7)
  {
    xpc_object_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(a1 + 872);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    xpc_object_t v8 = 0;
  }
  if (*(_DWORD *)(a1 + 140) == 1) {
    uint64_t v10 = "IPv4:";
  }
  else {
    uint64_t v10 = "IPv6:";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  int v11 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v9 + 48))(v9, __p, a3);
  if (SHIBYTE(v29) < 0) {
    operator delete(*(void **)__p);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v11 == 2)
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = "activateDataContextIPAfterProfileCreation";
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Failed to configure profiles", __p, 0xCu);
    }
    QMIDataContextIPBase::setDataContextIPState(a1, 1u);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
    if (v13)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v13);
      uint64_t v14 = v13;
      if (v13) {
        uint64_t v13 = *(std::__shared_weak_count **)(a1 + 96);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v13->__vftable[1].__get_deleter)(v13, *(unsigned int *)(a1 + 140), 18, 0, 0, 2, 0);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    return;
  }
  *(unsigned char *)(a1 + 889) = v11 == 1;
  if (v11 != 1)
  {
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 880);
    if (v16)
    {
      uint64_t v16 = std::__shared_weak_count::lock(v16);
      int v17 = v16;
      if (v16) {
        uint64_t v16 = *(std::__shared_weak_count **)(a1 + 872);
      }
    }
    else
    {
      int v17 = 0;
    }
    ((void (*)(unsigned char *__return_ptr))v16->__get_deleter)(__p);
    int v18 = *(unsigned __int8 *)(*(void *)__p + 3);
    if (v18 == 254)
    {
      int v19 = *(unsigned __int8 *)(*(void *)__p + 5);
      if (v19 != 254) {
        goto LABEL_37;
      }
    }
    else if (v18 == 1)
    {
      int v19 = *(unsigned __int8 *)(*(void *)__p + 5);
LABEL_37:
      BOOL v20 = v19 == 254 || v19 == 1;
LABEL_43:
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v20) {
        goto LABEL_71;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "Profile not configured";
        *(_WORD *)&__p[12] = 2080;
        *(void *)&__p[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Da"
                              "ta/QMI/Context/Mav16QMIDataContextIP.cpp";
        __int16 v29 = 1024;
        int v30 = 174;
        _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT getProfileManager()->getProfileInfo()->isProfileConfigured()\n %s\n at %s:%d\n**********", __p, 0x1Cu);
      }
      uint64_t v22 = *(std::__shared_weak_count **)(a1 + 880);
      if (v22)
      {
        uint64_t v22 = std::__shared_weak_count::lock(v22);
        uint64_t v23 = v22;
        if (v22) {
          uint64_t v22 = *(std::__shared_weak_count **)(a1 + 872);
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
      ((void (*)(unsigned char *__return_ptr))v22->__get_deleter)(__p);
      int v24 = *(unsigned __int8 *)(*(void *)__p + 3);
      if (v24 == 254)
      {
        int v25 = *(unsigned __int8 *)(*(void *)__p + 5);
        if (v25 != 254) {
          goto LABEL_59;
        }
      }
      else if (v24 == 1)
      {
        int v25 = *(unsigned __int8 *)(*(void *)__p + 5);
LABEL_59:
        BOOL v26 = v25 == 254 || v25 == 1;
        goto LABEL_65;
      }
      BOOL v26 = 0;
LABEL_65:
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (!v26) {
        __TUAssertTrigger();
      }
LABEL_71:
      Mav16QMIDataContextIP::activateDataContextIPAfterProfileConfiguration(a1, *(_DWORD *)(a1 + 284), a2);
      return;
    }
    BOOL v20 = 0;
    goto LABEL_43;
  }
  uint64_t v15 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = "activateDataContextIPAfterProfileCreation";
    _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s: Profile configuration pending...", __p, 0xCu);
  }
  *(unsigned char *)(a1 + 890) = a2;
}

void sub_222498230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void Mav16QMIDataContextIP::handleProfileCreated(Mav16QMIDataContextIP *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315394;
    uint64_t v9 = "handleProfileCreated";
    __int16 v10 = 2080;
    uint64_t v11 = asStringBool();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: profile created: %s", (uint8_t *)&v8, 0x16u);
  }
  if (*((unsigned char *)this + 888)
    && (*(unsigned int (**)(Mav16QMIDataContextIP *))(*(void *)this + 96))(this) == 4)
  {
    *((unsigned char *)this + 8std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
    if (a2)
    {
      Mav16QMIDataContextIP::activateDataContextIPAfterProfileCreation((uint64_t)this, *((unsigned __int8 *)this + 890), 1);
    }
    else
    {
      QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 1u);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 13);
      if (v6)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v6);
        uint64_t v7 = v6;
        if (v6) {
          uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 12);
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v6->__vftable[1].__get_deleter)(v6, *((unsigned int *)this + 35), 18, 0, 0, 2, 0);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  else
  {
    long long v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      uint64_t v9 = "handleProfileCreated";
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Not waiting for profile creation, nothing to be done", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_22249846C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'Mav16QMIDataContextIP::handleProfileCreated(Mav16QMIDataContextIP *this, int a2)
{
}

void Mav16QMIDataContextIP::handleProfileConfigured(Mav16QMIDataContextIP *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 889)
    && (*(unsigned int (**)(Mav16QMIDataContextIP *))(*(void *)this + 96))(this) == 4)
  {
    *((unsigned char *)this + 889) = 0;
    if (a2)
    {
      int v4 = *((_DWORD *)this + 71);
      int v5 = *((unsigned __int8 *)this + 890);
      Mav16QMIDataContextIP::activateDataContextIPAfterProfileConfiguration((uint64_t)this, v4, v5);
    }
    else
    {
      uint64_t v7 = *((void *)this + 5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315138;
        uint64_t v11 = "handleProfileConfigured";
        _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: Profile configuration failed", (uint8_t *)&v10, 0xCu);
      }
      QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 1u);
      int v8 = (std::__shared_weak_count *)*((void *)this + 13);
      if (v8)
      {
        int v8 = std::__shared_weak_count::lock(v8);
        uint64_t v9 = v8;
        if (v8) {
          int v8 = (std::__shared_weak_count *)*((void *)this + 12);
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v8->__vftable[1].__get_deleter)(v8, *((unsigned int *)this + 35), 18, 0, 0, 2, 0);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      uint64_t v11 = "handleProfileConfigured";
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Not waiting for profile configuration, nothing to be done", (uint8_t *)&v10, 0xCu);
    }
  }
}

void sub_222498688(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void Mav16QMIDataContextIP::activateDataContextIPAfterProfileConfiguration(uint64_t a1, char a2, int a3)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
    if (v7)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v7);
      int v8 = v7;
      if (v7) {
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 96);
      }
    }
    else
    {
      int v8 = 0;
    }
    ((void (*)(unsigned char *__return_ptr))v7->__vftable[7].__get_deleter)(aBlock);
    if (aBlock[23] >= 0) {
      uint64_t v9 = aBlock;
    }
    else {
      uint64_t v9 = *(unsigned char **)aBlock;
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I activateDataContextIPAfterProfileConfiguration: start apn=%{public}s", (uint8_t *)&buf, 0xCu);
    if ((aBlock[23] & 0x80000000) != 0) {
      operator delete(*(void **)aBlock);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v103 = 0;
  long long v104 = 0;
  int v10 = *(std::__shared_weak_count **)(a1 + 880);
  if (v10)
  {
    int v10 = std::__shared_weak_count::lock(v10);
    uint64_t v11 = v10;
    if (v10) {
      int v10 = *(std::__shared_weak_count **)(a1 + 872);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (capabilities::ct *)((capabilities::ct *(*)(uint64_t *__return_ptr))v10->__get_deleter)(&v103);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (capabilities::ct::supports5G(v12))
  {
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
    if (v13)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v13);
      uint64_t v14 = v13;
      if (v13) {
        uint64_t v13 = *(std::__shared_weak_count **)(a1 + 96);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    ((void (*)(uint64_t *__return_ptr))v13->__vftable[6].~__shared_weak_count)(&v112);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (!v112 || *(unsigned __int8 *)(v103 + 3) == 254)
    {
      if (v113) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v113);
      }
      goto LABEL_198;
    }
    if ((*(unsigned int (**)(void))(*(void *)v112 + 184))())
    {
      uint64_t v15 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long aBlock = 0;
        _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I Suppress PDN tear-down", aBlock, 2u);
      }
      long long v121 = 0u;
      long long v122 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v121);
      v98[0] = MEMORY[0x263EF8330];
      v98[1] = 1174405120;
      xpc_object_t v99 = ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke;
      uint64_t v100 = &__block_descriptor_tmp_44;
      uint64_t v101 = v103;
      dispatch_object_t v102 = v104;
      if (v104) {
        atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = qmi::MutableMessageBase::getTLV<wds::tlv::Profile3GPP_ProfileIdentifier>((uint64_t)&v121, 16);
      v99((uint64_t)v98, v16);
      int v17 = (const void **)*((void *)&v121 + 1);
      if (*((void *)&v121 + 1) != (void)v122)
      {
        while (*((unsigned char *)*v17 + 8) != 17)
        {
          if (++v17 == (const void **)v122) {
            goto LABEL_42;
          }
        }
      }
      if (v17 == (const void **)v122) {
LABEL_42:
      }
        operator new();
      if (!v18) {
        __cxa_bad_cast();
      }
      void v18[2] = 0x8000000000000000;
      *(void *)&long long buf = a1 + 144;
      *((void *)&buf + 1) = QMIServiceMsg::create();
      uint64_t v131 = 0;
      int v130 = (void *)(a1 + 176);
      LODWORD(v129) = 210000;
      v97[0] = MEMORY[0x263EF8330];
      v97[1] = 0x40000000;
      v97[2] = ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_2;
      v97[3] = &__block_descriptor_tmp_13_8;
      v97[4] = a1;
      *(void *)long long aBlock = MEMORY[0x263EF8330];
      *(void *)&aBlock[8] = 0x40000000;
      *(void *)&aBlock[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14SetAlwaysOnPdu8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      long long v133 = &unk_26460F260;
      v134 = v97;
      int v19 = _Block_copy(aBlock);
      uint64_t v131 = v19;
      if (*((void *)&buf + 1))
      {
        qmi::Client::send();
        int v19 = v131;
      }
      if (v19) {
        _Block_release(v19);
      }
      if (v102) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v102);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v121);
    }
    if (v113) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v113);
    }
  }
  long long v95 = 0u;
  long long v96 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v95);
  if (*(unsigned __int8 *)(v103 + 3) != 254)
  {
    v90[0] = MEMORY[0x263EF8330];
    v90[1] = 1174405120;
    uint64_t v91 = ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_14;
    std::string v92 = &__block_descriptor_tmp_17_15;
    uint64_t v93 = v103;
    uint64_t v94 = v104;
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = qmi::MutableMessageBase::getTLV<wds::tlv::Profile3GPP_ProfileIdentifier>((uint64_t)&v95, 49);
    v91((uint64_t)v90, v20);
    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
  }
  if (*(unsigned __int8 *)(v103 + 5) != 254)
  {
    v85[0] = MEMORY[0x263EF8330];
    v85[1] = 1174405120;
    int v86 = ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_18;
    uint64_t v87 = &__block_descriptor_tmp_22_15;
    uint64_t v88 = v103;
    uint64_t v89 = v104;
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = (const void **)*((void *)&v95 + 1);
    if (*((void *)&v95 + 1) != (void)v96)
    {
      while (*((unsigned char *)*v21 + 8) != 50)
      {
        if (++v21 == (const void **)v96) {
          goto LABEL_67;
        }
      }
    }
    if (v21 == (const void **)v96) {
LABEL_67:
    }
      operator new();
    if (!v22) {
      __cxa_bad_cast();
    }
    v86((uint64_t)v85, v22 + 9);
    if (v89) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v89);
    }
  }
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 104);
  if (v23)
  {
    uint64_t v23 = std::__shared_weak_count::lock(v23);
    int v24 = v23;
    if (v23) {
      uint64_t v23 = *(std::__shared_weak_count **)(a1 + 96);
    }
  }
  else
  {
    int v24 = 0;
  }
  uint64_t v119 = 0;
  CFTypeID v120 = 0;
  ((void (*)(uint64_t **__return_ptr))v23->__vftable[6].~__shared_weak_count)(&v119);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v119)
  {
    uint64_t v112 = MEMORY[0x263EF8330];
    uint64_t v113 = 1174405120;
    char v114 = ___ZN21Mav16QMIDataContextIP26setDataExtensionParametersERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke;
    uint64_t v115 = &__block_descriptor_tmp_26_7;
    uint64_t v116 = a1;
    BOOL v117 = v119;
    uint64_t v118 = v120;
    if (v120) {
      atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v25 = qmi::MutableMessageBase::getTLV<wds::tlv::CallType>((uint64_t)&v95, 53);
    v114((uint64_t)&v112, v25);
    BOOL v26 = *(std::__shared_weak_count **)(a1 + 104);
    if (v26)
    {
      BOOL v26 = std::__shared_weak_count::lock(v26);
      BOOL v27 = v26;
      if (v26) {
        BOOL v26 = *(std::__shared_weak_count **)(a1 + 96);
      }
    }
    else
    {
      BOOL v27 = 0;
    }
    uint64_t v28 = (capabilities::ct *)((uint64_t (*)(std::__shared_weak_count *))v26->__vftable[6].~__shared_weak_count_0)(v26);
    int v29 = (int)v28;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    int v30 = capabilities::ct::supportsDataQMIExtensions(v28);
    uint64_t v31 = *v119;
    if (v30)
    {
      uint64_t v32 = (*(uint64_t (**)(void))(v31 + 216))();
      uint64_t v33 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void))(*v119 + 216))(v119, 1, 0, 0) | v32;
      uint64_t v34 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long aBlock = 136315394;
        *(void *)&aBlock[4] = "setDataExtensionParameters";
        *(_WORD *)&aBlock[12] = 2048;
        *(void *)&aBlock[14] = v33;
        _os_log_impl(&dword_22231A000, v34, OS_LOG_TYPE_DEFAULT, "#I %s: Applying ApnTypeMask tlv connectionMask=%llu", aBlock, 0x16u);
      }
      v107[0] = MEMORY[0x263EF8330];
      v107[1] = 0x40000000;
      int v108 = ___ZN21Mav16QMIDataContextIP26setDataExtensionParametersERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_27;
      uint64_t v109 = &__block_descriptor_tmp_29_2;
      uint64_t v110 = a1;
      uint64_t v111 = v33;
      __int16 v35 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>((uint64_t)&v95, 62);
      int v36 = (capabilities::ct *)((uint64_t (*)(void *, char *))v108)(v107, v35);
      if (a3
        && capabilities::ct::supports5G(v36)
        && (*(unsigned int (**)(uint64_t *))(*v119 + 192))(v119))
      {
        uint64_t v37 = *(std::__shared_weak_count **)(a1 + 104);
        if (v37)
        {
          uint64_t v37 = std::__shared_weak_count::lock(v37);
          uint64_t v38 = v37;
          if (v37) {
            uint64_t v37 = *(std::__shared_weak_count **)(a1 + 96);
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        int v50 = ((uint64_t (*)(std::__shared_weak_count *))v37->__vftable[7].~__shared_weak_count)(v37);
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        uint64_t v51 = *(std::__shared_weak_count **)(a1 + 104);
        if (v51)
        {
          uint64_t v51 = std::__shared_weak_count::lock(v51);
          uint64_t v52 = v51;
          if (v51) {
            uint64_t v51 = *(std::__shared_weak_count **)(a1 + 96);
          }
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v53 = ((uint64_t (*)(std::__shared_weak_count *))v51->__vftable[7].__on_zero_shared)(v51);
        if (v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
        }
        long long v54 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long aBlock = 67109120;
          *(_DWORD *)&aBlock[4] = v50;
          _os_log_impl(&dword_22231A000, v54, OS_LOG_TYPE_DEFAULT, "#I Applying ExtendedHandoffContext pduSessionId=%d", aBlock, 8u);
        }
        if ((v50 & 0x80000000) == 0)
        {
          v105[0] = MEMORY[0x263EF8330];
          v105[1] = 0x40000000;
          v105[2] = ___ZN21Mav16QMIDataContextIP26setDataExtensionParametersERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_30;
          void v105[3] = &__block_descriptor_tmp_32_4;
          int v106 = v50;
          v105[4] = a1;
          v105[5] = v53;
          uint64_t v55 = (const void **)*((void *)&v95 + 1);
          if (*((void *)&v95 + 1) != (void)v96)
          {
            while (*((unsigned char *)*v55 + 8) != 63)
            {
              if (++v55 == (const void **)v96) {
                goto LABEL_136;
              }
            }
          }
          if (v55 == (const void **)v96) {
LABEL_136:
          }
            operator new();
          if (!v56) {
            __cxa_bad_cast();
          }
          ___ZN21Mav16QMIDataContextIP26setDataExtensionParametersERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_30((uint64_t)v105, (uint64_t)v56 + 16);
        }
      }
    }
    else
    {
      int v39 = (*(uint64_t (**)(void))(v31 + 56))();
      if (v29 == 2) {
        int v40 = 0;
      }
      else {
        int v40 = v39;
      }
      if (v40 == 1)
      {
        uint64_t v41 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long aBlock = 136315138;
          *(void *)&aBlock[4] = "setDataExtensionParameters";
          _os_log_impl(&dword_22231A000, v41, OS_LOG_TYPE_DEFAULT, "#I %s: Applying IDataCall tlv", aBlock, 0xCu);
        }
        *qmi::MutableMessageBase::getTLV<wds::tlv::IDataCall>((uint64_t)&v95, 194) = 1;
      }
    }
    if (v29 != 4 && !is5GDataTechnology()) {
      goto LABEL_189;
    }
    unint64_t v42 = *(NSObject **)(a1 + 40);
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (v43)
    {
      uint64_t v44 = asStringBool();
      uint64_t v45 = asString();
      *(_DWORD *)unint64_t v136 = 136315394;
      *(void *)&v136[4] = v44;
      *(_WORD *)&v136[12] = 2080;
      *(void *)&v136[14] = v45;
      _os_log_impl(&dword_22231A000, v42, OS_LOG_TYPE_DEFAULT, "#I setHandoverAddress: handover: %s, allowedIpFamily: %s", v136, 0x16u);
    }
    if (!a3 || !capabilities::ct::supportsHandoverPDN((capabilities::ct *)v43)) {
      goto LABEL_187;
    }
    if ((a2 & 2) != 0 && *(_DWORD *)(a1 + 140) == 2)
    {
      memset(v136, 0, sizeof(v136));
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 104);
      if (v46)
      {
        uint64_t v46 = std::__shared_weak_count::lock(v46);
        uint64_t v47 = v46;
        if (v46) {
          uint64_t v46 = *(std::__shared_weak_count **)(a1 + 96);
        }
      }
      else
      {
        uint64_t v47 = 0;
      }
      ((void (*)(uint8_t *__return_ptr))v46->__vftable[5].__on_zero_shared)(v136);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      int isZeroIP = CSIPacketAddress::isZeroIP((CSIPacketAddress *)v136);
      uint64_t v58 = *(NSObject **)(a1 + 40);
      BOOL v59 = os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
      if (isZeroIP)
      {
        if (v59)
        {
          CSIPacketAddress::operator std::string();
          if (v127 >= 0) {
            uint64_t v60 = &v125;
          }
          else {
            uint64_t v60 = v125;
          }
          *(_DWORD *)std::string::size_type v135 = 136315138;
          *(void *)&v135[4] = v60;
          long long v61 = "#E IPv6Service: ** ipv6Addr: %s handover impossible, going with regular activation";
          goto LABEL_162;
        }
        goto LABEL_187;
      }
      if (v59)
      {
        CSIPacketAddress::operator std::string();
        int v62 = SHIBYTE(v127);
        long long v63 = (void **)v125;
        int PrefixLen = CSIPacketAddress::getPrefixLen((CSIPacketAddress *)v136);
        long long v65 = &v125;
        if (v62 < 0) {
          long long v65 = v63;
        }
        *(_DWORD *)std::string::size_type v135 = 136315394;
        *(void *)&v135[4] = v65;
        *(_WORD *)&v135[12] = 1024;
        *(_DWORD *)&v135[14] = PrefixLen;
        _os_log_impl(&dword_22231A000, v58, OS_LOG_TYPE_DEFAULT, "#I IPv6Service: ** ipv6Addr: %s, prefixLen: %d", v135, 0x12u);
        if (SHIBYTE(v127) < 0) {
          operator delete(v125);
        }
      }
      if (capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)v59))
      {
        *(void *)long long aBlock = MEMORY[0x263EF8330];
        *(void *)&aBlock[8] = 1174405120;
        *(void *)&aBlock[16] = ___ZN21Mav16QMIDataContextIP18setHandoverAddressERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke;
        long long v133 = &__block_descriptor_tmp_43_10;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v134, (const CSIPacketAddress *)v136);
        unint64_t v66 = qmi::MutableMessageBase::getTLV<wds::tlv::HandOverContext>((uint64_t)&v95);
        (*(void (**)(unsigned char *, char *))&aBlock[16])(aBlock, v66);
      }
      else
      {
        long long v126 = 0;
        long long v125 = 0;
        uint64_t v127 = 0;
        *(void *)std::string::size_type v135 = *MEMORY[0x263F03798];
        *(void *)&v135[8] = @"SetHandOverIPv6Prefix";
        std::vector<__CFString const*>::vector[abi:ne180100](&v125, v135, 2uLL);
        long long v124 = 0;
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 616) + 96))(v135);
        ctu::cf::CFSharedRef<__CFBoolean const>::CFSharedRef<void const,void>(&v124, (CFTypeRef *)v135);
        std::string v72 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)v135);
        if (v124) {
          std::string v74 = ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get;
        }
        else {
          std::string v74 = 0;
        }
        if (v74)
        {
          v135[0] = 0;
          ctu::cf::assign((ctu::cf *)v72, v124, v73);
          BOOL v75 = v135[0] != 0;
        }
        else
        {
          BOOL v75 = 0;
        }
        uint64_t v76 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v77 = asStringBool();
          *(_DWORD *)std::string::size_type v135 = 136315138;
          *(void *)&v135[4] = v77;
          _os_log_impl(&dword_22231A000, v76, OS_LOG_TYPE_DEFAULT, "#I IPv6Service: setIPv6Prefix: %s", v135, 0xCu);
        }
        if (v75)
        {
          *(void *)&long long buf = MEMORY[0x263EF8330];
          *((void *)&buf + 1) = 1174405120;
          uint64_t v129 = ___ZN21Mav16QMIDataContextIP18setHandoverAddressERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_45;
          int v130 = &__block_descriptor_tmp_48_13;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v131, (const CSIPacketAddress *)v136);
          uint64_t v78 = qmi::MutableMessageBase::getTLV<wds::tlv::HandOverIPv6Prefix>((uint64_t)&v95, 208);
          v129((uint64_t)&buf, (unsigned __int8 *)v78);
        }
        ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::~SharedRef((const void **)&v124);
        if (v125)
        {
          long long v126 = v125;
          operator delete(v125);
        }
      }
    }
    else if ((a2 & 1) != 0 && *(_DWORD *)(a1 + 140) == 1)
    {
      memset(v136, 0, sizeof(v136));
      uint64_t v48 = *(std::__shared_weak_count **)(a1 + 104);
      if (v48)
      {
        uint64_t v48 = std::__shared_weak_count::lock(v48);
        uint64_t v49 = v48;
        if (v48) {
          uint64_t v48 = *(std::__shared_weak_count **)(a1 + 96);
        }
      }
      else
      {
        uint64_t v49 = 0;
      }
      ((void (*)(uint8_t *__return_ptr))v48->__vftable[5].__on_zero_shared)(v136);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      int v67 = CSIPacketAddress::isZeroIP((CSIPacketAddress *)v136);
      uint64_t v58 = *(NSObject **)(a1 + 40);
      BOOL v68 = os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
      if (v67)
      {
        if (v68)
        {
          CSIPacketAddress::operator std::string();
          if (v127 >= 0) {
            int v69 = &v125;
          }
          else {
            int v69 = v125;
          }
          *(_DWORD *)std::string::size_type v135 = 136315138;
          *(void *)&v135[4] = v69;
          long long v61 = "#E ipv4Addr: %s handover impossible, going with regular activation";
LABEL_162:
          _os_log_impl(&dword_22231A000, v58, OS_LOG_TYPE_DEFAULT, v61, v135, 0xCu);
          if (SHIBYTE(v127) < 0) {
            operator delete(v125);
          }
        }
LABEL_187:
        int v80 = 0;
LABEL_188:
        QMIDataContextIPBase::setHandoverActivation((QMIDataContextIPBase *)a1, v80);
LABEL_189:
        if (v118) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
        }
        goto LABEL_191;
      }
      if (v68)
      {
        CSIPacketAddress::operator std::string();
        uint64_t v70 = v127 >= 0 ? &v125 : (void **)v125;
        *(_DWORD *)std::string::size_type v135 = 136315138;
        *(void *)&v135[4] = v70;
        _os_log_impl(&dword_22231A000, v58, OS_LOG_TYPE_DEFAULT, "#I ipv4Addr: %s", v135, 0xCu);
        if (SHIBYTE(v127) < 0) {
          operator delete(v125);
        }
      }
      if (capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)v68))
      {
        *(void *)&long long v121 = MEMORY[0x263EF8330];
        *((void *)&v121 + 1) = 1174405120;
        *(void *)&long long v122 = ___ZN21Mav16QMIDataContextIP18setHandoverAddressERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_49;
        *((void *)&v122 + 1) = &__block_descriptor_tmp_52_7;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v123, (const CSIPacketAddress *)v136);
        char v71 = qmi::MutableMessageBase::getTLV<wds::tlv::HandOverContext>((uint64_t)&v95);
        ((void (*)(long long *, char *))v122)(&v121, v71);
      }
    }
    uint64_t v79 = (capabilities::ct *)(*(uint64_t (**)(void))(**(void **)(a1 + 616) + 40))(*(void *)(a1 + 616));
    if (v79)
    {
      if (capabilities::ct::supportsDataQMIExtensions(v79))
      {
        int v80 = 1;
      }
      else
      {
        uint64_t v82 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long aBlock = 136315138;
          *(void *)&aBlock[4] = "setDataExtensionParameters";
          _os_log_impl(&dword_22231A000, v82, OS_LOG_TYPE_DEFAULT, "#I %s: Set ITechHandoverPDN", aBlock, 0xCu);
        }
        uint64_t v83 = qmi::MutableMessageBase::getTLV<wds::tlv::ITechHandoverPDN>((uint64_t)&v95, 209);
        int v80 = 1;
        char *v83 = 1;
      }
      goto LABEL_188;
    }
    goto LABEL_187;
  }
LABEL_191:
  if (v120) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v120);
  }
  *(void *)&long long buf = a1 + 144;
  *((void *)&buf + 1) = QMIServiceMsg::create();
  uint64_t v131 = 0;
  int v130 = (void *)(a1 + 176);
  LODWORD(v129) = 210000;
  v84[0] = MEMORY[0x263EF8330];
  v84[1] = 0x40000000;
  v84[2] = ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_23;
  v84[3] = &__block_descriptor_tmp_24_7;
  v84[4] = a1;
  *(void *)long long aBlock = MEMORY[0x263EF8330];
  *(void *)&aBlock[8] = 0x40000000;
  *(void *)&aBlock[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds21StartNetworkIfaceBase8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  long long v133 = &unk_26460F288;
  v134 = v84;
  uint64_t v81 = _Block_copy(aBlock);
  uint64_t v131 = v81;
  if (*((void *)&buf + 1))
  {
    qmi::Client::send();
    uint64_t v81 = v131;
  }
  if (v81) {
    _Block_release(v81);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v95);
LABEL_198:
  if (v104) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v104);
  }
}

void sub_222499CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::~SharedRef((const void **)&STACK[0x210]);
  int v67 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v67;
    operator delete(v67);
  }
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a64);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a66);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a44);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Mav16QMIDataContextIP::handleProfileConfigured(Mav16QMIDataContextIP *this, int a2)
{
}

uint64_t ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 2);
  return result;
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrI14QMIProfileInfoEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrI14QMIProfileInfoEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    int v3 = *(_DWORD *)(a2 + 4);
    int v4 = *(NSObject **)(v2 + 40);
    if (v3)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5[0] = 67109378;
        v5[1] = v3;
        __int16 v6 = 2080;
        uint64_t v7 = qmi::asString();
        _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "wds::SetAlwaysOnPdu::Response error: 0x%x (%s)", (uint8_t *)v5, 0x12u);
      }
    }
    else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I wds::SetAlwaysOnPdu::Response successful", (uint8_t *)v5, 2u);
    }
  }
}

uint64_t ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_14(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 2);
  return result;
}

uint64_t ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_18(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 4);
  return result;
}

void ___ZN21Mav16QMIDataContextIP46activateDataContextIPAfterProfileConfigurationE18DataProtocolFamilyb_block_invoke_23(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257)) {
    QMIDataContextIPBase::handleActivateResponse(v2, a2);
  }
}

void ___ZN21Mav16QMIDataContextIP26setDataExtensionParametersERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke(uint64_t a1, char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 128))(*(void *)(a1 + 40), 0);
  int v5 = *(NSObject **)(v3 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v8 = 136315138;
      uint64_t v9 = "setDataExtensionParameters_block_invoke";
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Using Tethering NAI", (uint8_t *)&v8, 0xCu);
    }
    char v7 = 0;
  }
  else
  {
    if (v6)
    {
      int v8 = 136315138;
      uint64_t v9 = "setDataExtensionParameters_block_invoke";
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Using Embedded NAI", (uint8_t *)&v8, 0xCu);
    }
    char v7 = 1;
  }
  *a2 = v7;
}

void ___ZN21Mav16QMIDataContextIP26setDataExtensionParametersERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_27(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(std::__shared_weak_count **)(v4 + 104);
  if (v5)
  {
    int v5 = std::__shared_weak_count::lock(v5);
    BOOL v6 = v5;
    if (v5) {
      int v5 = *(std::__shared_weak_count **)(v4 + 96);
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  *a2 = ((uint64_t (*)(std::__shared_weak_count *, void))v5->__vftable[10].~__shared_weak_count)(v5, *(void *)(a1 + 40));
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_22249A1C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21Mav16QMIDataContextIP26setDataExtensionParametersERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_30(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)a2 = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(a2 + 1) = 0;
  *(unsigned char *)(a2 + 11) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 40);
  if (*v3)
  {
    BOOL v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = v3[1];
      int v8 = v3[2];
      int v9 = v3[3];
      int v10 = v3[4];
      v12[0] = 67109888;
      v12[1] = v7;
      __int16 v13 = 1024;
      int v14 = v8;
      __int16 v15 = 1024;
      int v16 = v9;
      __int16 v17 = 1024;
      int v18 = v10;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Applying ExtendedHandoffContext snssaiInfo sst=%d. sd=[%d,%d,%d]", (uint8_t *)v12, 0x1Au);
      uint64_t v3 = *(unsigned char **)(a1 + 40);
    }
    *(unsigned char *)(a2 + 1) = 1;
    *(unsigned char *)(a2 + 11) = 1;
    *(unsigned char *)(a2 + 2) = v3[1];
    unsigned __int8 v11 = v3[4];
    *(_WORD *)(a2 + 3) = *((_WORD *)v3 + 1);
    *(_WORD *)(a2 + 5) = v11;
  }
}

uint64_t ___ZN21Mav16QMIDataContextIP18setHandoverAddressERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSIPacketAddress::toIPv6((CSIPacketAddress *)(a1 + 32), (unsigned __int8 *)(a2 + 4));
  *(unsigned char *)(a2 + 20) = 1;
  return result;
}

void *std::vector<__CFString const*>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    size_t v6 = 8 * a3;
    int v7 = (char *)operator new(8 * a3);
    *a1 = v7;
    a1[1] = v7;
    int v8 = &v7[8 * a3];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_22249A3A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN21Mav16QMIDataContextIP18setHandoverAddressERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_45(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (CSIPacketAddress *)(a1 + 32);
  CSIPacketAddress::toIPv6((CSIPacketAddress *)(a1 + 32), a2);
  uint64_t result = CSIPacketAddress::getPrefixLen(v3);
  a2[16] = result;
  return result;
}

uint64_t ___ZN21Mav16QMIDataContextIP18setHandoverAddressERN3wds19StartNetworkIfaceV27RequestE18DataProtocolFamilyb_block_invoke_49(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)(a1 + 32));
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 20) = 0;
  return result;
}

void Mav16QMIDataContextIP::stopNetworkIface(Mav16QMIDataContextIP *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v3 = *((unsigned __int8 *)this + 888);
  if (*((unsigned char *)this + 888) || *((unsigned char *)this + 889))
  {
    uint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "creation";
      if (!v3) {
        int v5 = "configuration";
      }
      int v8 = 136315394;
      int v9 = "stopNetworkIface";
      __int16 v10 = 2080;
      unsigned __int8 v11 = v5;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: called while pending profile %s. Declaring activation failure", (uint8_t *)&v8, 0x16u);
    }
    *((_WORD *)this + 444) = 0;
    QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 1u);
    size_t v6 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v6)
    {
      size_t v6 = std::__shared_weak_count::lock(v6);
      int v7 = v6;
      if (v6) {
        size_t v6 = (std::__shared_weak_count *)*((void *)this + 12);
      }
    }
    else
    {
      int v7 = 0;
    }
    ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v6->__vftable[1].__get_deleter)(v6, *((unsigned int *)this + 35), 1, 0, 0, 2, 0);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    QMIDataContextIPBase::doneWithContext(this);
  }
  else
  {
    QMIDataContextIPBase::stopNetworkIface(this, a2);
  }
}

void sub_22249A5D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::Profile3GPP_ProfileIdentifier>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProfileIdentifier>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProfileIdentifier>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProfileIdentifier>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ProfileIdentifier>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP_ProfileIdentifier>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileRatMask>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileRatMask>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileRatMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  int v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileRatMask>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14SetAlwaysOnPdu8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22249AA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProfileIdentifier>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProfileIdentifier>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_ProfileIdentifier>();
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProfileIdentifier>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_ProfileIdentifier>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Profile3GPP2_ProfileIdentifier>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds21StartNetworkIfaceBase8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<wds::StartNetworkIfaceBase::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_22249AB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ExtendedHandoffContext>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4CDB78;
  char v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D4CDB78;
  char v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C9A950](a1, 0x10A1C407FF270E1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ExtendedHandoffContext>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::ExtendedHandoffContext>(a1 + 16);
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::ExtendedHandoffContext>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ExtendedHandoffContext>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ExtendedHandoffContext>::clone()
{
}

void sub_22249AD68(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C407FF270E1);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::HandOverContext>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 54)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::HandOverContext>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::HandOverContext>::getSize()
{
  return tlv::size<wds::tlv::HandOverContext>();
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::HandOverContext>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<wds::tlv::HandOverContext>(a2, a1 + 12);
  uint64_t v6 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v6;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::HandOverContext>::clone()
{
}

uint64_t convertFromQMIVocoderType(uint64_t result)
{
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1;
      break;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      goto LABEL_5;
    case 16:
      uint64_t result = 6;
      break;
    case 17:
      uint64_t result = 7;
      break;
    case 18:
      uint64_t result = 8;
      break;
    case 19:
      uint64_t result = 9;
      break;
    case 20:
      uint64_t result = 10;
      break;
    case 21:
      uint64_t result = 11;
      break;
    case 32:
      uint64_t result = 12;
      break;
    case 33:
      uint64_t result = 13;
      break;
    case 34:
      uint64_t result = 14;
      break;
    case 35:
      uint64_t result = 15;
      break;
    case 36:
      uint64_t result = 16;
      break;
    default:
      if (result == 48) {
        uint64_t result = 17;
      }
      else {
LABEL_5:
      }
        uint64_t result = 18;
      break;
  }
  return result;
}

uint64_t convertToQMIVocoderType(unsigned int a1)
{
  if (a1 > 0x11) {
    return 255;
  }
  else {
    return byte_22257F800[a1];
  }
}

const char *audioVocoderType4BytesAsString(int a1)
{
  if ((a1 - 1) > 0xC) {
    return "None";
  }
  else {
    return off_26460F2A8[a1 - 1];
  }
}

uint64_t QMIDataContextIPBase::QMIDataContextIPBase(uint64_t a1, void *a2, void *a3, char a4, void *a5, int a6, NSObject **a7, void *a8)
{
  *(void *)a1 = &unk_26D4CDC00;
  __int16 v15 = (void *)(a1 + 8);
  if (*a5) {
    int v16 = (*(uint64_t (**)(void))(*(void *)(*a5 + *(void *)(*(void *)*a5 - 56)) + 24))(*a5 + *(void *)(*(void *)*a5 - 56));
  }
  else {
    int v16 = 1;
  }
  if (*a3) {
    unsigned int v17 = (*(uint64_t (**)(void))(*(void *)*a3 + 40))(*a3);
  }
  else {
    unsigned int v17 = 0;
  }
  int v18 = QMIDataContextIPBase::nameForFamily(a1, v16, v17, a6);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, (const char *)*MEMORY[0x263F03770], v18);
  *__int16 v15 = 0;
  v15[1] = 0;
  uint64_t v19 = *a7;
  *(void *)(a1 + 24) = *a7;
  if (v19) {
    dispatch_retain(v19);
  }
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v29);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  *(void *)a1 = &unk_26D4CDC00;
  *(void *)(a1 + 48) = &unk_26D4CDFB0;
  *(void *)(a1 + 72) = a1 + 48;
  *(void *)(a1 + 80) = *a2;
  uint64_t v20 = a2[1];
  *(void *)(a1 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = *a3;
  uint64_t v21 = a3[1];
  *(void *)(a1 + 104) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = a4;
  *(void *)(a1 + 120) = *a5;
  uint64_t v22 = a5[1];
  *(void *)(a1 + 128) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = a6;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = -1;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 184));
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_WORD *)(a1 + 256) = 255;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 276) = 0;
  *(void *)(a1 + 292) = 0;
  *(void *)(a1 + 284) = 0;
  *(void *)(a1 + 299) = 0;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 336));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 360));
  *(void *)(a1 + 384) = MEMORY[0x263F03618] + 16;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 4std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  if (*a5) {
    int v23 = (*(uint64_t (**)(void))(*(void *)(*a5 + *(void *)(*(void *)*a5 - 56)) + 24))(*a5 + *(void *)(*(void *)*a5 - 56));
  }
  else {
    int v23 = 1;
  }
  if (*a3) {
    unsigned int v24 = (*(uint64_t (**)(void))(*(void *)*a3 + 40))(*a3);
  }
  else {
    unsigned int v24 = 0;
  }
  *(void *)(a1 + 576) = QMIDataContextIPBase::nameForFamily(a1, v23, v24, a6);
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 616) = *a8;
  uint64_t v25 = a8[1];
  *(void *)(a1 + 624) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 6std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + 635) = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](a1 + 640, a1 + 48);
  *(unsigned char *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 856) = 0;
  return a1;
}

void sub_22249B5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void **a12)
{
  uint64_t v20 = (std::__shared_weak_count *)v13[78];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = *v17;
  if (*v17)
  {
    v13[75] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)v13[71];
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  MEMORY[0x223C98F70](v18);
  int v23 = *v12;
  if (*v12)
  {
    v13[40] = v23;
    operator delete(v23);
  }
  uint64_t v24 = v13[37];
  v13[37] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v13[36];
  v13[36] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v13[33];
  v13[33] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  a12 = v14 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  BOOL v27 = *v14;
  if (*v14)
  {
    v13[27] = v27;
    operator delete(v27);
  }
  qmi::Client::~Client(v16);
  uint64_t v28 = (std::__shared_weak_count *)v13[16];
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  int v29 = (std::__shared_weak_count *)v13[13];
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  int v30 = (std::__shared_weak_count *)v13[11];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v15);
  MEMORY[0x223C99A30](a9);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(a10);
  _Unwind_Resume(a1);
}

const char *QMIDataContextIPBase::nameForFamily(uint64_t a1, int a2, unsigned int a3, int a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2 == 2)
  {
    if (a4 == 2)
    {
      if (a3 < 0xA)
      {
        uint64_t v5 = off_26460FFD0;
        return v5[a3];
      }
      return "DATA.QMIContext.2:N:IPv6";
    }
    else if (a4 == 1)
    {
      if (a3 < 0xA)
      {
        uint64_t v5 = off_26460FF80;
        return v5[a3];
      }
      return "DATA.QMIContext.2:N:IPv4";
    }
    else
    {
      int v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315138;
        uint64_t v11 = asString();
        _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "Wrong IP family: %s", (uint8_t *)&v10, 0xCu);
      }
      if (a3 < 0xA)
      {
        uint64_t v5 = off_264610020;
        return v5[a3];
      }
      return "DATA.QMIContext.2:N:IPvX";
    }
  }
  else if (a2 == 1)
  {
    if (a4 == 2)
    {
      if (a3 < 0xA)
      {
        uint64_t v5 = off_26460FEE0;
        return v5[a3];
      }
      return "DATA.QMIContext.1:N:IPv6";
    }
    else if (a4 == 1)
    {
      if (a3 < 0xA)
      {
        uint64_t v5 = off_26460FE90;
        return v5[a3];
      }
      return "DATA.QMIContext.1:N:IPv4";
    }
    else
    {
      int v8 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315138;
        uint64_t v11 = asString();
        _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Wrong IP family: %s", (uint8_t *)&v10, 0xCu);
      }
      if (a3 < 0xA)
      {
        uint64_t v5 = off_26460FF30;
        return v5[a3];
      }
      return "DATA.QMIContext.1:N:IPvX";
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      uint64_t v11 = subscriber::asString();
      _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "Wrong SIM: %s", (uint8_t *)&v10, 0xCu);
    }
    return "DATA.QMIContext.X:X:IPvX";
  }
}

void QMIDataContextIPBase::initialize(QMIDataContextIPBase *this, char a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 112) || (a2 & 1) != 0 || (capabilities::ct::supportsDataQMIExtensions(this) & 1) == 0)
  {
    if ((*((_DWORD *)this + 35) - 1) < 2) {
      goto LABEL_9;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v21 = "called with wrong ipFamily";
      __int16 v22 = 2080;
      *(void *)int v23 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Data/QMI/"
                       "Context/QMIDataContextIPBase.cpp";
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = 546;
      _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT kDataProtocolFamilyIPv4 == fIpFamilyType || kDataProtocolFamilyIPv6 == fIpFamilyType\n %s\n at %s:%d\n**********", buf, 0x1Cu);
      if ((*((_DWORD *)this + 35) - 1) < 2) {
        goto LABEL_9;
      }
    }
    __TUAssertTrigger();
    if ((*((_DWORD *)this + 35) - 1) <= 1)
    {
LABEL_9:
      v18[0] = 0;
      v18[1] = 0;
      uint64_t v19 = 0;
      std::string::basic_string[abi:ne180100]<0>(v18, "data_1");
      std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)this + 72));
      uint64_t v4 = *((void *)this + 3);
      dispatch_object_t object = v4;
      if (v4) {
        dispatch_retain(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v5 || (uint64_t v6 = *((void *)this + 1), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v8 = v7;
      uint64_t v13 = v6;
      int v14 = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      Registry::getServerConnection(&v11, *((Registry **)this + 10));
      qmi::Client::createWithQueueLocal();
      long long v9 = *(_OWORD *)&v23[2];
      *(_OWORD *)&_OWORD v23[2] = 0uLL;
      int v10 = (std::__shared_weak_count *)*((void *)this + 21);
      *((_OWORD *)this + 10) = v9;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      qmi::Client::~Client((qmi::Client *)buf);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (object) {
        dispatch_release(object);
      }
      if (v17 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(v18[0]);
      }
    }
  }
  else
  {
    char v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I fWDSClient creation delayed", buf, 2u);
    }
  }
}

void sub_22249BBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, dispatch_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (object) {
    dispatch_release(object);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void QMIDataContextIPBase::bootstrapBBCtxCmdDriver(QMIDataContextIPBase *this)
{
  if (*((void *)this + 20))
  {
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 0x40000000;
    _DWORD v8[2] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke;
    void v8[3] = &__block_descriptor_tmp_24;
    v8[4] = this;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v10 = 0x40000000;
    uint64_t v11 = ___ZNK3qmi6Client13setIndHandlerIRKN3wds22ExtendedIPConfigChange10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    uint64_t v12 = &unk_26460FB60;
    uint64_t v13 = v8;
    uint64_t v2 = (capabilities::ct *)qmi::Client::setIndHandler();
    if (capabilities::ct::supportsThroughputEngineering(v2))
    {
      v7[0] = MEMORY[0x263EF8330];
      v7[1] = 0x40000000;
      _OWORD v7[2] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_2;
      void v7[3] = &__block_descriptor_tmp_73_2;
      void v7[4] = this;
      *(void *)long long buf = MEMORY[0x263EF8330];
      uint64_t v10 = 0x40000000;
      uint64_t v11 = ___ZNK3qmi6Client13setIndHandlerIRKN3wds8ANBRInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      uint64_t v12 = &unk_26460FB88;
      uint64_t v13 = v7;
      qmi::Client::setIndHandler();
      v6[0] = MEMORY[0x263EF8330];
      v6[1] = 0x40000000;
      unint64_t v6[2] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_3;
      v6[3] = &__block_descriptor_tmp_74_2;
      void v6[4] = this;
      *(void *)long long buf = MEMORY[0x263EF8330];
      uint64_t v10 = 0x40000000;
      uint64_t v11 = ___ZNK3qmi6Client13setIndHandlerIRKN3wds21ANBRProhibitTimerInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      uint64_t v12 = &unk_26460FBB0;
      uint64_t v13 = v6;
      qmi::Client::setIndHandler();
    }
    v5[20] = MEMORY[0x263EF8330];
    v5[21] = 0x40000000;
    v5[22] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_4;
    v5[23] = &__block_descriptor_tmp_76_3;
    v5[24] = this;
    qmi::Client::setHandler();
    v5[15] = MEMORY[0x263EF8330];
    uint8_t v5[16] = 0x40000000;
    v5[17] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_5;
    v5[18] = &__block_descriptor_tmp_77_3;
    v5[19] = this;
    qmi::Client::setHandler();
    v5[10] = MEMORY[0x263EF8330];
    v5[11] = 0x40000000;
    v5[12] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_6;
    v5[13] = &__block_descriptor_tmp_79_2;
    v5[14] = this;
    qmi::Client::setHandler();
    void v5[5] = MEMORY[0x263EF8330];
    v5[6] = 0x40000000;
    v5[7] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_7;
    unsigned char v5[8] = &__block_descriptor_tmp_80_1;
    v5[9] = this;
    qmi::Client::setHandler();
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 0x40000000;
    _DWORD v5[2] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_8;
    void v5[3] = &__block_descriptor_tmp_81_3;
    v5[4] = this;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v10 = 0x40000000;
    uint64_t v11 = ___ZNK3qmi6Client13setIndHandlerIRKN3wds13PktSrvcStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    uint64_t v12 = &unk_26460FBD8;
    uint64_t v13 = v5;
    qmi::Client::setIndHandler();
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 0x40000000;
    void v4[2] = ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_9;
    void v4[3] = &__block_descriptor_tmp_82_3;
    v4[4] = this;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v10 = 0x40000000;
    uint64_t v11 = ___ZNK3qmi6Client13setIndHandlerIRKN3wds11DadComplete10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    uint64_t v12 = &unk_26460FC00;
    uint64_t v13 = v4;
    qmi::Client::setIndHandler();
    qmi::Client::setIndShouldWake((QMIDataContextIPBase *)((char *)this + 144));
  }
  else
  {
    char v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I fWDSClient bootstrap delayed", buf, 2u);
    }
  }
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 257))
  {
    uint64_t v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "handleWdsExtendedIPConfigChangeInd";
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&buf, 0xCu);
    }
    if (*(void *)(v1 + 160))
    {
      memset(v10, 0, sizeof(v10));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
      *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::Settings>((uint64_t)v10) = 268288;
      void v5[5] = v1 + 144;
      uint64_t v6 = QMIServiceMsg::create();
      int v7 = 25000;
      uint64_t v8 = 0;
      long long aBlock = 0;
      v5[0] = MEMORY[0x263EF8330];
      v5[1] = 0x40000000;
      _DWORD v5[2] = ___ZN20QMIDataContextIPBase34handleWdsExtendedIPConfigChangeIndERKN3wds22ExtendedIPConfigChange10IndicationE_block_invoke_2;
      void v5[3] = &__block_descriptor_tmp_205;
      v5[4] = v1;
      *(void *)&long long buf = MEMORY[0x263EF8330];
      *((void *)&buf + 1) = 0x40000000;
      uint64_t v12 = ___ZNO3qmi6Client9SendProxy8callbackIN3wds18GetRuntimeSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      uint64_t v13 = &unk_26460FD68;
      int v14 = v5;
      char v3 = _Block_copy(&buf);
      long long aBlock = v3;
      if (v6)
      {
        qmi::Client::send();
        char v3 = aBlock;
      }
      if (v3) {
        _Block_release(v3);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
    }
    else
    {
      uint64_t v4 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "ipconfig after client is deleted", (uint8_t *)&buf, 2u);
      }
    }
  }
}

void sub_22249C300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 257)) {
    return;
  }
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "handleWdsANBRInfoInd";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  if (!*(void *)(v2 + 160))
  {
    uint64_t v12 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v13 = "ANBRInfo after client is deleted";
    int v14 = v12;
    uint32_t v15 = 2;
    goto LABEL_16;
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
  uint64_t v7 = TlvValue;
  if (!TlvValue) {
    return;
  }
  int v8 = v6;
  uint64_t v31 = TlvValue;
  unint64_t v9 = tlv::parseV<wds::tlv::BitRateInfo>((unint64_t *)&v31, v6);
  if (!v31)
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v7, v8);
    return;
  }
  unint64_t v10 = HIDWORD(v9);
  if (!HIDWORD(v9))
  {
    uint64_t v25 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v26 = "#N We got ABNR information for an unknown direction";
    goto LABEL_42;
  }
  if (HIDWORD(v9) == 2)
  {
    if (*(unsigned char *)(v2 + 856))
    {
      if (*(_DWORD *)(v2 + 840) == v9)
      {
        char v11 = 1;
        goto LABEL_21;
      }
      uint64_t v25 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v26 = "#N We got downlink ABNR information for an unknown filter";
    }
    else
    {
      uint64_t v25 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v26 = "#N We got downlink ABNR information but we do not have a registered downlink filter";
    }
LABEL_42:
    _os_log_impl(&dword_22231A000, v25, OS_LOG_TYPE_DEFAULT, v26, buf, 2u);
    return;
  }
  if (HIDWORD(v9) != 1)
  {
    BOOL v27 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    uint64_t v13 = "We got ABNR information for an unknown direction value: %d";
    int v14 = v27;
    uint32_t v15 = 8;
LABEL_16:
    _os_log_error_impl(&dword_22231A000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
    return;
  }
  if (!*(unsigned char *)(v2 + 856))
  {
    uint64_t v25 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v26 = "#N We got uplink ABNR information but we do not have a registered uplink filter";
    goto LABEL_42;
  }
  if (*(_DWORD *)(v2 + 840) != v9)
  {
    uint64_t v25 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v26 = "#N We got uplink ABNR information for an unknown filter";
    goto LABEL_42;
  }
  char v11 = 0;
LABEL_21:
  uint64_t v16 = qmi::MessageBase::findTlvValue(a2);
  uint64_t v18 = v16;
  if (v16)
  {
    int v19 = v17;
    *(void *)long long buf = v16;
    int v20 = tlv::parseV<wds::tlv::BitrateBps>((unint64_t *)buf, v17);
    if (!*(void *)buf)
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 193, v18, v19);
      return;
    }
    if (*(unsigned char *)(v2 + 856))
    {
      if (v11)
      {
        *(_DWORD *)(v2 + 848) = v20;
        uint64_t v21 = *(std::__shared_weak_count **)(v2 + 104);
        if (!v21) {
          return;
        }
        __int16 v22 = std::__shared_weak_count::lock(v21);
        if (!v22) {
          return;
        }
        int v23 = v22;
        uint64_t v24 = *(void *)(v2 + 96);
        if (v24)
        {
          if (!*(unsigned char *)(v2 + 856)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void, void))(*(void *)v24 + 112))(v24, *(unsigned int *)(v2 + 848), 0);
        }
      }
      else
      {
        *(_DWORD *)(v2 + 844) = v20;
        uint64_t v28 = *(std::__shared_weak_count **)(v2 + 104);
        if (!v28) {
          return;
        }
        int v29 = std::__shared_weak_count::lock(v28);
        if (!v29) {
          return;
        }
        int v23 = v29;
        uint64_t v30 = *(void *)(v2 + 96);
        if (v30)
        {
          if (!*(unsigned char *)(v2 + 856)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v30 + 112))(v30, *(unsigned int *)(v2 + 844), 1);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
}

void sub_22249C760(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_3(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 257)) {
    return;
  }
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v22 = 136315138;
    *(void *)&void v22[4] = "handleWdsANBRProhibitTimerInfoInd";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", v22, 0xCu);
  }
  if (*(void *)(v2 + 160))
  {
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v7 = TlvValue;
    if (TlvValue)
    {
      int v8 = v6;
      *(void *)__int16 v22 = TlvValue;
      int v9 = tlv::parseV<wds::tlv::ProhibitTimerHandle>((unint64_t *)v22, v6);
      if (*(void *)v22) {
        goto LABEL_10;
      }
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v7, v8);
    }
    int v9 = 0;
LABEL_10:
    uint64_t v10 = qmi::MessageBase::findTlvValue(a2);
    uint64_t v12 = v10;
    if (v10)
    {
      int v13 = v11;
      *(void *)__int16 v22 = v10;
      unint64_t v14 = tlv::parseV<wds::tlv::ProhibitTimerInfo>((unint64_t *)v22, v11);
      if (*(void *)v22)
      {
        if ((_BYTE)v14) {
          BOOL v15 = HIDWORD(v14) == 0;
        }
        else {
          BOOL v15 = 1;
        }
        __int16 v16 = !v15;
LABEL_22:
        if (*(unsigned char *)(v2 + 856))
        {
          if (*(_DWORD *)(v2 + 840) == v9)
          {
            *(_WORD *)(v2 + 852) = v16 | 0x100;
            uint64_t v18 = *(std::__shared_weak_count **)(v2 + 104);
            if (v18)
            {
              int v19 = std::__shared_weak_count::lock(v18);
              if (v19)
              {
                int v20 = v19;
                uint64_t v21 = *(void *)(v2 + 96);
                if (v21)
                {
                  if (!*(unsigned char *)(v2 + 856) || !*(unsigned char *)(v2 + 853)) {
                    std::__throw_bad_optional_access[abi:ne180100]();
                  }
                  (*(void (**)(uint64_t, void))(*(void *)v21 + 104))(v21, *(unsigned __int8 *)(v2 + 852));
                }
                std::__shared_weak_count::__release_shared[abi:ne180100](v20);
              }
            }
          }
        }
        return;
      }
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 2, v12, v13);
    }
    __int16 v16 = 0;
    goto LABEL_22;
  }
  int v17 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int16 v22 = 0;
    _os_log_error_impl(&dword_22231A000, v17, OS_LOG_TYPE_ERROR, "ANBRProhibitTimerInfo after client is deleted", v22, 2u);
  }
}

void sub_22249C9C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_4(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[257]) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 344))();
  }
  return result;
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_5(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 257))
  {
    if (*(void *)(v1 + 160))
    {
      QMIDataContextIPBase::setQMIChannelState(*(void *)(a1 + 32), 0);
      v34[1] = v1;
      v34[2] = 0;
      v34[0] = &unk_26D4CE200;
      __int16 v35 = v34;
      if ((*(unsigned int (**)(void))(**(void **)(v1 + 616) + 184))(*(void *)(v1 + 616)))
      {
        *(_OWORD *)std::string __p = 0u;
        long long v22 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
        uint64_t v16 = MEMORY[0x263EF8330];
        uint64_t v17 = 0x40000000;
        uint64_t v18 = ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke;
        int v19 = &__block_descriptor_tmp_113_1;
        uint64_t v20 = v1;
        uint64_t v2 = qmi::MutableMessageBase::getTLV<wds::tlv::DataPort>((uint64_t)__p, 1);
        ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke((uint64_t)&v16, v2);
        QMIDataContextIPBase::setQMIChannelState(v1, 1u);
        uint64_t v12 = QMIServiceMsg::create();
        *(void *)long long buf = MEMORY[0x263EF8330];
        uint64_t v29 = 1174405120;
        uint64_t v30 = ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke_2;
        uint64_t v31 = &__block_descriptor_tmp_114_3;
        uint64_t v32 = v1;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v33, (uint64_t)v34);
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v24 = 0x40000000;
        uint64_t v25 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds12BindDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        uint64_t v26 = &unk_26460FCA0;
        BOOL v27 = buf;
        char v3 = _Block_copy(&aBlock);
        unint64_t v14 = v3;
        if (v12)
        {
          qmi::Client::send();
          char v3 = v14;
        }
        if (!v3) {
          goto LABEL_34;
        }
      }
      else
      {
        if (!(*(unsigned int (**)(void))(**(void **)(v1 + 616) + 192))(*(void *)(v1 + 616)))
        {
          int v8 = *(NSObject **)(v1 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Unknown baseband type", buf, 2u);
          }
          if (!v35) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void *))(*v35 + 48))(v35);
          goto LABEL_35;
        }
        *(_OWORD *)std::string __p = 0u;
        long long v22 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
        uint64_t v16 = MEMORY[0x263EF8330];
        uint64_t v17 = 0x40000000;
        uint64_t v18 = ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke_115;
        int v19 = &__block_descriptor_tmp_117_1;
        uint64_t v20 = v1;
        uint64_t v5 = qmi::MutableMessageBase::getTLV<wds::tlv::MuxId>((uint64_t)__p, 17);
        ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke_115((uint64_t)&v16, v5);
        int v6 = *(std::__shared_weak_count **)(v1 + 104);
        if (v6)
        {
          int v6 = std::__shared_weak_count::lock(v6);
          uint64_t v7 = v6;
          if (v6) {
            int v6 = *(std::__shared_weak_count **)(v1 + 96);
          }
        }
        else
        {
          uint64_t v7 = 0;
        }
        int v9 = ((uint64_t (*)(std::__shared_weak_count *))v6->__vftable[9].__on_zero_shared_weak)(v6);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        if (v9)
        {
          uint64_t v10 = (const void **)__p[1];
          if (__p[1] != (void *)v22)
          {
            while (*((unsigned char *)*v10 + 8) != 16)
            {
              if (++v10 == (const void **)v22) {
                goto LABEL_29;
              }
            }
          }
          if (v10 == (const void **)v22) {
LABEL_29:
          }
            operator new();
          if (!v11) {
            __cxa_bad_cast();
          }
          *(void *)(v11 + 12) = 0x400000003;
        }
        QMIDataContextIPBase::setQMIChannelState(v1, 1u);
        uint64_t v13 = QMIServiceMsg::create();
        *(void *)long long buf = MEMORY[0x263EF8330];
        uint64_t v29 = 1174405120;
        uint64_t v30 = ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke_2_118;
        uint64_t v31 = &__block_descriptor_tmp_122_0;
        uint64_t v32 = v1;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v33, (uint64_t)v34);
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v24 = 0x40000000;
        uint64_t v25 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds15BindMuxDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        uint64_t v26 = &unk_26460FCC8;
        BOOL v27 = buf;
        char v3 = _Block_copy(&aBlock);
        BOOL v15 = v3;
        if (v13)
        {
          qmi::Client::send();
          char v3 = v15;
        }
        if (!v3)
        {
LABEL_34:
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v33);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
LABEL_35:
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v34);
          return;
        }
      }
      _Block_release(v3);
      goto LABEL_34;
    }
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I received kEventStarted after client is deleted", buf, 2u);
    }
  }
}

void sub_22249D0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v19 - 104));
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_6(uint64_t a1, dispatch_object_t object)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (object)
  {
    dispatch_retain(object);
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)dispatch_group_t group = 136315138;
    *(void *)&group[4] = "handleWDSEnterLowPower_sync";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: (WDS) Entering low power", group, 0xCu);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 128);
  if (v5)
  {
    int v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(v3 + 120);
      if (v8)
      {
        uint64_t v9 = *(void *)(v3 + 576);
        if (*(unsigned char *)(v3 + 112)) {
          BOOL v10 = *(_DWORD *)(v3 + 140) == 1;
        }
        else {
          BOOL v10 = 0;
        }
        *(void *)dispatch_group_t group = object;
        if (object)
        {
          dispatch_retain(object);
          dispatch_group_enter(object);
        }
        (*(void (**)(uint64_t, uint64_t, BOOL, unsigned char *))(*(void *)v8 + 56))(v8, v9, v10, group);
        if (*(void *)group)
        {
          dispatch_group_leave(*(dispatch_group_t *)group);
          if (*(void *)group) {
            dispatch_release(*(dispatch_object_t *)group);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (object)
  {
    dispatch_group_leave(object);
    dispatch_release(object);
    dispatch_release(object);
  }
}

void sub_22249D374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_7(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    uint64_t v9 = "handleWDSExitLowPower_sync";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: (WDS) Exiting low power", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v1 + 120);
      if (v6)
      {
        if (*(unsigned char *)(v1 + 112)) {
          BOOL v7 = *(_DWORD *)(v1 + 140) == 1;
        }
        else {
          BOOL v7 = 0;
        }
        (*(void (**)(uint64_t, void, BOOL))(*(void *)v6 + 64))(v6, *(void *)(v1 + 576), v7);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22249D4C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_8(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v189 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    uint64_t v183 = 0;
    uint64_t v184 = &v183;
    uint64_t v185 = 0x2000000000;
    char v186 = 0;
    uint64_t v179 = 0;
    v180 = &v179;
    uint64_t v181 = 0x2000000000;
    char v182 = 0;
    if (!*(void *)(v2 + 160))
    {
      uint64_t v6 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "received pktSvcStatInd after client is deleted", buf, 2u);
      }
      goto LABEL_46;
    }
    uint64_t v177 = 0;
    v178 = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 104);
    if (v4)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v4);
      uint64_t v5 = v4;
      if (v4) {
        uint64_t v4 = *(std::__shared_weak_count **)(v2 + 96);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    ((void (*)(uint64_t *__return_ptr))v4->__vftable[6].~__shared_weak_count)(&v177);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (!v177)
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2);
      uint64_t v12 = *(NSObject **)(v2 + 40);
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      if (v11 == 3)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#N %s: Stale deactivation ?", buf, 0xCu);
        }
        QMIDataContextIPBase::setDataContextIPState(v2, 0);
        unint64_t v14 = *(std::__shared_weak_count **)(v2 + 104);
        if (v14)
        {
          unint64_t v14 = std::__shared_weak_count::lock(v14);
          BOOL v15 = v14;
          if (v14) {
            unint64_t v14 = *(std::__shared_weak_count **)(v2 + 96);
          }
        }
        else
        {
          BOOL v15 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void))v14->__vftable[1].__on_zero_shared_weak)(v14, *(unsigned int *)(v2 + 140));
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        QMIDataContextIPBase::doneWithContext((QMIDataContextIPBase *)v2);
      }
      else if (v13)
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
        _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#E %s: WdsPacketSvcStatusInd not expected at this point !", buf, 0xCu);
      }
      goto LABEL_44;
    }
    v172[0] = MEMORY[0x263EF8330];
    v172[1] = 0x40000000;
    long long v173 = ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke;
    uint64_t v174 = &unk_26460F628;
    uint64_t v175 = &v183;
    uint64_t v176 = &v179;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v9 = TlvValue;
    if (TlvValue)
    {
      int v10 = v8;
      *(void *)long long buf = TlvValue;
      LOWORD(v154[0]) = tlv::parseV<wds::tlv::PktStatus>((unint64_t *)buf, v8);
      if (*(void *)buf) {
        v173((uint64_t)v172, v154);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v9, v10);
      }
    }
    if (*((unsigned char *)v180 + 24))
    {
      uint64_t v16 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
        _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: Deactivating due to IP reconfiguration", buf, 0xCu);
      }
      QMIDataContextIPBase::deactivateDataContextIP((QMIDataContextIPBase *)v2, 1, 0);
      goto LABEL_44;
    }
    uint64_t v168 = 0;
    long long v169 = &v168;
    uint64_t v170 = 0x2000000000;
    char v171 = 0;
    uint64_t v164 = 0;
    long long v165 = &v164;
    uint64_t v166 = 0x2000000000;
    if (*(_DWORD *)(v2 + 140) == 2) {
      int v17 = 6;
    }
    else {
      int v17 = 4;
    }
    int v167 = v17;
    uint64_t v160 = 0;
    v161 = &v160;
    uint64_t v162 = 0x2000000000;
    int v163 = 0;
    v154[0] = MEMORY[0x263EF8330];
    v154[1] = 0x40000000;
    v155 = (void (*)(void *, uint64_t *))___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_157;
    v156 = &unk_26460F650;
    int v157 = &v160;
    v158 = &v168;
    v159 = &v164;
    uint64_t v18 = qmi::MessageBase::findTlvValue(a2);
    uint64_t v20 = v18;
    if (v18)
    {
      int v21 = v19;
      *(void *)long long buf = v18;
      LODWORD(v137) = tlv::parseV<wds::tlv::IPPref>((unint64_t *)buf, v19);
      if (*(void *)buf) {
        v155(v154, &v137);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 18, v20, v21);
      }
    }
    if (*((unsigned char *)v169 + 24))
    {
      long long v22 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *((_DWORD *)v161 + 6);
        int v24 = *((_DWORD *)v165 + 6);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v23;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v24;
        uint64_t v25 = "#I %s: Received QMI_WDS_PKT_SRVC_STATUS_IND for IP Family %d but the model is %d - Bailing out";
        uint64_t v26 = v22;
        uint32_t v27 = 24;
LABEL_42:
        _os_log_impl(&dword_22231A000, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
      }
      goto LABEL_43;
    }
    switch(*((unsigned char *)v184 + 24))
    {
      case 1:
        uint64_t v130 = 0;
        uint64_t v131 = (uint64_t)&v130;
        uint64_t v132 = 0x2000000000;
        LOWORD(v133) = 0;
        uint64_t v149 = MEMORY[0x263EF8330];
        uint64_t v150 = 0x40000000;
        v151 = ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_159;
        v152 = &unk_26460F678;
        uint64_t aBlock = &v130;
        *(void *)long long buf = &v149;
        qmi::MessageBase::applyTlv<wds::tlv::CallEndReason,void({block_pointer})(wds::tlv::CallEndReason const&)>(a2, (uint64_t)buf);
        *(void *)&long long v147 = 0;
        *((void *)&v147 + 1) = &v147;
        *(void *)&long long v148 = 0x2000000000;
        WORD4(v148) = 0;
        uint64_t v143 = 0;
        int v144 = &v143;
        uint64_t v145 = 0x2000000000;
        __int16 v146 = 0;
        uint64_t v137 = MEMORY[0x263EF8330];
        uint64_t v138 = 0x40000000;
        long long v139 = ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_2;
        uint64_t v140 = &unk_26460F6A0;
        long long v141 = &v143;
        uint64_t v142 = &v147;
        *(void *)long long buf = &v137;
        qmi::MessageBase::applyTlv<wds::tlv::VerboseCallEndReasonType,void({block_pointer})(wds::tlv::VerboseCallEndReasonType const&)>(a2, (uint64_t)buf);
        char v28 = 0;
        if ((*(_WORD *)(*((void *)&v147 + 1) + 24) & 0xFEu) <= 9) {
          LOWORD(v29) = *(_WORD *)(*((void *)&v147 + 1) + 24);
        }
        else {
          LOBYTE(v29) = 0;
        }
        break;
      case 2:
        if (*(_DWORD *)(v2 + 140) == 2)
        {
          uint64_t v137 = MEMORY[0x263EF8330];
          uint64_t v138 = 0x40000000;
          long long v139 = ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_163;
          uint64_t v140 = &__block_descriptor_tmp_164;
          long long v141 = (uint64_t *)v2;
          *(void *)long long buf = &v137;
          qmi::MessageBase::applyTlv<wds::tlv::CarrierIPv6,void({block_pointer})(wds::tlv::CarrierIPv6 const&)>(a2, (uint64_t)buf);
        }
        *(_WORD *)(v2 + 176) = 0;
        __int16 v35 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
          _os_log_impl(&dword_22231A000, v35, OS_LOG_TYPE_DEFAULT, "#I %s: Connection is connected", buf, 0xCu);
        }
        uint64_t v36 = (capabilities::ct *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2);
        if (v36 > 6) {
          goto LABEL_43;
        }
        if (v36 == 4)
        {
          if (*(unsigned char *)(v2 + 272)
            && capabilities::ct::supports5G(v36)
            && (*(unsigned int (**)(uint64_t))(*(void *)v177 + 192))(v177))
          {
            int v39 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_22231A000, v39, OS_LOG_TYPE_DEFAULT, "#I WiFi->Cellular HO: free PduSessionId before getruntimesettings", buf, 2u);
            }
            int v40 = *(std::__shared_weak_count **)(v2 + 104);
            if (v40)
            {
              int v40 = std::__shared_weak_count::lock(v40);
              uint64_t v41 = v40;
              if (v40) {
                int v40 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v41 = 0;
            }
            ((void (*)(std::__shared_weak_count *))v40->__vftable[7].~__shared_weak_count_0)(v40);
            if (v41) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            }
          }
          long long v147 = 0u;
          long long v148 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v147);
          *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::Settings>((uint64_t)&v147) = 8666385;
          uint64_t v149 = v2 + 144;
          uint64_t v150 = QMIServiceMsg::create();
          LODWORD(v151) = 25000;
          v152 = 0;
          uint64_t aBlock = 0;
          uint64_t v130 = MEMORY[0x263EF8330];
          uint64_t v131 = 0x40000000;
          uint64_t v132 = (uint64_t)___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_2_170;
          long long v133 = &__block_descriptor_tmp_172;
          uint64_t v134 = v2;
          *(void *)long long buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIN3wds18GetRuntimeSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_26460FD68;
          *(void *)&unsigned char buf[32] = &v130;
          CFTypeID v120 = _Block_copy(buf);
          uint64_t aBlock = v120;
          if (v150)
          {
            qmi::Client::send();
            CFTypeID v120 = aBlock;
          }
          if (v120) {
            _Block_release(v120);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v147);
          goto LABEL_43;
        }
        uint64_t v37 = *(NSObject **)(v2 + 40);
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_43;
        }
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
        uint64_t v38 = asString();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v38;
        uint64_t v25 = "#I %s: ERR: QMI_WDS_PACKET_DATA_CONNECTED at wrong state %s";
        uint64_t v26 = v37;
        uint32_t v27 = 22;
        goto LABEL_42;
      case 3:
        uint64_t v33 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
          _os_log_impl(&dword_22231A000, v33, OS_LOG_TYPE_DEFAULT, "#I %s: Connection is suspended", buf, 0xCu);
        }
        if (*(_DWORD *)(v2 + 180) == -1)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)
            || (*(_DWORD *)long long buf = 136315650,
                *(void *)&uint8_t buf[4] = "packet handle should not be invalid here",
                *(_WORD *)&unsigned char buf[12] = 2080,
                *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDr"
                                      "ivers/Data/QMI/Context/QMIDataContextIPBase.cpp",
                *(_WORD *)&unsigned char buf[22] = 1024,
                *(_DWORD *)&unsigned char buf[24] = 1753,
                _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT fPacketDataHandle != kInvalidPacketHandle\n %s\n at %s:%d\n**********", buf, 0x1Cu), *(_DWORD *)(v2 + 180) == -1))
          {
            __TUAssertTrigger();
          }
        }
        goto LABEL_43;
      case 4:
        uint64_t v34 = *(NSObject **)(v2 + 40);
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_43;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
        uint64_t v25 = "#I %s: Connection is authenticating";
        uint64_t v26 = v34;
        uint32_t v27 = 12;
        goto LABEL_42;
      default:
        goto LABEL_43;
    }
    uint64_t CSIError = 1;
    int v31 = *((__int16 *)v144 + 12);
    int v32 = *((unsigned __int16 *)v144 + 12);
    switch((char)v29)
    {
      case 1:
        char v28 = 0;
        if (v31 > 127)
        {
          switch(*((_WORD *)v144 + 12))
          {
            case 0x80:
              goto LABEL_259;
            case 0x81:
            case 0x83:
            case 0x84:
              goto LABEL_109;
            case 0x82:
              goto LABEL_108;
            default:
              goto LABEL_110;
          }
          goto LABEL_110;
        }
        if ((v31 - 67) < 2 || v31 == 65) {
          goto LABEL_109;
        }
        if (v31 != 66) {
          goto LABEL_110;
        }
        goto LABEL_108;
      case 2:
        char v28 = 0;
        switch(*((_WORD *)v144 + 12))
        {
          case 0xCE:
            goto LABEL_89;
          case 0xD0:
            char v28 = 0;
            uint64_t CSIError = 91;
            goto LABEL_110;
          case 0xD1:
          case 0xD3:
            goto LABEL_83;
          case 0xD2:
            char v28 = 0;
            uint64_t CSIError = 92;
            goto LABEL_110;
          default:
            goto LABEL_110;
        }
      case 3:
        char v28 = 0;
        if (v31 <= 1068)
        {
          switch(*((_WORD *)v144 + 12))
          {
            case 0x3EA:
              goto LABEL_273;
            case 0x3EB:
LABEL_259:
              char v28 = 0;
              uint64_t CSIError = 67;
              break;
            case 0x3EC:
              char v28 = 0;
              uint64_t CSIError = 55;
              break;
            case 0x3ED:
              char v28 = 0;
              uint64_t CSIError = 56;
              break;
            case 0x3EE:
            case 0x3EF:
              char v28 = 0;
              uint64_t CSIError = 57;
              break;
            case 0x3F0:
            case 0x3F1:
            case 0x3F5:
            case 0x3F6:
              goto LABEL_110;
            case 0x3F2:
            case 0x3F4:
              char v28 = 0;
              uint64_t CSIError = 58;
              break;
            case 0x3F3:
              char v28 = 0;
              uint64_t CSIError = 59;
              break;
            case 0x3F7:
              char v28 = 0;
              uint64_t CSIError = 5;
              break;
            default:
              if (v31 == 515) {
                goto LABEL_273;
              }
              if (v31 == 524)
              {
LABEL_83:
                char v28 = 0;
                uint64_t CSIError = 101;
              }
              break;
          }
          goto LABEL_110;
        }
        if (v31 <= 1517)
        {
          if (v31 <= 1151)
          {
            if (v31 == 1069)
            {
              char v28 = 0;
              uint64_t CSIError = 90;
              goto LABEL_110;
            }
            if (v31 != 1121 && v31 != 1130)
            {
LABEL_110:
              unint64_t v42 = *(std::__shared_weak_count **)(v2 + 104);
              if (v42)
              {
                BOOL v43 = std::__shared_weak_count::lock(v42);
                if (v43) {
                  uint64_t v44 = *(void *)(v2 + 96);
                }
                else {
                  uint64_t v44 = 0;
                }
              }
              else
              {
                uint64_t v44 = 0;
                BOOL v43 = 0;
              }
              uint64_t v45 = *(std::__shared_weak_count **)(v2 + 128);
              if (v45)
              {
                uint64_t v46 = std::__shared_weak_count::lock(v45);
                if (v46)
                {
                  uint64_t v47 = v46;
                  char v48 = v28;
                  if (v44)
                  {
                    uint64_t v49 = *(char **)(v2 + 120);
                    if (v49)
                    {
                      uint64_t v188 = 0;
                      memset(buf, 0, sizeof(buf));
                      (*(void (**)(uint64_t))(*(void *)v44 + 304))(v44);
                      unsigned char buf[32] = (*(unsigned int (**)(uint64_t))(*(void *)v2 + 96))(v2) == 4;
                      *(void *)&unsigned char buf[40] = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v177 + 216))(v177, 0, 0, 0);
                      *(_DWORD *)&uint8_t buf[48] = CSIError;
                      *(void *)&buf[56] = *((unsigned __int16 *)v144 + 12);
                      LODWORD(v1std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 40))(v44);
                      HIDWORD(v1std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = (*(uint64_t (**)(char *))(*(void *)&v49[*(void *)(*(void *)v49 - 56)]
                                                                        + 24))(&v49[*(void *)(*(void *)v49 - 56)]);
                      (*(void (**)(uint64_t, unsigned char *))(*(void *)v44 + 408))(v44, buf);
                      if ((buf[31] & 0x80000000) != 0) {
                        operator delete(*(void **)&buf[8]);
                      }
                    }
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                  char v28 = v48;
                }
              }
              if (v43) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v43);
              }
              goto LABEL_124;
            }
LABEL_277:
            char v28 = 0;
            uint64_t CSIError = 102;
            goto LABEL_110;
          }
          if (v31 == 1152)
          {
            char v28 = 0;
            uint64_t CSIError = 103;
            goto LABEL_110;
          }
          if (v31 != 1504 && v31 != 1510) {
            goto LABEL_110;
          }
LABEL_273:
          char v28 = 0;
          uint64_t CSIError = 24;
          goto LABEL_110;
        }
        if (v31 <= 2000)
        {
          if (v31 == 1518) {
            goto LABEL_277;
          }
          if (v31 != 2000) {
            goto LABEL_110;
          }
        }
        else
        {
          if ((v31 - 2001) < 2) {
            goto LABEL_273;
          }
          if (v31 != 2003) {
            goto LABEL_110;
          }
        }
LABEL_89:
        uint64_t CSIError = 0;
        char v28 = 1;
        if (v32 == 206) {
          goto LABEL_110;
        }
LABEL_124:
        uint64_t v50 = 0;
        uint64_t v51 = *((__int16 *)v144 + 12);
        switch((char)v29)
        {
          case 1:
            uint64_t v50 = 1;
            break;
          case 2:
            uint64_t v50 = 2;
            break;
          case 3:
            long long v54 = *(std::__shared_weak_count **)(v2 + 104);
            if (v54)
            {
              long long v54 = std::__shared_weak_count::lock(v54);
              uint64_t v55 = v54;
              if (v54) {
                long long v54 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v55 = 0;
            }
            ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v54->__vftable[6].__get_deleter)(v54, 4, v51);
            if (v55) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
            uint64_t v50 = 3;
            break;
          case 6:
            uint64_t v56 = *(std::__shared_weak_count **)(v2 + 104);
            if (v56)
            {
              uint64_t v56 = std::__shared_weak_count::lock(v56);
              unint64_t v57 = v56;
              if (v56) {
                uint64_t v56 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              unint64_t v57 = 0;
            }
            ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v56->__vftable[6].__get_deleter)(v56, 1, v51);
            if (v57) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v57);
            }
            uint64_t v50 = 4;
            break;
          case 7:
            uint64_t v50 = 5;
            break;
          case 8:
            uint64_t v52 = *(std::__shared_weak_count **)(v2 + 104);
            if (v52)
            {
              uint64_t v52 = std::__shared_weak_count::lock(v52);
              uint64_t v53 = v52;
              if (v52) {
                uint64_t v52 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v58 = (int)v51 - 7;
            if (v58 > 0xC) {
              uint64_t v59 = 0;
            }
            else {
              uint64_t v59 = dword_222580618[v58];
            }
            ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v52->__vftable[6].__get_deleter)(v52, 2, v59);
            if (v53) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v53);
            }
            uint64_t v50 = 6;
            break;
          case 9:
            uint64_t v50 = 7;
            break;
          default:
            break;
        }
        unsigned int DSReason = getDSReason();
        int v129 = v29;
        if (v29 == 6) {
          uint64_t v60 = 1;
        }
        else {
          uint64_t v60 = 2 * (v29 == 8);
        }
        long long v61 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          char v124 = v28;
          unsigned int v125 = v60;
          unsigned __int8 v62 = v29;
          int v63 = *(unsigned __int16 *)(v131 + 24);
          long long v64 = wds::asString(v29);
          unsigned int v123 = v50;
          uint64_t v29 = CSIError;
          wds::asString(v62, *((__int16 *)v144 + 12), __p);
          int v65 = v136;
          unint64_t v66 = (void **)__p[0];
          int v67 = *((unsigned __int16 *)v144 + 12);
          uint64_t v68 = CSIErrorString();
          *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
          int v69 = __p;
          *(_DWORD *)long long buf = 136316674;
          if (v65 < 0) {
            int v69 = v66;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v63;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v64;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = v129;
          *(_WORD *)&buf[34] = 2082;
          *(void *)&buf[36] = v69;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v67;
          *(_WORD *)&buf[50] = 2080;
          *(void *)&buf[52] = v68;
          _os_log_impl(&dword_22231A000, v61, OS_LOG_TYPE_DEFAULT, "#I %s: Connection is disconnected. WDS (Reason = %d Verbose Reason Type = %s (%d) Verbose Reason = %{public}s (%d)) converted to %s", buf, 0x3Cu);
          if (v136 < 0) {
            operator delete(__p[0]);
          }
          uint64_t CSIError = v29;
          LOBYTE(v29) = v62;
          char v28 = v124;
          uint64_t v60 = v125;
          uint64_t v50 = v123;
        }
        *(_WORD *)(v2 + 176) = 0;
        if (v177 && (*(unsigned int (**)(uint64_t, void))(*(void *)v177 + 56))(v177, 0)) {
          std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v2 + 232));
        }
        uint64_t v70 = *(void *)(v2 + 264);
        if (!v70) {
          goto LABEL_171;
        }
        char v71 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
          _os_log_impl(&dword_22231A000, v71, OS_LOG_TYPE_DEFAULT, "#I %s: DeactivateDelayTimer already scheduled. Disposing it since we got disconnected", buf, 0xCu);
          uint64_t v70 = *(void *)(v2 + 264);
          *(void *)(v2 + 264) = 0;
          if (!v70) {
            goto LABEL_171;
          }
        }
        else
        {
          *(void *)(v2 + 264) = 0;
        }
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
LABEL_171:
        std::string v72 = wds::asString(v29);
        std::string::__assign_external((std::string *)(v2 + 464), v72);
        wds::asString(v29, *((__int16 *)v144 + 12), buf);
        CFBooleanRef v73 = (void **)(v2 + 488);
        if (*(char *)(v2 + 511) < 0) {
          operator delete(*v73);
        }
        *(_OWORD *)CFBooleanRef v73 = *(_OWORD *)buf;
        *(void *)(v2 + 504) = *(void *)&buf[16];
        std::string v74 = (const std::string::value_type *)CSIErrorString();
        std::string::__assign_external((std::string *)(v2 + 512), v74);
        if (*(_WORD *)(*((void *)&v147 + 1) + 24) == 6 && (DSReason == 33 || DSReason == 9))
        {
          BOOL v75 = *(std::__shared_weak_count **)(v2 + 104);
          if (v75)
          {
            BOOL v75 = std::__shared_weak_count::lock(v75);
            uint64_t v76 = v75;
            if (v75) {
              BOOL v75 = *(std::__shared_weak_count **)(v2 + 96);
            }
          }
          else
          {
            uint64_t v76 = 0;
          }
          ((void (*)(std::__shared_weak_count *, void))v75->__vftable[2].~__shared_weak_count)(v75, *(unsigned int *)(v2 + 140));
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
          char v77 = 1;
        }
        else
        {
          char v77 = 0;
        }
        if (*(unsigned char *)(v2 + 272))
        {
          uint64_t v78 = 2;
        }
        else if (CSIError == 101)
        {
          uint64_t v79 = *(std::__shared_weak_count **)(v2 + 104);
          if (v79)
          {
            uint64_t v79 = std::__shared_weak_count::lock(v79);
            int v80 = v79;
            if (v79) {
              uint64_t v79 = *(std::__shared_weak_count **)(v2 + 96);
            }
          }
          else
          {
            int v80 = 0;
          }
          ((void (*)(std::__shared_weak_count *, void))v79->__vftable[7].__on_zero_shared_weak)(v79, 0);
          if (v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v80);
          }
          uint64_t v78 = 3;
        }
        else
        {
          uint64_t v78 = 0;
          int v81 = *(unsigned __int16 *)(*((void *)&v147 + 1) + 24);
          if (v81 != 6 && v81 != 8) {
            uint64_t v78 = CSIError != 90;
          }
        }
        uint64_t v82 = (capabilities::ct *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2);
        switch((int)v82)
        {
          case 0:
          case 1:
            uint64_t v83 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
            {
              (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
              uint64_t v84 = asString();
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v84;
              _os_log_impl(&dword_22231A000, v83, OS_LOG_TYPE_DEFAULT, "#I %s: ERR: QMI_WDS_PACKET_DATA_DISCONNECTED at wrong state %s", buf, 0x16u);
            }
            goto LABEL_265;
          case 2:
            long long v85 = *(std::__shared_weak_count **)(v2 + 104);
            if (v85)
            {
              long long v85 = std::__shared_weak_count::lock(v85);
              int v86 = v85;
              if (v85) {
                long long v85 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              int v86 = 0;
            }
            ((void (*)(std::__shared_weak_count *))v85->__vftable[1].__get_deleter)(v85);
            if (v86) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v86);
            }
            int v106 = *(std::__shared_weak_count **)(v2 + 104);
            if (v106)
            {
              int v106 = std::__shared_weak_count::lock(v106);
              uint64_t v88 = v106;
              if (v106) {
                int v106 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v88 = 0;
            }
            ((void (*)(std::__shared_weak_count *))v106->__vftable[2].__on_zero_shared)(v106);
            goto LABEL_262;
          case 3:
            if (QMIDataContextIPBase::transitionalStateMaskIP((QMIDataContextIPBase *)v2))
            {
              QMIDataContextIPBase::setDataContextIPState(v2, 1u);
              uint64_t v87 = *(std::__shared_weak_count **)(v2 + 104);
              if (v87)
              {
                uint64_t v87 = std::__shared_weak_count::lock(v87);
                uint64_t v88 = v87;
                if (v87) {
                  uint64_t v87 = *(std::__shared_weak_count **)(v2 + 96);
                }
              }
              else
              {
                uint64_t v88 = 0;
              }
              goto LABEL_248;
            }
            QMIDataContextIPBase::setDataContextIPState(v2, 0);
            int v107 = *(std::__shared_weak_count **)(v2 + 104);
            if (v107)
            {
              int v107 = std::__shared_weak_count::lock(v107);
              uint64_t v88 = v107;
              if (v107) {
                int v107 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v88 = 0;
            }
            ((void (*)(std::__shared_weak_count *, void))v107->__vftable[1].__on_zero_shared_weak)(v107, *(unsigned int *)(v2 + 140));
            goto LABEL_262;
          case 4:
            if (*(unsigned char *)(v2 + 272)) {
              char v89 = v77;
            }
            else {
              char v89 = 1;
            }
            if (v89) {
              goto LABEL_289;
            }
            int v90 = *((unsigned __int16 *)v144 + 12);
            int v91 = capabilities::ct::supportsGemini(v82);
            if (v28) {
              goto LABEL_289;
            }
            if (v29 != 6)
            {
              int v92 = v29 == 3 ? v91 : 0;
              if (v90 != 1090 || !v92) {
                goto LABEL_289;
              }
            }
            unsigned int v126 = v60;
            unsigned int v128 = CSIError;
            uint64_t v93 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v94 = wds::asString(v29);
              wds::asString(v29, *((__int16 *)v144 + 12), __p);
              int v95 = v136;
              long long v96 = (void **)__p[0];
              int v97 = *((unsigned __int16 *)v144 + 12);
              uint64_t v98 = CSIErrorString();
              *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
              xpc_object_t v99 = __p;
              *(_DWORD *)long long buf = 136316418;
              if (v95 < 0) {
                xpc_object_t v99 = v96;
              }
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v94;
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = v129;
              *(_WORD *)&unsigned char buf[28] = 2082;
              *(void *)&buf[30] = v99;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&unsigned char buf[40] = v97;
              *(_WORD *)&buf[44] = 2080;
              *(void *)&buf[46] = v98;
              _os_log_impl(&dword_22231A000, v93, OS_LOG_TYPE_DEFAULT, "#I %s: DOUBLE TAP: Handover activation failed (Reason Type = %s (%d) Reason = %{public}s (%d)) converted to %s", buf, 0x36u);
              if (v136 < 0) {
                operator delete(__p[0]);
              }
            }
            int v100 = *(_DWORD *)(v2 + 276);
            if (v100 > 0)
            {
              uint64_t v101 = *(NSObject **)(v2 + 40);
              uint64_t v60 = v126;
              uint64_t CSIError = v128;
              if (!os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_289;
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v100;
              dispatch_object_t v102 = "#I %s: DOUBLE TAP: reached maximum attempts #%d, giving up";
              uint64_t v103 = v101;
              uint32_t v104 = 18;
              goto LABEL_288;
            }
            int v108 = v100 + 1;
            *(_DWORD *)(v2 + 276) = v108;
            uint64_t v109 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v108;
              _os_log_impl(&dword_22231A000, v109, OS_LOG_TYPE_DEFAULT, "#I %s: DOUBLE TAP: attempt #%d", buf, 0x12u);
              uint64_t v109 = *(NSObject **)(v2 + 40);
            }
            if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v110 = asString();
              uint64_t v111 = asString();
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v110;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)&unsigned char buf[24] = v111;
              _os_log_impl(&dword_22231A000, v109, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) stealth: %s to %s", buf, 0x20u);
            }
            *(_DWORD *)(v2 + 136) = 0;
            int v112 = *(_DWORD *)(v2 + 284);
            std::string::basic_string[abi:ne180100]<0>(buf, "DOUBLE TAP");
            __p[0] = 0;
            __p[1] = 0;
            char v113 = QMIDataContextIPBase::activateDataContextIP(v2, v112, (const std::string *)buf, 1, __p, 1);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v113) {
              goto LABEL_265;
            }
            char v114 = *(NSObject **)(v2 + 40);
            uint64_t v60 = v126;
            uint64_t CSIError = v128;
            if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
              dispatch_object_t v102 = "#I %s: DOUBLE TAP: failed to activate";
              uint64_t v103 = v114;
              uint32_t v104 = 12;
LABEL_288:
              _os_log_impl(&dword_22231A000, v103, OS_LOG_TYPE_DEFAULT, v102, buf, v104);
            }
LABEL_289:
            if (*(_WORD *)(*((void *)&v147 + 1) + 24) != 2 || *((_WORD *)v144 + 12) != 214 || *(unsigned char *)(v2 + 272)) {
              goto LABEL_292;
            }
            int v118 = *(_DWORD *)(v2 + 280);
            if (v118 <= 0)
            {
              int v121 = v118 + 1;
              *(_DWORD *)(v2 + 280) = v121;
              long long v122 = *(NSObject **)(v2 + 40);
              if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v121;
                _os_log_impl(&dword_22231A000, v122, OS_LOG_TYPE_DEFAULT, "#I %s: Activation rejected because of UNPREFERRED_RAT. Internal failure. Retry %d", buf, 0x12u);
              }
              uint64_t v115 = 1;
            }
            else
            {
              uint64_t v119 = *(NSObject **)(v2 + 40);
              uint64_t v115 = 0;
              if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "handleWdsPacketSvcStatusInd";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v118;
                _os_log_impl(&dword_22231A000, v119, OS_LOG_TYPE_DEFAULT, "#I %s: Activation rejected because of UNPREFERRED_RAT. Internal failure. Reached maximum attempts %d, giving up", buf, 0x12u);
LABEL_292:
                uint64_t v115 = 0;
              }
            }
            QMIDataContextIPBase::setDataContextIPState(v2, 1u);
            uint64_t v116 = *(std::__shared_weak_count **)(v2 + 104);
            if (v116)
            {
              uint64_t v116 = std::__shared_weak_count::lock(v116);
              BOOL v117 = v116;
              if (v116) {
                uint64_t v116 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              BOOL v117 = 0;
            }
            ((void (*)(std::__shared_weak_count *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))v116->__vftable[1].__get_deleter)(v116, *(unsigned int *)(v2 + 140), CSIError, *((unsigned __int16 *)v144 + 12), v60, v78, v115);
            if (v117) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v117);
            }
LABEL_264:
            QMIDataContextIPBase::doneWithContext((QMIDataContextIPBase *)v2);
LABEL_265:
            _Block_object_dispose(&v143, 8);
            _Block_object_dispose(&v147, 8);
            _Block_object_dispose(&v130, 8);
LABEL_43:
            _Block_object_dispose(&v160, 8);
            _Block_object_dispose(&v164, 8);
            _Block_object_dispose(&v168, 8);
LABEL_44:
            if (v178) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v178);
            }
LABEL_46:
            _Block_object_dispose(&v179, 8);
            _Block_object_dispose(&v183, 8);
            return;
          case 5:
            goto LABEL_230;
          case 6:
            if (QMIDataContextIPBase::transitionalStateMaskIP((QMIDataContextIPBase *)v2))
            {
              QMIDataContextIPBase::setDataContextIPState(v2, 1u);
              uint64_t v87 = *(std::__shared_weak_count **)(v2 + 104);
              if (v87)
              {
                uint64_t v87 = std::__shared_weak_count::lock(v87);
                uint64_t v88 = v87;
                if (v87) {
                  uint64_t v87 = *(std::__shared_weak_count **)(v2 + 96);
                }
              }
              else
              {
                uint64_t v88 = 0;
              }
LABEL_248:
              ((void (*)(std::__shared_weak_count *, void, uint64_t, void, uint64_t, uint64_t, void))v87->__vftable[1].__get_deleter)(v87, *(unsigned int *)(v2 + 140), CSIError, *((unsigned __int16 *)v144 + 12), v60, v78, 0);
            }
            else
            {
LABEL_230:
              QMIDataContextIPBase::setDataContextIPState(v2, 0);
              uint64_t v105 = *(std::__shared_weak_count **)(v2 + 104);
              if (v105)
              {
                uint64_t v105 = std::__shared_weak_count::lock(v105);
                uint64_t v88 = v105;
                if (v105) {
                  uint64_t v105 = *(std::__shared_weak_count **)(v2 + 96);
                }
              }
              else
              {
                uint64_t v88 = 0;
              }
              ((void (*)(std::__shared_weak_count *, void, uint64_t, void))v105->__vftable[2].~__shared_weak_count_0)(v105, *(unsigned int *)(v2 + 140), v50, DSReason);
            }
LABEL_262:
            if (v88) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
            }
            goto LABEL_264;
          default:
            goto LABEL_265;
        }
      case 6:
        uint64_t CSIError = getCSIError();
        if (CSIError) {
          goto LABEL_95;
        }
        int v32 = *((unsigned __int16 *)v144 + 12);
        goto LABEL_89;
      case 7:
        char v28 = 0;
        if (v32 == 3) {
          uint64_t CSIError = 67;
        }
        else {
          uint64_t CSIError = 1;
        }
        goto LABEL_110;
      case 8:
        char v28 = 0;
        if (v31 > 13)
        {
          if (v31 != 14)
          {
            if (v31 == 19)
            {
              char v28 = 0;
              uint64_t CSIError = 94;
            }
            goto LABEL_110;
          }
        }
        else if (v31 != 7)
        {
          if (v31 == 13)
          {
LABEL_108:
            char v28 = 0;
            uint64_t CSIError = 18;
          }
          goto LABEL_110;
        }
LABEL_109:
        char v28 = 0;
        uint64_t CSIError = 63;
        goto LABEL_110;
      case 9:
        if (v31 == 1)
        {
          char v28 = 0;
          uint64_t CSIError = 89;
        }
        else
        {
LABEL_95:
          char v28 = 0;
        }
        goto LABEL_110;
      default:
        goto LABEL_110;
    }
  }
}

void sub_22249F210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *aBlock,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v66 - 169) < 0) {
    operator delete(*(void **)(v66 - 192));
  }
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a13, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a66);
  }
  _Block_object_dispose((const void *)(v66 - 256), 8);
  _Block_object_dispose((const void *)(v66 - 224), 8);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase23bootstrapBBCtxCmdDriverEv_block_invoke_9(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "handleWdsDadCompleteInd";
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
    }
    if (*(void *)(v2 + 160))
    {
      if (*(_DWORD *)(v2 + 140) == 2)
      {
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZN20QMIDataContextIPBase23handleWdsDadCompleteIndERKN3wds11DadComplete10IndicationE_block_invoke;
        unint64_t v14 = &__block_descriptor_tmp_178_0;
        uint64_t v15 = v2;
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        if (TlvValue)
        {
          uint64_t v7 = TlvValue;
          int v8 = v6;
          uint64_t v12 = TlvValue;
          v16[0] = 0;
          v16[1] = 0;
          char v17 = 0;
          tlv::parseV<wds::tlv::IPv6>((unint64_t *)&v12, v6, (uint64_t)v16);
          if (v12) {
            (*(void (**)(unsigned char *, void *))&buf[16])(buf, v16);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v7, v8);
          }
        }
      }
      else
      {
        int v10 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "handleWdsDadCompleteInd";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v11;
          _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Received DAD complete indication but the model is %s - Bailing out", buf, 0x16u);
        }
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "received DadCompleteInd after client is deleted", buf, 2u);
      }
    }
  }
}

uint64_t QMIDataContextIPBase::startBBCtxCmdDriver(uint64_t this)
{
  if (*(void *)(this + 160)) {
    return qmi::Client::start((qmi::Client *)(this + 144));
  }
  return this;
}

void QMIDataContextIPBase::stopBBCtxCmdDriver(QMIDataContextIPBase *this)
{
  if (*((void *)this + 20))
  {
    qmi::Client::stop((QMIDataContextIPBase *)((char *)this + 144));
    memset(v3, 0, sizeof(v3));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
    *((void *)this + 20) = 0;
    *((void *)this + std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 21) = 0;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    qmi::Client::~Client((qmi::Client *)v3);
    *((unsigned char *)this + 257) = 1;
  }
}

void QMIDataContextIPBase::~QMIDataContextIPBase(std::__shared_weak_count **this)
{
  *this = (std::__shared_weak_count *)&unk_26D4CDC00;
  QMIDataContextIPBase::stopBBCtxCmdDriver((QMIDataContextIPBase *)this);
  uint64_t v2 = this[33];
  this[33] = 0;
  if (v2) {
    ((void (*)(std::__shared_weak_count *))v2->~__shared_weak_count_0)(v2);
  }
  QMIDataContextIPBase::clearIPv6ConfigTimer((QMIDataContextIPBase *)this);
  QMIDataContextIPBase::clearIPv4ConfigTimer((QMIDataContextIPBase *)this);
  std::__optional_destruct_base<AnbrFilterInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 85));
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](this + 80);
  uint64_t v3 = this[78];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = this[74];
  if (v4)
  {
    this[75] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[71];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MEMORY[0x223C98F70](this + 48);
  int v6 = this[39];
  if (v6)
  {
    this[40] = v6;
    operator delete(v6);
  }
  uint64_t v7 = this[37];
  this[37] = 0;
  if (v7) {
    ((void (*)(std::__shared_weak_count *))v7->~__shared_weak_count_0)(v7);
  }
  int v8 = this[36];
  this[36] = 0;
  if (v8) {
    ((void (*)(std::__shared_weak_count *))v8->~__shared_weak_count_0)(v8);
  }
  uint64_t v9 = this[33];
  this[33] = 0;
  if (v9) {
    ((void (*)(std::__shared_weak_count *))v9->~__shared_weak_count_0)(v9);
  }
  unint64_t v14 = (void **)(this + 29);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  int v10 = this[26];
  if (v10)
  {
    this[27] = v10;
    operator delete(v10);
  }
  qmi::Client::~Client((qmi::Client *)(this + 18));
  uint64_t v11 = this[16];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = this[13];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  BOOL v13 = this[11];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](this + 6);
  MEMORY[0x223C99A30](this + 5);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(this + 1);
}

uint64_t QMIDataContextIPBase::clearIPv6ConfigTimer(QMIDataContextIPBase *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "clearIPv6ConfigTimer";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: ", (uint8_t *)&v5, 0xCu);
  }
  uint64_t v3 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 306) = 0;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v5);
  uint64_t result = CSIPacketAddress::operator=();
  *((void *)this + 40) = *((void *)this + 39);
  return result;
}

uint64_t QMIDataContextIPBase::clearIPv4ConfigTimer(QMIDataContextIPBase *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "clearIPv4ConfigTimer";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: ", (uint8_t *)&v5, 0xCu);
  }
  uint64_t v3 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((unsigned char *)this + 305) = 0;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v5);
  return CSIPacketAddress::operator=();
}

void QMIDataContextIPBase::setDataContextIPState(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a2 != 4)
  {
    *(unsigned char *)(a1 + 637) = 0;
    std::function<BOOL ()(void)>::operator=((void *)(a1 + 640), a1 + 48);
    if (v2 - 5 >= 2)
    {
      if (v2) {
        goto LABEL_7;
      }
      *(unsigned char *)(a1 + 636) = 0;
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 568);
    *(_OWORD *)(a1 + 560) = 0u;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
LABEL_7:
  if (*(_DWORD *)(a1 + 136) == v2) {
    return;
  }
  if (v2 == 3)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
    if (v7)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v7);
      int v6 = v7;
      if (v7) {
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 96);
      }
    }
    else
    {
      int v6 = 0;
    }
    ((void (*)(std::__shared_weak_count *))v7->__vftable[8].__get_deleter)(v7);
    goto LABEL_20;
  }
  if (v2 == 6)
  {
    int v5 = *(std::__shared_weak_count **)(a1 + 104);
    if (v5)
    {
      int v5 = std::__shared_weak_count::lock(v5);
      int v6 = v5;
      if (v5) {
        int v5 = *(std::__shared_weak_count **)(a1 + 96);
      }
    }
    else
    {
      int v6 = 0;
    }
    ((void (*)(std::__shared_weak_count *, void))v5->__vftable[8].__on_zero_shared)(v5, *(unsigned int *)(a1 + 140));
LABEL_20:
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (v8)
  {
    int v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    if (v8) {
      int v8 = *(std::__shared_weak_count **)(a1 + 96);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v2 < 7) {
    uint64_t v10 = v2 + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 140) & 1;
  if (*(int *)(a1 + 140) >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = -v11;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, BOOL, uint64_t))v8->__vftable[9].~__shared_weak_count_0)(v8, v10, v2 == 4, v12);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  BOOL v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 136315906;
    int v23 = "setDataContextIPState";
    __int16 v24 = 2080;
    uint64_t v25 = asString();
    __int16 v26 = 2080;
    uint64_t v27 = asString();
    __int16 v28 = 2080;
    uint64_t v29 = asStringBool();
    _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Changing state (change states) %s->%s, fStopRequestSent = %s", (uint8_t *)&v22, 0x2Au);
  }
  *(_DWORD *)(a1 + 136) = v2;
  switch(v2)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      if (*(unsigned char *)(a1 + 856))
      {
        QMIDataContextIPBase::shutdownAnbrHandle((QMIDataContextIPBase *)a1, (int *)(a1 + 680));
        unint64_t v14 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          if (!*(unsigned char *)(a1 + 856)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          uint64_t v15 = (const char *)*(unsigned int *)(a1 + 840);
          int v22 = 134217984;
          int v23 = v15;
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I ANBRFilter: handle %lu removed (1)", (uint8_t *)&v22, 0xCu);
        }
      }
      LOBYTE(v22) = 0;
      char v30 = 0;
      std::__optional_storage_base<AnbrFilterInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AnbrFilterInfo,false>>(a1 + 680, (uint64_t)&v22);
      std::__optional_destruct_base<AnbrFilterInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v22);
      goto LABEL_42;
    case 4u:
      goto LABEL_43;
    case 5u:
LABEL_42:
      *(_DWORD *)(a1 + 280) = 0;
LABEL_43:
      uint64_t v16 = *(std::__shared_weak_count **)(a1 + 104);
      if (v16)
      {
        uint64_t v16 = std::__shared_weak_count::lock(v16);
        char v17 = v16;
        if (v16) {
          uint64_t v16 = *(std::__shared_weak_count **)(a1 + 96);
        }
      }
      else
      {
        char v17 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, void, void))v16->__vftable[6].__on_zero_shared)(v16, *(unsigned int *)(a1 + 140), 0, 0);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      QMIDataContextIPBase::clearIPv6ConfigTimer((QMIDataContextIPBase *)a1);
      QMIDataContextIPBase::clearIPv4ConfigTimer((QMIDataContextIPBase *)a1);
      goto LABEL_50;
    case 6u:
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 104);
      if (v20)
      {
        uint64_t v20 = std::__shared_weak_count::lock(v20);
        int v21 = v20;
        if (v20) {
          uint64_t v20 = *(std::__shared_weak_count **)(a1 + 96);
        }
      }
      else
      {
        int v21 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t, void))v20->__vftable[6].__on_zero_shared)(v20, *(unsigned int *)(a1 + 140), 1, 0);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      *(_DWORD *)(a1 + 280) = 0;
LABEL_50:
      unsigned int v2 = *(_DWORD *)(a1 + 136);
      break;
    default:
      break;
  }
  if ((v2 | 2) != 6)
  {
    QMIDataContextIPBase::setHandoverActivation((QMIDataContextIPBase *)a1, 0);
    *(_DWORD *)(a1 + 284) = 0;
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 104);
  if (v18)
  {
    uint64_t v18 = std::__shared_weak_count::lock(v18);
    int v19 = v18;
    if (v18) {
      uint64_t v18 = *(std::__shared_weak_count **)(a1 + 96);
    }
  }
  else
  {
    int v19 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v18->__vftable[8].__on_zero_shared_weak)(v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_22249FFFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void QMIDataContextIPBase::setHandoverActivation(QMIDataContextIPBase *this, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315394;
    uint64_t v9 = "setHandoverActivation";
    __int16 v10 = 2080;
    uint64_t v11 = asStringBool();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s:  %s ", (uint8_t *)&v8, 0x16u);
  }
  if (*((unsigned __int8 *)this + 272) != a2)
  {
    int v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = asStringBool();
      uint64_t v7 = asStringBool();
      int v8 = 136315650;
      uint64_t v9 = "setHandoverActivation";
      __int16 v10 = 2080;
      uint64_t v11 = v6;
      __int16 v12 = 2080;
      uint64_t v13 = v7;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: changing fHandoverActivation from %s to %s", (uint8_t *)&v8, 0x20u);
    }
    *((unsigned char *)this + 272) = a2;
  }
  if ((a2 & 1) == 0) {
    *((_DWORD *)this + 69) = 0;
  }
}

uint64_t QMIDataContextIPBase::createWdsClientOnDemand_sync(QMIDataContextIPBase *this)
{
  QMIDataContextIPBase::initialize(this, 1);
  (*(void (**)(QMIDataContextIPBase *))(*(void *)this + 16))(this);
  unsigned int v2 = *(uint64_t (**)(QMIDataContextIPBase *))(*(void *)this + 24);

  return v2(this);
}

uint64_t QMIDataContextIPBase::activateDataContextIP(uint64_t a1, int a2, const std::string *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  __int16 v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "activateDataContextIP";
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v13
    || (uint64_t v14 = std::__shared_weak_count::lock(v13)) == 0
    || (uint64_t v15 = *(void *)(a1 + 96), std::__shared_weak_count::__release_shared[abi:ne180100](v14), !v15))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "should have observer here";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Data"
                            "/QMI/Context/QMIDataContextIPBase.cpp";
      *(_WORD *)&unsigned char buf[22] = 1024;
      int v56 = 706;
      _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT getObserver()\n %s\n at %s:%d\n**********", buf, 0x1Cu);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v16
      || (char v17 = std::__shared_weak_count::lock(v16)) == 0
      || (uint64_t v18 = *(void *)(a1 + 96), std::__shared_weak_count::__release_shared[abi:ne180100](v17), !v18))
    {
      __TUAssertTrigger();
    }
  }
  int v19 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v19) {
    return 0;
  }
  uint64_t v20 = std::__shared_weak_count::lock(v19);
  if (!v20) {
    return 0;
  }
  uint64_t v21 = *(void *)(a1 + 96);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (!v21) {
    return 0;
  }
  uint64_t v53 = 0;
  long long v54 = 0;
  int v22 = *(std::__shared_weak_count **)(a1 + 104);
  if (v22)
  {
    int v22 = std::__shared_weak_count::lock(v22);
    int v23 = v22;
    if (v22) {
      int v22 = *(std::__shared_weak_count **)(a1 + 96);
    }
  }
  else
  {
    int v23 = 0;
  }
  ((void (*)(uint64_t *__return_ptr))v22->__vftable[6].~__shared_weak_count)(&v53);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (!v53)
  {
    __int16 v28 = *(NSObject **)(a1 + 40);
    uint64_t v24 = 0;
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v29 = "#N activateDataContextIP: probably other IP family activation already failed and settings was cleaned";
    char v30 = v28;
    uint32_t v31 = 2;
LABEL_37:
    _os_log_impl(&dword_22231A000, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    goto LABEL_38;
  }
  if (*(unsigned char *)(a1 + 257))
  {
LABEL_38:
    uint64_t v24 = 0;
    goto LABEL_39;
  }
  uint64_t v26 = *(void *)(a1 + 264);
  if (v26)
  {
    uint64_t v27 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "activateDataContextIP";
      _os_log_impl(&dword_22231A000, v27, OS_LOG_TYPE_DEFAULT, "#I %s: DeactivateDelayTimer already scheduled. Dispose it", buf, 0xCu);
      uint64_t v26 = *(void *)(a1 + 264);
      *(void *)(a1 + 264) = 0;
      if (!v26) {
        goto LABEL_33;
      }
    }
    else
    {
      *(void *)(a1 + 264) = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
LABEL_33:
  unsigned int v32 = *(_DWORD *)(a1 + 136);
  if (v32 > 6) {
    goto LABEL_46;
  }
  if (((1 << v32) & 0x2E) != 0)
  {
    uint64_t v33 = *(NSObject **)(a1 + 40);
    uint64_t v24 = 0;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    uint64_t v34 = asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "activateDataContextIP";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v34;
    uint64_t v29 = "#I %s:  can not activate at %s, nothing to be done";
    char v30 = v33;
    uint32_t v31 = 22;
    goto LABEL_37;
  }
  if (((1 << v32) & 0x50) == 0)
  {
LABEL_46:
    if (a6)
    {
LABEL_47:
      uint64_t v38 = 0;
      int v39 = 0;
LABEL_48:
      PDPMetricInfo::clear((PDPMetricInfo *)(a1 + 384));
      *(_DWORD *)(a1 + 552) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
      std::string::operator=((std::string *)(a1 + 392), a3);
      *(void *)(a1 + 544) = (*(uint64_t (**)(void))(**(void **)(a1 + 616) + 80))(*(void *)(a1 + 616));
      *(_DWORD *)(a1 + 284) = a2;
      int v40 = (capabilities::ct *)std::function<BOOL ()(void)>::operator=((void *)(a1 + 640), a1 + 48);
      *(unsigned char *)(a1 + 638) = 0;
      if (capabilities::ct::supportsDataQMIExtensions(v40) && !*(unsigned char *)(a1 + 672))
      {
        uint64_t v41 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_22231A000, v41, OS_LOG_TYPE_DEFAULT, "#I lazy creation of fQOSClient", buf, 2u);
        }
        unint64_t v42 = *(std::__shared_weak_count **)(a1 + 104);
        if (v42)
        {
          unint64_t v42 = std::__shared_weak_count::lock(v42);
          BOOL v43 = v42;
          if (v42) {
            unint64_t v42 = *(std::__shared_weak_count **)(a1 + 96);
          }
        }
        else
        {
          BOOL v43 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void))v42->__vftable[10].__on_zero_shared)(v42, *(unsigned int *)(a1 + 140));
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        *(unsigned char *)(a1 + 672) = 1;
      }
      int v47 = *(_DWORD *)(a1 + 632) != 4;
      *(unsigned char *)(a1 + 637) = v47;
      if (!*(void *)(a1 + 160))
      {
        *(unsigned char *)(a1 + 637) = 1;
        char v48 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_73;
        }
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_22231A000, v48, OS_LOG_TYPE_DEFAULT, "#I force fPendingChannelInitialization to true", buf, 2u);
        int v47 = *(unsigned __int8 *)(a1 + 637);
      }
      if (!v47)
      {
        uint64_t v50 = v38;
        uint64_t v51 = v39;
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 328))(a1, a4, &v50, a6);
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        goto LABEL_90;
      }
      char v48 = *(NSObject **)(a1 + 40);
LABEL_73:
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "activateDataContextIP";
        _os_log_impl(&dword_22231A000, v48, OS_LOG_TYPE_DEFAULT, "#N %s: PendingChannelInitialization: Too early!!! Context comm channel is not initialized yet. Initiating pending activation.", buf, 0xCu);
      }
      long long v52 = 0uLL;
      ctu::SharedSynchronizable<QMIDataContextIPBase>::weak_from_this(&v52, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      *(void *)long long buf = a1;
      *(_OWORD *)&uint8_t buf[8] = v52;
      if (*((void *)&v52 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 16), 1uLL, memory_order_relaxed);
      }
      LOBYTE(v56) = a4;
      uint64_t v57 = v38;
      uint64_t v58 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v59 = a6;
      std::function<BOOL ()(void)>::operator=<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,void>((void *)(a1 + 640), (uint64_t *)buf);
      QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0::~$_0((uint64_t)buf);
      if (!*(void *)(a1 + 160))
      {
        uint64_t v49 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_22231A000, v49, OS_LOG_TYPE_DEFAULT, "#I create fWDSClient on-demand", buf, 2u);
        }
        QMIDataContextIPBase::createWdsClientOnDemand_sync((QMIDataContextIPBase *)a1);
      }
      if (*((void *)&v52 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v52 + 1));
      }
      uint64_t v24 = 1;
LABEL_90:
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      goto LABEL_39;
    }
    uint64_t v44 = (void *)*a5;
    if (!*a5)
    {
      __int16 v35 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      uint64_t v46 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "activateDataContextIP";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v46;
      uint64_t v37 = "#I %s:  can not activate at %s, another activation in process";
      goto LABEL_44;
    }
    int v45 = *(_DWORD *)(a1 + 140);
    if (v45 == 2)
    {
      uint64_t v38 = v44[3];
      int v39 = (std::__shared_weak_count *)v44[4];
      if (!v39) {
        goto LABEL_48;
      }
    }
    else
    {
      if (v45 != 1) {
        goto LABEL_47;
      }
      uint64_t v38 = v44[1];
      int v39 = (std::__shared_weak_count *)v44[2];
      if (!v39) {
        goto LABEL_48;
      }
    }
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_48;
  }
  __int16 v35 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "activateDataContextIP";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v36;
    uint64_t v37 = "#I %s:  can not activate at %s, nothing to be done";
LABEL_44:
    _os_log_impl(&dword_22231A000, v35, OS_LOG_TYPE_DEFAULT, v37, buf, 0x16u);
  }
LABEL_45:
  uint64_t v24 = 1;
LABEL_39:
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  return v24;
}

void sub_2224A0A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void ctu::SharedSynchronizable<QMIDataContextIPBase>::weak_from_this(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  if (!this || (int v5 = std::__shared_weak_count::lock(this)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *a1 = a2;
  a1[1] = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void *std::function<BOOL ()(void)>::operator=<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,void>(void *a1, uint64_t *a2)
{
  void v12[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  char v6 = *((unsigned char *)a2 + 24);
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a2[4] = 0;
  a2[5] = 0;
  char v9 = *((unsigned char *)a2 + 48);
  __int16 v10 = operator new(0x40uLL);
  *__int16 v10 = &unk_26D4CE040;
  v10[1] = v3;
  _OWORD v10[2] = v4;
  void v10[3] = v5;
  *((unsigned char *)v10 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v6;
  void v10[5] = v7;
  void v10[6] = v8;
  *((unsigned char *)v10 + 56) = v9;
  uint64_t v12[3] = v10;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v12, a1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v12);
  return a1;
}

void sub_2224A0C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0::~$_0(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void QMIDataContextIPBase::stopNetworkIface(QMIDataContextIPBase *this, int a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "stopNetworkIface";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asStringBool();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start, stopRequestSent=%s", buf, 0x16u);
  }
  if (!*((unsigned char *)this + 636))
  {
    int v5 = *((_DWORD *)this + 45);
    if (v5 != -1)
    {
      char v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "stopNetworkIface";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Deactivating fPacketDataHandle=%d", buf, 0x12u);
      }
      long long v36 = 0u;
      long long v37 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
      v35[0] = MEMORY[0x263EF8330];
      v35[1] = 0x40000000;
      v35[2] = ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke;
      v35[3] = &__block_descriptor_tmp_86_3;
      v35[4] = this;
      uint64_t v7 = (const void **)*((void *)&v36 + 1);
      if (*((void *)&v36 + 1) != (void)v37)
      {
        while (*((unsigned char *)*v7 + 8) != 1)
        {
          if (++v7 == (const void **)v37) {
            goto LABEL_21;
          }
        }
      }
      if (v7 == (const void **)v37) {
LABEL_21:
      }
        operator new();
      if (v8)
      {
        uint64_t v14 = (capabilities::ct *)___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke((uint64_t)v35, v8 + 3);
        char v15 = capabilities::ct::supportsDataQMIExtensions(v14);
        if ((v15 & 1) == 0)
        {
          if (*((unsigned __int8 *)this + 256) != 255)
          {
            v34[0] = MEMORY[0x263EF8330];
            v34[1] = 0x40000000;
            v34[2] = ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_2;
            void v34[3] = &__block_descriptor_tmp_88_4;
            void v34[4] = this;
            uint64_t v16 = (const void **)*((void *)&v36 + 1);
            if (*((void *)&v36 + 1) != (void)v37)
            {
              while (*((unsigned __int8 *)*v16 + 8) != 195)
              {
                if (++v16 == (const void **)v37) {
                  goto LABEL_37;
                }
              }
            }
            if (v16 == (const void **)v37) {
LABEL_37:
            }
              operator new();
            if (!v17) {
              goto LABEL_61;
            }
            ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_2((uint64_t)v34, v17 + 9);
          }
          *((unsigned char *)this + 256) = -1;
        }
        if (!a2)
        {
LABEL_53:
          *((unsigned char *)this + 636) = 1;
          uint64_t v29 = (char *)this + 144;
          uint64_t v30 = QMIServiceMsg::create();
          int v31 = 25000;
          uint64_t v21 = (unsigned __int16 *)((char *)this + 176);
          unsigned int v32 = (char *)this + 176;
          uint64_t aBlock = 0;
          v28[0] = MEMORY[0x263EF8330];
          v28[1] = 0x40000000;
          _OWORD v28[2] = ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_4;
          void v28[3] = &__block_descriptor_tmp_91_2;
          void v28[4] = this;
          *(void *)long long buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16StopNetworkIface8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          int v39 = &unk_26460FC28;
          int v40 = v28;
          int v22 = _Block_copy(buf);
          uint64_t aBlock = v22;
          if (v30)
          {
            qmi::Client::send();
            int v22 = aBlock;
          }
          if (v22) {
            _Block_release(v22);
          }
          int v23 = *((void *)this + 5);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            int v24 = *v21;
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "stopNetworkIface";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v24;
            _os_log_impl(&dword_22231A000, v23, OS_LOG_TYPE_DEFAULT, "#I %s: Sent StopNetworkIface fActivateTxId=%d", buf, 0x12u);
          }
LABEL_59:
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
          return;
        }
        int v19 = (const void **)*((void *)&v36 + 1);
        if (*((void *)&v36 + 1) != (void)v37)
        {
          while (*((unsigned char *)*v19 + 8) != 17)
          {
            if (++v19 == (const void **)v37) {
              goto LABEL_52;
            }
          }
        }
        if (v19 == (const void **)v37) {
LABEL_52:
        }
          operator new();
        if (v20)
        {
          v20[9] = 1;
          goto LABEL_53;
        }
      }
LABEL_61:
      __cxa_bad_cast();
    }
    int v9 = *((unsigned __int16 *)this + 88);
    __int16 v10 = *((void *)this + 5);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "stopNetworkIface";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Aborting transaction fActivateTxId=%d", buf, 0x12u);
      }
      long long v36 = 0u;
      long long v37 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 0x40000000;
      void v27[2] = ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_92;
      v27[3] = &__block_descriptor_tmp_94_4;
      void v27[4] = this;
      __int16 v12 = (const void **)*((void *)&v36 + 1);
      if (*((void *)&v36 + 1) != (void)v37)
      {
        while (*((unsigned char *)*v12 + 8) != 1)
        {
          if (++v12 == (const void **)v37) {
            goto LABEL_27;
          }
        }
      }
      if (v12 == (const void **)v37) {
LABEL_27:
      }
        operator new();
      if (!v13) {
        __cxa_bad_cast();
      }
      ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_92((uint64_t)v27, v13 + 5);
      uint64_t v29 = (char *)this + 144;
      uint64_t v30 = QMIServiceMsg::create();
      int v31 = 25000;
      unsigned int v32 = 0;
      uint64_t aBlock = 0;
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 0x40000000;
      v25[2] = ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_2_95;
      v25[3] = &__block_descriptor_tmp_96_1;
      void v25[4] = this;
      char v26 = a2;
      *(void *)long long buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16AbortTransaction8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      int v39 = &unk_26460FC50;
      int v40 = v25;
      uint64_t v18 = _Block_copy(buf);
      uint64_t aBlock = v18;
      if (v30)
      {
        qmi::Client::send();
        uint64_t v18 = aBlock;
      }
      if (v18) {
        _Block_release(v18);
      }
      *((_WORD *)this + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
      goto LABEL_59;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "stopNetworkIface";
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Both fPacketDataHandle and fActivateTxId are invalid, not doing anything", buf, 0xCu);
    }
  }
}

void sub_2224A17F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a26);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v26 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 180);
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 256);
  return result;
}

void ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_4(uint64_t a1, uint64_t a2)
{
  *(void *)&v22[13] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315138;
      uint64_t v20 = "handleDeactivateResponse";
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v19, 0xCu);
    }
    int v5 = *(_DWORD *)(a2 + 4);
    if (v5)
    {
      char v6 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = qmi::asString();
        int v19 = 136315650;
        uint64_t v20 = "handleDeactivateResponse";
        __int16 v21 = 1024;
        *(_DWORD *)int v22 = v5;
        _OWORD v22[2] = 2080;
        *(void *)&v22[3] = v7;
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Error deactivating: 0x%x (%s)", (uint8_t *)&v19, 0x1Cu);
      }
      if (QMIDataContextIPBase::transitionalStateMaskIP((QMIDataContextIPBase *)v2)
        || (*(unsigned int (**)(uint64_t))(*(void *)v2 + 96))(v2) == 4)
      {
        QMIDataContextIPBase::setDataContextIPState(v2, 1u);
        uint64_t v8 = *(std::__shared_weak_count **)(v2 + 104);
        if (v8)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v8);
          int v9 = v8;
          if (v8) {
            uint64_t v8 = *(std::__shared_weak_count **)(v2 + 96);
          }
        }
        else
        {
          int v9 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v8->__vftable[1].__get_deleter)(v8, *(unsigned int *)(v2 + 140), 1, 0, 0, 2, 0);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
LABEL_15:
        QMIDataContextIPBase::doneWithContext((QMIDataContextIPBase *)v2);
        return;
      }
      unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2);
      if (v10 <= 6)
      {
        if (((1 << v10) & 0x73) != 0)
        {
          BOOL v11 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
            uint64_t v12 = asString();
            int v19 = 136315394;
            uint64_t v20 = "handleDeactivateResponse";
            __int16 v21 = 2080;
            *(void *)int v22 = v12;
            _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: At wrong state %s", (uint8_t *)&v19, 0x16u);
          }
        }
        else
        {
          if (v10 != 2)
          {
            QMIDataContextIPBase::setDataContextIPState(v2, 0);
            char v15 = *(std::__shared_weak_count **)(v2 + 104);
            if (v15)
            {
              char v15 = std::__shared_weak_count::lock(v15);
              uint64_t v16 = v15;
              if (v15) {
                char v15 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v16 = 0;
            }
            ((void (*)(std::__shared_weak_count *, void))v15->__vftable[1].__on_zero_shared_weak)(v15, *(unsigned int *)(v2 + 140));
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            goto LABEL_15;
          }
          uint64_t v13 = *(std::__shared_weak_count **)(v2 + 104);
          if (v13)
          {
            uint64_t v13 = std::__shared_weak_count::lock(v13);
            uint64_t v14 = v13;
            if (v13) {
              uint64_t v13 = *(std::__shared_weak_count **)(v2 + 96);
            }
          }
          else
          {
            uint64_t v14 = 0;
          }
          ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v13->__vftable[1].__get_deleter)(v13, *(unsigned int *)(v2 + 140), 93, 0, 0, 2, 0);
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          char v17 = *(std::__shared_weak_count **)(v2 + 104);
          if (v17)
          {
            char v17 = std::__shared_weak_count::lock(v17);
            uint64_t v18 = v17;
            if (v17) {
              char v17 = *(std::__shared_weak_count **)(v2 + 96);
            }
          }
          else
          {
            uint64_t v18 = 0;
          }
          ((void (*)(std::__shared_weak_count *))v17->__vftable[2].__on_zero_shared)(v17);
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          QMIDataContextIPBase::doneWithContext((QMIDataContextIPBase *)v2);
        }
      }
    }
  }
}

void sub_2224A1C54(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_92(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(*(void *)(result + 32) + 176);
  return result;
}

void ___ZN20QMIDataContextIPBase16stopNetworkIfaceEb_block_invoke_2_95(uint64_t a1, uint64_t a2)
{
  *(void *)&v26[13] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 257)) {
    return;
  }
  int v4 = *(_DWORD *)(a2 + 4);
  if (!v4) {
    *(unsigned char *)(v2 + 636) = 1;
  }
  int v5 = *(unsigned __int8 *)(a1 + 40);
  char v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 136315138;
    int v24 = "handleAbortActivateResponse";
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v23, 0xCu);
    int v4 = *(_DWORD *)(a2 + 4);
  }
  if (v4)
  {
    uint64_t v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = qmi::asString();
      int v23 = 136315650;
      int v24 = "handleAbortActivateResponse";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = v4;
      v26[2] = 2080;
      *(void *)&v26[3] = v8;
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#E %s: Activation abort failed 0x%x (%s)", (uint8_t *)&v23, 0x1Cu);
    }
    if (*(_DWORD *)(v2 + 180) != -1)
    {
      int v9 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        int v24 = "handleAbortActivateResponse";
        _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: trying normal deactivation...", (uint8_t *)&v23, 0xCu);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 96))(v2) == 6) {
        QMIDataContextIPBase::setDataContextIPState(v2, 3u);
      }
      (*(void (**)(uint64_t, BOOL))(*(void *)v2 + 336))(v2, v5 != 0);
    }
    return;
  }
  if (QMIDataContextIPBase::transitionalStateMaskIP((QMIDataContextIPBase *)v2)
    || (*(unsigned int (**)(uint64_t))(*(void *)v2 + 96))(v2) == 4)
  {
    QMIDataContextIPBase::setDataContextIPState(v2, 1u);
    unsigned int v10 = *(std::__shared_weak_count **)(v2 + 104);
    if (v10)
    {
      unsigned int v10 = std::__shared_weak_count::lock(v10);
      BOOL v11 = v10;
      if (v10) {
        unsigned int v10 = *(std::__shared_weak_count **)(v2 + 96);
      }
    }
    else
    {
      BOOL v11 = 0;
    }
    ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v10->__vftable[1].__get_deleter)(v10, *(unsigned int *)(v2 + 140), 1, 0, 0, 2, 0);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
LABEL_53:
    QMIDataContextIPBase::doneWithContext((QMIDataContextIPBase *)v2);
    return;
  }
  unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2);
  if (v12 > 6) {
    return;
  }
  if (((1 << v12) & 0x73) == 0)
  {
    if (v12 == 2)
    {
      char v15 = *(std::__shared_weak_count **)(v2 + 104);
      if (v15)
      {
        char v15 = std::__shared_weak_count::lock(v15);
        uint64_t v16 = v15;
        if (v15) {
          char v15 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v15->__vftable[1].__get_deleter)(v15, *(unsigned int *)(v2 + 140), 93, 0, 0, 2, 0);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      uint64_t v20 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        int v24 = "handleAbortActivateResponse";
        _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I %s: Activation aborted successfully", (uint8_t *)&v23, 0xCu);
      }
      __int16 v21 = *(std::__shared_weak_count **)(v2 + 104);
      if (v21)
      {
        __int16 v21 = std::__shared_weak_count::lock(v21);
        int v22 = v21;
        if (v21) {
          __int16 v21 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        int v22 = 0;
      }
      ((void (*)(std::__shared_weak_count *))v21->__vftable[2].__on_zero_shared)(v21);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
    }
    else
    {
      char v17 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        int v24 = "handleAbortActivateResponse";
        _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Activation aborted successfully", (uint8_t *)&v23, 0xCu);
      }
      QMIDataContextIPBase::setDataContextIPState(v2, 0);
      uint64_t v18 = *(std::__shared_weak_count **)(v2 + 104);
      if (v18)
      {
        uint64_t v18 = std::__shared_weak_count::lock(v18);
        int v19 = v18;
        if (v18) {
          uint64_t v18 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        int v19 = 0;
      }
      ((void (*)(std::__shared_weak_count *))v18->__vftable[3].~__shared_weak_count)(v18);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
    goto LABEL_53;
  }
  uint64_t v13 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
    uint64_t v14 = asString();
    int v23 = 136315394;
    int v24 = "handleAbortActivateResponse";
    __int16 v25 = 2080;
    *(void *)uint64_t v26 = v14;
    _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Activation aborted but in %s", (uint8_t *)&v23, 0x16u);
  }
}

void sub_2224A2210(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPBase::reportHandoverWwanPduSessionId(QMIDataContextIPBase *this, int a2)
{
  if (capabilities::ct::supports5G(this)
    && (*(unsigned int (**)(QMIDataContextIPBase *))(*(void *)this + 96))(this))
  {
    if (*((void *)this + 20))
    {
      memset(v14, 0, sizeof(v14));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 0x40000000;
      _DWORD v12[2] = ___ZN20QMIDataContextIPBase30reportHandoverWwanPduSessionIdEj_block_invoke;
      uint64_t v12[3] = &__block_descriptor_tmp_98_2;
      int v13 = a2;
      int v4 = qmi::MutableMessageBase::getTLV<wds::tlv::PduSessionId>((uint64_t)v14, 16);
      ___ZN20QMIDataContextIPBase30reportHandoverWwanPduSessionIdEj_block_invoke((uint64_t)v12, v4);
      void v7[5] = (char *)this + 144;
      uint64_t v8 = QMIServiceMsg::create();
      int v9 = 25000;
      uint64_t v10 = 0;
      BOOL v11 = 0;
      v7[0] = MEMORY[0x263EF8330];
      v7[1] = 0x40000000;
      _OWORD v7[2] = ___ZN20QMIDataContextIPBase30reportHandoverWwanPduSessionIdEj_block_invoke_2;
      void v7[3] = &__block_descriptor_tmp_99_4;
      void v7[4] = this;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds26SetHandoffWwanPduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      aBlock[3] = &unk_26460FC78;
      aBlock[4] = v7;
      int v5 = _Block_copy(aBlock);
      BOOL v11 = v5;
      if (v8)
      {
        qmi::Client::send();
        int v5 = v11;
      }
      if (v5) {
        _Block_release(v5);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
    }
    else
    {
      char v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        LOWORD(aBlock[0]) = 0;
        _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "invalid fWDSClient when SetHandoffWwanPduSessionId", (uint8_t *)aBlock, 2u);
      }
    }
  }
}

void sub_2224A2444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase30reportHandoverWwanPduSessionIdEj_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN20QMIDataContextIPBase30reportHandoverWwanPduSessionIdEj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    v8[0] = 67109378;
    v8[1] = v2;
    __int16 v9 = 2080;
    uint64_t v10 = qmi::asString();
    int v5 = "#I Error Response to SetHandoffWwanPduSessionId: %d(%s)";
    char v6 = v3;
    uint32_t v7 = 18;
  }
  else
  {
    if (!v4) {
      return;
    }
    LOWORD(v8[0]) = 0;
    int v5 = "#I Successful Response to SetHandoffWwanPduSessionId";
    char v6 = v3;
    uint32_t v7 = 2;
  }
  _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

uint64_t QMIDataContextIPBase::processDeactivation(QMIDataContextIPBase *this, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  BOOL v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    uint32_t v7 = "processDeactivation";
    __int16 v8 = 2080;
    uint64_t v9 = asStringBool();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: handoverToOther=%s", (uint8_t *)&v6, 0x16u);
  }
  if ((*(unsigned int (**)(QMIDataContextIPBase *))(*(void *)this + 96))(this) != 4) {
    QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 3u);
  }
  return (*(uint64_t (**)(QMIDataContextIPBase *, uint64_t))(*(void *)this + 336))(this, a2);
}

uint64_t QMIDataContextIPBase::isPendingChannelInitialization(QMIDataContextIPBase *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 637);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I fPendingChannelInitialization = %d", (uint8_t *)v5, 8u);
  }
  return *((unsigned __int8 *)this + 637);
}

uint64_t QMIDataContextIPBase::releaseDataContextClient(QMIDataContextIPBase *this)
{
  if (!*((void *)this + 20))
  {
    uint32_t v7 = *((void *)this + 5);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    *(_WORD *)long long buf = 0;
    __int16 v8 = "#I Null fWDSClient";
    uint64_t v9 = buf;
LABEL_7:
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    return 1;
  }
  if (*((_DWORD *)this + 34))
  {
    int v2 = *((void *)this + 5);
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    __int16 v24 = 0;
    int v5 = "#I contextIPBase not idle yet";
    uint64_t v6 = (uint8_t *)&v24;
    goto LABEL_12;
  }
  if (!*((unsigned char *)this + 112))
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 16);
    if (v11)
    {
      uint64_t v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *((void *)this + 15);
        if (v14)
        {
          uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 13);
          if (v15)
          {
            uint64_t v15 = std::__shared_weak_count::lock(v15);
            uint64_t v16 = v15;
            if (v15) {
              uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 12);
            }
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = ((uint64_t (*)(std::__shared_weak_count *))v15->__vftable[1].~__shared_weak_count)(v15);
          (*(void (**)(uint64_t, void, char *, uint64_t, void))(*(void *)v14 + 48))(v14, 0, (char *)this + 144, v17, *((unsigned int *)this + 35));
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v18)
    {
      int v19 = std::__shared_weak_count::lock(v18);
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *((void *)this + 12);
        if (v21)
        {
          (*(void (**)(uint64_t, void))(*(void *)v21 + 424))(v21, *((unsigned int *)this + 35));
          *((unsigned char *)this + 672) = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    qmi::Client::release((QMIDataContextIPBase *)((char *)this + 144));
    uint32_t v7 = *((void *)this + 5);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    __int16 v22 = 0;
    __int16 v8 = "#I fWDSClient deleted";
    uint64_t v9 = (uint8_t *)&v22;
    goto LABEL_7;
  }
  int v2 = *((void *)this + 5);
  BOOL v10 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (!v10) {
    return result;
  }
  *(_WORD *)int v23 = 0;
  int v5 = "#I Primary client, do not destroy fWDSClient";
  uint64_t v6 = v23;
LABEL_12:
  _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
  return 0;
}

void sub_2224A298C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPBase::deactivateDataContextIP(QMIDataContextIPBase *this, int a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "deactivateDataContextIP";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asStringBool();
    __int16 v43 = 2080;
    uint64_t v44 = asStringBool();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: allowDelay=%s, handoverToOther=%s", buf, 0x20u);
  }
  unsigned int v7 = *((_DWORD *)this + 34);
  if (v7 < 4)
  {
    __int16 v8 = *((void *)this + 5);
    uint64_t v9 = 0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "deactivateDataContextIP";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v10;
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: already at %s", buf, 0x16u);
      uint64_t v9 = 0;
    }
    goto LABEL_35;
  }
  if (v7 - 4 > 2)
  {
LABEL_34:
    uint64_t v9 = 1;
LABEL_35:
    if (*((unsigned char *)this + 637))
    {
      uint64_t v20 = *((void *)this + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I set fDeactivatedWhilePendingChannelInit", buf, 2u);
      }
      *((unsigned char *)this + 638) = 1;
    }
    return v9;
  }
  uint64_t v41 = 0;
  if (!a2) {
    goto LABEL_31;
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v11)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v11);
    uint64_t v12 = v11;
    if (v11) {
      uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 12);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  ((void (*)(unsigned char *__return_ptr))v11->__vftable[6].~__shared_weak_count)(buf);
  if (*(void *)buf)
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v13)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v13);
      uint64_t v14 = v13;
      if (v13) {
        uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 12);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    ((void (*)(uint64_t *__return_ptr))v13->__vftable[6].~__shared_weak_count)(&v39);
    int v15 = (*(uint64_t (**)(uint64_t, void, uint64_t *))(*(void *)v39 + 120))(v39, 0, &v41);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    int v15 = 0;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v15)
  {
LABEL_31:
    uint64_t v19 = *((void *)this + 33);
    *((void *)this + 33) = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    QMIDataContextIPBase::processDeactivation(this, a3);
    goto LABEL_34;
  }
  uint64_t v16 = *((void *)this + 33);
  uint64_t v17 = *((void *)this + 5);
  BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "deactivateDataContextIP";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v41;
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Deactivate delay timer set to %lld msecs", buf, 0x16u);
    }
    __int16 v22 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v22 || (v23 = *((void *)this + 1), (__int16 v24 = std::__shared_weak_count::lock(v22)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v25 = v24;
    atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    Registry::getTimerService((uint64_t *)buf, *((Registry **)this + 10));
    uint64_t v26 = *(void *)buf;
    std::string::basic_string[abi:ne180100]<0>(__p, "Deactivate Delay timer for PDP");
    uint64_t v27 = v41;
    __int16 v28 = *((void *)this + 3);
    dispatch_object_t object = v28;
    if (v28) {
      dispatch_retain(v28);
    }
    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 1174405120;
    void v32[2] = ___ZN20QMIDataContextIPBase23deactivateDataContextIPEbb_block_invoke;
    v32[3] = &__block_descriptor_tmp_101_5;
    v32[4] = this;
    v32[5] = v23;
    uint64_t v33 = v25;
    atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v34 = a3;
    uint64_t aBlock = _Block_copy(v32);
    ctu::TimerService::createOneShotTimer(v26, (uint64_t)__p, 0, 1000 * v27, &object, &aBlock);
    uint64_t v29 = v39;
    uint64_t v39 = 0;
    uint64_t v30 = *((void *)this + 33);
    *((void *)this + 33) = v29;
    if (v30)
    {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      uint64_t v31 = v39;
      uint64_t v39 = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v38 < 0) {
      operator delete(__p[0]);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (v33) {
      std::__shared_weak_count::__release_weak(v33);
    }
    std::__shared_weak_count::__release_weak(v25);
    goto LABEL_34;
  }
  if (v18)
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "deactivateDataContextIP";
    _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: DeactivateDelayTimer already scheduled", buf, 0xCu);
  }
  return 1;
}

void sub_2224A2F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::createOneShotTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, void **a6)
{
  uint64_t v10 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v6 = *a5;
  *a5 = 0;
  uint64_t aBlock = *a6;
  dispatch_object_t object = v6;
  *a6 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void, dispatch_object_t *, void **))(*(void *)a1 + 16))(a1, __p, a3, a4, 0, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2224A3090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase23deactivateDataContextIPEbb_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    BOOL v3 = *(QMIDataContextIPBase **)(a1 + 32);
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = *((void *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 136315138;
          uint64_t v9 = "deactivateDataContextIP_block_invoke";
          _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Deactivate delay timer fired", (uint8_t *)&v8, 0xCu);
        }
        uint64_t v7 = *((void *)v3 + 33);
        *((void *)v3 + 33) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        QMIDataContextIPBase::processDeactivation(v3, *(unsigned __int8 *)(a1 + 56));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2224A31D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20QMIDataContextIPBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20QMIDataContextIPBaseEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t QMIDataContextIPBase::transitionalStateMaskIP(QMIDataContextIPBase *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((void *)this + 36))
  {
    uint64_t v2 = *((void *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      uint64_t v12 = "transitionalStateMaskIP";
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: waiting for IPv6 config to complete", (uint8_t *)&v11, 0xCu);
    }
    int v3 = 1;
  }
  else
  {
    int v3 = 0;
  }
  if (*((void *)this + 37))
  {
    BOOL v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      uint64_t v12 = "transitionalStateMaskIP";
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: waiting for IPv4 config to complete", (uint8_t *)&v11, 0xCu);
    }
    v3 |= 8u;
  }
  int v5 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 13));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 12) + 320))(*((void *)this + 12));
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  uint64_t v7 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 13));
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 12) + 328))();
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  unsigned int v9 = v3 | 2;
  if (!v6) {
    unsigned int v9 = v3;
  }
  if (v8) {
    return v9 | 4;
  }
  else {
    return v9;
  }
}

void sub_2224A33E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataContextIPBase::handleActivateResponse(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  BOOL v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "handleActivateResponse";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  int v5 = *((_DWORD *)a2 + 1);
  if (v5)
  {
    if (v5 != 26)
    {
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2000000000;
      __int16 v60 = 0;
      v53[0] = MEMORY[0x263EF8330];
      v53[1] = 0x40000000;
      v53[2] = ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke;
      v53[3] = &unk_26460F518;
      v53[4] = buf;
      uint64_t v49 = v53;
      qmi::MessageBase::applyTlv<wds::tlv::CallEndReason,void({block_pointer})(wds::tlv::CallEndReason const&)>(a2, (uint64_t)&v49);
      uint64_t v49 = 0;
      uint64_t v50 = &v49;
      uint64_t v51 = 0x2000000000;
      __int16 v52 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = &v45;
      uint64_t v47 = 0x2000000000;
      __int16 v48 = 0;
      v44[0] = MEMORY[0x263EF8330];
      v44[1] = 0x40000000;
      void v44[2] = ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke_2;
      v44[3] = &unk_26460F540;
      v44[4] = &v45;
      void v44[5] = &v49;
      *(void *)long long v54 = v44;
      qmi::MessageBase::applyTlv<wds::tlv::VerboseCallEndReasonType,void({block_pointer})(wds::tlv::VerboseCallEndReasonType const&)>(a2, (uint64_t)v54);
      int v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
        int v13 = *((unsigned __int16 *)v50 + 12);
        int v14 = *((unsigned __int16 *)v46 + 12);
        *(_DWORD *)long long v54 = 136315906;
        *(void *)&v54[4] = "handleActivateResponse";
        __int16 v55 = 1024;
        *(_DWORD *)int v56 = v12;
        *(_WORD *)&void v56[4] = 1024;
        *(_DWORD *)&v56[6] = v13;
        __int16 v57 = 1024;
        int v58 = v14;
        _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Error activating reason = %d verboseReasonType = %d verboseReason = %d", v54, 0x1Eu);
      }
      int v15 = *((unsigned __int16 *)v50 + 12);
      if (v15 == 6 || v15 == 1)
      {
        uint64_t v16 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v54 = 136315138;
          *(void *)&v54[4] = "handleActivateResponse";
          _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: wds::kErrorTypeMobileIP or wds::kErrorType3GPP received handling those in indications", v54, 0xCu);
        }
      }
      else
      {
        uint64_t v21 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = qmi::asString();
          *(_DWORD *)long long v54 = 136315394;
          *(void *)&v54[4] = "handleActivateResponse";
          __int16 v55 = 2080;
          *(void *)int v56 = v22;
          _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s: response is an error result code is %s", v54, 0x16u);
        }
        QMIDataContextIPBase::setDataContextIPState(a1, 1u);
        uint64_t v23 = *(std::__shared_weak_count **)(a1 + 104);
        if (v23)
        {
          uint64_t v23 = std::__shared_weak_count::lock(v23);
          __int16 v24 = v23;
          if (v23) {
            uint64_t v23 = *(std::__shared_weak_count **)(a1 + 96);
          }
        }
        else
        {
          __int16 v24 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v23->__vftable[1].__get_deleter)(v23, *(unsigned int *)(a1 + 140), 62, 0, 0, 2, 0);
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        QMIDataContextIPBase::doneWithContext((QMIDataContextIPBase *)a1);
      }
      _Block_object_dispose(&v45, 8);
      _Block_object_dispose(&v49, 8);
      _Block_object_dispose(buf, 8);
      return;
    }
    int v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "handleActivateResponse";
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Activating the baseband network interface has no effect", buf, 0xCu);
    }
  }
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 0x40000000;
  uint64_t v41 = ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke_106;
  unint64_t v42 = &__block_descriptor_tmp_108_1;
  uint64_t v43 = a1;
  uint64_t TlvValue = (capabilities::ct *)qmi::MessageBase::findTlvValue(a2);
  unsigned int v9 = TlvValue;
  if (TlvValue)
  {
    int v10 = v8;
    *(void *)long long buf = TlvValue;
    LODWORD(v49) = tlv::parseV<wds::tlv::PktDataHandle>((unint64_t *)buf, v8);
    if (*(void *)buf) {
      uint64_t TlvValue = (capabilities::ct *)v41((uint64_t)v40, &v49);
    }
    else {
      uint64_t TlvValue = (capabilities::ct *)((uint64_t (*)(void, uint64_t, capabilities::ct *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v9, v10);
    }
  }
  if ((capabilities::ct::supportsDataQMIExtensions(TlvValue) & 1) == 0)
  {
    *(unsigned char *)(a1 + 256) = -1;
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 0x40000000;
    long long v37 = ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke_2_109;
    char v38 = &__block_descriptor_tmp_111;
    uint64_t v39 = a1;
    uint64_t v17 = qmi::MessageBase::findTlvValue(a2);
    uint64_t v19 = v17;
    if (v17)
    {
      int v20 = v18;
      *(void *)long long buf = v17;
      LOBYTE(v49) = tlv::parseV<wds::tlv::IDataCallAppId>((unint64_t *)buf, v18);
      if (*(void *)buf) {
        v37((uint64_t)v36, &v49);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 195, v19, v20);
      }
    }
  }
  unsigned int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (v25 <= 6)
  {
    if (((1 << v25) & 0x67) != 0)
    {
      uint64_t v26 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      uint64_t v27 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "handleActivateResponse";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v27;
      __int16 v28 = "#I %s: At wrong state %s";
      uint64_t v29 = v26;
      uint32_t v30 = 22;
      goto LABEL_31;
    }
    if (v25 == 3)
    {
      uint64_t v31 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = *(_DWORD *)(a1 + 180);
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleActivateResponse";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v32;
        _os_log_impl(&dword_22231A000, v31, OS_LOG_TYPE_DEFAULT, "#I %s: Activated fPacketDataHandle=%d. But we are disconnecting", buf, 0x12u);
      }
      QMIDataContextIPBase::setDataContextIPState(a1, 4u);
      QMIDataContextIPBase::deactivateDataContextIP((QMIDataContextIPBase *)a1, 1, 0);
    }
    else
    {
      uint64_t v33 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = *(_DWORD *)(a1 + 180);
        int v35 = *(unsigned __int8 *)(a1 + 256);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "handleActivateResponse";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v34;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v35;
        __int16 v28 = "#I %s: Activated fPacketDataHandle=%d, fAppId=%d";
        uint64_t v29 = v33;
        uint32_t v30 = 24;
LABEL_31:
        _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, v28, buf, v30);
      }
    }
  }
}

void sub_2224A3B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke_2(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[1];
  *(_WORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *a2;
  return result;
}

uint64_t QMIDataContextIPBase::doneWithContext(QMIDataContextIPBase *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    int v8 = 136315138;
    unsigned int v9 = "doneWithContext";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v8, 0xCu);
  }
  *((_WORD *)this + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  *((_DWORD *)this + 45) = -1;
  if ((capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)v3) & 1) == 0) {
    *((unsigned char *)this + 256) = -1;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v4)
  {
    BOOL v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      BOOL v4 = (std::__shared_weak_count *)*((void *)this + 12);
    }
  }
  else
  {
    int v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v4->__vftable[3].~__shared_weak_count_0)(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  QMIDataContextIPBase::clearIPv6ConfigTimer(this);
  return QMIDataContextIPBase::clearIPv4ConfigTimer(this);
}

void sub_2224A3D04(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke_106(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(result + 32) + 180) = *a2;
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase22handleActivateResponseERKN3wds21StartNetworkIfaceBase8ResponseE_block_invoke_2_109(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(result + 32) + 256) = *a2;
  return result;
}

void QMIDataContextIPBase::setQMIChannelState(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(int *)(a1 + 632);
  int v5 = *(NSObject **)(a1 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4 == a2)
  {
    if (v6)
    {
      if (a2 > 4) {
        uint64_t v7 = "Unknown QMIContextCommunicationChannelState";
      }
      else {
        uint64_t v7 = off_264610070[a2];
      }
      int v10 = 136315394;
      int v11 = "setQMIChannelState";
      __int16 v12 = 2080;
      int v13 = v7;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Keeping the same state: %s", (uint8_t *)&v10, 0x16u);
    }
  }
  else
  {
    if (v6)
    {
      if (v4 > 4) {
        int v8 = "Unknown QMIContextCommunicationChannelState";
      }
      else {
        int v8 = off_264610070[v4];
      }
      if (a2 > 4) {
        unsigned int v9 = "Unknown QMIContextCommunicationChannelState";
      }
      else {
        unsigned int v9 = off_264610070[a2];
      }
      int v10 = 136315650;
      int v11 = "setQMIChannelState";
      __int16 v12 = 2080;
      int v13 = v8;
      __int16 v14 = 2080;
      int v15 = v9;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Changing state from %s to %s", (uint8_t *)&v10, 0x20u);
    }
    *(_DWORD *)(a1 + 6std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = a2;
  }
}

void ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke(uint64_t a1, _WORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 104);
  if (v4)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      uint64_t v4 = *(std::__shared_weak_count **)(v3 + 96);
    }
  }
  else
  {
    int v5 = 0;
  }
  *a2 = ((uint64_t (*)(std::__shared_weak_count *))v4->__vftable[1].~__shared_weak_count)(v4);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_2224A3F5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(result + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(a2 + 4);
    int v5 = *(NSObject **)(v2 + 40);
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v7[0] = 67109378;
        v7[1] = v4;
        __int16 v8 = 2080;
        uint64_t v9 = qmi::asString();
        _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "Error in response to BindDataPort with code = 0x%x (%s)", (uint8_t *)v7, 0x12u);
      }
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Response to BindDataPort received", (uint8_t *)v7, 2u);
    }
    uint64_t v6 = *(void *)(v3 + 64);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  return result;
}

void ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke_115(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(std::__shared_weak_count **)(v3 + 104);
  if (v4)
  {
    int v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      int v4 = *(std::__shared_weak_count **)(v3 + 96);
    }
  }
  else
  {
    int v5 = 0;
  }
  *a2 = ((uint64_t (*)(std::__shared_weak_count *))v4->__vftable[1].~__shared_weak_count)(v4) + 1;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_2224A4148(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN20QMIDataContextIPBase12bindDataPortEv_block_invoke_2_118(uint64_t result, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(result + 32);
  if (*(unsigned char *)(v2 + 257)) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *(NSObject **)(v2 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v11 = 136315650;
      __int16 v12 = "bindDataPort_block_invoke_2";
      __int16 v13 = 1024;
      int v14 = v4;
      __int16 v15 = 2080;
      uint64_t v16 = qmi::asString();
      uint64_t v7 = "#I %s: Error in response to BindMuxDataPort with code = 0x%x (%s)";
      __int16 v8 = v5;
      uint32_t v9 = 28;
LABEL_7:
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
    }
  }
  else if (v6)
  {
    int v11 = 136315138;
    __int16 v12 = "bindDataPort_block_invoke";
    uint64_t v7 = "#I %s: Response to BindMuxDataPort received";
    __int16 v8 = v5;
    uint32_t v9 = 12;
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v3 + 64);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
}

uint64_t ___ZN20QMIDataContextIPBase21bindSubscription_syncENSt3__18functionIFvvEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    int v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      int v9 = 136315394;
      uint64_t v10 = v7;
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Binding subscription: %s (0x%x)", (uint8_t *)&v9, 0x12u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void ___ZN20QMIDataContextIPBase14setupQMIClientEv_block_invoke_135(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    int v3 = *(_DWORD *)(a2 + 4);
    int v4 = *(NSObject **)(v2 + 40);
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (!v5) {
        goto LABEL_8;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "setupQMIClient_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v3;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = qmi::asString();
      BOOL v6 = "#I %s: Error in response to SetClientIpFamilyPref with code = 0x%x (%s)";
      uint64_t v7 = v4;
      uint32_t v8 = 28;
    }
    else
    {
      if (!v5) {
        goto LABEL_8;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "setupQMIClient_block_invoke";
      BOOL v6 = "#I %s: Response to SetClientIpFamilyPref received";
      uint64_t v7 = v4;
      uint32_t v8 = 12;
    }
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v6, buf, v8);
LABEL_8:
    *(_OWORD *)std::string __p = 0u;
    long long v44 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    int v9 = (const void **)__p[1];
    if (__p[1] != (void *)v44)
    {
      while (*((unsigned char *)*v9 + 8) != 18)
      {
        if (++v9 == (const void **)v44) {
          goto LABEL_15;
        }
      }
    }
    if (v9 == (const void **)v44) {
LABEL_15:
    }
      operator new();
    if (v10)
    {
      *((unsigned char *)v10 + 9) = 1;
      if (!capabilities::ct::supportsThroughputEngineering(v10))
      {
LABEL_40:
        QMIDataContextIPBase::setQMIChannelState(v2, 2u);
        uint64_t v38 = v2 + 144;
        uint64_t v39 = (std::__shared_weak_count *)QMIServiceMsg::create();
        int v40 = 25000;
        uint64_t v41 = 0;
        uint64_t aBlock = 0;
        v37[0] = MEMORY[0x263EF8330];
        v37[1] = 0x40000000;
        v37[2] = ___ZN20QMIDataContextIPBase22registerQMIIndicationsEv_block_invoke_5;
        v37[3] = &__block_descriptor_tmp_154_1;
        void v37[4] = v2;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
        *(void *)&unsigned char buf[24] = &unk_26460FD40;
        __int16 v48 = v37;
        uint64_t v19 = _Block_copy(buf);
        uint64_t aBlock = v19;
        if (v39)
        {
          qmi::Client::send();
          uint64_t v19 = aBlock;
        }
        if (v19) {
          _Block_release(v19);
        }
        (*(void (**)(uint64_t))(*(void *)v2 + 352))(v2);
        QMIDataContextIPBase::setQMIChannelState(v2, 4u);
        if (!*(unsigned char *)(v2 + 637)) {
          goto LABEL_90;
        }
        int v20 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "registerQMIIndications";
          _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I %s: PendingChannelInitialization: found one", buf, 0xCu);
        }
        memset(buf, 0, sizeof(buf));
        std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, v2 + 640);
        *(unsigned char *)(v2 + 637) = 0;
        std::function<BOOL ()(void)>::operator=((void *)(v2 + 640), v2 + 48);
        uint64_t v21 = *(std::__shared_weak_count **)(v2 + 104);
        if (v21)
        {
          uint64_t v21 = std::__shared_weak_count::lock(v21);
          uint64_t v22 = v21;
          if (v21) {
            uint64_t v21 = *(std::__shared_weak_count **)(v2 + 96);
          }
        }
        else
        {
          uint64_t v22 = 0;
        }
        char v23 = ((uint64_t (*)(std::__shared_weak_count *))v21->__vftable[4].__get_deleter)(v21);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        __int16 v24 = *(std::__shared_weak_count **)(v2 + 104);
        if (v24)
        {
          __int16 v24 = std::__shared_weak_count::lock(v24);
          unsigned int v25 = v24;
          if (v24) {
            __int16 v24 = *(std::__shared_weak_count **)(v2 + 96);
          }
        }
        else
        {
          unsigned int v25 = 0;
        }
        ((void (*)(uint64_t *__return_ptr))v24->__vftable[6].~__shared_weak_count)(&v38);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (v38)
        {
          if (*(unsigned char *)(v2 + 638))
          {
            *(unsigned char *)(v2 + 638) = 0;
            uint64_t v26 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v45 = 136315138;
              uint64_t v46 = "registerQMIIndications";
              _os_log_impl(&dword_22231A000, v26, OS_LOG_TYPE_DEFAULT, "#I %s: PendingChannelInitialization: Context has been deactivated during init.", v45, 0xCu);
            }
            if (v23) {
              goto LABEL_87;
            }
            uint64_t v27 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v45 = 136315138;
              uint64_t v46 = "registerQMIIndications";
              _os_log_impl(&dword_22231A000, v27, OS_LOG_TYPE_DEFAULT, "#I %s: PendingChannelInitialization: report error with retry", v45, 0xCu);
            }
            QMIDataContextIPBase::setDataContextIPState(v2, 1u);
            __int16 v28 = *(std::__shared_weak_count **)(v2 + 104);
            if (v28)
            {
              __int16 v28 = std::__shared_weak_count::lock(v28);
              uint64_t v29 = v28;
              if (v28) {
                __int16 v28 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v29 = 0;
            }
            ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, uint64_t))v28->__vftable[1].__get_deleter)(v28, *(unsigned int *)(v2 + 140), 1, 0, 0, 2, 1);
            goto LABEL_85;
          }
          if (!*(void *)&buf[24]) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          char v33 = (*(uint64_t (**)(void))(**(void **)&buf[24] + 48))(*(void *)&buf[24]);
          int v34 = *(NSObject **)(v2 + 40);
          BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
          if ((v33 & 1) == 0)
          {
            if (v35)
            {
              *(_DWORD *)uint64_t v45 = 136315138;
              uint64_t v46 = "registerQMIIndications";
              _os_log_impl(&dword_22231A000, v34, OS_LOG_TYPE_DEFAULT, "#I %s: PendingChannelInitialization: failed", v45, 0xCu);
            }
            QMIDataContextIPBase::setDataContextIPState(v2, 1u);
            long long v36 = *(std::__shared_weak_count **)(v2 + 104);
            if (v36)
            {
              long long v36 = std::__shared_weak_count::lock(v36);
              uint64_t v29 = v36;
              if (v36) {
                long long v36 = *(std::__shared_weak_count **)(v2 + 96);
              }
            }
            else
            {
              uint64_t v29 = 0;
            }
            ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v36->__vftable[1].__get_deleter)(v36, *(unsigned int *)(v2 + 140), 18, 0, 0, 2, 0);
LABEL_85:
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
            goto LABEL_87;
          }
          if (v35)
          {
            *(_DWORD *)uint64_t v45 = 136315138;
            uint64_t v46 = "registerQMIIndications";
            uint64_t v31 = "#I %s: PendingChannelInitialization: success";
            int v32 = v34;
            goto LABEL_75;
          }
        }
        else
        {
          *(unsigned char *)(v2 + 638) = 0;
          uint64_t v30 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v45 = 136315138;
            uint64_t v46 = "registerQMIIndications";
            uint64_t v31 = "#I %s: PendingChannelInitialization: not continuing abandoned pending activation (1)";
            int v32 = v30;
LABEL_75:
            _os_log_impl(&dword_22231A000, v32, OS_LOG_TYPE_DEFAULT, v31, v45, 0xCu);
          }
        }
LABEL_87:
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](buf);
LABEL_90:
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        return;
      }
      int v12 = (const void **)__p[1];
      uint64_t v13 = (const void **)v44;
      int v14 = (const void **)__p[1];
      if (__p[1] != (void *)v44)
      {
        int v14 = (const void **)__p[1];
        while (*((unsigned char *)*v14 + 8) != 61)
        {
          if (++v14 == (const void **)v44) {
            goto LABEL_25;
          }
        }
      }
      if (v14 == (const void **)v44) {
LABEL_25:
      }
        operator new();
      if (v15)
      {
        _OWORD v15[9] = 1;
        while (1)
        {
          if (v12 == v13) {
            goto LABEL_32;
          }
          if (*((unsigned char *)*v12 + 8) == 62) {
            break;
          }
          ++v12;
        }
        if (v12 == v13) {
LABEL_32:
        }
          operator new();
        if (v16)
        {
          v16[9] = 1;
          for (uint64_t i = (const void **)__p[1]; ; ++i)
          {
            if (i == v13) {
              goto LABEL_39;
            }
            if (*((unsigned char *)*i + 8) == 44) {
              break;
            }
          }
          if (i == v13) {
LABEL_39:
          }
            operator new();
          if (v18)
          {
            v18[9] = 1;
            goto LABEL_40;
          }
        }
      }
    }
    __cxa_bad_cast();
  }
}

void sub_2224A4FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v12 - 96));
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase22registerQMIIndicationsEv_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    int v3 = *(_DWORD *)(a2 + 4);
    int v4 = *(NSObject **)(v2 + 40);
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (!v5) {
        return;
      }
      int v9 = 136315650;
      uint64_t v10 = "registerQMIIndications_block_invoke_5";
      __int16 v11 = 1024;
      int v12 = v3;
      __int16 v13 = 2080;
      uint64_t v14 = qmi::asString();
      BOOL v6 = "#I %s: Error registering for WDS indications: %d(%s)";
      uint64_t v7 = v4;
      uint32_t v8 = 28;
    }
    else
    {
      if (!v5) {
        return;
      }
      int v9 = 136315138;
      uint64_t v10 = "registerQMIIndications_block_invoke";
      BOOL v6 = "#I %s: Response to IndicationRegister received";
      uint64_t v7 = v4;
      uint32_t v8 = 12;
    }
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
  }
}

void QMIDataContextIPBase::handleQmiClientStarted(QMIDataContextIPBase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    int v3 = v2;
    if (v2) {
      uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
    }
  }
  else
  {
    int v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void, void, uint64_t))v2->__vftable[6].__on_zero_shared)(v2, *((unsigned int *)this + 35), 0, 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4)
  {
    BOOL v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      BOOL v6 = v5;
      uint64_t v7 = *((void *)this + 15);
      if (v7)
      {
        if (*((unsigned char *)this + 112)) {
          BOOL v8 = *((_DWORD *)this + 35) == 1;
        }
        else {
          BOOL v8 = 0;
        }
        int v9 = (std::__shared_weak_count *)*((void *)this + 13);
        if (v9)
        {
          int v9 = std::__shared_weak_count::lock(v9);
          uint64_t v10 = v9;
          if (v9) {
            int v9 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          uint64_t v10 = 0;
        }
        uint64_t v11 = ((uint64_t (*)(std::__shared_weak_count *))v9->__vftable[1].~__shared_weak_count)(v9);
        (*(void (**)(uint64_t, BOOL, char *, uint64_t, void))(*(void *)v7 + 40))(v7, v8, (char *)this + 144, v11, *((unsigned int *)this + 35));
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2224A531C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataContextIPBase::handleBasebandOff_sync(QMIDataContextIPBase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *((void *)this + 15);
      if (v5)
      {
        if (*((unsigned char *)this + 112)) {
          BOOL v6 = *((_DWORD *)this + 35) == 1;
        }
        else {
          BOOL v6 = 0;
        }
        uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 13);
        if (v7)
        {
          uint64_t v7 = std::__shared_weak_count::lock(v7);
          BOOL v8 = v7;
          if (v7) {
            uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          BOOL v8 = 0;
        }
        uint64_t v9 = ((uint64_t (*)(std::__shared_weak_count *))v7->__vftable[1].~__shared_weak_count)(v7);
        (*(void (**)(uint64_t, BOOL, char *, uint64_t, void))(*(void *)v5 + 48))(v5, v6, (char *)this + 144, v9, *((unsigned int *)this + 35));
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_2224A5460(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a2[1];
  return result;
}

void *___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_157(void *result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(result[4] + 8) + 24) = *a2;
  int v2 = *(_DWORD *)(*(void *)(result[4] + 8) + 24);
  if (v2) {
    BOOL v3 = v2 != *(_DWORD *)(*(void *)(result[6] + 8) + 24);
  }
  else {
    BOOL v3 = 1;
  }
  *(unsigned char *)(*(void *)(result[5] + 8) + 24) = v3;
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_159(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_2(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[1];
  *(_WORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_163(uint64_t a1, const unsigned __int8 *a2)
{
  int v2 = (CSIPacketAddress *)(*(void *)(a1 + 32) + 184);
  CSIPacketAddress::setIPv6Address(v2, a2);

  return CSIPacketAddress::setPrefixLen(v2);
}

void ___ZN20QMIDataContextIPBase27handleWdsPacketSvcStatusIndERKN3wds13PktSrvcStatus10IndicationE_block_invoke_2_170(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 257)) {
    return;
  }
  int v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "handleSettingsResponse";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  int v5 = *((_DWORD *)a2 + 1);
  if (!v5)
  {
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZN20QMIDataContextIPBase17handlePcoResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke;
    *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_187_0;
    uint64_t v98 = v2;
    *(void *)&long long v93 = buf;
    qmi::MessageBase::tryTlv<wds::tlv::OperatorReservedProtocolInformation,void({block_pointer})(wds::tlv::OperatorReservedProtocolInformation const&)>(a2, (uint64_t)&v93);
    uint64_t v69 = 0;
    uint64_t v70 = &v69;
    uint64_t v71 = 0x2000000000;
    int v72 = 0;
    v65[0] = MEMORY[0x263EF8330];
    v65[1] = 0x40000000;
    uint64_t v66 = (uint64_t (*)(uint64_t, long long *))___ZN20QMIDataContextIPBase22handleSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke;
    int v67 = &unk_26460F728;
    uint64_t v68 = &v69;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    if (TlvValue)
    {
      *(void *)long long buf = TlvValue;
      LODWORD(v93) = tlv::parseV<wds::tlv::MTU>((unint64_t *)buf, v11);
      if (*(void *)buf) {
        v66((uint64_t)v65, &v93);
      }
    }
    int v12 = *(std::__shared_weak_count **)(v2 + 104);
    if (v12)
    {
      int v12 = std::__shared_weak_count::lock(v12);
      __int16 v13 = v12;
      if (v12) {
        int v12 = *(std::__shared_weak_count **)(v2 + 96);
      }
    }
    else
    {
      __int16 v13 = 0;
    }
    ((void (*)(std::__shared_weak_count *, void, void))v12->__vftable[4].~__shared_weak_count)(v12, *(unsigned int *)(v2 + 140), *((unsigned int *)v70 + 6));
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2);
    if (v14 > 6) {
      goto LABEL_116;
    }
    if (v14 != 4)
    {
      uint64_t v15 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
        uint64_t v16 = asString();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleSettingsResponse";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v16;
        _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s: ERR: at wrong state %s", buf, 0x16u);
      }
LABEL_116:
      _Block_object_dispose(&v69, 8);
      return;
    }
    uint64_t v17 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "parseSettingsResponse";
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
    }
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v18 = *(std::__shared_weak_count **)(v2 + 104);
    if (v18)
    {
      int v18 = std::__shared_weak_count::lock(v18);
      uint64_t v19 = v18;
      if (v18) {
        int v18 = *(std::__shared_weak_count **)(v2 + 96);
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    ((void (*)(uint64_t *__return_ptr))v18->__vftable[6].~__shared_weak_count)(&v81);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v81)
    {
      memset(v80, 0, sizeof(v80));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v80, (const CSIPacketAddress *)(v2 + 184));
      int v21 = *(_DWORD *)(v2 + 140);
      if (v21 == 1)
      {
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke;
        *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_188;
        uint64_t v98 = v2;
        uint64_t v26 = qmi::MessageBase::findTlvValue(a2);
        uint64_t v28 = v26;
        if (v26)
        {
          int v29 = v27;
          *(void *)&long long v93 = v26;
          LODWORD(v75) = tlv::parseV<wds::tlv::IPv4>((unint64_t *)&v93, v27);
          if ((void)v93) {
            (*(void (**)(unsigned char *, long long **))&buf[16])(buf, &v75);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 30, v28, v29);
          }
        }
        *(void *)&long long v93 = MEMORY[0x263EF8330];
        *((void *)&v93 + 1) = 0x40000000;
        uint64_t v94 = (void (*)(long long *, uint64_t *))___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_2;
        int v95 = &__block_descriptor_tmp_189_0;
        uint64_t v96 = v2;
        uint64_t v30 = (_OWORD *)qmi::MessageBase::findTlvValue(a2);
        int v32 = v30;
        if (v30)
        {
          int v33 = v31;
          BOOL v75 = v30;
          LODWORD(vstd::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = tlv::parseV<wds::tlv::PrimaryDNSIPv4>((unint64_t *)&v75, v31);
          if (v75) {
            v94(&v93, &v88);
          }
          else {
            ((void (*)(void, uint64_t, _OWORD *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 21, v32, v33);
          }
        }
        BOOL v75 = (long long *)MEMORY[0x263EF8330];
        uint64_t v76 = 0x40000000;
        char v77 = (void (*)(long long **, uint64_t *))___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_3;
        uint64_t v78 = &__block_descriptor_tmp_190;
        uint64_t v79 = v2;
        uint64_t v34 = qmi::MessageBase::findTlvValue(a2);
        uint64_t v36 = v34;
        if (v34)
        {
          int v37 = v35;
          uint64_t v88 = v34;
          LODWORD(v83) = tlv::parseV<wds::tlv::SecondaryDNSIPv4>((unint64_t *)&v88, v35);
          if (v88) {
            v77(&v75, &v83);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 22, v36, v37);
          }
        }
      }
      else if (v21 == 2)
      {
        if (capabilities::ct::supportsDataQMIExtensions(v20))
        {
          *(void *)long long buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_4;
          *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_191_0;
          uint64_t v98 = v2;
          uint64_t v22 = (_OWORD *)qmi::MessageBase::findTlvValue(a2);
          __int16 v24 = v22;
          if (v22)
          {
            int v25 = v23;
            BOOL v75 = v22;
            long long v93 = 0uLL;
            LOBYTE(v94) = 0;
            tlv::parseV<wds::tlv::IPv6>((unint64_t *)&v75, v23, (uint64_t)&v93);
            if (v75) {
              (*(void (**)(unsigned char *, long long *))&buf[16])(buf, &v93);
            }
            else {
              ((void (*)(void, uint64_t, _OWORD *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 37, v24, v25);
            }
          }
        }
        *(void *)&long long v93 = MEMORY[0x263EF8330];
        *((void *)&v93 + 1) = 0x40000000;
        uint64_t v94 = (void (*)(long long *, uint64_t *))___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_5;
        int v95 = &__block_descriptor_tmp_192_0;
        uint64_t v96 = v2;
        BOOL v75 = &v93;
        qmi::MessageBase::applyTlv<wds::tlv::CarrierIPv6,void({block_pointer})(wds::tlv::CarrierIPv6 const&)>(a2, (uint64_t)&v75);
        BOOL v75 = (long long *)MEMORY[0x263EF8330];
        uint64_t v76 = 0x40000000;
        char v77 = (void (*)(long long **, uint64_t *))___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_6;
        uint64_t v78 = &__block_descriptor_tmp_193;
        uint64_t v79 = v2;
        uint64_t v38 = qmi::MessageBase::findTlvValue(a2);
        uint64_t v40 = v38;
        if (v38)
        {
          int v41 = v39;
          uint64_t v83 = v38;
          uint64_t v88 = tlv::parseV<wds::tlv::PrimaryDNSIPv6>((unint64_t *)&v83, v39);
          uint64_t v89 = v42;
          if (v83) {
            v77(&v75, &v88);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 39, v40, v41);
          }
        }
        uint64_t v88 = MEMORY[0x263EF8330];
        uint64_t v89 = 0x40000000;
        int v90 = ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_7;
        int v91 = &__block_descriptor_tmp_194_1;
        uint64_t v92 = v2;
        uint64_t v43 = qmi::MessageBase::findTlvValue(a2);
        uint64_t v45 = v43;
        if (v43)
        {
          int v46 = v44;
          v74[0] = v43;
          uint64_t v83 = tlv::parseV<wds::tlv::SecondaryDNSIPv6>(v74, v44);
          uint64_t v84 = v47;
          if (v74[0]) {
            v90((uint64_t)&v88, (const unsigned __int8 *)&v83);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 40, v45, v46);
          }
        }
      }
      else
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "wrong ip family";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/"
                                "Data/QMI/Context/QMIDataContextIPBase.cpp";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2081;
          _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT false\n %s\n at %s:%d\n**********", buf, 0x1Cu);
        }
        __TUAssertTrigger();
      }
      memset(v74, 0, sizeof(v74));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v74, (const CSIPacketAddress *)(v2 + 184));
      if (*(_DWORD *)(v2 + 140) == 1 && (CSIPacketAddress::operator==() & 1) == 0)
      {
        __int16 v48 = *(std::__shared_weak_count **)(v2 + 104);
        if (v48)
        {
          __int16 v48 = std::__shared_weak_count::lock(v48);
          uint64_t v49 = v48;
          if (v48) {
            __int16 v48 = *(std::__shared_weak_count **)(v2 + 96);
          }
        }
        else
        {
          uint64_t v49 = 0;
        }
        ((void (*)(std::__shared_weak_count *))v48->__vftable[5].__on_zero_shared_weak)(v48);
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
      }
      uint64_t v50 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, void))(*(void *)v81 + 56))(v81, 0);
      if (v50)
      {
        QMIDataContextIPBase::parseImsSettingsFromResponse((void *)v2, a2);
      }
      else if (capabilities::ct::supports5G(v50) {
             && (*(unsigned int (**)(uint64_t))(*(void *)v81 + 192))(v81))
      }
      {
        uint64_t v83 = MEMORY[0x263EF8330];
        uint64_t v84 = 0x40000000;
        long long v85 = ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_196;
        int v86 = &__block_descriptor_tmp_197_0;
        uint64_t v87 = v2;
        CFBooleanRef v73 = &v83;
        qmi::MessageBase::applyTlv<wds::tlv::SnssaiPdnInfo,void({block_pointer})(wds::tlv::SnssaiPdnInfo const&)>(a2, (uint64_t)&v73);
      }
    }
    uint64_t v51 = (capabilities::ipc *)v82;
    if (v82) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    }
    if (!capabilities::ipc::supportsCoalescing(v51))
    {
LABEL_94:
      QMIDataContextIPBase::setDataContextIPState(v2, 6u);
      __int16 v57 = *(std::__shared_weak_count **)(v2 + 104);
      if (v57)
      {
        __int16 v57 = std::__shared_weak_count::lock(v57);
        int v58 = v57;
        if (v57) {
          __int16 v57 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v59 = ((uint64_t (*)(std::__shared_weak_count *))v57->__vftable[5].__get_deleter)(v57);
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (v59)
      {
        __int16 v60 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "handleSettingsResponse";
          _os_log_impl(&dword_22231A000, v60, OS_LOG_TYPE_DEFAULT, "#I %s: is Entering Low Power Mode for 'No WoW' case.", buf, 0xCu);
        }
      }
      uint64_t v61 = *(std::__shared_weak_count **)(v2 + 104);
      if (v61)
      {
        uint64_t v61 = std::__shared_weak_count::lock(v61);
        unsigned __int8 v62 = v61;
        if (v61) {
          uint64_t v61 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        unsigned __int8 v62 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t, void))v61->__vftable[5].~__shared_weak_count)(v61, *(unsigned int *)(v2 + 140), v2 + 232, *(unsigned __int8 *)(v2 + 272));
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      *(void *)long long buf = &unk_26D4CE530;
      *(void *)&uint8_t buf[8] = v2;
      *(void *)&uint8_t buf[16] = v59;
      *(void *)&unsigned char buf[24] = buf;
      int v63 = *(std::__shared_weak_count **)(v2 + 104);
      if (v63)
      {
        int v63 = std::__shared_weak_count::lock(v63);
        long long v64 = v63;
        if (v63) {
          int v63 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        long long v64 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, unsigned char *))v63->__vftable[4].~__shared_weak_count_0)(v63, *(unsigned int *)(v2 + 140), buf);
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
      goto LABEL_116;
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    __int16 v52 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 104));
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(v2 + 96) + 240))(buf);
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    if (*(void *)buf)
    {
      unsigned __int16 v53 = (*(uint64_t (**)(void))(**(void **)buf + 256))(*(void *)buf);
      long long v54 = *(NSObject **)(v2 + 40);
      BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
      if ((v53 & 0x101) != 0)
      {
        if (v55)
        {
          LODWORD(v93) = 136315138;
          *(void *)((char *)&v93 + 4) = "setCoalescing";
          _os_log_impl(&dword_22231A000, v54, OS_LOG_TYPE_DEFAULT, "#I %s: coalescing to be set", (uint8_t *)&v93, 0xCu);
        }
        (*(void (**)(uint64_t, void))(*(void *)v2 + 304))(v2, v53);
        goto LABEL_92;
      }
      if (!v55)
      {
LABEL_92:
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        goto LABEL_94;
      }
      LODWORD(v93) = 136315138;
      *(void *)((char *)&v93 + 4) = "setCoalescing";
      int v56 = "#I %s: no coalescing";
    }
    else
    {
      long long v54 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_92;
      }
      LODWORD(v93) = 136315138;
      *(void *)((char *)&v93 + 4) = "setCoalescing";
      int v56 = "#E %s: no settings !";
    }
    _os_log_impl(&dword_22231A000, v54, OS_LOG_TYPE_DEFAULT, v56, (uint8_t *)&v93, 0xCu);
    goto LABEL_92;
  }
  BOOL v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = qmi::asString();
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "handleSettingsResponse";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v5;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v7;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Error getting runtime setting for %d(%s), trying to deactivating now", buf, 0x1Cu);
  }
  QMIDataContextIPBase::deactivateDataContextIP((QMIDataContextIPBase *)v2, 1, 0);
  QMIDataContextIPBase::setDataContextIPState(v2, 1u);
  BOOL v8 = *(std::__shared_weak_count **)(v2 + 104);
  if (v8)
  {
    BOOL v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    if (v8) {
      BOOL v8 = *(std::__shared_weak_count **)(v2 + 96);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v8->__vftable[1].__get_deleter)(v8, *(unsigned int *)(v2 + 140), 18, 0, 0, 2, 0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  QMIDataContextIPBase::doneWithContext((QMIDataContextIPBase *)v2);
}

void sub_2224A6394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase23handleWdsDadCompleteIndERKN3wds11DadComplete10IndicationE_block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  memset(v26, 0, sizeof(v26));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v26);
  CSIPacketAddress::setIPv6Address((CSIPacketAddress *)v26, a2);
  CSIPacketAddress::setPrefixLen((CSIPacketAddress *)v26);
  int v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    int PrefixLen = CSIPacketAddress::getPrefixLen((CSIPacketAddress *)v26);
    p_p = &__p;
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "handleWdsDadCompleteInd_block_invoke";
    if (v25 < 0) {
      p_p = __p;
    }
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = p_p;
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v28) = PrefixLen;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6Service: ** ipv6Addr: %s, prefixLen: %d", buf, 0x1Cu);
    if (v25 < 0) {
      operator delete(__p);
    }
  }
  if (CSIPacketAddress::isLinkLocal((CSIPacketAddress *)v26))
  {
    uint64_t v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "handleWdsDadCompleteInd_block_invoke";
      BOOL v8 = "#I %s: IPv6Service: ignoring Link Local DAD";
      uint64_t v9 = v7;
      uint32_t v10 = 12;
LABEL_18:
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(v3 + 288);
    if (v11 && *(unsigned char *)(v3 + 306))
    {
      unint64_t v13 = *(void *)(v3 + 320);
      unint64_t v12 = *(void *)(v3 + 328);
      if (v13 >= v12)
      {
        uint64_t v18 = *(void *)(v3 + 312);
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v18) >> 3);
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v18) >> 3);
        uint64_t v21 = 2 * v20;
        if (2 * v20 <= v19 + 1) {
          uint64_t v21 = v19 + 1;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v29 = v3 + 328;
        if (v22) {
          int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v3 + 328, v22);
        }
        else {
          int v23 = 0;
        }
        *(void *)long long buf = v23;
        *(void *)&uint8_t buf[8] = &v23[24 * v19];
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        uint64_t v28 = &v23[24 * v22];
        CSIPacketAddress::CSIPacketAddress(*(CSIPacketAddress **)&buf[8], (const CSIPacketAddress *)v26);
        *(void *)&buf[16] += 24;
        std::vector<CSIPacketAddress>::__swap_out_circular_buffer((const CSIPacketAddress **)(v3 + 312), buf);
        if (*(void *)&buf[16] != *(void *)&buf[8]) {
          *(void *)&uint8_t buf[16] = (*(void *)&buf[16] - *(void *)&buf[8] - 24) % 0x18uLL + *(void *)&buf[8];
        }
        unint64_t v14 = *(void *)(v3 + 320);
        if (*(void *)buf) {
          operator delete(*(void **)buf);
        }
      }
      else
      {
        CSIPacketAddress::CSIPacketAddress(*(CSIPacketAddress **)(v3 + 320), (const CSIPacketAddress *)v26);
        unint64_t v14 = v13 + 24;
        *(void *)(v3 + 320) = v13 + 24;
      }
      *(void *)(v3 + 320) = v14;
      QMIDataContextIPBase::checkIPv6ConfigTimer((QMIDataContextIPBase *)v3);
    }
    else
    {
      uint64_t v15 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (v11) {
          uint64_t v16 = "present";
        }
        else {
          uint64_t v16 = "not present";
        }
        uint64_t v17 = asStringBool();
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "handleWdsDadCompleteInd_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v16;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v28 = (char *)v17;
        BOOL v8 = "#I %s: IPv6Service: ignoring timer %s, fIPv6DadRequired %s";
        uint64_t v9 = v15;
        uint32_t v10 = 32;
        goto LABEL_18;
      }
    }
  }
}

void sub_2224A67B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  *(void *)(v20 + 320) = v21;
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPBase::checkIPv6ConfigTimer(QMIDataContextIPBase *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "checkIPv6ConfigTimer";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6Service", buf, 0xCu);
  }
  if (CSIPacketAddress::isZeroIP((QMIDataContextIPBase *)((char *)this + 336)))
  {
    uint64_t v3 = *((void *)this + 5);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "checkIPv6ConfigTimer";
    int v4 = "#I %s: IPv6Service: fIPv6ConfigAddress is empty";
    goto LABEL_6;
  }
  if (!*((unsigned char *)this + 306))
  {
    unint64_t v13 = *((void *)this + 5);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
LABEL_36:
      uint64_t v18 = *((void *)this + 5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "checkIPv6ConfigTimer";
        _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6Service: completed", buf, 0xCu);
      }
      BOOL v19 = *((unsigned char *)this + 304) == 0;
      QMIDataContextIPBase::clearIPv6ConfigTimer(this);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 13);
      if (v19)
      {
        if (v20)
        {
          uint64_t v20 = std::__shared_weak_count::lock(v20);
          uint64_t v21 = v20;
          if (v20) {
            uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          uint64_t v21 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void, void))v20->__vftable[1].__on_zero_shared)(v20, *((unsigned int *)this + 35), 0);
      }
      else
      {
        if (v20)
        {
          uint64_t v20 = std::__shared_weak_count::lock(v20);
          uint64_t v21 = v20;
          if (v20) {
            uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          uint64_t v21 = 0;
        }
        ((void (*)(std::__shared_weak_count *))v20->__vftable[3].__get_deleter)(v20);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      return;
    }
    CSIPacketAddress::operator std::string();
    if (v31 >= 0) {
      unint64_t v14 = buf;
    }
    else {
      unint64_t v14 = *(unsigned char **)buf;
    }
    *(_DWORD *)__int16 v24 = 136315394;
    *(void *)&void v24[4] = "checkIPv6ConfigTimer";
    __int16 v25 = 2080;
    uint64_t v26 = v14;
    uint64_t v15 = "#I %s: IPv6Service: fIPv6ConfigAddress: %s";
    uint64_t v16 = v13;
LABEL_34:
    _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, v15, v24, 0x16u);
    if (SHIBYTE(v31) < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_36;
  }
  uint64_t v5 = *((void *)this + 39);
  if (v5 != *((void *)this + 40))
  {
    while (1)
    {
      int v6 = CSIPacketAddress::operator==();
      uint64_t v7 = *((void *)this + 5);
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (v6) {
        break;
      }
      if (v8)
      {
        CSIPacketAddress::operator std::string();
        int v9 = v27;
        uint32_t v10 = *(unsigned char **)v24;
        CSIPacketAddress::operator std::string();
        uint64_t v11 = v24;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v23 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "checkIPv6ConfigTimer";
        __int16 v29 = 2080;
        uint64_t v30 = v11;
        __int16 v31 = 2080;
        int v32 = p_p;
        _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6Service: no match %s != %s", buf, 0x20u);
        if (v23 < 0) {
          operator delete(__p);
        }
        if (v27 < 0) {
          operator delete(*(void **)v24);
        }
      }
      v5 += 24;
      if (v5 == *((void *)this + 40)) {
        return;
      }
    }
    if (!v8) {
      goto LABEL_36;
    }
    CSIPacketAddress::operator std::string();
    if (v31 >= 0) {
      uint64_t v17 = buf;
    }
    else {
      uint64_t v17 = *(unsigned char **)buf;
    }
    *(_DWORD *)__int16 v24 = 136315394;
    *(void *)&void v24[4] = "checkIPv6ConfigTimer";
    __int16 v25 = 2080;
    uint64_t v26 = v17;
    uint64_t v15 = "#I %s: IPv6Service: match found %s";
    uint64_t v16 = v7;
    goto LABEL_34;
  }
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "checkIPv6ConfigTimer";
    int v4 = "#I %s: IPv6Service: no DAD address yet";
LABEL_6:
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, v4, buf, 0xCu);
  }
}

void sub_2224A6C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPBase::setIPv6ConfigTimer(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)buf);
  CSIPacketAddress::operator=();
  *(void *)(a1 + 320) = *(void *)(a1 + 312);
  *(unsigned char *)(a1 + 304) = a2;
  *(unsigned char *)(a1 + 306) = a3;
  BOOL v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = asStringBool();
    uint64_t v10 = asStringBool();
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "setIPv6ConfigTimer";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v9;
    __int16 v28 = 2080;
    uint64_t v29 = v10;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: resume=%s, dadRequired=%s", buf, 0x20u);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11 || (v12 = *(void *)(a1 + 8), (unint64_t v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v14 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 80));
  uint64_t v15 = *(void *)buf;
  std::string::basic_string[abi:ne180100]<0>(__p, "IPv6 Configuration timer");
  uint64_t v16 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 1174405120;
  _OWORD v20[2] = ___ZN20QMIDataContextIPBase18setIPv6ConfigTimerEbbU13block_pointerFvvE_block_invoke;
  v20[3] = &unk_26D4CDE30;
  v20[5] = a1;
  void v20[6] = v12;
  uint64_t v21 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  void v20[4] = a4;
  uint64_t aBlock = _Block_copy(v20);
  ctu::TimerService::createOneShotTimer(v15, (uint64_t)__p, 0, 10000000, &object, &aBlock);
  uint64_t v17 = v26;
  uint64_t v26 = 0;
  uint64_t v18 = *(void *)(a1 + 288);
  *(void *)(a1 + 2std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    uint64_t v19 = v26;
    uint64_t v26 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  std::__shared_weak_count::__release_weak(v14);
}

void sub_2224A6F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase18setIPv6ConfigTimerEbbU13block_pointerFvvE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = (void *)a1[5];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[6])
      {
        uint64_t v6 = v3[36];
        v3[36] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v7 = (std::__shared_weak_count *)v3[13];
        if (v7)
        {
          uint64_t v7 = std::__shared_weak_count::lock(v7);
          BOOL v8 = v7;
          if (v7) {
            uint64_t v7 = (std::__shared_weak_count *)v3[12];
          }
        }
        else
        {
          BOOL v8 = 0;
        }
        ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v7->__vftable[9].__on_zero_shared)(v7, 2, 1);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2224A710C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c45_ZTSNSt3__18weak_ptrI20QMIDataContextIPBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c45_ZTSNSt3__18weak_ptrI20QMIDataContextIPBaseEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void QMIDataContextIPBase::setIPv4ConfigTimer(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)buf);
  CSIPacketAddress::operator=();
  *(unsigned char *)(a1 + 305) = a2;
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = asStringBool();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "setIPv4ConfigTimer";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v7;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: resume=%s", buf, 0x16u);
  }
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (uint64_t v9 = *(void *)(a1 + 8), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 80));
  uint64_t v12 = *(void *)buf;
  std::string::basic_string[abi:ne180100]<0>(__p, "IPv4 Configuration timer");
  unint64_t v13 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 1174405120;
  _OWORD v17[2] = ___ZN20QMIDataContextIPBase18setIPv4ConfigTimerEbU13block_pointerFvvE_block_invoke;
  unsigned int v17[3] = &unk_26D4CDE68;
  void v17[5] = a1;
  v17[6] = v9;
  uint64_t v18 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  void v17[4] = a3;
  uint64_t aBlock = _Block_copy(v17);
  ctu::TimerService::createOneShotTimer(v12, (uint64_t)__p, 0, 10000000, &object, &aBlock);
  uint64_t v14 = v23;
  uint64_t v23 = 0;
  uint64_t v15 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    uint64_t v16 = v23;
    uint64_t v23 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_2224A73E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase18setIPv4ConfigTimerEbU13block_pointerFvvE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = (void *)a1[5];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[6])
      {
        uint64_t v6 = v3[37];
        v3[37] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v7 = (std::__shared_weak_count *)v3[13];
        if (v7)
        {
          uint64_t v7 = std::__shared_weak_count::lock(v7);
          BOOL v8 = v7;
          if (v7) {
            uint64_t v7 = (std::__shared_weak_count *)v3[12];
          }
        }
        else
        {
          BOOL v8 = 0;
        }
        ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v7->__vftable[9].__on_zero_shared)(v7, 1, 1);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2224A7574(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase22handleSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN20QMIDataContextIPBase17handlePcoResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 + 592 != a2 + 8) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(v3 + 592), *(char **)(a2 + 8), *(char **)(a2 + 16), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  }
  int v4 = *(unsigned __int16 *)(a2 + 32);
  *(_WORD *)(v3 + 584) = v4;
  uint64_t v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315394;
    uint64_t v9 = "handlePcoResponse_block_invoke";
    __int16 v10 = 1024;
    int v11 = v4;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: PCO: %04x, Call observer", (uint8_t *)&v8, 0x12u);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 104);
  if (v6)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = *(std::__shared_weak_count **)(v3 + 96);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, void))v6->__vftable[3].__on_zero_shared_weak)(v6, v3 + 592, *(unsigned __int16 *)(v3 + 584));
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_2224A76EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(void *)(a1 + 32) + 184));
}

uint64_t ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  memset(v4, 0, sizeof(v4));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v4);
  CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)v4);
  uint64_t result = CSIPacketAddress::isZeroIP((CSIPacketAddress *)v4);
  if ((result & 1) == 0)
  {
    unint64_t v3 = v1[27];
    if (v3 == v1[26])
    {
      if (v3 >= v1[28])
      {
        uint64_t result = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>((uint64_t)(v1 + 26), (const CSIPacketAddress *)v4);
      }
      else
      {
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v1[27], (const CSIPacketAddress *)v4);
        uint64_t result = v3 + 24;
        v1[27] = v3 + 24;
      }
      v1[27] = result;
    }
    else
    {
      return CSIPacketAddress::operator=();
    }
  }
  return result;
}

void sub_2224A77B8(_Unwind_Exception *a1)
{
  *(void *)(v2 + 216) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  memset(v6, 0, sizeof(v6));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v6);
  CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)v6);
  uint64_t result = CSIPacketAddress::isZeroIP((CSIPacketAddress *)v6);
  if ((result & 1) == 0)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1[27] - v1[26]) >> 3) <= 1)
    {
      do
      {
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v5);
        unint64_t v3 = v1[27];
        if (v3 >= v1[28])
        {
          uint64_t v4 = std::vector<CSIPacketAddress>::__push_back_slow_path<CSIPacketAddress>((uint64_t)(v1 + 26), (const CSIPacketAddress *)v5);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v1[27], (const CSIPacketAddress *)v5);
          uint64_t v4 = v3 + 24;
          v1[27] = v3 + 24;
        }
        v1[27] = v4;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v4 - v1[26]) >> 3) < 2);
    }
    return CSIPacketAddress::operator=();
  }
  return result;
}

void sub_2224A78A0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 216) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_4(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = (CSIPacketAddress *)(*(void *)(a1 + 32) + 184);
  CSIPacketAddress::setIPv6Address(v2, a2);

  return CSIPacketAddress::setPrefixLen(v2);
}

uint64_t ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_5(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = (CSIPacketAddress *)(*(void *)(a1 + 32) + 184);
  CSIPacketAddress::setIPv6Address(v2, a2);

  return CSIPacketAddress::setPrefixLen(v2);
}

uint64_t ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_6(uint64_t a1, const unsigned __int8 *a2)
{
  unint64_t v3 = *(void **)(a1 + 32);
  memset(v6, 0, sizeof(v6));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v6);
  CSIPacketAddress::setIPv6Address((CSIPacketAddress *)v6, a2);
  uint64_t result = CSIPacketAddress::isZeroIP((CSIPacketAddress *)v6);
  if ((result & 1) == 0)
  {
    unint64_t v5 = v3[27];
    if (v5 == v3[26])
    {
      if (v5 >= v3[28])
      {
        uint64_t result = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>((uint64_t)(v3 + 26), (const CSIPacketAddress *)v6);
      }
      else
      {
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v3[27], (const CSIPacketAddress *)v6);
        uint64_t result = v5 + 24;
        v3[27] = v5 + 24;
      }
      v3[27] = result;
    }
    else
    {
      return CSIPacketAddress::operator=();
    }
  }
  return result;
}

void sub_2224A79E8(_Unwind_Exception *a1)
{
  *(void *)(v2 + 216) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_7(uint64_t a1, const unsigned __int8 *a2)
{
  unint64_t v3 = *(void **)(a1 + 32);
  memset(v8, 0, sizeof(v8));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v8);
  CSIPacketAddress::setIPv6Address((CSIPacketAddress *)v8, a2);
  uint64_t result = CSIPacketAddress::isZeroIP((CSIPacketAddress *)v8);
  if ((result & 1) == 0)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[27] - v3[26]) >> 3) <= 1)
    {
      do
      {
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v7);
        unint64_t v5 = v3[27];
        if (v5 >= v3[28])
        {
          uint64_t v6 = std::vector<CSIPacketAddress>::__push_back_slow_path<CSIPacketAddress>((uint64_t)(v3 + 26), (const CSIPacketAddress *)v7);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v3[27], (const CSIPacketAddress *)v7);
          uint64_t v6 = v5 + 24;
          v3[27] = v5 + 24;
        }
        v3[27] = v6;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v6 - v3[26]) >> 3) < 2);
    }
    return CSIPacketAddress::operator=();
  }
  return result;
}

void sub_2224A7AD4(_Unwind_Exception *a1)
{
  *(void *)(v2 + 216) = v1;
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPBase::parseImsSettingsFromResponse(void *a1, qmi::MessageBase *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "parseImsSettingsFromResponse";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Read out tlv for Proxy Addrs", (uint8_t *)&buf, 0xCu);
  }
  std::vector<std::string>::__clear[abi:ne180100](a1 + 29);
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v32 = 0x2000000000;
  char v33 = 0;
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 0x40000000;
  uint64_t v26 = ___ZN20QMIDataContextIPBase28parseImsSettingsFromResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke;
  char v27 = &unk_26460F870;
  p_long long buf = &buf;
  uint64_t v29 = a1;
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v7 = TlvValue;
  if (TlvValue)
  {
    int v8 = v6;
    uint64_t v30 = TlvValue;
    memset(v34, 0, sizeof(v34));
    tlv::parseV<wds::tlv::ProxyIPv4List>(&v30, v6, v34);
    uint64_t v9 = v30;
    if (v30) {
      v26((uint64_t)v25, (uint64_t *)v34);
    }
    if (*(void *)v34)
    {
      *(void *)&v34[8] = *(void *)v34;
      operator delete(*(void **)v34);
    }
    if (!v9) {
      ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 35, v7, v8);
    }
  }
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  uint64_t v21 = ___ZN20QMIDataContextIPBase28parseImsSettingsFromResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_2;
  char v22 = &unk_26460F898;
  uint64_t v23 = &buf;
  __int16 v24 = a1;
  uint64_t v10 = qmi::MessageBase::findTlvValue(a2);
  uint64_t v12 = v10;
  if (v10)
  {
    int v13 = v11;
    uint64_t v30 = (unsigned __int8 *)v10;
    memset(v34, 0, sizeof(v34));
    tlv::parseV<wds::tlv::ProxyIPv6List>(&v30, v11, v34);
    uint64_t v14 = v30;
    if (v30) {
      v21((uint64_t)v20, (uint64_t)v34);
    }
    uint64_t v10 = *(void *)v34;
    if (*(void *)v34)
    {
      *(void *)&v34[8] = *(void *)v34;
      operator delete(*(void **)v34);
    }
    if (!v14) {
      uint64_t v10 = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 46, v12, v13);
    }
  }
  if (*(unsigned char *)(*((void *)&buf + 1) + 24))
  {
    uint64_t v15 = a1[5];
    uint64_t v10 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[30] - a1[29]) >> 3);
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)&void v34[4] = "parseImsSettingsFromResponse";
      *(_WORD *)&v34[12] = 2048;
      *(void *)&v34[14] = v16;
      _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s: Read %lu Proxies. Proxy update found", v34, 0x16u);
    }
  }
  if (capabilities::ct::supports5G((capabilities::ct *)v10))
  {
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 0x40000000;
    void v19[2] = ___ZN20QMIDataContextIPBase28parseImsSettingsFromResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_200;
    v19[3] = &__block_descriptor_tmp_201_0;
    _OWORD v19[4] = a1;
    *(void *)uint64_t v34 = v19;
    qmi::MessageBase::applyTlv<wds::tlv::SnssaiPdnInfo,void({block_pointer})(wds::tlv::SnssaiPdnInfo const&)>(a2, (uint64_t)v34);
  }
  uint64_t v17 = *(unsigned __int8 *)(*((void *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);
  return v17;
}

void sub_2224A7E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase21parseSettingsResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_196(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    int v8 = 136315394;
    uint64_t v9 = "parseSettingsResponse_block_invoke";
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: non-IMS: received cellular pduSessionId %d", (uint8_t *)&v8, 0x12u);
  }
  int v6 = (std::__shared_weak_count *)v3[13];
  if (v6)
  {
    int v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      int v6 = (std::__shared_weak_count *)v3[12];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void))v6->__vftable[6].__on_zero_shared_weak)(v6, *a2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_2224A7F94(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase28parseImsSettingsFromResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = (void *)(v4 + 232);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    do
    {
      memset(v17, 0, sizeof(v17));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v17);
      CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)v17);
      CSIPacketAddress::operator std::string();
      unint64_t v7 = *(void *)(v4 + 240);
      unint64_t v6 = *(void *)(v4 + 248);
      if (v7 >= v6)
      {
        unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v5) >> 3);
        unint64_t v9 = v8 + 1;
        if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v5) >> 3);
        if (2 * v10 > v9) {
          unint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v9;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v4 + 248);
        if (v11) {
          uint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4 + 248, v11);
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = v12 + v8;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v13->__r_.__value_.__r.__words[2] = v16;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        std::string::size_type v16 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v4 + 232), &__v);
        uint64_t v14 = *(void *)(v4 + 240);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        *(void *)(v4 + 240) = v14;
      }
      else
      {
        *(void *)(v7 + 16) = v16;
        *(_OWORD *)unint64_t v7 = *(_OWORD *)__p;
        *(void *)(v4 + 240) = v7 + 24;
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
}

void sub_2224A8148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase28parseImsSettingsFromResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_OWORD **)a2;
  uint64_t v3 = *(_OWORD **)(a2 + 8);
  if (*(_OWORD **)a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = (void *)(v4 + 232);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    do
    {
      *(_OWORD *)uint64_t v19 = *v2;
      memset(v17, 0, sizeof(v17));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v17);
      CSIPacketAddress::setIPv6Address((CSIPacketAddress *)v17, v19);
      CSIPacketAddress::operator std::string();
      unint64_t v7 = *(void *)(v4 + 240);
      unint64_t v6 = *(void *)(v4 + 248);
      if (v7 >= v6)
      {
        unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v5) >> 3);
        unint64_t v9 = v8 + 1;
        if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v5) >> 3);
        if (2 * v10 > v9) {
          unint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v9;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v4 + 248);
        if (v11) {
          uint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4 + 248, v11);
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = v12 + v8;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v13->__r_.__value_.__r.__words[2] = v16;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        std::string::size_type v16 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v4 + 232), &__v);
        uint64_t v14 = *(void *)(v4 + 240);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        *(void *)(v4 + 240) = v14;
      }
      else
      {
        *(void *)(v7 + 16) = v16;
        *(_OWORD *)unint64_t v7 = *(_OWORD *)__p;
        *(void *)(v4 + 240) = v7 + 24;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_2224A8348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase28parseImsSettingsFromResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke_200(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    int v8 = 136315394;
    unint64_t v9 = "parseImsSettingsFromResponse_block_invoke";
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Received SnssaiPdnInfo from getRuntimeSettings %d", (uint8_t *)&v8, 0x12u);
  }
  unint64_t v6 = (std::__shared_weak_count *)v3[13];
  if (v6)
  {
    unint64_t v6 = std::__shared_weak_count::lock(v6);
    unint64_t v7 = v6;
    if (v6) {
      unint64_t v6 = (std::__shared_weak_count *)v3[12];
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void))v6->__vftable[6].__on_zero_shared_weak)(v6, *a2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_2224A849C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase34handleWdsExtendedIPConfigChangeIndERKN3wds22ExtendedIPConfigChange10IndicationE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "handleImsSettingsResponse";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  int v5 = *((_DWORD *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = qmi::asString();
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "handleImsSettingsResponse";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v7;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Error getting runtime setting for Proxy restoration: %d(%s)", buf, 0x1Cu);
    }
  }
  else
  {
    uint64_t v12 = buf;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZN20QMIDataContextIPBase17handlePcoResponseERKN3wds18GetRuntimeSettings8ResponseE_block_invoke;
    *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_187_0;
    uint64_t v14 = v3;
    qmi::MessageBase::tryTlv<wds::tlv::OperatorReservedProtocolInformation,void({block_pointer})(wds::tlv::OperatorReservedProtocolInformation const&)>(a2, (uint64_t)&v12);
    if (QMIDataContextIPBase::parseImsSettingsFromResponse((void *)v3, a2))
    {
      int v8 = *(std::__shared_weak_count **)(v3 + 104);
      if (v8)
      {
        int v8 = std::__shared_weak_count::lock(v8);
        unint64_t v9 = v8;
        if (v8) {
          int v8 = *(std::__shared_weak_count **)(v3 + 96);
        }
      }
      else
      {
        unint64_t v9 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t, void))v8->__vftable[5].~__shared_weak_count)(v8, *(unsigned int *)(v3 + 140), v3 + 232, 0);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      __int16 v10 = *(std::__shared_weak_count **)(v3 + 104);
      if (v10)
      {
        __int16 v10 = std::__shared_weak_count::lock(v10);
        int v11 = v10;
        if (v10) {
          __int16 v10 = *(std::__shared_weak_count **)(v3 + 96);
        }
      }
      else
      {
        int v11 = 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__vftable[4].__on_zero_shared_weak)(v10);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
}

void sub_2224A86F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL QMIDataContextIPBase::suspendDataContextIP(QMIDataContextIPBase *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = "suspendDataContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v6, 0xCu);
  }
  int v3 = (*(uint64_t (**)(QMIDataContextIPBase *))(*(void *)this + 96))(this);
  if (v3 == 6)
  {
    QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 5u);
  }
  else if (*((void *)this + 33))
  {
    uint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "suspendDataContextIP";
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: DeactivateDelayTimer already scheduled. Don't do anything. Let timer be fired", (uint8_t *)&v6, 0xCu);
    }
  }
  return v3 == 6;
}

void QMIDataContextIPBase::resumeDataContextIP(QMIDataContextIPBase *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    int v11 = "resumeDataContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  if ((*(unsigned int (**)(QMIDataContextIPBase *))(*(void *)this + 96))(this) == 5)
  {
    QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 6u);
    int v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v3)
    {
      int v3 = std::__shared_weak_count::lock(v3);
      uint64_t v4 = v3;
      if (v3) {
        int v3 = (std::__shared_weak_count *)*((void *)this + 12);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    int v5 = ((uint64_t (*)(std::__shared_weak_count *, void, void))v3->__vftable[3].__on_zero_shared)(v3, *((unsigned int *)this + 35), 0);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (v5)
    {
      int v6 = *((_DWORD *)this + 35);
      if (v6 == 1)
      {
        v8[0] = MEMORY[0x263EF8330];
        v8[1] = 0x40000000;
        _DWORD v8[2] = ___ZN20QMIDataContextIPBase19resumeDataContextIPEv_block_invoke_2;
        void v8[3] = &__block_descriptor_tmp_207;
        v8[4] = this;
        QMIDataContextIPBase::setIPv4ConfigTimer((uint64_t)this, 1, (uint64_t)v8);
      }
      else if (v6 == 2)
      {
        v9[0] = MEMORY[0x263EF8330];
        v9[1] = 0x40000000;
        void v9[2] = ___ZN20QMIDataContextIPBase19resumeDataContextIPEv_block_invoke;
        v9[3] = &__block_descriptor_tmp_206_1;
        v9[4] = this;
        QMIDataContextIPBase::setIPv6ConfigTimer((uint64_t)this, 1, 0, (uint64_t)v9);
      }
    }
  }
  if (*((void *)this + 33))
  {
    uint64_t v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v11 = "resumeDataContextIP";
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: DeactivateDelayTimer already scheduled. Don't do anything. Let timer be fired", buf, 0xCu);
    }
  }
}

void sub_2224A8AC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase19resumeDataContextIPEv_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(QMIDataContextIPBase **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315138;
    uint64_t v15 = "resumeIPv6TimerFired";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6Service: fIPv6ConfigTimer timer(resume) fired", (uint8_t *)&v14, 0xCu);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 13);
  if (v3)
  {
    int v3 = std::__shared_weak_count::lock(v3);
    uint64_t v4 = v3;
    if (v3) {
      int v3 = (std::__shared_weak_count *)*((void *)v1 + 12);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (((uint64_t (*)(std::__shared_weak_count *, void))v3->__vftable[9].__get_deleter)(v3, *((unsigned int *)v1 + 35)))
  {
    int v5 = 1;
  }
  else
  {
    int v6 = (std::__shared_weak_count *)*((void *)v1 + 13);
    if (v6)
    {
      int v6 = std::__shared_weak_count::lock(v6);
      uint64_t v7 = v6;
      if (v6) {
        int v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    int v5 = ((uint64_t (*)(std::__shared_weak_count *, void))v6->__vftable[4].__on_zero_shared)(v6, *((unsigned int *)v1 + 35));
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v5)
  {
    QMIDataContextIPBase::setDataContextIPState((uint64_t)v1, 2u);
    (*(void (**)(QMIDataContextIPBase *, void))(*(void *)v1 + 336))(v1, 0);
    return;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v1 + 16);
  if (v8)
  {
    unint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *((void *)v1 + 15);
      if (v10)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 72))(v10))
        {
          int v11 = *((void *)v1 + 5);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v14) = 0;
            _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I IPv6Service: IPv6 configuration failed in marginal traffic conditions, let's try that later", (uint8_t *)&v14, 2u);
          }
          QMIDataContextIPBase::setDataContextIPState((uint64_t)v1, 2u);
          (*(void (**)(QMIDataContextIPBase *, void))(*(void *)v1 + 336))(v1, 0);
LABEL_34:
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          return;
        }
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  QMIDataContextIPBase::clearIPv6ConfigTimer(v1);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v1 + 13);
  if (v12)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v12);
    int v13 = v12;
    if (v12) {
      uint64_t v12 = (std::__shared_weak_count *)*((void *)v1 + 12);
    }
  }
  else
  {
    int v13 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v12->__vftable[3].__get_deleter)(v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v9) {
    goto LABEL_34;
  }
}

void sub_2224A8DC8(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataContextIPBase19resumeDataContextIPEv_block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(QMIDataContextIPBase **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315138;
    int v13 = "resumeIPv4TimerFired";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: IPv4Service: fIPv4ConfigTimer timer(resume) fired", (uint8_t *)&v12, 0xCu);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 13);
  if (v3)
  {
    int v3 = std::__shared_weak_count::lock(v3);
    uint64_t v4 = v3;
    if (v3) {
      int v3 = (std::__shared_weak_count *)*((void *)v1 + 12);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (((uint64_t (*)(std::__shared_weak_count *, void))v3->__vftable[9].__get_deleter)(v3, *((unsigned int *)v1 + 35)))
  {
    int v5 = 1;
  }
  else
  {
    int v6 = (std::__shared_weak_count *)*((void *)v1 + 13);
    if (v6)
    {
      int v6 = std::__shared_weak_count::lock(v6);
      uint64_t v7 = v6;
      if (v6) {
        int v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    int v5 = ((uint64_t (*)(std::__shared_weak_count *, void))v6->__vftable[4].__on_zero_shared)(v6, *((unsigned int *)v1 + 35));
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v5)
  {
    QMIDataContextIPBase::setDataContextIPState((uint64_t)v1, 2u);
    (*(void (**)(QMIDataContextIPBase *, void))(*(void *)v1 + 336))(v1, 0);
  }
  else
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v1 + 16);
    if (v8) {
      unint64_t v9 = std::__shared_weak_count::lock(v8);
    }
    else {
      unint64_t v9 = 0;
    }
    QMIDataContextIPBase::clearIPv4ConfigTimer(v1);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v1 + 13);
    if (v10)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v10);
      int v11 = v10;
      if (v10) {
        uint64_t v10 = (std::__shared_weak_count *)*((void *)v1 + 12);
      }
    }
    else
    {
      int v11 = 0;
    }
    ((void (*)(std::__shared_weak_count *))v10->__vftable[3].__get_deleter)(v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_2224A9034(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPBase::resetDataContextIP(QMIDataContextIPBase *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315138;
    int v13 = "resetDataContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v12, 0xCu);
  }
  *((_DWORD *)this + 45) = -1;
  *((_WORD *)this + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  uint64_t v3 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  switch((*(unsigned int (**)(QMIDataContextIPBase *))(*(void *)this + 96))(this))
  {
    case 1u:
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(QMIDataContextIPBase *))(*(void *)this + 96))(this);
        uint64_t v9 = asString();
        int v12 = 136315394;
        int v13 = "resetDataContextIP";
        __int16 v14 = 2080;
        uint64_t v15 = v9;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: ERR: at wrong state %s", (uint8_t *)&v12, 0x16u);
      }
      return;
    case 2u:
    case 5u:
      goto LABEL_10;
    case 3u:
    case 6u:
      if (QMIDataContextIPBase::transitionalStateMaskIP(this))
      {
        QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 1u);
        uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 13);
        if (v4)
        {
          uint64_t v4 = std::__shared_weak_count::lock(v4);
          int v5 = v4;
          if (v4) {
            uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          int v5 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v4->__vftable[1].__get_deleter)(v4, *((unsigned int *)this + 35), 18, 0, 0, 2, 0);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
      }
      else
      {
LABEL_10:
        QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 0);
        int v6 = (std::__shared_weak_count *)*((void *)this + 13);
        if (v6)
        {
          int v6 = std::__shared_weak_count::lock(v6);
          uint64_t v7 = v6;
          if (v6) {
            int v6 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          uint64_t v7 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void))v6->__vftable[1].__on_zero_shared_weak)(v6, *((unsigned int *)this + 35));
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      goto LABEL_29;
    case 4u:
      QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 1u);
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 13);
      if (v10)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v10);
        int v11 = v10;
        if (v10) {
          uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 12);
        }
      }
      else
      {
        int v11 = 0;
      }
      ((void (*)(std::__shared_weak_count *, void, uint64_t, void, void, uint64_t, void))v10->__vftable[1].__get_deleter)(v10, *((unsigned int *)this + 35), 18, 0, 0, 2, 0);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
LABEL_29:
      QMIDataContextIPBase::doneWithContext(this);
      break;
    default:
      return;
  }
}

void sub_2224A93A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPBase::activateFailureHandlingCompleteIP(QMIDataContextIPBase *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "activateFailureHandlingCompleteIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v3, 0xCu);
  }
  QMIDataContextIPBase::setDataContextIPState((uint64_t)this, 0);
}

void QMIDataContextIPBase::setPacketNotificationFilter(uint64_t a1, int a2, const __CFDictionary **a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  int v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "setPacketNotificationFilter";
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  if (*(void *)(a1 + 160))
  {
    CFDictionaryRef v7 = *a3;
    if (!v7) {
      return;
    }
    if (a2)
    {
      long long v54 = 0uLL;
      long long v55 = 0uLL;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v54);
      int v8 = *(_DWORD *)(a1 + 140);
      if (v8 == 2)
      {
        Value = CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F03708]);
        uint64_t v20 = Value;
        if (Value)
        {
          CFTypeID v21 = CFGetTypeID(Value);
          if (v21 == CFDictionaryGetTypeID())
          {
            v52[0] = MEMORY[0x263EF8330];
            v52[1] = 0x40000000;
            v52[2] = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_209;
            v52[3] = &__block_descriptor_tmp_210_1;
            v52[4] = a1;
            v52[5] = v20;
            char v22 = (const void **)*((void *)&v54 + 1);
            if (*((void *)&v54 + 1) != (void)v55)
            {
              while (*((unsigned char *)*v22 + 8) != 17)
              {
                if (++v22 == (const void **)v55) {
                  goto LABEL_67;
                }
              }
            }
            if (v22 == (const void **)v55) {
LABEL_67:
            }
              operator new();
            if (!v31) {
              __cxa_bad_cast();
            }
            char v33 = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_209((uint64_t)v52, (uint64_t)v31 + 12);
            goto LABEL_69;
          }
        }
        uint64_t v27 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "setPacketNotificationFilter";
          __int16 v28 = "#I %s: no IPv6 is present in the request, not sending anything";
          goto LABEL_52;
        }
        goto LABEL_81;
      }
      if (v8 == 1)
      {
        uint64_t v9 = CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F03700]);
        uint64_t v10 = v9;
        if (v9)
        {
          CFTypeID v11 = CFGetTypeID(v9);
          if (v11 == CFDictionaryGetTypeID())
          {
            v53[0] = MEMORY[0x263EF8330];
            v53[1] = 0x40000000;
            v53[2] = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
            v53[3] = &__block_descriptor_tmp_208_0;
            v53[4] = a1;
            void v53[5] = v10;
            int v12 = (const void **)*((void *)&v54 + 1);
            if (*((void *)&v54 + 1) != (void)v55)
            {
              while (*((unsigned char *)*v12 + 8) != 16)
              {
                if (++v12 == (const void **)v55) {
                  goto LABEL_65;
                }
              }
            }
            if (v12 == (const void **)v55) {
LABEL_65:
            }
              operator new();
            if (!v29) {
              __cxa_bad_cast();
            }
            char v33 = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke((uint64_t)v53, (uint64_t)v29 + 12);
LABEL_69:
            if (capabilities::ct::supportsPacketFilterCallType((capabilities::ct *)v33))
            {
              uint64_t v34 = CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F036D8]);
              uint64_t v35 = v34;
              if (v34)
              {
                CFTypeID v36 = CFGetTypeID(v34);
                if (v36 == CFNumberGetTypeID())
                {
                  v51[0] = MEMORY[0x263EF8330];
                  v51[1] = 0x40000000;
                  v51[2] = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_211;
                  v51[3] = &__block_descriptor_tmp_213_2;
                  v51[4] = v35;
                  int v37 = qmi::MutableMessageBase::getTLV<wds::tlv::FilterCallType>((uint64_t)&v54);
                  ((void (*)(void *, char *))___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_211)(v51, v37);
                }
              }
            }
            uint64_t v46 = a1 + 144;
            uint64_t v47 = QMIServiceMsg::create();
            int v48 = 25000;
            uint64_t v49 = 0;
            uint64_t aBlock = 0;
            v44[0] = MEMORY[0x263EF8330];
            v44[1] = 0x40000000;
            void v44[2] = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_2;
            v44[3] = &__block_descriptor_tmp_215_0;
            v44[4] = a1;
            char v45 = a2;
            *(void *)long long buf = MEMORY[0x263EF8330];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_23;
            __int16 v57 = &unk_26460FCF0;
            int v58 = v44;
            uint64_t v38 = _Block_copy(buf);
            uint64_t aBlock = v38;
            if (v47)
            {
              qmi::Client::send();
              uint64_t v38 = aBlock;
            }
            if (v38) {
              _Block_release(v38);
            }
            goto LABEL_81;
          }
        }
        uint64_t v27 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "setPacketNotificationFilter";
          __int16 v28 = "#I %s: no IPv4 is present in the request, not sending anything";
LABEL_52:
          _os_log_impl(&dword_22231A000, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 0xCu);
          goto LABEL_81;
        }
        goto LABEL_81;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "wrong ip family";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Da"
                              "ta/QMI/Context/QMIDataContextIPBase.cpp";
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v57) = 2487;
        _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT fIpFamilyType == kDataProtocolFamilyIPv4 || fIpFamilyType == kDataProtocolFamilyIPv6\n %s\n at %s:%d\n**********", buf, 0x1Cu);
        int v8 = *(_DWORD *)(a1 + 140);
      }
      if ((v8 - 1) < 2) {
        goto LABEL_81;
      }
LABEL_39:
      __TUAssertTrigger();
      goto LABEL_81;
    }
    long long v54 = 0uLL;
    long long v55 = 0uLL;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v54);
    int v14 = *(_DWORD *)(a1 + 140);
    if (v14 == 2)
    {
      uint64_t v23 = CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F03708]);
      __int16 v24 = v23;
      if (!v23 || (CFTypeID v25 = CFGetTypeID(v23), v25 != CFDictionaryGetTypeID()))
      {
        uint64_t v27 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "setPacketNotificationFilter";
          __int16 v28 = "#I %s: no IPv6 is present in the request, not sending anything";
          goto LABEL_52;
        }
        goto LABEL_81;
      }
      v42[0] = MEMORY[0x263EF8330];
      v42[1] = 0x40000000;
      v42[2] = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_218;
      v42[3] = &__block_descriptor_tmp_219_0;
      void v42[4] = a1;
      v42[5] = v24;
      uint64_t v26 = (const void **)*((void *)&v54 + 1);
      if (*((void *)&v54 + 1) != (void)v55)
      {
        while (*((unsigned char *)*v26 + 8) != 17)
        {
          if (++v26 == (const void **)v55) {
            goto LABEL_68;
          }
        }
      }
      if (v26 == (const void **)v55) {
LABEL_68:
      }
        operator new();
      if (!v32) {
        __cxa_bad_cast();
      }
      ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_218((uint64_t)v42, (uint64_t)v32 + 10);
    }
    else
    {
      if (v14 != 1)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "wrong ip family";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/"
                                "Data/QMI/Context/QMIDataContextIPBase.cpp";
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v57) = 2548;
          _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT fIpFamilyType == kDataProtocolFamilyIPv4 || fIpFamilyType == kDataProtocolFamilyIPv6\n %s\n at %s:%d\n**********", buf, 0x1Cu);
          int v14 = *(_DWORD *)(a1 + 140);
        }
        if ((v14 - 1) < 2) {
          goto LABEL_81;
        }
        goto LABEL_39;
      }
      uint64_t v15 = CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F03700]);
      uint64_t v16 = v15;
      if (!v15 || (CFTypeID v17 = CFGetTypeID(v15), v17 != CFDictionaryGetTypeID()))
      {
        uint64_t v27 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "setPacketNotificationFilter";
          __int16 v28 = "#I %s: no IPv4 is present in the request, not sending anything";
          goto LABEL_52;
        }
LABEL_81:
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v54);
        return;
      }
      v43[0] = MEMORY[0x263EF8330];
      v43[1] = 0x40000000;
      void v43[2] = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_216;
      void v43[3] = &__block_descriptor_tmp_217_0;
      uint8_t v43[4] = a1;
      void v43[5] = v16;
      uint64_t v18 = (const void **)*((void *)&v54 + 1);
      if (*((void *)&v54 + 1) != (void)v55)
      {
        while (*((unsigned char *)*v18 + 8) != 16)
        {
          if (++v18 == (const void **)v55) {
            goto LABEL_66;
          }
        }
      }
      if (v18 == (const void **)v55) {
LABEL_66:
      }
        operator new();
      if (!v30) {
        __cxa_bad_cast();
      }
      ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_216((uint64_t)v43, (uint64_t)v30 + 10);
    }
    uint64_t v46 = a1 + 144;
    uint64_t v47 = QMIServiceMsg::create();
    int v48 = 25000;
    uint64_t v49 = 0;
    uint64_t aBlock = 0;
    v40[0] = MEMORY[0x263EF8330];
    v40[1] = 0x40000000;
    void v40[2] = ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_220;
    v40[3] = &__block_descriptor_tmp_221_0;
    v40[4] = a1;
    char v41 = 0;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_23;
    __int16 v57 = &unk_26460FCF0;
    int v58 = v40;
    int v39 = _Block_copy(buf);
    uint64_t aBlock = v39;
    if (v47)
    {
      qmi::Client::send();
      int v39 = aBlock;
    }
    if (v39) {
      _Block_release(v39);
    }
    goto LABEL_81;
  }
  int v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_22231A000, v13, OS_LOG_TYPE_ERROR, "setPacketNotificationFilter with NULL fWDSClient", buf, 2u);
  }
}

void sub_2224AA33C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 160));
  _Unwind_Resume(a1);
}

int *___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 40);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03720]);
  CFDataRef v5 = Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 != CFDataGetTypeID()) {
      CFDataRef v5 = 0;
    }
  }
  CFDataRef v7 = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E0]);
  CFDataRef v8 = v7;
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 != CFDataGetTypeID()) {
      CFDataRef v8 = 0;
    }
  }
  uint64_t v10 = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03728]);
  CFTypeID v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFNumberGetTypeID()) {
      CFTypeID v11 = 0;
    }
  }
  int v13 = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E8]);
  uint64_t v15 = v13;
  if (v13)
  {
    CFTypeID v16 = CFGetTypeID(v13);
    if (v16 != CFNumberGetTypeID()) {
      uint64_t v15 = 0;
    }
  }
  if (v5 && CFDataGetLength(v5) == 4) {
    *(_DWORD *)a2 = *(_DWORD *)CFDataGetBytePtr(v5);
  }
  if (v8 && CFDataGetLength(v8) == 4) {
    *(_DWORD *)(a2 + 4) = *(_DWORD *)CFDataGetBytePtr(v8);
  }
  if (v11)
  {
    int v22 = 0;
    ctu::cf::assign((ctu::cf *)&v22, v11, v14);
    *(_WORD *)(a2 + 8) = v22;
  }
  if (v15)
  {
    int v23 = 0;
    ctu::cf::assign((ctu::cf *)&v23, v15, v14);
    *(_WORD *)(a2 + 10) = v23;
  }
  uint64_t result = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03740]);
  if (result)
  {
    uint64_t v18 = result;
    CFTypeID v19 = CFGetTypeID(result);
    uint64_t result = (int *)CFNumberGetTypeID();
    if ((int *)v19 == result)
    {
      int v21 = 0;
      uint64_t result = (int *)ctu::cf::assign((ctu::cf *)&v21, v18, v20);
      *(_DWORD *)(a2 + 12) = v21;
    }
  }
  return result;
}

int *___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_209(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 40);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03720]);
  CFDataRef v5 = Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 != CFDataGetTypeID()) {
      CFDataRef v5 = 0;
    }
  }
  CFDataRef v7 = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E0]);
  CFDataRef v8 = v7;
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 != CFDataGetTypeID()) {
      CFDataRef v8 = 0;
    }
  }
  uint64_t v10 = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03728]);
  CFTypeID v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFNumberGetTypeID()) {
      CFTypeID v11 = 0;
    }
  }
  int v13 = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E8]);
  uint64_t v15 = v13;
  if (v13)
  {
    CFTypeID v16 = CFGetTypeID(v13);
    if (v16 != CFNumberGetTypeID()) {
      uint64_t v15 = 0;
    }
  }
  if (v5 && CFDataGetLength(v5) == 16) {
    *(_OWORD *)a2 = *(_OWORD *)CFDataGetBytePtr(v5);
  }
  if (v8 && CFDataGetLength(v8) == 16) {
    *(_OWORD *)(a2 + 16) = *(_OWORD *)CFDataGetBytePtr(v8);
  }
  if (v11)
  {
    int v22 = 0;
    ctu::cf::assign((ctu::cf *)&v22, v11, v14);
    *(_WORD *)(a2 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v22;
  }
  if (v15)
  {
    int v23 = 0;
    ctu::cf::assign((ctu::cf *)&v23, v15, v14);
    *(_WORD *)(a2 + 34) = v23;
  }
  uint64_t result = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03740]);
  if (result)
  {
    uint64_t v18 = result;
    CFTypeID v19 = CFGetTypeID(result);
    uint64_t result = (int *)CFNumberGetTypeID();
    if ((int *)v19 == result)
    {
      int v21 = 0;
      uint64_t result = (int *)ctu::cf::assign((ctu::cf *)&v21, v18, v20);
      *(_DWORD *)(a2 + 36) = v21;
    }
  }
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_211(uint64_t a1, unsigned char *a2, const __CFNumber *a3)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 32);
  char v6 = 0;
  uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v4, a3);
  *a2 = v6;
  return result;
}

void ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    int v4 = *(_DWORD *)(a2 + 4);
    CFDataRef v5 = *(NSObject **)(v2 + 40);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v6) {
        return;
      }
      int v11 = 136315650;
      CFTypeID v12 = "setPacketNotificationFilter_block_invoke";
      __int16 v13 = 1024;
      int v14 = v4;
      __int16 v15 = 2080;
      uint64_t v16 = qmi::asString();
      CFDataRef v7 = "#I %s: RegisterDataNotificationFilter:Error in response with code = 0x%x (%s)";
      CFDataRef v8 = v5;
      uint32_t v9 = 28;
    }
    else
    {
      if (!v6) {
        return;
      }
      int v10 = *(unsigned __int8 *)(a1 + 40);
      int v11 = 136315394;
      CFTypeID v12 = "setPacketNotificationFilter_block_invoke_2";
      __int16 v13 = 1024;
      int v14 = v10;
      CFDataRef v7 = "#I %s: RegisterDataNotificationFilter: No Error. Enable = %d";
      CFDataRef v8 = v5;
      uint32_t v9 = 18;
    }
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
  }
}

int *___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_216(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 40);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03720]);
  CFDataRef v5 = Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 != CFDataGetTypeID()) {
      CFDataRef v5 = 0;
    }
  }
  CFDataRef v7 = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E0]);
  CFDataRef v8 = v7;
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 != CFDataGetTypeID()) {
      CFDataRef v8 = 0;
    }
  }
  int v10 = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03728]);
  int v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFNumberGetTypeID()) {
      int v11 = 0;
    }
  }
  uint64_t result = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E8]);
  __int16 v15 = result;
  if (result)
  {
    CFTypeID v16 = CFGetTypeID(result);
    uint64_t result = (int *)CFNumberGetTypeID();
    if ((int *)v16 != result) {
      __int16 v15 = 0;
    }
  }
  if (v5)
  {
    uint64_t result = (int *)CFDataGetLength(v5);
    if (result == (int *)4)
    {
      uint64_t result = (int *)CFDataGetBytePtr(v5);
      *(_DWORD *)a2 = *result;
    }
  }
  if (v8)
  {
    uint64_t result = (int *)CFDataGetLength(v8);
    if (result == (int *)4)
    {
      uint64_t result = (int *)CFDataGetBytePtr(v8);
      *(_DWORD *)(a2 + 4) = *result;
    }
  }
  if (v11)
  {
    int v17 = 0;
    uint64_t result = (int *)ctu::cf::assign((ctu::cf *)&v17, v11, v14);
    *(_WORD *)(a2 + 8) = v17;
  }
  if (v15)
  {
    int v18 = 0;
    uint64_t result = (int *)ctu::cf::assign((ctu::cf *)&v18, v15, v14);
    *(_WORD *)(a2 + 10) = v18;
  }
  return result;
}

int *___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_218(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 40);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03720]);
  CFDataRef v5 = Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 != CFDataGetTypeID()) {
      CFDataRef v5 = 0;
    }
  }
  CFDataRef v7 = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E0]);
  CFDataRef v8 = v7;
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 != CFDataGetTypeID()) {
      CFDataRef v8 = 0;
    }
  }
  int v10 = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F03728]);
  int v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFNumberGetTypeID()) {
      int v11 = 0;
    }
  }
  uint64_t result = (int *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x263F036E8]);
  __int16 v15 = result;
  if (result)
  {
    CFTypeID v16 = CFGetTypeID(result);
    uint64_t result = (int *)CFNumberGetTypeID();
    if ((int *)v16 != result) {
      __int16 v15 = 0;
    }
  }
  if (v5)
  {
    uint64_t result = (int *)CFDataGetLength(v5);
    if (result == (int *)16)
    {
      uint64_t result = (int *)CFDataGetBytePtr(v5);
      *(_OWORD *)a2 = *(_OWORD *)result;
    }
  }
  if (v8)
  {
    uint64_t result = (int *)CFDataGetLength(v8);
    if (result == (int *)16)
    {
      uint64_t result = (int *)CFDataGetBytePtr(v8);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)result;
    }
  }
  if (v11)
  {
    int v17 = 0;
    uint64_t result = (int *)ctu::cf::assign((ctu::cf *)&v17, v11, v14);
    *(_WORD *)(a2 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v17;
  }
  if (v15)
  {
    int v18 = 0;
    uint64_t result = (int *)ctu::cf::assign((ctu::cf *)&v18, v15, v14);
    *(_WORD *)(a2 + 34) = v18;
  }
  return result;
}

void ___ZN20QMIDataContextIPBase27setPacketNotificationFilterEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_220(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    int v4 = *(_DWORD *)(a2 + 4);
    CFDataRef v5 = *(NSObject **)(v2 + 40);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v6) {
        return;
      }
      int v11 = 136315650;
      CFTypeID v12 = "setPacketNotificationFilter_block_invoke";
      __int16 v13 = 1024;
      int v14 = v4;
      __int16 v15 = 2080;
      uint64_t v16 = qmi::asString();
      CFDataRef v7 = "#I %s: DeregisterDataNotificationFilter:Error in response with code = 0x%x (%s)";
      CFDataRef v8 = v5;
      uint32_t v9 = 28;
    }
    else
    {
      if (!v6) {
        return;
      }
      int v10 = *(unsigned __int8 *)(a1 + 40);
      int v11 = 136315394;
      CFTypeID v12 = "setPacketNotificationFilter_block_invoke";
      __int16 v13 = 1024;
      int v14 = v10;
      CFDataRef v7 = "#I %s: DeregisterDataNotificationFilter: No Error. Enable = %d";
      CFDataRef v8 = v5;
      uint32_t v9 = 18;
    }
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
  }
}

void QMIDataContextIPBase::dropIPPackets(uint64_t a1, const __CFArray **a2, int a3)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  BOOL v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "dropIPPackets";
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  if (*(void *)(a1 + 160))
  {
    CFArrayRef v7 = *a2;
    if (v7)
    {
      CFIndex Count = CFArrayGetCount(v7);
      long long v87 = 0u;
      long long v88 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v87);
      if (Count < 1)
      {
LABEL_71:
        uint64_t v59 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v60 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "dropIPPackets";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v60;
          _os_log_impl(&dword_22231A000, v59, OS_LOG_TYPE_DEFAULT, "#I %s: Not found any records matching %s protocol. Message not sent", buf, 0x16u);
        }
      }
      else
      {
        char v9 = 0;
        CFIndex v10 = 0;
        key = (void *)*MEMORY[0x263F036F8];
        uint64_t v71 = (void *)*MEMORY[0x263F03718];
        uint64_t v70 = (void *)*MEMORY[0x263F03710];
        uint64_t v69 = (void *)*MEMORY[0x263F03728];
        uint64_t v68 = (void *)*MEMORY[0x263F036E8];
        int v67 = (void *)*MEMORY[0x263F03738];
        uint64_t v66 = (void *)*MEMORY[0x263F036F0];
        int v65 = (void *)*MEMORY[0x263F03730];
        do
        {
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v10);
            CFDictionaryRef v12 = ValueAtIndex;
            if (!ValueAtIndex) {
              break;
            }
            CFTypeID v13 = CFGetTypeID(ValueAtIndex);
            if (v13 != CFDictionaryGetTypeID()) {
              break;
            }
            CFDataRef Value = (int *)CFDictionaryGetValue(v12, key);
            __int16 v15 = Value;
            if (Value && (CFTypeID v16 = CFGetTypeID(Value), v16 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v15, v17);
              if (*(_DWORD *)buf == 2) {
                int v18 = 2;
              }
              else {
                int v18 = 1;
              }
              if (*(_DWORD *)buf == 2) {
                int v19 = 0;
              }
              else {
                int v19 = a3;
              }
            }
            else
            {
              int v18 = 1;
              int v19 = a3;
            }
            if (a3) {
              int v18 = 2;
            }
            if (v18 != *(_DWORD *)(a1 + 140)) {
              break;
            }
            CFNumberRef v20 = (int *)CFDictionaryGetValue(v12, v71);
            int v21 = v20;
            if (v20 && (CFTypeID v22 = CFGetTypeID(v20), v22 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v21, v23);
              char v24 = buf[0];
            }
            else
            {
              char v24 = 0;
            }
            CFTypeID v25 = (int *)CFDictionaryGetValue(v12, v70);
            uint64_t v26 = v25;
            if (v25 && (CFTypeID v27 = CFGetTypeID(v25), v27 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v26, v28);
              if (v19) {
                char v29 = buf[0] + 20;
              }
              else {
                char v29 = buf[0];
              }
            }
            else
            {
              char v29 = 0;
            }
            uint64_t v30 = (int *)CFDictionaryGetValue(v12, v69);
            __int16 v31 = v30;
            if (v30 && (CFTypeID v32 = CFGetTypeID(v30), v32 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v31, v33);
              __int16 v64 = *(_WORD *)buf;
            }
            else
            {
              __int16 v64 = 0;
            }
            uint64_t v34 = (int *)CFDictionaryGetValue(v12, v68);
            uint64_t v35 = v34;
            if (v34 && (CFTypeID v36 = CFGetTypeID(v34), v36 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v35, v37);
              __int16 v63 = *(_WORD *)buf;
            }
            else
            {
              __int16 v63 = 0;
            }
            uint64_t v38 = (int *)CFDictionaryGetValue(v12, v67);
            int v39 = v38;
            char v62 = v24;
            if (v38 && (CFTypeID v40 = CFGetTypeID(v38), v40 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v39, v41);
              __int16 v42 = *(_WORD *)buf;
            }
            else
            {
              __int16 v42 = 0;
            }
            uint64_t v43 = (int *)CFDictionaryGetValue(v12, v66);
            int v44 = v43;
            __int16 v61 = v42;
            if (v43 && (CFTypeID v45 = CFGetTypeID(v43), v45 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v44, v46);
              char v47 = v29;
              __int16 v48 = *(_WORD *)buf;
            }
            else
            {
              char v47 = v29;
              __int16 v48 = 0;
            }
            uint64_t v49 = (int *)CFDictionaryGetValue(v12, v65);
            uint64_t v50 = v49;
            if (v49 && (CFTypeID v51 = CFGetTypeID(v49), v51 == CFNumberGetTypeID()))
            {
              *(_DWORD *)long long buf = 0;
              ctu::cf::assign((ctu::cf *)buf, v50, v52);
              int v53 = *(_DWORD *)buf;
            }
            else
            {
              int v53 = 0;
            }
            v78[0] = MEMORY[0x263EF8330];
            v78[1] = 0x40000000;
            v78[2] = ___ZN20QMIDataContextIPBase13dropIPPacketsEN3ctu2cf11CFSharedRefIK9__CFArrayEEb_block_invoke;
            v78[3] = &__block_descriptor_tmp_222;
            char v79 = v62;
            char v80 = v47;
            __int16 v81 = v64;
            __int16 v82 = v63;
            __int16 v83 = v61;
            __int16 v84 = v48;
            __int16 v85 = 0;
            int v86 = v53;
            long long v54 = (const void **)*((void *)&v87 + 1);
            if (*((void *)&v87 + 1) != (void)v88)
            {
              while (*((unsigned char *)*v54 + 8) != 1)
              {
                if (++v54 == (const void **)v88) {
                  goto LABEL_60;
                }
              }
            }
            if (v54 == (const void **)v88) {
LABEL_60:
            }
              operator new();
            if (!v55) {
              __cxa_bad_cast();
            }
            ___ZN20QMIDataContextIPBase13dropIPPacketsEN3ctu2cf11CFSharedRefIK9__CFArrayEEb_block_invoke((uint64_t)v78, v55 + 2);
            char v9 = 1;
            if (Count - 1 == v10++) {
              goto LABEL_67;
            }
          }
          ++v10;
        }
        while (Count != v10);
        if ((v9 & 1) == 0) {
          goto LABEL_71;
        }
LABEL_67:
        v73[5] = a1 + 144;
        uint64_t v74 = QMIServiceMsg::create();
        int v75 = 25000;
        uint64_t v76 = 0;
        uint64_t aBlock = 0;
        v73[0] = MEMORY[0x263EF8330];
        v73[1] = 0x40000000;
        v73[2] = ___ZN20QMIDataContextIPBase13dropIPPacketsEN3ctu2cf11CFSharedRefIK9__CFArrayEEb_block_invoke_2;
        v73[3] = &__block_descriptor_tmp_224_0;
        unsigned int v73[4] = a1;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_23;
        int v90 = &unk_26460FCF0;
        int v91 = v73;
        int v58 = _Block_copy(buf);
        uint64_t aBlock = v58;
        if (v74)
        {
          qmi::Client::send();
          int v58 = aBlock;
        }
        if (v58) {
          _Block_release(v58);
        }
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v87);
    }
  }
  else
  {
    __int16 v57 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_22231A000, v57, OS_LOG_TYPE_ERROR, "dropIPPackets after client is deleted", buf, 2u);
    }
  }
}

void sub_2224AB554(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 192));
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase13dropIPPacketsEN3ctu2cf11CFSharedRefIK9__CFArrayEEb_block_invoke(uint64_t a1, void **a2)
{
  CFDictionaryRef v3 = (_OWORD *)(a1 + 32);
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = (unint64_t)a2[2];
  BOOL v6 = a2[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((char *)v6 - (unsigned char *)*a2) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a2;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      CFDictionaryRef v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,16ul>>>(v4, v11);
    }
    else {
      CFDictionaryRef v12 = 0;
    }
    CFTypeID v13 = &v12[16 * v8];
    int v14 = &v12[16 * v11];
    *(_OWORD *)CFTypeID v13 = *v3;
    CFArrayRef v7 = v13 + 16;
    CFTypeID v16 = (char *)*a2;
    __int16 v15 = (char *)a2[1];
    if (v15 != *a2)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      __int16 v15 = (char *)*a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *BOOL v6 = *v3;
    CFArrayRef v7 = v6 + 1;
  }
  a2[1] = v7;
}

void ___ZN20QMIDataContextIPBase13dropIPPacketsEN3ctu2cf11CFSharedRefIK9__CFArrayEEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *(NSObject **)(v2 + 40);
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (!v5) {
        return;
      }
      int v9 = 136315650;
      uint64_t v10 = "dropIPPackets_block_invoke";
      __int16 v11 = 1024;
      int v12 = v3;
      __int16 v13 = 2080;
      uint64_t v14 = qmi::asString();
      BOOL v6 = "#I %s: DropIpPackets:Error in response with code = 0x%x (%s)";
      CFArrayRef v7 = v4;
      uint32_t v8 = 28;
    }
    else
    {
      if (!v5) {
        return;
      }
      int v9 = 136315138;
      uint64_t v10 = "dropIPPackets_block_invoke_2";
      BOOL v6 = "#I %s: DropIpPackets: No Error";
      CFArrayRef v7 = v4;
      uint32_t v8 = 12;
    }
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
  }
}

void QMIDataContextIPBase::dropIMSPackets(QMIDataContextIPBase *this)
{
  if ((*(unsigned int (**)(QMIDataContextIPBase *))(*(void *)this + 96))(this) == 6)
  {
    if (*((void *)this + 20))
    {
      memset(v9, 0, sizeof(v9));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
      void v4[5] = (char *)this + 144;
      uint64_t v5 = QMIServiceMsg::create();
      int v6 = 25000;
      uint64_t v7 = 0;
      uint32_t v8 = 0;
      v4[0] = MEMORY[0x263EF8330];
      v4[1] = 0x40000000;
      void v4[2] = ___ZNK20QMIDataContextIPBase14dropIMSPacketsEv_block_invoke;
      void v4[3] = &__block_descriptor_tmp_225_0;
      v4[4] = this;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds12DropIPackets8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      aBlock[3] = &unk_26460FDD0;
      aBlock[4] = v4;
      uint64_t v2 = _Block_copy(aBlock);
      uint32_t v8 = v2;
      if (v5)
      {
        qmi::Client::send();
        uint64_t v2 = v8;
      }
      if (v2) {
        _Block_release(v2);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
    }
    else
    {
      int v3 = *((void *)this + 5);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        LOWORD(aBlock[0]) = 0;
        _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "dropIMSpkt after client is deleted", (uint8_t *)aBlock, 2u);
      }
    }
  }
}

void sub_2224AB958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZNK20QMIDataContextIPBase14dropIMSPacketsEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  int v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    int v8 = 136315650;
    uint64_t v9 = "dropIMSPackets_block_invoke";
    __int16 v10 = 1024;
    int v11 = v2;
    __int16 v12 = 2080;
    uint64_t v13 = qmi::asString();
    uint64_t v5 = "#I %s: Failed QMI Request - DropIMSPackets (DropIPackets) : 0x%x (%s)";
    int v6 = v3;
    uint32_t v7 = 28;
  }
  else
  {
    if (!v4) {
      return;
    }
    int v8 = 136315138;
    uint64_t v9 = "dropIMSPackets_block_invoke";
    uint64_t v5 = "#I %s: DropIMSPackets (DropIPackets) invoked successfully";
    int v6 = v3;
    uint32_t v7 = 12;
  }
  _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v8, v7);
}

void QMIDataContextIPBase::setQuality(QMIDataContextIPBase *this, int a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v4 = *((void *)this + 5);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "setQuality";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&buf, 0xCu);
  }
  if (*((void *)this + 20))
  {
    if (!capabilities::ct::supportsQualityIndication((capabilities::ct *)v5)) {
      return;
    }
    if (a2) {
      char v6 = 1;
    }
    else {
      char v6 = 2;
    }
    long long v25 = 0u;
    long long v26 = 0u;
    uint32_t v7 = (capabilities::ct *)qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v25);
    if (capabilities::ct::supports2StepDataCallBringUp(v7))
    {
      v23[0] = MEMORY[0x263EF8330];
      v23[1] = 0x40000000;
      uint8_t v23[2] = ___ZN20QMIDataContextIPBase10setQualityEb_block_invoke;
      v23[3] = &__block_descriptor_tmp_227;
      char v24 = v6;
      int v8 = (const void **)*((void *)&v25 + 1);
      if (*((void *)&v25 + 1) != (void)v26)
      {
        while (*((unsigned char *)*v8 + 8) != 1)
        {
          if (++v8 == (const void **)v26) {
            goto LABEL_25;
          }
        }
      }
      if (v8 == (const void **)v26) {
LABEL_25:
      }
        operator new();
      if (v11)
      {
        __int16 v12 = v11 + 9;
        uint64_t v14 = v23;
LABEL_27:
        ((void (*)(void *, char *))v14[2])(v14, v12);
        void v16[5] = (char *)this + 144;
        uint64_t v17 = QMIServiceMsg::create();
        int v18 = 25000;
        uint64_t v19 = 0;
        uint64_t aBlock = 0;
        v16[0] = MEMORY[0x263EF8330];
        v16[1] = 0x40000000;
        void v16[2] = ___ZN20QMIDataContextIPBase10setQualityEb_block_invoke_3;
        void v16[3] = &__block_descriptor_tmp_230_0;
        void v16[4] = this;
        *(void *)&long long buf = MEMORY[0x263EF8330];
        *((void *)&buf + 1) = 0x40000000;
        CFNumberRef v28 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_23;
        char v29 = &unk_26460FCF0;
        uint64_t v30 = v16;
        uint64_t v15 = _Block_copy(&buf);
        uint64_t aBlock = v15;
        if (v17)
        {
          qmi::Client::send();
          uint64_t v15 = aBlock;
        }
        if (v15) {
          _Block_release(v15);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v25);
        return;
      }
    }
    else
    {
      v21[0] = MEMORY[0x263EF8330];
      v21[1] = 0x40000000;
      void v21[2] = ___ZN20QMIDataContextIPBase10setQualityEb_block_invoke_2;
      v21[3] = &__block_descriptor_tmp_229;
      char v22 = v6;
      __int16 v10 = (const void **)*((void *)&v25 + 1);
      if (*((void *)&v25 + 1) != (void)v26)
      {
        while (*((unsigned char *)*v10 + 8))
        {
          if (++v10 == (const void **)v26) {
            goto LABEL_26;
          }
        }
      }
      if (v10 == (const void **)v26) {
LABEL_26:
      }
        operator new();
      if (v13)
      {
        __int16 v12 = v13 + 9;
        uint64_t v14 = v21;
        goto LABEL_27;
      }
    }
    __cxa_bad_cast();
  }
  uint64_t v9 = *((void *)this + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "setQuality after client is deleted", (uint8_t *)&buf, 2u);
  }
}

void sub_2224AC024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v6 - 128));
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataContextIPBase10setQualityEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataContextIPBase10setQualityEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN20QMIDataContextIPBase10setQualityEb_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 257))
  {
    int v3 = *(_DWORD *)(a2 + 4);
    if (v3)
    {
      BOOL v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = "setQuality_block_invoke_3";
        __int16 v7 = 1024;
        int v8 = v3;
        __int16 v9 = 2080;
        uint64_t v10 = qmi::asString();
        _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Quality Indication<FT> failed with error 0x%x(%s)", (uint8_t *)&v5, 0x1Cu);
      }
    }
  }
}

void QMIDataContextIPBase::shutDownContextIP(QMIDataContextIPBase *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "shutDownContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v4, 0xCu);
  }
  uint64_t v3 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((unsigned char *)this + 257) = 1;
  QMIDataContextIPBase::deactivateDataContextIP(this, 0, 0);
  QMIDataContextIPBase::resetDataContextIP(this);
}

void QMIDataContextIPBase::ipv6ServiceUp(QMIDataContextIPBase *this, const CSIPacketAddress *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    int v4 = v6 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315394;
    int v8 = "ipv6ServiceUp";
    __int16 v9 = 2080;
    uint64_t v10 = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6 address: %s", buf, 0x16u);
    if (v6 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 36))
  {
    CSIPacketAddress::operator=();
    QMIDataContextIPBase::checkIPv6ConfigTimer(this);
  }
}

void QMIDataContextIPBase::ipv4ServiceUp(QMIDataContextIPBase *this, const CSIPacketAddress *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    int v4 = v12 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315394;
    uint64_t v14 = "ipv4ServiceUp";
    __int16 v15 = 2080;
    CFTypeID v16 = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: IPv4 address: %s", buf, 0x16u);
    if (v12 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (*((void *)this + 37))
  {
    CSIPacketAddress::operator=();
    int isZeroIP = CSIPacketAddress::isZeroIP((QMIDataContextIPBase *)((char *)this + 360));
    char v6 = *((void *)this + 5);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (isZeroIP)
    {
      if (v7)
      {
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = "checkIPv4ConfigTimer";
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: IPv4Service: fIPv4ConfigAddress is empty", __p, 0xCu);
      }
    }
    else
    {
      if (v7)
      {
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = "checkIPv4ConfigTimer";
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: IPv4Service: completed", __p, 0xCu);
      }
      BOOL v8 = *((unsigned char *)this + 305) == 0;
      QMIDataContextIPBase::clearIPv4ConfigTimer(this);
      __int16 v9 = (std::__shared_weak_count *)*((void *)this + 13);
      if (v8)
      {
        if (v9)
        {
          __int16 v9 = std::__shared_weak_count::lock(v9);
          uint64_t v10 = v9;
          if (v9) {
            __int16 v9 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          uint64_t v10 = 0;
        }
        ((void (*)(std::__shared_weak_count *, void, void))v9->__vftable[1].__on_zero_shared)(v9, *((unsigned int *)this + 35), 0);
      }
      else
      {
        if (v9)
        {
          __int16 v9 = std::__shared_weak_count::lock(v9);
          uint64_t v10 = v9;
          if (v9) {
            __int16 v9 = (std::__shared_weak_count *)*((void *)this + 12);
          }
        }
        else
        {
          uint64_t v10 = 0;
        }
        ((void (*)(std::__shared_weak_count *))v9->__vftable[3].__get_deleter)(v9);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
  }
}

void sub_2224AC5B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIDataContextIPBase::getPDPMetricInfo(QMIDataContextIPBase *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = asString();
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I getPDPMetricInfo() for %s", (uint8_t *)&v4, 0xCu);
  }
  return (uint64_t)this + 384;
}

uint64_t QMIDataContextIPBase::isActivationFinished(QMIDataContextIPBase *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = (*((_DWORD *)this + 34) < 7u) & (0x69u >> *((_DWORD *)this + 34));
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = asString();
    int v4 = "not finished yet";
    BOOL v7 = "isActivationFinished";
    int v6 = 136315650;
    uint64_t v9 = v3;
    __int16 v8 = 2080;
    if (v1) {
      int v4 = "finished";
    }
    __int16 v10 = 2080;
    uint64_t v11 = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: in state %s, activation %s", (uint8_t *)&v6, 0x20u);
  }
  return v1;
}

BOOL QMIDataContextIPBase::isActive(QMIDataContextIPBase *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v1 = *((_DWORD *)this + 34) & 0xFFFFFFFD;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315650;
    uint64_t v5 = "isActive";
    __int16 v6 = 2080;
    uint64_t v7 = asString();
    __int16 v8 = 2080;
    uint64_t v9 = asStringBool();
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: in state %s, active: %s", (uint8_t *)&v4, 0x20u);
  }
  return v1 == 4;
}

void QMIDataContextIPBase::updateVoLTEDataCallType(QMIDataContextIPBase *this, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (capabilities::ct::supportsDataQMIExtensions(this))
  {
    if (*((void *)this + 20))
    {
      *(_OWORD *)std::string __p = 0u;
      long long v18 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      int v4 = (const void **)__p[1];
      if (__p[1] != (void *)v18)
      {
        while (*((unsigned char *)*v4 + 8) != 1)
        {
          if (++v4 == (const void **)v18) {
            goto LABEL_12;
          }
        }
      }
      if (v4 == (const void **)v18) {
LABEL_12:
      }
        operator new();
      if (!v5) {
        __cxa_bad_cast();
      }
      void v5[3] = a2;
      uint64_t v7 = *((void *)this + 5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = CSIBOOLAsString();
        uint64_t v10 = wds::asString(a2);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v10;
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v20) = a2;
        _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I Sending VoLTE data call type to BB: isCallActive: %s data call type: %s (%u)", buf, 0x1Cu);
      }
      void v12[5] = (char *)this + 144;
      uint64_t v13 = QMIServiceMsg::create();
      int v14 = 25000;
      uint64_t v15 = 0;
      uint64_t aBlock = 0;
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 0x40000000;
      _DWORD v12[2] = ___ZNK20QMIDataContextIPBase23updateVoLTEDataCallTypeEb_block_invoke;
      uint64_t v12[3] = &__block_descriptor_tmp_233_0;
      void v12[4] = this;
      *(void *)long long buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_23;
      CFNumberRef v20 = &unk_26460FCF0;
      int v21 = v12;
      uint64_t v11 = _Block_copy(buf);
      uint64_t aBlock = v11;
      if (v13)
      {
        qmi::Client::send();
        uint64_t v11 = aBlock;
      }
      if (v11) {
        _Block_release(v11);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
    }
    else
    {
      __int16 v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "updateVoLTEDataCallType after client is deleted", buf, 2u);
      }
    }
  }
}

void sub_2224ACC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZNK20QMIDataContextIPBase23updateVoLTEDataCallTypeEb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Send VoLTE call status info failed: %s (%d)", (uint8_t *)&v6, 0x12u);
    }
  }
}

void QMIDataContextIPBase::shutdownAnbrHandle(QMIDataContextIPBase *a1, int *a2)
{
  QMIDataContextIPBase::shutdownAnbrHandle(a1, a2[40]);
  if (a2[41])
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 13);
    if (v4)
    {
      int v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        int v6 = v5;
        uint64_t v7 = *((void *)a1 + 12);
        if (v7) {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 112))(v7, 0, 1);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  if (a2[42])
  {
    __int16 v8 = (std::__shared_weak_count *)*((void *)a1 + 13);
    if (v8)
    {
      int v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *((void *)a1 + 12);
        if (v11) {
          (*(void (**)(uint64_t, void, void))(*(void *)v11 + 112))(v11, 0, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
  }
}

void sub_2224ACE18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataContextIPBase::shutdownAnbrHandle(QMIDataContextIPBase *this, int a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v4 = (const void **)__p[1];
  if (__p[1] != (void *)v13)
  {
    while (*((unsigned char *)*v4 + 8) != 1)
    {
      if (++v4 == (const void **)v13) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v13) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  void v5[3] = a2;
  void v7[5] = (char *)this + 144;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  _DWORD v7[2] = ___ZN20QMIDataContextIPBase18shutdownAnbrHandleEj_block_invoke;
  void v7[3] = &__block_descriptor_tmp_240_0;
  void v7[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_23;
  aBlock[3] = &unk_26460FCF0;
  aBlock[4] = v7;
  int v6 = _Block_copy(aBlock);
  uint64_t v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    int v6 = v11;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2224AD0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataContextIPBase18shutdownAnbrHandleEj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "ANBRDeregisterFilter failed: %s (%d)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t QMIDataContextIPBase::getAnbr(QMIDataContextIPBase *this, int a2)
{
  if (!*((unsigned char *)this + 856)) {
    return 0;
  }
  if (a2) {
    return *((unsigned int *)this + 211);
  }
  return *((unsigned int *)this + 212);
}

uint64_t QMIDataContextIPBase::getAnbrActivationState(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 160)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 856) || !*(unsigned char *)(a1 + 853))
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#N No prohibited timer information available", v6, 2u);
    }
    std::function<void ()(BOOL,BOOL)>::operator()(a2, 0, 1);
    return 0;
  }
  uint64_t v3 = 1;
  std::function<void ()(BOOL,BOOL)>::operator()(a2, *(unsigned char *)(a1 + 852), 1);
  return v3;
}

void ___ZN20QMIDataContextIPBase24queryAnbrActivationStateEj_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 1))
  {
    uint64_t v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = qmi::asString();
      int v20 = *((_DWORD *)this + 1);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v23 = 1024;
      int v24 = v20;
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "GetANBRProhibitTimerInfo failed: %s (%d)", buf, 0x12u);
    }
    return;
  }
  int v5 = *(_DWORD *)(a1 + 40);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue) {
    return;
  }
  uint64_t v8 = TlvValue;
  int v9 = v7;
  *(void *)long long buf = TlvValue;
  unint64_t v10 = tlv::parseV<wds::tlv::ProhibitTimerInfo>((unint64_t *)buf, v7);
  if (!*(void *)buf)
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v8, v9);
    return;
  }
  if (!*(unsigned char *)(v3 + 856))
  {
    uint64_t v17 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)int v21 = 0;
    long long v18 = "#E GetANBRProhibitTimerInfo: empty filter";
    goto LABEL_27;
  }
  if (*(_DWORD *)(v3 + 840) != v5)
  {
    uint64_t v17 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)int v21 = 0;
    long long v18 = "#E GetANBRProhibitTimerInfo: wrong handle";
LABEL_27:
    _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, v18, v21, 2u);
    return;
  }
  if ((_BYTE)v10) {
    BOOL v11 = HIDWORD(v10) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  __int16 v12 = !v11;
  *(_WORD *)(v3 + 852) = v12 | 0x100;
  long long v13 = *(std::__shared_weak_count **)(v3 + 104);
  if (v13)
  {
    int v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)(v3 + 96);
      if (v16)
      {
        if (!*(unsigned char *)(v3 + 856) || !*(unsigned char *)(v3 + 853)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void))(*(void *)v16 + 104))(v16, *(unsigned __int8 *)(v3 + 852));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_2224AD4DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataContextIPBase::setCoalescing(capabilities::ipc *a1, __int16 a2)
{
  if (*((void *)a1 + 20) && capabilities::ipc::supportsCoalescing(a1))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v13 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    uint64_t v4 = (const void **)__p[1];
    if (__p[1] != (void *)v13)
    {
      while (*((unsigned char *)*v4 + 8) != 1)
      {
        if (++v4 == (const void **)v13) {
          goto LABEL_10;
        }
      }
    }
    if (v4 == (const void **)v13) {
LABEL_10:
    }
      operator new();
    if (!v5) {
      __cxa_bad_cast();
    }
    *(_WORD *)(v5 + 9) = a2;
    void v7[5] = (char *)a1 + 144;
    uint64_t v8 = QMIServiceMsg::create();
    int v9 = 25000;
    uint64_t v10 = 0;
    BOOL v11 = 0;
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    _DWORD v7[2] = ___ZNK20QMIDataContextIPBase13setCoalescingENSt3__14pairIbbEE_block_invoke;
    void v7[3] = &__block_descriptor_tmp_242_0;
    void v7[4] = a1;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds13SetCoalescing8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_26460FE20;
    aBlock[4] = v7;
    int v6 = _Block_copy(aBlock);
    BOOL v11 = v6;
    if (v8)
    {
      qmi::Client::send();
      int v6 = v11;
    }
    if (v6) {
      _Block_release(v6);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
}

void sub_2224AD7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZNK20QMIDataContextIPBase13setCoalescingENSt3__14pairIbbEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "SetCoalescing failed: %s (%d)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t QMIDataContextIPBase::queryAnbrBitrate(uint64_t a1, int a2, int a3, uint64_t a4)
{
  void v22[4] = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 160) || !*(unsigned char *)(a1 + 856)) {
    return 0;
  }
  int v8 = *(_DWORD *)(a1 + 840);
  *(_OWORD *)std::string __p = 0u;
  long long v19 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  int v9 = (const void **)__p[1];
  if (__p[1] != (void *)v19)
  {
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v19) {
        goto LABEL_11;
      }
    }
  }
  if (v9 == (const void **)v19) {
LABEL_11:
  }
    operator new();
  if (!v11) {
    __cxa_bad_cast();
  }
  v11[20] = 0;
  if (a3) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
  *((_DWORD *)v11 + 3) = v8;
  *((_DWORD *)v11 + 4) = v12;
  long long v13 = (const void **)__p[1];
  if (__p[1] != (void *)v19)
  {
    while (*((unsigned __int8 *)*v13 + 8) != 193)
    {
      if (++v13 == (const void **)v19) {
        goto LABEL_22;
      }
    }
  }
  if (v13 == (const void **)v19) {
LABEL_22:
  }
    operator new();
  if (!v14) {
    __cxa_bad_cast();
  }
  v14[3] = a2;
  uint64_t v16 = QMIServiceMsg::create();
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 1174405120;
  void v21[2] = ___ZNK20QMIDataContextIPBase16queryAnbrBitrateEjbNSt3__18functionIFvbEEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_243;
  void v21[4] = a1;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v22, a4);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16ANBRQueryBitrate8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460FE48;
  aBlock[4] = v21;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v17 = v15;
  if (v16)
  {
    qmi::Client::send();
    uint64_t v15 = v17;
  }
  if (v15) {
    _Block_release(v15);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return 1;
}

void sub_2224ADDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK20QMIDataContextIPBase16queryAnbrBitrateEjbNSt3__18functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      int v9 = 136315394;
      uint64_t v10 = v7;
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "ANBRQueryBitrate failed: %s (%d)", (uint8_t *)&v9, 0x12u);
    }
    return std::function<void ()(BOOL)>::operator()(a1 + 40, 0);
  }
  else
  {
    uint64_t v6 = a1 + 40;
    return std::function<void ()(BOOL)>::operator()(v6, 1);
  }
}

void QMIDataContextIPBase::updateAnbrFilters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 160)) {
    return;
  }
  if (*(unsigned char *)(a2 + 160)) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(a3 + 160))
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    memset(v40, 0, sizeof(v40));
    __n128 v37 = 0u;
    long long v38 = 0u;
    long long v11 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    long long v36 = v11;
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)&v37, a3 + 32);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)&v40[0].n128_i8[8], a3 + 88);
    *(void *)&long long v43 = *(void *)(a3 + 144);
    *(void *)((char *)&v43 + 6) = *(void *)(a3 + 150);
    if ((v40[0].n128_u8[0] != 0) != (BYTE8(v42) != 0))
    {
      if (v40[0].n128_u8[0])
      {
        v40[0].n128_u8[8] = 0;
        LOBYTE(v41) = 0;
        if (BYTE8(v38))
        {
          *(__n128 *)((char *)v40 + 8) = v37;
          v40[1].n128_u64[1] = v38;
          *(void *)&long long v38 = 0;
          __n128 v37 = 0uLL;
          LOBYTE(v41) = 1;
        }
        *((void *)&v41 + 1) = v39;
        LOBYTE(v42) = BYTE8(v39);
        BYTE8(v42) = 1;
        if (BYTE8(v38) && SBYTE7(v38) < 0) {
          operator delete((void *)v37.n128_u64[0]);
        }
        v40[0].n128_u8[0] = 0;
      }
      else
      {
        v37.n128_u8[0] = 0;
        BYTE8(v38) = 0;
        if ((_BYTE)v41)
        {
          __n128 v37 = *(__n128 *)((char *)v40 + 8);
          *(void *)&long long v38 = v40[1].n128_u64[1];
          memset(&v40[0].n128_i8[8], 0, 24);
          BYTE8(v38) = 1;
        }
        *(void *)&long long v39 = *((void *)&v41 + 1);
        BYTE8(v39) = v42;
        v40[0].n128_u8[0] = 1;
        if (BYTE8(v42))
        {
          if ((_BYTE)v41 && v40[1].n128_i8[15] < 0) {
            operator delete((void *)v40[0].n128_u64[1]);
          }
          BYTE8(v42) = 0;
        }
      }
    }
    else if (v40[0].n128_u8[0])
    {
      long long v33 = 0u;
      long long v34 = 0u;
      *(_OWORD *)CFTypeID v32 = 0u;
      if (BYTE8(v38))
      {
        *(__n128 *)CFTypeID v32 = v37;
        *(void *)&long long v33 = v38;
        *(void *)&long long v38 = 0;
        __n128 v37 = 0uLL;
        BYTE8(v33) = 1;
      }
      *(void *)&long long v34 = v39;
      BYTE8(v34) = BYTE8(v39);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v37, (__n128 *)&v40[0].n128_i8[8]);
      *(void *)&long long v39 = *((void *)&v41 + 1);
      BYTE8(v39) = v42;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v40[0].n128_i64[1], (__n128 *)v32);
      *((void *)&v41 + 1) = v34;
      LOBYTE(v42) = BYTE8(v34);
      if (BYTE8(v33) && SBYTE7(v33) < 0) {
        operator delete(v32[0]);
      }
    }
    if (*(unsigned char *)(a2 + 160))
    {
      long long v15 = v36;
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_OWORD *)(a2 + 16) = v15;
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(a2 + 32, &v37);
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(a2 + 88, (__n128 *)&v40[0].n128_i8[8]);
      *(void *)(a2 + 144) = v43;
      *(void *)(a2 + 150) = *(void *)((char *)&v43 + 6);
    }
    else
    {
      std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(a2, (uint64_t)buf);
      *(unsigned char *)(a2 + 160) = 1;
    }
    if (BYTE8(v42) && (_BYTE)v41 && v40[1].n128_i8[15] < 0) {
      operator delete((void *)v40[0].n128_u64[1]);
    }
    if (v40[0].n128_u8[0] && BYTE8(v38) && SBYTE7(v38) < 0) {
      operator delete((void *)v37.n128_u64[0]);
    }
LABEL_3:
    buf[0] = 0;
    char v44 = 0;
    std::__optional_storage_base<DataIPFilter,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilter,false>>(a3, (uint64_t)buf);
    std::__optional_destruct_base<DataIPFilter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  }
  int v6 = *(unsigned __int8 *)(a2 + 160);
  if (*(unsigned char *)(a2 + 160))
  {
    DataIPFilter::adjust((DataIPFilter *)a2);
    int v6 = *(unsigned __int8 *)(a2 + 160);
  }
  if (*(unsigned char *)(a1 + 856))
  {
    if (v6)
    {
      if (!DataIPFilter::equivalent((DataIPFilter *)a2, (const DataIPFilter *)(a1 + 680), 0))
      {
        if (!*(unsigned char *)(a1 + 856)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        QMIDataContextIPBase::shutdownAnbrHandle((QMIDataContextIPBase *)a1, *(_DWORD *)(a1 + 840));
        uint64_t v7 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          if (!*(unsigned char *)(a1 + 856)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          uint64_t v8 = *(unsigned int *)(a1 + 840);
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v8;
          _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I ANBRFilter: handle %lu removed (2)", buf, 0xCu);
        }
        buf[0] = 0;
        char v45 = 0;
        std::__optional_storage_base<AnbrFilterInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AnbrFilterInfo,false>>(a1 + 680, (uint64_t)buf);
        std::__optional_destruct_base<AnbrFilterInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        if (!*(unsigned char *)(a2 + 160)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        long long v9 = *(_OWORD *)(a2 + 16);
        v24[0] = *(_OWORD *)a2;
        v24[1] = v9;
        std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v25, a2 + 32);
        std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&__p, a2 + 88);
        v31[0] = *(void *)(a2 + 144);
        *(void *)((char *)v31 + 6) = *(void *)(a2 + 150);
        QMIDataContextIPBase::setAnbrFilter((void *)a1, v24);
        if (v30 && v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v27 && v26 && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v10 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_40:
          operator delete(v10);
        }
      }
    }
    else
    {
      QMIDataContextIPBase::shutdownAnbrHandle((QMIDataContextIPBase *)a1, (int *)(a1 + 680));
      uint64_t v13 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(unsigned char *)(a1 + 856)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v14 = *(unsigned int *)(a1 + 840);
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I ANBRFilter: handle %lu removed (3)", buf, 0xCu);
      }
      buf[0] = 0;
      char v45 = 0;
      std::__optional_storage_base<AnbrFilterInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AnbrFilterInfo,false>>(a1 + 680, (uint64_t)buf);
      std::__optional_destruct_base<AnbrFilterInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
    }
  }
  else if (v6)
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v12;
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v17, a2 + 32);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v20, a2 + 88);
    v23[0] = *(void *)(a2 + 144);
    *(void *)((char *)v23 + 6) = *(void *)(a2 + 150);
    QMIDataContextIPBase::setAnbrFilter((void *)a1, v16);
    if (v22 && v21 && SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (v19 && v18 && SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)v17.__r_.__value_.__r.__words[0];
      goto LABEL_40;
    }
  }
}

void sub_2224AE4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,char a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPBase::setAnbrFilter(void *a1, long long *a2)
{
  v63[2] = *MEMORY[0x263EF8340];
  if (!a1[20])
  {
    uint64_t v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "setAnbrFilter after client is deleted", buf, 2u);
    }
    return;
  }
  DataIPFilter::adjust((DataIPFilter *)a2);
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((_DWORD *)a2 + 7);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I setting filter for family: %d", buf, 8u);
  }
  int v6 = (*(uint64_t (**)(void *))(*a1 + 232))(a1);
  int v7 = *((_DWORD *)a2 + 7);
  if (v6 == 1)
  {
    if (v7 != 4) {
      return;
    }
  }
  else if (v7 != 41)
  {
    return;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v52 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  if ((*(unsigned int (**)(void *))(*a1 + 232))(a1) == 1)
  {
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::IpType>((uint64_t)__p) = 4;
    if (*((unsigned char *)a2 + 80) && *((unsigned char *)a2 + 56))
    {
      memset(buf, 0, sizeof(buf));
      *(void *)long long v54 = 0;
      MEMORY[0x223C99180](buf, a2 + 2);
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v46, (const CSIPacketAddress *)buf);
      long long v9 = (const void **)__p[1];
      if (__p[1] != (void *)v52)
      {
        while (*((unsigned char *)*v9 + 8) != 17)
        {
          if (++v9 == (const void **)v52) {
            goto LABEL_29;
          }
        }
      }
      if (v9 == (const void **)v52) {
LABEL_29:
      }
        operator new();
      if (!v12) {
        __cxa_bad_cast();
      }
      uint64_t v12[3] = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)&v46);
    }
    if (*((unsigned char *)a2 + 136) && *((unsigned char *)a2 + 112))
    {
      memset(buf, 0, sizeof(buf));
      *(void *)long long v54 = 0;
      MEMORY[0x223C99180](buf, (char *)a2 + 88);
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v46, (const CSIPacketAddress *)buf);
      long long v15 = (const void **)__p[1];
      if (__p[1] != (void *)v52)
      {
        while (*((unsigned char *)*v15 + 8) != 19)
        {
          if (++v15 == (const void **)v52) {
            goto LABEL_40;
          }
        }
      }
      if (v15 == (const void **)v52) {
LABEL_40:
      }
        operator new();
      if (!v16) {
        __cxa_bad_cast();
      }
      void v16[3] = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)&v46);
    }
  }
  else
  {
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::IpType>((uint64_t)__p) = 6;
    if (*((unsigned char *)a2 + 80) && *((unsigned char *)a2 + 56))
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      MEMORY[0x223C99180](&v46, a2 + 2);
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)buf, (const CSIPacketAddress *)&v46);
      long long v10 = a2[1];
      *(_OWORD *)&v54[8] = *a2;
      long long v55 = v10;
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v56, (uint64_t)(a2 + 2));
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v59, (uint64_t)a2 + 88);
      v63[0] = *((void *)a2 + 18);
      *(void *)((char *)v63 + 6) = *(void *)((char *)a2 + 150);
      long long v11 = (const void **)__p[1];
      if (__p[1] != (void *)v52)
      {
        while (*((unsigned char *)*v11 + 8) != 18)
        {
          if (++v11 == (const void **)v52) {
            goto LABEL_30;
          }
        }
      }
      if (v11 == (const void **)v52) {
LABEL_30:
      }
        operator new();
      if (!v13) {
        __cxa_bad_cast();
      }
      uint64_t v14 = (char *)(v13 + 9);
      CSIPacketAddress::toIPv6((CSIPacketAddress *)buf, v13 + 9);
      if (!v58.__r_.__value_.__s.__data_[16]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (v58.__r_.__value_.__s.__data_[1]) {
        std::string::value_type v17 = v58.__r_.__value_.__s.__data_[0];
      }
      else {
        std::string::value_type v17 = 0x80;
      }
      uint8_t v14[16] = v17;
      if (v62 && v60 && SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (v58.__r_.__value_.__s.__data_[16] && v57 && SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
    }
    if (*((unsigned char *)a2 + 136) && *((unsigned char *)a2 + 112))
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      MEMORY[0x223C99180](&v46, (char *)a2 + 88);
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)buf, (const CSIPacketAddress *)&v46);
      long long v18 = a2[1];
      *(_OWORD *)&v54[8] = *a2;
      long long v55 = v18;
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v56, (uint64_t)(a2 + 2));
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v59, (uint64_t)a2 + 88);
      v63[0] = *((void *)a2 + 18);
      *(void *)((char *)v63 + 6) = *(void *)((char *)a2 + 150);
      char v19 = (const void **)__p[1];
      if (__p[1] != (void *)v52)
      {
        while (*((unsigned char *)*v19 + 8) != 20)
        {
          if (++v19 == (const void **)v52) {
            goto LABEL_62;
          }
        }
      }
      if (v19 == (const void **)v52) {
LABEL_62:
      }
        operator new();
      if (!v20) {
        __cxa_bad_cast();
      }
      char v21 = (char *)(v20 + 9);
      CSIPacketAddress::toIPv6((CSIPacketAddress *)buf, v20 + 9);
      if (!v62) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (BYTE1(v61[0])) {
        char v22 = v61[0];
      }
      else {
        char v22 = 0x80;
      }
      uint8_t v21[16] = v22;
      if (v62 && v60 && SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (v58.__r_.__value_.__s.__data_[16] && v57 && SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
    }
  }
  int v23 = *((_DWORD *)a2 + 6);
  if (v23)
  {
    if (v23 == 17)
    {
      int v24 = qmi::MutableMessageBase::getTLV<wds::tlv::IpProtoType>((uint64_t)__p);
      int v25 = 2;
    }
    else
    {
      if (v23 != 6)
      {
        char v29 = a1[5];
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v23;
          _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, "#E Wrong ipProtocol: %d", buf, 8u);
        }
        goto LABEL_82;
      }
      int v24 = qmi::MutableMessageBase::getTLV<wds::tlv::IpProtoType>((uint64_t)__p);
      int v25 = 1;
    }
  }
  else
  {
    int v24 = qmi::MutableMessageBase::getTLV<wds::tlv::IpProtoType>((uint64_t)__p);
    int v25 = 3;
  }
  *(_DWORD *)int v24 = v25;
LABEL_82:
  if (*((unsigned char *)a2 + 80) && *((unsigned char *)a2 + 68))
  {
    long long v26 = a2[1];
    *(_OWORD *)long long buf = *a2;
    *(_OWORD *)long long v54 = v26;
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)&v54[16], (uint64_t)(a2 + 2));
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v58, (uint64_t)a2 + 88);
    v61[0] = *((void *)a2 + 18);
    *(void *)((char *)v61 + 6) = *(void *)((char *)a2 + 150);
    char v27 = (const void **)__p[1];
    if (__p[1] != (void *)v52)
    {
      while (*((unsigned char *)*v27 + 8) != 22)
      {
        if (++v27 == (const void **)v52) {
          goto LABEL_93;
        }
      }
    }
    if (v27 == (const void **)v52) {
LABEL_93:
    }
      operator new();
    if (!v28) {
      __cxa_bad_cast();
    }
    if (!v57 || !v56.__r_.__value_.__s.__data_[12]) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    void v28[5] = WORD1(v56.__r_.__value_.__r.__words[1]);
    int v30 = 1;
    if (v60 && v59.__r_.__value_.__s.__data_[0] && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v58.__r_.__value_.__l.__data_);
      int v30 = v57;
    }
    if (v30 && v56.__r_.__value_.__s.__data_[0] && SHIBYTE(v55) < 0) {
      operator delete(*(void **)&v54[16]);
    }
  }
  if (*((unsigned char *)a2 + 136) && *((unsigned char *)a2 + 124))
  {
    long long v31 = a2[1];
    *(_OWORD *)long long buf = *a2;
    *(_OWORD *)long long v54 = v31;
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)&v54[16], (uint64_t)(a2 + 2));
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v58, (uint64_t)a2 + 88);
    v61[0] = *((void *)a2 + 18);
    *(void *)((char *)v61 + 6) = *(void *)((char *)a2 + 150);
    CFTypeID v32 = (const void **)__p[1];
    if (__p[1] != (void *)v52)
    {
      while (*((unsigned char *)*v32 + 8) != 23)
      {
        if (++v32 == (const void **)v52) {
          goto LABEL_113;
        }
      }
    }
    if (v32 == (const void **)v52) {
LABEL_113:
    }
      operator new();
    if (!v33) {
      __cxa_bad_cast();
    }
    if (!v60 || !v59.__r_.__value_.__s.__data_[12]) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    v33[5] = WORD1(v59.__r_.__value_.__r.__words[1]);
    if (v59.__r_.__value_.__s.__data_[0] && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (v57 && v56.__r_.__value_.__s.__data_[0] && SHIBYTE(v55) < 0) {
      operator delete(*(void **)&v54[16]);
    }
  }
  uint64_t v46 = a1 + 18;
  uint64_t v47 = QMIServiceMsg::create();
  LODWORD(v48) = 25000;
  uint64_t v49 = 0;
  uint64_t aBlock = 0;
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 1174405120;
  long long v34 = a2[1];
  long long v37 = *a2;
  void v36[2] = ___ZN20QMIDataContextIPBase13setAnbrFilterE12DataIPFilterb_block_invoke;
  v36[3] = &__block_descriptor_tmp_244;
  v36[4] = a1;
  long long v38 = v34;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v39, (uint64_t)(a2 + 2));
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v42, (uint64_t)a2 + 88);
  v45[0] = *((void *)a2 + 18);
  *(void *)((char *)v45 + 6) = *(void *)((char *)a2 + 150);
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)long long v54 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18ANBRRegisterFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  *(void *)&v54[8] = &unk_26460FE70;
  *(void *)&v54[16] = v36;
  uint64_t v35 = _Block_copy(buf);
  uint64_t aBlock = v35;
  if (v47)
  {
    qmi::Client::send();
    uint64_t v35 = aBlock;
  }
  if (v35) {
    _Block_release(v35);
  }
  if (v44 && v43 && SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v41 && v40 && SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2224AF630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (*(unsigned char *)(v45 - 152) && *(unsigned char *)(v45 - 176) && *(char *)(v45 - 177) < 0) {
    operator delete(*(void **)(v45 - 200));
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a45);
  _Unwind_Resume(a1);
}

void sub_2224AF790(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x2224AF788);
}

void sub_2224AF7A0()
{
}

void ___ZN20QMIDataContextIPBase13setAnbrFilterE12DataIPFilterb_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 1))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *((_DWORD *)a2 + 1);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "ANBRRegisterFilter failed: %s (%d)", buf, 0x12u);
    }
  }
  else
  {
    char v22 = *(QMIDataContextIPBase **)(a1 + 32);
    long long v23 = *(_OWORD *)(a1 + 40);
    long long v24 = *(_OWORD *)(a1 + 56);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v25, a1 + 72);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v28, a1 + 128);
    v31[0] = *(void *)(a1 + 184);
    *(void *)((char *)v31 + 6) = *(void *)(a1 + 190);
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v9 = TlvValue;
    if (TlvValue)
    {
      int v10 = v8;
      uint64_t v32 = TlvValue;
      unsigned int v11 = tlv::parseV<wds::tlv::ResultHandle>((unint64_t *)&v32, v8);
      if (v32)
      {
        unsigned int v12 = v11;
        uint64_t v13 = (_OWORD *)((char *)v22 + 680);
        if (*((unsigned char *)v22 + 856))
        {
          int v14 = *((_DWORD *)v22 + 210);
          if (v14)
          {
            if (v14 != v11)
            {
              QMIDataContextIPBase::shutdownAnbrHandle(v22, v14);
              long long v15 = *((void *)v22 + 5);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                if (!*((unsigned char *)v22 + 856)) {
                  std::__throw_bad_optional_access[abi:ne180100]();
                }
                uint64_t v16 = *((unsigned int *)v22 + 210);
                *(_DWORD *)long long buf = 134217984;
                *(void *)&uint8_t buf[4] = v16;
                _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I ANBRFilter: handle %lu removed (4)", buf, 0xCu);
              }
            }
          }
          buf[0] = 0;
          char v59 = 0;
          std::__optional_storage_base<AnbrFilterInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AnbrFilterInfo,false>>((uint64_t)v13, (uint64_t)buf);
          std::__optional_destruct_base<AnbrFilterInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        }
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        *(_OWORD *)int v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        *(_OWORD *)uint64_t v50 = 0u;
        memset(buf, 0, sizeof(buf));
        long long v33 = v23;
        long long v34 = v24;
        std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v35, (uint64_t)&v25);
        std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&__p, (uint64_t)&v28);
        v41[0] = v31[0];
        *(void *)((char *)v41 + 6) = *(void *)((char *)v31 + 6);
        *(_OWORD *)long long buf = v33;
        *(_OWORD *)&uint8_t buf[16] = v34;
        std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)v50, (uint64_t)&v35);
        std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)&v53[1], (uint64_t)&__p);
        *(void *)&long long v57 = v41[0];
        *(void *)((char *)&v57 + 6) = *(void *)((char *)v41 + 6);
        LODWORD(v58) = v12;
        *(void *)((char *)&v58 + 4) = 0;
        WORD6(v58) = 0;
        if (v40 && v39 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v37 && v36 && SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (*((unsigned char *)v22 + 856))
        {
          long long v17 = *(_OWORD *)&buf[16];
          *uint64_t v13 = *(_OWORD *)buf;
          *(_OWORD *)((char *)v22 + 696) = v17;
          std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>((uint64_t)v22 + 712, (__n128 *)v50);
          std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>((uint64_t)v22 + 768, (__n128 *)&v53[1]);
          *((void *)v22 + 103) = v57;
          *(void *)((char *)v22 + 830) = *(void *)((char *)&v57 + 6);
          *((void *)v22 + 105) = v58;
          *(void *)((char *)v22 + 846) = *(void *)((char *)&v58 + 6);
        }
        else
        {
          std::construct_at[abi:ne180100]<AnbrFilterInfo,AnbrFilterInfo,AnbrFilterInfo*>((uint64_t)v13, (uint64_t)buf);
          *((unsigned char *)v22 + 856) = 1;
        }
        long long v18 = *((void *)v22 + 5);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v60) = 134217984;
          *(void *)((char *)&v60 + 4) = v12;
          _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I ANBRFilter: handle %lu added", (uint8_t *)&v60, 0xCu);
        }
        if (*((void *)v22 + 20))
        {
          *(_OWORD *)uint64_t v46 = 0u;
          long long v47 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v46);
          char v19 = (const void **)v46[1];
          if (v46[1] != (void *)v47)
          {
            while (*((unsigned char *)*v19 + 8) != 1)
            {
              if (++v19 == (const void **)v47) {
                goto LABEL_35;
              }
            }
          }
          if (v19 == (const void **)v47) {
LABEL_35:
          }
            operator new();
          if (!v20) {
            __cxa_bad_cast();
          }
          v20[3] = v12;
          void v41[3] = (char *)v22 + 144;
          uint64_t v42 = QMIServiceMsg::create();
          int v43 = 25000;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          *(void *)&long long v60 = MEMORY[0x263EF8330];
          *((void *)&v60 + 1) = 0x40000000;
          __int16 v61 = ___ZN20QMIDataContextIPBase24queryAnbrActivationStateEj_block_invoke;
          char v62 = &__block_descriptor_tmp_241;
          __int16 v63 = v22;
          unsigned int v64 = v12;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds24GetANBRProhibitTimerInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          aBlock[3] = &unk_26460FDF8;
          aBlock[4] = &v60;
          char v21 = _Block_copy(aBlock);
          uint64_t v45 = v21;
          if (v42)
          {
            qmi::Client::send();
            char v21 = v45;
          }
          if (v21) {
            _Block_release(v21);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v46);
        }
        if (BYTE8(v56) && (_BYTE)v55 && SHIBYTE(v54) < 0) {
          operator delete(v53[1]);
        }
        if (LOBYTE(v53[0]) && BYTE8(v51) && SBYTE7(v51) < 0) {
          operator delete(v50[0]);
        }
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v9, v10);
      }
    }
    if (v30 && v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v27 && v26 && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2224AFE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a58);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a63);
  if (LOBYTE(STACK[0x258]) && LOBYTE(STACK[0x240]) && SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (LOBYTE(STACK[0x220]) && LOBYTE(STACK[0x208]) && SLOBYTE(STACK[0x207]) < 0) {
    operator delete(*v63);
  }
  if (a33 && a30 && a29 < 0) {
    operator delete(a24);
  }
  if (a23 && a20 && a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPBase::dumpState(QMIDataContextIPBase *this)
{
  uint64_t v168 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 72);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s:", buf, 0xCu);
  }
  uint64_t v167 = 0;
  long long v165 = 0u;
  memset(v166, 0, sizeof(v166));
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v160 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"fChannelState=", 14);
  uint64_t v6 = *((int *)this + 158);
  if (v6 > 4) {
    int v7 = "Unknown QMIContextCommunicationChannelState";
  }
  else {
    int v7 = off_264610070[v6];
  }
  size_t v8 = strlen(v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  unsigned int v11 = *((void *)this + 5);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    unsigned int v12 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v12;
    _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"fDataContextIPState=", 20);
  long long v15 = (const char *)asString();
  size_t v16 = strlen(v15);
  long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
  char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"fIpFamilyType=", 14);
  std::string v20 = (const char *)asString();
  size_t v21 = strlen(v20);
  char v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  long long v23 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  long long v24 = *((void *)this + 5);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    std::string v25 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v25;
    _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  char v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"fLock=", 6);
  std::string v28 = (std::__shared_weak_count *)*((void *)this + 71);
  uint64_t v152 = *((void *)this + 70);
  v153 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  asString((uint64_t)&v152, v156);
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    locale = v156;
  }
  else {
    locale = v156[0].__locale_;
  }
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    uint64_t locale_high = HIBYTE(v156[2].__locale_);
  }
  else {
    uint64_t locale_high = (uint64_t)v156[1].__locale_;
  }
  long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, locale_high);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
  uint64_t v32 = std::locale::use_facet((const std::locale *)&v154, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale((std::locale *)&v154);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  if (v153) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v153);
  }
  long long v33 = *((void *)this + 5);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    long long v34 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v34;
    _os_log_impl(&dword_22231A000, v33, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  std::string v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  char v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"fStopRequestSent=", 17);
  char v37 = (const char *)asStringBool();
  size_t v38 = strlen(v37);
  char v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
  char v40 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  char v41 = *((void *)this + 5);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    if (SHIBYTE(v156[2].__locale_) >= 0) {
      uint64_t v42 = v156;
    }
    else {
      uint64_t v42 = v156[0].__locale_;
    }
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v42;
    _os_log_impl(&dword_22231A000, v41, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
    char v41 = *((void *)this + 5);
  }
  int v43 = *((unsigned __int8 *)this + 856);
  BOOL v44 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
  if (v43)
  {
    if (!v44) {
      goto LABEL_55;
    }
    uint64_t v45 = (std::locale::__imp *)*((unsigned int *)this + 210);
    int v46 = *((_DWORD *)this + 211);
    int v47 = *((_DWORD *)this + 212);
    uint64_t v48 = asStringBool();
    LODWORD(v156[0].__locale_) = 134218754;
    *(std::locale::__imp **)((char *)&v156[0].__locale_ + 4) = v45;
    WORD2(v156[1].__locale_) = 1024;
    *(_DWORD *)((char *)&v156[1].__locale_ + 6) = v46;
    WORD1(v156[2].__locale_) = 1024;
    HIDWORD(v156[2].__locale_) = v47;
    __int16 v157 = 2080;
    uint64_t v158 = v48;
    uint64_t v49 = "#I DATA:: fAnbrFilter: handle=%lu, bitrateUplink=%d, bitrateDownlink=%d, configured=%s";
    uint64_t v50 = v41;
    uint32_t v51 = 34;
  }
  else
  {
    if (!v44) {
      goto LABEL_55;
    }
    LOWORD(v156[0].__locale_) = 0;
    uint64_t v49 = "#I DATA:: fAnbrFilter empty";
    uint64_t v50 = v41;
    uint32_t v51 = 2;
  }
  _os_log_impl(&dword_22231A000, v50, OS_LOG_TYPE_DEFAULT, v49, (uint8_t *)v156, v51);
LABEL_55:
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"fPendingChannelInitialization=", 30);
  long long v54 = (const char *)asStringBool();
  size_t v55 = strlen(v54);
  long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
  std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24)));
  long long v57 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  long long v58 = *((void *)this + 5);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    char v59 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v59;
    _os_log_impl(&dword_22231A000, v58, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"fActivateTxId=", 14);
  __int16 v61 = (void *)std::ostream::operator<<();
  char v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"fPacketDataHandle=", 18);
  __int16 v63 = (void *)std::ostream::operator<<();
  unsigned int v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"fHandoverActivation=", 20);
  uint64_t v65 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
  uint64_t v66 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  int v67 = *((void *)this + 5);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    uint64_t v68 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v68;
    _os_log_impl(&dword_22231A000, v67, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"fAddress=", 9);
  CSIPacketAddress::operator std::string();
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    uint64_t v71 = v156;
  }
  else {
    uint64_t v71 = v156[0].__locale_;
  }
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    uint64_t v72 = HIBYTE(v156[2].__locale_);
  }
  else {
    uint64_t v72 = (uint64_t)v156[1].__locale_;
  }
  CFBooleanRef v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
  std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(void *)(*v73 - 24)));
  uint64_t v74 = std::locale::use_facet((const std::locale *)&v154, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
  std::locale::~locale((std::locale *)&v154);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  uint64_t v75 = *((void *)this + 26);
  uint64_t v76 = *((void *)this + 27);
  if (v75 != v76)
  {
    char v77 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t dns = ", 8);
      uint64_t v78 = (void *)operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(*v78 - 24)));
      char v79 = std::locale::use_facet(v156, v77);
      ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
      std::locale::~locale(v156);
      std::ostream::put();
      std::ostream::flush();
      v75 += 24;
    }
    while (v75 != v76);
  }
  char v80 = *((void *)this + 5);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    __int16 v81 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v81;
    _os_log_impl(&dword_22231A000, v80, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  __int16 v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  __int16 v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"fIPv4ConfigTimer=", 17);
  __int16 v84 = (const char *)asStringBool();
  size_t v85 = strlen(v84);
  int v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
  long long v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", ", 2);
  long long v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"fIPv4ConfigResume=", 18);
  uint64_t v89 = (const char *)asStringBool();
  size_t v90 = strlen(v89);
  int v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
  std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
  uint64_t v92 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  long long v93 = *((void *)this + 5);
  if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    uint64_t v94 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v94;
    _os_log_impl(&dword_22231A000, v93, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  int v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"fAppId=", 7);
  uint64_t v96 = (void *)std::ostream::operator<<();
  int v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)", ", 2);
  uint64_t v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"fIPv6ConfigTimer=", 17);
  uint64_t v99 = (const char *)asStringBool();
  size_t v100 = strlen(v99);
  uint64_t v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
  dispatch_object_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)", ", 2);
  uint64_t v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"fIPv6ConfigResume=", 18);
  uint32_t v104 = (const char *)asStringBool();
  size_t v105 = strlen(v104);
  int v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v104, v105);
  std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(void *)(*v106 - 24)));
  int v107 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  int v108 = *((void *)this + 5);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    uint64_t v109 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v109;
    _os_log_impl(&dword_22231A000, v108, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  uint64_t v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"fIPv6DadRequired=", 17);
  uint64_t v111 = (void *)std::ostream::operator<<();
  int v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)", ", 2);
  char v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"fIPv6ConfigAddress=", 19);
  CSIPacketAddress::operator std::string();
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    char v114 = v156;
  }
  else {
    char v114 = v156[0].__locale_;
  }
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    uint64_t v115 = HIBYTE(v156[2].__locale_);
  }
  else {
    uint64_t v115 = (uint64_t)v156[1].__locale_;
  }
  uint64_t v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v114, v115);
  std::ios_base::getloc((const std::ios_base *)((char *)v116 + *(void *)(*v116 - 24)));
  BOOL v117 = std::locale::use_facet((const std::locale *)&v154, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v117->__vftable[2].~facet_0)(v117, 10);
  std::locale::~locale((std::locale *)&v154);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  int v118 = *((void *)this + 5);
  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    uint64_t v119 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v119;
    _os_log_impl(&dword_22231A000, v118, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\tfDadAddress(", 13);
  for (uint64_t i = (const CSIPacketAddress *)*((void *)this + 39);
        i != *((const CSIPacketAddress **)this + 40);
        uint64_t i = (const CSIPacketAddress *)((char *)i + 24))
  {
    if (i != *((const CSIPacketAddress **)this + 39)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)", ", 2);
    }
    memset(v156, 0, sizeof(v156));
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v156, i);
    CSIPacketAddress::operator std::string();
    if ((v155 & 0x80u) == 0) {
      int v121 = &v154;
    }
    else {
      int v121 = (long long *)v154;
    }
    if ((v155 & 0x80u) == 0) {
      uint64_t v122 = v155;
    }
    else {
      uint64_t v122 = *((void *)&v154 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v121, v122);
    if ((char)v155 < 0) {
      operator delete((void *)v154);
    }
  }
  unsigned int v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v123 + *(void *)(*v123 - 24)));
  char v124 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  unsigned int v125 = *((void *)this + 5);
  if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    unsigned int v126 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v126;
    _os_log_impl(&dword_22231A000, v125, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  uint64_t v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  unsigned int v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"fAllowedIpFamily=", 17);
  int v129 = (const char *)asString();
  size_t v130 = strlen(v129);
  uint64_t v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)v129, v130);
  uint64_t v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"fHandoverDoubleTapAttempt=", 26);
  long long v133 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v133 + *(void *)(*v133 - 24)));
  uint64_t v134 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v134->__vftable[2].~facet_0)(v134, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v135 = *((void *)this + 5);
  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    char v136 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v136;
    _os_log_impl(&dword_22231A000, v135, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\tfProxyAddrs(", 13);
  for (uint64_t j = *((void *)this + 29); j != *((void *)this + 30); j += 24)
  {
    if (j != *((void *)this + 29)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)", ", 2);
    }
    int v138 = *(char *)(j + 23);
    if (v138 >= 0) {
      uint64_t v139 = j;
    }
    else {
      uint64_t v139 = *(void *)j;
    }
    if (v138 >= 0) {
      uint64_t v140 = *(unsigned __int8 *)(j + 23);
    }
    else {
      uint64_t v140 = *(void *)(j + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, v139, v140);
  }
  long long v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v141 + *(void *)(*v141 - 24)));
  uint64_t v142 = std::locale::use_facet(v156, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v142->__vftable[2].~facet_0)(v142, 10);
  std::locale::~locale(v156);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v143 = *((void *)this + 5);
  if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    int v144 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v144;
    _os_log_impl(&dword_22231A000, v143, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  memset(v156, 0, sizeof(v156));
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], (long long *)v156);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t pco info containerId: ", 24);
  uint64_t v145 = (void *)std::ostream::operator<<();
  __int16 v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)", data: ", 8);
  ctu::hex();
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    long long v147 = v156;
  }
  else {
    long long v147 = v156[0].__locale_;
  }
  if (SHIBYTE(v156[2].__locale_) >= 0) {
    uint64_t v148 = HIBYTE(v156[2].__locale_);
  }
  else {
    uint64_t v148 = (uint64_t)v156[1].__locale_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)v147, v148);
  if (SHIBYTE(v156[2].__locale_) < 0) {
    operator delete(v156[0].__locale_);
  }
  uint64_t v149 = *((void *)this + 5);
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v156);
    uint64_t v150 = SHIBYTE(v156[2].__locale_) >= 0 ? v156 : (std::locale *)v156[0].__locale_;
    LODWORD(v154) = 136315138;
    *(void *)((char *)&v154 + 4) = v150;
    _os_log_impl(&dword_22231A000, v149, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)&v154, 0xCu);
    if (SHIBYTE(v156[2].__locale_) < 0) {
      operator delete(v156[0].__locale_);
    }
  }
  *(void *)long long buf = *MEMORY[0x263F8C2C8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v164) < 0) {
    operator delete(*((void **)&v163 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C9A8E0](v166);
}

void sub_2224B1914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t std::__optional_destruct_base<AnbrFilterInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 88);
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 32);
  }
  return a1;
}

uint64_t std::vector<CSIPacketAddress>::__push_back_slow_path<CSIPacketAddress>(uint64_t a1, const CSIPacketAddress *a2)
{
  uint64_t v3 = *(const CSIPacketAddress **)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 16;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  std::string __p = v10;
  int v14 = (CSIPacketAddress *)&v10[24 * v4];
  size_t v16 = &v10[24 * v9];
  CSIPacketAddress::CSIPacketAddress(v14, a2);
  long long v15 = (CSIPacketAddress *)((char *)v14 + 24);
  std::vector<CSIPacketAddress>::__swap_out_circular_buffer((const CSIPacketAddress **)a1, &__p);
  uint64_t v11 = *(void *)(a1 + 8);
  if (v15 != v14) {
    long long v15 = (CSIPacketAddress *)((char *)v14 + (v15 - v14 - 24) % 0x18uLL);
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_2224B1BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<AnbrFilterInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AnbrFilterInfo,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(unsigned char *)(a1 + 176))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(a1 + 32, (__n128 *)(a2 + 32));
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(a1 + 88, (__n128 *)(a2 + 88));
      uint64_t v5 = *(void *)(a2 + 144);
      *(void *)(a1 + 150) = *(void *)(a2 + 150);
      *(void *)(a1 + 144) = v5;
      uint64_t v6 = *(void *)(a2 + 160);
      *(void *)(a1 + 166) = *(void *)(a2 + 166);
      *(void *)(a1 + 160) = v6;
    }
  }
  else if (*(unsigned char *)(a1 + 176))
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 88);
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 32);
    *(unsigned char *)(a1 + 176) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<AnbrFilterInfo,AnbrFilterInfo,AnbrFilterInfo*>(a1, a2);
    *(unsigned char *)(a1 + 176) = 1;
  }
}

uint64_t std::construct_at[abi:ne180100]<AnbrFilterInfo,AnbrFilterInfo,AnbrFilterInfo*>(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  *(unsigned char *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
  *(unsigned char *)(result + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    *(unsigned char *)(result + 56) = 0;
    if (*(unsigned char *)(a2 + 56))
    {
      long long v3 = *(_OWORD *)(a2 + 32);
      *(void *)(result + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = v3;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
      *(unsigned char *)(result + 56) = 1;
    }
    uint64_t v4 = *(void *)(a2 + 64);
    *(unsigned char *)(result + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(result + 64) = v4;
    *(unsigned char *)(result + 80) = 1;
  }
  *(unsigned char *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
  *(unsigned char *)(result + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    *(unsigned char *)(result + 112) = 0;
    if (*(unsigned char *)(a2 + 112))
    {
      long long v5 = *(_OWORD *)(a2 + 88);
      *(void *)(result + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = v5;
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88) = 0;
      *(unsigned char *)(result + 112) = 1;
    }
    uint64_t v6 = *(void *)(a2 + 120);
    *(unsigned char *)(result + 128) = *(unsigned char *)(a2 + 128);
    *(void *)(result + 120) = v6;
    *(unsigned char *)(result + 136) = 1;
  }
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(result + 150) = *(void *)(a2 + 150);
  *(void *)(result + 144) = v7;
  uint64_t v8 = *(void *)(a2 + 160);
  *(void *)(result + 166) = *(void *)(a2 + 166);
  *(void *)(result + 160) = v8;
  return result;
}

void std::__optional_storage_base<DataIPFilter,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilter,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    if (*(unsigned char *)(a1 + 160))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(a1 + 32, (__n128 *)(a2 + 32));
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(a1 + 88, (__n128 *)(a2 + 88));
      uint64_t v5 = *(void *)(a2 + 144);
      *(void *)(a1 + 150) = *(void *)(a2 + 150);
      *(void *)(a1 + 144) = v5;
    }
  }
  else if (*(unsigned char *)(a1 + 160))
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 88);
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 32);
    *(unsigned char *)(a1 + 160) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(a1, a2);
    *(unsigned char *)(a1 + 160) = 1;
  }
}

void _ZNSt3__110__function6__funcIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_ENS_9allocatorIS3_EEFbvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_ENS_9allocatorIS3_EEFbvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4CDFB0;
  return result;
}

void _ZNKSt3__110__function6__funcIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_ENS_9allocatorIS3_EEFbvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4CDFB0;
}

uint64_t _ZNSt3__110__function6__funcIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_ENS_9allocatorIS3_EEFbvEEclEv()
{
  return 0;
}

uint64_t _ZNKSt3__110__function6__funcIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_ENS_9allocatorIS3_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_E)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_ENS_9allocatorIS3_EEFbvEE11target_typeEv()
{
  return &_ZTIN20QMIDataContextIPBase20fDefaultPendingBlockMUlvE_E;
}

uint64_t std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds22ExtendedIPConfigChange10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B2118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds8ANBRInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B221C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds21ANBRProhibitTimerInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B2320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds13PktSrvcStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B2424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds11DadComplete10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B2528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    long long v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2224B27D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D4CE040;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D4CE040;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26D4CE040;
  std::__compressed_pair_elem<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4CE040;
  return std::__compressed_pair_elem<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 8);
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if (*(void *)(a1 + 16))
  {
    uint64_t v19 = 0;
    std::string v20 = 0;
    uint64_t v6 = (std::__shared_weak_count *)v3[13];
    if (v6)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v6);
      uint64_t v7 = v6;
      if (v6) {
        uint64_t v6 = (std::__shared_weak_count *)v3[12];
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    ((void (*)(uint64_t *__return_ptr))v6->__vftable[6].~__shared_weak_count)(&v19);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v9 = v19;
    int v10 = v3[5];
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136315138;
        char v22 = "operator()";
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: PendingChannelInitialization: Continuing pending activation", buf, 0xCu);
      }
      int v12 = *(unsigned __int8 *)(a1 + 32);
      uint64_t v13 = *(std::__shared_weak_count **)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 40);
      long long v18 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (*(uint64_t (**)(void *, BOOL, uint64_t *, void))(*v3 + 328))(v3, v12 != 0, &v17, *(unsigned __int8 *)(a1 + 56));
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      int v14 = v3[5];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = asStringBool();
        *(_DWORD *)long long buf = 136315394;
        char v22 = "operator()";
        __int16 v23 = 2080;
        uint64_t v24 = v15;
        _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: PendingChannelInitialization: result of pending activation is %s", buf, 0x16u);
      }
    }
    else
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136315138;
        char v22 = "operator()";
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: PendingChannelInitialization: not continuing abandoned pending activation (2)", buf, 0xCu);
      }
      uint64_t v8 = 0;
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v8;
}

void sub_2224B2BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0 const&,0ul>(uint64_t result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(result + std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  return result;
}

void std::__function::__alloc_func<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0,std::allocator<QMIDataContextIPBase::activateDataContextIP(DataProtocolFamily,std::string const&,BOOL,std::shared_ptr<QMIActivationLock>,BOOL)::$_0>,BOOL ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PktDataHandle>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PktDataHandle>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PktDataHandle>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  long long v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)long long v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PktDataHandle>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IDataCallAppId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IDataCallAppId>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::IDataCallAppId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  long long v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *long long v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IDataCallAppId>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LocalAbort>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LocalAbort>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::LocalAbort>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  long long v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *long long v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LocalAbort>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16StopNetworkIface8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B3064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Transaction>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Transaction>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Transaction>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  long long v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)long long v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Transaction>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16AbortTransaction8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B3248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds26SetHandoffWwanPduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::CallEndReason,void({block_pointer})(wds::tlv::CallEndReason const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<wds::tlv::CallEndReason>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 16, v6, v7);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::VerboseCallEndReasonType,void({block_pointer})(wds::tlv::VerboseCallEndReasonType const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<wds::tlv::VerboseCallEndReasonType>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 17, v6, v7);
    }
  }
  return result;
}

void std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0,std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0,std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4CE200;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0,std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4CE200;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0,std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0>,void ()(void)>::operator()(capabilities::ct *a1)
{
  _OWORD v19[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)*((void *)a1 + 1);
  v16[1] = v1;
  long long v16[2] = 0;
  v16[0] = &unk_26D4CE270;
  uint64_t v17 = v16;
  if (capabilities::ct::supportsGemini(a1))
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v16);
    uint64_t v2 = (std::__shared_weak_count *)v1[16];
    if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
    {
      long long v4 = v3;
      int v5 = (char *)v1[15];
      if (v5) {
        int v6 = (*(uint64_t (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 56)] + 24))(&v5[*(void *)(*(void *)v5 - 56)]);
      }
      else {
        int v6 = 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    else
    {
      int v6 = 1;
    }
    subscriber::simSlotAsInstance();
    qmi::Client::set((qmi::Client *)(v1 + 18), (const char *)*MEMORY[0x263F8AFE0]);
    memset(v13, 0, sizeof(v13));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13);
    int v7 = qmi::MutableMessageBase::getTLV<wds::tlv::SubscriptionType>((uint64_t)v13, 1);
    if (v6 == 2) {
      int v8 = 2;
    }
    else {
      int v8 = 1;
    }
    *(_DWORD *)int v7 = v8;
    uint64_t v11 = QMIServiceMsg::create();
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 1174405120;
    void v18[2] = ___ZN20QMIDataContextIPBase21bindSubscription_syncENSt3__18functionIFvvEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_125_1;
    void v18[4] = v1;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v15);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_23;
    aBlock[3] = &unk_26460FCF0;
    aBlock[4] = v18;
    uint64_t v9 = _Block_copy(aBlock);
    int v12 = v9;
    if (v11)
    {
      qmi::Client::send();
      uint64_t v9 = v12;
    }
    if (v9) {
      _Block_release(v9);
    }
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v19);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v15);
  }
  else
  {
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *))(*v17 + 48))(v17);
  }
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v16);
}

void sub_2224B3828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a25);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0,std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0,std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4CE270;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4CE270;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)(v1 + 160))
  {
    if (qmi::Client::getSvcType((qmi::Client *)(v1 + 144)) != 1) {
      return;
    }
    memset(v12, 0, sizeof(v12));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
    int v2 = *(_DWORD *)(v1 + 140);
    if (v2 == 2)
    {
      uint64_t v3 = qmi::MutableMessageBase::getTLV<wds::tlv::IPPref>((uint64_t)v12);
      int v4 = 6;
    }
    else
    {
      if (v2 != 1)
      {
        *(_DWORD *)(v1 + 6std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "wrong ip family";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/"
                                "Data/QMI/Context/QMIDataContextIPBase.cpp";
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v14) = 1329;
          _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT fIpFamilyType == kDataProtocolFamilyIPv4 || fIpFamilyType == kDataProtocolFamilyIPv6\n %s\n at %s:%d\n**********", buf, 0x1Cu);
          int v2 = *(_DWORD *)(v1 + 140);
        }
        if ((v2 - 1) >= 2) {
          __TUAssertTrigger();
        }
        goto LABEL_17;
      }
      uint64_t v3 = qmi::MutableMessageBase::getTLV<wds::tlv::IPPref>((uint64_t)v12);
      int v4 = 4;
    }
    *(_DWORD *)uint64_t v3 = v4;
    QMIDataContextIPBase::setQMIChannelState(v1, 2u);
    void v7[5] = v1 + 144;
    uint64_t v8 = QMIServiceMsg::create();
    int v9 = 25000;
    uint64_t v10 = 0;
    uint64_t aBlock = 0;
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    _DWORD v7[2] = ___ZN20QMIDataContextIPBase14setupQMIClientEv_block_invoke_135;
    void v7[3] = &__block_descriptor_tmp_136_2;
    void v7[4] = v1;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds21SetClientIpFamilyPref8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    int v14 = &unk_26460FD18;
    uint64_t v15 = v7;
    int v6 = _Block_copy(buf);
    uint64_t aBlock = v6;
    if (v8)
    {
      qmi::Client::send();
      int v6 = aBlock;
    }
    if (v6) {
      _Block_release(v6);
    }
LABEL_17:
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
    return;
  }
  int v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I setupQMIClient after client is deleted", buf, 2u);
  }
}

void sub_2224B3C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<QMIDataContextIPBase::bindDataPort(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds12BindDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B3D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PeripheralEndPoint>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PeripheralEndPoint>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PeripheralEndPoint>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PeripheralEndPoint>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PeripheralEndPoint>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds15BindMuxDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B3F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::IPPref>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPPref>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::IPPref>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPPref>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds21SetClientIpFamilyPref8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B42EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportExtendedIPConfigChange>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportExtendedIPConfigChange>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportExtendedIPConfigChange>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportExtendedIPConfigChange>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrProhibitTimer>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrProhibitTimer>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrProhibitTimer>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrProhibitTimer>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrRohcInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrRohcInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrRohcInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbrRohcInfo>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbr>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbr>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbr>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportAnbr>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<wds::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2224B46DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::CarrierIPv6,void({block_pointer})(wds::tlv::CarrierIPv6 const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    v11[0] = 0;
    v11[1] = 0;
    char v12 = 0;
    tlv::parseV<wds::tlv::CarrierIPv6>((unint64_t *)&v10, v5, (uint64_t)v11);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 192, v6, v7);
    }
  }
  return result;
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::Settings>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 16)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Settings>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Settings>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Settings>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  int v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Settings>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIN3wds18GetRuntimeSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B4B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__function::__func<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0,std::allocator<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0,std::allocator<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D4CE530;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0,std::allocator<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4CE530;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0,std::allocator<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(std::__shared_weak_count **)(v2 + 104);
  if (v3)
  {
    char v3 = std::__shared_weak_count::lock(v3);
    int v4 = v3;
    if (v3) {
      char v3 = *(std::__shared_weak_count **)(v2 + 96);
    }
  }
  else
  {
    int v4 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void))v3->__vftable[5].~__shared_weak_count_0)(v3, *(unsigned __int8 *)(v2 + 256));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = *(_DWORD *)(v2 + 140);
  if (v5 == 1)
  {
    uint64_t v12 = MEMORY[0x263EF8330];
    uint64_t v13 = 0x40000000;
    int v14 = ___ZZN20QMIDataContextIPBase22handleSettingsResponseERKN3wds18GetRuntimeSettings8ResponseEENK3__0clEv_block_invoke_2;
    uint64_t v15 = &__block_descriptor_tmp_350;
    uint64_t v16 = v2;
    QMIDataContextIPBase::setIPv4ConfigTimer(v2, 0, (uint64_t)&v12);
    if (!*(unsigned char *)(v2 + 272)) {
      return;
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 104);
    if (v7)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v7);
      uint64_t v8 = v7;
      if (v7) {
        uint64_t v7 = *(std::__shared_weak_count **)(v2 + 96);
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    goto LABEL_28;
  }
  if (v5 == 2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      char v6 = 0;
    }
    else
    {
      uint64_t v9 = *(std::__shared_weak_count **)(v2 + 104);
      if (v9)
      {
        uint64_t v9 = std::__shared_weak_count::lock(v9);
        uint64_t v10 = v9;
        if (v9) {
          uint64_t v9 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      char v6 = ((uint64_t (*)(std::__shared_weak_count *))v9->__vftable[1].~__shared_weak_count_0)(v9);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    uint64_t v12 = MEMORY[0x263EF8330];
    uint64_t v13 = 0x40000000;
    int v14 = ___ZZN20QMIDataContextIPBase22handleSettingsResponseERKN3wds18GetRuntimeSettings8ResponseEENK3__0clEv_block_invoke;
    uint64_t v15 = &__block_descriptor_tmp_349;
    uint64_t v16 = v2;
    QMIDataContextIPBase::setIPv6ConfigTimer(v2, 0, v6, (uint64_t)&v12);
    if (*(unsigned char *)(v2 + 272))
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v2 + 104);
      if (v7)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v7);
        uint64_t v8 = v7;
        if (v7) {
          uint64_t v7 = *(std::__shared_weak_count **)(v2 + 96);
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
LABEL_28:
      ((void (*)(void *__return_ptr))v7->__vftable[5].__on_zero_shared)(v11);
      CSIPacketAddress::operator=();
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
}

void sub_2224B4EA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0,std::allocator<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0,std::allocator<QMIDataContextIPBase::handleSettingsResponse(wds::GetRuntimeSettings::Response const&)::$_0>,void ()(void)>::target_type()
{
}

void ___ZZN20QMIDataContextIPBase22handleSettingsResponseERKN3wds18GetRuntimeSettings8ResponseEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    uint64_t v16 = "activateIPv6TimerFired";
    __int16 v17 = 2080;
    uint64_t v18 = asStringBool();
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6Service: fIPv6ConfigTimer timer fired DadRequired: %s", (uint8_t *)&v15, 0x16u);
  }
  if (*(unsigned char *)(v1 + 306)) {
    goto LABEL_4;
  }
  int v4 = *(std::__shared_weak_count **)(v1 + 104);
  if (v4)
  {
    int v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      int v4 = *(std::__shared_weak_count **)(v1 + 96);
    }
  }
  else
  {
    int v5 = 0;
  }
  if (((uint64_t (*)(std::__shared_weak_count *, void))v4->__vftable[9].__get_deleter)(v4, *(unsigned int *)(v1 + 140)))
  {
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    goto LABEL_4;
  }
  char v6 = *(std::__shared_weak_count **)(v1 + 104);
  if (v6)
  {
    char v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      char v6 = *(std::__shared_weak_count **)(v1 + 96);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = ((uint64_t (*)(std::__shared_weak_count *, void))v6->__vftable[4].__on_zero_shared)(v6, *(unsigned int *)(v1 + 140));
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v5)
  {
    if (!v8) {
      goto LABEL_25;
    }
LABEL_4:
    char v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I IPv6Service: IPv6 is a must-have", (uint8_t *)&v15, 2u);
    }
    QMIDataContextIPBase::setDataContextIPState(v1, 2u);
    (*(void (**)(uint64_t, void))(*(void *)v1 + 336))(v1, 0);
    return;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  if (v8) {
    goto LABEL_4;
  }
LABEL_25:
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 128);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = *(void *)(v1 + 120);
      if (v11)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11))
        {
          uint64_t v12 = *(NSObject **)(v1 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v15) = 0;
            _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I IPv6Service: IPv6 configuration failed in marginal traffic conditions, let's try that later", (uint8_t *)&v15, 2u);
          }
          QMIDataContextIPBase::setDataContextIPState(v1, 2u);
          (*(void (**)(uint64_t, void))(*(void *)v1 + 336))(v1, 0);
LABEL_40:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          return;
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  QMIDataContextIPBase::clearIPv6ConfigTimer((QMIDataContextIPBase *)v1);
  uint64_t v13 = *(std::__shared_weak_count **)(v1 + 104);
  if (v13)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v13);
    int v14 = v13;
    if (v13) {
      uint64_t v13 = *(std::__shared_weak_count **)(v1 + 96);
    }
  }
  else
  {
    int v14 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void, void))v13->__vftable[1].__on_zero_shared)(v13, *(unsigned int *)(v1 + 140), 0);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v10) {
    goto LABEL_40;
  }
}

void sub_2224B5270(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN20QMIDataContextIPBase22handleSettingsResponseERKN3wds18GetRuntimeSettings8ResponseEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315138;
    uint64_t v16 = "activateIPv4TimerFired";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: IPv4Service: fIPv4ConfigTimer timer fired", (uint8_t *)&v15, 0xCu);
  }
  char v3 = *(std::__shared_weak_count **)(v1 + 104);
  if (v3)
  {
    char v3 = std::__shared_weak_count::lock(v3);
    int v4 = v3;
    if (v3) {
      char v3 = *(std::__shared_weak_count **)(v1 + 96);
    }
  }
  else
  {
    int v4 = 0;
  }
  if (((uint64_t (*)(std::__shared_weak_count *, void))v3->__vftable[9].__get_deleter)(v3, *(unsigned int *)(v1 + 140)))
  {
    int v5 = 1;
  }
  else
  {
    char v6 = *(std::__shared_weak_count **)(v1 + 104);
    if (v6)
    {
      char v6 = std::__shared_weak_count::lock(v6);
      uint64_t v7 = v6;
      if (v6) {
        char v6 = *(std::__shared_weak_count **)(v1 + 96);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    int v5 = ((uint64_t (*)(std::__shared_weak_count *, void))v6->__vftable[4].__on_zero_shared)(v6, *(unsigned int *)(v1 + 140));
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v5)
  {
    int v8 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I IPv4Service: IPv4 is a must-have", (uint8_t *)&v15, 2u);
    }
    QMIDataContextIPBase::setDataContextIPState(v1, 2u);
    (*(void (**)(uint64_t, void))(*(void *)v1 + 336))(v1, 0);
    return;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 128);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = *(void *)(v1 + 120);
      if (v11)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11))
        {
          uint64_t v12 = *(NSObject **)(v1 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v15) = 0;
            _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I IPv4Service: IPv4 configuration failed in marginal traffic conditions, let's try that later", (uint8_t *)&v15, 2u);
          }
          QMIDataContextIPBase::setDataContextIPState(v1, 2u);
          (*(void (**)(uint64_t, void))(*(void *)v1 + 336))(v1, 0);
LABEL_36:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          return;
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  QMIDataContextIPBase::clearIPv4ConfigTimer((QMIDataContextIPBase *)v1);
  uint64_t v13 = *(std::__shared_weak_count **)(v1 + 104);
  if (v13)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v13);
    int v14 = v13;
    if (v13) {
      uint64_t v13 = *(std::__shared_weak_count **)(v1 + 96);
    }
  }
  else
  {
    int v14 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void, void))v13->__vftable[1].__on_zero_shared)(v13, *(unsigned int *)(v1 + 140), 0);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v10) {
    goto LABEL_36;
  }
}

void sub_2224B55D0(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::tryTlv<wds::tlv::OperatorReservedProtocolInformation,void({block_pointer})(wds::tlv::OperatorReservedProtocolInformation const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v8 = TlvValue;
    uint64_t v7 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v6 = 0u;
    tlv::parseV<wds::tlv::OperatorReservedProtocolInformation>((unint64_t *)&v8, v4, (uint64_t)__p);
    if (v8) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p[1])
    {
      *(void **)&long long v6 = __p[1];
      operator delete(__p[1]);
    }
  }
}

void sub_2224B5688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::SnssaiPdnInfo,void({block_pointer})(wds::tlv::SnssaiPdnInfo const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<wds::tlv::SnssaiPdnInfo>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 50, v6, v7);
    }
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddressExtended>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddressExtended>::getSize()
{
  return tlv::size<wds::tlv::Ipv4AddressExtended>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddressExtended>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Ipv4AddressExtended>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddressExtended>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddressExtended>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddressExtended>::getSize()
{
  return tlv::size<wds::tlv::Ipv6AddressExtended>();
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddressExtended>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<wds::tlv::Ipv6AddressExtended>(a2, a1 + 12);
  uint64_t v6 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v6;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddressExtended>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::FilterCallType>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 18)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilterCallType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilterCallType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilterCallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilterCallType>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4Address>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4Address>::getSize()
{
  return tlv::size<wds::tlv::Ipv4Address>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4Address>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Ipv4Address>(a2, a1 + 10);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4Address>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6Address>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6Address>::getSize()
{
  return tlv::size<wds::tlv::Ipv6Address>();
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6Address>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<wds::tlv::Ipv6Address>(a2, a1 + 10);
  uint64_t v6 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v6;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6Address>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::PacketList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CE758;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PacketList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4CE758;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PacketList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::PacketList>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::PacketList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PacketList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PacketList>::clone()
{
}

void sub_2224B5F88(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds12DropIPackets8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B6080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatusV2>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatusV2>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatusV2>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatusV2>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::QualityStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LteDataCallType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LteDataCallType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::LteDataCallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LteDataCallType>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RemoveHandle>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::RemoveHandle>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::RemoveHandle>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RemoveHandle>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProhibitTimerHandle>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProhibitTimerHandle>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProhibitTimerHandle>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProhibitTimerHandle>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds24GetANBRProhibitTimerInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B65D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CoalescingInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::CoalescingInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::CoalescingInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileIdentifer>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CoalescingInfo>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds13SetCoalescing8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B67B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrate>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrate>::getSize()
{
  return tlv::size<wds::tlv::RequestedBitrate>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrate>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::RequestedBitrate>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrate>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrateBps>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrateBps>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrateBps>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestedBitrateBps>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16ANBRQueryBitrate8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B6A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::IpType>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 16)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::IPPref>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpType>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Src>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Src>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Src>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Src>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Dst>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Dst>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Dst>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv4Dst>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Src>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Src>::getSize()
{
  return tlv::size<wds::tlv::HandOverIPv6Prefix>();
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Src>::write(uint64_t a1, __n128 **a2)
{
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2)->n128_i64 + 3;
  *a2 = (__n128 *)v5;
  tlv::writeV<wds::tlv::HandOverIPv6Prefix>(a2, (__n128 *)(a1 + 9));
  uint64_t v6 = (char *)*a2 - v5;
  v4->n128_u8[0] = v3;
  *(unsigned __int16 *)((char *)v4->n128_u16 + 1) = (unsigned __int16)v6;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Src>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Dst>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Dst>::getSize()
{
  return tlv::size<wds::tlv::HandOverIPv6Prefix>();
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Dst>::write(uint64_t a1, __n128 **a2)
{
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2)->n128_i64 + 3;
  *a2 = (__n128 *)v5;
  tlv::writeV<wds::tlv::HandOverIPv6Prefix>(a2, (__n128 *)(a1 + 9));
  uint64_t v6 = (char *)*a2 - v5;
  v4->n128_u8[0] = v3;
  *(unsigned __int16 *)((char *)v4->n128_u16 + 1) = (unsigned __int16)v6;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IPv6Dst>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::IpProtoType>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 21)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpProtoType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpProtoType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpProtoType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::IpProtoType>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortSrc>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortSrc>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortSrc>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortSrc>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortDst>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortDst>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortDst>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PortDst>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18ANBRRegisterFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224B7608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void QMIStewieCommandDriver::create()
{
}

void sub_2224B76C0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10E1C40758A9DC5);
  _Unwind_Resume(a1);
}

uint64_t QMIStewieCommandDriver::QMIStewieCommandDriver(uint64_t a1, uint64_t a2, NSObject **a3)
{
  *(void *)a1 = MEMORY[0x263F03888] + 16;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v7, (const char *)*MEMORY[0x263F03770], "stw.qmi");
  ctu::SharedLoggable<QMIStewieCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>((void *)(a1 + 8), a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v7);
  *(void *)a1 = &unk_26D4CEC90;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  return a1;
}

void sub_2224B77B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  StewieCommandDriver::~StewieCommandDriver(v9);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<QMIStewieCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(void *a1, NSObject **a2)
{
  *a1 = 0;
  a1[1] = 0;
  char v3 = *a2;
  a1[2] = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v5);
  return a1;
}

uint64_t QMIStewieCommandDriver::bootstrap(uint64_t a1, long long *a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  if (*(void *)(a1 + 80)) {
    __TUAssertTrigger();
  }
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Bootstrap", buf, 2u);
  }
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v5;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, "STW QMI Driver");
  uint64_t v7 = *(NSObject **)(a1 + 24);
  dispatch_object_t v33 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "stw");
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (uint64_t v9 = *(void *)(a1 + 8), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  uint64_t v12 = std::__shared_weak_count::lock(v11);
  if (v12)
  {
    uint64_t v13 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v29 = v9;
    char v30 = v12;
    std::__shared_weak_count::__release_weak(v11);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  else
  {
    uint64_t v29 = 0;
    char v30 = 0;
    std::__shared_weak_count::__release_weak(v11);
  }
  Registry::getServerConnection(&v27, *(Registry **)(a1 + 48));
  qmi::Client::createWithQueueLocal();
  long long v14 = v38;
  long long v38 = 0uLL;
  int v15 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  v26[20] = MEMORY[0x263EF8330];
  v26[21] = 0x40000000;
  v26[22] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke;
  v26[23] = &__block_descriptor_tmp_25;
  v26[24] = a1;
  qmi::Client::setHandler();
  v26[15] = MEMORY[0x263EF8330];
  v26[16] = 0x40000000;
  _WORD v26[17] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_2;
  v26[18] = &__block_descriptor_tmp_7_8;
  v26[19] = a1;
  qmi::Client::setHandler();
  v26[10] = MEMORY[0x263EF8330];
  v26[11] = 0x40000000;
  v26[12] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_3;
  v26[13] = &__block_descriptor_tmp_8_11;
  v26[14] = a1;
  qmi::Client::setHandler();
  v26[5] = MEMORY[0x263EF8330];
  void v26[6] = 0x40000000;
  v26[7] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_4;
  v26[8] = &__block_descriptor_tmp_9_5;
  v26[9] = a1;
  qmi::Client::setHandler();
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 0x40000000;
  v26[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_5;
  void v26[3] = &__block_descriptor_tmp_11_6;
  void v26[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft11ServiceInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_264610260;
  char v39 = v26;
  qmi::Client::setIndHandler();
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 0x40000000;
  void v25[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_6;
  v25[3] = &__block_descriptor_tmp_12_11;
  void v25[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft20DeactivationComplete10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_264610288;
  char v39 = v25;
  qmi::Client::setIndHandler();
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 0x40000000;
  long long v24[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_7;
  v24[3] = &__block_descriptor_tmp_13_9;
  void v24[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft18RequestStateChange10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_2646102B0;
  char v39 = v24;
  qmi::Client::setIndHandler();
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 0x40000000;
  void v23[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_8;
  v23[3] = &__block_descriptor_tmp_14_5;
  void v23[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft26SecurityConfigUpdateNeeded10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_2646102D8;
  char v39 = v23;
  qmi::Client::setIndHandler();
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 0x40000000;
  _OWORD v22[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_9;
  v22[3] = &__block_descriptor_tmp_15_8;
  void v22[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft19SecurityConfigUsage10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_264610300;
  char v39 = v22;
  qmi::Client::setIndHandler();
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 0x40000000;
  void v21[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_10;
  v21[3] = &__block_descriptor_tmp_16_3;
  void v21[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft15MessageTXStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_264610328;
  char v39 = v21;
  qmi::Client::setIndHandler();
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  void v20[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_11;
  v20[3] = &__block_descriptor_tmp_17_11;
  void v20[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft9MessageRX10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_264610350;
  char v39 = v20;
  qmi::Client::setIndHandler();
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 0x40000000;
  void v19[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_12;
  v19[3] = &__block_descriptor_tmp_18_11;
  _OWORD v19[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft18FileTransferStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_264610378;
  char v39 = v19;
  qmi::Client::setIndHandler();
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 0x40000000;
  void v18[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_13;
  v18[3] = &__block_descriptor_tmp_19_8;
  void v18[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft17ServiceOutageInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_2646103A0;
  char v39 = v18;
  qmi::Client::setIndHandler();
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  _OWORD v17[2] = ___ZN22QMIStewieCommandDriver9bootstrapEONSt3__18weak_ptrI27StewieCommandDriverDelegateEE_block_invoke_14;
  void v17[3] = &__block_descriptor_tmp_20_9;
  void v17[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  *(void *)&long long v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3sft21SaveBroadcastInfoBlob10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v38 + 1) = &unk_2646103C8;
  char v39 = v17;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
  return qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 64));
}