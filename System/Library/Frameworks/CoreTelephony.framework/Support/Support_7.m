void sub_1003D3834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003D38CC(uint64_t a1, int a2, uint64_t a3)
{
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a3 + 23) >= 0) {
      v7 = (unsigned __int8 *)a3;
    }
    else {
      v7 = *(unsigned __int8 **)a3;
    }
    *(_DWORD *)buf = 136315394;
    v27 = v7;
    __int16 v28 = 1024;
    int v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I User selection: %s, restore: %d", buf, 0x12u);
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 544)) {
    return sub_1003D2420(a1, a3);
  }
  if (a2) {
    sub_10032AFC0((unsigned char *)(a1 + 848), (const std::string *)a3);
  }
  v10 = *(void **)(a1 + 976);
  v11 = (void *)(a1 + 984);
  if (v10 != (void *)(a1 + 984))
  {
    char v12 = *(unsigned char *)(a3 + 23);
    if (v12 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 8);
    }
    if (v12 >= 0) {
      v14 = (unsigned __int8 *)a3;
    }
    else {
      v14 = *(unsigned __int8 **)a3;
    }
    do
    {
      uint64_t v15 = *((unsigned __int8 *)v10 + 63);
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = *((unsigned __int8 *)v10 + 63);
      }
      else {
        uint64_t v16 = v10[6];
      }
      if (v16 == v13)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp((const void *)v10[5], v14, v10[6])) {
            goto LABEL_38;
          }
        }
        else
        {
          if (!*((unsigned char *)v10 + 63)) {
            goto LABEL_38;
          }
          uint64_t v17 = 0;
          while (*((unsigned __int8 *)v10 + v17 + 40) == v14[v17])
          {
            if (v15 == ++v17) {
              goto LABEL_38;
            }
          }
        }
      }
      v18 = (void *)v10[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (void *)v10[2];
          BOOL v20 = *v19 == (void)v10;
          v10 = v19;
        }
        while (!v20);
      }
      v10 = v19;
    }
    while (v19 != v11);
    goto LABEL_41;
  }
LABEL_38:
  if (v10 == v11)
  {
LABEL_41:
    v21 = *(NSObject **)(a1 + 40);
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v22) {
      return result;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#E User selection is not selectable", buf, 2u);
    return 0;
  }
  v23[0] = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long __p = *(_OWORD *)a3;
    uint64_t v25 = *(void *)(a3 + 16);
  }
  v23[0] = 1;
  sub_1003CF080(a1, v23);
  BOOL result = 1;
  if (v23[0])
  {
    if (SHIBYTE(v25) < 0)
    {
      operator delete((void *)__p);
      return 1;
    }
  }
  return result;
}

void sub_1003D3B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D3B80(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v185 = 0;
  memset(v184, 0, sizeof(v184));
  *(_OWORD *)v182 = 0u;
  long long v183 = 0u;
  sub_1003D2230(v182, a1);
  uint64_t v6 = *(void *)&v184[0];
  if (*(void *)&v184[0] == *((void *)&v184[0] + 1))
  {
LABEL_5:
    *a3 = 0;
    goto LABEL_374;
  }
  if ((*(_DWORD *)(*(void *)&v184[0] + 12) - 1) <= 1)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I No SIM", buf, 2u);
    }
    goto LABEL_5;
  }
  v163 = a3;
  uint64_t v179 = 0;
  v180 = 0;
  unint64_t v181 = 0;
  memset(buf, 0, 24);
  uint64_t v166 = *(void *)&v184[0] + 16;
  ctu::hex((uint64_t *)buf, (ctu *)(*(void *)&v184[0] + 16), (const void *)0x10, v5);
  uint64_t v8 = *(void **)(a1 + 1120);
  char v9 = buf[23];
  int v161 = a2;
  if (v8 != (void *)(a1 + 1128))
  {
    if (buf[23] >= 0) {
      uint64_t v10 = buf[23];
    }
    else {
      uint64_t v10 = *(void *)&buf[8];
    }
    if (buf[23] >= 0) {
      v11 = buf;
    }
    else {
      v11 = *(unsigned char **)buf;
    }
    while (2)
    {
      uint64_t v12 = v8[5];
      uint64_t v13 = v8[6];
      while (v12 != v13)
      {
        uint64_t v14 = *(unsigned __int8 *)(v12 + 23);
        if ((v14 & 0x80u) == 0) {
          uint64_t v15 = *(unsigned __int8 *)(v12 + 23);
        }
        else {
          uint64_t v15 = *(void *)(v12 + 8);
        }
        if (v15 == v10)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v12, v11, *(void *)(v12 + 8)))
            {
LABEL_35:
              uint64_t v21 = a1;
              *(_DWORD *)(a1 + 152) = *((_DWORD *)v8 + 8);
              int v159 = *(unsigned __int8 *)(v12 + 24);
              char v160 = 0;
              int v20 = 1;
              if ((v9 & 0x80) == 0) {
                goto LABEL_37;
              }
              goto LABEL_36;
            }
          }
          else
          {
            if (!*(unsigned char *)(v12 + 23)) {
              goto LABEL_35;
            }
            uint64_t v16 = 0;
            while (*(unsigned __int8 *)(v12 + v16) == v11[v16])
            {
              if (v14 == ++v16) {
                goto LABEL_35;
              }
            }
          }
        }
        v12 += 32;
      }
      uint64_t v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (void *)v8[2];
          BOOL v19 = *v18 == (void)v8;
          uint64_t v8 = v18;
        }
        while (!v19);
      }
      uint64_t v8 = v18;
      if (v18 != (void *)(a1 + 1128)) {
        continue;
      }
      break;
    }
  }
  int v20 = 0;
  int v159 = 0;
  char v160 = 1;
  uint64_t v21 = a1;
  if (v9 < 0) {
LABEL_36:
  }
    operator delete(*(void **)buf);
LABEL_37:
  if (*(unsigned char *)(v21 + 144)) {
    int v22 = 1;
  }
  else {
    int v22 = v20;
  }
  int v170 = v22;
  uint64_t v171 = v6;
  if (*(unsigned char *)(v6 + 80))
  {
    uint64_t v23 = *(void *)(v6 + 56);
    uint64_t v174 = *(void *)(v6 + 64);
    if (v23 != v174)
    {
      v24 = v191;
      v162 = (const void **)(v21 + 816);
      v172 = (void **)(v21 + 1104);
      uint64_t v173 = v21 + 1096;
      v167 = (void *)(v21 + 1056);
      uint64_t v168 = v21 + 800;
      v164 = (void *)(v21 + 1032);
      uint64_t v165 = v21 + 1024;
      v158 = (const void **)(v21 + 888);
      while (1)
      {
        memset(&v196, 0, sizeof(v196));
        memset(v195, 0, sizeof(v195));
        long long v193 = 0u;
        memset(v194, 0, sizeof(v194));
        long long v192 = 0u;
        memset(v191, 0, sizeof(v191));
        long long v190 = 0u;
        sub_1000C5AB4((uint64_t)&v190, v23);
        uint64_t v25 = v180;
        if ((unint64_t)v180 >= v181)
        {
          v26 = (std::string *)sub_1003DC28C(&v179);
        }
        else
        {
          bzero(v180, 0x338uLL);
          sub_1003DC3A8((uint64_t)v25);
          v26 = (std::string *)((char *)v25 + 824);
        }
        v180 = v26;
        LODWORD(v26[-7].__r_.__value_.__l.__data_) = 2;
        v26[-11].__r_.__value_.__s.__data_[4] = 0;
        v210 = 0;
        uint64_t v211 = 0;
        char v213 = 0;
        uint64_t v212 = 0;
        long long v214 = 0u;
        *(_OWORD *)v215 = 0u;
        uint64_t v216 = 0;
        memset(buf, 0, sizeof(buf));
        long long v200 = 0u;
        *(_OWORD *)v201 = 0u;
        memset(v202, 0, 28);
        long long v203 = 0u;
        long long v204 = 0u;
        long long v205 = 0u;
        long long v206 = 0u;
        long long v207 = 0u;
        long long v208 = 0u;
        memset(v209, 0, 28);
        char v217 = 2;
        uint64_t v219 = 0;
        uint64_t v220 = 0;
        int v221 = 0;
        v218 = 0;
        v27 = v26 - 29;
        *(_OWORD *)long long __p = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        char v227 = 0;
        sub_1003DD760(&v26[-29], (uint64_t)buf);
        *(void *)v197 = (char *)&v225 + 8;
        sub_10030FEEC((void ***)v197);
        *(void *)v197 = &v224;
        sub_100047F64((void ***)v197);
        if (SBYTE7(v223) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v220) < 0) {
          operator delete(v218);
        }
        if (SHIBYTE(v216) < 0) {
          operator delete(v215[0]);
        }
        if (SHIBYTE(v212) < 0) {
          operator delete(v210);
        }
        sub_1000C584C((uint64_t)buf);
        if (!v27->__r_.__value_.__s.__data_[0]) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        *(_OWORD *)&v26[-29].__r_.__value_.__r.__words[1] = v190;
        std::string::operator=(v26 - 28, v24);
        std::string::operator=(v26 - 27, &v191[1]);
        std::string::operator=(v26 - 26, (const std::string *)&v192);
        LODWORD(v26[-25].__r_.__value_.__l.__data_) = DWORD2(v193);
        std::string::operator=((std::string *)((char *)v26 - 592), v194);
        std::string::operator=((std::string *)((char *)v26 - 568), &v194[1]);
        std::string::operator=((std::string *)((char *)v26 - 544), v195);
        std::string::operator=((std::string *)((char *)v26 - 520), &v195[1]);
        std::string::operator=((std::string *)((char *)v26 - 496), &v196);
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(v21 + 72) + 160))(buf);
        if (!v27->__r_.__value_.__s.__data_[0]) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        __int16 v28 = (void **)&v26[-18].__r_.__value_.__r.__words[2];
        if (v26[-17].__r_.__value_.__s.__data_[15] < 0) {
          operator delete(*v28);
        }
        long long v29 = *(_OWORD *)buf;
        v26[-17].__r_.__value_.__l.__size_ = *(void *)&buf[16];
        *(_OWORD *)__int16 v28 = v29;
        if (!*(unsigned char *)(v21 + 792))
        {
          LOBYTE(p_size) = 0;
          goto LABEL_86;
        }
        sub_1002EF958((uint64_t)buf);
        if (sub_1003D5918(v168, (uint64_t)buf)) {
          break;
        }
        if (!*(unsigned char *)(v21 + 792)) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        uint64_t v31 = *(unsigned __int8 *)(v21 + 839);
        if ((v31 & 0x80u) == 0) {
          uint64_t v32 = *(unsigned __int8 *)(v21 + 839);
        }
        else {
          uint64_t v32 = *(void *)(v21 + 824);
        }
        std::string::size_type size = HIBYTE(v191[0].__r_.__value_.__r.__words[2]);
        if ((v191[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v191[0].__r_.__value_.__l.__size_;
        }
        if (v32 == size)
        {
          if ((v191[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v34 = v24;
          }
          else {
            v34 = (std::string *)v191[0].__r_.__value_.__r.__words[0];
          }
          if ((v31 & 0x80) != 0)
          {
            LODWORD(p_size) = memcmp(*v162, v34, *(void *)(v21 + 824)) == 0;
          }
          else
          {
            if (!*(unsigned char *)(v21 + 839)) {
              break;
            }
            uint64_t v35 = v31 - 1;
            v36 = v162;
            do
            {
              int v38 = *(unsigned __int8 *)v36;
              v36 = (const void **)((char *)v36 + 1);
              int v37 = v38;
              int v40 = v34->__r_.__value_.__s.__data_[0];
              v34 = (std::string *)((char *)v34 + 1);
              int v39 = v40;
              BOOL v41 = v35-- != 0;
              char v42 = v41;
              LODWORD(p_size) = v37 == v39;
            }
            while (v37 == v39 && (v42 & 1) != 0);
          }
        }
        else
        {
          LODWORD(p_size) = 0;
        }
LABEL_83:
        if ((SBYTE7(v200) & 0x80000000) == 0)
        {
          if (!p_size) {
            goto LABEL_86;
          }
LABEL_85:
          HIDWORD(v26[-1].__r_.__value_.__r.__words[2]) = 8;
          LOBYTE(p_size) = 1;
          goto LABEL_86;
        }
        operator delete(*(void **)&buf[16]);
        if (p_size) {
          goto LABEL_85;
        }
LABEL_86:
        v43 = v24;
        v44 = sub_100046F68(v173, (void **)&v24->__r_.__value_.__l.__data_);
        v45 = v44;
        if (v172 == v44)
        {
          v46 = *(NSObject **)(v21 + 40);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            if ((v191[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v47 = (std::string::size_type)v43;
            }
            else {
              std::string::size_type v47 = v191[0].__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v47;
            _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "No details present for (%s)", buf, 0xCu);
          }
          goto LABEL_240;
        }
        if (*((unsigned char *)v44 + 113) != 1 && *(unsigned char *)(v21 + 544))
        {
          if (*((char *)v44 + 167) < 0)
          {
            if (!v44[19]) {
              goto LABEL_103;
            }
          }
          else if (!*((unsigned char *)v44 + 167))
          {
            goto LABEL_103;
          }
          char v48 = (char)p_size;
          sub_100CD6B88((const void **)v44 + 18, (uint64_t)v194, (uint64_t)buf);
          p_std::string::size_type size = (void **)&v26[-7].__r_.__value_.__l.__size_;
          if (v26[-6].__r_.__value_.__s.__data_[7] < 0) {
            operator delete(*p_size);
          }
          long long v49 = *(_OWORD *)buf;
          v26[-6].__r_.__value_.__r.__words[0] = *(void *)&buf[16];
          *(_OWORD *)p_std::string::size_type size = v49;
          LOBYTE(p_size) = v48;
        }
LABEL_103:
        if (*(_DWORD *)(v171 + 12) != 3)
        {
          *(_WORD *)&v26[-11].__r_.__value_.__s.__data_[2] = 0;
          goto LABEL_179;
        }
        char v169 = (char)p_size;
        if (BYTE9(v193))
        {
          uint64_t v50 = *(void *)(a1 + 760);
          uint64_t v51 = *(void *)(a1 + 768);
          while (v50 != v51)
          {
            if ((subscriber::isSimAbsent() & 1) == 0) {
              goto LABEL_111;
            }
            v50 += 168;
          }
          if (!*(_DWORD *)(a1 + 912))
          {
            *(_WORD *)&v26[-11].__r_.__value_.__s.__data_[2] = 257;
            uint64_t v21 = a1;
            if (!v27->__r_.__value_.__s.__data_[0]) {
              goto LABEL_387;
            }
            std::string::operator=((std::string *)((char *)v26 - 352), (const std::string *)v45 + 8);
            if (v169) {
              goto LABEL_240;
            }
LABEL_236:
            unsigned int v104 = *((unsigned __int8 *)v45 + 112) - 3;
            if (v104 > 4) {
              int v103 = 0;
            }
            else {
              int v103 = dword_101498598[(char)v104];
            }
LABEL_239:
            HIDWORD(v26[-1].__r_.__value_.__r.__words[2]) = v103;
            goto LABEL_240;
          }
        }
LABEL_111:
        BOOL v52 = sub_1003D31E8(a1, (uint64_t)(v45 + 7), BYTE9(v193) == 0);
        LOBYTE(p_size) = v169;
        v26[-11].__r_.__value_.__s.__data_[3] = v52;
        if (v52 && !*(unsigned char *)(a1 + 544))
        {
          v53 = *(void **)(a1 + 1048);
          if (*((char *)v45 + 143) < 0)
          {
            sub_10004FC84(__dst, v45[15], (unint64_t)v45[16]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v45 + 15);
            v178 = v45[17];
          }
          uint64_t v54 = HIBYTE(v178);
          v55 = v167;
          if (v53 != v167)
          {
            if (SHIBYTE(v178) >= 0) {
              v56 = (void *)HIBYTE(v178);
            }
            else {
              v56 = __dst[1];
            }
            if (SHIBYTE(v178) >= 0) {
              v57 = __dst;
            }
            else {
              v57 = (void **)__dst[0];
            }
            v55 = v53;
            do
            {
              uint64_t v58 = *((unsigned __int8 *)v55 + 63);
              if ((v58 & 0x80u) == 0) {
                v59 = (void *)*((unsigned __int8 *)v55 + 63);
              }
              else {
                v59 = (void *)v55[6];
              }
              if (v59 == v56)
              {
                if ((v58 & 0x80) != 0)
                {
                  v154 = v56;
                  uint64_t v156 = v54;
                  int v61 = memcmp((const void *)v55[5], v57, v55[6]);
                  v56 = v154;
                  uint64_t v54 = v156;
                  if (!v61) {
                    goto LABEL_145;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v55 + 63)) {
                    goto LABEL_145;
                  }
                  uint64_t v60 = 0;
                  while (*((unsigned __int8 *)v55 + v60 + 40) == *((unsigned __int8 *)v57 + v60))
                  {
                    if (v58 == ++v60) {
                      goto LABEL_145;
                    }
                  }
                }
              }
              v62 = (void *)v55[1];
              if (v62)
              {
                do
                {
                  v63 = v62;
                  v62 = (void *)*v62;
                }
                while (v62);
              }
              else
              {
                do
                {
                  v63 = (void *)v55[2];
                  BOOL v19 = *v63 == (void)v55;
                  v55 = v63;
                }
                while (!v19);
              }
              v55 = v63;
            }
            while (v63 != v167);
            v55 = v167;
LABEL_145:
            LOBYTE(p_size) = v169;
          }
          if ((v54 & 0x80) != 0) {
            operator delete(__dst[0]);
          }
          if (v55 != v167)
          {
            subscriber::generateUuidStrFromSlotId();
            memset(buf, 0, 24);
            ctu::cf::assign();
            std::string::size_type v64 = *(void *)buf;
            *(void *)v197 = *(void *)&buf[8];
            *(void *)&v197[7] = *(void *)&buf[15];
            char v65 = buf[23];
            if (SHIBYTE(v26[-9].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v26[-9].__r_.__value_.__l.__data_);
            }
            v26[-9].__r_.__value_.__r.__words[0] = v64;
            v26[-9].__r_.__value_.__l.__size_ = *(void *)v197;
            *(std::string::size_type *)((char *)&v26[-9].__r_.__value_.__r.__words[1] + 7) = *(void *)&v197[7];
            *((unsigned char *)&v26[-9].__r_.__value_.__s + 23) = v65;
            sub_1000558F4((const void **)&v189);
            (***(void (****)(long long *__return_ptr))(a1 + 72))(&v189);
            ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)v189);
            if (v67 < 0)
            {
              v68 = (unsigned __int8 *)(v67 & 0x7FFFFFFFFFFFFFFFLL);
              uint64_t v69 = 5381;
              do
              {
                uint64_t v67 = v69;
                unsigned int v70 = *v68++;
                uint64_t v69 = (33 * v69) ^ v70;
              }
              while (v70);
            }
            v71 = ServiceMap;
            std::mutex::lock(ServiceMap);
            *(void *)v197 = v67;
            v72 = sub_10004D37C(&v71[1].__m_.__sig, (unint64_t *)v197);
            if (v72)
            {
              uint64_t v74 = v72[3];
              uint64_t v73 = v72[4];
              if (v73)
              {
                uint64_t v153 = v72[3];
                v75 = (atomic_ullong *)(v73 + 8);
                v155 = (std::__shared_weak_count *)v72[4];
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
                std::mutex::unlock(v71);
                atomic_fetch_add_explicit(v75, 1uLL, memory_order_relaxed);
                uint64_t v74 = v153;
                sub_10004D2C8(v155);
                char v157 = 0;
LABEL_159:
                if (*((char *)v55 + 63) < 0)
                {
                  sub_10004FC84(v197, (void *)v55[5], v55[6]);
                }
                else
                {
                  *(_OWORD *)v197 = *(_OWORD *)(v55 + 5);
                  *(void *)&v197[16] = v55[7];
                }
                (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned char *))(*(void *)v74 + 168))(buf, v74, v197);
                std::string::operator=((std::string *)((char *)v26 - 112), (const std::string *)buf);
                std::string::operator=((std::string *)((char *)v26 - 88), (const std::string *)&buf[24]);
                std::string::operator=((std::string *)((char *)v26 - 64), (const std::string *)v201);
                v26[-2].__r_.__value_.__s.__data_[8] = v202[8];
                std::string::operator=((std::string *)((char *)v26 - 32), (const std::string *)&v202[16]);
                if (SBYTE7(v203) < 0) {
                  operator delete(*(void **)&v202[16]);
                }
                if ((v202[7] & 0x80000000) != 0) {
                  operator delete(v201[0]);
                }
                if (SHIBYTE(v200) < 0) {
                  operator delete(*(void **)&buf[24]);
                }
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                if ((v197[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v197);
                }
                if ((v157 & 1) == 0) {
                  sub_10004D2C8(v155);
                }
                if (*((void *)&v189 + 1)) {
                  sub_10004D2C8(*((std::__shared_weak_count **)&v189 + 1));
                }
                sub_100CD6B88((const void **)&v26[-2].__r_.__value_.__r.__words[2], (uint64_t)v194, (uint64_t)buf);
                p_std::string::size_type size = (void **)&v26[-7].__r_.__value_.__l.__size_;
                if (v26[-6].__r_.__value_.__s.__data_[7] < 0) {
                  operator delete(*p_size);
                }
                long long v76 = *(_OWORD *)buf;
                v26[-6].__r_.__value_.__r.__words[0] = *(void *)&buf[16];
                *(_OWORD *)p_std::string::size_type size = v76;
                LOBYTE(p_size) = v169;
                goto LABEL_179;
              }
            }
            else
            {
              uint64_t v74 = 0;
            }
            std::mutex::unlock(v71);
            v155 = 0;
            char v157 = 1;
            goto LABEL_159;
          }
        }
LABEL_179:
        char v77 = v170;
        if (!v26[-11].__r_.__value_.__s.__data_[3]) {
          char v77 = 1;
        }
        uint64_t v21 = a1;
        if (v77) {
          goto LABEL_240;
        }
        if (*(unsigned char *)(a1 + 544))
        {
          v78 = sub_1003DE594(v165, v166);
          if (v164 == v78)
          {
            int v91 = BYTE9(v193);
            goto LABEL_228;
          }
          uint64_t v79 = *((unsigned __int8 *)v78 + 71);
          size_t v80 = v78[7];
          if ((v79 & 0x80u) == 0) {
            uint64_t v81 = *((unsigned __int8 *)v78 + 71);
          }
          else {
            uint64_t v81 = v78[7];
          }
          std::string::size_type v82 = HIBYTE(v191[0].__r_.__value_.__r.__words[2]);
          if ((v191[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v82 = v191[0].__r_.__value_.__l.__size_;
          }
          if (v81 != v82) {
            goto LABEL_222;
          }
          v83 = (const void **)(v78 + 6);
          if ((v191[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v84 = v43;
          }
          else {
            v84 = (std::string *)v191[0].__r_.__value_.__r.__words[0];
          }
          if ((v79 & 0x80) != 0)
          {
            v102 = *v83;
LABEL_227:
            int v91 = memcmp(v102, v84, v80) == 0;
            goto LABEL_228;
          }
          if (!*((unsigned char *)v78 + 71)) {
            goto LABEL_224;
          }
          uint64_t v85 = v79 - 1;
          do
          {
            int v87 = *(unsigned __int8 *)v83;
            v83 = (const void **)((char *)v83 + 1);
            int v86 = v87;
            int v89 = v84->__r_.__value_.__s.__data_[0];
            v84 = (std::string *)((char *)v84 + 1);
            int v88 = v89;
            BOOL v41 = v85-- != 0;
            char v90 = v41;
            BOOL v19 = v86 == v88;
            int v91 = v86 == v88;
          }
          while (v19 && (v90 & 1) != 0);
        }
        else
        {
          uint64_t v92 = *(unsigned __int8 *)(a1 + 911);
          size_t v80 = *(void *)(a1 + 896);
          if ((v92 & 0x80u) == 0) {
            uint64_t v93 = *(unsigned __int8 *)(a1 + 911);
          }
          else {
            uint64_t v93 = *(void *)(a1 + 896);
          }
          std::string::size_type v94 = HIBYTE(v191[0].__r_.__value_.__r.__words[2]);
          if ((v191[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v94 = v191[0].__r_.__value_.__l.__size_;
          }
          if (v93 != v94)
          {
LABEL_222:
            int v91 = 0;
            goto LABEL_228;
          }
          if ((v191[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v84 = v43;
          }
          else {
            v84 = (std::string *)v191[0].__r_.__value_.__r.__words[0];
          }
          if ((v92 & 0x80) != 0)
          {
            v102 = *v158;
            goto LABEL_227;
          }
          if (!*(unsigned char *)(a1 + 911))
          {
LABEL_224:
            int v91 = 1;
            goto LABEL_228;
          }
          uint64_t v95 = v92 - 1;
          v96 = v158;
          do
          {
            int v98 = *(unsigned __int8 *)v96;
            v96 = (const void **)((char *)v96 + 1);
            int v97 = v98;
            int v100 = v84->__r_.__value_.__s.__data_[0];
            v84 = (std::string *)((char *)v84 + 1);
            int v99 = v100;
            BOOL v41 = v95-- != 0;
            char v101 = v41;
            BOOL v19 = v97 == v99;
            int v91 = v97 == v99;
          }
          while (v19 && (v101 & 1) != 0);
        }
LABEL_228:
        v26[-11].__r_.__value_.__s.__data_[2] = v91;
        if (v91)
        {
          if (!v27->__r_.__value_.__s.__data_[0]) {
LABEL_387:
          }
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          std::string::operator=((std::string *)((char *)v26 - 352), (const std::string *)v45 + 8);
        }
        if (p_size) {
          goto LABEL_240;
        }
        if (*(unsigned char *)(a1 + 880) && v26[-11].__r_.__value_.__s.__data_[2])
        {
          int v103 = 10;
          goto LABEL_239;
        }
        if (v26[-11].__r_.__value_.__s.__data_[2]) {
          goto LABEL_236;
        }
LABEL_240:
        sub_1000C584C((uint64_t)&v190);
        v23 += 216;
        v24 = v43;
        if (v23 == v174) {
          goto LABEL_241;
        }
      }
      LODWORD(p_size) = 1;
      goto LABEL_83;
    }
  }
LABEL_241:
  if (!v170 || *(_DWORD *)(v21 + 152) && *(void *)(v21 + 768) == *(void *)(v21 + 760))
  {
    if (v161)
    {
      long long v190 = 0uLL;
      v191[0].__r_.__value_.__r.__words[0] = 0;
      if (*((void *)&v184[0] + 1) == *(void *)&v184[0]) {
        sub_10015B728();
      }
      sub_1003D19EC((void *)v21, *(void *)&v184[0] + 16, &v190);
      v176 = (std::string *)*((void *)&v190 + 1);
      for (i = (const std::string *)v190; i != v176; i += 13)
      {
        v108 = v180;
        if ((unint64_t)v180 >= v181)
        {
          v109 = (std::string *)sub_1003DC28C(&v179);
        }
        else
        {
          bzero(v180, 0x338uLL);
          sub_1003DC3A8((uint64_t)v108);
          v109 = (std::string *)((char *)v108 + 824);
        }
        v180 = v109;
        v210 = 0;
        uint64_t v211 = 0;
        char v213 = 0;
        uint64_t v212 = 0;
        long long v214 = 0u;
        *(_OWORD *)v215 = 0u;
        uint64_t v216 = 0;
        memset(buf, 0, sizeof(buf));
        long long v200 = 0u;
        *(_OWORD *)v201 = 0u;
        memset(v202, 0, 28);
        long long v203 = 0u;
        long long v204 = 0u;
        long long v205 = 0u;
        long long v206 = 0u;
        long long v207 = 0u;
        long long v208 = 0u;
        memset(v209, 0, 28);
        char v217 = 2;
        uint64_t v219 = 0;
        uint64_t v220 = 0;
        int v221 = 0;
        v218 = 0;
        v110 = v109 - 29;
        *(_OWORD *)long long __p = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        char v227 = 0;
        sub_1003DD760(&v109[-29], (uint64_t)buf);
        *(void *)v197 = (char *)&v225 + 8;
        sub_10030FEEC((void ***)v197);
        *(void *)v197 = &v224;
        sub_100047F64((void ***)v197);
        if (SBYTE7(v223) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v220) < 0) {
          operator delete(v218);
        }
        if (SHIBYTE(v216) < 0) {
          operator delete(v215[0]);
        }
        if (SHIBYTE(v212) < 0) {
          operator delete(v210);
        }
        sub_1000C584C((uint64_t)buf);
        if (!v110->__r_.__value_.__s.__data_[0]
          || (std::string::operator=(v109 - 28, i + 3), !v110->__r_.__value_.__s.__data_[0])
          || (std::string::operator=((std::string *)((char *)v109 - 464), i + 3), !v110->__r_.__value_.__s.__data_[0])
          || (std::string::operator=((std::string *)((char *)v109 - 416), i + 2),
              v111 = &v109[-35].__r_.__value_.__s.__data_[16],
              LODWORD(v109[-7].__r_.__value_.__l.__data_) = 2,
              v111[564] = 0,
              v111[567] = 0,
              !v110->__r_.__value_.__s.__data_[0]))
        {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        v109[-12].__r_.__value_.__s.__data_[16] = 1;
        HIDWORD(v109[-1].__r_.__value_.__r.__words[2]) = 12;
      }
      *(void *)buf = &v190;
      sub_1000C63B8((void ***)buf);
    }
    goto LABEL_371;
  }
  v105 = v180;
  if ((unint64_t)v180 >= v181)
  {
    v106 = (std::string *)sub_1003DC28C(&v179);
  }
  else
  {
    bzero(v180, 0x338uLL);
    sub_1003DC3A8((uint64_t)v105);
    v106 = (std::string *)((char *)v105 + 824);
  }
  v180 = v106;
  LODWORD(v106[-7].__r_.__value_.__l.__data_) = 2;
  uint64_t v113 = *(void *)(v21 + 72);
  v112 = *(std::__shared_weak_count **)(v21 + 80);
  if (v112) {
    atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1003D5AAC((uint64_t)&v190, *(_DWORD **)(v21 + 760), *(_DWORD **)(v21 + 768), *(_DWORD *)(v21 + 152));
  uint64_t v211 = 0;
  v210 = 0;
  char v213 = 0;
  uint64_t v212 = 0;
  long long v214 = 0u;
  *(_OWORD *)v215 = 0u;
  uint64_t v216 = 0;
  memset(buf, 0, sizeof(buf));
  long long v200 = 0u;
  *(_OWORD *)v201 = 0u;
  memset(v202, 0, 28);
  long long v203 = 0u;
  long long v204 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  long long v208 = 0u;
  memset(v209, 0, 28);
  char v217 = 2;
  uint64_t v220 = 0;
  int v221 = 0;
  v218 = 0;
  uint64_t v219 = 0;
  v114 = v106 - 29;
  *(_OWORD *)long long __p = 0u;
  long long v223 = 0u;
  long long v224 = 0u;
  long long v225 = 0u;
  long long v226 = 0u;
  char v227 = 0;
  sub_1003DD760(&v106[-29], (uint64_t)buf);
  *(void *)v197 = (char *)&v225 + 8;
  sub_10030FEEC((void ***)v197);
  *(void *)v197 = &v224;
  sub_100047F64((void ***)v197);
  if (SBYTE7(v223) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v115 = a1;
  if (SHIBYTE(v220) < 0) {
    operator delete(v218);
  }
  if (SHIBYTE(v216) < 0) {
    operator delete(v215[0]);
  }
  if (SHIBYTE(v212) < 0) {
    operator delete(v210);
  }
  sub_1000C584C((uint64_t)buf);
  memset(v209, 0, sizeof(v209));
  long long v207 = 0u;
  long long v208 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  memset(v202, 0, sizeof(v202));
  long long v200 = 0u;
  *(_OWORD *)v201 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_1003DABB4(buf, a1 + 184);
  if (v209[24])
  {
    if (!v114->__r_.__value_.__s.__data_[0]) {
      goto LABEL_389;
    }
    *(_OWORD *)&v106[-29].__r_.__value_.__r.__words[1] = *(_OWORD *)buf;
    std::string::operator=(v106 - 28, (const std::string *)&buf[16]);
    std::string::operator=(v106 - 27, (const std::string *)((char *)&v200 + 8));
    std::string::operator=(v106 - 26, (const std::string *)v202);
    LODWORD(v106[-25].__r_.__value_.__l.__data_) = *(_DWORD *)&v202[24];
    std::string::operator=((std::string *)((char *)v106 - 592), (const std::string *)&v203);
    std::string::operator=((std::string *)((char *)v106 - 568), (const std::string *)((char *)&v204 + 8));
    std::string::operator=((std::string *)((char *)v106 - 544), (const std::string *)&v206);
    std::string::operator=((std::string *)((char *)v106 - 520), (const std::string *)((char *)&v207 + 8));
    std::string::operator=((std::string *)((char *)v106 - 496), (const std::string *)v209);
    if (!v114->__r_.__value_.__s.__data_[0]) {
LABEL_389:
    }
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    std::string::operator=((std::string *)((char *)v106 - 464), (const std::string *)&buf[16]);
    int v116 = v209[24];
    uint64_t v115 = a1;
    if (!v195[1].__r_.__value_.__s.__data_[0]) {
      goto LABEL_300;
    }
    if (v209[24])
    {
      uint64_t v117 = BYTE7(v204);
      char v118 = BYTE7(v204);
      uint64_t v119 = *((void *)&v203 + 1);
      if ((SBYTE7(v204) & 0x80u) == 0 ? BYTE7(v204) : *((void *)&v203 + 1))
      {
        uint64_t v121 = HIBYTE(v205);
        if (v205 < 0) {
          uint64_t v121 = v205;
        }
        if (v121)
        {
          *(_WORD *)&v106[-11].__r_.__value_.__s.__data_[2] = 257;
          goto LABEL_302;
        }
      }
    }
  }
  else if (!v195[1].__r_.__value_.__s.__data_[0])
  {
    *(_WORD *)&v106[-11].__r_.__value_.__s.__data_[2] = 257;
    goto LABEL_323;
  }
  long long v198 = 0u;
  memset(v197, 0, sizeof(v197));
  sub_100E63EA4((uint64_t)v197);
  if (!v114->__r_.__value_.__s.__data_[0]
    || (std::string::operator=((std::string *)((char *)v106 - 592), (const std::string *)v197),
        !v114->__r_.__value_.__s.__data_[0])
    || (std::string::operator=((std::string *)((char *)v106 - 568), (const std::string *)&v197[24]),
        !v114->__r_.__value_.__s.__data_[0])
    || (std::string::operator=((std::string *)((char *)v106 - 544), &v194[1]), !v114->__r_.__value_.__s.__data_[0]))
  {
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  std::string::operator=((std::string *)((char *)v106 - 520), v195);
  if (SHIBYTE(v198) < 0) {
    operator delete(*(void **)&v197[24]);
  }
  if ((v197[23] & 0x80000000) != 0) {
    operator delete(*(void **)v197);
  }
  int v116 = v209[24];
LABEL_300:
  *(_WORD *)&v106[-11].__r_.__value_.__s.__data_[2] = 257;
  if (!v116) {
    goto LABEL_323;
  }
  uint64_t v117 = BYTE7(v204);
  uint64_t v119 = *((void *)&v203 + 1);
  char v118 = BYTE7(v204);
LABEL_302:
  if (v118 < 0) {
    uint64_t v117 = v119;
  }
  if (v117)
  {
    uint64_t v122 = HIBYTE(v205);
    if (v205 < 0) {
      uint64_t v122 = v205;
    }
    if (v122)
    {
      *(void *)v188 = 0;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        v124 = *(__CFArray **)v188;
        *(void *)v188 = Mutable;
        *(void *)v197 = v124;
        sub_1000440D4((const void **)v197);
      }
      sub_1001C6B94(*(__CFArray **)v188, @"CarrierName");
      sub_1001C6B94(*(__CFArray **)v188, @"RemoteCardProvisioningSettings");
      CFDictionaryRef theDict = 0;
      if (!v114->__r_.__value_.__s.__data_[0]) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      sub_100044D6C(&v186, (CFTypeRef *)v188);
      (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string::size_type *, std::string::size_type *, std::string::size_type *, std::string::size_type *, unsigned char *, const void **))(*(void *)v113 + 152))(v197, v113, &v106[-25].__r_.__value_.__l.__size_, &v106[-24].__r_.__value_.__l.__size_, &v106[-23].__r_.__value_.__l.__size_, &v106[-22].__r_.__value_.__l.__size_, &buf[16], &v186);
      sub_10004EFE4(&theDict, (CFTypeRef *)v197);
      sub_10005717C((const void **)v197);
      sub_100044D00(&v186);
      if (theDict) {
        v125 = sub_100080778;
      }
      else {
        v125 = 0;
      }
      if (v125)
      {
        CFDictionaryGetValue(theDict, @"CarrierName");
        memset(v197, 0, 24);
        ctu::cf::assign();
        *(void *)&long long v189 = *(void *)&v197[8];
        v126 = *(void **)v197;
        *(void *)((char *)&v189 + 7) = *(void *)&v197[15];
        char v127 = v197[23];
        if (!v114->__r_.__value_.__s.__data_[0]) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        v128 = (void **)&v106[-18].__r_.__value_.__r.__words[2];
        if (v106[-17].__r_.__value_.__s.__data_[15] < 0) {
          operator delete(*v128);
        }
        *v128 = v126;
        v129 = (std::string::__raw *)&v106[-17];
        v129->__words[0] = v189;
        *(std::string::size_type *)((char *)v129->__words + 7) = *(void *)((char *)&v189 + 7);
        v106[-17].__r_.__value_.__s.__data_[15] = v127;
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"RemoteCardProvisioningSettings");
        uint64_t v115 = a1;
        if (Value)
        {
          v131 = (BOOL *)CFDictionaryGetValue(Value, @"ShowE911DisclaimerInStandaloneMode");
          v132 = v131;
          v197[0] = 0;
          if (v131 && (CFTypeID v133 = CFGetTypeID(v131), v133 == CFBooleanGetTypeID()))
          {
            ctu::cf::assign((ctu::cf *)v197, v132, v134);
            char v135 = v197[0];
          }
          else
          {
            char v135 = 0;
          }
          v106[-11].__r_.__value_.__s.__data_[7] = v135;
        }
      }
      sub_100057D78((const void **)&theDict);
      sub_1000440D4((const void **)v188);
      goto LABEL_351;
    }
  }
LABEL_323:
  if (*(_DWORD *)(v115 + 152))
  {
    *(void *)v188 = 0;
    (*(void (**)(int *__return_ptr, uint64_t))(*(void *)v113 + 128))(v188, v113);
    if (*(void *)v188) {
      v136 = sub_1000810B8;
    }
    else {
      v136 = 0;
    }
    if (v136)
    {
      memset(v197, 0, 24);
      ctu::cf::assign();
      *(void *)&long long v189 = *(void *)&v197[8];
      v137 = *(void **)v197;
      *(void *)((char *)&v189 + 7) = *(void *)&v197[15];
      char v138 = v197[23];
      if (!v114->__r_.__value_.__s.__data_[0]) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      v139 = (void **)&v106[-18].__r_.__value_.__r.__words[2];
      if (v106[-17].__r_.__value_.__s.__data_[15] < 0) {
        operator delete(*v139);
      }
      *v139 = v137;
      v140 = (std::string::__raw *)&v106[-17];
      v140->__words[0] = v189;
      *(std::string::size_type *)((char *)v140->__words + 7) = *(void *)((char *)&v189 + 7);
      v106[-17].__r_.__value_.__s.__data_[15] = v138;
    }
    else
    {
      if (*(char *)(v115 + 183) < 0)
      {
        sub_10004FC84(v197, *(void **)(v115 + 160), *(void *)(v115 + 168));
      }
      else
      {
        *(_OWORD *)v197 = *(_OWORD *)(v115 + 160);
        *(void *)&v197[16] = *(void *)(v115 + 176);
      }
      if (!v114->__r_.__value_.__s.__data_[0]) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      v143 = (void **)&v106[-18].__r_.__value_.__r.__words[2];
      if (v106[-17].__r_.__value_.__s.__data_[15] < 0) {
        operator delete(*v143);
      }
      long long v144 = *(_OWORD *)v197;
      v106[-17].__r_.__value_.__l.__size_ = *(void *)&v197[16];
      *(_OWORD *)v143 = v144;
    }
    sub_1000558F4((const void **)v188);
  }
  else
  {
    if (*(char *)(v115 + 183) < 0)
    {
      sub_10004FC84(v197, *(void **)(v115 + 160), *(void *)(v115 + 168));
    }
    else
    {
      *(_OWORD *)v197 = *(_OWORD *)(v115 + 160);
      *(void *)&v197[16] = *(void *)(v115 + 176);
    }
    if (!v114->__r_.__value_.__s.__data_[0]) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    v141 = (void **)&v106[-18].__r_.__value_.__r.__words[2];
    if (v106[-17].__r_.__value_.__s.__data_[15] < 0) {
      operator delete(*v141);
    }
    long long v142 = *(_OWORD *)v197;
    v106[-17].__r_.__value_.__l.__size_ = *(void *)&v197[16];
    *(_OWORD *)v141 = v142;
  }
  uint64_t v115 = a1;
LABEL_351:
  if (v209[24]) {
    sub_1000C584C((uint64_t)buf);
  }
  sub_100397998((uint64_t)&v190);
  if (v112) {
    sub_10004D2C8(v112);
  }
  if (v160)
  {
    if (*(unsigned char *)(v115 + 408))
    {
      int v145 = 11;
LABEL_370:
      HIDWORD(v106[-1].__r_.__value_.__r.__words[2]) = v145;
      goto LABEL_371;
    }
    v146 = *(std::__shared_weak_count **)(v115 + 64);
    if (!v146) {
      goto LABEL_371;
    }
    v147 = std::__shared_weak_count::lock(v146);
    if (!v147) {
      goto LABEL_371;
    }
    v148 = v147;
    uint64_t v149 = *(void *)(v115 + 56);
    if (!v149) {
      goto LABEL_385;
    }
    unint64_t v150 = (*(uint64_t (**)(uint64_t))(*(void *)v149 + 24))(v149);
    if ((_BYTE)v150)
    {
      unint64_t v151 = HIDWORD(v150);
      if (HIDWORD(v150))
      {
        if (HIDWORD(v150) == 1)
        {
          HIDWORD(v106[-1].__r_.__value_.__r.__words[2]) = 7;
          if (!v114->__r_.__value_.__s.__data_[0]) {
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          }
          v106[-12].__r_.__value_.__s.__data_[16] = 1;
          goto LABEL_385;
        }
        if (HIDWORD(v150) != 2)
        {
LABEL_385:
          sub_10004D2C8(v148);
          goto LABEL_371;
        }
      }
      else
      {
        LODWORD(v151) = 6;
      }
    }
    else
    {
      LODWORD(v151) = 2;
    }
    HIDWORD(v106[-1].__r_.__value_.__r.__words[2]) = v151;
    goto LABEL_385;
  }
  if (v159 == 6)
  {
    int v145 = 9;
    goto LABEL_370;
  }
  if (v159 == 7)
  {
    int v145 = 13;
    goto LABEL_370;
  }
LABEL_371:
  void *v163 = 0;
  sub_100CCE0B0(&v179, v163);
  v152 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "#I %s%splan list:", buf, 0x16u);
  }
  *(void *)buf = off_1019C5930;
  *(void *)&buf[8] = a1;
  *(void *)&buf[24] = buf;
  logger::CFTypeRefLogger();
  sub_10012C330(buf);
  *(void *)buf = &v179;
  sub_1003DCCE8((void ***)buf);
LABEL_374:
  *(void *)buf = v184;
  sub_1000C56F4((void ***)buf);
  if (SBYTE7(v183) < 0) {
    operator delete(v182[0]);
  }
}

void sub_1003D562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000558F4(&a66);
  if (LOBYTE(STACK[0x3C8])) {
    sub_1000C584C((uint64_t)&STACK[0x2F0]);
  }
  sub_100397998((uint64_t)&a69);
  if (v69) {
    sub_10004D2C8(v69);
  }
  a69 = (uint64_t)&a52;
  sub_1003DCCE8((void ***)&a69);
  sub_1003CC6D4((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D5918(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 40)) {
    return *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 39);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 24);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 39);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 24);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = (const void **)(a1 + 16);
  char v9 = *(unsigned __int8 **)(a2 + 16);
  v7 = (unsigned __int8 *)(a2 + 16);
  uint64_t v8 = v9;
  if (v5 < 0) {
    v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 24)) == 0;
  }
  if (!*(unsigned char *)(a1 + 39)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    uint64_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

void sub_1003D59E4(Registry *a1@<X0>, void *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a1);
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v5;
  char v9 = sub_10004D37C(&v4[1].__m_.__sig, &v12);
  if (v9)
  {
    uint64_t v11 = v9[3];
    uint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v4);
  *a2 = v11;
  a2[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v10);
  }
}

uint64_t sub_1003D5AAC(uint64_t result, _DWORD *a2, _DWORD *a3, int a4)
{
  uint64_t v4 = (unsigned char *)result;
  if (a3 == a2)
  {
LABEL_6:
    char v8 = 0;
    *uint64_t v4 = 0;
  }
  else
  {
    uint64_t v7 = a2;
    while (1)
    {
      if (*v7 == a4)
      {
        uint64_t result = subscriber::isSimReady();
        if (result) {
          break;
        }
      }
      v7 += 42;
      if (v7 == a3) {
        goto LABEL_6;
      }
    }
    uint64_t result = sub_10002E664((uint64_t)v4, (uint64_t)v7);
    char v8 = 1;
  }
  v4[168] = v8;
  return result;
}

uint64_t sub_1003D5B2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

std::string *sub_1003D5B34(std::string *a1, const std::string *a2)
{
  if (a1[9].__r_.__value_.__s.__data_[16])
  {
    sub_1003DCD6C(a1, a2);
  }
  else
  {
    sub_1003DCE38((char *)a1, (uint64_t)a2);
    a1[9].__r_.__value_.__s.__data_[16] = 1;
  }
  return a1;
}

void sub_1003D5B7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = (uint64_t *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *(void ***)(a1 + 1096);
  uint64_t v4 = (void **)(a1 + 1104);
  if (v3 != (void **)(a1 + 1104))
  {
    do
    {
      v18 = 0;
      uint64_t v6 = *(uint64_t **)(a2 + 8);
      if (*(uint64_t **)a2 == v2)
      {
        char v8 = v2;
        if (!v6) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v7 = v2;
        if (v6)
        {
          do
          {
            char v8 = v6;
            uint64_t v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          do
          {
            char v8 = (uint64_t *)v7[2];
            BOOL v9 = *v8 == (void)v7;
            uint64_t v7 = v8;
          }
          while (v9);
        }
        if ((sub_100046FE8(v8 + 4, v3 + 4) & 0x80) == 0)
        {
          uint64_t v10 = (uint64_t **)sub_100046ED4(a2, &v18, v3 + 4);
          goto LABEL_11;
        }
        if (!*v2)
        {
LABEL_14:
          v18 = v2;
          uint64_t v10 = (uint64_t **)v2;
LABEL_15:
          uint64_t v17 = 0;
          uint64_t v11 = (uint64_t *)operator new(0xF8uLL);
          unint64_t v12 = v11;
          v16[0] = v11;
          v16[1] = v2;
          if (*((char *)v3 + 55) < 0)
          {
            sub_10004FC84((unsigned char *)v11 + 32, v3[4], (unint64_t)v3[5]);
          }
          else
          {
            long long v13 = *((_OWORD *)v3 + 2);
            v11[6] = (uint64_t)v3[6];
            *((_OWORD *)v11 + 2) = v13;
          }
          sub_10023FB90((uint64_t)(v12 + 7), (uint64_t)(v3 + 7));
          LOBYTE(v17) = 1;
          sub_100046C38((uint64_t **)a2, (uint64_t)v18, v10, v16[0]);
          v16[0] = 0;
          sub_1003DF104((uint64_t)v16, 0);
          goto LABEL_19;
        }
      }
      v18 = v8;
      uint64_t v10 = (uint64_t **)(v8 + 1);
LABEL_11:
      if (!*v10) {
        goto LABEL_15;
      }
LABEL_19:
      int v14 = (void **)v3[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          int v14 = (void **)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void **)v3[2];
          BOOL v9 = *v15 == v3;
          uint64_t v3 = v15;
        }
        while (!v9);
      }
      uint64_t v3 = v15;
    }
    while (v15 != v4);
  }
}

void sub_1003D5D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1003DF104((uint64_t)&a9, 0);
  sub_1003DDCEC(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1003D5D6C(uint64_t a1)
{
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  memset(v5, 0, sizeof(v5));
  sub_1003D5E2C(a1, 1, (uint64_t)v5);
  if (!LOBYTE(v5[0]) || (uint64_t v1 = *((void *)&v6 + 1), *((void *)&v6 + 1) == (void)v7))
  {
    uint64_t v3 = 0;
  }
  else
  {
    char v2 = 0;
    do
    {
      if (*(unsigned char *)(v1 + 104) == 2) {
        char v2 = 1;
      }
      v1 += 144;
    }
    while (v1 != (void)v7);
    uint64_t v3 = v2 & 1;
  }
  sub_1003DD04C(v5);
  return v3;
}

unsigned char *sub_1003D5E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  sub_100CCD910(a2, (_DWORD **)(a1 + 760), (char *)v13);
  if (!LOBYTE(v13[0])) {
    goto LABEL_9;
  }
  uint64_t v5 = BYTE7(v15);
  if (SBYTE7(v15) < 0) {
    uint64_t v5 = *((void *)&v14 + 1);
  }
  if (v5)
  {
    long long v6 = sub_1003DF000((void *)(a1 + 104), (unsigned __int8 *)&v14);
    if (v6)
    {
      long long v7 = (uint64_t *)v6;
      long long v8 = (uint64_t *)(v6 + 40);
      if (*(unsigned char *)a3)
      {
        sub_1003DC1E4(a3 + 8, (uint64_t)v8);
        sub_1003DC1E4(a3 + 40, (uint64_t)(v7 + 9));
        if ((uint64_t *)(a3 + 8) != v8)
        {
          sub_1003DAD3C(a3 + 72, v7[13], v7[14], 0x8E38E38E38E38E39 * ((v7[14] - v7[13]) >> 4));
          sub_1003DAFDC(a3 + 96, v7[16], v7[17], 0xCF3CF3CF3CF3CF3DLL * ((v7[17] - v7[16]) >> 3));
        }
      }
      else
      {
        sub_100344514((void *)(a3 + 8), v8);
        *(unsigned char *)a3 = 1;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      uint64_t v12 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E Cannot get subscriptions, sim info %s not found", (uint8_t *)&v11, 0xCu);
    }
  }
  return sub_1003DD210(v13);
}

void sub_1003D6004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1003DD210(va);
  sub_1003DD04C(v3);
  _Unwind_Resume(a1);
}

void sub_1003D602C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 240) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (*(void *)(a1 + 488) != *(void *)(a1 + 480))
  {
    long long v19 = 0uLL;
    long long v20 = 0uLL;
    uint64_t v4 = (_OWORD *)(a1 + 448);
    long long v17 = 0uLL;
    long long v18 = 0uLL;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    long long v14 = 0uLL;
    *(_OWORD *)uint64_t v12 = 0uLL;
    long long v13 = 0uLL;
    *(_OWORD *)uint64_t v10 = 0uLL;
    long long v11 = 0uLL;
    *(_OWORD *)long long v8 = 0uLL;
    long long v9 = 0uLL;
    *(_OWORD *)long long v6 = 0uLL;
    long long v7 = 0uLL;
    std::string::operator=((std::string *)((char *)&v16 + 8), (const std::string *)(a1 + 448));
    *(void *)&long long v18 = *(void *)(a1 + 472);
    if ((long long *)((char *)&v16 + 8) != v4) {
      sub_1003DB294((uint64_t)&v18 + 8, *(void *)(a1 + 480), *(void *)(a1 + 488), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 488) - *(void *)(a1 + 480)) >> 3));
    }
    *(void *)&long long v20 = *(void *)(a1 + 504);
    DWORD2(v20) = *(_DWORD *)(a1 + 512);
    sub_1003DC1E4((uint64_t)v6, a1 + 848);
    if (*(unsigned char *)a2)
    {
      sub_1003DC1E4(a2 + 8, (uint64_t)v6);
      cellplan::RemoteDeviceIdentifiers::operator=();
      std::string::operator=((std::string *)(a2 + 176), (const std::string *)((char *)&v16 + 8));
      *(void *)(a2 + 200) = v18;
      if ((void **)(a2 + 8) != v6) {
        sub_1003DB294(a2 + 208, *((uint64_t *)&v18 + 1), v19, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v19 - *((void *)&v18 + 1)) >> 3));
      }
      *(void *)(a2 + 232) = v20;
      *(_DWORD *)(a2 + 240) = DWORD2(v20);
    }
    else
    {
      sub_100311D64(a2 + 8, (uint64_t)v6);
      *(unsigned char *)a2 = 1;
    }
    uint64_t v5 = (void **)&v18 + 1;
    sub_1000C56F4(&v5);
    if (SHIBYTE(v17) < 0) {
      operator delete(*((void **)&v16 + 1));
    }
    if (SBYTE7(v15) < 0) {
      operator delete((void *)v14);
    }
    if (BYTE8(v11))
    {
      if (SBYTE7(v13) < 0) {
        operator delete(v12[0]);
      }
      BYTE8(v11) = 0;
    }
    if (BYTE8(v9))
    {
      if (SBYTE7(v11) < 0) {
        operator delete(v10[0]);
      }
      BYTE8(v9) = 0;
    }
    if (SBYTE7(v9) < 0) {
      operator delete(v8[0]);
    }
    if (LOBYTE(v6[0]))
    {
      if (SHIBYTE(v7) < 0) {
        operator delete(v6[1]);
      }
    }
  }
}

void sub_1003D6288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000C5634((uint64_t)va);
  if (*v3)
  {
    sub_1000C5634((uint64_t)(v3 + 8));
    *uint64_t v3 = 0;
  }
  _Unwind_Resume(a1);
}

void sub_1003D62B0(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  *(_OWORD *)v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  *(_OWORD *)v30 = 0u;
  long long v27 = 0u;
  *(_OWORD *)__int16 v28 = 0u;
  long long v25 = 0u;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)v24 = 0u;
  long long v22 = 0u;
  sub_1003D602C(a1, (uint64_t)&v22);
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  if (*(unsigned char *)a2) {
    sub_1003C8068((uint64_t)a3, (long long *)(a2 + 8));
  }
  if ((_BYTE)v22)
  {
    uint64_t v21 = 0;
    *(_OWORD *)long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long v17 = 0u;
    long long v18 = 0u;
    memset(v16, 0, sizeof(v16));
    std::string::operator=((std::string *)v16, (const std::string *)v33);
    *(_DWORD *)&v16[24] = *(_DWORD *)(a1 + 912);
    if (*(char *)(a1 + 911) < 0)
    {
      if (*(void *)(a1 + 896)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(a1 + 911))
    {
LABEL_6:
      sub_10032AFC0(v17, (const std::string *)(a1 + 888));
      memset(__p, 0, sizeof(__p));
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)__dst = 0u;
      long long v38 = 0u;
      sub_1003D7C24(a1, (char *)__dst);
      if (LOBYTE(__dst[0]))
      {
        (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 72) + 160))(&v13);
        if (LOBYTE(__p[0]))
        {
          if (SHIBYTE(__p[3]) < 0) {
            operator delete(__p[1]);
          }
          *(_OWORD *)&__p[1] = v13;
          __p[3] = v14;
        }
        else
        {
          *(_OWORD *)&__p[1] = v13;
          __p[3] = v14;
          LOBYTE(__p[0]) = 1;
        }
        if (LOBYTE(__dst[0])) {
          sub_1000C584C((uint64_t)&__dst[1]);
        }
      }
      sub_1003464A0((uint64_t)v19, (uint64_t)__p);
      if (LOBYTE(__p[0]) && SHIBYTE(__p[3]) < 0) {
        operator delete(__p[1]);
      }
      if (*(char *)(a1 + 943) < 0)
      {
        sub_10004FC84(v8, *(void **)(a1 + 920), *(void *)(a1 + 928));
      }
      else
      {
        *(_OWORD *)long long v8 = *(_OWORD *)(a1 + 920);
        long long v9 = *(void **)(a1 + 936);
      }
      if (SHIBYTE(v9) < 0)
      {
        sub_10004FC84(__p, v8[0], (unint64_t)v8[1]);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)v8;
        __p[2] = v9;
      }
      long long v11 = 0;
      if (SHIBYTE(__p[2]) < 0)
      {
        sub_10004FC84(__dst, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)__p;
        *(void **)&long long v38 = __p[2];
      }
      uint64_t v12 = 0;
      if (ctu::cf::convert_copy())
      {
        long long v6 = v11;
        long long v11 = v12;
        *(void *)&long long v13 = v6;
        sub_1000558F4((const void **)&v13);
      }
      if (SBYTE7(v38) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v10 = v11;
      long long v11 = 0;
      sub_1000558F4((const void **)&v11);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      LODWORD(v21) = subscriber::getSlotIdFromUuidStr(v10, v7);
      sub_1000558F4((const void **)&v10);
      if (SHIBYTE(v9) < 0) {
        operator delete(v8[0]);
      }
LABEL_43:
      sub_1003DF15C((uint64_t)a3, (uint64_t)v16);
      if (LOBYTE(v19[0]))
      {
        if (SHIBYTE(v20) < 0) {
          operator delete(v19[1]);
        }
        LOBYTE(v19[0]) = 0;
      }
      if (LOBYTE(v17[0]))
      {
        if (SHIBYTE(v18) < 0) {
          operator delete(v17[1]);
        }
        LOBYTE(v17[0]) = 0;
      }
      if ((v16[23] & 0x80000000) != 0) {
        operator delete(*(void **)v16);
      }
      if ((_BYTE)v22)
      {
        __dst[0] = v35;
        sub_1000C56F4((void ***)__dst);
        if (SBYTE7(v34) < 0) {
          operator delete(v33[0]);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(v30[1]);
        }
        if (LOBYTE(v28[0]))
        {
          if (SHIBYTE(v29) < 0) {
            operator delete(v28[1]);
          }
          LOBYTE(v28[0]) = 0;
        }
        if (LOBYTE(v26[0]))
        {
          if (SHIBYTE(v27) < 0) {
            operator delete(v26[1]);
          }
          LOBYTE(v26[0]) = 0;
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(v24[1]);
        }
        if (BYTE8(v22))
        {
          if (SHIBYTE(v24[0]) < 0) {
            operator delete(v23[0]);
          }
        }
      }
      return;
    }
    if (LOBYTE(v17[0]))
    {
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[1]);
      }
      LOBYTE(v17[0]) = 0;
    }
    if (LOBYTE(v19[0]))
    {
      if (SHIBYTE(v20) < 0) {
        operator delete(v19[1]);
      }
      LOBYTE(v19[0]) = 0;
    }
    goto LABEL_43;
  }
}

void sub_1003D6714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44)
{
  sub_1000558F4(&a17);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_1003C81D8((uint64_t)&a29);
  sub_1003C8134(v44);
  if (a43) {
    sub_1000C5634((uint64_t)&a44);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003D67FC(uint64_t a1)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  *(_OWORD *)long long __p = 0u;
  long long v4 = 0u;
  sub_1003D2230(__p, a1);
  if (*(void *)&v5[0] == *((void *)&v5[0] + 1)) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = *(void *)(*(void *)&v5[0] + 16);
  }
  CFStringRef v7 = (void **)v5;
  sub_1000C56F4(&v7);
  if (SBYTE7(v4) < 0) {
    operator delete(__p[0]);
  }
  return v1;
}

void sub_1003D688C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)a1;
  uint64_t v6 = *(unsigned __int8 *)(a4 + 135);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a4 + 120);
  }
  if (!v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 72) + 640))(&v42);
    (*(void (**)(long long *__return_ptr))(*(void *)v42 + 48))(&v44);
    CFStringRef v7 = (void **)(a4 + 112);
    if (*(char *)(a4 + 135) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)CFStringRef v7 = v44;
    *(void *)(a4 + 128) = v45;
    HIBYTE(v45) = 0;
    LOBYTE(v44) = 0;
    if (v43) {
      sub_10004D2C8(v43);
    }
  }
  long long v8 = (void *)v5[137];
  long long v9 = v5 + 138;
  uint64_t v10 = (std::string *)(a4 + 32);
  if (*(char *)(a4 + 55) < 0)
  {
    sub_10004FC84(__p, *(void **)(a4 + 32), *(void *)(a4 + 40));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    uint64_t v41 = *(void *)(a4 + 48);
  }
  char v11 = HIBYTE(v41);
  if (v8 != v9)
  {
    long long v39 = v5;
    if (v41 >= 0) {
      int64_t v12 = HIBYTE(v41);
    }
    else {
      int64_t v12 = (int64_t)__p[1];
    }
    if (v41 >= 0) {
      long long v13 = __p;
    }
    else {
      long long v13 = (void **)__p[0];
    }
    do
    {
      if ((unint64_t)v12 >= 0x13)
      {
        int v14 = *((char *)v8 + 55);
        if (v14 >= 0) {
          long long v15 = (char *)(v8 + 4);
        }
        else {
          long long v15 = (char *)v8[4];
        }
        uint64_t v16 = v8[5];
        if (v14 >= 0) {
          uint64_t v16 = *((unsigned __int8 *)v8 + 55);
        }
        if (v16 >= v12)
        {
          long long v20 = &v15[v16];
          int v21 = *(char *)v13;
          long long v22 = v15;
          do
          {
            uint64_t v23 = v16 - v12;
            if (v23 == -1) {
              break;
            }
            v24 = (char *)memchr(v22, v21, v23 + 1);
            if (!v24) {
              break;
            }
            long long v25 = v24;
            if (!memcmp(v24, v13, v12))
            {
              if (v25 == v20 || v25 - v15 == -1) {
                break;
              }
              goto LABEL_40;
            }
            long long v22 = v25 + 1;
            uint64_t v16 = v20 - (v25 + 1);
          }
          while (v16 >= v12);
        }
      }
      long long v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          long long v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v8[2];
          BOOL v19 = *v18 == (void)v8;
          long long v8 = v18;
        }
        while (!v19);
      }
      long long v8 = v18;
    }
    while (v18 != v9);
    long long v8 = v9;
LABEL_40:
    uint64_t v10 = (std::string *)(a4 + 32);
    uint64_t v5 = v39;
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v8 != v9)
  {
    uint64_t v26 = *((unsigned __int8 *)v8 + 111);
    if ((v26 & 0x80u) == 0) {
      uint64_t v27 = *((unsigned __int8 *)v8 + 111);
    }
    else {
      uint64_t v27 = v8[12];
    }
    uint64_t v28 = *(unsigned __int8 *)(a4 + 55);
    int v29 = (char)v28;
    if ((v28 & 0x80u) != 0) {
      uint64_t v28 = *(void *)(a4 + 40);
    }
    if (v27 == v28)
    {
      v30 = (const void **)(v8 + 11);
      if (v29 >= 0) {
        long long v31 = v10;
      }
      else {
        long long v31 = (std::string *)v10->__r_.__value_.__r.__words[0];
      }
      if ((v26 & 0x80) == 0)
      {
        if (*((unsigned char *)v8 + 111))
        {
          while (*(unsigned __int8 *)v30 == v31->__r_.__value_.__s.__data_[0])
          {
            v30 = (const void **)((char *)v30 + 1);
            long long v31 = (std::string *)((char *)v31 + 1);
            if (!--v26) {
              goto LABEL_60;
            }
          }
          goto LABEL_59;
        }
LABEL_60:
        if (*((char *)v8 + 87) < 0) {
          uint64_t v32 = v8[9];
        }
        else {
          uint64_t v32 = *((unsigned __int8 *)v8 + 87);
        }
        if (v32 == 32)
        {
          uint64_t v33 = *(unsigned __int8 *)(a4 + 31);
          if ((v33 & 0x80u) != 0) {
            uint64_t v33 = *(void *)(a4 + 16);
          }
          if (v33 != 32) {
            std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v8 + 8));
          }
        }
        if (*(unsigned char *)(a4 + 57) == 1)
        {
          long long v34 = (std::__shared_weak_count *)v5[8];
          if (v34)
          {
            uint64_t v35 = std::__shared_weak_count::lock(v34);
            if (v35)
            {
              uint64_t v36 = v35;
              uint64_t v37 = v5[7];
              if (v37)
              {
                (*(void (**)(long long *__return_ptr))(*(void *)v37 + 96))(&v44);
                long long v38 = (void **)(a4 + 88);
                if (*(char *)(a4 + 111) < 0) {
                  operator delete(*v38);
                }
                *(_OWORD *)long long v38 = v44;
                *(void *)(a4 + 104) = v45;
              }
              sub_10004D2C8(v36);
            }
          }
        }
        return;
      }
      if (!memcmp(*v30, v31, v8[12])) {
        goto LABEL_60;
      }
    }
LABEL_59:
    std::string::operator=(v10, (const std::string *)(v8 + 4));
    goto LABEL_60;
  }
}

void sub_1003D6C2C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D6C50(uint64_t result, uint64_t a2, void *a3)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  uint64_t v3 = a3 + 1;
  long long v4 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    uint64_t v6 = (uint64_t *)result;
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *((unsigned __int8 *)v4 + 143);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *((unsigned __int8 *)v4 + 143);
      }
      else {
        uint64_t v9 = v4[16];
      }
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      if (v9 != v10) {
        goto LABEL_22;
      }
      int64_t v12 = (const void **)(v4 + 15);
      long long v13 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v8 & 0x80) == 0) {
        break;
      }
      uint64_t result = memcmp(*v12, v13, v4[16]);
      if (!result) {
        goto LABEL_18;
      }
LABEL_22:
      long long v15 = (void *)v4[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v4[2];
          BOOL v17 = *v16 == (void)v4;
          long long v4 = v16;
        }
        while (!v17);
      }
      long long v4 = v16;
      if (v16 == v3) {
        return result;
      }
    }
    if (*((unsigned char *)v4 + 143))
    {
      while (*(unsigned __int8 *)v12 == *v13)
      {
        int64_t v12 = (const void **)((char *)v12 + 1);
        ++v13;
        if (!--v8) {
          goto LABEL_18;
        }
      }
      goto LABEL_22;
    }
LABEL_18:
    uint64_t v14 = (uint64_t)(v4 + 7);
    if (v7 >= v6[2])
    {
      uint64_t result = sub_1003DD108(v6, v14);
      unint64_t v7 = result;
    }
    else
    {
      uint64_t result = sub_10023FB90(v7, v14);
      v7 += 192;
      v6[1] = v7;
    }
    v6[1] = v7;
    goto LABEL_22;
  }
  return result;
}

void sub_1003D6D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023FDC8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D6DB0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144)) {
    return 1;
  }
  if (!*(void *)(a1 + 1136)) {
    return 0;
  }
  v23[0] = sub_1003D67FC(a1);
  v23[1] = v4;
  uint64_t v5 = *(void **)(a1 + 1120);
  ctu::hex((uint64_t *)v19, (ctu *)v23, (const void *)0x10, v6);
  unint64_t v7 = (void *)(a1 + 1128);
  if (v5 == (void *)(a1 + 1128))
  {
    uint64_t v1 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v8 = v5[5];
      uint64_t v9 = v5[6];
      if (SHIBYTE(v20) < 0)
      {
        sub_10004FC84(__p, v19[0], (unint64_t)v19[1]);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)v19;
        uint64_t v22 = v20;
      }
      char v10 = HIBYTE(v22);
      if (v8 != v9)
      {
        if (v22 >= 0) {
          int v11 = (void *)HIBYTE(v22);
        }
        else {
          int v11 = __p[1];
        }
        if (v22 >= 0) {
          int64_t v12 = __p;
        }
        else {
          int64_t v12 = (void **)__p[0];
        }
        do
        {
          uint64_t v13 = *(unsigned __int8 *)(v8 + 23);
          if ((v13 & 0x80u) == 0) {
            uint64_t v14 = (void *)*(unsigned __int8 *)(v8 + 23);
          }
          else {
            uint64_t v14 = *(void **)(v8 + 8);
          }
          if (v14 == v11)
          {
            if ((v13 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v8, v12, *(void *)(v8 + 8)))
              {
LABEL_30:
                uint64_t v1 = 1;
                if (v10 < 0) {
                  goto LABEL_31;
                }
                goto LABEL_32;
              }
            }
            else
            {
              if (!*(unsigned char *)(v8 + 23)) {
                goto LABEL_30;
              }
              uint64_t v15 = 0;
              while (*(unsigned __int8 *)(v8 + v15) == *((unsigned __int8 *)v12 + v15))
              {
                if (v13 == ++v15) {
                  goto LABEL_30;
                }
              }
            }
          }
          v8 += 32;
        }
        while (v8 != v9);
      }
      uint64_t v1 = 0;
      if (v10 < 0) {
LABEL_31:
      }
        operator delete(__p[0]);
LABEL_32:
      if (v1) {
        break;
      }
      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)v5[2];
          BOOL v18 = *v17 == (void)v5;
          uint64_t v5 = v17;
        }
        while (!v18);
      }
      uint64_t v5 = v17;
      if (v17 == v7) {
        goto LABEL_43;
      }
    }
    uint64_t v1 = 1;
  }
LABEL_43:
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  return v1;
}

void sub_1003D6F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1003D6FBC@<X0>(uint64_t a1@<X0>, void **a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = (uint64_t)sub_100046F68(a1 + 1096, a2);
  if (a1 + 1104 == result)
  {
    char v6 = 0;
    *a3 = 0;
  }
  else
  {
    uint64_t result = sub_10023FB90((uint64_t)a3, result + 56);
    char v6 = 1;
  }
  a3[192] = v6;
  return result;
}

BOOL sub_1003D7014(void *a1, int a2)
{
  uint64_t v3 = a1[95];
  uint64_t v4 = a1[96];
  if (v3 != v4)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 += 168;
      if (v3 == v4) {
        return 0;
      }
    }
  }
  if (v3 == v4) {
    return 0;
  }
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  *(_OWORD *)long long __p = 0u;
  long long v27 = 0u;
  sub_1003D2230(__p, (uint64_t)a1);
  if (*((void *)&v28[0] + 1) == *(void *)&v28[0]
    || (v24 = 0u, long long v25 = 0u, sub_1000C5E38((uint64_t)&v24, *(void *)&v28[0] + 56), !BYTE8(v25)))
  {
    BOOL v18 = 0;
    goto LABEL_47;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v21 = &v22;
  uint64_t v5 = (void *)a1[137];
  if (v5 == a1 + 138)
  {
LABEL_42:
    BOOL v18 = 0;
    goto LABEL_45;
  }
  do
  {
    uint64_t v6 = *((unsigned __int8 *)v5 + 143);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *((unsigned __int8 *)v5 + 143);
    }
    else {
      uint64_t v7 = v5[16];
    }
    uint64_t v8 = *(unsigned __int8 *)(v3 + 95);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(v3 + 80);
    }
    if (v7 == v8)
    {
      char v10 = (const void **)(v5 + 15);
      if (v9 >= 0) {
        int v11 = (unsigned __int8 *)(v3 + 72);
      }
      else {
        int v11 = *(unsigned __int8 **)(v3 + 72);
      }
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*v10, v11, v5[16])) {
          goto LABEL_27;
        }
LABEL_24:
        if (*((unsigned char *)v5 + 112) != 5 && sub_1003D31E8((uint64_t)a1, (uint64_t)(v5 + 7), 0)) {
          sub_100046BAC((uint64_t **)&v21, (void **)v5 + 4, (uint64_t)(v5 + 4));
        }
        goto LABEL_27;
      }
      if (!*((unsigned char *)v5 + 143)) {
        goto LABEL_24;
      }
      while (*(unsigned __int8 *)v10 == *v11)
      {
        char v10 = (const void **)((char *)v10 + 1);
        ++v11;
        if (!--v6) {
          goto LABEL_24;
        }
      }
    }
LABEL_27:
    int64_t v12 = (void *)v5[1];
    if (v12)
    {
      do
      {
        uint64_t v13 = v12;
        int64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        uint64_t v13 = (void *)v5[2];
        BOOL v14 = *v13 == (void)v5;
        uint64_t v5 = v13;
      }
      while (!v14);
    }
    uint64_t v5 = v13;
  }
  while (v13 != a1 + 138);
  if (!v23) {
    goto LABEL_42;
  }
  long long v15 = v24;
  sub_1000C6BDC(v20, (uint64_t)&v21);
  if ((void)v15 == *((void *)&v15 + 1))
  {
    BOOL v18 = 0;
  }
  else
  {
    uint64_t v16 = v15 + 216;
    do
    {
      uint64_t v17 = sub_10010E128((uint64_t)v20, (void **)(v16 - 200));
      BOOL v18 = v17 != 0;
      if (v17) {
        break;
      }
      BOOL v14 = v16 == *((void *)&v15 + 1);
      v16 += 216;
    }
    while (!v14);
  }
  sub_10005CD2C((uint64_t)v20, (char *)v20[1]);
LABEL_45:
  sub_10005CD2C((uint64_t)&v21, v22);
  if (BYTE8(v25))
  {
    int v21 = (char **)&v24;
    sub_1000C57C8((void ***)&v21);
  }
LABEL_47:
  *(void *)&long long v24 = v28;
  sub_1000C56F4((void ***)&v24);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  return v18;
}

void sub_1003D729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, char *);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_10005CD2C((uint64_t)va, v7);
  if ((_BYTE)v13)
  {
    va_copy((va_list)v5, va1);
    sub_1000C57C8((void ***)va);
  }
  sub_1003CC6D4((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL sub_1003D72F4(uint64_t a1, int a2, void **a3)
{
  uint64_t v5 = sub_100046F68(a1 + 1096, a3);
  if ((void **)(a1 + 1104) == v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 760);
  uint64_t v8 = *(void *)(a1 + 768);
  if (v7 != v8)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 168;
      if (v7 == v8) {
        return 0;
      }
    }
  }
  if (v7 == v8) {
    return 0;
  }
  uint64_t v9 = *((unsigned __int8 *)v5 + 143);
  if ((v9 & 0x80u) == 0) {
    char v10 = (void *)*((unsigned __int8 *)v5 + 143);
  }
  else {
    char v10 = v5[16];
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v7 + 95);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    uint64_t v11 = *(void **)(v7 + 80);
  }
  if (v10 != v11) {
    return 0;
  }
  uint64_t v13 = (const void **)(v5 + 15);
  uint64_t v16 = *(unsigned __int8 **)(v7 + 72);
  BOOL v14 = (unsigned __int8 *)(v7 + 72);
  long long v15 = v16;
  if (v12 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v15;
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v17, (size_t)v5[16])) {
      return 0;
    }
  }
  else if (*((unsigned char *)v5 + 143))
  {
    while (*(unsigned __int8 *)v13 == *v17)
    {
      uint64_t v13 = (const void **)((char *)v13 + 1);
      ++v17;
      if (!--v9) {
        return *((unsigned char *)v6 + 112) == 2;
      }
    }
    return 0;
  }
  return *((unsigned char *)v6 + 112) == 2;
}

BOOL sub_1003D73FC(uint64_t a1, unsigned __int8 *a2)
{
  sub_1003DABB4(v16, a1 + 184);
  if (!v19) {
    return 0;
  }
  uint64_t v3 = a2[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  uint64_t v5 = v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v5 = v17[1];
  }
  if (v4 == v5)
  {
    if ((v18 & 0x80u) == 0) {
      uint64_t v6 = (unsigned __int8 *)v17;
    }
    else {
      uint64_t v6 = (unsigned __int8 *)v17[0];
    }
    if ((v3 & 0x80) != 0)
    {
      BOOL v14 = memcmp(*(const void **)a2, v6, *((void *)a2 + 1)) == 0;
    }
    else if (a2[23])
    {
      uint64_t v7 = v3 - 1;
      do
      {
        int v9 = *a2++;
        int v8 = v9;
        int v11 = *v6++;
        int v10 = v11;
        BOOL v13 = v7-- != 0;
        BOOL v14 = v8 == v10;
      }
      while (v8 == v10 && v13);
    }
    else
    {
      BOOL v14 = 1;
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  sub_1000C584C((uint64_t)v16);
  return v14;
}

void *sub_1003D7518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1003DABB4(v4, a1 + 184);
  if (v7)
  {
    if (SHIBYTE(v6) < 0)
    {
      uint64_t result = sub_10004FC84((unsigned char *)a2, (void *)v5, *((unint64_t *)&v5 + 1));
    }
    else
    {
      *(_OWORD *)a2 = v5;
      *(void *)(a2 + 16) = v6;
    }
  }
  else
  {
    uint64_t result = sub_100058DB0((void *)a2, "");
  }
  if (v7) {
    return (void *)sub_1000C584C((uint64_t)v4);
  }
  return result;
}

void sub_1003D75D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a37) {
    sub_1000C584C((uint64_t)&a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003D75F4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 72) + 640))(v38);
  int v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)&v38[0] + 8))(*(void *)&v38[0], a2);
  if (*((void *)&v38[0] + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v38[0] + 1));
  }
  if (!v4) {
    return 0;
  }
  uint64_t v29 = 0;
  v30 = 0;
  uint64_t v31 = 0;
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 72) + 640))(v38);
  (*(void (**)(long long **__return_ptr))(**(void **)&v38[0] + 32))(&v29);
  if (*((void *)&v38[0] + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v38[0] + 1));
  }
  sub_1003D2230(&__p, a1);
  uint64_t v5 = v27;
  uint64_t v23 = v28;
  if (v27 != v28)
  {
    while (1)
    {
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      memset(v40, 0, sizeof(v40));
      sub_1000C5DA8((uint64_t)v40, v5);
      if ((_BYTE)v44)
      {
        uint64_t v24 = v5;
        uint64_t v6 = *((void *)&v42 + 1);
        uint64_t v7 = v43;
        if (*((void *)&v42 + 1) == (void)v43)
        {
          BOOL v20 = 1;
        }
        else
        {
          do
          {
            uint64_t v39 = 0;
            memset(v38, 0, sizeof(v38));
            sub_1000C5AB4((uint64_t)v38, v6);
            int v8 = v29;
            int v9 = v30;
            sub_1000C5AB4((uint64_t)v34, (uint64_t)v38);
            if (v8 != v9)
            {
              while (1)
              {
                if (*((char *)v8 + 23) < 0)
                {
                  sub_10004FC84(&__dst, *(void **)v8, *((void *)v8 + 1));
                }
                else
                {
                  long long v10 = *v8;
                  uint64_t v33 = *((void *)v8 + 2);
                  long long __dst = v10;
                }
                int v11 = SHIBYTE(v33);
                int v12 = (void *)__dst;
                unint64_t v13 = v33 >= 0 ? HIBYTE(v33) : *((void *)&__dst + 1);
                if ((char)v37 < 0)
                {
                  if (v13 == -1) {
LABEL_60:
                  }
                    sub_1000C14D8();
                  long long v15 = v35;
                  size_t v14 = v36 >= v13 ? v13 : v36;
                }
                else
                {
                  if (v13 == -1) {
                    goto LABEL_60;
                  }
                  size_t v14 = v37 >= v13 ? v13 : v37;
                  long long v15 = &v35;
                }
                if (v33 >= 0) {
                  p_dst = &__dst;
                }
                else {
                  p_dst = (long long *)__dst;
                }
                BOOL v18 = !memcmp(v15, p_dst, v14) && v14 == v13;
                if (v11 < 0) {
                  operator delete(v12);
                }
                if (v18) {
                  break;
                }
                int v8 = (long long *)((char *)v8 + 24);
                if (v8 == v9)
                {
                  int v8 = v9;
                  break;
                }
              }
            }
            char v19 = v30;
            sub_1000C584C((uint64_t)v34);
            sub_1000C584C((uint64_t)v38);
            BOOL v20 = v8 == v19;
            if (v8 != v19) {
              break;
            }
            v6 += 216;
          }
          while (v6 != v7);
          uint64_t v5 = v24;
          if (!(_BYTE)v44) {
            goto LABEL_47;
          }
        }
        *(void *)&v38[0] = (char *)&v42 + 8;
        sub_1000C57C8((void ***)v38);
      }
      else
      {
        BOOL v20 = 1;
      }
LABEL_47:
      if (SBYTE7(v42) < 0) {
        operator delete((void *)v41);
      }
      v5 += 88;
      if (v5 == v23 || !v20) {
        goto LABEL_55;
      }
    }
  }
  BOOL v20 = 1;
LABEL_55:
  *(void *)&v38[0] = &v27;
  sub_1000C56F4((void ***)v38);
  if (v26 < 0) {
    operator delete(__p);
  }
  *(void *)&v38[0] = &v29;
  sub_100047F64((void ***)v38);
  return !v20;
}

void sub_1003D79A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char *a58,uint64_t a59)
{
  a58 = &a22;
  sub_100047F64((void ***)&a58);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D7A34(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  uint64_t v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  uint64_t v7 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 79) = 0;
  *((unsigned char *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  return a1;
}

uint64_t sub_1003D7AF8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  return a1;
}

void *sub_1003D7B84(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_10033FF88(a1, a3);
    a1[1] = sub_10037AC44(v4, a2, a2 + 192 * a3, a1[1]);
  }
  return a1;
}

void sub_1003D7C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10023FDC8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D7C24@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 480);
  if (*(void *)(result + 488) != v3)
  {
    if (*(unsigned char *)(v3 + 80))
    {
      uint64_t v4 = *(void *)(v3 + 56);
      uint64_t v5 = *(void *)(v3 + 64);
      if (v4 != v5)
      {
        int v6 = *(char *)(result + 911);
        uint64_t v7 = (const void **)(result + 888);
        if (v6 >= 0) {
          uint64_t v8 = *(unsigned __int8 *)(result + 911);
        }
        else {
          uint64_t v8 = *(void *)(result + 896);
        }
        do
        {
          uint64_t v9 = *(unsigned __int8 *)(v4 + 39);
          if ((v9 & 0x80u) == 0) {
            uint64_t v10 = *(unsigned __int8 *)(v4 + 39);
          }
          else {
            uint64_t v10 = *(void *)(v4 + 24);
          }
          if (v10 == v8)
          {
            if (v6 >= 0) {
              int v11 = (unsigned __int8 *)v7;
            }
            else {
              int v11 = (unsigned __int8 *)*v7;
            }
            if ((v9 & 0x80) != 0)
            {
              uint64_t result = memcmp(*(const void **)(v4 + 16), v11, *(void *)(v4 + 24));
              if (!result)
              {
LABEL_23:
                *a2 = 0;
                uint64_t result = sub_1000C5AB4((uint64_t)(a2 + 8), v4);
                char v13 = 1;
                goto LABEL_24;
              }
            }
            else
            {
              if (!*(unsigned char *)(v4 + 39)) {
                goto LABEL_23;
              }
              uint64_t v12 = 0;
              while (*(unsigned __int8 *)(v4 + v12 + 16) == v11[v12])
              {
                if (v9 == ++v12) {
                  goto LABEL_23;
                }
              }
            }
          }
          v4 += 216;
        }
        while (v4 != v5);
      }
    }
  }
  char v13 = 0;
LABEL_24:
  *a2 = v13;
  return result;
}

void sub_1003D7D1C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 1128);
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v5 = a1 + 1128;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 1128
    || *(_DWORD *)(v5 + 32) > a2
    || (v10 = *(long long **)(v5 + 40), uint64_t v9 = *(long long **)(v5 + 48), v10 == v9))
  {
LABEL_17:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v11 = (char *)v9 - (char *)v10;
    if ((unint64_t)((char *)v9 - (char *)v10) >= 0x21)
    {
      uint64_t v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 134218242;
        uint64_t v15 = v11 >> 5;
        __int16 v16 = 2080;
        uint64_t v17 = subscriber::asString();
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %lu pending subscriptions for slot %s", (uint8_t *)&v14, 0x16u);
        uint64_t v10 = *(long long **)(v5 + 40);
      }
    }
    if (*((char *)v10 + 23) < 0)
    {
      sub_10004FC84((unsigned char *)a3, *(void **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      *(void *)(a3 + 16) = *((void *)v10 + 2);
      *(_OWORD *)a3 = v13;
    }
  }
}

unsigned char *sub_1003D7E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  sub_1003D5E2C(a1, a2, (uint64_t)v16);
  if (LOBYTE(v16[0]))
  {
    *(void *)(a4 + 144) = 0;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    if (*((void *)&v17 + 1) != (void)v18)
    {
      while (*(_OWORD *)v7 == 0)
      {
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 64);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          if (v11)
          {
            uint64_t v12 = v11;
            uint64_t v13 = *(void *)(a1 + 56);
            if (v13)
            {
              int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, v7);
              sub_10004D2C8(v12);
              if (v14) {
                goto LABEL_9;
              }
            }
            else
            {
              sub_10004D2C8(v12);
            }
          }
        }
LABEL_19:
        v7 += 144;
        if (v7 == v8) {
          return sub_1003DD04C(v16);
        }
      }
      if (*a3 != *(void *)v7 || a3[1] != *(void *)(v7 + 8)) {
        goto LABEL_19;
      }
LABEL_9:
      if (*(unsigned __int8 *)(v7 + 104) - 5 >= 2)
      {
        if (*(unsigned char *)a4)
        {
          *(_OWORD *)(a4 + 8) = *(_OWORD *)v7;
          sub_1003DC1E4(a4 + 24, v7 + 16);
          sub_1003DC1E4(a4 + 56, v7 + 48);
          std::string::operator=((std::string *)(a4 + 88), (const std::string *)(v7 + 80));
          *(unsigned char *)(a4 + 112) = *(unsigned char *)(v7 + 104);
          sub_1003DC1E4(a4 + 120, v7 + 112);
        }
        else
        {
          sub_1003447D4(a4 + 8, v7);
          *(unsigned char *)a4 = 1;
        }
      }
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)a4 = 0;
  }
  return sub_1003DD04C(v16);
}

void sub_1003D806C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

unsigned char *sub_1003D80A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 544))
  {
    *(void *)&long long v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    sub_1003D5E2C(a1, a2, (uint64_t)&v22);
    if ((_BYTE)v22)
    {
      for (uint64_t i = v28; ; i += 168)
      {
        if (i == *((void *)&v28 + 1))
        {
          uint64_t result = sub_1003DD04C(&v22);
          goto LABEL_26;
        }
        BOOL v7 = *(void *)i == *a3 && *(void *)(i + 8) == a3[1];
        BOOL v8 = !v7;
        BOOL v9 = !v8 && *(unsigned char *)(i + 65) == 2;
        if (v9 && *(unsigned __int8 *)(i + 64) - 5 >= 3) {
          break;
        }
      }
      uint64_t v38 = 0;
      long long v37 = 0u;
      long long v35 = 0u;
      memset(v36, 0, sizeof(v36));
      memset(v34, 0, sizeof(v34));
      memset(v33, 0, sizeof(v33));
      long long v31 = 0u;
      long long v32 = 0u;
      sub_1003449E4((uint64_t)&v31, i);
      long long v17 = v32;
      *(_OWORD *)(a4 + 8) = v31;
      uint64_t v18 = *((void *)&v33[1] + 1);
      *(void *)(a4 + 40) = *(void *)&v33[0];
      *(void *)(a4 + 64) = v18;
      *(_WORD *)(a4 + 72) = v34[0];
      *(void *)(a4 + 96) = *((void *)&v34[1] + 1);
      uint64_t v19 = *((void *)&v36[1] + 1);
      *(void *)(a4 + 120) = *(void *)&v36[0];
      *(_OWORD *)(a4 + 24) = v17;
      long long v32 = 0uLL;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)((char *)v33 + 8);
      memset(v33, 0, sizeof(v33));
      *(_OWORD *)(a4 + 80) = *(_OWORD *)((char *)v34 + 8);
      *(_OWORD *)(a4 + 104) = v35;
      long long v20 = *(_OWORD *)((char *)v36 + 8);
      *(void *)(a4 + 144) = v19;
      *(_OWORD *)(a4 + 128) = v20;
      long long v21 = v37;
      *(void *)(a4 + 168) = v38;
      *(_OWORD *)(a4 + 152) = v21;
      *(unsigned char *)a4 = 1;
    }
    else
    {
      *(unsigned char *)a4 = 0;
    }
    return sub_1003DD04C(&v22);
  }
  else
  {
    long long v29 = 0u;
    memset(&v30, 0, sizeof(v30));
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    sub_1003D7E78(a1, a2, a3, (uint64_t)&v22);
    if ((_BYTE)v22)
    {
      uint64_t v38 = 0;
      long long v37 = 0u;
      long long v35 = 0u;
      memset(v36, 0, sizeof(v36));
      memset(v34, 0, sizeof(v34));
      memset(v33, 0, sizeof(v33));
      long long v31 = 0u;
      long long v32 = 0u;
      std::string::operator=((std::string *)((char *)v33 + 8), (const std::string *)((char *)&v27 + 8));
      if (!(_BYTE)v22) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      if (BYTE8(v29)) {
        std::string::operator=((std::string *)&v35, &v30);
      }
      long long v10 = v32;
      *(_OWORD *)(a4 + 8) = v31;
      *(_OWORD *)(a4 + 24) = v10;
      *(void *)(a4 + 40) = *(void *)&v33[0];
      long long v32 = 0uLL;
      *(void *)&v33[0] = 0;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)((char *)v33 + 8);
      *(void *)(a4 + 64) = *((void *)&v33[1] + 1);
      memset((char *)v33 + 8, 0, 24);
      *(_WORD *)(a4 + 72) = v34[0];
      long long v11 = *(_OWORD *)((char *)v34 + 8);
      *(void *)(a4 + 96) = *((void *)&v34[1] + 1);
      *(_OWORD *)(a4 + 80) = v11;
      long long v12 = v35;
      uint64_t v13 = *((void *)&v36[1] + 1);
      *(void *)(a4 + 120) = *(void *)&v36[0];
      *(_OWORD *)(a4 + 104) = v12;
      long long v14 = *(_OWORD *)((char *)v36 + 8);
      *(void *)(a4 + 144) = v13;
      *(_OWORD *)(a4 + 128) = v14;
      long long v15 = v37;
      *(void *)(a4 + 168) = v38;
      *(_OWORD *)(a4 + 152) = v15;
      *(unsigned char *)a4 = 1;
      return sub_1003DD2D4(&v22);
    }
    else
    {
      uint64_t result = sub_1003DD2D4(&v22);
LABEL_26:
      *(unsigned char *)a4 = 0;
    }
  }
  return result;
}

void sub_1003D8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1003D83C8(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = sub_100046F68(a1 + 1096, (void **)&a2->__r_.__value_.__l.__data_);
  if ((void **)(a1 + 1104) == v6)
  {
    *(unsigned char *)a3 = 0;
    return;
  }
  BOOL v7 = v6;
  bzero(&v13, 0x310uLL);
  std::string::operator=(&v13, a2);
  std::string::operator=(&__p, (const std::string *)v7 + 8);
  if (*((unsigned char *)v7 + 240))
  {
    LOBYTE(v14) = 1;
    sub_100093B44(&v22, (const std::string *)v7 + 9);
  }
  else
  {
    uint64_t v9 = 0;
    long long v11 = 0u;
    long long v10 = &v11;
    char v12 = 1;
    memset(v8, 0, sizeof(v8));
    sub_10034620C((uint64_t)&v17, (uint64_t)v8);
    sub_1003107E0((uint64_t)v8);
    std::string::operator=(v18, (const std::string *)v7 + 5);
    std::string::operator=(&v17, (const std::string *)v7 + 9);
  }
  if (*((unsigned char *)v7 + 113) == 2)
  {
    if (*((char *)v7 + 143) < 0)
    {
      if (!v7[16]) {
        goto LABEL_11;
      }
    }
    else if (!*((unsigned char *)v7 + 143))
    {
LABEL_11:
      if (CFAbsoluteTimeGetCurrent() - *((double *)v7 + 7) > 43200.0) {
        LOBYTE(v14) = 1;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(std::string *)(a3 + 8) = v13;
  memset(&v13, 0, sizeof(v13));
  *(_WORD *)(a3 + 32) = v14;
  *(unsigned char *)(a3 + 34) = v15;
  *(std::string *)(a3 + 40) = __p;
  memset(&__p, 0, sizeof(__p));
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 400) = 0;
  if (v19)
  {
    sub_1003465B8(a3 + 64, (long long *)&v17);
    *(unsigned char *)(a3 + 400) = 1;
  }
  *(unsigned char *)(a3 + 408) = 0;
  *(unsigned char *)(a3 + 752) = 0;
  if (v21)
  {
    sub_1003DF3C0(a3 + 408, (uint64_t)v20);
    *(unsigned char *)(a3 + 752) = 1;
  }
  *(unsigned char *)(a3 + 760) = 0;
  *(unsigned char *)(a3 + 784) = 0;
  if (v23)
  {
    *(std::string *)(a3 + 760) = v22;
    memset(&v22, 0, sizeof(v22));
    *(unsigned char *)(a3 + 784) = 1;
  }
  *(unsigned char *)a3 = 1;
  if (v21) {
    sub_100310520((uint64_t)v20);
  }
  sub_1003107E0((uint64_t)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1003D8684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1003D86A8@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)result;
  if (result[544])
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    memset(v22, 0, sizeof(v22));
    __p[0] = (void *)sub_1003D67FC((uint64_t)result);
    __p[1] = v6;
    sub_1003D80A0(v4, a2, __p, (uint64_t)v22);
    sub_1003D2230(__p, v4);
    uint64_t v7 = v19;
    uint64_t v14 = v19;
    uint64_t v13 = v20;
    long long v15 = v20;
    long long v20 = 0uLL;
    uint64_t v19 = 0;
    __int16 v16 = (void **)&v19;
    sub_1000C56F4(&v16);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if (!LOBYTE(v22[0]) || v7 == v13 || !*(unsigned char *)(v7 + 80) || BYTE8(v24) == 1)
    {
      *(unsigned char *)a3 = 0;
LABEL_9:
      __p[0] = &v14;
      sub_1000C56F4((void ***)__p);
      return sub_1003DD394(v22);
    }
    VinylInfo::findProfileWithPrefix();
    if (v21)
    {
      sub_1000C584C((uint64_t)__p);
      if (!LOBYTE(v22[0])) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      if (SBYTE7(v24) < 0)
      {
        sub_10004FC84(__p, (void *)v23, *((unint64_t *)&v23 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = v23;
        uint64_t v18 = v24;
      }
      *(_OWORD *)(a3 + 8) = *(_OWORD *)__p;
      *(void *)(a3 + 24) = v18;
      *(_DWORD *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(_DWORD *)(a3 + 88) = 0;
      *(unsigned char *)a3 = 1;
      goto LABEL_9;
    }
    __p[0] = &v14;
    sub_1000C56F4((void ***)__p);
    uint64_t result = sub_1003DD394(v22);
    goto LABEL_30;
  }
  uint64_t v8 = *((void *)result + 123);
  if (v8)
  {
    uint64_t v9 = result + 984;
    do
    {
      int v10 = *(_DWORD *)(v8 + 32);
      BOOL v11 = v10 < (int)a2;
      if (v10 >= (int)a2) {
        char v12 = (uint64_t *)v8;
      }
      else {
        char v12 = (uint64_t *)(v8 + 8);
      }
      if (!v11) {
        uint64_t v9 = (unsigned char *)v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if (v9 != result + 984 && *((_DWORD *)v9 + 8) <= (int)a2)
    {
      if (((char)v9[63] & 0x80000000) == 0)
      {
        if (!v9[63]) {
          goto LABEL_30;
        }
LABEL_29:
        *(unsigned char *)a3 = 0;
        uint64_t result = sub_10037AA60((char *)(a3 + 8), (long long *)(v9 + 40));
        *(unsigned char *)a3 = 1;
        return result;
      }
      if (*((void *)v9 + 6)) {
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  *(unsigned char *)a3 = 0;
  return result;
}

void sub_1003D892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_1000C56F4(&a15);
  sub_1003DD394((unsigned char *)(v15 - 224));
  _Unwind_Resume(a1);
}

void sub_1003D8964(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = a1;
  v151[0] = sub_1003D67FC(a1);
  v151[1] = v6;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v7 = *(void *)(v4 + 760);
  uint64_t v8 = *(void *)(v4 + 768);
  if (v7 != v8)
  {
    int v9 = 0;
    CFTypeID v133 = (void *)(v4 + 1096);
    std::string::size_type v128 = (std::string::size_type)(a3 + 2);
    uint64_t v134 = v4;
    char v127 = a3;
    uint64_t v132 = *(void *)(v4 + 768);
    while ((subscriber::isSimReady() & 1) == 0)
    {
      char v118 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        uint64_t v119 = subscriber::asString();
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v119;
        _os_log_error_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_ERROR, "SIM in slot (%s) is not ready yet", (uint8_t *)buf, 0xCu);
      }
LABEL_165:
      v7 += 168;
      if (v7 == v8) {
        goto LABEL_168;
      }
    }
    uint64_t v143 = 0;
    uint64_t v144 = 0;
    uint64_t v135 = v7;
    uint64_t v145 = 0;
    sub_1003D6C50((uint64_t)&v143, v7 + 72, v133);
    uint64_t v11 = v143;
    uint64_t v10 = v144;
    for (i = v144; ; uint64_t v10 = i)
    {
      if (v11 == v10)
      {
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
        sub_10023FDC8((void ***)buf);
        uint64_t v7 = v135;
        uint64_t v8 = v132;
        goto LABEL_165;
      }
      uint64_t v12 = a2[23];
      size_t v13 = *((void *)a2 + 1);
      if ((v12 & 0x80u) == 0) {
        uint64_t v14 = a2[23];
      }
      else {
        uint64_t v14 = *((void *)a2 + 1);
      }
      if (v14)
      {
        uint64_t v15 = *(unsigned __int8 *)(v11 + 31);
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(v11 + 16);
        }
        if (v14 != v15) {
          goto LABEL_23;
        }
        if (v16 >= 0) {
          std::string v17 = (unsigned __int8 *)(v11 + 8);
        }
        else {
          std::string v17 = *(unsigned __int8 **)(v11 + 8);
        }
        if ((v12 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v17, v13)) {
            goto LABEL_23;
          }
        }
        else if (a2[23])
        {
          uint64_t v18 = a2;
          while (*v18 == *v17)
          {
            ++v18;
            ++v17;
            if (!--v12) {
              goto LABEL_25;
            }
          }
LABEL_23:
          uint64_t v19 = *(NSObject **)(v4 + 40);
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_47;
          }
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          long long v20 = v19;
          char v21 = "#I Not the device we are looking for";
LABEL_46:
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)buf, 2u);
          goto LABEL_47;
        }
      }
LABEL_25:
      ctu::hex((uint64_t *)buf, (ctu *)v151, (const void *)0x10, v13);
      std::string v22 = (const void **)(v11 + 8);
      uint64_t v23 = *(unsigned __int8 *)(v11 + 31);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = *(unsigned __int8 *)(v11 + 31);
      }
      else {
        uint64_t v24 = *(void *)(v11 + 16);
      }
      std::string::size_type size = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      int v26 = SHIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = buf[0].__r_.__value_.__l.__size_;
      }
      if (v24 == size)
      {
        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v27 = buf;
        }
        else {
          long long v27 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        }
        if ((v23 & 0x80) != 0)
        {
          BOOL v32 = memcmp(*v22, v27, *(void *)(v11 + 16)) == 0;
          if ((v26 & 0x80000000) == 0) {
            goto LABEL_43;
          }
        }
        else if (*(unsigned char *)(v11 + 31))
        {
          uint64_t v28 = 0;
          uint64_t v29 = v23 - 1;
          do
          {
            int v30 = v27->__r_.__value_.__s.__data_[v28];
            int v31 = *(unsigned __int8 *)(v11 + v28 + 8);
            BOOL v32 = v31 == v30;
          }
          while (v31 == v30 && v29 != v28++);
          if ((SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_43:
            if (v32) {
              goto LABEL_44;
            }
            goto LABEL_50;
          }
        }
        else
        {
          BOOL v32 = 1;
          if ((SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_43;
          }
        }
      }
      else
      {
        BOOL v32 = 0;
        if ((SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_43;
        }
      }
      operator delete(buf[0].__r_.__value_.__l.__data_);
      if (v32)
      {
LABEL_44:
        long long v34 = *(NSObject **)(v4 + 40);
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        long long v20 = v34;
        char v21 = "#I Skipping - same Eid";
        goto LABEL_46;
      }
LABEL_50:
      if (*(unsigned char *)(v11 + 185) && *(unsigned char *)(v11 + 56) == 2)
      {
        int v35 = *(unsigned __int8 *)(v11 + 57);
        if (*(unsigned char *)(v4 + 544))
        {
          if (v35 != 2) {
            goto LABEL_47;
          }
        }
        else if (v35 != 1)
        {
          goto LABEL_47;
        }
        int v136 = v9;
        unint64_t v37 = *a3;
        unint64_t v36 = a3[1];
        if (*(char *)(v11 + 31) < 0)
        {
          sub_10004FC84(__p, *(void **)(v11 + 8), *(void *)(v11 + 16));
        }
        else
        {
          long long v38 = *(_OWORD *)v22;
          uint64_t v142 = *(void *)(v11 + 24);
          *(_OWORD *)std::string __p = v38;
        }
        char v39 = HIBYTE(v142);
        if (v37 != v36)
        {
          if (v142 >= 0) {
            long long v40 = (void *)HIBYTE(v142);
          }
          else {
            long long v40 = __p[1];
          }
          if (v142 >= 0) {
            long long v41 = __p;
          }
          else {
            long long v41 = (void **)__p[0];
          }
          do
          {
            uint64_t v42 = *(unsigned __int8 *)(v37 + 47);
            if ((v42 & 0x80u) == 0) {
              long long v43 = (void *)*(unsigned __int8 *)(v37 + 47);
            }
            else {
              long long v43 = *(void **)(v37 + 32);
            }
            if (v43 == v40)
            {
              if ((v42 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v37 + 24), v41, *(void *)(v37 + 32))) {
                  goto LABEL_83;
                }
              }
              else
              {
                if (!*(unsigned char *)(v37 + 47)) {
                  goto LABEL_83;
                }
                uint64_t v44 = 0;
                while (*(unsigned __int8 *)(v37 + v44 + 24) == *((unsigned __int8 *)v41 + v44))
                {
                  if (v42 == ++v44) {
                    goto LABEL_83;
                  }
                }
              }
            }
            v37 += 72;
          }
          while (v37 != v36);
          unint64_t v37 = v36;
        }
LABEL_83:
        if (v39 < 0) {
          operator delete(__p[0]);
        }
        if (v37 == a3[1])
        {
          uint64_t v140 = 0;
          long long v139 = 0u;
          memset(v138, 0, sizeof(v138));
          uint64_t v46 = v37 - *a3;
          uint64_t v47 = v46 / 72;
          unint64_t v48 = *a3;
          uint64_t v45 = *a3 + 72 * (v46 / 72);
          unint64_t v49 = a3[2];
          if (v37 >= v49)
          {
            unint64_t v54 = v47 + 1;
            if ((unint64_t)(v47 + 1) > 0x38E38E38E38E38ELL) {
              sub_10006A748();
            }
            uint64_t v55 = v46 / 72;
            unint64_t v131 = *a3;
            unint64_t v56 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - v48) >> 3);
            uint64_t v57 = 2 * v56;
            if (2 * v56 <= v54) {
              uint64_t v57 = v47 + 1;
            }
            if (v56 >= 0x1C71C71C71C71C7) {
              unint64_t v58 = 0x38E38E38E38E38ELL;
            }
            else {
              unint64_t v58 = v57;
            }
            std::string::size_type v155 = v128;
            if (v58) {
              unint64_t v58 = (unint64_t)sub_1003DD510(v58);
            }
            else {
              uint64_t v59 = 0;
            }
            unint64_t v79 = v58 + 72 * v55;
            *(void *)&long long v152 = v58;
            *((void *)&v152 + 1) = v79;
            uint64_t v153 = v79;
            v154 = (char *)(v58 + 72 * v59);
            if (v55 == v59)
            {
              if (v46 < 1)
              {
                if (v131 == v37) {
                  unint64_t v80 = 1;
                }
                else {
                  unint64_t v80 = 2 * v55;
                }
                buf[1].__r_.__value_.__l.__size_ = v128;
                uint64_t v81 = (char *)sub_1003DD510(v80);
                std::string::size_type v83 = *((void *)&v152 + 1);
                std::string::size_type v84 = v153;
                std::string::size_type v85 = *((void *)&v152 + 1);
                uint64_t v86 = (uint64_t)&v81[72 * (v80 >> 2)];
                if (v153 != *((void *)&v152 + 1))
                {
                  uint64_t v86 = (uint64_t)&v81[72 * (v80 >> 2) + v153 - *((void *)&v152 + 1)];
                  int v87 = &v81[72 * (v80 >> 2)];
                  int v88 = (long long *)*((void *)&v152 + 1);
                  do
                  {
                    long long v89 = *v88;
                    *((void *)v87 + 2) = *((void *)v88 + 2);
                    *(_OWORD *)int v87 = v89;
                    *((void *)v88 + 1) = 0;
                    *((void *)v88 + 2) = 0;
                    *(void *)int v88 = 0;
                    long long v90 = *(long long *)((char *)v88 + 24);
                    *((void *)v87 + 5) = *((void *)v88 + 5);
                    *(_OWORD *)(v87 + 24) = v90;
                    *((void *)v88 + 4) = 0;
                    *((void *)v88 + 5) = 0;
                    *((void *)v88 + 3) = 0;
                    *((void *)v87 + 6) = 0;
                    *((void *)v87 + 7) = 0;
                    *((void *)v87 + 8) = 0;
                    *((_OWORD *)v87 + 3) = v88[3];
                    *((void *)v87 + 8) = *((void *)v88 + 8);
                    *((void *)v88 + 6) = 0;
                    *((void *)v88 + 7) = 0;
                    *((void *)v88 + 8) = 0;
                    v87 += 72;
                    int v88 = (long long *)((char *)v88 + 72);
                  }
                  while (v87 != (char *)v86);
                  std::string::size_type v85 = v84;
                }
                std::string::size_type v91 = v152;
                std::string::size_type v92 = (std::string::size_type)v154;
                *(void *)&long long v152 = v81;
                *((void *)&v152 + 1) = &v81[72 * (v80 >> 2)];
                buf[0].__r_.__value_.__r.__words[0] = v91;
                buf[0].__r_.__value_.__l.__size_ = v83;
                uint64_t v153 = v86;
                v154 = &v81[72 * v82];
                buf[0].__r_.__value_.__r.__words[2] = v85;
                buf[1].__r_.__value_.__r.__words[0] = v92;
                sub_1003DD55C((uint64_t)buf);
                unint64_t v79 = v153;
              }
              else
              {
                v79 -= 72 * (v54 >> 1);
                *((void *)&v152 + 1) = v79;
                uint64_t v153 = v79;
              }
            }
            long long v93 = *(_OWORD *)&v138[0].__r_.__value_.__l.__data_;
            *(void *)(v79 + 16) = *((void *)&v138[0].__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v79 = v93;
            memset(v138, 0, 24);
            std::string::size_type v94 = v138[1].__r_.__value_.__r.__words[2];
            *(_OWORD *)(v79 + 24) = *(_OWORD *)&v138[1].__r_.__value_.__l.__data_;
            *(void *)(v79 + 40) = v94;
            *(void *)(v79 + 48) = 0;
            memset(&v138[1], 0, sizeof(std::string));
            *(void *)(v79 + 56) = 0;
            *(void *)(v79 + 64) = 0;
            *(_OWORD *)(v79 + 48) = v139;
            *(void *)(v79 + 64) = v140;
            long long v139 = 0uLL;
            uint64_t v140 = 0;
            uint64_t v95 = *((void *)&v152 + 1);
            uint64_t v96 = v153 + 72;
            v153 += 72;
            unint64_t v97 = *a3;
            if (*a3 == v45)
            {
              unint64_t v99 = *((void *)&v152 + 1);
            }
            else
            {
              uint64_t v98 = v45;
              unint64_t v99 = *((void *)&v152 + 1);
              do
              {
                long long v100 = *(_OWORD *)(v98 - 72);
                *(void *)(v99 - 56) = *(void *)(v98 - 56);
                *(_OWORD *)(v99 - 72) = v100;
                *(void *)(v98 - 64) = 0;
                *(void *)(v98 - 56) = 0;
                *(void *)(v98 - 72) = 0;
                long long v101 = *(_OWORD *)(v98 - 48);
                *(void *)(v99 - 32) = *(void *)(v98 - 32);
                *(_OWORD *)(v99 - 48) = v101;
                *(void *)(v98 - 40) = 0;
                *(void *)(v98 - 32) = 0;
                *(void *)(v98 - 48) = 0;
                *(void *)(v99 - 24) = 0;
                *(void *)(v99 - 16) = 0;
                *(void *)(v99 - 8) = 0;
                *(_OWORD *)(v99 - 24) = *(_OWORD *)(v98 - 24);
                *(void *)(v99 - 8) = *(void *)(v98 - 8);
                v99 -= 72;
                *(void *)(v98 - 24) = 0;
                *(void *)(v98 - 16) = 0;
                *(void *)(v98 - 8) = 0;
                v98 -= 72;
              }
              while (v98 != v97);
              uint64_t v96 = v153;
            }
            *((void *)&v152 + 1) = v99;
            unint64_t v102 = a3[1];
            if (v102 != v45)
            {
              do
              {
                long long v103 = *(_OWORD *)v45;
                *(void *)(v96 + 16) = *(void *)(v45 + 16);
                *(_OWORD *)uint64_t v96 = v103;
                *(void *)(v45 + 8) = 0;
                *(void *)(v45 + 16) = 0;
                *(void *)uint64_t v45 = 0;
                long long v104 = *(_OWORD *)(v45 + 24);
                *(void *)(v96 + 40) = *(void *)(v45 + 40);
                *(_OWORD *)(v96 + 24) = v104;
                *(void *)(v45 + 32) = 0;
                *(void *)(v45 + 40) = 0;
                *(void *)(v45 + 24) = 0;
                *(void *)(v96 + 48) = 0;
                *(void *)(v96 + 56) = 0;
                *(void *)(v96 + 64) = 0;
                *(_OWORD *)(v96 + 48) = *(_OWORD *)(v45 + 48);
                *(void *)(v96 + 64) = *(void *)(v45 + 64);
                *(void *)(v45 + 48) = 0;
                *(void *)(v45 + 56) = 0;
                *(void *)(v45 + 64) = 0;
                v96 += 72;
                v45 += 72;
              }
              while (v45 != v102);
              unint64_t v99 = *((void *)&v152 + 1);
              uint64_t v45 = a3[1];
            }
            unint64_t v105 = *a3;
            *a3 = v99;
            a3[1] = v96;
            v106 = (char *)a3[2];
            a3[2] = (unint64_t)v154;
            uint64_t v153 = v45;
            v154 = v106;
            *(void *)&long long v152 = v105;
            *((void *)&v152 + 1) = v105;
            sub_1003DD55C((uint64_t)&v152);
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v129 = v46 / 72;
            if (v45 == v37)
            {
              *(void *)unint64_t v37 = 0;
              *(void *)(v37 + 8) = 0;
              *(void *)(v37 + 16) = 0;
              memset(v138, 0, 24);
              unint64_t v77 = v48 + 72 * v129;
              long long v78 = *(_OWORD *)&v138[1].__r_.__value_.__l.__data_;
              *(void *)(v77 + 40) = *((void *)&v138[1].__r_.__value_.__l + 2);
              *(_OWORD *)(v77 + 24) = v78;
              memset(&v138[1], 0, sizeof(std::string));
              *(void *)(v77 + 48) = 0;
              *(void *)(v77 + 56) = 0;
              *(void *)(v77 + 64) = 0;
              *(_OWORD *)(v77 + 48) = v139;
              *(void *)(v77 + 64) = v140;
              long long v139 = 0uLL;
              uint64_t v140 = 0;
              a3[1] = v37 + 72;
              uint64_t v45 = v37;
            }
            else
            {
              unint64_t v130 = *a3;
              *((void *)&v149 + 1) = v128;
              memset(buf, 0, 24);
              memset(v138, 0, sizeof(v138));
              buf[1] = v138[1];
              *(void *)&long long v149 = 0;
              long long v148 = 0uLL;
              long long v139 = 0uLL;
              unint64_t v50 = v37 - 72;
              unint64_t v51 = v37;
              uint64_t v140 = 0;
              while (v50 < v37)
              {
                long long v52 = *(_OWORD *)v50;
                *(void *)(v51 + 16) = *(void *)(v50 + 16);
                *(_OWORD *)unint64_t v51 = v52;
                *(void *)(v50 + 8) = 0;
                *(void *)(v50 + 16) = 0;
                *(void *)unint64_t v50 = 0;
                long long v53 = *(_OWORD *)(v50 + 24);
                *(void *)(v51 + 40) = *(void *)(v50 + 40);
                *(_OWORD *)(v51 + 24) = v53;
                *(void *)(v50 + 32) = 0;
                *(void *)(v50 + 40) = 0;
                *(void *)(v50 + 24) = 0;
                *(void *)(v51 + 48) = 0;
                *(void *)(v51 + 56) = 0;
                *(void *)(v51 + 64) = 0;
                *(_OWORD *)(v51 + 48) = *(_OWORD *)(v50 + 48);
                *(void *)(v51 + 64) = *(void *)(v50 + 64);
                *(void *)(v50 + 48) = 0;
                *(void *)(v50 + 56) = 0;
                *(void *)(v50 + 64) = 0;
                v51 += 72;
                v50 += 72;
              }
              uint64_t v60 = v45 + 72;
              a3[1] = v51;
              if (v37 != v45 + 72)
              {
                uint64_t v61 = 0;
                unint64_t v62 = v130 + 8 * ((uint64_t)(v37 - v60) >> 3) + 72 * v129;
                uint64_t v63 = -8 * ((uint64_t)(v37 - v60) >> 3);
                do
                {
                  uint64_t v64 = v37 + v61;
                  char v65 = (void **)(v37 + v61 - 72);
                  if (*(char *)(v37 + v61 - 49) < 0) {
                    operator delete(*v65);
                  }
                  v66 = (long long *)(v62 + v61 - 72);
                  long long v67 = *v66;
                  *(void *)(v37 + v61 - 56) = *(void *)(v62 + v61 - 56);
                  *(_OWORD *)char v65 = v67;
                  *(unsigned char *)(v62 + v61 - 49) = 0;
                  *(unsigned char *)v66 = 0;
                  uint64_t v68 = v64 - 48;
                  if (*(char *)(v64 - 25) < 0) {
                    operator delete(*(void **)v68);
                  }
                  uint64_t v69 = v62 + v61;
                  long long v70 = *(_OWORD *)(v62 + v61 - 48);
                  *(void *)(v68 + 16) = *(void *)(v62 + v61 - 32);
                  *(_OWORD *)uint64_t v68 = v70;
                  *(unsigned char *)(v69 - 25) = 0;
                  *(unsigned char *)(v69 - 48) = 0;
                  uint64_t v71 = v37 + v61;
                  sub_1003DD450((void **)(v37 + v61 - 24));
                  *(_OWORD *)(v71 - 24) = *(_OWORD *)(v62 + v61 - 24);
                  *(void *)(v71 - 8) = *(void *)(v62 + v61 - 8);
                  *(void *)(v69 - 24) = 0;
                  *(void *)(v69 - 16) = 0;
                  *(void *)(v69 - 8) = 0;
                  v61 -= 72;
                }
                while (v63 != v61);
              }
              if (*(char *)(v45 + 23) < 0) {
                operator delete(*(void **)v45);
              }
              long long v72 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              *(void *)(v45 + 16) = *((void *)&buf[0].__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v45 = v72;
              *((unsigned char *)&buf[0].__r_.__value_.__s + 23) = 0;
              buf[0].__r_.__value_.__s.__data_[0] = 0;
              unint64_t v73 = v130;
              uint64_t v74 = (void **)(v130 + 72 * v129 + 24);
              if (*(char *)(v45 + 47) < 0)
              {
                operator delete(*v74);
                unint64_t v73 = v130;
              }
              long long v75 = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
              *(void *)(v130 + 72 * v129 + 40) = *((void *)&buf[1].__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v74 = v75;
              *((unsigned char *)&buf[1].__r_.__value_.__s + 23) = 0;
              buf[1].__r_.__value_.__s.__data_[0] = 0;
              unint64_t v76 = v73 + 72 * v129;
              sub_1003DD450((void **)(v76 + 48));
              *(void *)(v76 + 48) = 0;
              *(void *)(v76 + 56) = 0;
              *(void *)(v76 + 64) = 0;
              long long v148 = 0uLL;
              *(void *)&long long v149 = 0;
              sub_1003DD4B8((uint64_t)buf);
              a3 = v127;
              uint64_t v4 = v134;
            }
          }
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
          sub_10016A9A4((void ***)buf);
          if (SHIBYTE(v138[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v138[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138[0].__r_.__value_.__l.__data_);
          }
          std::string::operator=((std::string *)(v45 + 24), (const std::string *)(v11 + 8));
        }
        else
        {
          uint64_t v45 = v37;
        }
        long long v149 = 0u;
        long long v150 = 0u;
        long long v148 = 0u;
        memset(buf, 0, sizeof(buf));
        std::string::operator=(buf, (const std::string *)(v11 + 32));
        (*(void (**)(const void **__return_ptr))(**(void **)(v4 + 72) + 296))(&v146);
        memset(v138, 0, 24);
        ctu::cf::assign();
        *(void *)&long long v152 = v138[0].__r_.__value_.__l.__size_;
        std::string::size_type v107 = v138[0].__r_.__value_.__r.__words[0];
        *(void *)((char *)&v152 + 7) = *(std::string::size_type *)((char *)&v138[0].__r_.__value_.__r.__words[1] + 7);
        char v108 = HIBYTE(v138[0].__r_.__value_.__r.__words[2]);
        if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[1].__r_.__value_.__l.__data_);
        }
        buf[1].__r_.__value_.__r.__words[0] = v107;
        buf[1].__r_.__value_.__l.__size_ = v152;
        *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v152 + 7);
        *((unsigned char *)&buf[1].__r_.__value_.__s + 23) = v108;
        sub_1000558F4(&v146);
        std::string::operator=((std::string *)((char *)&v149 + 8), (const std::string *)(v11 + 64));
        uint64_t v4 = v134;
        unint64_t v109 = *(void *)(v45 + 64);
        unint64_t v110 = *(void *)(v45 + 56);
        if (v110 >= v109)
        {
          uint64_t v112 = *(void *)(v45 + 48);
          unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - v112) >> 5);
          if (v113 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_10006A748();
          }
          unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - v112) >> 5);
          uint64_t v115 = 2 * v114;
          if (2 * v114 <= v113 + 1) {
            uint64_t v115 = v113 + 1;
          }
          if (v114 >= 0x155555555555555) {
            unint64_t v116 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v116 = v115;
          }
          v138[1].__r_.__value_.__l.__size_ = v45 + 64;
          if (v116) {
            uint64_t v117 = sub_100157260(v45 + 64, v116);
          }
          else {
            uint64_t v117 = 0;
          }
          v138[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
          v138[0].__r_.__value_.__l.__size_ = (std::string::size_type)v117 + 96 * v113;
          v138[0].__r_.__value_.__r.__words[2] = v138[0].__r_.__value_.__l.__size_;
          v138[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v117 + 96 * v116;
          sub_1003DD5AC((char *)v138[0].__r_.__value_.__l.__size_, (long long *)buf);
          v138[0].__r_.__value_.__r.__words[2] += 96;
          sub_10016A810((uint64_t *)(v45 + 48), v138);
          unint64_t v111 = *(void *)(v45 + 56);
          sub_10016A954((uint64_t)v138);
        }
        else
        {
          sub_1003DD5AC(*(char **)(v45 + 56), (long long *)buf);
          unint64_t v111 = v110 + 96;
          *(void *)(v45 + 56) = v110 + 96;
        }
        *(void *)(v45 + 56) = v111;
        if (SHIBYTE(v150) < 0) {
          operator delete(*((void **)&v149 + 1));
        }
        if (SBYTE7(v149) < 0) {
          operator delete((void *)v148);
        }
        if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[1].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        int v9 = v136 + 1;
      }
LABEL_47:
      v11 += 192;
    }
  }
  int v9 = 0;
LABEL_168:
  if ((a2[23] & 0x80u) == 0) {
    uint64_t v120 = a2[23];
  }
  else {
    uint64_t v120 = *((void *)a2 + 1);
  }
  uint64_t v121 = *(NSObject **)(v4 + 40);
  BOOL v122 = os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT);
  if (v120)
  {
    if (!v122) {
      return;
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v9;
    v123 = "#I Number of transfer plans from requested device: %u";
    v124 = v121;
    uint32_t v125 = 8;
  }
  else
  {
    if (!v122) {
      return;
    }
    unint64_t v126 = 0x8E38E38E38E38E39 * ((uint64_t)(a3[1] - *a3) >> 3);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v126;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v9;
    v123 = "#I Number of transfer devices: %lu, plans: %u";
    v124 = v121;
    uint32_t v125 = 18;
  }
  _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, v123, (uint8_t *)buf, v125);
}

void sub_1003D9750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t *a49)
{
  sub_1003DD55C(v49 - 144);
  sub_1003D9804((uint64_t)&__p);
  a49 = &a46;
  sub_10023FDC8((void ***)&a49);
  sub_1003DD6DC((void ***)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D9804(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_10016A9A4(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003D9860(uint64_t a1)
{
  uint64_t v1 = (os_log_t *)(a1 + 40);
  char v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Phone associated subscriptions list:", buf, 2u);
  }
  for (uint64_t i = *(uint64_t **)(a1 + 120); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v4 = *v1;
    if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = i + 2;
      if (*((char *)i + 39) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      sub_100344514(v69, i + 5);
      cellplan::asString();
      uint64_t v6 = buf;
      if (v79 < 0) {
        uint64_t v6 = *(unsigned char **)buf;
      }
      *(_DWORD *)unint64_t v80 = 136315394;
      uint64_t v81 = v5;
      __int16 v82 = 2080;
      std::string::size_type v83 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I - primary SIM (%s) : %s", v80, 0x16u);
      if (v79 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v68 = (void **)&v75;
      sub_10023F96C(&v68);
      uint64_t v68 = (void **)&v74;
      sub_10023FA88(&v68);
      if (v71)
      {
        if (v73 < 0) {
          operator delete(__p);
        }
        char v71 = 0;
      }
      if (LOBYTE(v69[0]))
      {
        if (v70 < 0) {
          operator delete(v69[1]);
        }
        LOBYTE(v69[0]) = 0;
      }
    }
  }
  uint64_t v7 = *v1;
  if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 1112);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Subscription Details: (%lu)", buf, 0xCu);
  }
  int v9 = *(void **)(a1 + 1096);
  if (v9 != (void *)(a1 + 1104))
  {
    do
    {
      CellularPlanEntitlementSubscriptionDetails::dumpState((CellularPlanEntitlementSubscriptionDetails *)(v9 + 7), (const ctu::OsLogLogger *)v1);
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          int v9 = v11;
        }
        while (!v12);
      }
      int v9 = v11;
    }
    while (v11 != (void *)(a1 + 1104));
  }
  size_t v13 = *(void **)(a1 + 976);
  if (v13 != (void *)(a1 + 984))
  {
    do
    {
      uint64_t v14 = *v1;
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = subscriber::asString();
        int v16 = v13 + 5;
        if (*((char *)v13 + 63) < 0) {
          int v16 = (void *)*v16;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v15;
        __int16 v77 = 2080;
        long long v78 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Slot (%s): selectable remote plan (%s)", buf, 0x16u);
      }
      std::string v17 = (void *)v13[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          std::string v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v13[2];
          BOOL v12 = *v18 == (void)v13;
          size_t v13 = v18;
        }
        while (!v12);
      }
      size_t v13 = v18;
    }
    while (v18 != (void *)(a1 + 984));
  }
  uint64_t v19 = *(void **)(a1 + 1000);
  if (v19 != (void *)(a1 + 1008))
  {
    do
    {
      long long v20 = *v1;
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = subscriber::asString();
        std::string v22 = v19 + 5;
        if (*((char *)v19 + 63) < 0) {
          std::string v22 = (void *)*v22;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v21;
        __int16 v77 = 2080;
        long long v78 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Slot (%s): last sent selectable plan (%s)", buf, 0x16u);
      }
      uint64_t v23 = (void *)v19[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (void *)v19[2];
          BOOL v12 = *v24 == (void)v19;
          uint64_t v19 = v24;
        }
        while (!v12);
      }
      uint64_t v19 = v24;
    }
    while (v24 != (void *)(a1 + 1008));
  }
  long long v25 = *(void **)(a1 + 1024);
  if (v25 != (void *)(a1 + 1032))
  {
    do
    {
      int v26 = *v1;
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        ctu::hex((uint64_t *)buf, (ctu *)(v25 + 4), (const void *)0x10, v27);
        uint64_t v28 = v25 + 6;
        if (v79 >= 0) {
          uint64_t v29 = buf;
        }
        else {
          uint64_t v29 = *(unsigned char **)buf;
        }
        if (*((char *)v25 + 71) < 0) {
          uint64_t v28 = (void *)*v28;
        }
        *(_DWORD *)unint64_t v80 = 136315394;
        uint64_t v81 = v29;
        __int16 v82 = 2080;
        std::string::size_type v83 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I User selected plan on device (%s): (%s)", v80, 0x16u);
        if (v79 < 0) {
          operator delete(*(void **)buf);
        }
      }
      int v30 = (void *)v25[1];
      if (v30)
      {
        do
        {
          int v31 = v30;
          int v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          int v31 = (void *)v25[2];
          BOOL v12 = *v31 == (void)v25;
          long long v25 = v31;
        }
        while (!v12);
      }
      long long v25 = v31;
    }
    while (v31 != (void *)(a1 + 1032));
  }
  BOOL v32 = *v1;
  if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Pending Subscription Info:", buf, 2u);
  }
  uint64_t v33 = *(void **)(a1 + 1120);
  if (v33 != (void *)(a1 + 1128))
  {
    do
    {
      long long v34 = *v1;
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = subscriber::asString();
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I Slot (%s)", buf, 0xCu);
      }
      unint64_t v37 = (uint64_t *)v33[5];
      unint64_t v36 = (uint64_t *)v33[6];
      while (v37 != v36)
      {
        long long v38 = *v1;
        if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
        {
          char v39 = v37;
          if (*((char *)v37 + 23) < 0) {
            char v39 = (uint64_t *)*v37;
          }
          uint64_t v40 = asString();
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v39;
          __int16 v77 = 2080;
          long long v78 = (void *)v40;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I - %s (%s)", buf, 0x16u);
        }
        v37 += 4;
      }
      long long v41 = (void *)v33[1];
      if (v41)
      {
        do
        {
          uint64_t v42 = v41;
          long long v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          uint64_t v42 = (void *)v33[2];
          BOOL v12 = *v42 == (void)v33;
          uint64_t v33 = v42;
        }
        while (!v12);
      }
      uint64_t v33 = v42;
    }
    while (v42 != (void *)(a1 + 1128));
  }
  long long v43 = *v1;
  if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = *(void *)(a1 + 1088);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I Pending Installs (%lu)", buf, 0xCu);
  }
  uint64_t v45 = *(void **)(a1 + 1072);
  if (v45 != (void *)(a1 + 1080))
  {
    do
    {
      uint64_t v46 = *v1;
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        ctu::hex((uint64_t *)buf, (ctu *)(v45 + 4), (const void *)0x10, v47);
        unint64_t v48 = buf;
        if (v79 < 0) {
          unint64_t v48 = *(unsigned char **)buf;
        }
        *(_DWORD *)unint64_t v80 = 136315138;
        uint64_t v81 = v48;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I For (%s)", v80, 0xCu);
        if (v79 < 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v49 = (uint64_t *)v45[6];
      unint64_t v50 = (uint64_t *)v45[7];
      if (v49 != v50)
      {
        unint64_t v51 = v49 + 6;
        do
        {
          long long v52 = *v1;
          if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
          {
            long long v53 = v51;
            if (*((char *)v51 + 23) < 0) {
              long long v53 = (uint64_t *)*v51;
            }
            unint64_t v54 = v51 - 6;
            if (*((char *)v51 - 25) < 0) {
              unint64_t v54 = (uint64_t *)*v54;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v53;
            __int16 v77 = 2080;
            long long v78 = v54;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I %s -> %s", buf, 0x16u);
          }
          uint64_t v55 = v51 + 33;
          v51 += 39;
        }
        while (v55 != v50);
      }
      unint64_t v56 = (void *)v45[1];
      if (v56)
      {
        do
        {
          uint64_t v57 = v56;
          unint64_t v56 = (void *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          uint64_t v57 = (void *)v45[2];
          BOOL v12 = *v57 == (void)v45;
          uint64_t v45 = v57;
        }
        while (!v12);
      }
      uint64_t v45 = v57;
    }
    while (v57 != (void *)(a1 + 1080));
  }
  unint64_t v58 = *v1;
  if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#I Last seen phone ICCIDs", buf, 2u);
  }
  uint64_t v59 = *(void **)(a1 + 1048);
  if (v59 != (void *)(a1 + 1056))
  {
    do
    {
      uint64_t v60 = *v1;
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v61 = v59 + 5;
        if (*((char *)v59 + 63) < 0) {
          uint64_t v61 = (void *)*v61;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#I - %s", buf, 0xCu);
      }
      unint64_t v62 = (void *)v59[1];
      if (v62)
      {
        do
        {
          uint64_t v63 = v62;
          unint64_t v62 = (void *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          uint64_t v63 = (void *)v59[2];
          BOOL v12 = *v63 == (void)v59;
          uint64_t v59 = v63;
        }
        while (!v12);
      }
      uint64_t v59 = v63;
    }
    while (v63 != (void *)(a1 + 1056));
  }
  char v64 = *(unsigned char *)(a1 + 447);
  if (v64 < 0)
  {
    if (!*(void *)(a1 + 432)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 447))
  {
    return;
  }
  char v65 = *v1;
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    v66 = (void *)(a1 + 424);
    if (v64 < 0) {
      v66 = (void *)*v66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I Last purchased iccid: %s", buf, 0xCu);
  }
}

void sub_1003DA1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1003DA218((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DA218(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 88);
  sub_10023F96C(&v3);
  uint64_t v3 = (void **)(a1 + 64);
  sub_10023FA88(&v3);
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  if (*(unsigned char *)a1)
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1003DA29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 63);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 48);
  }
  if (v5)
  {
    *(_WORD *)a1 = sub_100CCD574(a3 + 40);
    sub_100058DB0((void *)(v4 + 8), "");
    return;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v7 = *(const std::string **)(a2 + 760);
  uint64_t v8 = *(const std::string **)(a2 + 768);
  if (v7 == v8) {
    return;
  }
  int v9 = (std::string *)(a1 + 8);
  while (1)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v34 = 0u;
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a2 + 72) + 640))(buf);
    (*(void (**)(void **__return_ptr))(**(void **)buf + 24))(__p);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (((uint64_t)__p[0] & 2) != 0) {
      break;
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(__p[1]);
    }
    v7 += 7;
    if (v7 == v8) {
      return;
    }
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a2 + 72) + 640))(buf);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 32))(&v30);
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v10 = v30;
  uint64_t v11 = v31;
  BOOL v12 = (_OWORD *)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    *(_OWORD *)long long __dst = *v12;
    uint64_t v29 = *(void *)(a3 + 32);
  }
  if (v10 == v11)
  {
    BOOL v22 = 0;
  }
  else
  {
    int v26 = (std::string *)(v4 + 8);
    uint64_t v27 = v4;
    uint64_t v13 = v10 + 24;
    do
    {
      if (*(char *)(v13 - 1) < 0)
      {
        sub_10004FC84(buf, *(void **)(v13 - 24), *(void *)(v13 - 16));
      }
      else
      {
        long long v14 = *(_OWORD *)(v13 - 24);
        uint64_t v36 = *(void *)(v13 - 8);
        *(_OWORD *)buf = v14;
      }
      int v15 = SHIBYTE(v36);
      int v16 = *(void **)buf;
      if (v36 >= 0) {
        unint64_t v17 = HIBYTE(v36);
      }
      else {
        unint64_t v17 = *(void *)&buf[8];
      }
      if (SHIBYTE(v29) < 0)
      {
        if (v17 == -1) {
LABEL_69:
        }
          sub_1000C14D8();
        uint64_t v19 = (void **)__dst[0];
        if (__dst[1] >= (void *)v17) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = (size_t)__dst[1];
        }
      }
      else
      {
        if (v17 == -1) {
          goto LABEL_69;
        }
        if (HIBYTE(v29) >= v17) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = HIBYTE(v29);
        }
        uint64_t v19 = __dst;
      }
      if (v36 >= 0) {
        long long v20 = buf;
      }
      else {
        long long v20 = *(uint8_t **)buf;
      }
      BOOL v22 = !memcmp(v19, v20, v18) && v18 == v17;
      if (v15 < 0) {
        operator delete(v16);
      }
      char v23 = v13 == v11 || v22;
      v13 += 24;
    }
    while ((v23 & 1) == 0);
    int v9 = v26;
    uint64_t v4 = v27;
    BOOL v12 = (_OWORD *)(a3 + 16);
  }
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst[0]);
    if (!v22) {
      goto LABEL_66;
    }
LABEL_60:
    uint64_t v24 = *(NSObject **)(a2 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 39) >= 0) {
        long long v25 = v12;
      }
      else {
        long long v25 = *(_OWORD **)(a3 + 16);
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I ICCID prefix matching for (%s) default to active", buf, 0xCu);
    }
    *(_WORD *)uint64_t v4 = 513;
    std::string::operator=(v9, v7 + 3);
    goto LABEL_66;
  }
  if (v22) {
    goto LABEL_60;
  }
LABEL_66:
  *(void *)buf = &v30;
  sub_100047F64((void ***)buf);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[1]);
  }
}

void sub_1003DA694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  a30 = &a19;
  sub_100047F64((void ***)&a30);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 + 31) < 0) {
    operator delete(*v37);
  }
  _Unwind_Resume(a1);
}

void sub_1003DA754(uint64_t a1, std::string *__str, const std::string *a3, uint64_t a4)
{
  uint64_t v8 = (std::string *)(a4 + 8);
  memset(&__stra, 0, sizeof(__stra));
  uint64_t v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  size_t size = __str->__r_.__value_.__l.__size_;
  if ((v9 & 0x80u) == 0) {
    std::string::size_type v11 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __str->__r_.__value_.__l.__size_;
  }
  uint64_t v12 = *(unsigned __int8 *)(a4 + 31);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  if (v11 == v12)
  {
    if (v13 >= 0) {
      long long v14 = (unsigned __int8 *)(a4 + 8);
    }
    else {
      long long v14 = (unsigned __int8 *)v8->__r_.__value_.__r.__words[0];
    }
    if ((v9 & 0x80) != 0)
    {
      if (!memcmp(__str->__r_.__value_.__l.__data_, v14, size)) {
        goto LABEL_18;
      }
    }
    else
    {
      if (!v9) {
        goto LABEL_18;
      }
      int v15 = __str;
      while (v15->__r_.__value_.__s.__data_[0] == *v14)
      {
        int v15 = (std::string *)((char *)v15 + 1);
        ++v14;
        if (!--v9) {
          goto LABEL_18;
        }
      }
    }
  }
  std::string::operator=(v8, __str);
  std::string::operator=(&__stra, (const std::string *)(a4 + 32));
LABEL_18:
  uint64_t v16 = *(unsigned __int8 *)(a4 + 55);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = *(unsigned __int8 *)(a4 + 55);
  }
  else {
    uint64_t v17 = *(void *)(a4 + 40);
  }
  std::string::size_type v18 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    std::string::size_type v18 = a3->__r_.__value_.__l.__size_;
  }
  if (v17 == v18)
  {
    if (v19 >= 0) {
      long long v20 = a3;
    }
    else {
      long long v20 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v16 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)(a4 + 32), v20, *(void *)(a4 + 40))) {
        goto LABEL_35;
      }
    }
    else
    {
      if (!*(unsigned char *)(a4 + 55)) {
        goto LABEL_35;
      }
      uint64_t v21 = (unsigned __int8 *)(a4 + 32);
      while (*v21 == v20->__r_.__value_.__s.__data_[0])
      {
        ++v21;
        long long v20 = (const std::string *)((char *)v20 + 1);
        if (!--v16) {
          goto LABEL_35;
        }
      }
    }
  }
  std::string::operator=(&__stra, (const std::string *)(a4 + 32));
  std::string::operator=((std::string *)(a4 + 32), a3);
  sub_1003DF568((uint64_t **)(a1 + 1096), (void **)&__stra.__r_.__value_.__l.__data_);
  v36[0] = (long long *)(a4 + 32);
  BOOL v22 = sub_1003DF1C0((uint64_t **)(a1 + 1096), (void **)(a4 + 32), (uint64_t)&unk_10144E20E, v36);
  v22[7] = *(void *)a4;
  std::string::operator=((std::string *)(v22 + 8), v8);
  std::string::operator=((std::string *)(v22 + 11), (const std::string *)(a4 + 32));
  *((_WORD *)v22 + 56) = *(_WORD *)(a4 + 56);
  std::string::operator=((std::string *)v22 + 5, (const std::string *)(a4 + 64));
  std::string::operator=((std::string *)v22 + 6, (const std::string *)(a4 + 88));
  std::string::operator=((std::string *)v22 + 7, (const std::string *)(a4 + 112));
  std::string::operator=((std::string *)v22 + 8, (const std::string *)(a4 + 136));
  std::string::operator=((std::string *)v22 + 9, (const std::string *)(a4 + 160));
  *((_WORD *)v22 + 120) = *(_WORD *)(a4 + 184);
LABEL_35:
  std::string::size_type v23 = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
  char v24 = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v23 = __stra.__r_.__value_.__l.__size_;
  }
  if (v23)
  {
    uint64_t v33 = 0;
    long long v31 = 0u;
    *(_OWORD *)uint64_t v32 = 0u;
    *(_OWORD *)uint64_t v29 = 0u;
    *(_OWORD *)uint64_t v30 = 0u;
    std::string::operator=((std::string *)&v30[1], &__stra);
    (*(void (**)(void, void **, uint64_t))(**(void **)(a1 + 88) + 120))(*(void *)(a1 + 88), v29, 1);
    uint64_t v25 = *(void *)(a1 + 88);
    sub_10023FB90((uint64_t)v36, a4);
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    v35[0] = (void **)&v26;
    v35[1] = 0;
    int v26 = (char *)operator new(0xC0uLL);
    uint64_t v27 = (uint64_t)v26;
    uint64_t v28 = v26 + 192;
    uint64_t v27 = sub_10037AC44((uint64_t)&v28, (uint64_t)v36, (uint64_t)&v50, (uint64_t)v26);
    (*(void (**)(uint64_t, char **, uint64_t))(*(void *)v25 + 112))(v25, &v26, 1);
    v35[0] = (void **)&v26;
    sub_10023FDC8(v35);
    if (v49 < 0) {
      operator delete(__p);
    }
    if (v47 < 0) {
      operator delete(v46);
    }
    if (v45 < 0) {
      operator delete(v44);
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    if (v37 < 0) {
      operator delete(v36[1]);
    }
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[1]);
    }
    if (SHIBYTE(v30[0]) < 0) {
      operator delete(v29[0]);
    }
    char v24 = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
  }
  if (v24 < 0) {
    operator delete(__stra.__r_.__value_.__l.__data_);
  }
}

void sub_1003DAB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *sub_1003DABA0(std::string *result, const std::string *a2)
{
  if (result[22].__r_.__value_.__s.__data_[16]) {
    return std::string::operator=((std::string *)((char *)result + 424), a2);
  }
  return result;
}

unsigned char *sub_1003DABB4(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[216] = 0;
  if (*(unsigned char *)(a2 + 216))
  {
    sub_1000C5AB4((uint64_t)a1, a2);
    a1[216] = 1;
  }
  return a1;
}

void sub_1003DABF8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 216)) {
    sub_1000C584C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DAC14(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 176);
  sub_1000C56F4(&v3);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1003DACB8(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1003DAC14(v4 - 216);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1003DAD3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_1003DAEDC((void **)a1);
    if (a4 > 0x1C71C71C71C71C7) {
      sub_10006A748();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1003446AC((void *)a1, v11);
    uint64_t v12 = sub_100344750(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
    sub_1003DAF44((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_100344750(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1003DAF44((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 144;
      sub_10023FB0C(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1003DAECC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DAED4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DAEDC(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 144;
        sub_10023FB0C(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1003DAF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    sub_1003DC1E4(a4 + 16, v5 + 16);
    sub_1003DC1E4(a4 + 48, v5 + 48);
    std::string::operator=((std::string *)(a4 + 80), (const std::string *)(v5 + 80));
    *(unsigned char *)(a4 + 104) = *(unsigned char *)(v5 + 104);
    sub_1003DC1E4(a4 + 112, v5 + 112);
    a4 += 144;
    v5 += 144;
  }
  while (v5 != v6);
  return v6;
}

void sub_1003DAFDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1003DB17C((void **)a1);
    if (a4 > 0x186186186186186) {
      sub_10006A748();
    }
    unint64_t v10 = 0x9E79E79E79E79E7ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xC30C30C30C30C3) {
      unint64_t v11 = 0x186186186186186;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10010CC04((void *)a1, v11);
    uint64_t v12 = sub_100344960(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1003DB1E4((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_100344960(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1003DB1E4((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 168;
      sub_10023F9F0(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1003DB16C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DB174(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DB17C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 168;
        sub_10023F9F0(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1003DB1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    std::string::operator=((std::string *)(a4 + 16), (const std::string *)(v5 + 16));
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)(v5 + 40));
    *(_WORD *)(a4 + 64) = *(_WORD *)(v5 + 64);
    std::string::operator=((std::string *)(a4 + 72), (const std::string *)(v5 + 72));
    std::string::operator=((std::string *)(a4 + 96), (const std::string *)(v5 + 96));
    std::string::operator=((std::string *)(a4 + 120), (const std::string *)(v5 + 120));
    std::string::operator=((std::string *)(a4 + 144), (const std::string *)(v5 + 144));
    a4 += 168;
    v5 += 168;
  }
  while (v5 != v6);
  return v6;
}

void sub_1003DB294(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1003DB434((void **)a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      sub_10006A748();
    }
    unint64_t v10 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100311F60((void *)a1, v11);
    uint64_t v12 = sub_100311FB8(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1003DB49C((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_100311FB8(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1003DB49C((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 88;
      sub_1000C5778(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1003DB424(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DB42C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DB434(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_1000C5778(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1003DB49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    std::string::operator=((std::string *)(a4 + 32), (const std::string *)(v5 + 32));
    sub_1000C86CC(a4 + 56, v5 + 56);
    a4 += 88;
    v5 += 88;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_1003DB514(uint64_t a1, int a2, long long *a3, uint64_t a4, char a5)
{
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  sub_1003DABB4((unsigned char *)(a1 + 32), a4);
  *(unsigned char *)(a1 + 256) = a5;
  return a1;
}

void sub_1003DB588(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DB5A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)a1 + 31);
  }
  else {
    uint64_t v3 = a1[2];
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 95);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 80);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = *a1;
  long long v7 = (const void **)(a1 + 1);
  unint64_t v10 = *(unsigned __int8 **)(a2 + 72);
  long long v8 = (unsigned __int8 *)(a2 + 72);
  uint64_t v9 = v10;
  if (v5 < 0) {
    long long v8 = v9;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*v7, v8, a1[2])) {
      goto LABEL_17;
    }
    return 0;
  }
  if (*((unsigned char *)a1 + 31))
  {
    unint64_t v11 = (unsigned __int8 *)(a1 + 1);
    while (*v11 == *v8)
    {
      ++v11;
      ++v8;
      if (!--v2) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v13 = *(std::__shared_weak_count **)(v6 + 64);
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)(v6 + 56);
      if (v16) {
        (*(void (**)(uint64_t, const void **))(*(void *)v16 + 88))(v16, v7);
      }
      sub_10004D2C8(v15);
    }
  }
  return 1;
}

void sub_1003DB6A0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DB6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_1003DB738(a3 + v6, a1 + v6);
      v6 += 216;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_1003DB714(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 216;
    do
    {
      sub_1003DAC14(v4 + v2);
      v2 -= 216;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DB738(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 144;
  sub_100313228((char *)(a1 + 8), (long long *)(a2 + 8));
  if (*(char *)(a2 + 167) < 0)
  {
    sub_10004FC84((unsigned char *)v4, *(void **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 144);
    *(void *)(v4 + 16) = *(void *)(a2 + 160);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = v6;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_100311ED8((void *)(a1 + 176), *(void *)(a2 + 176), *(void *)(a2 + 184), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3));
  uint64_t v7 = *(void *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(void *)(a1 + 200) = v7;
  return a1;
}

void sub_1003DB7F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  if (*(unsigned char *)(v1 + 64))
  {
    if (*(char *)(v1 + 95) < 0) {
      operator delete(*(void **)(v1 + 72));
    }
    *(unsigned char *)(v1 + 64) = 0;
  }
  if (*(unsigned char *)(v1 + 32))
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    *(unsigned char *)(v1 + 32) = 0;
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DB870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 184;
    do
    {
      uint64_t v6 = v5 - 184;
      *(unsigned char *)a3 = *(unsigned char *)(v5 - 184);
      cellplan::RemoteDeviceIdentifiers::operator=();
      std::string::operator=((std::string *)(a3 + 144), (const std::string *)(v5 - 40));
      *(void *)(a3 + 168) = *(void *)(v5 - 16);
      if (a3 != v5 - 184) {
        sub_1003DB294(a3 + 176, *(void *)(v5 - 8), *(void *)v5, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)v5 - *(void *)(v5 - 8)) >> 3));
      }
      uint64_t v7 = *(void *)(v5 + 16);
      *(_DWORD *)(a3 + 208) = *(_DWORD *)(v5 + 24);
      *(void *)(a3 + 200) = v7;
      a3 += 216;
      v5 += 216;
    }
    while (v6 + 216 != a2);
  }
  return a3;
}

uint64_t sub_1003DB934(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void sub_1003DB990(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1003DBB30((void **)a1);
    if (a4 > 0x186186186186186) {
      sub_10006A748();
    }
    unint64_t v10 = 0x9E79E79E79E79E7ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xC30C30C30C30C3) {
      unint64_t v11 = 0x186186186186186;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10010CC04((void *)a1, v11);
    uint64_t v12 = sub_10010CC5C(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1003DBB98((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_10010CC5C(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1003DBB98((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 168;
      sub_10008A14C(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1003DBB20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DBB28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003DBB30(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 168;
        sub_10008A14C(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1003DBB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 24;
  do
  {
    uint64_t v7 = v6 - 24;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 24);
    if (a4 != v6 - 24)
    {
      sub_10008A534((char *)(a4 + 16), *(char **)(v6 - 8), *(void *)v6, (uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 2);
      sub_10008A640((uint64_t *)(a4 + 40), *(void *)(v6 + 16), *(void *)(v6 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 3));
    }
    int v8 = *(_DWORD *)(v6 + 40);
    *(_WORD *)(a4 + 68) = *(_WORD *)(v6 + 44);
    *(_DWORD *)(a4 + 64) = v8;
    std::string::operator=((std::string *)(a4 + 72), (const std::string *)(v6 + 48));
    std::string::operator=((std::string *)(a4 + 96), (const std::string *)(v6 + 72));
    std::string::operator=((std::string *)(a4 + 120), (const std::string *)(v6 + 96));
    std::string::operator=((std::string *)(a4 + 144), (const std::string *)(v6 + 120));
    a4 += 168;
    v6 += 168;
  }
  while (v7 + 168 != v5);
  return v5;
}

uint64_t sub_1003DBC84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10034036C(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[192 * v4];
  uint64_t v16 = &v10[192 * v9];
  sub_10023FB90((uint64_t)v14, a2);
  uint64_t v15 = v14 + 192;
  sub_1003DBD8C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1003DBEF8((uint64_t)&v13);
  return v11;
}

void sub_1003DBD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003DBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003DBD8C(uint64_t *a1, void *a2)
{
  sub_1003DBE04((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_1003DBE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 192) = *(void *)(a3 + v7 - 192);
      long long v10 = *(_OWORD *)(a3 + v7 - 184);
      *(void *)(v8 - 168) = *(void *)(a3 + v7 - 168);
      *(_OWORD *)(v8 - 184) = v10;
      *(void *)(v9 - 176) = 0;
      *(void *)(v9 - 168) = 0;
      *(void *)(v9 - 184) = 0;
      long long v11 = *(_OWORD *)(a3 + v7 - 160);
      *(void *)(v8 - 144) = *(void *)(a3 + v7 - 144);
      *(_OWORD *)(v8 - 160) = v11;
      *(void *)(v9 - 152) = 0;
      *(void *)(v9 - 144) = 0;
      *(void *)(v9 - 160) = 0;
      *(_WORD *)(v8 - 136) = *(_WORD *)(a3 + v7 - 136);
      long long v12 = *(_OWORD *)(a3 + v7 - 128);
      *(void *)(v8 - 112) = *(void *)(a3 + v7 - 112);
      *(_OWORD *)(v8 - 128) = v12;
      *(void *)(v9 - 120) = 0;
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 128) = 0;
      long long v13 = *(_OWORD *)(a3 + v7 - 104);
      *(void *)(v8 - 88) = *(void *)(a3 + v7 - 88);
      *(_OWORD *)(v8 - 104) = v13;
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      long long v14 = *(_OWORD *)(a3 + v7 - 80);
      uint64_t v15 = *(void *)(a3 + v7 - 64);
      *(void *)(v9 - 104) = 0;
      *(void *)(v8 - 64) = v15;
      *(_OWORD *)(v8 - 80) = v14;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 80) = 0;
      long long v16 = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 40) = *(void *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v16;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(__n128 *)(v8 - 32) = result;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(_WORD *)(v8 - 8) = *(_WORD *)(a3 + v7 - 8);
      v7 -= 192;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_1003DBEF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    sub_1000C62D8(i - 192);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1003DBF48(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  __n128 result = (void *)(a1 + 24);
  if (*(char *)(a2 + 39) < 0)
  {
    __n128 result = sub_10004FC84(result, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    result[2] = *(void *)(a2 + 32);
    *(_OWORD *)__n128 result = v5;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t sub_1003DBFB0(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10010C8A4(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[88 * v4];
  long long v16 = &v10[88 * v9];
  sub_10037AA60(v14, a2);
  uint64_t v15 = v14 + 88;
  sub_1003DC0D0(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1003DC194((uint64_t)&v13);
  return v11;
}

void sub_1003DC0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003DC194((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003DC0D0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 88);
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      *(_OWORD *)(v6 - 88) = v8;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 88) = 0;
      *(_DWORD *)(v6 - 64) = *(_DWORD *)(v2 + v5 - 64);
      long long v9 = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v9;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      long long v10 = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = v10;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 88;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  *__n128 result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003DC194(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    sub_10037ABDC(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003DC1E4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v3 = (const std::string *)(a2 + 8);
      uint64_t v4 = (std::string *)(a1 + 8);
      std::string::operator=(v4, v3);
    }
    else
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
      *(unsigned char *)a1 = 0;
    }
  }
  else if (*(unsigned char *)a2)
  {
    uint64_t v5 = (unsigned char *)(a1 + 8);
    if (*(char *)(a2 + 31) < 0)
    {
      sub_10004FC84(v5, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v5 = v6;
    }
    *(unsigned char *)a1 = 1;
  }
}

uint64_t sub_1003DC28C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xDAB7EC1DD3431B57 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x4F88B2F392A409) {
    sub_10006A748();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xDAB7EC1DD3431B57 * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x27C45979C95204) {
    unint64_t v7 = 0x4F88B2F392A409;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    long long v8 = (char *)sub_1003DC6B4(v5, v7);
  }
  else {
    long long v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = &v8[824 * v3];
  long long v14 = &v8[824 * v7];
  bzero(v12, 0x338uLL);
  sub_1003DC3A8((uint64_t)v12);
  uint64_t v13 = v12 + 824;
  sub_1003DC63C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1003DCC98((uint64_t)&v11);
  return v9;
}

void sub_1003DC394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003DCC98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DC3A8(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(void *)(a1 + 572) = 0x200000000;
  *(void *)(a1 + 562) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 644) = 0u;
  sub_100058DB0((void *)(a1 + 664), "");
  sub_100058DB0((void *)(a1 + 688), "");
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 769) = 0u;
  *(_DWORD *)(a1 + 820) = 0;
  return a1;
}

void sub_1003DC460(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 687) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 655) < 0) {
    operator delete(*(void **)(v1 + 632));
  }
  if (*(char *)(v1 + 631) < 0) {
    operator delete(*(void **)(v1 + 608));
  }
  if (*(char *)(v1 + 607) < 0) {
    operator delete(*v4);
  }
  sub_1003DC4C4(v2);
  sub_1003DC590((unsigned char *)v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_1003DC4C4(unsigned char *a1)
{
  if (*a1) {
    sub_1003DC4FC((uint64_t)a1);
  }
  return a1;
}

uint64_t sub_1003DC4FC(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 400);
  sub_10030FEEC(&v3);
  unint64_t v3 = (void **)(a1 + 376);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  uint64_t result = sub_1000C584C(a1 + 8);
  *(unsigned char *)a1 = 0;
  return result;
}

unsigned char *sub_1003DC590(unsigned char *a1)
{
  if (*a1) {
    sub_1003DC5C8((uint64_t)a1);
  }
  return a1;
}

void sub_1003DC5C8(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  *(unsigned char *)a1 = 0;
}

uint64_t sub_1003DC63C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003DC700((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003DC6B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4F88B2F392A40ALL) {
    sub_10006A7CC();
  }
  return operator new(824 * a2);
}

uint64_t sub_1003DC700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 824;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 824;
    sub_1003DC794(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_1003DC794(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  if (*(unsigned char *)a2)
  {
    sub_1003DC9E4((char *)(a1 + 8), (long long *)(a2 + 8));
    *(unsigned char *)a1 = 1;
  }
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128)) {
    sub_1003DCB64((unsigned char *)(a1 + 128), a2 + 136);
  }
  long long v4 = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 573) = *(void *)(a2 + 573);
  *(_OWORD *)(a1 + 560) = v4;
  if (*(char *)(a2 + 607) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 584), *(void **)(a2 + 584), *(void *)(a2 + 592));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 584);
    *(void *)(a1 + 600) = *(void *)(a2 + 600);
    *(_OWORD *)(a1 + 584) = v5;
  }
  if (*(char *)(a2 + 631) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 608), *(void **)(a2 + 608), *(void *)(a2 + 616));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 608);
    *(void *)(a1 + 624) = *(void *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = v6;
  }
  if (*(char *)(a2 + 655) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 632), *(void **)(a2 + 632), *(void *)(a2 + 640));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 632);
    *(void *)(a1 + 648) = *(void *)(a2 + 648);
    *(_OWORD *)(a1 + 632) = v7;
  }
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a2 + 656);
  if (*(char *)(a2 + 687) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 664), *(void **)(a2 + 664), *(void *)(a2 + 672));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 664);
    *(void *)(a1 + 680) = *(void *)(a2 + 680);
    *(_OWORD *)(a1 + 664) = v8;
  }
  if (*(char *)(a2 + 711) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 688), *(void **)(a2 + 688), *(void *)(a2 + 696));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 688);
    *(void *)(a1 + 704) = *(void *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = v9;
  }
  sub_10023C008(a1 + 712, a2 + 712);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  return a1;
}

void sub_1003DC948(_Unwind_Exception *a1)
{
  if ((char)v1[687] < 0) {
    operator delete(*v6);
  }
  if ((char)v1[655] < 0) {
    operator delete(*v5);
  }
  if ((char)v1[631] < 0) {
    operator delete(*v4);
  }
  if ((char)v1[607] < 0) {
    operator delete(*v3);
  }
  sub_1003DC4C4(v2);
  sub_1003DC590(v1);
  _Unwind_Resume(a1);
}

char *sub_1003DC9E4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  long long v8 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(v8, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *(_OWORD *)long long v8 = v9;
  }
  return __dst;
}

void sub_1003DCB00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DCB64(unsigned char *a1, uint64_t a2)
{
  sub_1000C5AB4((uint64_t)(a1 + 8), a2);
  uint64_t result = sub_10030FB14((uint64_t)(a1 + 224), a2 + 216);
  a1[424] = *(unsigned char *)(a2 + 416);
  *a1 = 1;
  return result;
}

void sub_1003DCBB8(_Unwind_Exception *a1)
{
  sub_1000C584C(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_1003DCBCC(uint64_t a1)
{
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  if (*(char *)(a1 + 759) < 0) {
    operator delete(*(void **)(a1 + 736));
  }
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  if (*(char *)(a1 + 711) < 0) {
    operator delete(*(void **)(a1 + 688));
  }
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  sub_1003DC4C4((unsigned char *)(a1 + 128));

  return sub_1003DC590((unsigned char *)a1);
}

uint64_t sub_1003DCC98(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 824;
    sub_1003DCBCC(i - 824);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003DCCE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    long long v4 = v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        long long v4 = sub_1003DCBCC((uint64_t)(v4 - 824));
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *sub_1003DCD6C(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  std::string::operator=(a1 + 1, a2 + 1);
  std::string::operator=(a1 + 2, a2 + 2);
  std::string::operator=(a1 + 3, a2 + 3);
  std::string::operator=(a1 + 4, a2 + 4);
  sub_1003DC1E4((uint64_t)&a1[5], (uint64_t)&a2[5]);
  sub_1003DC1E4((uint64_t)&a1[6].__r_.__value_.__l.__size_, (uint64_t)&a2[6].__r_.__value_.__l.__size_);
  if (a1 != a2)
  {
    sub_1003DAD3C((uint64_t)&a1[7].__r_.__value_.__r.__words[2], a2[7].__r_.__value_.__r.__words[2], (uint64_t)a2[8].__r_.__value_.__l.__data_, 0x8E38E38E38E38E39 * ((uint64_t)(a2[8].__r_.__value_.__r.__words[0] - a2[7].__r_.__value_.__r.__words[2]) >> 4));
    sub_1003DAFDC((uint64_t)&a1[8].__r_.__value_.__r.__words[2], a2[8].__r_.__value_.__r.__words[2], (uint64_t)a2[9].__r_.__value_.__l.__data_, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2[9].__r_.__value_.__r.__words[0] - a2[8].__r_.__value_.__r.__words[2]) >> 3));
  }
  return a1;
}

char *sub_1003DCE38(char *a1, uint64_t a2)
{
  long long v4 = sub_1003DCECC(a1, (long long *)a2);
  sub_100344514((void *)v4 + 15, (uint64_t *)(a2 + 120));
  return a1;
}

void sub_1003DCE70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003DCECC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  long long v8 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(v8, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *(_OWORD *)long long v8 = v9;
  }
  return __dst;
}

void sub_1003DCFE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1003DD04C(unsigned char *a1)
{
  if (*a1) {
    sub_1003DD084((uint64_t)a1);
  }
  return a1;
}

void sub_1003DD084(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 96);
  sub_10023F96C(&v2);
  uint64_t v2 = (void **)(a1 + 72);
  sub_10023FA88(&v2);
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    *(unsigned char *)(a1 + 40) = 0;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
  *(unsigned char *)a1 = 0;
}

uint64_t sub_1003DD108(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10034036C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = &v10[192 * v4];
  long long v16 = &v10[192 * v9];
  sub_10023FB90((uint64_t)v14, a2);
  uint64_t v15 = v14 + 192;
  sub_1003DBD8C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1003DBEF8((uint64_t)&v13);
  return v11;
}

void sub_1003DD1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003DBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_1003DD210(unsigned char *a1)
{
  if (*a1) {
    sub_1003DD248((uint64_t)a1);
  }
  return a1;
}

void sub_1003DD248(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v3 = (void **)(a1 + 48);
  sub_10002E39C(&v3);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  *(unsigned char *)a1 = 0;
}

unsigned char *sub_1003DD2D4(unsigned char *a1)
{
  if (*a1) {
    sub_1003DD30C((uint64_t)a1);
  }
  return a1;
}

void sub_1003DD30C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (*(char *)(a1 + 151) < 0) {
      operator delete(*(void **)(a1 + 128));
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(unsigned char *)a1 = 0;
}

unsigned char *sub_1003DD394(unsigned char *a1)
{
  if (*a1) {
    sub_1003DD3CC((uint64_t)a1);
  }
  return a1;
}

void sub_1003DD3CC(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  *(unsigned char *)a1 = 0;
}

void sub_1003DD450(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 96;
        sub_10016A8DC(v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1003DD4B8(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 48);
  sub_10016A9A4(&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *sub_1003DD510(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    sub_10006A7CC();
  }
  return operator new(72 * a1);
}

uint64_t sub_1003DD55C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_1003DD4B8(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_1003DD5AC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  uint64_t v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(v7, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return __dst;
}

void sub_1003DD690(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DD6DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_1003DD4B8(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sub_1003DD760(unsigned char *a1, uint64_t a2)
{
  if (*a1)
  {
    sub_10032FC84((uint64_t)(a1 + 8), a2);
    sub_1003DD98C((uint64_t)(a1 + 224), a2 + 216);
    a1[424] = *(unsigned char *)(a2 + 416);
  }
  else
  {
    *(void *)&double result = sub_1003DD7D0((uint64_t)a1, a2).n128_u64[0];
  }
  return result;
}

__n128 sub_1003DD7D0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 24) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  long long v3 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 48) = v3;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 88) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 72) = v4;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 120) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 104) = v5;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v6 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 144) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 128) = v6;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 168) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 152) = v7;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 144) = 0;
  long long v8 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 192) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 176) = v8;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  long long v9 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 216) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 200) = v9;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 208) = 0;
  int v11 = *(_DWORD *)(a2 + 216);
  uint64_t v10 = a2 + 216;
  *(void *)(v10 - 16) = 0;
  *(_DWORD *)(a1 + 224) = v11;
  long long v12 = *(_OWORD *)(v10 + 8);
  *(void *)(a1 + 248) = *(void *)(v10 + 24);
  *(_OWORD *)(a1 + 232) = v12;
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 8) = 0;
  long long v13 = *(_OWORD *)(v10 + 32);
  *(void *)(a1 + 272) = *(void *)(v10 + 48);
  *(_OWORD *)(a1 + 256) = v13;
  long long v14 = *(_OWORD *)(v10 + 56);
  *(void *)(a1 + 296) = *(void *)(v10 + 72);
  *(_OWORD *)(a1 + 280) = v14;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 72) = 0;
  *(void *)(v10 + 56) = 0;
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(v10 + 80);
  long long v15 = *(_OWORD *)(v10 + 88);
  *(void *)(a1 + 328) = *(void *)(v10 + 104);
  *(_OWORD *)(a1 + 312) = v15;
  *(void *)(v10 + 96) = 0;
  *(void *)(v10 + 104) = 0;
  *(void *)(v10 + 88) = 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(v10 + 112);
  long long v16 = *(_OWORD *)(v10 + 120);
  *(void *)(a1 + 360) = *(void *)(v10 + 136);
  *(_OWORD *)(a1 + 344) = v16;
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = 0;
  *(void *)(v10 + 120) = 0;
  *(void *)(a1 + 368) = *(void *)(v10 + 144);
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(v10 + 152);
  *(void *)(a1 + 392) = *(void *)(v10 + 168);
  *(void *)(v10 + 152) = 0;
  *(void *)(v10 + 160) = 0;
  *(void *)(v10 + 168) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  __n128 result = *(__n128 *)(v10 + 176);
  *(__n128 *)(a1 + 400) = result;
  *(void *)(a1 + 416) = *(void *)(v10 + 192);
  *(void *)(v10 + 184) = 0;
  *(void *)(v10 + 192) = 0;
  *(void *)(v10 + 176) = 0;
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(v10 + 200);
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t sub_1003DD98C(uint64_t a1, uint64_t a2)
{
  long long v4 = (long long *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v7;
  long long v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)long long v8 = v9;
  *(unsigned char *)(a2 + 79) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)uint64_t v10 = v11;
  *(unsigned char *)(a2 + 111) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  long long v12 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)long long v12 = v13;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  sub_10005CBB4((uint64_t *)(a1 + 152));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  sub_1003DDAE8((uint64_t *)(a1 + 176));
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  return a1;
}

void sub_1003DDAE8(uint64_t *a1)
{
  if (*a1)
  {
    sub_10030FF40(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1003DDB28()
{
}

uint64_t sub_1003DDB3C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void sub_1003DDB48(uint64_t a1)
{
  long long v2 = (void **)(a1 + 112);
  sub_10023F96C(&v2);
  long long v2 = (void **)(a1 + 88);
  sub_10023FA88(&v2);
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_1003DDBD8(void *a1)
{
  if (a1)
  {
    sub_1003DDBD8(*a1);
    sub_1003DDBD8(a1[1]);
    sub_1003DDC2C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_1003DDC2C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    long long v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void sub_1003DDC94(char *a1)
{
  if (a1)
  {
    sub_1003DDC94(*(void *)a1);
    sub_1003DDC94(*((void *)a1 + 1));
    long long v2 = (void **)(a1 + 48);
    sub_1000C63B8(&v2);
    operator delete(a1);
  }
}

void sub_1003DDCEC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003DDCEC(a1, *a2);
    sub_1003DDCEC(a1, a2[1]);
    sub_1003DDD48((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1003DDD48(uint64_t a1)
{
  sub_1000C62D8(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    long long v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_1003DDD98(char *a1)
{
  if (a1)
  {
    sub_1003DDD98(*(void *)a1);
    sub_1003DDD98(*((void *)a1 + 1));
    long long v2 = (void **)(a1 + 40);
    sub_1003DDDFC(&v2);
    operator delete(a1);
  }
}

void sub_1003DDDFC(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_1003DDE88(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100206390((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_1000609C0(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *sub_1003DDF8C(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_100206390(a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (sub_1000609C0(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  long long v16 = *a3;
  char v17 = (void *)(a1 + 16);
  uint64_t v43 = 0;
  char v18 = (char *)operator new(0x98uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  *(void *)char v18 = 0;
  *((void *)v18 + 1) = v8;
  int v19 = v18 + 16;
  if (*((char *)v16 + 23) < 0)
  {
    sub_10004FC84(v19, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v20 = *v16;
    *((void *)v18 + 4) = *((void *)v16 + 2);
    *(_OWORD *)int v19 = v20;
  }
  *(_OWORD *)(v18 + 136) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  LOBYTE(v43) = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_10006A7CC();
          }
          uint64_t v27 = operator new(8 * *(void *)&prime);
          uint64_t v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v17;
          if (*v17)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v17;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  void *v30 = *v36;
                  *uint64_t v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                uint64_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        char v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  long long v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    *long long v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v12) = v17;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9) {
        v39 %= v9;
      }
    }
    else
    {
      v39 &= v9 - 1;
    }
    long long v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v6;
  sub_1003DE420((uint64_t)v42);
  return i;
}

void sub_1003DE408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003DE420((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003DE420(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003DDB48((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

unsigned __int8 *sub_1003DE478(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v6 = a1 + 1;
  int8x8_t v5 = (unsigned __int8 *)a1[1];
  if (!v5)
  {
    unint64_t v8 = (unsigned __int8 *)(a1 + 1);
LABEL_22:
    long long v16 = v8;
    unint64_t v8 = (unsigned __int8 *)operator new(0x48uLL);
    *((_OWORD *)v8 + 2) = *a3;
    *((void *)v8 + 7) = 0;
    *((void *)v8 + 8) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)unint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v16;
    void *v6 = (uint64_t *)v8;
    char v17 = (uint64_t *)**a1;
    char v18 = (uint64_t *)v8;
    if (v17)
    {
      *a1 = v17;
      char v18 = *v6;
    }
    sub_100046C90(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v8;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v5;
      do
      {
        unsigned int v9 = *(unsigned __int8 *)(a2 + v7);
        unsigned int v10 = v8[v7 + 32];
      }
      while (v9 == v10 && v7++ != 15);
      if (v9 >= v10) {
        break;
      }
      int8x8_t v5 = *(unsigned __int8 **)v8;
      unint64_t v6 = (uint64_t **)v8;
      if (!*(void *)v8) {
        goto LABEL_22;
      }
    }
    uint64_t v12 = 0;
    do
    {
      unsigned int v13 = v8[v12 + 32];
      unsigned int v14 = *(unsigned __int8 *)(a2 + v12);
    }
    while (v13 == v14 && v12++ != 15);
    if (v13 >= v14) {
      break;
    }
    unint64_t v6 = (uint64_t **)(v8 + 8);
    int8x8_t v5 = (unsigned __int8 *)*((void *)v8 + 1);
    if (!v5) {
      goto LABEL_22;
    }
  }
  if (!v8) {
    goto LABEL_22;
  }
  return v8;
}

void *sub_1003DE594(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  long long v2 = (void *)(a1 + 8);
  long long v3 = v4;
  if (!v4) {
    return v2;
  }
  int8x8_t v5 = v2;
  do
  {
    uint64_t v6 = 0;
    do
    {
      unsigned int v7 = *((unsigned __int8 *)v3 + v6 + 32);
      unsigned int v8 = *(unsigned __int8 *)(a2 + v6);
    }
    while (v7 == v8 && v6++ != 15);
    unsigned int v10 = v3 + 1;
    if (v7 >= v8)
    {
      unsigned int v10 = v3;
      int8x8_t v5 = v3;
    }
    long long v3 = (void *)*v10;
  }
  while (*v10);
  if (v5 == v2) {
    return v2;
  }
  uint64_t v11 = 0;
  do
  {
    unsigned int v12 = *(unsigned __int8 *)(a2 + v11);
    unsigned int v13 = *((unsigned __int8 *)v5 + v11 + 32);
  }
  while (v12 == v13 && v11++ != 15);
  if (v12 < v13) {
    return v2;
  }
  return v5;
}

void sub_1003DE614(uint64_t **a1, int a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 1);
  long long v3 = a1[1];
  if (v3)
  {
    int8x8_t v5 = v4;
    uint64_t v6 = v3;
    do
    {
      int v7 = *((_DWORD *)v6 + 8);
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        unsigned int v9 = (uint64_t **)v6;
      }
      else {
        unsigned int v9 = (uint64_t **)(v6 + 1);
      }
      if (!v8) {
        int8x8_t v5 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 8) <= a2)
    {
      unsigned int v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          unsigned int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        unsigned int v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          unsigned int v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_10005EE6C(v3, v5);
      unsigned int v14 = (void **)(v5 + 5);
      sub_1003DDDFC(&v14);
      operator delete(v5);
    }
  }
}

uint64_t sub_1003DE708(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_1003DE770((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_1003DE770(uint64_t **a1, uint64_t a2)
{
  int v3 = sub_10006C514(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_1003DE7B4(uint64_t a1)
{
  sub_1003DDBD8(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1003DDBD8(v2);
  }
  return a1;
}

void sub_1003DE804(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003DDC2C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t **sub_1003DE85C(uint64_t **a1, int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  int v5 = a1[1];
  int v7 = a1 + 1;
  BOOL v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        int v5 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        int v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v12[2] = 1;
    unsigned int v10 = (char *)operator new(0x80uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((void *)v10 + 15) = 0;
    sub_100046C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_1003DE804((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

_OWORD *sub_1003DE940(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v10 = 0;
  BOOL v6 = (void **)sub_1003DE9D4((uint64_t)a1, &v10, a2);
  int v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    int v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 6) = 0;
    sub_100046C38(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_1003DE9D4(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = *(void **)(a1 + 8);
  __n128 result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = 0;
        int v7 = v4;
        BOOL v8 = v4 + 4;
        do
        {
          unsigned int v9 = *(unsigned __int8 *)(a3 + v6);
          unsigned int v10 = *((unsigned __int8 *)v7 + v6 + 32);
        }
        while (v9 == v10 && v6++ != 15);
        if (v9 >= v10) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        __n128 result = v7;
        if (!*v7) {
          goto LABEL_21;
        }
      }
      uint64_t v12 = 0;
      do
      {
        unsigned int v13 = *((unsigned __int8 *)v8 + v12);
        unsigned int v14 = *(unsigned __int8 *)(a3 + v12);
      }
      while (v13 == v14 && v12++ != 15);
      if (v13 >= v14) {
        break;
      }
      __n128 result = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = result;
  }
LABEL_21:
  *a2 = v7;
  return result;
}

uint64_t sub_1003DEA5C(uint64_t a1)
{
  *(void *)a1 = off_1019C58B0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1003DEAAC(uint64_t a1)
{
  *(void *)a1 = off_1019C58B0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

char *sub_1003DEB1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = off_1019C58B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  int v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10004FC84(v3, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)int v3 = *(_OWORD *)(a1 + 32);
    *((void *)v2 + 6) = *(void *)(a1 + 48);
  }
  return v2;
}

void sub_1003DEBA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1003DEBB8(char *result, uint64_t a2)
{
  *(void *)a2 = off_1019C58B0;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *((void *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  int v3 = (unsigned char *)(a2 + 32);
  if (result[55] < 0) {
    return (char *)sub_10004FC84(v3, *((void **)result + 4), *((void *)result + 5));
  }
  long long v4 = *((_OWORD *)result + 2);
  *(void *)(a2 + 48) = *((void *)result + 6);
  *(_OWORD *)int v3 = v4;
  return result;
}

void sub_1003DEC14(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_1003DEC28(void **__p)
{
  if (*((char *)__p + 55) < 0) {
    operator delete(__p[4]);
  }

  operator delete(__p);
}

void sub_1003DEC6C(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = a1 + 16;
  uint64_t v6 = sub_1003DE594(v4 + 1024, a1 + 16);
  if ((void *)(v4 + 1032) != v6) {
    sub_1003DEE18((uint64_t **)(v4 + 1024), (uint64_t)v6);
  }
  if (!v3)
  {
    *(unsigned char *)(v4 + 880) = 0;
    int v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v13 = a1 + 32;
      uint64_t v12 = v14;
      if (*(char *)(v13 + 23) >= 0) {
        uint64_t v12 = v13;
      }
      int v15 = 136315138;
      uint64_t v16 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to activate (%s)", (uint8_t *)&v15, 0xCu);
    }
    BOOL v8 = *(std::__shared_weak_count **)(v4 + 64);
    if (v8)
    {
      unsigned int v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        unsigned int v10 = v9;
        uint64_t v11 = *(void *)(v4 + 56);
        if (v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 56))(v11, v5);
        }
        sub_10004D2C8(v10);
      }
    }
  }
}

void sub_1003DEDB8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DEDCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003DEE0C()
{
}

uint64_t *sub_1003DEE18(uint64_t **a1, uint64_t a2)
{
  int v3 = sub_10006C514(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  operator delete((void *)a2);
  return v3;
}

void sub_1003DEE60()
{
}

void *sub_1003DEE74(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1019C5930;
  result[1] = v3;
  return result;
}

uint64_t sub_1003DEEBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C5930;
  a2[1] = v2;
  return result;
}

void sub_1003DEEE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315650;
    uint64_t v6 = "";
    __int16 v7 = 2080;
    BOOL v8 = "";
    __int16 v9 = 2080;
    unsigned int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%s%s", (uint8_t *)&v5, 0x20u);
  }
}

uint64_t sub_1003DEFB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1003DEFF4()
{
}

unsigned __int8 *sub_1003DF000(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100206390((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unsigned int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_1000609C0(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_1003DF104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003DDD48((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1003DF15C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    sub_1003DF16C(a1, a2);
  }
  else {
    sub_1003C8068(a1, (long long *)a2);
  }
}

void sub_1003DF16C(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 24);
  sub_1003DC1E4(a1 + 40, a2 + 32);
  sub_1003DC1E4(a1 + 72, a2 + 64);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 96);
}

uint64_t *sub_1003DF1C0(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  unint64_t v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v11, a2);
  uint8x8_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1003DF278((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    uint8x8_t v7 = v10[0];
    v10[0] = 0;
    sub_1003DF104((uint64_t)v10, 0);
  }
  return v7;
}

double sub_1003DF278@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = (char *)operator new(0xF8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint8x8_t v7 = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint8x8_t v7 = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  v6[241] = 1;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1003DF330(_Unwind_Exception *a1)
{
  sub_1003DF104(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_1003DF348(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)v3);
    }
    __n128 result = *a2;
    *(void *)(v3 + 16) = a2[1].n128_u64[0];
    *(__n128 *)uint64_t v3 = result;
    a2[1].n128_u8[7] = 0;
    a2->n128_u8[0] = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 24) = a2[1].n128_u64[0];
    *(__n128 *)uint64_t v3 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)a1 = 1;
  }
  return result;
}

__n128 sub_1003DF3C0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  if (*(unsigned char *)a2)
  {
    long long v2 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)a1 = 1;
  }
  long long v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    long long v6 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v6;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 144) = 0;
    *(unsigned char *)(a1 + 136) = 1;
  }
  *(unsigned char *)(a1 + 168) = 0;
  if (*(unsigned char *)(a2 + 168))
  {
    long long v7 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v7;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 176) = 0;
    *(unsigned char *)(a1 + 168) = 1;
  }
  long long v8 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v8;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  __n128 result = *(__n128 *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(__n128 *)(a1 + 256) = result;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  if (*(unsigned char *)(a2 + 280))
  {
    __n128 result = *(__n128 *)(a2 + 288);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(__n128 *)(a1 + 288) = result;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 288) = 0;
    *(unsigned char *)(a1 + 280) = 1;
  }
  *(unsigned char *)(a1 + 312) = 0;
  if (*(unsigned char *)(a2 + 312))
  {
    __n128 result = *(__n128 *)(a2 + 320);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(__n128 *)(a1 + 320) = result;
    *(void *)(a2 + 328) = 0;
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 320) = 0;
    *(unsigned char *)(a1 + 312) = 1;
  }
  return result;
}

uint64_t sub_1003DF568(uint64_t **a1, void **a2)
{
  long long v3 = (uint64_t *)sub_100046F68((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  long long v4 = v3;
  sub_10006C514(a1, v3);
  sub_1003DDD48((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

id sub_1003DF5C4(int a1)
{
  uint64_t v3 = 1;
  long long v5 = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_69;
    case 2:
      uint64_t v3 = 2;
      goto LABEL_68;
    case 3:
      uint64_t v3 = 3;
      goto LABEL_68;
    case 4:
      uint64_t v3 = 4;
      goto LABEL_68;
    case 5:
      uint64_t v3 = 5;
      goto LABEL_68;
    case 6:
      uint64_t v3 = 6;
      goto LABEL_68;
    case 7:
      uint64_t v3 = 7;
      goto LABEL_68;
    case 8:
      uint64_t v3 = 8;
      goto LABEL_68;
    case 9:
      uint64_t v3 = 9;
      goto LABEL_68;
    case 10:
      uint64_t v3 = 10;
      goto LABEL_68;
    case 11:
      uint64_t v3 = 11;
      goto LABEL_68;
    case 12:
      uint64_t v3 = 12;
      goto LABEL_68;
    case 13:
      uint64_t v3 = 13;
      goto LABEL_68;
    case 14:
      uint64_t v3 = 14;
      goto LABEL_68;
    case 15:
      uint64_t v3 = 15;
      goto LABEL_68;
    case 16:
      uint64_t v3 = 16;
      goto LABEL_68;
    case 17:
      uint64_t v3 = 17;
      goto LABEL_68;
    case 18:
      uint64_t v3 = 18;
      goto LABEL_68;
    case 19:
      uint64_t v3 = 19;
      goto LABEL_68;
    case 20:
      uint64_t v3 = 20;
      goto LABEL_68;
    case 21:
      uint64_t v3 = 21;
      goto LABEL_68;
    case 22:
      uint64_t v3 = 22;
      goto LABEL_68;
    case 23:
      uint64_t v3 = 23;
      goto LABEL_68;
    case 24:
      uint64_t v3 = 24;
      goto LABEL_68;
    case 25:
      uint64_t v3 = 25;
      goto LABEL_68;
    case 26:
      uint64_t v3 = 26;
      goto LABEL_68;
    case 27:
      uint64_t v3 = 27;
      goto LABEL_68;
    case 28:
      uint64_t v3 = 28;
      goto LABEL_68;
    case 29:
      uint64_t v3 = 29;
      goto LABEL_68;
    case 30:
      uint64_t v3 = 30;
      goto LABEL_68;
    case 31:
      uint64_t v3 = 31;
      goto LABEL_68;
    case 32:
      uint64_t v3 = 32;
      goto LABEL_68;
    case 33:
      uint64_t v3 = 33;
      goto LABEL_68;
    case 34:
      uint64_t v3 = 34;
      goto LABEL_68;
    case 35:
      uint64_t v3 = 35;
      goto LABEL_68;
    case 36:
      uint64_t v3 = 36;
      goto LABEL_68;
    case 37:
      uint64_t v3 = 37;
      goto LABEL_68;
    case 38:
      uint64_t v3 = 38;
      goto LABEL_68;
    case 39:
      uint64_t v3 = 39;
      goto LABEL_68;
    case 40:
      uint64_t v3 = 40;
      goto LABEL_68;
    case 41:
      uint64_t v3 = 41;
      goto LABEL_68;
    case 42:
      uint64_t v3 = 42;
      goto LABEL_68;
    case 43:
      uint64_t v3 = 43;
      goto LABEL_68;
    case 44:
      uint64_t v3 = 44;
      goto LABEL_68;
    case 45:
      uint64_t v3 = 45;
      goto LABEL_68;
    case 46:
      uint64_t v3 = 46;
      goto LABEL_68;
    case 47:
      uint64_t v3 = 47;
      goto LABEL_68;
    case 48:
      uint64_t v3 = 48;
      goto LABEL_68;
    case 49:
      uint64_t v3 = 49;
      goto LABEL_68;
    case 50:
      uint64_t v3 = 50;
      goto LABEL_68;
    case 51:
      uint64_t v3 = 51;
      goto LABEL_68;
    case 52:
      uint64_t v3 = 52;
      goto LABEL_68;
    case 53:
      uint64_t v3 = 53;
      goto LABEL_68;
    case 54:
      uint64_t v3 = 54;
      goto LABEL_68;
    case 55:
      uint64_t v3 = 55;
      goto LABEL_68;
    case 56:
      uint64_t v3 = 56;
      goto LABEL_68;
    case 57:
      uint64_t v3 = 57;
      goto LABEL_68;
    case 58:
      uint64_t v3 = 58;
      goto LABEL_68;
    case 59:
      uint64_t v3 = 62;
      goto LABEL_68;
    case 60:
      uint64_t v3 = 63;
      goto LABEL_68;
    case 61:
      uint64_t v3 = 59;
      goto LABEL_68;
    case 62:
      uint64_t v3 = 60;
      goto LABEL_68;
    case 63:
      uint64_t v3 = 61;
      goto LABEL_68;
    case 64:
      uint64_t v3 = 64;
      goto LABEL_68;
    case 65:
      uint64_t v3 = 65;
      goto LABEL_68;
    case 66:
      uint64_t v3 = 66;
      goto LABEL_68;
    case 67:
      uint64_t v3 = 67;
      goto LABEL_68;
    default:
LABEL_68:
      long long v5 = +[CTCellularPlanError errorForCode:](CTCellularPlanError, "errorForCode:", v3, v1);
LABEL_69:
      return v5;
  }
}

uint64_t sub_1003DF94C(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xD) {
    return 0;
  }
  else {
    return byte_1014985AC[a1 - 1];
  }
}

uint64_t sub_1003DF970(int a1)
{
  uint64_t result = 0;
  if (a1 > 127)
  {
    uint64_t v3 = 13;
    uint64_t v4 = 14;
    if (a1 != 130) {
      uint64_t v4 = 0;
    }
    if (a1 != 129) {
      uint64_t v3 = v4;
    }
    if (a1 == 128) {
      return 12;
    }
    else {
      return v3;
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
      case 9:
      case 10:
      case 11:
        uint64_t result = 2;
        break;
      case 2:
        uint64_t result = 3;
        break;
      case 3:
        uint64_t result = 4;
        break;
      case 4:
        uint64_t result = 5;
        break;
      case 5:
        uint64_t result = 6;
        break;
      case 6:
        uint64_t result = 1;
        break;
      case 7:
        uint64_t result = 7;
        break;
      case 8:
        uint64_t result = 8;
        break;
      case 16:
        uint64_t result = 9;
        break;
      case 17:
        uint64_t result = 11;
        break;
      case 32:
        uint64_t result = 10;
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1003DFAAC()
{
}

void sub_1003DFAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p = 0;
  long long v5 = 0;
  uint64_t v6 = 0;
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 48))(v3, &__p);
  if (__p)
  {
    long long v5 = __p;
    operator delete(__p);
  }
}

void sub_1003DFB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DFB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = std::generic_category();

  return sub_1003DFBA4(a4, 45, (uint64_t)v5);
}

uint64_t sub_1003DFBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
}

uint64_t sub_1003DFBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003DFC04(a3, 0);
}

uint64_t sub_1003DFC04(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1003DFC5C()
{
  return 0;
}

uint64_t sub_1003DFC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003DFC70(a3, 0);
}

uint64_t sub_1003DFC70(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1003DFCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003DFC70(a3, 0);
}

uint64_t sub_1003DFCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003DFC70(a3, 0);
}

uint64_t sub_1003DFCDC(uint64_t a1, uint64_t a2)
{
  return sub_1003DFC70(a2, 0);
}

uint64_t sub_1003DFCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100335978(a3, 0);
}

void sub_1003DFD00(MaxDataRateInterface *a1)
{
  MaxDataRateInterface::~MaxDataRateInterface(a1);

  operator delete();
}

void sub_1003DFD38(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1003E02E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, uint64_t a11, dispatch_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_1003E0544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  sub_100087E88(v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  JUMPOUT(0x1003E0518);
}

void sub_1003E056C()
{
}

const char *sub_1003E0574(int a1)
{
  uint64_t v1 = "elqm.?";
  if (a1 == 2) {
    uint64_t v1 = "elqm.2";
  }
  if (a1 == 1) {
    return "elqm.1";
  }
  else {
    return v1;
  }
}

void sub_1003E05A0(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1003E06A0(uint64_t a1)
{
  *(void *)a1 = off_1019C5A48;
  sub_100160A84((atomic_uint **)(a1 + 200));
  sub_10005D144(*(void **)(a1 + 184));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3) {
    sub_10004D2C8(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 112);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  EnhancedLQMInterface::~EnhancedLQMInterface((EnhancedLQMInterface *)a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1003E0784(uint64_t a1)
{
  sub_1003E06A0(a1);

  operator delete();
}

void sub_1003E07BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 161))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 160)) {
        uint64_t v3 = "true";
      }
      else {
        uint64_t v3 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I fReportLinkState = %s", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 163))
  {
    int v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 162)) {
        uint64_t v5 = "true";
      }
      else {
        uint64_t v5 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I fReportLinkFingerPrint = %s", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 165))
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 164)) {
        uint64_t v7 = "true";
      }
      else {
        uint64_t v7 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I fReportTrafficClass = %s", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 167))
  {
    uint64_t v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 166)) {
        uint64_t v9 = "true";
      }
      else {
        uint64_t v9 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I fReportDataTransferTime = %s", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned int v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 168)) {
        uint64_t v11 = "true";
      }
      else {
        uint64_t v11 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I fReportLinkPowerCost = %s", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 171))
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 170)) {
        unint64_t v13 = "true";
      }
      else {
        unint64_t v13 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I fReportDataStall = %s", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 173))
  {
    uint64_t v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 172)) {
        int v15 = "true";
      }
      else {
        int v15 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I fReportHighThroughput = %s", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 175))
  {
    uint64_t v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 174)) {
        char v17 = "true";
      }
      else {
        char v17 = "false";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = (uint64_t)v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I fReportNRServingCellType = %s", buf, 0xCu);
    }
  }
  char v18 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = "s";
    uint64_t v20 = *(void *)(a1 + 192);
    if (v20 == 1) {
      int v19 = "";
    }
    *(_DWORD *)buf = 134218242;
    uint64_t v30 = v20;
    __int16 v31 = 2080;
    uint8x8_t v32 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Driver supports %zu indication%s", buf, 0x16u);
  }
  float v21 = *(void **)(a1 + 176);
  if (v21 != (void *)(a1 + 184))
  {
    do
    {
      float v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = asString();
        *(_DWORD *)buf = 136315138;
        uint64_t v30 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s is supported", buf, 0xCu);
      }
      unint64_t v24 = (void *)v21[1];
      if (v24)
      {
        do
        {
          unint64_t v25 = v24;
          unint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unint64_t v25 = (void *)v21[2];
          BOOL v26 = *v25 == (void)v21;
          float v21 = v25;
        }
        while (!v26);
      }
      float v21 = v25;
    }
    while (v25 != (void *)(a1 + 184));
  }
  uint64_t v27 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 152)) {
      uint64_t v28 = "true";
    }
    else {
      uint64_t v28 = "false";
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v30 = (uint64_t)v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I Radio is down: %s", buf, 0xCu);
  }
}

void *sub_1003E0CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 88);
  sub_1003E3F60((uint64_t)v6, a2);
  uint64_t v8 = 0;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = off_1019C5F18;
  v3[1] = a1;
  sub_1003E3F60((uint64_t)(v3 + 2), (uint64_t)v6);
  uint64_t v8 = v3;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 40))(v2, v7);
  sub_1003E3FE0(v7);
  return sub_1003E3FE0(v6);
}

void sub_1003E0DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1003E3FE0((uint64_t *)va);
  sub_1003E3FE0(v6);
  _Unwind_Resume(a1);
}

void sub_1003E0E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1003E4748((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003E0F3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1003E0F4C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = a1;
  int v6 = a2;
  sub_1003E4CA0((uint64_t)&v7, a3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003E1094(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1003E10A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)*a2;
  uint64_t v9 = a1;
  unsigned int v10 = v4;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  v11[0] = v6;
  v11[1] = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v11;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    unsigned int v10 = v11;
  }
  sub_100023950((uint64_t)&v12, a3);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    if (std::__shared_weak_count::lock(v8)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003E1244(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1003E1254(uint64_t a1, int a2, __int16 a3, const void **a4, uint64_t a5)
{
  uint64_t v8 = a1;
  int v9 = a2;
  __int16 v10 = a3;
  sub_10002FD9C(&v11, a4);
  sub_100023950((uint64_t)&v12, a5);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003E13C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1003E13D8(uint64_t *result, unsigned char *a2)
{
  uint64_t v3 = result;
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = (uint64_t)(result + 1);
  if (a2[161] && a2[160]) {
    uint64_t result = sub_1003E516C(result, 16, 16);
  }
  if (a2[163] && a2[162]) {
    uint64_t result = sub_1003E516C(v3, 17, 17);
  }
  if (a2[165] && a2[164]) {
    uint64_t result = sub_1003E516C(v3, 18, 18);
  }
  if (a2[167] && a2[166]) {
    uint64_t result = sub_1003E516C(v3, 19, 19);
  }
  if (a2[169] && a2[168]) {
    uint64_t result = sub_1003E516C(v3, 21, 21);
  }
  if (a2[171] && a2[170]) {
    uint64_t result = sub_1003E516C(v3, 22, 22);
  }
  if (a2[173] && a2[172]) {
    uint64_t result = sub_1003E516C(v3, 23, 23);
  }
  if (a2[175])
  {
    if (a2[174]) {
      return sub_1003E516C(v3, 24, 24);
    }
  }
  return result;
}

void sub_1003E1514(_Unwind_Exception *a1)
{
  sub_10005D144(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E1544(uint64_t a1, void *a2)
{
  uint64_t v5 = (uint64_t **)*a2;
  uint64_t v3 = (uint64_t **)(a2 + 1);
  uint64_t v4 = (uint64_t *)v5;
  if (v5 != v3)
  {
    uint64_t v6 = (void *)(a1 + 184);
    while (1)
    {
      uint64_t v7 = *(void **)(a1 + 176);
      if (v7 != v6)
      {
        uint64_t v7 = *(void **)(a1 + 176);
        while (*((_DWORD *)v7 + 7) != *((_DWORD *)v4 + 7))
        {
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            do
            {
              int v9 = v8;
              uint64_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              int v9 = (void *)v7[2];
              BOOL v10 = *v9 == (void)v7;
              uint64_t v7 = v9;
            }
            while (!v10);
          }
          uint64_t v7 = v9;
          if (v9 == v6) {
            goto LABEL_27;
          }
        }
      }
      if (v7 == v6) {
        break;
      }
      uint64_t v11 = (uint64_t *)v4[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (uint64_t **)v11;
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (uint64_t **)v4[2];
          BOOL v10 = *v12 == v4;
          uint64_t v4 = (uint64_t *)v12;
        }
        while (!v10);
      }
      uint64_t v4 = (uint64_t *)v12;
      if (v12 == v3) {
        goto LABEL_20;
      }
    }
LABEL_27:
    int v15 = *(NSObject **)(a1 + 40);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v16) {
      return result;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = asString();
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#N This device does not support registering for %s indications", (uint8_t *)&buf, 0xCu);
    return 0;
  }
LABEL_20:
  if (*(unsigned char *)(a1 + 152)) {
    return 0;
  }
  unint64_t v13 = *v3;
  if (!*v3) {
    goto LABEL_31;
  }
  while (1)
  {
    int v14 = *((_DWORD *)v13 + 7);
    if (v14 <= 16) {
      break;
    }
LABEL_25:
    unint64_t v13 = (uint64_t *)*v13;
    if (!v13) {
      goto LABEL_31;
    }
  }
  if (v14 != 16)
  {
    ++v13;
    goto LABEL_25;
  }
  LOBYTE(v13) = 1;
LABEL_31:
  if (!*(unsigned char *)(a1 + 161)) {
    *(unsigned char *)(a1 + 161) = 1;
  }
  *(unsigned char *)(a1 + 160) = (_BYTE)v13;
  for (uint64_t i = *v3; i; uint64_t i = (uint64_t *)*i)
  {
    int v19 = *((_DWORD *)i + 7);
    if (v19 <= 17)
    {
      if (v19 == 17)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  if (!*(unsigned char *)(a1 + 163)) {
    *(unsigned char *)(a1 + 163) = 1;
  }
  *(unsigned char *)(a1 + 162) = (_BYTE)i;
  for (j = *v3; j; j = (uint64_t *)*j)
  {
    int v21 = *((_DWORD *)j + 7);
    if (v21 <= 18)
    {
      if (v21 == 18)
      {
        LOBYTE(j) = 1;
        break;
      }
      ++j;
    }
  }
  if (!*(unsigned char *)(a1 + 165)) {
    *(unsigned char *)(a1 + 165) = 1;
  }
  *(unsigned char *)(a1 + 164) = (_BYTE)j;
  for (k = *v3; k; k = (uint64_t *)*k)
  {
    int v23 = *((_DWORD *)k + 7);
    if (v23 <= 19)
    {
      if (v23 == 19)
      {
        LOBYTE(k) = 1;
        break;
      }
      ++k;
    }
  }
  if (!*(unsigned char *)(a1 + 167)) {
    *(unsigned char *)(a1 + 167) = 1;
  }
  *(unsigned char *)(a1 + 166) = (_BYTE)k;
  for (m = *v3; m; m = (uint64_t *)*m)
  {
    int v25 = *((_DWORD *)m + 7);
    if (v25 <= 21)
    {
      if (v25 == 21)
      {
        LOBYTE(m) = 1;
        break;
      }
      ++m;
    }
  }
  if (!*(unsigned char *)(a1 + 169)) {
    *(unsigned char *)(a1 + 169) = 1;
  }
  *(unsigned char *)(a1 + 168) = (_BYTE)m;
  for (n = *v3; n; n = (uint64_t *)*n)
  {
    int v27 = *((_DWORD *)n + 7);
    if (v27 <= 22)
    {
      if (v27 == 22)
      {
        LOBYTE(n) = 1;
        break;
      }
      ++n;
    }
  }
  if (!*(unsigned char *)(a1 + 171)) {
    *(unsigned char *)(a1 + 171) = 1;
  }
  *(unsigned char *)(a1 + 170) = (_BYTE)n;
  for (iuint64_t i = *v3; ii; iuint64_t i = (uint64_t *)*ii)
  {
    int v29 = *((_DWORD *)ii + 7);
    if (v29 <= 23)
    {
      if (v29 == 23)
      {
        LOBYTE(ii) = 1;
        break;
      }
      ++ii;
    }
  }
  if (!*(unsigned char *)(a1 + 173)) {
    *(unsigned char *)(a1 + 173) = 1;
  }
  *(unsigned char *)(a1 + 172) = (_BYTE)ii;
  for (jj = *v3; jj; jj = (uint64_t *)*jj)
  {
    int v31 = *((_DWORD *)jj + 7);
    if (v31 <= 24)
    {
      if (v31 == 24)
      {
        LOBYTE(jj) = 1;
        break;
      }
      ++jj;
    }
  }
  if (!*(unsigned char *)(a1 + 175)) {
    *(unsigned char *)(a1 + 175) = 1;
  }
  *(unsigned char *)(a1 + 174) = (_BYTE)jj;
  uint64_t SimSlotRange = subscriber::makeSimSlotRange();
  unint64_t v33 = (unsigned int *)*((void *)&buf + 1);
  uint8x8_t v34 = (unsigned int *)buf;
  if ((void)buf != *((void *)&buf + 1))
  {
    uint64_t v35 = v42;
    while (1)
    {
      uint64_t SimSlotRange = v42(*v34);
      if (SimSlotRange) {
        break;
      }
      if (++v34 == *((unsigned int **)&buf + 1))
      {
        uint8x8_t v34 = (unsigned int *)*((void *)&buf + 1);
        break;
      }
    }
    uint64_t v36 = (unsigned int *)*((void *)&buf + 1);
LABEL_102:
    while (v34 != v36)
    {
      uint64_t v37 = *v34;
      uint64_t v38 = *(void *)(a1 + 88);
      sub_1003E13D8(v40, (unsigned char *)a1);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v38 + 56))(v38, v37, v40);
      sub_10005D144((void *)v40[1]);
      unint64_t v39 = v34 + 1;
      uint8x8_t v34 = v33;
      if (v39 != v33)
      {
        uint8x8_t v34 = v39;
        while (1)
        {
          uint64_t SimSlotRange = v35(*v34);
          if (SimSlotRange) {
            break;
          }
          if (++v34 == v33)
          {
            uint8x8_t v34 = v33;
            goto LABEL_102;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 161)) {
    uint64_t SimSlotRange = persistentSaveValue();
  }
  if (*(unsigned char *)(a1 + 163)) {
    uint64_t SimSlotRange = persistentSaveValue();
  }
  if (*(unsigned char *)(a1 + 165)) {
    uint64_t SimSlotRange = persistentSaveValue();
  }
  if (*(unsigned char *)(a1 + 167)) {
    uint64_t SimSlotRange = persistentSaveValue();
  }
  if (*(unsigned char *)(a1 + 169)) {
    uint64_t SimSlotRange = persistentSaveValue();
  }
  if (*(unsigned char *)(a1 + 171)) {
    uint64_t SimSlotRange = persistentSaveValue();
  }
  if (capabilities::ct::supports5G((capabilities::ct *)SimSlotRange))
  {
    if (*(unsigned char *)(a1 + 173)) {
      persistentSaveValue();
    }
    if (*(unsigned char *)(a1 + 175)) {
      persistentSaveValue();
    }
  }
  return 1;
}

void sub_1003E1B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1003E1B48(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 161) || *(unsigned char *)(a1 + 163)) && !*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Registering for notifications after exiting low power", buf, 2u);
    }
    subscriber::makeSimSlotRange();
    uint64_t v4 = *(unsigned int **)buf;
    uint64_t v3 = v12;
    if (*(unsigned int **)buf != v12)
    {
      uint64_t v5 = v13;
      while ((v5(*v4) & 1) == 0)
      {
        if (++v4 == v3)
        {
          uint64_t v4 = v3;
          break;
        }
      }
      uint64_t v6 = v12;
LABEL_13:
      while (v4 != v6)
      {
        uint64_t v7 = *v4;
        uint64_t v8 = *(void *)(a1 + 88);
        sub_1003E13D8(v10, (unsigned char *)a1);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, v7, v10);
        sub_10005D144((void *)v10[1]);
        int v9 = v4 + 1;
        uint64_t v4 = v3;
        if (v9 != v3)
        {
          uint64_t v4 = v9;
          while ((v5(*v4) & 1) == 0)
          {
            if (++v4 == v3)
            {
              uint64_t v4 = v3;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
}

void sub_1003E1CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1003E1CB8(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 156) != a2)
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I User data SIM has changed to %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void *sub_1003E1D64(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003E1DE8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003E1E70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003E1EA8(uint64_t a1)
{
}

uint64_t sub_1003E1EC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003E1F08(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1003E1F34(ServiceManager::Service *this)
{
  *(void *)this = off_1019C5BB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_1003E1F90(ServiceManager::Service *this)
{
  *(void *)this = off_1019C5BB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_1003E2000@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "EnhancedLQMController");
}

unsigned char *sub_1003E2010@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 3;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1003E2050(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    sub_1003E05A0(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_1003E05A0(v4, 0);
}

uint64_t sub_1003E20C4()
{
  return 0;
}

uint64_t sub_1003E20CC()
{
  return 1;
}

uint64_t sub_1003E20D4()
{
  return 0;
}

void sub_1003E20E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003E21C0(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (a2 == 3)
  {
    group[0] = *(dispatch_group_t *)(a1 + 8);
    ServiceStage::holdOffStage((uint64_t *)&group[1], this);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(group[0]) = 136315138;
    *(dispatch_group_t *)((char *)group + 4) = (dispatch_group_t)asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N Not handling unexpected shutdown stage (%s)", (uint8_t *)group, 0xCu);
  }
}

void sub_1003E235C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1003E2378()
{
}

uint64_t sub_1003E238C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

uint64_t *sub_1003E2398(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  int v9 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(NSObject **)(*v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down", buf, 2u);
  }
  for (uint64_t i = *(void *)(v2 + 208); i != v2 + 200; uint64_t i = *(void *)(i + 8))
    sub_10016111C((uint64_t *)(i + 16));
  sub_100160A84((atomic_uint **)(v2 + 200));
  uint64_t v5 = *(void *)(v2 + 88);
  uint64_t v6 = v1[1];
  *(void *)long long buf = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 32))(v5, buf);
  if (*(void *)buf)
  {
    dispatch_group_leave(*(dispatch_group_t *)buf);
    if (*(void *)buf) {
      dispatch_release(*(dispatch_object_t *)buf);
    }
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 136));
  sub_100088C88((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_1003E24B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_group_t group)
{
}

void sub_1003E24F0(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", (uint8_t *)&buf, 2u);
  }
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (std::__shared_weak_count *)operator new(0x30uLL);
      v7->__shared_owners_ = 0;
      v7->__shared_weak_owners_ = 0;
      v7->__vftable = (std::__shared_weak_count_vtbl *)off_1019C5C78;
      v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_1019C5D30;
      v7[1].__shared_owners_ = v4;
      v7[1].__shared_weak_owners_ = (uint64_t)v6;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v6);
      v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_1019C5CC8;
      uint64_t v8 = *(void *)(v1 + 88);
      int v9 = dispatch_group_create();
      BOOL v10 = v9;
      dispatch_group_t group = v9;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v10);
      }
      int v14 = v7 + 1;
      int v15 = v7;
      (*(void (**)(uint64_t, dispatch_group_t *, std::__shared_weak_count **))(*(void *)v8 + 16))(v8, &group, &v14);
      if (v15) {
        sub_10004D2C8(v15);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v10) {
        dispatch_release(v10);
      }
      int v19 = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 0x40000000;
      aBlock[2] = sub_1003E376C;
      aBlock[3] = &unk_1019C5D58;
      aBlock[4] = v1 + 8;
      aBlock[5] = sub_1003E1B48;
      aBlock[6] = 0;
      int v19 = _Block_copy(aBlock);
      uint64_t v11 = *(std::__shared_weak_count **)(v1 + 16);
      if (v11)
      {
        uint64_t v12 = std::__shared_weak_count::lock(v11);
        if (v12)
        {
          unint64_t v13 = v12;
          sub_1001644F8(v18, &v19, *(dispatch_object_t *)(v1 + 24));
          sub_100164540(&buf, v18);
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_1003E2CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,uint64_t a28,const void *a29,__int16 a30,char a31,char a32,int a33,const void *a34,const void *a35,uint64_t a36)
{
  sub_1000577C4(&a29);
  sub_100062778(&a34);
  sub_100062778(&a35);
  sub_100062778((const void **)&a36);
  sub_100062778(&a12);
  sub_100062778(&a27);
  sub_100062778((const void **)&__p);
  sub_100062778((const void **)(v36 - 160));
  sub_100088C88(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void sub_1003E2F1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C5C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003E2F3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C5C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1003E2F90(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1003E2FB8(EnhancedLQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_1019C5D30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  EnhancedLQMCommandDriverDelegateInterface::~EnhancedLQMCommandDriverDelegateInterface(this);
}

void sub_1003E3014(EnhancedLQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_1019C5D30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  EnhancedLQMCommandDriverDelegateInterface::~EnhancedLQMCommandDriverDelegateInterface(this);

  operator delete();
}

void sub_1003E3084(uint64_t a1, char a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 8);
      if (v7)
      {
        char v8 = a2 ^ 1;
        *(unsigned char *)(v7 + 152) = a2 ^ 1;
        int v9 = *(NSObject **)(v7 + 40);
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            LOWORD(v11[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Command driver is not ready", (uint8_t *)v11, 2u);
          }
        }
        else
        {
          if (v10)
          {
            LOWORD(v11[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Command driver is ready, querying for supported notifications", (uint8_t *)v11, 2u);
          }
          v11[3] = 0;
          sub_1003E0CFC(v7, (uint64_t)v11);
          sub_1003E3FE0(v11);
        }
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_1003E31D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1003E3FE0(&a9);
  sub_10004D2C8(v9);
  _Unwind_Resume(a1);
}

void sub_1003E31EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    int v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      BOOL v10 = v9;
      uint64_t v11 = *(void *)(a1 + 8);
      if (!v11)
      {
LABEL_31:
        sub_10004D2C8(v10);
        return;
      }
      int v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      sub_10005C928(&v19, *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
      if (*(_DWORD *)(v11 + 156) != a2)
      {
LABEL_29:
        (*(void (**)(void, uint64_t, uint64_t, void **))(**(void **)(v11 + 104) + 64))(*(void *)(v11 + 104), a2, a3, &v19);
        if (v19)
        {
          uint64_t v20 = v19;
          operator delete(v19);
        }
        goto LABEL_31;
      }
      xpc_object_t v29 = 0;
      xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v13 = v12;
      if (v12)
      {
        xpc_object_t v29 = v12;
      }
      else
      {
        xpc_object_t v13 = xpc_null_create();
        xpc_object_t v29 = v13;
        if (!v13)
        {
          xpc_object_t v14 = xpc_null_create();
          xpc_object_t v13 = 0;
          goto LABEL_12;
        }
      }
      if (xpc_get_type(v13) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v13);
LABEL_13:
        xpc_release(v13);
        xpc_object_t v27 = xpc_int64_create((int)a3);
        if (!v27) {
          xpc_object_t v27 = xpc_null_create();
        }
        long long v30 = 0uLL;
        uint64_t v31 = 0;
        ctu::cf::assign();
        *(_OWORD *)std::string __p = v30;
        uint64_t v24 = v31;
        int v15 = (void **)v30;
        if (v31 >= 0) {
          int v15 = __p;
        }
        int v25 = &v29;
        BOOL v26 = v15;
        sub_100035E70((uint64_t)&v25, &v27, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (SHIBYTE(v24) < 0) {
          operator delete(__p[0]);
        }
        xpc_release(v27);
        xpc_object_t v27 = 0;
        xpc_object_t v22 = xpc_data_create(v19, v20 - (unsigned char *)v19);
        if (!v22) {
          xpc_object_t v22 = xpc_null_create();
        }
        long long v30 = 0uLL;
        uint64_t v31 = 0;
        ctu::cf::assign();
        *(_OWORD *)std::string __p = v30;
        uint64_t v24 = v31;
        BOOL v16 = __p;
        if (v31 < 0) {
          BOOL v16 = (void **)__p[0];
        }
        int v25 = &v29;
        BOOL v26 = v16;
        sub_100035E70((uint64_t)&v25, &v22, (xpc_object_t *)&v30);
        xpc_release((xpc_object_t)v30);
        *(void *)&long long v30 = 0;
        if (SHIBYTE(v24) < 0) {
          operator delete(__p[0]);
        }
        xpc_release(v22);
        xpc_object_t v17 = v29;
        xpc_object_t v22 = 0;
        __p[0] = v29;
        if (v29)
        {
          xpc_retain(v29);
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          __p[0] = v17;
        }
        char v18 = (xpc_object_t *)xpc_null_create();
        int v25 = v18;
        sub_1000452AC(149, __p, (xpc_object_t *)&v25);
        xpc_release(v18);
        xpc_release(v17);
        xpc_release(v29);
        goto LABEL_29;
      }
      xpc_object_t v14 = xpc_null_create();
LABEL_12:
      xpc_object_t v29 = v14;
      goto LABEL_13;
    }
  }
}

void sub_1003E34D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(v21);
  xpc_release(v20);
  xpc_release(*(xpc_object_t *)(v22 - 80));
  if (__p) {
    operator delete(__p);
  }
  sub_10004D2C8(v19);
  _Unwind_Resume(a1);
}

void sub_1003E35AC(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    int v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      BOOL v10 = v9;
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11)
      {
        sub_10002FD9C(&cf, a4);
        uint64_t v12 = *(void *)(v11 + 120);
        CFTypeRef v14 = cf;
        if (cf) {
          CFRetain(cf);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(void *)v12 + 16))(v12, a2, a3, &v14);
        sub_100030068(&v14);
        sub_100030068(&cf);
      }
      sub_10004D2C8(v10);
    }
  }
}

void sub_1003E367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_100030068(&a10);
  sub_100030068(&a9);
  sub_10004D2C8(v10);
  _Unwind_Resume(a1);
}

void sub_1003E36A0(EnhancedLQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_1019C5D30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  EnhancedLQMCommandDriverDelegateInterface::~EnhancedLQMCommandDriverDelegateInterface(this);
}

void sub_1003E36FC(EnhancedLQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_1019C5D30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  EnhancedLQMCommandDriverDelegateInterface::~EnhancedLQMCommandDriverDelegateInterface(this);

  operator delete();
}

uint64_t sub_1003E376C(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void *sub_1003E37B8(void *a1)
{
  *a1 = off_1019C5D88;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1003E3804(void *a1)
{
  *a1 = off_1019C5D88;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_1003E3870(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::lock(v1);
  }
  operator new();
}

void sub_1003E3920(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003E3938(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void sub_1003E3958()
{
}

void *sub_1003E39C4(void *a1)
{
  *a1 = off_1019C5DD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1003E3A10(void *a1)
{
  *a1 = off_1019C5DD8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void sub_1003E3A7C()
{
}

void sub_1003E3AEC()
{
}

__n128 sub_1003E3B00(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C5E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003E3B54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C5E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003E3B8C(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1003E3BD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E3C14()
{
}

void sub_1003E3C24()
{
}

__n128 sub_1003E3C38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C5E98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E3C8C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C5E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003E3CC4(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  BOOL v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    BOOL v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_1003E3DBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E3DFC()
{
}

void sub_1003E3E08(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *(void *)long long buf = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v3 + 24))(v3, buf);
  if (*(void *)buf)
  {
    dispatch_group_leave(*(dispatch_group_t *)buf);
    if (*(void *)buf) {
      dispatch_release(*(dispatch_object_t *)buf);
    }
  }
  if (v5) {
    dispatch_release(v5);
  }
  operator delete();
}

void sub_1003E3F10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v11) {
    dispatch_release(v11);
  }
  operator delete();
}

uint64_t sub_1003E3F60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_1003E3FE0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003E4064(void *a1)
{
  *a1 = off_1019C5F18;
  sub_1003E3FE0(a1 + 2);
  return a1;
}

void sub_1003E40A8(void *a1)
{
  *a1 = off_1019C5F18;
  sub_1003E3FE0(a1 + 2);

  operator delete();
}

void *sub_1003E410C(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_1019C5F18;
  v2[1] = v3;
  sub_1003E46B0((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1003E4164(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E4178(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019C5F18;
  a2[1] = v2;
  return sub_1003E46B0((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_1003E41A8(uint64_t a1)
{
  return sub_1003E3FE0((void *)(a1 + 16));
}

void sub_1003E41B0(void *a1)
{
  sub_1003E3FE0(a1 + 2);

  operator delete(a1);
}

void sub_1003E41EC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void **)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)a2[1];
  uint64_t v35 = (void **)*a2;
  uint64_t v36 = v5;
  uint64_t v37 = a2[2];
  if (v37)
  {
    void v5[2] = &v36;
    *a2 = v4;
    *uint64_t v4 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v35 = &v36;
    uint64_t v3 = &v36;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if ((void ***)(v6 + 176) == &v35) {
    goto LABEL_50;
  }
  if (*(void *)(v6 + 192))
  {
    char v8 = (uint64_t **)(v6 + 184);
    uint64_t v7 = *(void *)(v6 + 184);
    uint64_t v9 = *(void *)(v6 + 176);
    *(void *)(v6 + 176) = v6 + 184;
    *(void *)(v7 + 16) = 0;
    *(void *)(v6 + 184) = 0;
    *(void *)(v6 + 192) = 0;
    if (*(void *)(v9 + 8)) {
      uint64_t v10 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v10 = v9;
    }
    if (v10)
    {
      uint64_t v11 = sub_1000EA590(v10);
      if (v3 == &v36)
      {
        xpc_object_t v13 = (void *)v10;
        uint64_t v3 = &v36;
      }
      else
      {
        uint64_t v12 = v3;
        do
        {
          xpc_object_t v13 = v11;
          int v14 = *((_DWORD *)v12 + 7);
          *(_DWORD *)(v10 + 28) = v14;
          int v15 = *v8;
          BOOL v16 = (uint64_t **)(v6 + 184);
          xpc_object_t v17 = (uint64_t **)(v6 + 184);
          if (*v8)
          {
            do
            {
              while (1)
              {
                BOOL v16 = (uint64_t **)v15;
                if (v14 >= *((_DWORD *)v15 + 7)) {
                  break;
                }
                int v15 = (uint64_t *)*v15;
                xpc_object_t v17 = v16;
                if (!*v16) {
                  goto LABEL_18;
                }
              }
              int v15 = (uint64_t *)v15[1];
            }
            while (v15);
            xpc_object_t v17 = v16 + 1;
          }
LABEL_18:
          sub_100046C38((uint64_t **)(v6 + 176), (uint64_t)v16, v17, (uint64_t *)v10);
          if (v11) {
            uint64_t v11 = sub_1000EA590((uint64_t)v11);
          }
          else {
            uint64_t v11 = 0;
          }
          char v18 = v12[1];
          if (v18)
          {
            do
            {
              uint64_t v3 = (void **)v18;
              char v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v3 = (void **)v12[2];
              BOOL v19 = *v3 == v12;
              uint64_t v12 = v3;
            }
            while (!v19);
          }
          if (!v13) {
            break;
          }
          uint64_t v10 = (uint64_t)v13;
          uint64_t v12 = v3;
        }
        while (v3 != &v36);
      }
      sub_10005D144(v13);
      if (!v11) {
        goto LABEL_36;
      }
      for (uint64_t i = (void *)v11[2]; i; uint64_t i = (void *)i[2])
        uint64_t v11 = i;
      uint64_t v20 = v11;
    }
    else
    {
      uint64_t v20 = 0;
    }
    sub_10005D144(v20);
  }
LABEL_36:
  if (v3 != &v36)
  {
    uint64_t v22 = (uint64_t **)(v6 + 184);
    do
    {
      int v23 = *((_DWORD *)v3 + 7);
      uint64_t v24 = (uint64_t *)operator new(0x20uLL);
      *((_DWORD *)v24 + 7) = v23;
      int v25 = *v22;
      BOOL v26 = (uint64_t **)(v6 + 184);
      xpc_object_t v27 = (uint64_t **)(v6 + 184);
      if (*v22)
      {
        do
        {
          while (1)
          {
            BOOL v26 = (uint64_t **)v25;
            if (*((_DWORD *)v25 + 7) <= v23) {
              break;
            }
            int v25 = (uint64_t *)*v25;
            xpc_object_t v27 = v26;
            if (!*v26) {
              goto LABEL_44;
            }
          }
          int v25 = (uint64_t *)v25[1];
        }
        while (v25);
        xpc_object_t v27 = v26 + 1;
      }
LABEL_44:
      sub_100046C38((uint64_t **)(v6 + 176), (uint64_t)v26, v27, v24);
      uint64_t v28 = v3[1];
      if (v28)
      {
        do
        {
          xpc_object_t v29 = (void **)v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          xpc_object_t v29 = (void **)v3[2];
          BOOL v19 = *v29 == v3;
          uint64_t v3 = v29;
        }
        while (!v19);
      }
      uint64_t v3 = v29;
    }
    while (v29 != &v36);
  }
LABEL_50:
  uint64_t v30 = *(void *)(a1 + 40);
  if (v30)
  {
    *(void *)long long buf = v35;
    *(void *)&uint8_t buf[8] = v36;
    *(void *)&uint8_t buf[16] = v37;
    if (v37)
    {
      _OWORD v36[2] = &buf[8];
      uint64_t v35 = &v36;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      *(void *)long long buf = &buf[8];
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v30 + 48))(v30, buf);
    sub_10005D144(*(void **)&buf[8]);
  }
  else
  {
    uint64_t v31 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint8x8_t v32 = "s";
      if (v37 == 1) {
        uint8x8_t v32 = "";
      }
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %zu indication%s supported", buf, 0x16u);
    }
    sub_1003E13D8((uint64_t *)buf, (unsigned char *)v6);
    sub_1003E1544(v6, buf);
    sub_10005D144(*(void **)&buf[8]);
    sCreateSupportedIndicationDict();
    xpc_object_t v33 = object;
    *(void *)long long buf = object;
    if (object)
    {
      xpc_retain(object);
    }
    else
    {
      xpc_object_t v33 = xpc_null_create();
      *(void *)long long buf = v33;
    }
    xpc_object_t v34 = xpc_null_create();
    xpc_object_t v38 = v34;
    sub_1000452AC(150, (xpc_object_t *)buf, &v38);
    xpc_release(v34);
    xpc_release(v33);
    *(void *)long long buf = 0;
    xpc_release(object);
  }
  sub_10005D144(v36);
}

void sub_1003E45E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003E4664(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E46A4()
{
}

uint64_t sub_1003E46B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003E4748(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_1003E47C8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *v1;
  if (*(unsigned char *)(*v1 + 152))
  {
    v9[0] = 0;
    v9[1] = 0;
    char v8 = v9;
    sub_1003E4964(v1[4], 35);
    sub_10005D144(v9[0]);
  }
  else
  {
    sub_1003E49B4((uint64_t)v7, (uint64_t)(v1 + 1));
    uint64_t v10 = 0;
    uint64_t v3 = operator new(0x28uLL);
    *uint64_t v3 = off_1019C5FA8;
    sub_1003E4748((uint64_t)(v3 + 1), (uint64_t)v7);
    uint64_t v10 = v3;
    sub_1003E0CFC(v2, (uint64_t)&v8);
    sub_1003E3FE0(&v8);
    sub_1003E1D64(v7);
  }
  sub_1003E4914((uint64_t *)&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_1003E48C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, void);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_1003E3FE0((uint64_t *)va3);
  sub_1003E1D64((uint64_t *)va2);
  sub_1003E4914((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003E4914(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_1003E1D64((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_1003E4964(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t sub_1003E49B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003E4A4C(void *a1)
{
  *a1 = off_1019C5FA8;
  sub_1003E1D64(a1 + 1);
  return a1;
}

void sub_1003E4A90(void *a1)
{
  *a1 = off_1019C5FA8;
  sub_1003E1D64(a1 + 1);

  operator delete();
}

void *sub_1003E4AF4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_1019C5FA8;
  sub_1003E49B4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003E4B48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E4B5C(uint64_t a1, void *a2)
{
  *a2 = off_1019C5FA8;
  return sub_1003E49B4((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1003E4B88(uint64_t a1)
{
  return sub_1003E1D64((void *)(a1 + 8));
}

void sub_1003E4B90(void *a1)
{
  sub_1003E1D64(a1 + 1);

  operator delete(a1);
}

void sub_1003E4BCC(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)a2[1];
  uint64_t v4 = v3;
  if (a2[2])
  {
    v3[2] = &v4;
    *a2 = v2;
    *uint64_t v2 = 0;
    a2[2] = 0;
  }
  sub_1003E4964(*(void *)(a1 + 32), 0);
  sub_10005D144(v4);
}

void sub_1003E4C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_1003E4C54(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019C6008)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1003E4C94()
{
  return &off_1019C6008;
}

uint64_t sub_1003E4CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_1003E4D20(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  if (!*(unsigned char *)(*(void *)v1 + 152))
  {
    uint64_t v3 = *(void *)(*(void *)v1 + 88);
    uint64_t v4 = *(unsigned int *)(v1 + 8);
    uint64_t v5 = *(void *)(v1 + 40);
    if (v5)
    {
      if (v5 == v1 + 16)
      {
        p_p = &__p;
        (*(void (**)(uint64_t, void **))(*(void *)v5 + 24))(v5, &__p);
        goto LABEL_10;
      }
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    p_p = (void **)v5;
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, v4, &__p);
    sub_1003E1DE8(&__p);
    goto LABEL_11;
  }
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v2 = *(void *)(v1 + 40);
  int v9 = 35;
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, int *, void **))(*(void *)v2 + 48))(v2, &v9, &__p);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
LABEL_11:
  sub_1003E4EE8(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_1003E4EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *sub_1003E4EE8(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_1003E1DE8((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_1003E4F38(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  char v2 = sub_1003E1544(*v1, v1 + 1);
  sub_1000607A8((uint64_t)(v1 + 4), v2);
  sub_1003E4FA8((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1003E4F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1003E4FA8(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 32));
    sub_10005D144(*(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_1003E5000(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  uint64_t v4 = *(unsigned __int16 *)(v1 + 12);
  sub_10002FD9C(&v8, (const void **)(v1 + 16));
  sub_1000DFC90((uint64_t)v9, v1 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const void **, void *))(*(void *)v2 + 80))(v2, v3, v4, &v8, v9);
  sub_100060644(v9);
  sub_100030068(&v8);
  sub_1003E5114(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_1003E50E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12)
{
}

uint64_t *sub_1003E5114(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 24));
    sub_100030068((const void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_1003E516C(uint64_t *result, int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_100046C38(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_1003E5218(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1003E5284()
{
}

void *sub_1003E52A8(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C61F8;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v9;
  uint64_t v10[3] = v6;
  sub_100043ED0((uint64_t)v10, *v5);
  return sub_100043E48(v10);
}

void sub_1003E5364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5380(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a4;
  int v10 = a2;
  uint64_t v6 = *(void ***)(a1 + 16);
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = off_1019C6278;
  v7[1] = a3;
  v7[2] = &v11;
  void v7[3] = a1;
  void v7[4] = &v10;
  void v12[3] = v7;
  sub_100043ED0((uint64_t)v12, *v6);
  return sub_100043E48(v12);
}

void sub_1003E5448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5464(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a4;
  int v10 = a2;
  uint64_t v6 = *(void ***)(a1 + 16);
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = off_1019C62F8;
  v7[1] = a3;
  v7[2] = &v11;
  void v7[3] = a1;
  void v7[4] = &v10;
  void v12[3] = v7;
  sub_100043ED0((uint64_t)v12, *v6);
  return sub_100043E48(v12);
}

void sub_1003E552C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5548(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C6378;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v9;
  uint64_t v10[3] = v6;
  sub_100043ED0((uint64_t)v10, *v5);
  return sub_100043E48(v10);
}

void sub_1003E5604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5620(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C63F8;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v9;
  uint64_t v10[3] = v6;
  sub_100043ED0((uint64_t)v10, *v5);
  return sub_100043E48(v10);
}

void sub_1003E56DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E56F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C6478;
  v10[1] = a3;
  v10[2] = a4;
  uint64_t v10[3] = a5;
  void v10[4] = a1;
  v10[5] = &v13;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E57C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E57E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C64F8;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E58A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E58C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v15 = a2;
  int v11 = *(void ***)(a1 + 16);
  uint64_t v12 = operator new(0x38uLL);
  *uint64_t v12 = off_1019C6578;
  v12[1] = a3;
  v12[2] = a4;
  void v12[3] = a5;
  void v12[4] = a6;
  v12[5] = a1;
  v12[6] = &v15;
  v16[3] = v12;
  sub_100043ED0((uint64_t)v16, *v11);
  return sub_100043E48(v16);
}

void sub_1003E599C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E59B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C65F8;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E5A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5A98(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C6678;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E5B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5B78(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C66F8;
  v10[1] = a5;
  v10[2] = a3;
  uint64_t v10[3] = a1;
  void v10[4] = &v13;
  v10[5] = a4;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E5C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5C64(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C6778;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v9;
  uint64_t v10[3] = v6;
  sub_100043ED0((uint64_t)v10, *v5);
  return sub_100043E48(v10);
}

void sub_1003E5D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5D3C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C67F8;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E5E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5E1C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C6878;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E5EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5EFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C68F8;
  v10[1] = a3;
  v10[2] = a5;
  uint64_t v10[3] = a1;
  void v10[4] = &v13;
  v10[5] = a4;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E5FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E5FE8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C6978;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E60AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E60C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C69F8;
  v10[1] = a3;
  v10[2] = a4;
  uint64_t v10[3] = a1;
  void v10[4] = &v13;
  v10[5] = a5;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E6198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E61B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C6A78;
  v10[1] = a3;
  v10[2] = a4;
  uint64_t v10[3] = a1;
  void v10[4] = &v13;
  v10[5] = a5;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E6284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E62A0(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C6AF8;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v9;
  uint64_t v10[3] = v6;
  sub_100043ED0((uint64_t)v10, *v5);
  return sub_100043E48(v10);
}

void sub_1003E635C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6378(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C6B78;
  v10[1] = a3;
  v10[2] = a4;
  uint64_t v10[3] = a1;
  void v10[4] = &v13;
  v10[5] = a5;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E6448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6464(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C6BF8;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v9;
  uint64_t v10[3] = v6;
  sub_100043ED0((uint64_t)v10, *v5);
  return sub_100043E48(v10);
}

void sub_1003E6520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E653C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C6C78;
  v10[1] = a3;
  v10[2] = a5;
  uint64_t v10[3] = a1;
  void v10[4] = &v13;
  v10[5] = a4;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E660C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6628(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C6CF8;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E66EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6708(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C6D78;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E67CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E67E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C6DF8;
  v10[1] = a5;
  v10[2] = a1;
  uint64_t v10[3] = &v13;
  void v10[4] = a3;
  v10[5] = a4;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E68B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E68D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  int v9 = *(void ***)(a1 + 16);
  int v10 = operator new(0x30uLL);
  void *v10 = off_1019C6E78;
  v10[1] = a5;
  v10[2] = a1;
  uint64_t v10[3] = &v13;
  void v10[4] = a3;
  v10[5] = a4;
  v14[3] = v10;
  sub_100043ED0((uint64_t)v14, *v9);
  return sub_100043E48(v14);
}

void sub_1003E69A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E69C0(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v5 = *(void ***)(a1 + 16);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C6EF8;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v9;
  uint64_t v10[3] = v6;
  sub_100043ED0((uint64_t)v10, *v5);
  return sub_100043E48(v10);
}

void sub_1003E6A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6A98(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C6F78;
  v8[1] = a4;
  v8[2] = a3;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E6B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6B78(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C6FF8;
  v8[1] = a4;
  v8[2] = a3;
  v8[3] = a1;
  v8[4] = &v11;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E6C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6C58(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v7 = *(void ***)(a1 + 16);
  int v8 = operator new(0x28uLL);
  *int v8 = off_1019C7078;
  v8[1] = a3;
  v8[2] = a1;
  v8[3] = &v11;
  v8[4] = a4;
  void v12[3] = v8;
  sub_100043ED0((uint64_t)v12, *v7);
  return sub_100043E48(v12);
}

void sub_1003E6D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003E6D38(void *a1, void *a2)
{
  uint64_t v4 = (ctu::OsLogLogger *)(a1 + 1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, kCtLoggingSystemName, "lazuli.ntf");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v8, &v7);
  ctu::OsLogLogger::OsLogLogger(v4, (const ctu::OsLogLogger *)v8);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  *a1 = off_1019C6028;
  a1[2] = *a2;
  uint64_t v5 = a2[1];
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1003E6E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  CTXPCLazuliNotificationInterface::~CTXPCLazuliNotificationInterface(v2);
  _Unwind_Resume(a1);
}

void sub_1003E6E44(void *a1)
{
  *a1 = off_1019C6028;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));

  CTXPCLazuliNotificationInterface::~CTXPCLazuliNotificationInterface((CTXPCLazuliNotificationInterface *)a1);
}

void sub_1003E6EA8(void *a1)
{
  *a1 = off_1019C6028;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));
  CTXPCLazuliNotificationInterface::~CTXPCLazuliNotificationInterface((CTXPCLazuliNotificationInterface *)a1);

  operator delete();
}

void sub_1003E6F20(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1003E6F88(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 248))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003E6FC4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1003E6FFC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 248))();
  }
  return result;
}

uint64_t sub_1003E702C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1003E7074()
{
}

__n128 sub_1003E7088(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C61F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003E70DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C61F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E7114(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 480);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v10 = 136315138;
      uint64_t v11 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) systemConfigurationChanged", (uint8_t *)&v10, 0xCu);
    }
    OsLogContext v7 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 24)];
    id v8 = objc_alloc((Class)CTLazuliSystemConfiguration);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 480)) {
      sub_10016C840();
    }
    id v9 = objc_msgSend(v8, "initWithReflection:");
    [v3 systemConfigurationChanged:v7 withConfiguration:v9];
  }
  else if (v6)
  {
    int v10 = 136315138;
    uint64_t v11 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) systemConfigurationChanged not published", (uint8_t *)&v10, 0xCu);
  }
}

void sub_1003E7284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E72C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E7300()
{
}

void sub_1003E7310()
{
}

__n128 sub_1003E7324(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6278;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E7378(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E73B0(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 24) && *(unsigned char *)(*(void *)(a1 + 16) + 4))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      OsLogContext v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        OsLogContext v7 = (uint64_t *)*v7;
      }
      int v14 = 136315394;
      uint64_t v15 = v6;
      __int16 v16 = 2082;
      xpc_object_t v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) messageReceived: %{public}s", (uint8_t *)&v14, 0x16u);
    }
    id v8 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v9 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 24)) {
      sub_10016C840();
    }
    id v10 = objc_msgSend(v9, "initWithReflection:");
    id v11 = objc_alloc((Class)CTLazuliMessageTypeInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 4)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 messageReceived:v8 withID:v10 ofType:v12];
  }
  else
  {
    int v13 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315138;
      uint64_t v15 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) messageReceived not published", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1003E758C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E75D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E7614()
{
}

void sub_1003E7624()
{
}

__n128 sub_1003E7638(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C62F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E768C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C62F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E76C4(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 24) && *(unsigned char *)(*(void *)(a1 + 16) + 4))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      OsLogContext v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        OsLogContext v7 = (uint64_t *)*v7;
      }
      int v14 = 136315394;
      uint64_t v15 = v6;
      __int16 v16 = 2082;
      xpc_object_t v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) messageSendFailure: %{public}s", (uint8_t *)&v14, 0x16u);
    }
    id v8 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v9 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 24)) {
      sub_10016C840();
    }
    id v10 = objc_msgSend(v9, "initWithReflection:");
    id v11 = objc_alloc((Class)CTLazuliOperationError);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 4)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 messageSendFailed:v8 forMessageID:v10 withError:v12];
  }
  else
  {
    int v13 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315138;
      uint64_t v15 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) messageSendFailure not published", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1003E78A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E78E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E7928()
{
}

void sub_1003E7938()
{
}

__n128 sub_1003E794C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C6378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003E79A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E79D8(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 24);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      id v8 = *(uint64_t **)(a1 + 8);
      if (*((char *)v8 + 23) < 0) {
        id v8 = (uint64_t *)*v8;
      }
      int v12 = 136315394;
      uint64_t v13 = v7;
      __int16 v14 = 2082;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) messageSendSuccess: %{public}s", (uint8_t *)&v12, 0x16u);
    }
    id v9 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 24)];
    id v10 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 24)) {
      sub_10016C840();
    }
    id v11 = objc_msgSend(v10, "initWithReflection:");
    [v3 messageSendSuccess:v9 withID:v11];
  }
  else if (v6)
  {
    int v12 = 136315138;
    uint64_t v13 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) messageSendSuccess", (uint8_t *)&v12, 0xCu);
  }
}

void sub_1003E7B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E7BA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E7BE0()
{
}

void sub_1003E7BF0()
{
}

__n128 sub_1003E7C04(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C63F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003E7C58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C63F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E7C90(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 224);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v10 = 136315394;
      uint64_t v11 = subscriber::asString();
      __int16 v12 = 2082;
      uint64_t v13 = Lazuli::asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) dispositionInformation: [%{public}s]", (uint8_t *)&v10, 0x16u);
    }
    uint64_t v7 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 24)];
    id v8 = objc_alloc((Class)CTLazuliMessageDispositionStatus);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 224)) {
      sub_10016C840();
    }
    id v9 = objc_msgSend(v8, "initWithReflection:");
    [v3 dispositionInformation:v7 withStatus:v9];
  }
  else if (v6)
  {
    int v10 = 136315138;
    uint64_t v11 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) dispositionInformation not published", (uint8_t *)&v10, 0xCu);
  }
}

void sub_1003E7E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E7E58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E7E98()
{
}

void sub_1003E7EA8()
{
}

__n128 sub_1003E7EBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C6478;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003E7F18(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6478;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E7F58(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 112)
    && *(unsigned char *)(*(void *)(a1 + 16) + 24)
    && *(unsigned char *)(*(void *)(a1 + 24) + 88))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      id v8 = *(uint64_t **)(a1 + 16);
      if (*((char *)v8 + 23) < 0) {
        id v8 = (uint64_t *)*v8;
      }
      int v17 = 136315907;
      uint64_t v18 = v6;
      __int16 v19 = 2160;
      uint64_t v20 = 1752392040;
      __int16 v21 = 2081;
      uint64_t v22 = v7;
      __int16 v23 = 2082;
      uint64_t v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) composingIndicator : [uri: %{private, mask.hash}s, msgID: %{public}s]", (uint8_t *)&v17, 0x2Au);
    }
    id v9 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 40)];
    id v10 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 112)) {
      sub_10016C840();
    }
    id v11 = objc_msgSend(v10, "initWithReflection:");
    id v12 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 24)) {
      sub_10016C840();
    }
    id v13 = objc_msgSend(v12, "initWithReflection:");
    id v14 = objc_alloc((Class)CTLazuliMessageComposingIndicator);
    if (!*(unsigned char *)(*(void *)(a1 + 24) + 88)) {
      sub_10016C840();
    }
    id v15 = objc_msgSend(v14, "initWithReflection:");
    [v3 composingIndicator:v9 from:v11 withID:v13 withIndication:v15];
  }
  else
  {
    __int16 v16 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      uint64_t v18 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) composingIndicator not published", (uint8_t *)&v17, 0xCu);
    }
  }
}

void sub_1003E81A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E81FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E823C()
{
}

void sub_1003E824C()
{
}

__n128 sub_1003E8260(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C64F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E82B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C64F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E82EC(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 24) && *(unsigned char *)(*(void *)(a1 + 16) + 32))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      int v14 = 136315394;
      uint64_t v15 = v6;
      __int16 v16 = 2082;
      int v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) revokationStatus: [msgID: %{public}s]", (uint8_t *)&v14, 0x16u);
    }
    id v8 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v9 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 24)) {
      sub_10016C840();
    }
    id v10 = objc_msgSend(v9, "initWithReflection:");
    id v11 = objc_alloc((Class)CTLazuliMessageRevokeResult);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 32)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 revokationStatus:v8 forMessageID:v10 withResult:v12];
  }
  else
  {
    id v13 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315138;
      uint64_t v15 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) revokationStatus not published", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1003E84C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E8510(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E8550()
{
}

void sub_1003E8560()
{
}

__n128 sub_1003E8574(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = off_1019C6578;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1003E85D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6578;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E8610(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 320)
    && *(unsigned char *)(*(void *)(a1 + 16) + 32)
    && *(unsigned char *)(*(void *)(a1 + 24) + 24)
    && *(unsigned char *)(*(void *)(a1 + 32) + 88))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v7 + 168))
      {
        id v8 = (const char *)(v7 + 120);
        if (*(char *)(v7 + 143) < 0) {
          id v8 = *(const char **)v8;
        }
      }
      else
      {
        id v8 = "";
      }
      id v10 = *(const char **)(a1 + 16);
      if (v10[32])
      {
        if (v10[23] < 0) {
          id v10 = *(const char **)v10;
        }
      }
      else
      {
        id v10 = "";
      }
      id v11 = *(uint64_t **)(a1 + 24);
      if (*((char *)v11 + 23) < 0) {
        id v11 = (uint64_t *)*v11;
      }
      int v21 = 136316163;
      uint64_t v22 = v6;
      __int16 v23 = 2082;
      uint64_t v24 = v8;
      __int16 v25 = 2160;
      uint64_t v26 = 1752392040;
      __int16 v27 = 2081;
      uint64_t v28 = v10;
      __int16 v29 = 2082;
      uint64_t v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) groupComposingIndicator: [chat: %{public}s, uri: %{private, mask.hash}s, msgID: %{public}s]", (uint8_t *)&v21, 0x34u);
    }
    id v12 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 48)];
    id v13 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v14 = objc_msgSend(v13, "initWithReflection:");
    id v15 = objc_alloc((Class)CTLazuliGroupChatParticipant);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 32)) {
      sub_10016C840();
    }
    id v16 = objc_msgSend(v15, "initWithReflection:");
    id v17 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 24) + 24)) {
      sub_10016C840();
    }
    id v18 = objc_msgSend(v17, "initWithReflection:");
    id v19 = objc_alloc((Class)CTLazuliMessageComposingIndicator);
    if (!*(unsigned char *)(*(void *)(a1 + 32) + 88)) {
      sub_10016C840();
    }
    id v20 = objc_msgSend(v19, "initWithReflection:");
    [v3 groupComposingIndicator:v12 fromGroup:v14 from:v16 withID:v18 withIndication:v20];
  }
  else
  {
    id v9 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315138;
      uint64_t v22 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) groupComposingIndicator not published", (uint8_t *)&v21, 0xCu);
    }
  }
}

void sub_1003E88E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E8940(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E8980()
{
}

void sub_1003E8990()
{
}

__n128 sub_1003E89A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C65F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E89F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C65F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E8A30(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 112) && *(unsigned char *)(*(void *)(a1 + 16) + 24))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      id v8 = *(uint64_t **)(a1 + 16);
      if (*((char *)v8 + 23) < 0) {
        id v8 = (uint64_t *)*v8;
      }
      int v15 = 136315907;
      uint64_t v16 = v6;
      __int16 v17 = 2160;
      uint64_t v18 = 1752392040;
      __int16 v19 = 2081;
      id v20 = v7;
      __int16 v21 = 2082;
      uint64_t v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) requestToDisableAnonymization: [uri: %{private, mask.hash}s, msgID: %{public}s]", (uint8_t *)&v15, 0x2Au);
    }
    id v9 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v10 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 112)) {
      sub_10016C840();
    }
    id v11 = objc_msgSend(v10, "initWithReflection:");
    id v12 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 24)) {
      sub_10016C840();
    }
    id v13 = objc_msgSend(v12, "initWithReflection:");
    [v3 requestToDisableAnonymization:v9 from:v11 withID:v13];
  }
  else
  {
    id v14 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315138;
      uint64_t v16 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) requestToDisableAnonymization not published", (uint8_t *)&v15, 0xCu);
    }
  }
}

void sub_1003E8C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E8C84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E8CC4()
{
}

void sub_1003E8CD4()
{
}

__n128 sub_1003E8CE8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6678;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E8D3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E8D74(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 112) && *(unsigned char *)(*(void *)(a1 + 16) + 24))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      id v8 = *(uint64_t **)(a1 + 16);
      if (*((char *)v8 + 23) < 0) {
        id v8 = (uint64_t *)*v8;
      }
      int v15 = 136315907;
      uint64_t v16 = v6;
      __int16 v17 = 2160;
      uint64_t v18 = 1752392040;
      __int16 v19 = 2081;
      id v20 = v7;
      __int16 v21 = 2082;
      uint64_t v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) requestToEnableDisplayedNotifications: [uri: %{private, mask.hash}s, msgID: %{public}s]", (uint8_t *)&v15, 0x2Au);
    }
    id v9 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v10 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 112)) {
      sub_10016C840();
    }
    id v11 = objc_msgSend(v10, "initWithReflection:");
    id v12 = objc_alloc((Class)CTLazuliMessageID);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 24)) {
      sub_10016C840();
    }
    id v13 = objc_msgSend(v12, "initWithReflection:");
    [v3 requestToEnableDisplayedNotifications:v9 from:v11 withID:v13];
  }
  else
  {
    id v14 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315138;
      uint64_t v16 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) requestToEnableDisplayedNotifications not published", (uint8_t *)&v15, 0xCu);
    }
  }
}

void sub_1003E8F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E8FC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E9008()
{
}

void sub_1003E9018()
{
}

__n128 sub_1003E902C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C66F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003E9088(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C66F8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E90C8(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 48) && *(unsigned char *)(*(void *)(a1 + 16) + 112))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 16);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      id v8 = *(unsigned __int8 **)(a1 + 8);
      id v9 = v8 + 16;
      if ((char)v8[39] < 0) {
        id v9 = (void *)*v9;
      }
      int v10 = *v8;
      *(_DWORD *)uint64_t v22 = 136316163;
      if (v10) {
        id v11 = "true";
      }
      else {
        id v11 = "false";
      }
      *(void *)&v22[4] = v6;
      __int16 v23 = 2160;
      uint64_t v24 = 1752392040;
      __int16 v25 = 2081;
      uint64_t v26 = v7;
      __int16 v27 = 2082;
      uint64_t v28 = v9;
      __int16 v29 = 2080;
      uint64_t v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishFetchChatBotRenderInformation: [uri: %{private, mask.hash}s, result.id: %{public}s, result.didSucced: %s]", v22, 0x34u);
    }
    id v12 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 32), *(void *)v22);
    id v13 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 112)) {
      sub_10016C840();
    }
    id v14 = objc_msgSend(v13, "initWithReflection:");
    uint64_t v15 = *(void *)(a1 + 40);
    int v16 = *(unsigned __int8 *)(v15 + 704);
    if (*(unsigned char *)(v15 + 704))
    {
      id v17 = objc_alloc((Class)CTLazuliChatBotRenderInformationData);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 704)) {
        sub_10016C840();
      }
      id v18 = objc_msgSend(v17, "initWithReflection:");
    }
    else
    {
      id v18 = 0;
    }
    id v20 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 48)) {
      sub_10016C840();
    }
    id v21 = objc_msgSend(v20, "initWithReflection:");
    [v3 didFinishFetchChatBotRenderInformation:v12 forChatBot:v14 withRenderData:v18 withResult:v21];

    if (v16) {
  }
    }
  else
  {
    __int16 v19 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)&v22[4] = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishFetchChatBotRenderInformation not published", v22, 0xCu);
    }
  }
}

void sub_1003E9358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E93B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E93F0()
{
}

void sub_1003E9400()
{
}

__n128 sub_1003E9414(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C6778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003E9468(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E94A0(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 232);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      id v8 = *(uint64_t **)(a1 + 8);
      id v9 = v8 + 14;
      if (*((char *)v8 + 135) < 0) {
        id v9 = (void *)*v9;
      }
      if (*((char *)v8 + 23) < 0) {
        id v8 = (uint64_t *)*v8;
      }
      int v13 = 136316163;
      uint64_t v14 = v7;
      __int16 v15 = 2160;
      uint64_t v16 = 1752392040;
      __int16 v17 = 2081;
      id v18 = v9;
      __int16 v19 = 2160;
      uint64_t v20 = 1752392040;
      __int16 v21 = 2081;
      uint64_t v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) destinationCapabilitiesUpdated: [destination.discovered: %{private, mask.hash}s, destination.previous: %{private, mask.hash}s]", (uint8_t *)&v13, 0x34u);
    }
    int v10 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 24)];
    id v11 = objc_alloc((Class)CTLazuliDestinationUpdate);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 232)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 destinationCapabilitiesUpdated:v10 withCapabilities:v12];
  }
  else if (v6)
  {
    int v13 = 136315138;
    uint64_t v14 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) destinationCapabilitiesUpdated not published", (uint8_t *)&v13, 0xCu);
  }
}

void sub_1003E9660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E969C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E96DC()
{
}

void sub_1003E96EC()
{
}

__n128 sub_1003E9700(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C67F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E9754(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C67F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E978C(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 112) && *(unsigned char *)(*(void *)(a1 + 16) + 48))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      int v14 = 136315651;
      uint64_t v15 = v6;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040;
      __int16 v18 = 2081;
      __int16 v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didReportChatbotSpam: [destination: %{private, mask.hash}s]", (uint8_t *)&v14, 0x20u);
    }
    id v8 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v9 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 112)) {
      sub_10016C840();
    }
    id v10 = objc_msgSend(v9, "initWithReflection:");
    id v11 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 48)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 didReportChatbotSpam:v8 forChatbot:v10 withResult:v12];
  }
  else
  {
    int v13 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315138;
      uint64_t v15 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didReportChatbotSpam not published", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1003E997C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E99C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E9A04()
{
}

void sub_1003E9A14()
{
}

__n128 sub_1003E9A28(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6878;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003E9A7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E9AB4(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 112) && *(unsigned char *)(*(void *)(a1 + 16) + 48))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      int v14 = 136315651;
      uint64_t v15 = v6;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040;
      __int16 v18 = 2081;
      __int16 v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didReportSpam: [destination: %{private, mask.hash}s]", (uint8_t *)&v14, 0x20u);
    }
    id v8 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v9 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 112)) {
      sub_10016C840();
    }
    id v10 = objc_msgSend(v9, "initWithReflection:");
    id v11 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 48)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 didReportSpam:v8 forDestination:v10 withResult:v12];
  }
  else
  {
    int v13 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315138;
      uint64_t v15 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didReportSpam not published", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1003E9CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E9CEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003E9D2C()
{
}

void sub_1003E9D3C()
{
}

__n128 sub_1003E9D50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C68F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003E9DAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C68F8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003E9DEC(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 112) && *(unsigned char *)(*(void *)(a1 + 16) + 48))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      id v8 = *(unsigned __int8 **)(a1 + 16);
      id v9 = v8 + 16;
      if ((char)v8[39] < 0) {
        id v9 = (void *)*v9;
      }
      int v10 = *v8;
      *(_DWORD *)uint64_t v22 = 136316163;
      if (v10) {
        id v11 = "true";
      }
      else {
        id v11 = "false";
      }
      *(void *)&v22[4] = v6;
      __int16 v23 = 2160;
      uint64_t v24 = 1752392040;
      __int16 v25 = 2081;
      uint64_t v26 = v7;
      __int16 v27 = 2082;
      uint64_t v28 = v9;
      __int16 v29 = 2080;
      uint64_t v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didDiscover: [destination: %{private, mask.hash}s, result.id: %{public}s, result.didSucceed: %s]", v22, 0x34u);
    }
    id v12 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 32), *(void *)v22);
    id v13 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 112)) {
      sub_10016C840();
    }
    id v14 = objc_msgSend(v13, "initWithReflection:");
    uint64_t v15 = *(void *)(a1 + 40);
    int v16 = *(unsigned __int8 *)(v15 + 208);
    if (*(unsigned char *)(v15 + 208))
    {
      id v17 = objc_alloc((Class)CTLazuliCapabilitiesInformation);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 208)) {
        sub_10016C840();
      }
      id v18 = objc_msgSend(v17, "initWithReflection:");
    }
    else
    {
      id v18 = 0;
    }
    id v20 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 48)) {
      sub_10016C840();
    }
    id v21 = objc_msgSend(v20, "initWithReflection:");
    [v3 didDiscover:v12 destination:v14 withCapabilities:v18 withResult:v21];

    if (v16) {
  }
    }
  else
  {
    __int16 v19 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)&v22[4] = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didDiscover not published", v22, 0xCu);
    }
  }
}

void sub_1003EA07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EA0D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EA114()
{
}

void sub_1003EA124()
{
}

__n128 sub_1003EA138(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6978;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003EA18C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EA1C4(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 112) && *(unsigned char *)(*(void *)(a1 + 16) + 208))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      int v16 = 136315651;
      uint64_t v17 = v6;
      __int16 v18 = 2160;
      uint64_t v19 = 1752392040;
      __int16 v20 = 2081;
      id v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) capabilitiesFound: [destination: %{private, mask.hash}s]", (uint8_t *)&v16, 0x20u);
    }
    id v8 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v9 = objc_alloc((Class)CTLazuliDestination);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 112)) {
      sub_10016C840();
    }
    id v10 = objc_msgSend(v9, "initWithReflection:");
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(unsigned __int8 *)(v11 + 208);
    if (*(unsigned char *)(v11 + 208))
    {
      id v13 = objc_alloc((Class)CTLazuliCapabilitiesInformation);
      if (!*(unsigned char *)(*(void *)(a1 + 16) + 208)) {
        sub_10016C840();
      }
      id v14 = objc_msgSend(v13, "initWithReflection:");
    }
    else
    {
      id v14 = 0;
    }
    [v3 capabilitiesFound:v8 destination:v10 withCapabilities:v14];
    if (v12) {
  }
    }
  else
  {
    uint64_t v15 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315138;
      uint64_t v17 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) capabilitiesFound not published", (uint8_t *)&v16, 0xCu);
    }
  }
}

void sub_1003EA3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EA41C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EA45C()
{
}

void sub_1003EA46C()
{
}

__n128 sub_1003EA480(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C69F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003EA4DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C69F8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EA51C(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 320) && *(unsigned char *)(*(void *)(a1 + 16) + 48))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v7 + 168))
      {
        id v8 = (const char *)(v7 + 120);
        if (*(char *)(v7 + 143) < 0) {
          id v8 = *(const char **)v8;
        }
      }
      else
      {
        id v8 = "";
      }
      int v19 = 136315394;
      uint64_t v20 = v6;
      __int16 v21 = 2082;
      uint64_t v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) participantsRemoved: [chat: %{public}s]", (uint8_t *)&v19, 0x16u);
    }
    id v10 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v11 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    id v13 = objc_alloc((Class)CTLazuliGroupChatParticipantList);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 48)) {
      sub_10016C840();
    }
    id v14 = objc_msgSend(v13, "initWithReflection:");
    uint64_t v15 = *(void *)(a1 + 40);
    int v16 = *(unsigned __int8 *)(v15 + 32);
    if (*(unsigned char *)(v15 + 32))
    {
      id v17 = objc_alloc((Class)CTLazuliGroupChatParticipant);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 32)) {
        sub_10016C840();
      }
      id v18 = objc_msgSend(v17, "initWithReflection:");
    }
    else
    {
      id v18 = 0;
    }
    [v3 participantsRemoved:v10 fromGroupChat:v12 withRemovedParticipants:v14 removedBy:v18];
    if (v16) {
  }
    }
  else
  {
    id v9 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315138;
      uint64_t v20 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) participantsRemoved not published", (uint8_t *)&v19, 0xCu);
    }
  }
}

void sub_1003EA768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EA7BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EA7FC()
{
}

void sub_1003EA80C()
{
}

__n128 sub_1003EA820(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C6A78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003EA87C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6A78;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EA8BC(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 320) && *(unsigned char *)(*(void *)(a1 + 16) + 48))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v7 + 168))
      {
        id v8 = (const char *)(v7 + 120);
        if (*(char *)(v7 + 143) < 0) {
          id v8 = *(const char **)v8;
        }
      }
      else
      {
        id v8 = "";
      }
      int v19 = 136315394;
      uint64_t v20 = v6;
      __int16 v21 = 2082;
      uint64_t v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) participantsAdded: [chat: %{public}s]", (uint8_t *)&v19, 0x16u);
    }
    id v10 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v11 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    id v13 = objc_alloc((Class)CTLazuliGroupChatParticipantList);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 48)) {
      sub_10016C840();
    }
    id v14 = objc_msgSend(v13, "initWithReflection:");
    uint64_t v15 = *(void *)(a1 + 40);
    int v16 = *(unsigned __int8 *)(v15 + 32);
    if (*(unsigned char *)(v15 + 32))
    {
      id v17 = objc_alloc((Class)CTLazuliGroupChatParticipant);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 32)) {
        sub_10016C840();
      }
      id v18 = objc_msgSend(v17, "initWithReflection:");
    }
    else
    {
      id v18 = 0;
    }
    [v3 participantsAdded:v10 toGroupChat:v12 withAddedParticipants:v14 addedBy:v18];
    if (v16) {
  }
    }
  else
  {
    id v9 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315138;
      uint64_t v20 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) participantsAdded not published", (uint8_t *)&v19, 0xCu);
    }
  }
}

void sub_1003EAB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EAB5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EAB9C()
{
}

void sub_1003EABAC()
{
}

__n128 sub_1003EABC0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C6AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003EAC14(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EAC4C(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 320);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      uint64_t v8 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v8 + 168))
      {
        id v9 = (const char *)(v8 + 120);
        if (*(char *)(v8 + 143) < 0) {
          id v9 = *(const char **)v9;
        }
      }
      else
      {
        id v9 = "";
      }
      int v13 = 136315394;
      uint64_t v14 = v7;
      __int16 v15 = 2082;
      int v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) incomingGroupChat: [chat: %{public}s]", (uint8_t *)&v13, 0x16u);
    }
    id v10 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 24)];
    id v11 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 incomingGroupChat:v10 withGroupInformation:v12];
  }
  else if (v6)
  {
    int v13 = 136315138;
    uint64_t v14 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) incomingGroupChat not published", (uint8_t *)&v13, 0xCu);
  }
}

void sub_1003EADF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EAE2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EAE6C()
{
}

void sub_1003EAE7C()
{
}

__n128 sub_1003EAE90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C6B78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003EAEEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6B78;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EAF2C(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 320) && *(unsigned char *)(*(void *)(a1 + 16) + 24))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v7 + 168))
      {
        uint64_t v8 = (const char *)(v7 + 120);
        if (*(char *)(v7 + 143) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      id v10 = *(uint64_t **)(a1 + 16);
      if (*((char *)v10 + 23) < 0) {
        id v10 = (uint64_t *)*v10;
      }
      id v11 = *(uint64_t **)(a1 + 40);
      if (*((char *)v11 + 23) < 0) {
        id v11 = (uint64_t *)*v11;
      }
      int v21 = 136316419;
      uint64_t v22 = v6;
      __int16 v23 = 2082;
      uint64_t v24 = v8;
      __int16 v25 = 2160;
      uint64_t v26 = 1752392040;
      __int16 v27 = 2085;
      uint64_t v28 = v10;
      __int16 v29 = 2160;
      uint64_t v30 = 1752392040;
      __int16 v31 = 2081;
      uint8x8_t v32 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) subjectUpdated: [chat: %{public}s, subject: %{sensitive, mask.hash}s, by: %{private, mask.hash}s]", (uint8_t *)&v21, 0x3Eu);
    }
    id v12 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v13 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v14 = objc_msgSend(v13, "initWithReflection:");
    id v15 = objc_alloc((Class)CTLazuliGroupChatSubject);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 24)) {
      sub_10016C840();
    }
    id v16 = objc_msgSend(v15, "initWithReflection:");
    uint64_t v17 = *(void *)(a1 + 40);
    int v18 = *(unsigned __int8 *)(v17 + 32);
    if (*(unsigned char *)(v17 + 32))
    {
      id v19 = objc_alloc((Class)CTLazuliGroupChatParticipant);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 32)) {
        sub_10016C840();
      }
      id v20 = objc_msgSend(v19, "initWithReflection:");
    }
    else
    {
      id v20 = 0;
    }
    [v3 subjectUpdated:v12 forGroupChat:v14 withNewSubject:v16 updatedBy:v20];
    if (v18) {
  }
    }
  else
  {
    id v9 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315138;
      uint64_t v22 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) subjectUpdated not published", (uint8_t *)&v21, 0xCu);
    }
  }
}

void sub_1003EB1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EB220(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EB260()
{
}

void sub_1003EB270()
{
}

__n128 sub_1003EB284(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C6BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003EB2D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EB310(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 320);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      uint64_t v8 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v8 + 168))
      {
        id v9 = (const char *)(v8 + 120);
        if (*(char *)(v8 + 143) < 0) {
          id v9 = *(const char **)v9;
        }
      }
      else
      {
        id v9 = "";
      }
      int v13 = 136315394;
      uint64_t v14 = v7;
      __int16 v15 = 2082;
      id v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishGroupUpdate: [chat: %{public}s]", (uint8_t *)&v13, 0x16u);
    }
    id v10 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 24)];
    id v11 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v12 = objc_msgSend(v11, "initWithReflection:");
    [v3 didFinishGroupUpdate:v10 forGroupChat:v12];
  }
  else if (v6)
  {
    int v13 = 136315138;
    uint64_t v14 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishGroupUpdate not published", (uint8_t *)&v13, 0xCu);
  }
}

void sub_1003EB4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EB4F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EB530()
{
}

void sub_1003EB540()
{
}

__n128 sub_1003EB554(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C6C78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003EB5B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6C78;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EB5F0(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 320) && *(unsigned char *)(*(void *)(a1 + 16) + 32))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v7 + 168))
      {
        uint64_t v8 = (const char *)(v7 + 120);
        if (*(char *)(v7 + 143) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      id v10 = *(uint64_t **)(a1 + 16);
      if (*((char *)v10 + 23) < 0) {
        id v10 = (uint64_t *)*v10;
      }
      int v20 = 136315907;
      uint64_t v21 = v6;
      __int16 v22 = 2082;
      __int16 v23 = v8;
      __int16 v24 = 2160;
      uint64_t v25 = 1752392040;
      __int16 v26 = 2081;
      __int16 v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) iconUpdated: [chat: %{public}s, by: %{private, mask.hash}s]", (uint8_t *)&v20, 0x2Au);
    }
    id v11 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v12 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v13 = objc_msgSend(v12, "initWithReflection:");
    uint64_t v14 = *(void *)(a1 + 40);
    int v15 = *(unsigned __int8 *)(v14 + 72);
    if (*(unsigned char *)(v14 + 72))
    {
      id v16 = objc_alloc((Class)CTLazuliGroupChatIcon);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 72)) {
        sub_10016C840();
      }
      id v17 = objc_msgSend(v16, "initWithReflection:");
    }
    else
    {
      id v17 = 0;
    }
    id v18 = objc_alloc((Class)CTLazuliGroupChatParticipant);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 32)) {
      sub_10016C840();
    }
    id v19 = objc_msgSend(v18, "initWithReflection:");
    [v3 iconUpdated:v11 forGroupChat:v13 withNewIcon:v17 updatedBy:v19];

    if (v15) {
  }
    }
  else
  {
    id v9 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 136315138;
      uint64_t v21 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) iconUpdated not published", (uint8_t *)&v20, 0xCu);
    }
  }
}

void sub_1003EB86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EB8C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EB904()
{
}

void sub_1003EB914()
{
}

__n128 sub_1003EB928(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6CF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003EB97C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EB9B4(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 320) && *(unsigned char *)(*(void *)(a1 + 16) + 32))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v7 + 168))
      {
        uint64_t v8 = (const char *)(v7 + 120);
        if (*(char *)(v7 + 143) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      id v10 = *(uint64_t **)(a1 + 16);
      if (*((char *)v10 + 23) < 0) {
        id v10 = (uint64_t *)*v10;
      }
      int v16 = 136315907;
      uint64_t v17 = v6;
      __int16 v18 = 2082;
      id v19 = v8;
      __int16 v20 = 2160;
      uint64_t v21 = 1752392040;
      __int16 v22 = 2081;
      __int16 v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) chatDeleted: [chat: %{public}s, by: %{private, mask.hash}s]", (uint8_t *)&v16, 0x2Au);
    }
    id v11 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 32)];
    id v12 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v13 = objc_msgSend(v12, "initWithReflection:");
    id v14 = objc_alloc((Class)CTLazuliGroupChatParticipant);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 32)) {
      sub_10016C840();
    }
    id v15 = objc_msgSend(v14, "initWithReflection:");
    [v3 chatDeleted:v11 forGroupChat:v13 deletedBy:v15];
  }
  else
  {
    id v9 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315138;
      uint64_t v17 = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) chatDeleted not published", (uint8_t *)&v16, 0xCu);
    }
  }
}

void sub_1003EBBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EBC20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EBC60()
{
}

void sub_1003EBC70()
{
}

__n128 sub_1003EBC84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6D78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003EBCD8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EBD10(uint64_t a1, id *a2)
{
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 320) && *(unsigned char *)(*(void *)(a1 + 16) + 48))
  {
    uint64_t v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v7 + 168))
      {
        uint64_t v8 = (const char *)(v7 + 120);
        if (*(char *)(v7 + 143) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      id v10 = *(unsigned __int8 **)(a1 + 16);
      id v11 = v10 + 16;
      if ((char)v10[39] < 0) {
        id v11 = (void *)*v11;
      }
      int v12 = *v10;
      *(_DWORD *)id v19 = 136315906;
      if (v12) {
        id v13 = "true";
      }
      else {
        id v13 = "false";
      }
      *(void *)&v19[4] = v6;
      __int16 v20 = 2082;
      uint64_t v21 = v8;
      __int16 v22 = 2082;
      __int16 v23 = v11;
      __int16 v24 = 2080;
      uint64_t v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishGroupChatCreation: [chat: %{public}s, result.id: %{public}s, result.didSucceed: %s]", v19, 0x2Au);
    }
    id v14 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 32), *(void *)v19);
    id v15 = objc_alloc((Class)CTLazuliGroupChatInformation);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 320)) {
      sub_10016C840();
    }
    id v16 = objc_msgSend(v15, "initWithReflection:");
    id v17 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 16) + 48)) {
      sub_10016C840();
    }
    id v18 = objc_msgSend(v17, "initWithReflection:");
    [v3 didFinishGroupChatCreation:v14 forGroupChat:v16 withResult:v18];
  }
  else
  {
    id v9 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id v19 = 136315138;
      *(void *)&v19[4] = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishGroupChatCreation not published", v19, 0xCu);
    }
  }
}

void sub_1003EBF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EBF90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EBFD0()
{
}

void sub_1003EBFE0()
{
}

__n128 sub_1003EBFF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C6DF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003EC050(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EC090(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 48);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      uint64_t v8 = *(unsigned __int8 **)(a1 + 8);
      id v9 = v8 + 16;
      if ((char)v8[39] < 0) {
        id v9 = (void *)*v9;
      }
      int v10 = *v8;
      *(_DWORD *)__int16 v23 = 136315650;
      if (v10) {
        id v11 = "true";
      }
      else {
        id v11 = "false";
      }
      *(void *)&v23[4] = v7;
      __int16 v24 = 2082;
      uint64_t v25 = v9;
      __int16 v26 = 2080;
      __int16 v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishParticipantsAddition: [result.id: %{public}s, result.didSucceed: %s]", v23, 0x20u);
    }
    int v12 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 24), *(void *)v23);
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(unsigned __int8 *)(v13 + 48);
    if (*(unsigned char *)(v13 + 48))
    {
      id v15 = objc_alloc((Class)CTLazuliGroupChatParticipantList);
      if (!*(unsigned char *)(*(void *)(a1 + 32) + 48)) {
        sub_10016C840();
      }
      id v16 = objc_msgSend(v15, "initWithReflection:");
    }
    else
    {
      id v16 = 0;
    }
    uint64_t v17 = *(void *)(a1 + 40);
    int v18 = *(unsigned __int8 *)(v17 + 48);
    if (*(unsigned char *)(v17 + 48))
    {
      id v19 = objc_alloc((Class)CTLazuliGroupChatParticipantList);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 48)) {
        sub_10016C840();
      }
      id v20 = objc_msgSend(v19, "initWithReflection:");
    }
    else
    {
      id v20 = 0;
    }
    id v21 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 48)) {
      sub_10016C840();
    }
    id v22 = objc_msgSend(v21, "initWithReflection:");
    [v3 didFinishParticipantsAddition:v12 added:v16 didNotAdd:v20 withResult:v22];

    if (v18) {
    if (v14)
    }
  }
  else if (v6)
  {
    *(_DWORD *)__int16 v23 = 136315138;
    *(void *)&v23[4] = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishParticipantsAddition not published", v23, 0xCu);
  }
}

void sub_1003EC2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EC348(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EC388()
{
}

void sub_1003EC398()
{
}

__n128 sub_1003EC3AC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1019C6E78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1003EC408(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6E78;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EC448(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 48);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      uint64_t v8 = *(unsigned __int8 **)(a1 + 8);
      id v9 = v8 + 16;
      if ((char)v8[39] < 0) {
        id v9 = (void *)*v9;
      }
      int v10 = *v8;
      *(_DWORD *)__int16 v23 = 136315650;
      if (v10) {
        id v11 = "true";
      }
      else {
        id v11 = "false";
      }
      *(void *)&v23[4] = v7;
      __int16 v24 = 2082;
      uint64_t v25 = v9;
      __int16 v26 = 2080;
      __int16 v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishParticipantsRemoval: [result.id: %{public}s, result.didSucceed: %s]", v23, 0x20u);
    }
    int v12 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 24), *(void *)v23);
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(unsigned __int8 *)(v13 + 48);
    if (*(unsigned char *)(v13 + 48))
    {
      id v15 = objc_alloc((Class)CTLazuliGroupChatParticipantList);
      if (!*(unsigned char *)(*(void *)(a1 + 32) + 48)) {
        sub_10016C840();
      }
      id v16 = objc_msgSend(v15, "initWithReflection:");
    }
    else
    {
      id v16 = 0;
    }
    uint64_t v17 = *(void *)(a1 + 40);
    int v18 = *(unsigned __int8 *)(v17 + 48);
    if (*(unsigned char *)(v17 + 48))
    {
      id v19 = objc_alloc((Class)CTLazuliGroupChatParticipantList);
      if (!*(unsigned char *)(*(void *)(a1 + 40) + 48)) {
        sub_10016C840();
      }
      id v20 = objc_msgSend(v19, "initWithReflection:");
    }
    else
    {
      id v20 = 0;
    }
    id v21 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 48)) {
      sub_10016C840();
    }
    id v22 = objc_msgSend(v21, "initWithReflection:");
    [v3 didFinishParticipantsRemoval:v12 removed:v16 didNotRemove:v20 withResult:v22];

    if (v18) {
    if (v14)
    }
  }
  else if (v6)
  {
    *(_DWORD *)__int16 v23 = 136315138;
    *(void *)&v23[4] = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishParticipantsRemoval not published", v23, 0xCu);
  }
}

void sub_1003EC6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EC700(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EC740()
{
}

void sub_1003EC750()
{
}

__n128 sub_1003EC764(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C6EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003EC7B8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003EC7F0(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 48);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      uint64_t v8 = *(unsigned __int8 **)(a1 + 8);
      id v9 = v8 + 16;
      if ((char)v8[39] < 0) {
        id v9 = (void *)*v9;
      }
      int v10 = *v8;
      *(_DWORD *)id v15 = 136315650;
      if (v10) {
        id v11 = "true";
      }
      else {
        id v11 = "false";
      }
      *(void *)&v15[4] = v7;
      __int16 v16 = 2082;
      uint64_t v17 = v9;
      __int16 v18 = 2080;
      id v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishExit: [result.id: %{public}s, result.didSucceed: %s]", v15, 0x20u);
    }
    int v12 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 24), *(void *)v15);
    id v13 = objc_alloc((Class)CTLazuliOperationResult);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 48)) {
      sub_10016C840();
    }
    id v14 = objc_msgSend(v13, "initWithReflection:");
    [v3 didFinishExit:v12 withResult:v14];
  }
  else if (v6)
  {
    *(_DWORD *)id v15 = 136315138;
    *(void *)&v15[4] = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishExit not published", v15, 0xCu);
  }
}

void sub_1003EC9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EC9E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003ECA24()
{
}

void sub_1003ECA34()
{
}

__n128 sub_1003ECA48(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6F78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003ECA9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003ECAD4(uint64_t a1, id *a2)
{
  id v3 = *a2;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 48))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 24);
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 24) + 8);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v7 = subscriber::asString();
        uint64_t v8 = *(unsigned __int8 **)(a1 + 8);
        id v9 = v8 + 16;
        if ((char)v8[39] < 0) {
          id v9 = (void *)*v9;
        }
        int v10 = *v8;
        *(_DWORD *)uint64_t v17 = 136315650;
        if (v10) {
          id v11 = "true";
        }
        else {
          id v11 = "false";
        }
        *(void *)&v17[4] = v7;
        __int16 v18 = 2082;
        id v19 = v9;
        __int16 v20 = 2080;
        id v21 = v11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishSubjectChange: [result.id: %{public}s, result.didSucceed: %s]", v17, 0x20u);
      }
      int v12 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 32), *(void *)v17);
      id v13 = objc_alloc((Class)CTLazuliGroupChatSubject);
      if (!*(unsigned char *)(*(void *)(a1 + 16) + 24)) {
        sub_10016C840();
      }
      id v14 = objc_msgSend(v13, "initWithReflection:");
      id v15 = objc_alloc((Class)CTLazuliOperationResult);
      if (!*(unsigned char *)(*(void *)(a1 + 8) + 48)) {
        sub_10016C840();
      }
      id v16 = objc_msgSend(v15, "initWithReflection:");
      [v3 didFinishSubjectChange:v12 withNewSubject:v14 withResult:v16];
    }
    else if (v6)
    {
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)&v17[4] = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishSubjectChange not published", v17, 0xCu);
    }
  }
}

void sub_1003ECCC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003ECD10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003ECD50()
{
}

void sub_1003ECD60()
{
}

__n128 sub_1003ECD74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C6FF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003ECDC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C6FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003ECE00(uint64_t a1, id *a2)
{
  id v3 = *a2;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 48))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 72);
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 24) + 8);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v7 = subscriber::asString();
        uint64_t v8 = *(unsigned __int8 **)(a1 + 8);
        id v9 = v8 + 16;
        if ((char)v8[39] < 0) {
          id v9 = (void *)*v9;
        }
        int v10 = *v8;
        *(_DWORD *)uint64_t v17 = 136315650;
        if (v10) {
          id v11 = "true";
        }
        else {
          id v11 = "false";
        }
        *(void *)&v17[4] = v7;
        __int16 v18 = 2082;
        id v19 = v9;
        __int16 v20 = 2080;
        id v21 = v11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishIconChange: [result.id: %{public}s, result.didSucceed: %s]", v17, 0x20u);
      }
      int v12 = +[CTXPCPlaceholder simSlot:](CTXPCPlaceholder, "simSlot:", **(unsigned int **)(a1 + 32), *(void *)v17);
      id v13 = objc_alloc((Class)CTLazuliGroupChatIcon);
      if (!*(unsigned char *)(*(void *)(a1 + 16) + 72)) {
        sub_10016C840();
      }
      id v14 = objc_msgSend(v13, "initWithReflection:");
      id v15 = objc_alloc((Class)CTLazuliOperationResult);
      if (!*(unsigned char *)(*(void *)(a1 + 8) + 48)) {
        sub_10016C840();
      }
      id v16 = objc_msgSend(v15, "initWithReflection:");
      [v3 didFinishIconChange:v12 withNewIcon:v14 withResult:v16];
    }
    else if (v6)
    {
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)&v17[4] = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) didFinishIconChange not published", v17, 0xCu);
    }
  }
}

void sub_1003ECFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003ED03C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003ED07C()
{
}

void sub_1003ED08C()
{
}

__n128 sub_1003ED0A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C7078;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003ED0F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C7078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003ED12C(uint64_t a1, id *a2)
{
  id v3 = *a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 72);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 8);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = subscriber::asString();
      uint64_t v8 = *(void *)(a1 + 8);
      id v9 = (void *)(v8 + 24);
      if (*(char *)(v8 + 47) < 0) {
        id v9 = (void *)*v9;
      }
      int v10 = *(const char **)(a1 + 32);
      if (v10[32])
      {
        if (v10[23] < 0) {
          int v10 = *(const char **)v10;
        }
      }
      else
      {
        int v10 = "";
      }
      int v18 = 136315907;
      uint64_t v19 = v7;
      __int16 v20 = 2082;
      id v21 = v9;
      __int16 v22 = 2160;
      uint64_t v23 = 1752392040;
      __int16 v24 = 2081;
      uint64_t v25 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) evictedFromGroup: [uri: %{public}s, evictedBy: %{private, mask.hash}s]", (uint8_t *)&v18, 0x2Au);
    }
    id v11 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 24)];
    id v12 = objc_alloc((Class)CTLazuliGroupChatUri);
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 72)) {
      sub_10016C840();
    }
    id v13 = objc_msgSend(v12, "initWithReflection:");
    uint64_t v14 = *(void *)(a1 + 32);
    int v15 = *(unsigned __int8 *)(v14 + 32);
    if (*(unsigned char *)(v14 + 32))
    {
      id v16 = objc_alloc((Class)CTLazuliGroupChatParticipant);
      if (!*(unsigned char *)(*(void *)(a1 + 32) + 32)) {
        sub_10016C840();
      }
      id v17 = objc_msgSend(v16, "initWithReflection:");
    }
    else
    {
      id v17 = 0;
    }
    [v3 evictedFromGroup:v11 withGroupInfo:v13 evictedBy:v17];
    if (v15) {
  }
    }
  else if (v6)
  {
    int v18 = 136315138;
    uint64_t v19 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [MSG] <<== laz <<== [CT] (%s) evictedFromGroup not published", (uint8_t *)&v18, 0xCu);
  }
}

void sub_1003ED350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003ED398(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003ED3D8()
{
}

uint64_t sub_1003ED3EC(uint64_t a1, void *a2)
{
  int v4 = (char *)operator new(0x80uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = off_1019C7410;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 15) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 20) = -1;
  v4[88] = 1;
  *((void *)v4 + 12) = 0;
  *((void *)v4 + 13) = 0;
  v4[120] = 0;
  uint64_t v7 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 24) = 0u;
  BOOL v6 = v4 + 24;
  sub_100A2BF08(a1, a2, &v6, "ps.nop");
  if (v7) {
    sub_10004D2C8(v7);
  }
  *(void *)a1 = off_1019C7200;
  *(_OWORD *)(a1 + 1024) = 0u;
  return a1;
}

void sub_1003ED4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003ED4E4(void *a1)
{
  *a1 = off_1019C7200;
  uint64_t v2 = (std::__shared_weak_count *)a1[129];
  if (v2) {
    sub_10004D2C8(v2);
  }

  return sub_100A2C4CC((uint64_t)a1);
}

void sub_1003ED544(void *a1)
{
  sub_1003ED4E4(a1);

  operator delete();
}

void sub_1003ED57C()
{
}

void sub_1003ED5EC()
{
}

void sub_1003ED614(uint64_t a1, dispatch_object_t *a2)
{
  id v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  *(unsigned char *)(a1 + 354) = 1;
  ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 64));
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1003ED688(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003ED6A8(uint64_t a1, int a2, BOOL a3, CFDictionaryRef *a4)
{
  int v8 = capabilities::ct::supportsThumperService((capabilities::ct *)a1);
  if (a2 == 1 && v8)
  {
    id v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = asStringBool(a3);
      CFDictionaryRef v11 = *a4;
      int v17 = 136315906;
      int v18 = "";
      __int16 v19 = 2080;
      __int16 v20 = "";
      __int16 v21 = 2080;
      uint64_t v22 = v10;
      __int16 v23 = 2112;
      CFDictionaryRef v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s%ssetEnabled, val: %s, %@", (uint8_t *)&v17, 0x2Au);
    }
    if (*a4) {
      id v12 = sub_100080778;
    }
    else {
      id v12 = 0;
    }
    if (v12)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*a4, kPSAssociatedAccountID);
      if (Value)
      {
        CFStringRef v14 = Value;
        CFTypeID v15 = CFGetTypeID(Value);
        if (v15 == CFStringGetTypeID()) {
          CFStringRef v16 = v14;
        }
        else {
          CFStringRef v16 = 0;
        }
        setAssociatedID(v16);
        sub_1007F96BC(*(void **)(a1 + 784));
      }
    }
  }
}

uint64_t sub_1003ED7FC()
{
  return 0;
}

uint64_t sub_1003ED804()
{
  return 0;
}

uint64_t sub_1003ED80C()
{
  return 0;
}

void sub_1003ED814(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1003ED81C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

const char *sub_1003ED824()
{
  return "PSControlBase";
}

uint64_t sub_1003ED84C()
{
  return 0;
}

const void **sub_1003ED86C@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = 0;
  return sub_100057D78(&v2);
}

const void **sub_1003ED89C@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = 0;
  return sub_100057D78(&v2);
}

uint64_t sub_1003ED8CC()
{
  return 1;
}

uint64_t sub_1003ED8D4()
{
  return 0;
}

uint64_t sub_1003ED8DC()
{
  return 1;
}

void sub_1003ED8EC(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1003ED8F4()
{
  return 0;
}

uint64_t sub_1003ED8FC()
{
  return 0;
}

void sub_1003ED90C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1003ED914()
{
  return 0;
}

void sub_1003ED91C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003ED93C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7410;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003ED990(uint64_t a1)
{
}

void sub_1003ED99C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_1003EDA04(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1003EDAD0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1003EDBA8);
  __cxa_rethrow();
}

void sub_1003EDAF8(_Unwind_Exception *a1)
{
}

void sub_1003EDB10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003EDB48(uint64_t a1)
{
}

uint64_t sub_1003EDB64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003EDBA8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t is_activation_manifest_carrier_locked(uint64_t a1, unsigned int a2, int a3, char *a4)
{
  bzero(v79, 0x400uLL);
  memset(v44, 0, sizeof(v44));
  long long v45 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v46 = v79;
  uint64_t v47 = 1024;
  uint64_t v56 = a1;
  *(void *)uint64_t v57 = a2;
  if (sub_100F03790((unsigned int *)&v56, (char *)v44, &v50)) {
    return 1;
  }
  bzero(&v56, 0x5E8uLL);
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  if (sub_1007E388C((unsigned int *)&v45, &v53, &v54)) {
    goto LABEL_3;
  }
  int64_t v50 = 0;
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  while (1)
  {
    int v9 = sub_1007E3904(&v54, (uint64_t)&v50);
    if (v9) {
      break;
    }
    if (v50 <= (uint64_t)0x80000000000003ECLL)
    {
      switch(v50)
      {
        case 0x800000000000003FLL:
          if (v52 != 12)
          {
            if (v52 != 4) {
              goto LABEL_3;
            }
            v78 |= 1u;
            LOBYTE(v56) = *((unsigned char *)v51 + 3);
            BYTE1(v56) = *((unsigned char *)v51 + 2);
            BYTE2(v56) = *((unsigned char *)v51 + 1);
            BYTE3(v56) = *(unsigned char *)v51;
          }
          break;
        case 0x8000000000000040:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 2u;
          HIDWORD(v56) = *(_DWORD *)v51;
          break;
        case 0x80000000000003EBLL:
          if (v52 != 7) {
            goto LABEL_3;
          }
          v78 |= 4u;
          int v11 = *(_DWORD *)((char *)v51 + 3);
          *(_DWORD *)uint64_t v57 = *(_DWORD *)v51;
          *(_DWORD *)&v57[3] = v11;
          break;
      }
    }
    else
    {
      switch(v50)
      {
        case 0x8000000000000BB8:
          if (v52 != 7) {
            goto LABEL_3;
          }
          v78 |= 8u;
          int v10 = *(_DWORD *)((char *)v51 + 3);
          *(_DWORD *)&v57[7] = *(_DWORD *)v51;
          *(_DWORD *)&v57[10] = v10;
          continue;
        case 0x8000000000000BB9:
        case 0x8000000000000BBALL:
        case 0x8000000000000BBBLL:
          continue;
        case 0x8000000000000BBCLL:
          if (v52 != 10) {
            goto LABEL_3;
          }
          v78 |= 0x100u;
          __int16 v13 = *((_WORD *)v51 + 4);
          uint64_t v59 = *v51;
          __int16 v60 = v13;
          continue;
        case 0x8000000000000BBDLL:
          int v14 = v52;
          if (v52 > 0x1E0) {
            goto LABEL_3;
          }
          v78 |= 0x200u;
          __memcpy_chk();
          int v63 = v14;
          continue;
        case 0x8000000000000BBELL:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x400u;
          if (*(_DWORD *)v51 == 1) {
            char v68 = 1;
          }
          continue;
        case 0x8000000000000BBFLL:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x800u;
          if (*(_DWORD *)v51 == 1) {
            char v67 = 1;
          }
          continue;
        case 0x8000000000000BC0:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x1000u;
          if (*(_DWORD *)v51 == 1) {
            char v69 = 1;
          }
          continue;
        case 0x8000000000000BC1:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x2000u;
          if (*(_DWORD *)v51 == 1) {
            char v70 = 1;
          }
          continue;
        case 0x8000000000000BC2:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x4000u;
          if (*(_DWORD *)v51 == 1) {
            char v71 = 1;
          }
          continue;
        case 0x8000000000000BC3:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x8000u;
          if (*(_DWORD *)v51 == 1) {
            char v72 = 1;
          }
          continue;
        case 0x8000000000000BC4:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x10000u;
          if (*(_DWORD *)v51 == 1) {
            char v73 = 1;
          }
          continue;
        case 0x8000000000000BC5:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x20000u;
          if (*(_DWORD *)v51 == 1) {
            char v74 = 1;
          }
          continue;
        case 0x8000000000000BC6:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x40000u;
          int v75 = *(_DWORD *)v51;
          continue;
        case 0x8000000000000BC7:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x80000u;
          int v76 = *(_DWORD *)v51;
          continue;
        case 0x8000000000000BC8:
          if (v52 != 4) {
            goto LABEL_3;
          }
          v78 |= 0x100000u;
          int v77 = *(_DWORD *)v51;
          continue;
        default:
          if (v50 != 0x80000000000003EDLL) {
            continue;
          }
          if (v52 != 7) {
            goto LABEL_3;
          }
          v78 |= 0x80u;
          int v12 = *(_DWORD *)((char *)v51 + 3);
          *(_DWORD *)unint64_t v58 = *(_DWORD *)v51;
          *(_DWORD *)&v58[3] = v12;
          break;
      }
    }
  }
  if (v9 != 1) {
LABEL_3:
  }
    bzero(&v56, 0x5E8uLL);
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  int64_t v50 = 0;
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  if (sub_1007E388C((unsigned int *)&v45, &v53, &v54)) {
    return 1;
  }
  do
  {
    if (sub_1007E3904(&v54, (uint64_t)&v50)) {
      return 1;
    }
  }
  while (v50 != 0x8000000000000BBDLL);
  int v15 = v52;
  if (v52 >= 0x1E1) {
    return 1;
  }
  v78 |= 0x200u;
  __memcpy_chk();
  int v63 = v15;
  signed int v66 = (unsigned __int16)v15 / 0xCu;
  if ((unsigned __int16)v15 % 0xCu) {
    return 2;
  }
  if ((unsigned __int16)v15 < 0xCu)
  {
LABEL_108:
    char v41 = 1;
    goto LABEL_118;
  }
  uint64_t v16 = 0;
  int v17 = &v62;
  do
  {
    uint64_t v18 = 0;
    __int16 v19 = (char *)&v65[3 * v16];
    do
    {
      unsigned int v20 = *((unsigned __int8 *)v17 + v18);
      unsigned int v21 = v20 >> 4;
      if (v20 >> 4 == 14)
      {
        char v22 = 63;
      }
      else
      {
        if (v21 == 15) {
          goto LABEL_74;
        }
        char v22 = v21 | 0x30;
      }
      *v19++ = v22;
LABEL_74:
      int v23 = v20 & 0xF;
      if (v23 == 14)
      {
        char v24 = 63;
      }
      else
      {
        if (v23 == 15) {
          goto LABEL_79;
        }
        char v24 = v23 | 0x30;
      }
      *v19++ = v24;
LABEL_79:
      ++v18;
    }
    while (v18 != 8);
    char *v19 = 0;
    uint64_t v25 = &v61[12 * v16];
    __int16 v26 = &v57[24 * v16 - 8];
    *((_WORD *)v26 + 273) = *((_WORD *)v25 + 1);
    LODWORD(v25) = *v25;
    v26[524] = v25 >> 7;
    v26[525] = (v25 & 0x40) != 0;
    v26[526] = (v25 & 0x20) != 0;
    v26[527] = (v25 & 0x10) != 0;
    ++v16;
    v17 += 3;
  }
  while (v16 < v66);
  if (v66 < 1) {
    goto LABEL_108;
  }
  uint64_t v27 = 0;
  BOOL v28 = 0;
  BOOL v29 = 0;
  BOOL v30 = 0;
  BOOL v31 = 0;
  uint8x8_t v32 = v65;
  do
  {
    xpc_object_t v33 = &v64[24 * v27];
    int v34 = v33[3];
    if (v33[3]) {
      BOOL v35 = v29;
    }
    else {
      BOOL v35 = v30;
    }
    if (v35)
    {
      BOOL v36 = 1;
    }
    else if (*v33 || v64[24 * v27 + 1] || v64[24 * v27 + 2])
    {
      BOOL v36 = 0;
    }
    else
    {
      uint64_t v39 = 0;
      while (1)
      {
        int v40 = *((unsigned __int8 *)v32 + v39);
        if (v40 != 63) {
          break;
        }
        ++v39;
        BOOL v36 = 1;
        if (v39 == 18) {
          goto LABEL_92;
        }
      }
      BOOL v36 = v40 == 0;
    }
LABEL_92:
    if (v33[3])
    {
      BOOL v29 = v36;
      BOOL v37 = v28;
    }
    else
    {
      BOOL v30 = v36;
      BOOL v37 = v31;
    }
    BOOL v38 = v37 || *v33 != 0;
    if (v34) {
      BOOL v28 = v38;
    }
    else {
      BOOL v31 = v38;
    }
    ++v27;
    v32 += 3;
  }
  while (v27 != v66);
  BOOL v42 = !v30;
  if (v31) {
    BOOL v42 = 1;
  }
  BOOL v43 = !v29;
  char v41 = v28 || v43;
  if (!a3) {
    char v41 = v42;
  }
  if (v42) {
    char v41 = v42;
  }
LABEL_118:
  uint64_t result = 0;
  *a4 = v41;
  return result;
}

void sub_1003EE3F0(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  CFArrayRef v6 = (const __CFArray *)objc_msgSend(+[DERHelper sharedDERHelper](DERHelper, "sharedDERHelper"), "arrayWithDecodingProfileList:", +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", *a1, a1[1] - *a1, 0));
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    CFArrayRef v7 = v6;
    char v80 = a2;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count >= 1)
    {
      CFIndex v9 = 0;
      char v79 = (char *)kCtLoggingSystemName;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v9);
        CFDictionaryRef v11 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFTypeID v12 = CFGetTypeID(ValueAtIndex);
          if (v12 == CFDictionaryGetTypeID())
          {
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, @"ProfileDescriptor");
            CFDictionaryRef v14 = Value;
            if (Value)
            {
              CFTypeID v15 = CFGetTypeID(Value);
              if (v15 == CFDictionaryGetTypeID())
              {
                CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v11, @"MetaData");
                CFDictionaryRef v17 = v16;
                if (v16)
                {
                  CFTypeID v18 = CFGetTypeID(v16);
                  if (v18 == CFDictionaryGetTypeID())
                  {
                    CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(v14, @"ProfileID");
                    CFDataRef v20 = v19;
                    if (v19)
                    {
                      CFTypeID v21 = CFGetTypeID(v19);
                      if (v21 == CFDataGetTypeID() && CFDataGetLength(v20) == 16)
                      {
                        char v22 = (int *)CFDictionaryGetValue(v11, @"ProfileState");
                        int v23 = v22;
                        *(_DWORD *)long long buf = 99;
                        if (v22)
                        {
                          CFTypeID v24 = CFGetTypeID(v22);
                          if (v24 == CFNumberGetTypeID()) {
                            ctu::cf::assign((ctu::cf *)buf, v23, v25);
                          }
                          if (*(_DWORD *)buf != 99)
                          {
                            BOOL v26 = *(_DWORD *)buf == 1;
                            uint64_t v27 = (unsigned int *)CFDictionaryGetValue(v11, @"ProfileType");
                            BOOL v28 = v27;
                            *(_DWORD *)long long buf = 0;
                            if (v27)
                            {
                              CFTypeID v29 = CFGetTypeID(v27);
                              if (v29 == CFNumberGetTypeID()) {
                                ctu::cf::assign((ctu::cf *)buf, v28, v30);
                              }
                            }
                            int v31 = *(_DWORD *)buf;
                            if ((buf[0] & 0xC0) != 0)
                            {
                              ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, v79, "vinyl.helper");
                              uint8x8_t v32 = v85;
                              ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
                              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)long long buf = 67109120;
                                *(_DWORD *)&uint8_t buf[4] = v31;
                                _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Incorrect profile type:%d", buf, 8u);
                              }
                            }
                            else if ((buf[0] & 1) != 0 || (v80 & 1) == 0)
                            {
                              uint8_t v76 = buf[0];
                              BOOL v77 = v26;
                              memset(&v83[4], 0, 15);
                              CFDataRef v33 = (const __CFData *)CFDictionaryGetValue(v17, @"ICCID");
                              CFDataRef v34 = v33;
                              if (v33 && (CFTypeID v35 = CFGetTypeID(v33), v35 == CFDataGetTypeID()))
                              {
                                BytePtr = (subscriber *)CFDataGetBytePtr(v34);
                                Length = (const unsigned __int8 *)CFDataGetLength(v34);
                                subscriber::sDecodeIccid((uint64_t *)buf, BytePtr, Length, v38);
                                uint64_t v39 = *(void *)buf;
                                v83[4] = v85;
                                *(void *)((char *)&v83[4] + 7) = *(void *)((char *)&v85 + 7);
                                char v40 = HIBYTE(v85);
                              }
                              else
                              {
                                uint64_t v39 = 0;
                                char v40 = 0;
                              }
                              char v78 = v40;
                              unint64_t v41 = a3[1];
                              unint64_t v42 = a3[2];
                              if (v41 >= v42)
                              {
                                unint64_t v44 = 0x84BDA12F684BDA13 * ((uint64_t)(v41 - *a3) >> 3);
                                unint64_t v45 = v44 + 1;
                                if (v44 + 1 > 0x12F684BDA12F684) {
                                  sub_10006A748();
                                }
                                unint64_t v46 = 0x84BDA12F684BDA13 * ((uint64_t)(v42 - *a3) >> 3);
                                if (2 * v46 > v45) {
                                  unint64_t v45 = 2 * v46;
                                }
                                if (v46 >= 0x97B425ED097B42) {
                                  unint64_t v47 = 0x12F684BDA12F684;
                                }
                                else {
                                  unint64_t v47 = v45;
                                }
                                int v87 = a3 + 2;
                                if (v47) {
                                  long long v48 = (char *)sub_1000C5FD0((uint64_t)(a3 + 2), v47);
                                }
                                else {
                                  long long v48 = 0;
                                }
                                long long v49 = &v48[216 * v44];
                                *(void *)long long buf = v48;
                                *(void *)&long long v85 = v49;
                                uint64_t v86 = &v48[216 * v47];
                                *(_OWORD *)long long v49 = 0u;
                                *((_OWORD *)v49 + 1) = 0u;
                                *((_OWORD *)v49 + 2) = 0u;
                                *((_OWORD *)v49 + 3) = 0u;
                                *((_OWORD *)v49 + 4) = 0u;
                                *((_OWORD *)v49 + 5) = 0u;
                                *((_OWORD *)v49 + 6) = 0u;
                                *((_OWORD *)v49 + 7) = 0u;
                                *((_OWORD *)v49 + 8) = 0u;
                                *((_OWORD *)v49 + 9) = 0u;
                                *((_OWORD *)v49 + 10) = 0u;
                                *((_OWORD *)v49 + 11) = 0u;
                                *((_OWORD *)v49 + 12) = 0u;
                                *((void *)v49 + 26) = 0;
                                *((void *)&v85 + 1) = v49 + 216;
                                sub_1003F229C(a3, buf);
                                uint64_t v43 = a3[1];
                                sub_1003F2414((uint64_t)buf);
                              }
                              else
                              {
                                *(void *)(v41 + 208) = 0;
                                *(_OWORD *)(v41 + 176) = 0u;
                                *(_OWORD *)(v41 + 192) = 0u;
                                *(_OWORD *)(v41 + 144) = 0u;
                                *(_OWORD *)(v41 + 160) = 0u;
                                *(_OWORD *)(v41 + 112) = 0u;
                                *(_OWORD *)(v41 + 128) = 0u;
                                *(_OWORD *)(v41 + 80) = 0u;
                                *(_OWORD *)(v41 + 96) = 0u;
                                *(_OWORD *)(v41 + 48) = 0u;
                                *(_OWORD *)(v41 + 64) = 0u;
                                *(_OWORD *)(v41 + 16) = 0u;
                                *(_OWORD *)(v41 + 32) = 0u;
                                *(_OWORD *)unint64_t v41 = 0u;
                                uint64_t v43 = v41 + 216;
                                a3[1] = v41 + 216;
                              }
                              a3[1] = v43;
                              int64_t v50 = CFDataGetBytePtr(v20);
                              unint64_t v51 = CFDataGetBytePtr(v20);
                              CFIndex v52 = CFDataGetLength(v20);
                              if (&v51[v52] != v50) {
                                memmove((void *)(a3[1] - 216), v50, &v51[v52] - v50);
                              }
                              uint64_t v53 = a3[1];
                              if (*(char *)(v53 - 177) < 0) {
                                operator delete(*(void **)(v53 - 200));
                              }
                              *(void *)(v53 - 200) = v39;
                              *(void *)(v53 - 192) = v83[4];
                              *(void *)(v53 - 185) = *(void *)((char *)&v83[4] + 7);
                              *(unsigned char *)(v53 - 177) = v78;
                              *(unsigned char *)(a3[1] - 127) = v77;
                              CFDictionaryGetValue(v17, @"MCC");
                              *(void *)long long buf = 0;
                              long long v85 = 0uLL;
                              ctu::cf::assign();
                              uint64_t v54 = *(void *)buf;
                              v83[2] = v85;
                              *(void *)((char *)&v83[2] + 7) = *(void *)((char *)&v85 + 7);
                              char v55 = HIBYTE(v85);
                              uint64_t v56 = a3[1];
                              if (*(char *)(v56 - 97) < 0) {
                                operator delete(*(void **)(v56 - 120));
                              }
                              *(void *)(v56 - 120) = v54;
                              *(void *)(v56 - 112) = v83[2];
                              *(void *)(v56 - 105) = *(void *)((char *)&v83[2] + 7);
                              *(unsigned char *)(v56 - 97) = v55;
                              CFDictionaryGetValue(v17, @"MNC");
                              *(void *)long long buf = 0;
                              long long v85 = 0uLL;
                              ctu::cf::assign();
                              uint64_t v57 = *(void *)buf;
                              v83[2] = v85;
                              *(void *)((char *)&v83[2] + 7) = *(void *)((char *)&v85 + 7);
                              char v58 = HIBYTE(v85);
                              uint64_t v59 = a3[1];
                              if (*(char *)(v59 - 73) < 0) {
                                operator delete(*(void **)(v59 - 96));
                              }
                              *(void *)(v59 - 96) = v57;
                              *(void *)(v59 - 88) = v83[2];
                              *(void *)(v59 - 81) = *(void *)((char *)&v83[2] + 7);
                              *(unsigned char *)(v59 - 73) = v58;
                              *(unsigned char *)(a3[1] - 128) = (v76 & 1) == 0;
                              memset(&v83[2], 0, 15);
                              CFDataRef v60 = (const __CFData *)CFDictionaryGetValue(v17, @"GID1");
                              CFDataRef v61 = v60;
                              if (v60)
                              {
                                CFTypeID v62 = CFGetTypeID(v60);
                                if (v62 == CFDataGetTypeID())
                                {
                                  int v63 = (ctu *)CFDataGetBytePtr(v61);
                                  char v64 = (const void *)CFDataGetLength(v61);
                                  ctu::hex((uint64_t *)buf, v63, v64, v65);
                                  uint64_t v66 = *(void *)buf;
                                  v83[2] = v85;
                                  *(void *)((char *)&v83[2] + 7) = *(void *)((char *)&v85 + 7);
                                  LOBYTE(v61) = HIBYTE(v85);
                                }
                                else
                                {
                                  uint64_t v66 = 0;
                                  LOBYTE(v61) = 0;
                                }
                              }
                              else
                              {
                                uint64_t v66 = 0;
                              }
                              uint64_t v67 = a3[1];
                              if (*(char *)(v67 - 49) < 0) {
                                operator delete(*(void **)(v67 - 72));
                              }
                              *(void *)(v67 - 72) = v66;
                              *(void *)(v67 - 64) = v83[2];
                              *(void *)(v67 - 57) = *(void *)((char *)&v83[2] + 7);
                              *(unsigned char *)(v67 - 49) = (_BYTE)v61;
                              memset(v83, 0, 15);
                              CFDataRef v68 = (const __CFData *)CFDictionaryGetValue(v17, @"GID2");
                              CFDataRef v69 = v68;
                              if (v68)
                              {
                                CFTypeID v70 = CFGetTypeID(v68);
                                if (v70 == CFDataGetTypeID())
                                {
                                  char v71 = (ctu *)CFDataGetBytePtr(v69);
                                  char v72 = (const void *)CFDataGetLength(v69);
                                  ctu::hex((uint64_t *)buf, v71, v72, v73);
                                  uint64_t v74 = *(void *)buf;
                                  v83[0] = v85;
                                  *(void *)((char *)v83 + 7) = *(void *)((char *)&v85 + 7);
                                  LOBYTE(v69) = HIBYTE(v85);
                                }
                                else
                                {
                                  uint64_t v74 = 0;
                                  LOBYTE(v69) = 0;
                                }
                              }
                              else
                              {
                                uint64_t v74 = 0;
                              }
                              uint64_t v75 = a3[1];
                              if (*(char *)(v75 - 25) < 0) {
                                operator delete(*(void **)(v75 - 48));
                              }
                              *(void *)(v75 - 48) = v74;
                              *(void *)(v75 - 40) = v83[0];
                              *(void *)(v75 - 33) = *(void *)((char *)v83 + 7);
                              *(unsigned char *)(v75 - 25) = (_BYTE)v69;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v9;
      }
      while (Count != v9);
    }
  }
}

void sub_1003EEB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a11 < 0) {
    operator delete(v31);
  }
  sub_1000C57C8((void ***)&a24);
  _Unwind_Resume(a1);
}

void sub_1003EEC34(void *a1@<X0>, NSMutableArray **a2@<X8>)
{
  *a2 = 0;
  id v3 = +[NSMutableArray arrayWithCapacity:0x84BDA12F684BDA13 * ((uint64_t)(a1[1] - *a1) >> 3)];
  uint64_t v31 = a1[1];
  if (*a1 != v31)
  {
    uint64_t v30 = kVinylProfileIdKey;
    uint64_t v29 = kVinylProfileIccidKey;
    uint64_t v28 = kVinylProfileNicknameKey;
    uint64_t v27 = kVinylProfileServiceProviderNameKey;
    uint64_t v26 = kVinylProfileIsActiveKey;
    uint64_t v25 = kVinylProfileIsBootstrapKey;
    uint64_t v24 = kVinylProfileDisableNotAllowedKey;
    uint64_t v23 = kVinylProfileDeleteNotAllowedKey;
    uint64_t v4 = kVinylProfileMccKey;
    uint64_t v5 = kVinylProfileMncKey;
    uint64_t v6 = kVinylProfileGID1Key;
    uint64_t v7 = *a1 + 192;
    uint64_t v8 = kVinylProfileGID2Key;
    uint64_t v9 = kVinylProfileAssociatedImeiKey;
    do
    {
      uint64_t v10 = v7 - 192;
      v33[0] = v30;
      v34[0] = +[NSData dataWithBytes:v7 - 192 length:16];
      v33[1] = v29;
      CFDictionaryRef v11 = (void *)(v7 - 176);
      if (*(char *)(v7 - 153) < 0) {
        CFDictionaryRef v11 = (void *)*v11;
      }
      v34[1] = +[NSString stringWithUTF8String:v11];
      _OWORD v33[2] = v28;
      CFTypeID v12 = (void *)(v7 - 152);
      if (*(char *)(v7 - 129) < 0) {
        CFTypeID v12 = (void *)*v12;
      }
      _OWORD v34[2] = +[NSString stringWithUTF8String:v12];
      v33[3] = v27;
      __int16 v13 = (void *)(v7 - 128);
      if (*(char *)(v7 - 105) < 0) {
        __int16 v13 = (void *)*v13;
      }
      v34[3] = +[NSString stringWithUTF8String:v13];
      v33[4] = v26;
      v34[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7 - 103)];
      v33[5] = v25;
      v34[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7 - 104)];
      v33[6] = v24;
      v34[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7 - 101)];
      v33[7] = v23;
      v34[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7 - 102)];
      v33[8] = v4;
      CFDictionaryRef v14 = (void *)(v7 - 96);
      if (*(char *)(v7 - 73) < 0) {
        CFDictionaryRef v14 = (void *)*v14;
      }
      v34[8] = +[NSString stringWithUTF8String:v14];
      v33[9] = v5;
      CFTypeID v15 = (void *)(v7 - 72);
      if (*(char *)(v7 - 49) < 0) {
        CFTypeID v15 = (void *)*v15;
      }
      v34[9] = +[NSString stringWithUTF8String:v15];
      v33[10] = v6;
      CFDictionaryRef v16 = (void *)(v7 - 48);
      if (*(char *)(v7 - 25) < 0) {
        CFDictionaryRef v16 = (void *)*v16;
      }
      v34[10] = +[NSString stringWithUTF8String:v16];
      v33[11] = v8;
      CFDictionaryRef v17 = (void *)(v7 - 24);
      if (*(char *)(v7 - 1) < 0) {
        CFDictionaryRef v17 = (void *)*v17;
      }
      v34[11] = +[NSString stringWithUTF8String:v17];
      v33[12] = v9;
      uint64_t v18 = v7;
      if (*(char *)(v7 + 23) < 0) {
        uint64_t v18 = *(void *)v7;
      }
      v34[12] = +[NSString stringWithUTF8String:v18];
      [(NSMutableArray *)v3 addObject:+[NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:13]];
      v7 += 216;
    }
    while (v10 + 216 != v31);
  }
  uint8x8_t v32 = 0;
  if (v3)
  {
    CFTypeID v19 = CFGetTypeID(v3);
    if (v19 == CFArrayGetTypeID())
    {
      uint8x8_t v32 = v3;
      CFRetain(v3);
    }
    else
    {
      id v3 = 0;
    }
  }
  CFDataRef v20 = *a2;
  *a2 = v3;
  uint8x8_t v32 = v20;
  sub_100044D00((const void **)&v32);
}

void sub_1003EEFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003EF00C(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  id v5 = objc_msgSend(+[DERHelper sharedDERHelper](DERHelper, "sharedDERHelper"), "parseInfo:", +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", *a1, a1[1] - *a1, 0));
  context = v4;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v18;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v8);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v10 = [v9 objectForKey:@"OSVersion"];
          if (v10)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              CFDictionaryRef v11 = (ctu *)[v10 bytes];
              id v12 = [v10 length];
              ctu::hex((uint64_t *)&v15, v11, v12, v13);
              if (*(char *)(a2 + 23) < 0) {
                operator delete(*(void **)a2);
              }
              *(_OWORD *)a2 = v15;
              *(void *)(a2 + 16) = v16;
            }
          }
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v6);
  }
}

void sub_1003EF1E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003EF220(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v58 = 0;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v58 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v58 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v58 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v56 = xpc_int64_create(*(unsigned __int8 *)(a1 + 16));
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  uint64_t v54 = &v58;
  uint64_t v55 = kVinylFwUpdateStatus;
  sub_100035E70((uint64_t)&v54, &v56, &v57);
  xpc_release(v57);
  xpc_object_t v57 = 0;
  xpc_release(v56);
  xpc_object_t v56 = 0;
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    xpc_object_t v52 = xpc_data_create((const void *)a1, 0x10uLL);
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateCsn;
    sub_100035E70((uint64_t)&v54, &v52, &v53);
    xpc_release(v53);
    xpc_object_t v53 = 0;
    xpc_release(v52);
    xpc_object_t v52 = 0;
    xpc_object_t v50 = xpc_int64_create(*(unsigned __int8 *)(a1 + 17));
    if (!v50) {
      xpc_object_t v50 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateOperationMode;
    sub_100035E70((uint64_t)&v54, &v50, &v51);
    xpc_release(v51);
    xpc_object_t v51 = 0;
    xpc_release(v50);
    xpc_object_t v50 = 0;
    xpc_object_t v48 = xpc_data_create((const void *)(a1 + 18), 0x20uLL);
    if (!v48) {
      xpc_object_t v48 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateCurrentVersion;
    sub_100035E70((uint64_t)&v54, &v48, &v49);
    xpc_release(v49);
    xpc_object_t v49 = 0;
    xpc_release(v48);
    xpc_object_t v48 = 0;
    xpc_object_t v46 = xpc_data_create((const void *)(a1 + 50), 8uLL);
    if (!v46) {
      xpc_object_t v46 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateMainFwNonce;
    sub_100035E70((uint64_t)&v54, &v46, &v47);
    xpc_release(v47);
    xpc_object_t v47 = 0;
    xpc_release(v46);
    xpc_object_t v46 = 0;
    xpc_object_t v44 = xpc_data_create((const void *)(a1 + 58), 8uLL);
    if (!v44) {
      xpc_object_t v44 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateGoldFwNonce;
    sub_100035E70((uint64_t)&v54, &v44, &v45);
    xpc_release(v45);
    xpc_object_t v45 = 0;
    xpc_release(v44);
    xpc_object_t v44 = 0;
    xpc_object_t v42 = xpc_data_create((const void *)(a1 + 66), 8uLL);
    if (!v42) {
      xpc_object_t v42 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateMainFwMac;
    sub_100035E70((uint64_t)&v54, &v42, &v43);
    xpc_release(v43);
    xpc_object_t v43 = 0;
    xpc_release(v42);
    xpc_object_t v42 = 0;
    xpc_object_t v40 = xpc_data_create((const void *)(a1 + 74), 0x20uLL);
    if (!v40) {
      xpc_object_t v40 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateMainFwVersion;
    sub_100035E70((uint64_t)&v54, &v40, &v41);
    xpc_release(v41);
    xpc_object_t v41 = 0;
    xpc_release(v40);
    xpc_object_t v40 = 0;
    xpc_object_t v38 = xpc_data_create((const void *)(a1 + 106), 0x18uLL);
    if (!v38) {
      xpc_object_t v38 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateMainFwChallenge;
    sub_100035E70((uint64_t)&v54, &v38, &v39);
    xpc_release(v39);
    xpc_object_t v39 = 0;
    xpc_release(v38);
    xpc_object_t v38 = 0;
    xpc_object_t object = xpc_data_create((const void *)(a1 + 130), 3uLL);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateMainFwSize;
    sub_100035E70((uint64_t)&v54, &object, &v37);
    xpc_release(v37);
    xpc_object_t v37 = 0;
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_object_t v34 = xpc_data_create((const void *)(a1 + 133), 8uLL);
    if (!v34) {
      xpc_object_t v34 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateGoldFwMac;
    sub_100035E70((uint64_t)&v54, &v34, &v35);
    xpc_release(v35);
    xpc_object_t v35 = 0;
    xpc_release(v34);
    xpc_object_t v34 = 0;
    xpc_object_t v32 = xpc_data_create((const void *)(a1 + 141), 0x20uLL);
    if (!v32) {
      xpc_object_t v32 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateGoldFwVersion;
    sub_100035E70((uint64_t)&v54, &v32, &v33);
    xpc_release(v33);
    xpc_object_t v33 = 0;
    xpc_release(v32);
    xpc_object_t v32 = 0;
    xpc_object_t v30 = xpc_data_create((const void *)(a1 + 173), 0x18uLL);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateGoldFwChallenge;
    sub_100035E70((uint64_t)&v54, &v30, &v31);
    xpc_release(v31);
    xpc_object_t v31 = 0;
    xpc_release(v30);
    xpc_object_t v30 = 0;
    xpc_object_t v28 = xpc_data_create((const void *)(a1 + 197), 3uLL);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateGoldFwSize;
    sub_100035E70((uint64_t)&v54, &v28, &v29);
    xpc_release(v29);
    xpc_object_t v29 = 0;
    xpc_release(v28);
    xpc_object_t v28 = 0;
    xpc_object_t v26 = xpc_int64_create(*(unsigned __int16 *)(a1 + 200));
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateProfileVersion;
    sub_100035E70((uint64_t)&v54, &v26, &v27);
    xpc_release(v27);
    xpc_object_t v27 = 0;
    xpc_release(v26);
    xpc_object_t v26 = 0;
    xpc_object_t v24 = xpc_data_create((const void *)(a1 + 202), 8uLL);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateCurrentMac;
    sub_100035E70((uint64_t)&v54, &v24, &v25);
    xpc_release(v25);
    xpc_object_t v25 = 0;
    xpc_release(v24);
    xpc_object_t v24 = 0;
    xpc_object_t v22 = xpc_data_create((const void *)(a1 + 210), 3uLL);
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateLoaderVersion;
    sub_100035E70((uint64_t)&v54, &v22, &v23);
    xpc_release(v23);
    xpc_object_t v23 = 0;
    xpc_release(v22);
    xpc_object_t v22 = 0;
    xpc_object_t v20 = xpc_data_create((const void *)(a1 + 213), 0x20uLL);
    if (!v20) {
      xpc_object_t v20 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateKeyId;
    sub_100035E70((uint64_t)&v54, &v20, &v21);
    xpc_release(v21);
    xpc_object_t v21 = 0;
    xpc_release(v20);
    xpc_object_t v20 = 0;
    xpc_object_t v18 = xpc_int64_create(*(int *)(a1 + 252));
    if (!v18) {
      xpc_object_t v18 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateEuiccChipId;
    sub_100035E70((uint64_t)&v54, &v18, &v19);
    xpc_release(v19);
    xpc_object_t v19 = 0;
    xpc_release(v18);
    xpc_object_t v18 = 0;
    xpc_object_t v16 = xpc_int64_create(*(char *)(a1 + 245));
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateBootstrapProfiles;
    sub_100035E70((uint64_t)&v54, &v16, &v17);
    xpc_release(v17);
    xpc_object_t v17 = 0;
    xpc_release(v16);
    xpc_object_t v16 = 0;
    xpc_object_t v14 = xpc_int64_create(*(char *)(a1 + 248));
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    uint64_t v54 = &v58;
    uint64_t v55 = kVinylFwUpdateUserProfiles;
    sub_100035E70((uint64_t)&v54, &v14, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_release(v14);
    xpc_object_t v14 = 0;
    if (*(unsigned char *)(a1 + 247))
    {
      xpc_object_t v12 = xpc_int64_create(*(char *)(a1 + 246));
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      uint64_t v54 = &v58;
      uint64_t v55 = kVinylFwUpdateBootstrapProfiles2Phase;
      sub_100035E70((uint64_t)&v54, &v12, &v13);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      xpc_release(v12);
      xpc_object_t v12 = 0;
      xpc_object_t v10 = xpc_data_create(*(const void **)(a1 + 256), *(void *)(a1 + 264) - *(void *)(a1 + 256));
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      uint64_t v54 = &v58;
      uint64_t v55 = kVinylFwUpdateBootstrapProfileIdentifiers;
      sub_100035E70((uint64_t)&v54, &v10, &v11);
      xpc_release(v11);
      xpc_object_t v11 = 0;
      xpc_release(v10);
      xpc_object_t v10 = 0;
    }
  }
  xpc_object_t v9 = v58;
  if (v58) {
    xpc_retain(v58);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&v54, (xpc *)&v9, v8);
  sub_10004EFE4(a2, (CFTypeRef *)&v54);
  sub_1000577C4((const void **)&v54);
  xpc_release(v9);
  xpc_release(v58);
}

void sub_1003EFC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  sub_1000577C4((const void **)(v9 - 72));
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v9 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_1003EFCCC(void *a1, uint64_t a2)
{
  xpc_object_t v4 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  xpc_object_t v5 = v4;
  if (v4) {
    *((_DWORD *)v4 + 3) = 0;
  }
  xpc_object_t v6 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  uint64_t v7 = v6;
  if (v6) {
    *((_DWORD *)v6 + 3) = 0;
  }
  uint64_t v8 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  uint64_t v9 = v8;
  if (v8) {
    *((_DWORD *)v8 + 3) = 0;
  }
  __src = 0;
  unsigned int v32 = 0;
  if (a1[1] == *a1)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    xpc_object_t v14 = v36;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    xpc_object_t v13 = "Missing signing info (metadata)";
    xpc_object_t v15 = v14;
    uint32_t v16 = 2;
    goto LABEL_17;
  }
  int v10 = sub_1004635EC(v7, 0, 0xAu, 4u);
  if (v10)
  {
    int v11 = v10;
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    xpc_object_t v12 = v36;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)long long buf = 67109120;
    int v35 = v11;
    xpc_object_t v13 = "Add data failure (eUicciPKId): %d";
LABEL_16:
    xpc_object_t v15 = v12;
    uint32_t v16 = 8;
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v13, buf, v16);
LABEL_18:
    uint64_t v19 = 0;
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  int v17 = sub_100463720(v7, v5, 2, 3u);
  if (v17)
  {
    int v18 = v17;
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    xpc_object_t v12 = v36;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)long long buf = 67109120;
    int v35 = v18;
    xpc_object_t v13 = "Add data failure (Context): %d";
    goto LABEL_16;
  }
  xpc_object_t v21 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  xpc_object_t v22 = v21;
  if (v21) {
    *((_DWORD *)v21 + 3) = 0;
  }
  if (v7) {
    sub_100463290(v7);
  }
  int v23 = sub_1004632FC(v22, 0, 0x10u, *(const void **)a2, *(_DWORD *)(a2 + 8) - *(void *)a2, 1);
  if (v23)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    xpc_object_t v24 = v36;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v35 = v23;
      xpc_object_t v25 = "Add data failure (DeviceInfoMetadata): %d";
LABEL_41:
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v25, buf, 8u);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  int v26 = sub_100463720(v22, v5, 2, 5u);
  if (v26)
  {
    int v27 = v26;
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    xpc_object_t v24 = v36;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v35 = v27;
      xpc_object_t v25 = "Add data failure (Context): %d";
      goto LABEL_41;
    }
LABEL_42:
    uint64_t v19 = 0;
    goto LABEL_43;
  }
  int v28 = sub_100463720(v5, v9, 0, 0x10u);
  if (v28)
  {
    int v29 = v28;
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    xpc_object_t v24 = v36;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v35 = v29;
      xpc_object_t v25 = "Add sequence from encoder failure (payload): %d";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  int v30 = sub_100463664(v9, &__src, &v32);
  if (v30)
  {
    int v31 = v30;
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    xpc_object_t v24 = v36;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v35 = v31;
      xpc_object_t v25 = "Buffer creation failure (EncodeBirchSignPayload): %d";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  *(void *)(a2 + 8) = *(void *)a2;
  if (!__src) {
    goto LABEL_42;
  }
  sub_1003F0208((unint64_t *)a2, v32);
  sub_10006E4A8((void *)a2, (char *)__src, (char *)__src + v32, v32);
  free(__src);
  uint64_t v19 = 1;
LABEL_43:
  uint64_t v7 = v22;
  if (v9) {
LABEL_19:
  }
    sub_100463290(v9);
LABEL_20:
  if (v7) {
    sub_100463290(v7);
  }
  if (v5) {
    sub_100463290(v5);
  }
  return v19;
}

void sub_1003F01A8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_100463290(v2);
    if (!v3)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  sub_100463290(v3);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  sub_100463290(v1);
  goto LABEL_5;
}

void sub_1003F0208(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10011FDF0(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void sub_1003F0230(uint64_t **a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      xpc_object_t v25 = 0;
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v25 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v25 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v25 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      LOBYTE(v11) = (_BYTE)v6;
      if (*((char *)v6 + 23) < 0) {
        uint64_t v11 = *v6;
      }
      sub_1003F05BC(&v23, v11);
      xpc_object_t v21 = &v25;
      xpc_object_t v22 = "kIccid";
      sub_100035E70((uint64_t)&v21, &v23, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v23);
      xpc_object_t v23 = 0;
      xpc_object_t v19 = xpc_int64_create(*((int *)v6 + 6));
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_object_t v21 = &v25;
      xpc_object_t v22 = "kStatus";
      sub_100035E70((uint64_t)&v21, &v19, &v20);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v19);
      xpc_object_t v19 = 0;
      xpc_object_t v12 = v6 + 4;
      if (*((char *)v6 + 55) < 0) {
        xpc_object_t v12 = (void *)*v12;
      }
      sub_1003F05BC(&v17, (char)v12);
      xpc_object_t v21 = &v25;
      xpc_object_t v22 = "kSlotUuid";
      sub_100035E70((uint64_t)&v21, &v17, &v18);
      xpc_release(v18);
      xpc_object_t v18 = 0;
      xpc_release(v17);
      xpc_object_t v17 = 0;
      xpc_object_t v13 = v6 + 7;
      if (*((char *)v6 + 79) < 0) {
        xpc_object_t v13 = (void *)*v13;
      }
      sub_1003F05BC(&v15, (char)v13);
      xpc_object_t v21 = &v25;
      xpc_object_t v22 = "kLabelId";
      sub_100035E70((uint64_t)&v21, &v15, &v16);
      xpc_release(v16);
      xpc_object_t v16 = 0;
      xpc_release(v15);
      xpc_object_t v15 = 0;
      xpc_array_append_value(v5, v25);
      xpc_release(v25);
      v6 += 11;
    }
    while (v6 != v7);
  }
  xpc_object_t v25 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&v21, (xpc *)&v25, v14);
  sub_100044D6C(a2, (CFTypeRef *)&v21);
  sub_1000577C4((const void **)&v21);
  xpc_release(v25);
  xpc_release(v5);
}

void sub_1003F0528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1000577C4((const void **)va);
  xpc_release(*(xpc_object_t *)(v11 - 88));
  xpc_release(v10);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1003F05BC@<X0>(void *a1@<X8>, char a2)
{
  *a1 = 0;
  xpc_object_t result = xpc_string_create_with_format_and_arguments("%s", &a2);
  *a1 = result;
  if (!result)
  {
    xpc_object_t result = xpc_null_create();
    *a1 = result;
  }
  return result;
}

void sub_1003F0614(CFArrayRef *a1, uint64_t *a2)
{
  CFArrayRef v3 = *a1;
  if (v3) {
    xpc_object_t v4 = sub_100083F10;
  }
  else {
    xpc_object_t v4 = 0;
  }
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v6 = 0;
      int v27 = (char *)kCtLoggingSystemName;
      do
      {
        uint64_t v31 = 0;
        memset(v30, 0, sizeof(v30));
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*a1, v6);
        CFDictionaryRef v8 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFTypeID v9 = CFGetTypeID(ValueAtIndex);
          if (v9 == CFDictionaryGetTypeID()) {
            CFDictionaryRef v10 = v8;
          }
          else {
            CFDictionaryRef v10 = 0;
          }
        }
        else
        {
          CFDictionaryRef v10 = 0;
        }
        memset(&__str, 0, sizeof(__str));
        CFDictionaryGetValue(v10, @"kIccid");
        memset(&buf, 0, sizeof(buf));
        ctu::cf::assign();
        std::string __str = buf;
        std::string::operator=((std::string *)v30, &__str);
        CFDictionaryRef Value = (unsigned int *)CFDictionaryGetValue(v10, @"kStatus");
        xpc_object_t v12 = Value;
        LODWORD(buf.__r_.__value_.__l.__data_) = 0;
        if (Value)
        {
          CFTypeID v13 = CFGetTypeID(Value);
          if (v13 == CFNumberGetTypeID()) {
            ctu::cf::assign((ctu::cf *)&buf, v12, v14);
          }
        }
        if ((cellplan::deserializeRemotePlanSimSubscriptionStatus() & 1) == 0)
        {
          *(_DWORD *)&v30[24] = 0;
          xpc_object_t v15 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, v27, "vinyl.helper");
          size_t size = buf.__r_.__value_.__l.__size_;
          ctu::OsLogContext::~OsLogContext(v15);
          if (os_log_type_enabled(size, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, size, OS_LOG_TYPE_ERROR, "Bad status, assuming 'Unknown'", (uint8_t *)&buf, 2u);
          }
        }
        CFDictionaryGetValue(v10, @"kSlotUuid");
        memset(&buf, 0, sizeof(buf));
        ctu::cf::assign();
        v33[0] = buf.__r_.__value_.__l.__size_;
        std::string::size_type v17 = buf.__r_.__value_.__r.__words[0];
        *(void *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
        char v18 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((v30[55] & 0x80000000) != 0) {
          operator delete(*(void **)&v30[32]);
        }
        *(void *)&v30[32] = v17;
        *(void *)&v30[40] = v33[0];
        *(void *)&v30[47] = *(void *)((char *)v33 + 7);
        v30[55] = v18;
        CFDictionaryGetValue(v10, @"kLabelId");
        memset(&buf, 0, sizeof(buf));
        ctu::cf::assign();
        v33[0] = buf.__r_.__value_.__l.__size_;
        std::string::size_type v19 = buf.__r_.__value_.__r.__words[0];
        *(void *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
        char v20 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((v30[79] & 0x80000000) != 0) {
          operator delete(*(void **)&v30[56]);
        }
        *(void *)&v30[56] = v19;
        *(void *)&v30[64] = v33[0];
        *(void *)&v30[71] = *(void *)((char *)v33 + 7);
        v30[79] = v20;
        unint64_t v21 = a2[1];
        if (v21 >= a2[2])
        {
          uint64_t v23 = sub_1003DBFB0(a2, (long long *)v30);
        }
        else
        {
          if ((v30[23] & 0x80000000) != 0)
          {
            sub_10004FC84((unsigned char *)a2[1], *(void **)v30, *(unint64_t *)&v30[8]);
          }
          else
          {
            long long v22 = *(_OWORD *)v30;
            *(void *)(v21 + 16) = *(void *)&v30[16];
            *(_OWORD *)unint64_t v21 = v22;
          }
          *(_DWORD *)(v21 + 24) = *(_DWORD *)&v30[24];
          if ((v30[55] & 0x80000000) != 0)
          {
            sub_10004FC84((unsigned char *)(v21 + 32), *(void **)&v30[32], *(unint64_t *)&v30[40]);
          }
          else
          {
            long long v24 = *(_OWORD *)&v30[32];
            *(void *)(v21 + 48) = *(void *)&v30[48];
            *(_OWORD *)(v21 + 32) = v24;
          }
          xpc_object_t v25 = (unsigned char *)(v21 + 56);
          if ((v30[79] & 0x80000000) != 0)
          {
            sub_10004FC84(v25, *(void **)&v30[56], *(unint64_t *)&v30[64]);
          }
          else
          {
            long long v26 = *(_OWORD *)&v30[56];
            *(void *)(v21 + 72) = *(void *)&v30[72];
            *(_OWORD *)xpc_object_t v25 = v26;
          }
          *(_DWORD *)(v21 + 80) = v31;
          uint64_t v23 = v21 + 88;
          a2[1] = v21 + 88;
        }
        a2[1] = v23;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((v30[79] & 0x80000000) != 0) {
          operator delete(*(void **)&v30[56]);
        }
        if ((v30[55] & 0x80000000) != 0) {
          operator delete(*(void **)&v30[32]);
        }
        if ((v30[23] & 0x80000000) != 0) {
          operator delete(*(void **)v30);
        }
        ++v6;
      }
      while (Count != v6);
    }
  }
}

void sub_1003F0A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (*(char *)(v24 + 55) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v24 + 23) < 0) {
    operator delete(*(void **)v24);
  }
  *(void *)(v22 + 8) = v24;
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1003785AC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F0AC0(char **a1, char **a2, char **a3, void *a4)
{
  if (*a1 != a1[1] && *a2 != a2[1] && *a3 != a3[1])
  {
    CFDictionaryRef v8 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
    CFTypeID v9 = v8;
    if (v8) {
      *((_DWORD *)v8 + 3) = 0;
    }
    std::string __p = 0;
    long long __dst = 0;
    uint64_t v22 = 0;
    sub_10005C748((uint64_t)&__p, 0, *a1, a1[1], a1[1] - *a1);
    sub_10005C748((uint64_t)&__p, (char *)__dst, *a2, a2[1], a2[1] - *a2);
    sub_10005C748((uint64_t)&__p, (char *)__dst, *a3, a3[1], a3[1] - *a3);
    __src = 0;
    unsigned int v18 = 0;
    int v10 = sub_1004632FC(v9, 0, 0x10u, __p, (int)__dst - (int)__p, 1);
    if (v10)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      uint64_t v11 = v25;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v24 = v10;
        xpc_object_t v12 = "Add data failure (concatenatedPayload): %d";
LABEL_24:
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, 8u);
      }
    }
    else
    {
      int v16 = sub_100463664(v9, &__src, &v18);
      if (!v16)
      {
        a4[1] = *a4;
        if (__src)
        {
          sub_10006E4A8(a4, (char *)__src, (char *)__src + v18, v18);
          free(__src);
        }
        uint64_t v14 = 1;
        goto LABEL_16;
      }
      int v17 = v16;
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      uint64_t v11 = v25;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v24 = v17;
        xpc_object_t v12 = "Buffer creation failure (SecureAuth): %d";
        goto LABEL_24;
      }
    }
    uint64_t v14 = 0;
LABEL_16:
    if (__p)
    {
      long long __dst = __p;
      operator delete(__p);
    }
    if (v9) {
      sub_100463290(v9);
    }
    return v14;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&__p, kCtLoggingSystemName, "vinyl.helper");
  CFTypeID v13 = __dst;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__p);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Missing required input", (uint8_t *)&__p, 2u);
  }
  return 0;
}

void sub_1003F0D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (v12) {
    sub_100463290(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F0DD0(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  *(_DWORD *)&v30[8] = 0;
  int v5 = *(_DWORD *)(a1 + 8);
  *(void *)int v30 = v5 - *(void *)a1;
  if (v5 == *(void *)a1)
  {
    int v10 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    uint64_t v11 = v33;
    ctu::OsLogContext::~OsLogContext(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      CFTypeID v9 = "Empty Response";
      xpc_object_t v12 = v11;
      uint32_t v13 = 2;
LABEL_11:
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v9, buf, v13);
      return 255;
    }
    return 255;
  }
  int v6 = DERDecoderInitialize();
  if (v6)
  {
    uint64_t v7 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v32 = v6;
      CFTypeID v9 = "Initialize failure (SecureAkaRsp): %d";
LABEL_10:
      xpc_object_t v12 = v8;
      uint32_t v13 = 8;
      goto LABEL_11;
    }
    return 255;
  }
  int DataAt = DERDecoderGetDataAt();
  if (DataAt)
  {
    xpc_object_t v15 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v15);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v32 = DataAt;
      CFTypeID v9 = "Get data failure (SecureAkaRsp): %d";
      goto LABEL_10;
    }
    return 255;
  }
  int v16 = DERDecoderInitialize();
  if (v16)
  {
    int v17 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v17);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 255;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v32 = v16;
    CFTypeID v9 = "Initialize Failure (AKASuccessRsp): %d";
    goto LABEL_10;
  }
  int v18 = DERDecoderParseSequence();
  if (v18)
  {
    std::string::size_type v19 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v19);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 255;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v32 = v18;
    CFTypeID v9 = "Parse Sequence failure (AKASuccessRsp): %d";
    goto LABEL_10;
  }
  int v20 = DERDecoderGetDataAt();
  if (v20)
  {
    unint64_t v21 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v21);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 255;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v32 = v20;
    CFTypeID v9 = "Missing data (AuthData with SW): %d";
    goto LABEL_10;
  }
  int v22 = DERDecoderInitialize();
  if (v22)
  {
    uint64_t v23 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v23);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 255;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v32 = v22;
    CFTypeID v9 = "Cannot initialize (AuthData): %d";
    goto LABEL_10;
  }
  int v24 = DERDecoderGetDataAt();
  if (v24)
  {
    xpc_object_t v25 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v25);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 255;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v32 = v24;
    CFTypeID v9 = "Missing data (Status Word): %d";
    goto LABEL_10;
  }
  if (*(_DWORD *)v30 != 2)
  {
    int v28 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v28);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 255;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v32 = *(_DWORD *)v30;
    CFTypeID v9 = "Invalid length (Status Word): %d";
    goto LABEL_10;
  }
  *a4 = bswap32((unsigned __int16)**(_WORD **)&v30[4]) >> 16;
  int EncodingWithTag = DERDecoderGetEncodingWithTag();
  if (EncodingWithTag)
  {
    int v27 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFDictionaryRef v8 = v33;
    ctu::OsLogContext::~OsLogContext(v27);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 255;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v32 = EncodingWithTag;
    CFTypeID v9 = "Missing data (SecureIntentResponse): %d";
    goto LABEL_10;
  }
  return 0;
}

uint64_t sub_1003F144C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)a1 != *(void *)(a1 + 8)
    && *(void *)a2 != *(void *)(a2 + 8)
    && *(void *)a3 != *(void *)(a3 + 8))
  {
    CFDictionaryRef v8 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
    CFTypeID v9 = v8;
    if (v8) {
      *((_DWORD *)v8 + 3) = 0;
    }
    __src = 0;
    unsigned int v28 = 0;
    int v10 = sub_1004632FC(v8, 0, 0x10u, *(const void **)a1, *(_DWORD *)(a1 + 8) - *(void *)a1, 1);
    if (v10)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      uint64_t v11 = v32;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v31 = v10;
        xpc_object_t v12 = "Add data failure (sepAttestation): %d";
LABEL_16:
        int v17 = v11;
LABEL_17:
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v12, buf, 8u);
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    int v16 = sub_1004632FC(v9, 2, 0, *(const void **)a2, *(_DWORD *)(a2 + 8) - *(void *)a2, 0);
    if (v16)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      uint64_t v11 = v32;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v31 = v16;
        xpc_object_t v12 = "Add data failure (attestationSignature): %d";
        goto LABEL_16;
      }
LABEL_20:
      uint64_t v14 = 0;
      goto LABEL_21;
    }
    int v18 = sub_1004632FC(v9, 2, 1u, *(const void **)a3, *(_DWORD *)(a3 + 8) - *(void *)a3, 1);
    if (v18)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      std::string::size_type v19 = v32;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)std::string buf = 67109120;
      int v31 = v18;
      xpc_object_t v12 = "Add data failure (signer): %d";
      int v17 = v19;
      goto LABEL_17;
    }
    int v20 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
    unint64_t v21 = v20;
    if (v20) {
      *((_DWORD *)v20 + 3) = 0;
    }
    int v22 = sub_100463720(v9, v20, 1, 9u);
    if (v22)
    {
      int v23 = v22;
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      int v24 = v32;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      *(_DWORD *)std::string buf = 67109120;
      int v31 = v23;
      xpc_object_t v25 = "Add sequence from encoder failure (payload): %d";
    }
    else
    {
      int v26 = sub_100463664(v21, &__src, &v28);
      if (!v26)
      {
        a4[1] = *a4;
        if (__src)
        {
          sub_10006E4A8(a4, (char *)__src, (char *)__src + v28, v28);
          free(__src);
        }
        uint64_t v14 = 1;
        if (!v21) {
          goto LABEL_21;
        }
LABEL_31:
        sub_100463290(v21);
LABEL_21:
        if (v9) {
          sub_100463290(v9);
        }
        return v14;
      }
      int v27 = v26;
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      int v24 = v32;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
LABEL_30:
        uint64_t v14 = 0;
        if (!v21) {
          goto LABEL_21;
        }
        goto LABEL_31;
      }
      *(_DWORD *)std::string buf = 67109120;
      int v31 = v27;
      xpc_object_t v25 = "Buffer creation failure (SepAttestation): %d";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v25, buf, 8u);
    goto LABEL_30;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
  uint32_t v13 = v32;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Missing required input", buf, 2u);
  }
  return 0;
}

void sub_1003F1898(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_100463290(v2);
  }
  if (v1) {
    sub_100463290(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F18E0(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    CFTypeID v9 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Missing required input", buf, 2u);
    }
    return 0;
  }
  xpc_object_t v4 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  int v5 = v4;
  if (v4) {
    *((_DWORD *)v4 + 3) = 0;
  }
  __src = 0;
  unsigned int v14 = 0;
  int v6 = sub_1004632FC(v4, 2, 0, *(const void **)a1, *(_DWORD *)(a1 + 8) - *(void *)a1, 0);
  if (v6)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
    uint64_t v7 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v17 = v6;
    CFDictionaryRef v8 = "Add data failure (attestationSignature): %d";
    goto LABEL_20;
  }
  int v11 = sub_100463664(v5, &__src, &v14);
  if (!v11)
  {
    a2[1] = *a2;
    if (__src)
    {
      sub_10006E4A8(a2, (char *)__src, (char *)__src + v14, v14);
      free(__src);
    }
    uint64_t v10 = 1;
    if (v5) {
      goto LABEL_13;
    }
    return v10;
  }
  int v12 = v11;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
  uint64_t v7 = v18;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v17 = v12;
    CFDictionaryRef v8 = "Buffer creation failure (SecureAuth): %d";
LABEL_20:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, buf, 8u);
  }
LABEL_12:
  uint64_t v10 = 0;
  if (v5) {
LABEL_13:
  }
    sub_100463290(v5);
  return v10;
}

void sub_1003F1B34(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100463290(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F1B5C(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4, void *a5)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 && *(void *)a3 != *(void *)(a3 + 8) && *(void *)a2 != *(void *)(a2 + 8) && *a4 != a4[1])
  {
    int v11 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
    int v12 = v11;
    if (v11) {
      *((_DWORD *)v11 + 3) = 0;
    }
    __src = 0;
    unsigned int v46 = 0;
    int v13 = sub_1004632FC(v11, 2, 0, *(const void **)a2, *(_DWORD *)(a2 + 8) - *(void *)a2, 0);
    if (v13)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      unsigned int v14 = v51;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v13;
        xpc_object_t v15 = "Add data failure (eapAkaRand): %d";
        int v16 = v14;
LABEL_34:
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v15, buf, 8u);
        goto LABEL_18;
      }
      goto LABEL_18;
    }
    int v20 = sub_1004632FC(v12, 2, 1u, *(const void **)a3, *(_DWORD *)(a3 + 8) - *(void *)a3, 0);
    if (v20)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      unint64_t v21 = v51;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v20;
        xpc_object_t v15 = "Add data failure (eapAkaAutn): %d";
        int v16 = v21;
        goto LABEL_34;
      }
LABEL_18:
      uint64_t v18 = 0;
LABEL_19:
      if (v12) {
        sub_100463290(v12);
      }
      return v18;
    }
    int v22 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
    int v23 = v22;
    if (v22) {
      *((_DWORD *)v22 + 3) = 0;
    }
    int v24 = sub_100463720(v12, v22, 0, 0x10u);
    if (v24)
    {
      int v25 = v24;
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      int v26 = v51;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v25;
        int v27 = "Add sequence from encoder failure (payload): %d";
LABEL_52:
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v27, buf, 8u);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
    int v28 = sub_1004632FC(v23, 1, 1u, *a4, *((_DWORD *)a4 + 2) - *a4, 0);
    if (v28)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
      int v26 = v51;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v28;
        int v27 = "Add data failure (transferNonce): %d";
        goto LABEL_52;
      }
LABEL_28:
      uint64_t v18 = 0;
LABEL_29:
      if (v23) {
        sub_100463290(v23);
      }
      goto LABEL_19;
    }
    *(void *)std::string buf = 0;
    xpc_object_t v51 = 0;
    uint64_t v52 = 0;
    if (*(char *)(a1 + 23) < 0)
    {
      sub_10004FC84(__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      uint64_t v45 = *(void *)(a1 + 16);
    }
    subscriber::encodeIccid();
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    if (*(NSObject **)buf == v51)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, kCtLoggingSystemName, "vinyl.helper");
      xpc_object_t v34 = *(NSObject **)&v49[4];
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *(unsigned __int8 *)(a1 + 23);
        if ((v43 & 0x80u) != 0) {
          uint64_t v43 = *(void *)(a1 + 8);
        }
        *(_DWORD *)xpc_object_t v48 = 134217984;
        *(void *)xpc_object_t v49 = v43;
        int v31 = "Invalid ICCID length: %lu";
        int v32 = v34;
        uint32_t v33 = 12;
        goto LABEL_64;
      }
LABEL_43:
      uint64_t v18 = 0;
      goto LABEL_44;
    }
    int v29 = sub_1004632FC(v23, 1, 0x1Au, *(const void **)buf, (int)v51 - *(_DWORD *)buf, 0);
    if (v29)
    {
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, kCtLoggingSystemName, "vinyl.helper");
      int v30 = *(NSObject **)&v49[4];
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)xpc_object_t v48 = 67109120;
        *(_DWORD *)xpc_object_t v49 = v29;
        int v31 = "Add data failure (eapAkaAutn): %d";
        int v32 = v30;
        uint32_t v33 = 8;
LABEL_64:
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v31, v48, v33);
        goto LABEL_43;
      }
      goto LABEL_43;
    }
    int v35 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
    BOOL v36 = v35;
    if (v35) {
      *((_DWORD *)v35 + 3) = 0;
    }
    int v37 = sub_100463720(v23, v35, 0, 0x10u);
    if (v37)
    {
      int v38 = v37;
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, kCtLoggingSystemName, "vinyl.helper");
      xpc_object_t v39 = *(NSObject **)&v49[4];
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      *(_DWORD *)xpc_object_t v48 = 67109120;
      *(_DWORD *)xpc_object_t v49 = v38;
      xpc_object_t v40 = "Add sequence from encoder failure (payload): %d";
    }
    else
    {
      int v41 = sub_100463664(v36, &__src, &v46);
      if (!v41)
      {
        a5[1] = *a5;
        if (__src)
        {
          sub_10006E4A8(a5, (char *)__src, (char *)__src + v46, v46);
          free(__src);
        }
        uint64_t v18 = 1;
        if (!v36) {
          goto LABEL_44;
        }
LABEL_56:
        sub_100463290(v36);
LABEL_44:
        if (*(void *)buf)
        {
          xpc_object_t v51 = *(NSObject **)buf;
          operator delete(*(void **)buf);
        }
        goto LABEL_29;
      }
      int v42 = v41;
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, kCtLoggingSystemName, "vinyl.helper");
      xpc_object_t v39 = *(NSObject **)&v49[4];
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
LABEL_55:
        uint64_t v18 = 0;
        if (!v36) {
          goto LABEL_44;
        }
        goto LABEL_56;
      }
      *(_DWORD *)xpc_object_t v48 = 67109120;
      *(_DWORD *)xpc_object_t v49 = v42;
      xpc_object_t v40 = "Buffer creation failure (SecureAuth): %d";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, v40, v48, 8u);
    goto LABEL_55;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.helper");
  int v17 = v51;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Missing required input", buf, 2u);
  }
  return 0;
}

void sub_1003F2204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (v23) {
    sub_100463290(v23);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v22) {
    sub_100463290(v22);
  }
  if (v21) {
    sub_100463290(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F229C(uint64_t *a1, void *a2)
{
  sub_1003F2314((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_1003F2314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a7 - 96;
    do
    {
      *(_OWORD *)(v8 - 120) = *(_OWORD *)(a3 - 216);
      long long v9 = *(_OWORD *)(a3 - 200);
      *(void *)(v8 - 88) = *(void *)(a3 - 184);
      *(_OWORD *)(v8 - 104) = v9;
      *(void *)(a3 - 192) = 0;
      *(void *)(a3 - 184) = 0;
      *(void *)(a3 - 200) = 0;
      long long v10 = *(_OWORD *)(a3 - 176);
      *(void *)(v8 - 64) = *(void *)(a3 - 160);
      *(_OWORD *)(v8 - 80) = v10;
      *(void *)(a3 - 168) = 0;
      *(void *)(a3 - 160) = 0;
      *(void *)(a3 - 176) = 0;
      long long v11 = *(_OWORD *)(a3 - 152);
      *(void *)(v8 - 40) = *(void *)(a3 - 136);
      *(_OWORD *)(v8 - 56) = v11;
      *(void *)(a3 - 152) = 0;
      *(void *)(a3 - 144) = 0;
      *(void *)(a3 - 136) = 0;
      *(_DWORD *)(v8 - 32) = *(_DWORD *)(a3 - 128);
      long long v12 = *(_OWORD *)(a3 - 120);
      *(void *)(v8 - 8) = *(void *)(a3 - 104);
      *(_OWORD *)(v8 - 24) = v12;
      *(void *)(a3 - 112) = 0;
      *(void *)(a3 - 104) = 0;
      *(void *)(a3 - 120) = 0;
      long long v13 = *(_OWORD *)(a3 - 96);
      *(void *)(v8 + 16) = *(void *)(a3 - 80);
      *(_OWORD *)uint64_t v8 = v13;
      *(void *)(a3 - 88) = 0;
      *(void *)(a3 - 80) = 0;
      *(void *)(a3 - 96) = 0;
      long long v14 = *(_OWORD *)(a3 - 72);
      *(void *)(v8 + 40) = *(void *)(a3 - 56);
      *(_OWORD *)(v8 + 24) = v14;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v15 = *(_OWORD *)(a3 - 48);
      *(void *)(v8 + 64) = *(void *)(a3 - 32);
      *(_OWORD *)(v8 + 48) = v15;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      __n128 result = *(__n128 *)(a3 - 24);
      *(void *)(v8 + 88) = *(void *)(a3 - 8);
      *(__n128 *)(v8 + 72) = result;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      v7 -= 216;
      v8 -= 216;
      a3 -= 216;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t sub_1003F2414(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    sub_1000C584C(i - 216);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003F2464()
{
  qword_101B0CDD0 = @"mobile";
  CFIndex v6 = 32;
  CFRetain(@"mobile");
  CFURLRef v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  if (v0)
  {
    CFURLRef v1 = v0;
    CFStringRef v2 = CFURLCopyFileSystemPath(v0, kCFURLPOSIXPathStyle);
    if (v2)
    {
      CFStringRef v3 = v2;
      qword_101B0CDD8 = (uint64_t)sub_1003F2578(kCFAllocatorDefault, v2, 0, 0);
      CFRelease(v3);
    }
    CFRelease(v1);
  }
  *(_OWORD *)buffer = 0u;
  long long v8 = 0u;
  uint64_t v4 = sub_1003F2578(kCFAllocatorDefault, @"mobile", buffer, &v6);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    getpwnam(v4);
    if (v5 != buffer) {
      CFAllocatorDeallocate(kCFAllocatorDefault, v5);
    }
  }
}

const char *sub_1003F2578(const __CFAllocator *a1, CFStringRef theString, char *buffer, CFIndex *a4)
{
  uint64_t v5 = buffer;
  CFIndex maxBufLen = 0;
  if (buffer && a4 && *a4 && CFStringGetCString(theString, buffer, *a4, 0x8000100u))
  {
    size_t v8 = strlen(v5);
LABEL_12:
    *a4 = v8;
    return v5;
  }
  CFIndex Length = CFStringGetLength(theString);
  v14.location = 0;
  v14.length = Length;
  CFStringGetBytes(theString, v14, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  long long v10 = (UInt8 *)CFAllocatorAllocate(a1, maxBufLen + 1, 0);
  if (v10)
  {
    long long v11 = (const char *)v10;
    v15.location = 0;
    v15.length = Length;
    CFStringGetBytes(theString, v15, 0x8000100u, 0, 0, v10, maxBufLen, &maxBufLen);
    uint64_t v5 = &v11[maxBufLen];
  }
  else
  {
    CFIndex maxBufLen = 0;
    long long v11 = v5;
    if (!v5) {
      goto LABEL_10;
    }
  }
  *uint64_t v5 = 0;
  uint64_t v5 = v11;
LABEL_10:
  if (a4)
  {
    size_t v8 = maxBufLen;
    goto LABEL_12;
  }
  return v5;
}

uint64_t sub_1003F26A8()
{
  return qword_101B0CDD8;
}

uint64_t sub_1003F26E0()
{
  return qword_101B0CDD0;
}

void sub_1003F2718()
{
  CFIndex v8 = 32;
  CFRetain(@"_wireless");
  CFURLRef v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  if (v0)
  {
    CFURLRef v1 = v0;
    CFStringRef v2 = CFURLCopyFileSystemPath(v0, kCFURLPOSIXPathStyle);
    if (v2)
    {
      CFStringRef v3 = v2;
      qword_101B0CDE0 = (uint64_t)sub_1003F2578(kCFAllocatorDefault, v2, 0, 0);
      CFRelease(v3);
    }
    CFRelease(v1);
  }
  *(_OWORD *)buffer = 0u;
  long long v10 = 0u;
  uint64_t v4 = sub_1003F2578(kCFAllocatorDefault, @"_wireless", buffer, &v8);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    CFIndex v6 = getpwnam(v4);
    if (v6)
    {
      int pw_gid = v6->pw_gid;
      dword_101B0CDC8 = v6->pw_uid;
      dword_101B0CDCC = pw_gid;
    }
    if (v5 != buffer) {
      CFAllocatorDeallocate(kCFAllocatorDefault, v5);
    }
  }
}

uint64_t _GetWirelessUserDirectory()
{
  return qword_101B0CDE0;
}

uint64_t sub_1003F2870()
{
  return dword_101B0CDC8;
}

uint64_t sub_1003F28A8()
{
  return dword_101B0CDCC;
}

uint64_t sub_1003F28E0(unsigned char *a1, uid_t a2, gid_t a3, mode_t a4)
{
  bzero(v13, 0x400uLL);
  int v8 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v9 = 0;
  long long v10 = a1 + 1;
  memset(&v12, 0, sizeof(v12));
  while (1)
  {
    v13[v9] = v8;
    if (v8 != 47 || !stat(v13, &v12)) {
      goto LABEL_7;
    }
    if (mkdir(v13, 0x1FFu)) {
      return *__error();
    }
    chown(v13, a2, a3);
    chmod(v13, a4);
LABEL_7:
    uint64_t result = 0;
    if (v9 <= 0x3FD)
    {
      int v8 = v10[v9++];
      if (v8) {
        continue;
      }
    }
    return result;
  }
}

uint64_t sub_1003F2A04()
{
  uint64_t v0 = CFPreferencesSynchronize(@"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  bzero(__dst, 0x400uLL);
  pthread_once(&stru_101B0A1C8, sub_1003F2718);
  strlcpy(__dst, (const char *)qword_101B0CDE0, 0x400uLL);
  strlcat(__dst, "/Library/Preferences/com.apple.commcenter.plist", 0x400uLL);
  chmod(__dst, 0x1A4u);
  return v0;
}

uint64_t sub_1003F2ADC(const __CFString *a1, const __CFString *a2)
{
  v4.length = CFStringGetLength(a1);
  v4.location = 0;

  return CFStringFindWithOptions(a1, a2, v4, 9uLL, 0);
}

CFStringRef sub_1003F2B2C(const __CFAllocator *a1, CFDataRef theData)
{
  CFIndex Length = CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex v6 = malloc_type_malloc((2 * Length) | 1, 0x388D93E5uLL);
  uint64_t v7 = v6;
  CFStringRef v8 = 0;
  if (BytePtr && v6 && Length >= 1)
  {
    unsigned int v9 = 0;
    do
    {
      unsigned int v10 = v9 + 1;
      *((unsigned char *)v6 + v9) = a0123456789abcd[(unint64_t)*BytePtr >> 4];
      char v11 = *BytePtr++;
      v9 += 2;
      *((unsigned char *)v6 + v10) = a0123456789abcd[v11 & 0xF];
      --Length;
    }
    while (Length);
    *((unsigned char *)v6 + v9) = 0;
    if (v9) {
      CFStringRef v8 = CFStringCreateWithFormat(a1, 0, @"%s", v6);
    }
    else {
      CFStringRef v8 = 0;
    }
  }
  free(v7);
  return v8;
}

void sub_1003F2C24()
{
}

void sub_1003F2C38(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  CFStringRef v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x60uLL);
  CFIndex v6 = v5;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7500;
  uint64_t v7 = &v5[1].__vftable;
  v9[0] = v4;
  v9[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100141E04(&v5[1].__vftable, v9);
  if (v3) {
    sub_10004D2C8(v3);
  }
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v7;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    goto LABEL_9;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v7;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_9:
    sub_10004D2C8(v6);
  }
  *a2 = v7;
  a2[1] = v6;
}

void sub_1003F2D28(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1003F2D4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003F2D6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7500;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1003F2DC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_1003F2DE8(uint64_t a1, NSObject **a2, void *a3)
{
  CFIndex v6 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v9, kCtLoggingSystemName, "ul");
  sub_1003F2ED0(v6, a2, &v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  *(void *)a1 = off_1019C7550;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 72) = *a3;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 80) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(unsigned char *)(a1 + 112) = 0;
  return a1;
}

void sub_1003F2EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1003F2ED0(void *a1, NSObject **a2, OsLogContext *a3)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = *a2;
  a1[2] = *a2;
  if (v5) {
    dispatch_retain(v5);
  }
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v7, a3);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), (const ctu::OsLogLogger *)v7);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v7);
  return a1;
}

void sub_1003F2F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  sub_100087E88(v2);
  _Unwind_Resume(a1);
}

void sub_1003F2F5C(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFStringRef v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v4;
  CFStringRef v8 = sub_10004D37C(&v3[1].__m_.__sig, &v12);
  if (v8)
  {
    unsigned int v10 = (GestaltUtilityInterface *)v8[3];
    OsLogContext v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v10 = 0;
  }
  std::mutex::unlock(v3);
  OsLogContext v9 = 0;
  char v11 = 1;
LABEL_9:
  *(unsigned char *)(a1 + 112) = GestaltUtilityInterface::isWatch(v10);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
}

void sub_1003F3044(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F3060()
{
}

void sub_1003F311C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1003F315C(uint64_t a1, uint64_t a2)
{
  return sub_1000C6C34((uint64_t *)(a1 + 48), *(void ***)a2, (void **)(a2 + 8));
}

void sub_1003F316C(uint64_t a1, uint64_t a2)
{
  sub_100046BAC((uint64_t **)(a1 + 88), (void **)a2, a2);
  unint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    int v6 = 136446210;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Suppressing alerts for bundle id: %{public}s", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1003F3228(uint64_t a1, uint64_t a2)
{
  sub_1000E9358((uint64_t **)(a1 + 88), (void **)a2);
  unint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v5 = (void *)a2;
    }
    else {
      uint64_t v5 = *(void **)a2;
    }
    int v6 = 136446210;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Unsuppressing alerts for bundle id is: %{public}s", (uint8_t *)&v6, 0xCu);
  }
}

BOOL sub_1003F32E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_100046F68(a1 + 88, (void **)a2);
  uint64_t v7 = *(NSObject **)(a1 + 40);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if ((void **)(a1 + 96) == v6)
  {
    if (v8)
    {
      if (*(char *)(a2 + 23) >= 0) {
        unsigned int v10 = (void *)a2;
      }
      else {
        unsigned int v10 = *(void **)a2;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Showing alert for bundle id: %{public}s", buf, 0xCu);
    }
    uint64_t v11 = *(void *)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12 && std::__shared_weak_count::lock(v12)) {
      operator new();
    }
    sub_100088B9C();
  }
  if (v8)
  {
    if (*(char *)(a2 + 23) >= 0) {
      OsLogContext v9 = (void *)a2;
    }
    else {
      OsLogContext v9 = *(void **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Alert is suppressed for %s returning", buf, 0xCu);
  }
  return a1 + 96 == (void)v6;
}

void sub_1003F34D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003F34E8(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  int v6 = a3 + 1;
  uint64_t v7 = (void *)*a3;
  if ((void *)*a3 == a3 + 1)
  {
LABEL_38:
    int v23 = a1[5];
    uint64_t v24 = 0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        int v25 = a2;
      }
      else {
        int v25 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string buf = 136446210;
      int v32 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I BundleID: %{public}s is not in foreground", buf, 0xCu);
      return 0;
    }
  }
  else
  {
    BOOL v8 = (void *)a1[6];
    OsLogContext v9 = a1 + 7;
    while (1)
    {
      unsigned int v10 = v8;
      if (v8 != v9)
      {
        int v11 = *((char *)v7 + 55);
        if (v11 >= 0) {
          unint64_t v12 = *((unsigned __int8 *)v7 + 55);
        }
        else {
          unint64_t v12 = v7[5];
        }
        if (v11 >= 0) {
          int v13 = v7 + 4;
        }
        else {
          int v13 = (const void *)v7[4];
        }
        unsigned int v10 = v8;
        while (1)
        {
          int v14 = *((char *)v10 + 55);
          unint64_t v15 = v14 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
          int v16 = v14 >= 0 ? v10 + 4 : (void *)v10[4];
          size_t v17 = v12 >= v15 ? v15 : v12;
          BOOL v18 = !memcmp(v16, v13, v17) && v12 == v15;
          if (v18) {
            break;
          }
          std::string::size_type v19 = (void *)v10[1];
          if (v19)
          {
            do
            {
              int v20 = v19;
              std::string::size_type v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              int v20 = (void *)v10[2];
              BOOL v18 = *v20 == (void)v10;
              unsigned int v10 = v20;
            }
            while (!v18);
          }
          unsigned int v10 = v20;
          if (v20 == v9) {
            goto LABEL_32;
          }
        }
      }
      if (v10 != v9) {
        break;
      }
LABEL_32:
      unint64_t v21 = (void *)v7[1];
      if (v21)
      {
        do
        {
          int v22 = v21;
          unint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v22 = (void *)v7[2];
          BOOL v18 = *v22 == (void)v7;
          uint64_t v7 = v22;
        }
        while (!v18);
      }
      uint64_t v7 = v22;
      if (v22 == v6) {
        goto LABEL_38;
      }
    }
    int v26 = (std::__shared_weak_count *)a4[1];
    uint64_t v29 = *a4;
    int v30 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (*(uint64_t (**)(void *, uint64_t *, uint64_t *))(*a1 + 56))(a1, a2, &v29);
    if (v30) {
      sub_10004D2C8(v30);
    }
  }
  return v24;
}

void sub_1003F3728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F3740(uint64_t a1)
{
  CFStringRef v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 112)) {
      CFStringRef v3 = "true";
    }
    else {
      CFStringRef v3 = "false";
    }
    *(_DWORD *)std::string buf = 136315138;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Is gizmo: %s", buf, 0xCu);
  }
  unint64_t v4 = *(void **)(a1 + 48);
  if (v4 != (void *)(a1 + 56))
  {
    do
    {
      uint64_t v5 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = (const char *)(v4 + 4);
        if (*((char *)v4 + 55) < 0) {
          int v6 = *(const char **)v6;
        }
        *(_DWORD *)std::string buf = 136446210;
        int v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Foreground app: %{public}s", buf, 0xCu);
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != (void *)(a1 + 56));
  }
  unsigned int v10 = *(void **)(a1 + 88);
  if (v10 != (void *)(a1 + 96))
  {
    do
    {
      int v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v12 = (const char *)(v10 + 4);
        if (*((char *)v10 + 55) < 0) {
          unint64_t v12 = *(const char **)v12;
        }
        *(_DWORD *)std::string buf = 136446210;
        int v16 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Suppressed app: %{public}s", buf, 0xCu);
      }
      int v13 = (void *)v10[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (void *)v10[2];
          BOOL v9 = *v14 == (void)v10;
          unsigned int v10 = v14;
        }
        while (!v9);
      }
      unsigned int v10 = v14;
    }
    while (v14 != (void *)(a1 + 96));
  }
}

uint64_t sub_1003F3968(uint64_t a1)
{
  *(void *)a1 = off_1019C7550;
  sub_10005CD2C(a1 + 88, *(char **)(a1 + 96));
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10005CD2C(a1 + 48, *(char **)(a1 + 56));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1003F39DC(uint64_t a1)
{
  *(void *)a1 = off_1019C7550;
  sub_10005CD2C(a1 + 88, *(char **)(a1 + 96));
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10005CD2C(a1 + 48, *(char **)(a1 + 56));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));

  operator delete();
}

void sub_1003F3A70(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1003F3B3C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1003F3C14);
  __cxa_rethrow();
}

void sub_1003F3B64(_Unwind_Exception *a1)
{
}

void sub_1003F3B7C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003F3BB4(uint64_t a1)
{
}

uint64_t sub_1003F3BD0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003F3C14(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *sub_1003F3C40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(v1 + 8);
  CFStringRef v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_10024F798(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_1003F3CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10024F798(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3CE8(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 cellularBehavior];
  if (v3 == (id)1) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = v3 != (id)2;
  }

  return v4;
}

void sub_1003F3D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003F3D3C(uint64_t a1, void *a2, int a3)
{
  BOOL v4 = a3 == 0;
  id v5 = a2;
  uint64_t v6 = v5;
  if (a3 == 2) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 2 * v4;
  }
  id v8 = [v5 cellularBehavior];
  if (v8 != (id)v7) {
    [v6 setCellularBehavior:v7];
  }

  return v8 != (id)v7;
}

void sub_1003F3DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3DBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return 2;
  }
  else {
    return byte_101B13D98;
  }
}

uint64_t sub_1003F3DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, id, uint64_t))(*(void *)a1 + 8))(a1, v3, v4);

  return v5;
}

void sub_1003F3E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003F3E78(uint64_t a1, int a2)
{
  return a2 == 2;
}

void sub_1003F3E88()
{
}

void NetworkListEventHandler::create()
{
}

void sub_1003F3F60(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  if (v2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void *NetworkListEventHandler::NetworkListEventHandler(void *a1, void *a2, dispatch_object_t *a3)
{
  uint64_t v6 = (ctu::OsLogLogger *)(a1 + 1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v12, kCtLoggingSystemName, "man.evt");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v13, &v12);
  ctu::OsLogLogger::OsLogLogger(v6, (const ctu::OsLogLogger *)v13);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = off_1019C7718;
  a1[4] = *a2;
  uint64_t v7 = a2[1];
  a1[5] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, "NetworkListEventHandler");
  BOOL v9 = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  ctu::RestModule::RestModule();
  if (v9) {
    dispatch_release(v9);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  a1[14] = 0;
  a1[13] = 0;
  a1[11] = 0;
  a1[12] = a1 + 13;
  return a1;
}

void sub_1003F40E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (object) {
    dispatch_release(object);
  }
  if (a10) {
    dispatch_release(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  int v20 = (std::__shared_weak_count *)*((void *)v17 + 5);
  if (v20) {
    sub_10004D2C8(v20);
  }
  unint64_t v21 = (std::__shared_weak_count *)*((void *)v17 + 3);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  ctu::OsLogLogger::~OsLogLogger(v18);
  NetworkListEventInterface::~NetworkListEventInterface(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F4174(uint64_t a1)
{
  Registry::createRestModuleOneTimeUseConnection(&v6, *(Registry **)(a1 + 32));
  ctu::RestModule::connect();
  if (v7) {
    sub_10004D2C8(v7);
  }
  int v2 = (void *)(a1 + 64);
  v8[0] = off_1019C7838;
  v8[1] = a1 + 48;
  BOOL v9 = v8;
  if (v8 != (void *)(a1 + 64))
  {
    id v3 = *(void **)(a1 + 88);
    if (v3 == v2)
    {
      v10[1] = a1 + 48;
      v10[2] = 0;
      BOOL v9 = 0;
      v10[0] = off_1019C7838;
      (*(void (**)(uint64_t, void *))(*v2 + 24))(a1 + 64, v8);
      (*(void (**)(void))(**(void **)(a1 + 88) + 32))(*(void *)(a1 + 88));
      *(void *)(a1 + 88) = 0;
      BOOL v9 = v8;
      (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, a1 + 64);
      (*(void (**)(void *))(v10[0] + 32))(v10);
    }
    else
    {
      *(void *)(a1 + 64) = off_1019C7838;
      *(void *)(a1 + 72) = a1 + 48;
      BOOL v9 = v3;
    }
    *(void *)(a1 + 88) = v2;
  }
  sub_1003F468C(v8);
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, a1 + 96);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 3, 0);
}

void sub_1003F43A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F43D0(uint64_t a1)
{
  return ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 48));
}

uint64_t sub_1003F43D8(uint64_t a1, int a2, int a3)
{
  uint64_t v14 = 1;
  uint64_t v15 = a1 + 64;
  uint64_t v4 = (uint64_t **)(a1 + 96);
  if (a2 == 3)
  {
    unsigned int v13 = 1;
    uint64_t v5 = sub_1001DA584((uint64_t **)(a1 + 96), 1, &v13);
    *((_DWORD *)v5 + 8) = a3;
    if (capabilities::ct::supportsGemini((capabilities::ct *)v5))
    {
      unsigned int v13 = 2;
      *((_DWORD *)sub_1001DA584((uint64_t **)(v15 + 32), 2, &v13) + 8) = a3;
    }
  }
  else
  {
    id v8 = (uint64_t **)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 104);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v7;
          int v10 = *(_DWORD *)(v7 + 28);
          if (v10 <= a2) {
            break;
          }
          uint64_t v7 = *(void *)v9;
          id v8 = (uint64_t **)v9;
          if (!*(void *)v9) {
            goto LABEL_12;
          }
        }
        if (v10 >= a2) {
          break;
        }
        uint64_t v7 = *(void *)(v9 + 8);
        if (!v7)
        {
          id v8 = (uint64_t **)(v9 + 8);
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v9 = a1 + 104;
LABEL_12:
      char v11 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v11 + 7) = a2;
      *((_DWORD *)v11 + 8) = 0;
      sub_100046C38(v4, v9, v8, v11);
      uint64_t v9 = (uint64_t)v11;
    }
    *(_DWORD *)(v9 + 32) = a3;
  }
  return sub_1003F4CE0((uint64_t)&v14);
}

void sub_1003F44E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1003F4CE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F4504(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v2 = a1 + 104;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      id v8 = (uint64_t *)v3;
    }
    else {
      id v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 28) <= a2) {
    return *(unsigned int *)(v5 + 32);
  }
  else {
    return 0;
  }
}

void sub_1003F4550(uint64_t a1)
{
  *(void *)a1 = off_1019C7718;
  uint64_t v2 = (void *)(a1 + 64);
  sub_1000346F8(a1 + 96, *(void **)(a1 + 104));
  sub_1003F468C(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));

  NetworkListEventInterface::~NetworkListEventInterface((NetworkListEventInterface *)a1);
}

void sub_1003F45E4(uint64_t a1)
{
  *(void *)a1 = off_1019C7718;
  uint64_t v2 = (void *)(a1 + 64);
  sub_1000346F8(a1 + 96, *(void **)(a1 + 104));
  sub_1003F468C(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));
  NetworkListEventInterface::~NetworkListEventInterface((NetworkListEventInterface *)a1);

  operator delete();
}

void *sub_1003F468C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003F4710(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1003F4790(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F47CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1003F4804(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1003F4834(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1003F487C()
{
}

void *sub_1003F4890(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019C7838;
  result[1] = v3;
  return result;
}

uint64_t sub_1003F48D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C7838;
  a2[1] = v2;
  return result;
}

void sub_1003F4904(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  BOOL v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v29 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v29 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v29 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      int v11 = *((_DWORD *)v6 + 7);
      uint64_t v12 = subscriber::asString();
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v27, (ctu::rest::detail *)v11, v12, v13);
      std::string __p = &v29;
      int v23 = "first";
      sub_100035E70((uint64_t)&__p, &v27, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      int v14 = *((_DWORD *)v6 + 8);
      uint64_t v15 = asString();
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v25, (ctu::rest::detail *)v14, v15, v16);
      std::string __p = &v29;
      int v23 = "second";
      sub_100035E70((uint64_t)&__p, &v25, &v26);
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_release(v25);
      xpc_object_t v25 = 0;
      xpc_object_t v17 = v29;
      if (v29) {
        xpc_retain(v29);
      }
      else {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_release(v29);
      xpc_array_append_value(v4, v17);
      xpc_release(v17);
      BOOL v18 = (void *)v6[1];
      if (v18)
      {
        do
        {
          std::string::size_type v19 = v18;
          BOOL v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          std::string::size_type v19 = (void *)v6[2];
          BOOL v20 = *v19 == (void)v6;
          int v6 = v19;
        }
        while (!v20);
      }
      int v6 = v19;
    }
    while (v19 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v21 = v4;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/network_attach_states");
  xpc_object_t v29 = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t v29 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v29);
  xpc_object_t v29 = 0;
  if (v24 < 0) {
    operator delete(__p);
  }
  xpc_release(v21);
}

void sub_1003F4BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F4C94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003F4CD4()
{
}

uint64_t sub_1003F4CE0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v2 + 32);
    }
  }
  return a1;
}

uint64_t sub_1003F4D44(uint64_t a1)
{
  return *(void *)a1;
}

const void **sub_1003F4D4C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_1003F4D80(void *a1, void *a2)
{
  xpc_object_t v4 = a1 + 1;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v13, kCtLoggingSystemName, "lasd.query");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  int v6 = dispatch_queue_create_with_target_V2("LASDQueryService", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v6);
  *xpc_object_t v4 = 0;
  v4[1] = 0;
  a1[3] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    a1[4] = 0;
    dispatch_release(v6);
  }
  else
  {
    a1[4] = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v14, &v13);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v14);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v13);
  *a1 = off_1019C78C8;
  a1[6] = *a2;
  uint64_t v7 = a2[1];
  a1[7] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, "LASDQueryService");
  xpc_object_t v8 = a1[3];
  xpc_object_t v10 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  ctu::RestModule::RestModule();
  if (v10) {
    dispatch_release(v10);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_1003F4F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (object) {
    dispatch_release(object);
  }
  if (a10) {
    dispatch_release(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_object_t v21 = (std::__shared_weak_count *)*((void *)v17 + 7);
  if (v21) {
    sub_10004D2C8(v21);
  }
  ctu::OsLogLogger::~OsLogLogger(v19);
  sub_100087E88(v18);
  LASDQueryInterface::~LASDQueryInterface(v17);
  _Unwind_Resume(a1);
}

void sub_1003F4FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1000DFC90((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003F50E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1003F50FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1000DFC90((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003F5234(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1003F524C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 24) && *(void *)(a3 + 24))
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v6 = 2;
    sub_1003F5E60((uint64_t)v12, a2);
    sub_1000DFC90((uint64_t)v13, a3);
    xpc_object_t v11 = 0;
    sub_10014DD94((char *)&v6, &v11);
    sub_100058DB0(&__p, "/cc/requests/lasd_search");
    xpc_object_t object = v11;
    xpc_object_t v11 = xpc_null_create();
    sub_1003F5EF8((uint64_t)buf, (uint64_t)v12);
    sub_100023950((uint64_t)v15, (uint64_t)v13);
    xpc_object_t v17 = 0;
    uint64_t v4 = operator new(0x48uLL);
    *uint64_t v4 = off_1019C7AB0;
    sub_1003F5EF8((uint64_t)(v4 + 1), (uint64_t)buf);
    sub_100023950((uint64_t)(v4 + 5), (uint64_t)v15);
    xpc_object_t v17 = v4;
    ctu::RestModule::sendRequest();
    sub_10003F600(v16);
    sub_100060644(v15);
    sub_1003F57E4(buf);
    xpc_release(object);
    xpc_object_t object = 0;
    if (v10 < 0) {
      operator delete(__p);
    }
    xpc_release(v11);
    sub_100060644(v13);
    sub_1003F57E4(v12);
    sub_100057D78(v7);
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid parameters", buf, 2u);
    }
  }
}

void sub_1003F543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F54E4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003F55C4(uint64_t a1, int a2, ServiceStage *this)
{
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003F56D8(void *a1)
{
  *a1 = off_1019C78C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);

  LASDQueryInterface::~LASDQueryInterface((LASDQueryInterface *)a1);
}

void sub_1003F5754(void *a1)
{
  *a1 = off_1019C78C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);
  LASDQueryInterface::~LASDQueryInterface((LASDQueryInterface *)a1);

  operator delete();
}

void *sub_1003F57E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1003F5868(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *v1;
  v7[0] = off_1019C79A0;
  void v7[3] = v7;
  sub_1000DFC90((uint64_t)v6, (uint64_t)(v1 + 1));
  sub_1003F524C(v2, (uint64_t)v7, (uint64_t)v6);
  sub_100060644(v6);
  sub_1003F57E4(v7);
  sub_1003F5954((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1003F5920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, void);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_100060644((uint64_t *)va2);
  sub_1003F57E4((uint64_t *)va3);
  sub_1003F5954((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003F5954(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void sub_1003F59A8()
{
}

void *sub_1003F59BC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1019C79A0;
  return result;
}

void sub_1003F59F4(uint64_t a1, void *a2)
{
  *a2 = off_1019C79A0;
}

BOOL sub_1003F5A1C(uint64_t a1, const void **a2)
{
  CFDictionaryRef v6 = (const __CFDictionary *)*a2;
  CFDictionaryRef v2 = v6;
  *a2 = 0;
  if (v2) {
    uint64_t v3 = sub_100080778;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    BOOL v4 = CFDictionaryContainsKey(v2, @"GSM") != 0;
  }
  else {
    BOOL v4 = 0;
  }
  sub_100057D78((const void **)&v6);
  return v4;
}

void sub_1003F5A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5AA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003F5AE4()
{
}

uint64_t *sub_1003F5AF0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  BOOL v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *v1;
  v7[0] = off_1019C7A30;
  void v7[3] = v7;
  sub_1000DFC90((uint64_t)v6, (uint64_t)(v1 + 1));
  sub_1003F524C(v2, (uint64_t)v7, (uint64_t)v6);
  sub_100060644(v6);
  sub_1003F57E4(v7);
  sub_1003F5954((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1003F5BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, void);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_100060644((uint64_t *)va2);
  sub_1003F57E4((uint64_t *)va3);
  sub_1003F5954((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1003F5BE0()
{
}

void *sub_1003F5BF4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1019C7A30;
  return result;
}

void sub_1003F5C2C(uint64_t a1, void *a2)
{
  *a2 = off_1019C7A30;
}

uint64_t sub_1003F5C54(uint64_t a1, CFDictionaryRef *a2)
{
  CFDictionaryRef theDict = *a2;
  CFDictionaryRef v2 = theDict;
  *a2 = 0;
  if (v2) {
    uint64_t v3 = sub_100080778;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 && CFDictionaryContainsKey(v2, @"GSM"))
  {
    uint64_t v4 = 0;
    v15[0] = @"UMTS";
    v15[1] = @"C2K";
    v15[2] = @"1X";
    v15[3] = @"EVDO";
    v15[4] = @"LTE";
    void v15[5] = @"TDSCDMA";
    v15[6] = @"NR";
    while (1)
    {
      uint64_t v5 = (const void *)v15[v4];
      CFArrayRef v14 = 0;
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, v5);
      CFArrayRef v7 = Value;
      if (Value && (CFTypeID v8 = CFGetTypeID(Value), v8 == CFArrayGetTypeID()))
      {
        CFArrayRef v14 = v7;
        CFRetain(v7);
        CFArrayRef v9 = v14;
      }
      else
      {
        CFArrayRef v9 = 0;
        CFArrayRef v14 = 0;
      }
      uint64_t v10 = v9 ? sub_100083F10 : 0;
      if (v10 && CFArrayGetCount(v9) > 0) {
        break;
      }
      sub_100044D00((const void **)&v14);
      if (++v4 == 7)
      {
        uint64_t v11 = 1;
        goto LABEL_20;
      }
    }
    sub_100044D00((const void **)&v14);
  }
  uint64_t v11 = 0;
LABEL_20:
  sub_100057D78((const void **)&theDict);
  return v11;
}

void sub_1003F5DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_1003F5E14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003F5E54()
{
}

uint64_t sub_1003F5E60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003F5EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_1003F5F78(void *a1)
{
  *a1 = off_1019C7AB0;
  sub_100060644(a1 + 5);
  sub_1003F57E4(a1 + 1);
  return a1;
}

void sub_1003F5FC8(void *a1)
{
  *a1 = off_1019C7AB0;
  sub_100060644(a1 + 5);
  sub_1003F57E4(a1 + 1);

  operator delete();
}

void *sub_1003F6038(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  CFDictionaryRef v2 = operator new(0x48uLL);
  *CFDictionaryRef v2 = off_1019C7AB0;
  sub_1003F641C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003F608C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F60A0(uint64_t a1, void *a2)
{
  *a2 = off_1019C7AB0;
  return sub_1003F641C((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1003F60CC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  sub_100060644((void *)(a1 + 40));

  return sub_1003F57E4(v1);
}

void sub_1003F6108(void *a1)
{
  CFDictionaryRef v2 = a1 + 1;
  sub_100060644(a1 + 5);
  sub_1003F57E4(v2);

  operator delete(a1);
}

void sub_1003F6150(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  memset(v13, 0, sizeof(v13));
  sub_10014E648((uint64_t)v13, &object);
  int v10 = v13[0];
  long long v3 = *(_OWORD *)((char *)v13 + 8);
  memset((char *)v13 + 8, 0, 32);
  v11[0] = v3;
  v11[1] = *(_OWORD *)((char *)&v13[1] + 8);
  int v12 = DWORD2(v13[2]);
  if (LODWORD(v13[0]) == 1)
  {
    BOOL v18 = 0;
    uint64_t v4 = (const void *)v3;
    CFArrayRef v14 = (const void *)v3;
    if ((void)v3)
    {
      CFRetain((CFTypeRef)v3);
      int v16 = v4;
      CFRetain(v4);
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v15 = 0;
    xpc_object_t v17 = 0;
    sub_10004EFE4(&v17, &v16);
    if (v17) {
      uint64_t v5 = sub_100080778;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v5) {
      sub_100058140((const void **)&v15, (const void **)&v17);
    }
    sub_100057D78((const void **)&v17);
    CFDictionaryRef v6 = v15;
    BOOL v18 = v15;
    uint64_t v15 = 0;
    sub_100057D78((const void **)&v15);
    sub_1000577C4(&v16);
    sub_1000577C4(&v14);
    xpc_object_t v17 = v6;
    if (v6) {
      CFRetain(v6);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_10007B600();
    }
    char v8 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)v7 + 48))(v7, &v17);
    sub_1000607A8(a1 + 40, v8);
    sub_100057D78((const void **)&v17);
    sub_100057D78((const void **)&v18);
  }
  else
  {
    sub_1000607A8(a1 + 40, 0);
  }
  BOOL v18 = (void **)v11 + 1;
  sub_100047F64(&v18);
  sub_1000577C4((const void **)v11);
  BOOL v18 = (void **)&v13[1];
  sub_100047F64(&v18);
  sub_1000577C4((const void **)v13 + 1);
  xpc_release(object);
}

void sub_1003F6348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  sub_100057D78((const void **)(v14 - 80));
  sub_1000577C4((const void **)(v14 - 72));
  sub_1000577C4((const void **)(v14 - 88));
  *(void *)(v14 - 56) = v13;
  sub_100047F64((void ***)(v14 - 56));
  sub_1000577C4(v11);
  *(void *)(v14 - 56) = v12;
  sub_100047F64((void ***)(v14 - 56));
  sub_1000577C4(v10);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F63D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003F6410()
{
}

uint64_t sub_1003F641C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5E60(a1, a2);
  sub_1000DFC90(v4 + 32, a2 + 32);
  return a1;
}

void sub_1003F6454(_Unwind_Exception *a1)
{
  sub_1003F57E4(v1);
  _Unwind_Resume(a1);
}

void sub_1003F6468(uint64_t a1)
{
  Registry::createRestModuleOneTimeUseConnection(&v1, *(Registry **)(**(void **)a1 + 48));
  ctu::RestModule::connect();
  if (v2) {
    sub_10004D2C8(v2);
  }
  operator delete();
}

void sub_1003F64DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  operator delete();
}

uint64_t *sub_1003F651C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v3 = a1;
  uint64_t v4 = v1;
  ctu::RestModule::disconnect((ctu::RestModule *)(*(void *)v1 + 64));
  sub_100088C88(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_1003F6564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1003F6580()
{
}

void sub_1003F65F4()
{
}

void sub_1003F66B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F66FC(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_100F7A32C();
}

void sub_1003F6774(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F678C(dispatch_object_t *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if (*(unsigned char *)(*(void *)a3 + 8) || !a2)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    xpc_object_t object = *a1;
    if (*a1) {
      dispatch_retain(*a1);
    }
    sd::DCNManager::create();
    *(_OWORD *)a4 = v6;
    if (object) {
      dispatch_release(object);
    }
  }
}

void sub_1003F6820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F6838(Registry **a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  void (***v13)(unint64_t *__return_ptr, void, uint64_t);
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  atomic_ullong *p_shared_owners;
  unint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  long long v22;
  long long v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;

  ServiceMap = (std::mutex *)Registry::getServiceMap(a1[1]);
  uint64_t v7 = ServiceMap;
  if ((v8 & 0x8000000000000000) != 0)
  {
    CFArrayRef v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  int v28 = v8;
  uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, &v28);
  if (!v12)
  {
    std::mutex::unlock(v7);
    goto LABEL_9;
  }
  uint64_t v13 = (void (***)(unint64_t *__return_ptr, void, uint64_t))v12[3];
  uint64_t v14 = (std::__shared_weak_count *)v12[4];
  if (!v14)
  {
    std::mutex::unlock(v7);
    if (v13) {
      goto LABEL_11;
    }
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v15 = (std::__shared_weak_count *)v12[4];
  p_shared_owners = &v14->__shared_owners_;
  atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v7);
  atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
  uint64_t v14 = v15;
  sub_10004D2C8(v15);
  if (!v13)
  {
    *a3 = 0;
    a3[1] = 0;
LABEL_22:
    sub_10004D2C8(v14);
    return;
  }
LABEL_11:
  int v28 = 0;
  xpc_object_t v29 = 0;
  (**v13)(&v28, v13, a2);
  xpc_object_t v17 = v28;
  if (v28)
  {
    BOOL v18 = operator new(0x28uLL);
    v18[1] = 0;
    v18[2] = 0;
    void *v18 = off_1019C7BD8;
    std::string::size_type v19 = *(_DWORD *)(v17 + 56);
    *((unsigned char *)v18 + 24) = *(unsigned char *)(v17 + 49);
    *((_DWORD *)v18 + 7) = v19;
    *((unsigned char *)v18 + 32) = 0;
    xpc_object_t v26 = (char *)(v18 + 3);
    xpc_object_t v27 = v18;
    char v24 = 0;
    xpc_object_t v25 = 0;
    sd::IMSSubscriberConfig::create();
    int v23 = v22;
    int v22 = 0uLL;
    (*((void (**)(uint64_t *__return_ptr, Registry **))*a1 + 15))(&v20, a1);
    sd::IMSSubscriberModel::create();
    if (v21) {
      sub_10004D2C8(v21);
    }
    if (*((void *)&v23 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v23 + 1));
    }
    if (*((void *)&v22 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v22 + 1));
    }
    sub_1003F6580();
  }
  *a3 = 0;
  a3[1] = 0;
  if (v29) {
    sub_10004D2C8(v29);
  }
  if (v14) {
    goto LABEL_22;
  }
}

void sub_1003F6B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a22) {
    sub_10004D2C8(a22);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  xpc_object_t v27 = *(std::__shared_weak_count **)(v25 - 88);
  if (v27) {
    sub_10004D2C8(v27);
  }
  if (v24) {
    sub_10004D2C8(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F6C28(Registry **a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  void (***v13)(unint64_t *__return_ptr, void, uint64_t);
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  atomic_ullong *p_shared_owners;
  unint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  long long v22;
  long long v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;

  ServiceMap = (std::mutex *)Registry::getServiceMap(a1[1]);
  uint64_t v7 = ServiceMap;
  if ((v8 & 0x8000000000000000) != 0)
  {
    CFArrayRef v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  int v28 = v8;
  uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, &v28);
  if (!v12)
  {
    std::mutex::unlock(v7);
    goto LABEL_9;
  }
  uint64_t v13 = (void (***)(unint64_t *__return_ptr, void, uint64_t))v12[3];
  uint64_t v14 = (std::__shared_weak_count *)v12[4];
  if (!v14)
  {
    std::mutex::unlock(v7);
    if (v13) {
      goto LABEL_11;
    }
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v15 = (std::__shared_weak_count *)v12[4];
  p_shared_owners = &v14->__shared_owners_;
  atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v7);
  atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
  uint64_t v14 = v15;
  sub_10004D2C8(v15);
  if (!v13)
  {
    *a3 = 0;
    a3[1] = 0;
LABEL_22:
    sub_10004D2C8(v14);
    return;
  }
LABEL_11:
  int v28 = 0;
  xpc_object_t v29 = 0;
  (**v13)(&v28, v13, a2);
  xpc_object_t v17 = v28;
  if (v28)
  {
    BOOL v18 = operator new(0x28uLL);
    v18[1] = 0;
    v18[2] = 0;
    void *v18 = off_1019C7BD8;
    std::string::size_type v19 = *(_DWORD *)(v17 + 56);
    *((unsigned char *)v18 + 24) = *(unsigned char *)(v17 + 49);
    *((_DWORD *)v18 + 7) = v19;
    *((unsigned char *)v18 + 32) = 1;
    xpc_object_t v26 = (char *)(v18 + 3);
    xpc_object_t v27 = v18;
    char v24 = 0;
    uint64_t v25 = 0;
    sd::IMSSubscriberConfig::create();
    int v23 = v22;
    int v22 = 0uLL;
    (*((void (**)(uint64_t *__return_ptr, Registry **))*a1 + 15))(&v20, a1);
    sd::IMSSubscriberModel::create();
    if (v21) {
      sub_10004D2C8(v21);
    }
    if (*((void *)&v23 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v23 + 1));
    }
    if (*((void *)&v22 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v22 + 1));
    }
    sub_1003F6580();
  }
  *a3 = 0;
  a3[1] = 0;
  if (v29) {
    sub_10004D2C8(v29);
  }
  if (v14) {
    goto LABEL_22;
  }
}

void sub_1003F6F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a22) {
    sub_10004D2C8(a22);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  xpc_object_t v27 = *(std::__shared_weak_count **)(v25 - 88);
  if (v27) {
    sub_10004D2C8(v27);
  }
  if (v24) {
    sub_10004D2C8(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F701C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 8));
  long long v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    unint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v7;
  unsigned int v11 = sub_10004D37C(&v6[1].__m_.__sig, &v15);
  if (!v11)
  {
    uint64_t v12 = 0;
LABEL_9:
    std::mutex::unlock(v6);
    uint64_t v13 = 0;
    char v14 = 1;
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v12 = v11[3];
  uint64_t v13 = (std::__shared_weak_count *)v11[4];
  if (!v13) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v13);
  char v14 = 0;
  if (v12) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a2);
LABEL_11:
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  if (!v12)
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1003F7144(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F7160(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 1:
      sub_100B84AC8(&v3);
    case 2:
      uint64_t v2 = 0;
      sub_1003F6580();
    case 3:
      *a2 = 0;
      a2[1] = 0;
      return;
    default:
      sub_100B2792C(&v3);
  }
}

void sub_1003F72D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F732C(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void (***v15)(unint64_t *__return_ptr, void, uint64_t);
  queue v16;
  NSObject *v17;
  dispatch_object_t object;
  unint64_t v19;
  std::__shared_weak_count *v20;

  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 8));
  unint64_t v8 = ServiceMap;
  if ((v9 & 0x8000000000000000) != 0)
  {
    unsigned int v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      unint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  std::string::size_type v19 = v9;
  uint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, &v19);
  if (!v13)
  {
    std::mutex::unlock(v8);
    goto LABEL_9;
  }
  unint64_t v15 = (void (***)(unint64_t *__return_ptr, void, uint64_t))v13[3];
  char v14 = (std::__shared_weak_count *)v13[4];
  if (!v14)
  {
    std::mutex::unlock(v8);
    if (v15) {
      goto LABEL_11;
    }
LABEL_9:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  if (!v15)
  {
    *a4 = 0;
    a4[1] = 0;
LABEL_20:
    sub_10004D2C8(v14);
    return;
  }
LABEL_11:
  std::string::size_type v19 = 0;
  BOOL v20 = 0;
  (**v15)(&v19, v15, a3);
  if (v19)
  {
    xpc_object_t v17 = *a2;
    xpc_object_t object = v17;
    if (v17) {
      dispatch_retain(v17);
    }
    ims::CreateImsClient((ims *)&object, v16);
    if (object) {
      dispatch_release(object);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
  if (v14) {
    goto LABEL_20;
  }
}

void sub_1003F749C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F74D8(uint64_t a1, queue a2)
{
  uint64_t v2 = *(NSObject **)a2.fObj.fObj;
  dispatch_object_t object = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  ims::CreateImsEmergencyClient((ims *)&object, a2);
  if (object) {
    dispatch_release(object);
  }
}

void sub_1003F7528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

double sub_1003F7540@<D0>(CCPreferences *a1@<X0>, _OWORD *a2@<X8>)
{
  CCPreferences::create((uint64_t *)&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void sub_1003F7578(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_10022673C();
}

void sub_1003F75E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_1003F7600@<D0>(_OWORD *a1@<X8>)
{
  sd::LLTrafficManager::create();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void sub_1003F763C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  Registry::getNotificationSenderFactory(&v3, *(Registry **)(a1 + 8));
  (*(void (**)(long long *__return_ptr))(*(void *)v3 + 48))(&v5);
  *a2 = v5;
  long long v5 = 0uLL;
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1003F76B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003F76CC@<X0>(void *a1@<X8>)
{
  double result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = off_1019C7C28;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void sub_1003F7738(sd::IMSSubscriberFactoryInterface *this)
{
  *(void *)this = off_1019C7B30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  sd::IMSSubscriberFactoryInterface::~IMSSubscriberFactoryInterface(this);
}

void sub_1003F7794(sd::IMSSubscriberFactoryInterface *this)
{
  *(void *)this = off_1019C7B30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sd::IMSSubscriberFactoryInterface::~IMSSubscriberFactoryInterface(this);

  operator delete();
}

void sub_1003F7804(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003F7824(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003F7880(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003F78A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C7C28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1003F78F4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

const char *sub_1003F791C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return "<unknown>";
  }
  double result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

BOOL sub_1003F7948(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a1 + 8);
  if (v2) {
    std::string::push_back((std::string *)(a2 + 8), *v2 | 0x80);
  }
  return v2 != 0;
}

void sub_1003F7984()
{
}

void sub_1003F79F0()
{
}

void *sub_1003F7A14(void *a1, void *a2)
{
  long long v4 = a1 + 1;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v17, kCtLoggingSystemName, "cb.sos");
  long long v5 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  long long v6 = dispatch_queue_create("CarrierBundleSOSHandler", v5);
  *long long v4 = 0;
  v4[1] = 0;
  a1[3] = v6;
  if (v6)
  {
    unint64_t v7 = v6;
    dispatch_retain(v6);
    a1[4] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[4] = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v15, &v17);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v15);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v17);
  v16[0] = off_101999E18;
  v16[1] = sub_1003F7E4C;
  void v16[3] = v16;
  a1[6] = 0;
  if ((capabilities::ct::supportsGemini(v8) & 1) == 0) {
    operator new();
  }
  if (!a1[6]) {
    operator new();
  }
  sub_10008863C(v16);
  *a1 = off_1019C7CA0;
  a1[7] = *a2;
  uint64_t v9 = a2[1];
  a1[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, "CarrierBundleSOSHandler");
  unsigned int v10 = a1[3];
  unsigned int v12 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::RestModule::RestModule();
  if (v12) {
    dispatch_release(v12);
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  sub_1000FE9CC(a1 + 11, (uint64_t)&rest::kDefaultBundles);
  return a1;
}

void sub_1003F7D08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

const char *sub_1003F7E4C(int a1)
{
  uint64_t v1 = "cb.sos.?";
  if (a1 == 2) {
    uint64_t v1 = "cb.sos.2";
  }
  if (a1 == 1) {
    return "cb.sos.1";
  }
  else {
    return v1;
  }
}

void sub_1003F7E78(uint64_t a1)
{
  *(void *)a1 = off_1019C7CA0;
  sub_100087F94(a1 + 88, *(void **)(a1 + 96));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));

  CarrierBundleSOSInterface::~CarrierBundleSOSInterface((CarrierBundleSOSInterface *)a1);
}

void sub_1003F7F30(uint64_t a1)
{
  sub_1003F7E78(a1);

  operator delete();
}

void sub_1003F7F68(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003F8068(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003F8148(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1003F8248(uint64_t a1)
{
  uint64_t result = rest::operator==();
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 88);
    if (v3 != (void *)(a1 + 96))
    {
      while (1)
      {
        uint64_t v4 = *((unsigned int *)v3 + 8);
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v4);
        if (*((unsigned char *)v3 + 40)) {
          break;
        }
LABEL_96:
        xpc_object_t v48 = (void *)v3[1];
        if (v48)
        {
          do
          {
            xpc_object_t v49 = v48;
            xpc_object_t v48 = (void *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            xpc_object_t v49 = (void *)v3[2];
            BOOL v50 = *v49 == (void)v3;
            uint64_t v3 = v49;
          }
          while (!v50);
        }
        uint64_t v3 = v49;
        if (v49 == (void *)(a1 + 96)) {
          return result;
        }
      }
      long long v5 = (NSObject **)result;
      long long v6 = *(NSObject **)result;
      if (os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = asString();
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Carrier bundle changed (%s), evaluating SOS display criteria", (uint8_t *)&buf, 0xCu);
      }
      CFTypeRef cf = 0;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v4);
      CFDictionaryRef theDict = 0;
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
      uint64_t v9 = ServiceMap;
      if (v10 < 0)
      {
        uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v12 = 5381;
        do
        {
          uint64_t v10 = v12;
          unsigned int v13 = *v11++;
          uint64_t v12 = (33 * v12) ^ v13;
        }
        while (v13);
      }
      std::mutex::lock(ServiceMap);
      *(void *)&long long buf = v10;
      char v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)&buf);
      if (v14)
      {
        uint64_t v15 = v14[3];
        int v16 = (std::__shared_weak_count *)v14[4];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v9);
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v16);
          char v17 = 0;
LABEL_14:
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v15 + 96))(&Value, v15, v4, 1, @"DisplaySOSForEmergencyOnly", 0, 0);
          sub_10004EFE4(&theDict, (CFTypeRef *)&Value);
          sub_1000577C4((const void **)&Value);
          if ((v17 & 1) == 0) {
            sub_10004D2C8(v16);
          }
          if (theDict) {
            BOOL v18 = sub_100080778;
          }
          else {
            BOOL v18 = 0;
          }
          if (v18)
          {
            *(void *)&long long buf = 0;
            CFArrayRef Value = (void *)CFDictionaryGetValue(theDict, @"Countries");
            std::string::size_type v19 = (const void **)sub_100044D6C(&buf, (CFTypeRef *)&Value);
            BOOL v20 = (const void *)buf;
            if ((void)buf) {
              xpc_object_t v21 = sub_100083F10;
            }
            else {
              xpc_object_t v21 = 0;
            }
            if (v21) {
              *(void *)&long long buf = 0;
            }
            else {
              BOOL v20 = 0;
            }
            CFTypeRef cf = v20;
            sub_100044D00(v19);
          }
          else
          {
            CFTypeRef cf = 0;
          }
          sub_100057D78((const void **)&theDict);
          CFArrayRef v22 = (const __CFArray *)cf;
          if (cf) {
            int v23 = sub_100083F10;
          }
          else {
            int v23 = 0;
          }
          if (v23)
          {
            char v24 = *v5;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              CFIndex Count = CFArrayGetCount(v22);
              LODWORD(buf) = 134217984;
              *(void *)((char *)&buf + 4) = Count;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I Got %ld countries from carrier bundle", (uint8_t *)&buf, 0xCu);
              CFArrayRef v22 = (const __CFArray *)cf;
            }
            CFArrayRef Value = v22;
            if (v22) {
              CFRetain(v22);
            }
            sub_1003F8BF8((CFArrayRef *)&Value);
            sub_100044D00((const void **)&Value);
            xpc_object_t v26 = *(Registry **)(a1 + 56);
            CFTypeRef v55 = 0;
            Registry::getMobileHelper((uint64_t *)&buf, v26);
            (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)buf + 16))(&theDict);
            sub_100044D6C(&v55, (CFTypeRef *)&theDict);
            sub_1000577C4((const void **)&theDict);
            if (*((void *)&buf + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
            }
            CFArrayRef v27 = (const __CFArray *)v55;
            if (v55) {
              int v28 = sub_100083F10;
            }
            else {
              int v28 = 0;
            }
            if (v28)
            {
              xpc_object_t v29 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                CFIndex v30 = CFArrayGetCount(v27);
                LODWORD(buf) = 134217984;
                *(void *)((char *)&buf + 4) = v30;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I Got %ld countries from SpringBoard preferences", (uint8_t *)&buf, 0xCu);
                CFArrayRef v27 = (const __CFArray *)v55;
              }
              CFDictionaryRef theDict = v27;
              if (v27) {
                CFRetain(v27);
              }
              sub_1003F8BF8(&theDict);
              sub_100044D00((const void **)&theDict);
            }
            CFArrayRef v53 = (CFArrayRef)cf;
            CFArrayRef v54 = 0;
            if (cf) {
              CFRetain(cf);
            }
            CFArrayRef v31 = (const __CFArray *)v55;
            CFArrayRef theArray = (CFArrayRef)v55;
            if (v55)
            {
              CFRetain(v55);
              CFArrayRef v31 = theArray;
            }
            if (v31) {
              int v32 = sub_100083F10;
            }
            else {
              int v32 = 0;
            }
            if (v32 && CFArrayGetCount(v31))
            {
              *(void *)&long long buf = CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
              CFIndex v33 = CFArrayGetCount(v53);
              if (v33 >= 1)
              {
                for (CFIndex i = 0; i != v33; ++i)
                {
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v53, i);
                  BOOL v36 = ValueAtIndex;
                  if (ValueAtIndex)
                  {
                    CFTypeID v37 = CFGetTypeID(ValueAtIndex);
                    if (v37 != CFStringGetTypeID()) {
                      BOOL v36 = 0;
                    }
                  }
                  v60.length = CFArrayGetCount(theArray);
                  v60.location = 0;
                  if (!CFArrayContainsValue(theArray, v60, v36)) {
                    CFArrayAppendValue((CFMutableArrayRef)buf, v36);
                  }
                }
              }
              if (CFArrayGetCount((CFArrayRef)buf) >= 1)
              {
                v61.length = CFArrayGetCount(theArray);
                v61.location = 0;
                CFArrayAppendArray((CFMutableArrayRef)buf, theArray, v61);
              }
              sub_100044D6C(&v54, (CFTypeRef *)&buf);
              sub_1000440D4((const void **)&buf);
            }
            else
            {
              CFArrayRef v38 = v53;
              CFArrayRef v53 = 0;
              CFArrayRef v54 = v38;
            }
            sub_100044D00((const void **)&theArray);
            sub_100044D00((const void **)&v53);
            if (v54) {
              xpc_object_t v39 = sub_100083F10;
            }
            else {
              xpc_object_t v39 = 0;
            }
            if (v39 && CFArrayGetCount(v54))
            {
              xpc_object_t v40 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                CFIndex v41 = CFArrayGetCount(v54);
                LODWORD(buf) = 134217984;
                *(void *)((char *)&buf + 4) = v41;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I Saving %ld countries to SpringBoard preferences", (uint8_t *)&buf, 0xCu);
              }
              *(void *)&long long buf = v54;
              if (v54) {
                CFRetain(v54);
              }
              sub_1003F8BF8((CFArrayRef *)&buf);
              sub_100044D00((const void **)&buf);
              CFArrayRef v51 = v54;
              if (v54) {
                CFRetain(v54);
              }
              sub_1003F8E58(*(Registry **)(a1 + 56), &v51);
              sub_100044D00((const void **)&v51);
              persistentSaveValue(@"com.apple.commcenter", @"CCCountryCodesShowingEmergencyOnly", v55);
            }
            else
            {
              int v42 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I No countries to save", (uint8_t *)&buf, 2u);
              }
            }
            sub_100044D00((const void **)&v54);
            p_CFDictionaryRef theDict = &v55;
          }
          else
          {
            CFDictionaryRef theDict = 0;
            persistentCopyValue((uint64_t *)&buf, @"com.apple.commcenter", @"CCCountryCodesShowingEmergencyOnly", 0);
            sub_100044D6C(&theDict, (CFTypeRef *)&buf);
            sub_1000577C4((const void **)&buf);
            CFArrayRef v44 = theDict;
            if (theDict) {
              uint64_t v45 = sub_100083F10;
            }
            else {
              uint64_t v45 = 0;
            }
            if (v45)
            {
              unsigned int v46 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                CFIndex v47 = CFArrayGetCount(v44);
                LODWORD(buf) = 134217984;
                *(void *)((char *)&buf + 4) = v47;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I Restoring %ld countries", (uint8_t *)&buf, 0xCu);
                CFArrayRef v44 = theDict;
              }
              *(void *)&long long buf = v44;
              if (v44) {
                CFRetain(v44);
              }
              sub_1003F8BF8((CFArrayRef *)&buf);
              sub_100044D00((const void **)&buf);
              CFArrayRef Value = theDict;
              if (theDict) {
                CFRetain(theDict);
              }
              sub_1003F8E58(*(Registry **)(a1 + 56), &Value);
              sub_100044D00((const void **)&Value);
              persistentSaveValue(@"com.apple.commcenter", @"CCCountryCodesShowingEmergencyOnly", 0);
            }
            p_CFDictionaryRef theDict = (const void **)&theDict;
          }
          sub_100044D00(p_theDict);
          uint64_t result = (uint64_t)sub_100044D00(&cf);
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      std::mutex::unlock(v9);
      int v16 = 0;
      char v17 = 1;
      goto LABEL_14;
    }
  }
  return result;
}

void sub_1003F8A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va1, a14);
  va_start(va, a14);
  uint64_t v15 = va_arg(va1, const void *);
  uint64_t v17 = va_arg(va1, void);
  sub_100044D00((const void **)va1);
  sub_100044D00((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F8BF8(CFArrayRef *a1)
{
  CFIndex Count = CFArrayGetCount(*a1);
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_10004DE24((uint64_t)v10);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*a1, i);
      if (ValueAtIndex)
      {
        CFGetTypeID(ValueAtIndex);
        CFStringGetTypeID();
      }
      if (i) {
        sub_10004B96C(v10, (uint64_t)", ", 2);
      }
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      ctu::cf::assign();
      *(_OWORD *)std::string __p = v24;
      uint64_t v9 = v25;
      if (v25 >= 0) {
        long long v5 = __p;
      }
      else {
        long long v5 = (void **)__p[0];
      }
      if (v25 >= 0) {
        uint64_t v6 = HIBYTE(v9);
      }
      else {
        uint64_t v6 = (uint64_t)__p[1];
      }
      sub_10004B96C(v10, (uint64_t)v5, v6);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1003F8E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 - 81) < 0) {
    operator delete(*(void **)(v5 - 104));
  }
  sub_1000C937C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003F8E58(Registry *a1, void *a2)
{
  Registry::getMobileHelper(&v3, a1);
  (*(void (**)(uint64_t, const __CFString *, const __CFString *, void))(*(void *)v3 + 24))(v3, @"com.apple.springboard", @"SBCountryCodesShowingEmergencyOnly", *a2);
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1003F8ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F8EE8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1003F8FB4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1003F908C);
  __cxa_rethrow();
}

void sub_1003F8FDC(_Unwind_Exception *a1)
{
}

void sub_1003F8FF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003F902C(uint64_t a1)
{
}

uint64_t sub_1003F9048(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003F908C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1003F90BC()
{
}

uint64_t sub_1003F90D0(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

uint64_t *sub_1003F90DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  Registry::createRestModuleOneTimeUseConnection(&v5, *(Registry **)(*(void *)v1 + 56));
  ctu::RestModule::connect();
  if (v6) {
    sub_10004D2C8(v6);
  }
  sub_100088C88(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_1003F9140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_100088C88(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_1003F9170(uint64_t **a1)
{
  long long v13 = a1;
  uint64_t v1 = **a1;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v1 + 56));
  uint64_t v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  v16[0] = v4;
  unint64_t v8 = sub_10004D37C(&v3[1].__m_.__sig, v16);
  if (v8)
  {
    uint64_t v10 = v8[3];
    uint64_t v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10)) {
        goto LABEL_11;
      }
LABEL_9:
      sub_100058DB0(&__p, "/cc/props/carrier_bundles");
      long long v12 = operator new(0x28uLL);
      *long long v12 = off_1019C7E40;
      v12[1] = v1 + 88;
      v12[2] = v1;
      void v12[3] = sub_1003F8248;
      void v12[4] = 0;
      void v16[3] = (unint64_t)v12;
      ctu::RestModule::observeProperty();
      sub_10003F600(v16);
      if (v15 < 0)
      {
        operator delete(__p);
        if (v11) {
LABEL_13:
        }
          operator delete();
      }
      else
      {
LABEL_11:
        if (v11) {
          goto LABEL_13;
        }
      }
      sub_10004D2C8(v9);
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  uint64_t v9 = 0;
  char v11 = 1;
  goto LABEL_9;
}

void sub_1003F935C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  sub_10003F600(&a17);
  if (a16 < 0) {
    operator delete(__p);
  }
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  operator delete();
}

void sub_1003F93DC()
{
}

__n128 sub_1003F93F0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C7E40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003F9444(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C7E40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003F947C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *uint64_t v3 = v4;
    *unint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  uint64_t v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  unint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087F94((uint64_t)&v9, v10);
}

void sub_1003F953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1003F9554(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003F9594()
{
}

uint64_t *sub_1003F95A0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  ctu::RestModule::disconnect((ctu::RestModule *)(*(void *)v1 + 72));
  sub_100088C88(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_1003F95E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1003F9604(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void *sub_1003F9690(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  uint64_t v3 = *(void ***)(a1 + 8);
  v7[0] = off_1019C7FA0;
  v7[1] = a3;
  v7[2] = &v6;
  void v7[3] = v7;
  sub_100043ED0((uint64_t)v7, *v3);
  return sub_100043E48(v7);
}

void sub_1003F9734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

const void **sub_1003F9750(uint64_t a1, void *a2, ctu **a3)
{
  int v9 = (int)a2;
  unint64_t v8 = 0;
  ctu::xpc_to_cf((uint64_t *)&v7, *a3, a2);
  sub_10004EFE4(&v8, &v7);
  sub_1000577C4(&v7);
  uint64_t v4 = *(void ***)(a1 + 8);
  v10[0] = off_1019C8020;
  v10[1] = &v9;
  v10[2] = &v8;
  void v10[3] = v10;
  sub_100043ED0((uint64_t)v10, *v4);
  sub_100043E48(v10);
  return sub_100057D78(&v8);
}

void sub_1003F9830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  sub_100043E48((uint64_t *)va1);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void *sub_1003F9864(uint64_t a1, int a2, char a3)
{
  int v7 = a2;
  char v6 = a3;
  uint64_t v3 = *(void ***)(a1 + 8);
  v8[0] = off_1019C80A0;
  v8[1] = &v7;
  v8[2] = &v6;
  void v8[3] = v8;
  sub_100043ED0((uint64_t)v8, *v3);
  return sub_100043E48(v8);
}

void sub_1003F9910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003F992C(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3;
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v7 = a2;
  v8[0] = off_1019C8120;
  v8[1] = &v7;
  v8[2] = &v6;
  void v8[3] = v8;
  sub_100043ED0((uint64_t)v8, *v3);
  return sub_100043E48(v8);
}

void sub_1003F99D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100043E48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1003F99F4(CTXPCPNRNotificationInterface *this)
{
  *(void *)this = off_1019C7ED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  CTXPCPNRNotificationInterface::~CTXPCPNRNotificationInterface(this);
}

void sub_1003F9A50(CTXPCPNRNotificationInterface *this)
{
  *(void *)this = off_1019C7ED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  CTXPCPNRNotificationInterface::~CTXPCPNRNotificationInterface(this);

  operator delete();
}

void sub_1003F9AC0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1003F9B28(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F9B64(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1003F9B9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_1003F9BCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1003F9C14()
{
}

__n128 sub_1003F9C28(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1019C7FA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1003F9C74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C7FA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003F9CA4(uint64_t a1, id *a2)
{
  id v9 = *a2;
  uint64_t v3 = objc_opt_new();
  [v3 setSuccess:**(unsigned __int8 **)(a1 + 8)];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  char v6 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v5, +[NSString defaultCStringEncoding]);
  [v3 setToken:v6];

  if (*(int *)(*(void *)(a1 + 8) + 32) >= 1)
  {
    uint64_t v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
    [v3 setTimeout:v7];
  }
  unint64_t v8 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 16)];
  [v9 pnrRequestSent:v8 pnrReqData:v3];
}

void sub_1003F9DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F9DF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003F9E38()
{
}

void sub_1003F9E48()
{
}

__n128 sub_1003F9E5C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1019C8020;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1003F9EA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C8020;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003F9ED8(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v3 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 8)];
  [v4 pnrResponseReceived:v3 pnrRspData:**(void **)(a1 + 16)];
}

void sub_1003F9F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F9F74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003F9FB4()
{
}

void sub_1003F9FC4()
{
}

__n128 sub_1003F9FD8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1019C80A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1003FA024(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C80A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003FA054(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v3 = +[CTXPCPlaceholder simSlot:**(unsigned int **)(a1 + 8)];
  [v4 pnrReadyStateNotification:v3 regState:**(unsigned __int8 **)(a1 + 16)];
}

void sub_1003FA0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003FA0F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003FA130()
{
}

void sub_1003FA140()
{
}

__n128 sub_1003FA154(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1019C8120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1003FA1A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C8120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003FA1D0(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v3 = +[CTXPCPlaceholder cfUuid:**(void **)(a1 + 8)];
  [v4 context:v3 pnrSupportChanged:**(unsigned __int8 **)(a1 + 16)];
}

void sub_1003FA24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003FA26C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003FA2AC()
{
}

void sub_1003FA2B8(uint64_t a1, char a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      char v6 = v5;
      if (*(void *)a1) {
        RegistrationController::networkRegistrationDriverStatus(*(RegistrationController **)a1, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_1003FA32C(uint64_t *a1, int a2, __int16 a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      if (*a1) {
        RegistrationController::ecbmStatus(*a1, a2, a3);
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1003FA3A8(uint64_t *a1, int a2, int a3, char a4, int a5)
{
  char v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    char v11 = std::__shared_weak_count::lock(v6);
    if (v11)
    {
      long long v12 = v11;
      if (*a1) {
        RegistrationController::handleNetworkReject(*a1, a2, a3, a4, a5);
      }
      sub_10004D2C8(v12);
    }
  }
}

void sub_1003FA440(uint64_t *a1, int a2, char a3, char a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    id v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      uint64_t v10 = v9;
      if (*a1) {
        RegistrationController::ratSelectionComplete(*a1, a2, a3, a4);
      }
      sub_10004D2C8(v10);
    }
  }
}

void sub_1003FA4D0(uint64_t *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      char v6 = v5;
      if (*a1) {
        RegistrationController::setSystemSelectionAndOrderPreferenceFailed(*a1, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_1003FA54C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FA560(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 120)) {
    sub_100058F18(a1 + 96, *(void **)(a1 + 104));
  }
  if (*(unsigned char *)(a1 + 32)) {
    sub_100058FDC(a1 + 8, *(void **)(a1 + 16));
  }
  return a1;
}

void sub_1003FA5C4(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*a1) {
        RegistrationController::handleScanCompletionStatus(*a1);
      }
      sub_10004D2C8(v3);
    }
  }
}

void sub_1003FA640(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1003FA654(uint64_t *a1, int a2, long long *a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *a1;
      if (v9)
      {
        sub_1003FB348((char *)__dst, a3);
        RegistrationController::operatorName(v9, a2, (long long *)__dst);
        if (v23 < 0) {
          operator delete(__p);
        }
        if (v21 && v20 < 0) {
          operator delete(v19);
        }
        if (v18 && v17 < 0) {
          operator delete(v16);
        }
        if (v15 < 0) {
          operator delete(v14);
        }
        if (v13 < 0) {
          operator delete(v12);
        }
        if (v11 < 0) {
          operator delete(__dst[0]);
        }
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1003FA73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003FB4D8((uint64_t)va);
  sub_10004D2C8(v2);
  _Unwind_Resume(a1);
}

void sub_1003FA760(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = *a1;
      if (v8)
      {
        long long v9 = *(_OWORD *)(a3 + 48);
        _OWORD v11[2] = *(_OWORD *)(a3 + 32);
        v11[3] = v9;
        uint64_t v12 = *(void *)(a3 + 64);
        long long v10 = *(_OWORD *)(a3 + 16);
        v11[0] = *(_OWORD *)a3;
        v11[1] = v10;
        sub_100026914((MCC *)&v13, (const MCC *)(a3 + 72));
        sub_1000268AC((MCC *)&v14, (const MCC *)(a3 + 112));
        RegistrationController::networkTimeUpdate(v8, a2, (uint64_t)v11);
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_1003FA838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  sub_1003FA87C((uint64_t)&a9);
  sub_10004D2C8(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FA87C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(unsigned char *)(a1 + 104) && *(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_1003FA8D0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      id v4 = v3;
      if (*(void *)a1) {
        RegistrationController::setProvisioningModeComplete(*(RegistrationController **)a1);
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_1003FA944(uint64_t *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    long long v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      long long v10 = v9;
      if (*a1) {
        RegistrationController::enableLteResult(*a1, a2, a3, a4);
      }
      sub_10004D2C8(v10);
    }
  }
}

void sub_1003FA9D4(uint64_t *a1, uint64_t a2, char a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (*a1) {
        RegistrationController::enable3GResult(*a1, a2, a3);
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1003FAA64(uint64_t *a1, int a2, char a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (*a1) {
        RegistrationController::handleDataRoamingSettingResult(*a1, a2, a3);
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1003FAAE0(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    long long v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      long long v10 = v9;
      uint64_t v11 = *a1;
      if (v11)
      {
        std::string __p = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        sub_1003FB56C(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        RegistrationController::imsPreferenceUpdate(v11, a2, (uint64_t)&__p, a4);
        if (__p)
        {
          uint64_t v13 = __p;
          operator delete(__p);
        }
      }
      sub_10004D2C8(v10);
    }
  }
}

void sub_1003FAB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10004D2C8(v11);
  _Unwind_Resume(a1);
}

void sub_1003FABB4(uint64_t *a1, char a2, int a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (*a1) {
        RegistrationController::e911StateReady(*a1, a2, a3);
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1003FAC30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      char v6 = v5;
      if (*a1) {
        RegistrationController::e911ChosenSlot(*a1, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_1003FACA4(uint64_t *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      char v6 = v5;
      if (*a1) {
        RegistrationController::e911ScanFailed(*a1, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_1003FAD18(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      id v4 = v3;
      if (*(void *)a1) {
        RegistrationController::e911StateExitCompleted(*(RegistrationController **)a1);
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_1003FAD78(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*a1) {
        RegistrationController::t3402TimerChange(*a1);
      }
      sub_10004D2C8(v3);
    }
  }
}

void sub_1003FADF4(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1003FAE08(uint64_t *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      char v6 = v5;
      if (*a1) {
        RegistrationController::handleSubscriptionChangeIndication(*a1, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_1003FAE7C(uint64_t *a1, int a2, int a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (*a1) {
        RegistrationController::handleCipherDomain(*a1, a2, a3);
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1003FAEF8(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*a1) {
        RegistrationController::handleEncryptionStatus(*a1);
      }
      sub_10004D2C8(v3);
    }
  }
}

void sub_1003FAF74(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1003FAF88(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*a1) {
        RegistrationController::handleSetCampOnlyModeResult(*a1);
      }
      sub_10004D2C8(v3);
    }
  }
}

void sub_1003FB018(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1003FB02C(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*a1) {
        RegistrationController::handleNRDisableStatus(*a1);
      }
      sub_10004D2C8(v3);
    }
  }
}

void sub_1003FB0A8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1003FB0BC(uint64_t *a1, int a2, MCC *a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      if (*a1) {
        RegistrationController::handleGeoPlmnInfo(*a1, a2, a3);
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_1003FB138(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1003FB14C(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*a1) {
        RegistrationController::handleGeoMccFetchIndication(*a1);
      }
      sub_10004D2C8(v3);
    }
  }
}

void sub_1003FB1C0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1003FB1D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  id v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *a1;
      if (v9)
      {
        sub_1003FB63C((uint64_t)v10, a3);
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 512))(v9, a2, v10);
        sub_1003FB6D4(v10);
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1003FB2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003FB6D4((uint64_t *)va);
  sub_10004D2C8(v2);
  _Unwind_Resume(a1);
}

void *sub_1003FB2CC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    __n128 result = sub_10004EF30(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 3);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1003FB32C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003FB348(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  *((void *)__dst + 9) = *((void *)a2 + 9);
  sub_100026914((MCC *)(__dst + 80), (const MCC *)(a2 + 5));
  sub_1000268AC((MCC *)(__dst + 120), (const MCC *)((char *)a2 + 120));
  uint64_t v7 = __dst + 160;
  if (*((char *)a2 + 183) < 0)
  {
    sub_10004FC84(v7, *((void **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v8 = a2[10];
    *((void *)__dst + 22) = *((void *)a2 + 22);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return __dst;
}

void sub_1003FB44C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 152) && *(char *)(v1 + 151) < 0) {
    operator delete(*(void **)(v1 + 128));
  }
  if (*(unsigned char *)(v1 + 112) && *(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003FB4D8(uint64_t a1)
{
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(unsigned char *)(a1 + 152) && *(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1003FB56C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = sub_10005CCE8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1003FB5CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

MCC *sub_1003FB5E8(MCC *a1, uint64_t a2)
{
  MCC::MCC(a1, (const MCC *)a2);
  MCC::MCC((MCC *)(v4 + 32), (const MCC *)(a2 + 32));
  return a1;
}

void sub_1003FB620(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003FB63C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003FB6D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003FB758()
{
}

void sub_1003FB7CC()
{
}

void sub_1003FB878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FB8B0(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_1003FB758();
}

void sub_1003FB964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (v11) {
    dispatch_release(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FB9B0(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_100A19B58(&v2);
}

void sub_1003FBA20(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FBA38(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_101075000();
}

void sub_1003FBAA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FBAC0()
{
  uint64_t v0 = 0;
  sub_1003FB758();
}

void sub_1003FBB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FBB84(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_1001259C0();
}

void sub_1003FBBF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FBC0C()
{
}

void sub_1003FBC48(ActivationFactoryInterface *this)
{
  *(void *)this = off_1019C81A0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ActivationFactoryInterface::~ActivationFactoryInterface(this);
}

void sub_1003FBCA4(ActivationFactoryInterface *this)
{
  *(void *)this = off_1019C81A0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ActivationFactoryInterface::~ActivationFactoryInterface(this);

  operator delete();
}

void *sub_1003FBD14(uint64_t a1)
{
  sub_10005CD2C(a1 + 32, *(char **)(a1 + 40));

  return sub_1003FF384((void *)a1);
}

void *sub_1003FBD54(uint64_t a1)
{
  sub_10005CD2C(a1 + 32, *(char **)(a1 + 40));

  return sub_1003FF408((void *)a1);
}

void *sub_1003FBD94(uint64_t a1)
{
  sub_10010C0E0(a1 + 32, *(void **)(a1 + 40));

  return sub_1003FF48C((void *)a1);
}

void *sub_1003FBDD4(uint64_t a1)
{
  sub_10010C01C(a1 + 32, *(void **)(a1 + 40));

  return sub_1003FF510((void *)a1);
}

void *sub_1003FBE14(uint64_t a1)
{
  sub_10030AAD0(a1 + 32, *(void **)(a1 + 40));

  return sub_1003FF594((void *)a1);
}

uint64_t sub_1003FBE54(uint64_t a1)
{
  *(void *)a1 = off_1019C8210;
  long long v2 = *(std::__shared_weak_count **)(a1 + 704);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (*(char *)(a1 + 695) < 0) {
    operator delete(*(void **)(a1 + 672));
  }
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*(void **)(a1 + 648));
  }
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*(void **)(a1 + 624));
  }
  sub_1004014A4(*(void **)(a1 + 608));
  std::mutex::~mutex((std::mutex *)(a1 + 536));
  sub_10005CD2C(a1 + 512, *(char **)(a1 + 520));
  sub_1003FF384((void *)(a1 + 480));
  sub_10005CD2C(a1 + 456, *(char **)(a1 + 464));
  sub_1003FF408((void *)(a1 + 424));
  sub_10010C0E0(a1 + 400, *(void **)(a1 + 408));
  sub_1003FF48C((void *)(a1 + 368));
  sub_10010C01C(a1 + 344, *(void **)(a1 + 352));
  sub_1003FF510((void *)(a1 + 312));
  sub_10030AAD0(a1 + 288, *(void **)(a1 + 296));
  sub_1003FF594((void *)(a1 + 256));
  PersonalitiesTracker::~PersonalitiesTracker((PersonalitiesTracker *)(a1 + 88));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    sub_10004D2C8(v4);
  }
  long long v5 = *(NSObject **)(a1 + 48);
  if (v5) {
    dispatch_release(v5);
  }
  CarrierEntitlements::~CarrierEntitlements((CarrierEntitlements *)a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1003FBFA4(uint64_t a1)
{
  sub_1003FBE54(a1);

  operator delete();
}

void sub_1003FBFDC()
{
}

void sub_1003FC3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PersonalitiesTracker *a10, uint64_t a11, uint64_t a12, ctu::OsLogLogger *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,dispatch_object_t object,dispatch_object_t a22,void *a23,std::__shared_weak_count *a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  sub_10004D2C8(v28);
  _Unwind_Resume(a1);
}

void *sub_1003FC5D8(void *a1)
{
  long long v2 = a1[5];
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = a1[5];
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = a1[4];
  if (v4)
  {
    dispatch_group_leave(v4);
    long long v5 = a1[4];
    if (v5) {
      dispatch_release(v5);
    }
  }
  long long v6 = a1[3];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = a1[3];
    if (v7) {
      dispatch_release(v7);
    }
  }
  size_t v8 = a1[2];
  if (v8)
  {
    dispatch_group_leave(v8);
    uint64_t v9 = a1[2];
    if (v9) {
      dispatch_release(v9);
    }
  }
  return a1;
}

void sub_1003FC65C(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FC728(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && std::__shared_weak_count::lock(v4))
  {
    if (object)
    {
      dispatch_retain(object);
      dispatch_group_enter(object);
    }
    operator new();
  }
  sub_100088B9C();
}

double sub_1003FC854@<D0>(void (***a1)(long long *__return_ptr)@<X0>, _OWORD *a2@<X8>)
{
  (**a1)(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double sub_1003FC8AC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 8))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_1003FC904@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 704);
  *a2 = *(void *)(result + 696);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1003FC924(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, char a8)
{
  long long v16 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    BOOL v18 = (v17 & 0x80u) != 0;
    long long v19 = *(const char **)a2;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    if (!v18) {
      long long v19 = (const char *)a2;
    }
    if (v17) {
      char v20 = v19;
    }
    else {
      char v20 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2080;
    uint64_t v66 = v20;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s%sentitlements recalculated for %s", buf, 0x20u);
  }
  uint64_t v60 = 1;
  uint64_t v61 = a1 + 256;
  if ((void **)(a1 + 608) == sub_100046F68(a1 + 600, (void **)a2))
  {
    uint64_t v27 = v61;
    int v28 = *(void **)(v61 + 40);
    if (v28)
    {
      xpc_object_t v29 = (void *)(v61 + 40);
      do
      {
        char v30 = sub_100046FE8(v28 + 4, (void **)a2);
        if (v30 >= 0) {
          CFArrayRef v31 = v28;
        }
        else {
          CFArrayRef v31 = v28 + 1;
        }
        if (v30 >= 0) {
          xpc_object_t v29 = v28;
        }
        int v28 = (void *)*v31;
      }
      while (*v31);
      if (v29 != (void *)(v61 + 40) && (sub_100046FE8((void *)a2, (void **)v29 + 4) & 0x80) == 0)
      {
        int v32 = (void *)v29[1];
        if (v32)
        {
          do
          {
            CFIndex v33 = v32;
            int v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          xpc_object_t v58 = v29;
          do
          {
            CFIndex v33 = (void *)v58[2];
            BOOL v52 = *v33 == (void)v58;
            xpc_object_t v58 = v33;
          }
          while (!v52);
        }
        if (*(void **)(v61 + 32) == v29) {
          *(void *)(v61 + 32) = v33;
        }
        uint64_t v59 = *(uint64_t **)(v27 + 40);
        --*(void *)(v27 + 48);
        sub_10005EE6C(v59, v29);
        sub_10030AB2C((uint64_t)(v29 + 4));
        operator delete(v29);
      }
    }
  }
  else
  {
    *(void *)long long buf = *a3;
    sub_1001A0DB0((uint64_t *)&buf[8], a4);
    sub_1004011B4((uint64_t *)&v67, a5);
    sub_1001A0DB0((uint64_t *)&v69, a6);
    uint64_t v72 = *a7;
    char v73 = a8;
    char v21 = (uint64_t **)(v61 + 32);
    uint64_t v64 = 0;
    long long v22 = (uint64_t **)sub_100046ED4(v61 + 32, &v64, (void **)a2);
    char v23 = *v22;
    if (!*v22)
    {
      uint64_t v63 = 0;
      long long v24 = operator new(0x98uLL);
      __p[0] = v24;
      __p[1] = (void *)(v61 + 40);
      uint64_t v25 = v24 + 4;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_10004FC84(v25, *(void **)a2, *(void *)(a2 + 8));
        xpc_object_t v26 = (uint64_t *)__p[0];
      }
      else
      {
        *(_OWORD *)uint64_t v25 = *(_OWORD *)a2;
        v24[6] = *(void *)(a2 + 16);
        xpc_object_t v26 = v24;
      }
      v24[15] = 0;
      xpc_object_t v34 = v24 + 15;
      *(v34 - 6) = 0;
      *(v34 - 8) = 0;
      *(v34 - 7) = v34 - 6;
      *(v34 - 3) = 0;
      *(v34 - 5) = 0;
      *(v34 - 4) = v34 - 3;
      v34[1] = 0;
      _OWORD v34[2] = 0;
      *(v34 - 2) = 0;
      *(v34 - 1) = v34;
      *((unsigned char *)v34 + 24) = 0;
      LOBYTE(v63) = 1;
      sub_100046C38(v21, v64, v22, v26);
      char v23 = (uint64_t *)__p[0];
      __p[0] = 0;
      sub_10031AD24((uint64_t)__p, 0);
    }
    BOOL v36 = v23 + 9;
    int v35 = (void *)v23[9];
    v23[7] = *(void *)buf;
    sub_1000346F8((uint64_t)(v23 + 8), v35);
    uint64_t v37 = *(void *)&buf[16];
    char v23[8] = *(void *)&buf[8];
    v23[9] = v37;
    CFArrayRef v38 = v66;
    v23[10] = (uint64_t)v66;
    if (v38)
    {
      *(void *)(v37 + 16) = v36;
      *(void *)&uint8_t buf[8] = &buf[16];
      *(void *)&uint8_t buf[16] = 0;
      uint64_t v66 = 0;
    }
    else
    {
      char v23[8] = (uint64_t)v36;
    }
    xpc_object_t v39 = v23 + 12;
    sub_1001A297C((uint64_t)(v23 + 11), (void *)v23[12]);
    uint64_t v40 = *((void *)&v67 + 1);
    v23[11] = v67;
    unsigned char v23[12] = v40;
    uint64_t v41 = v68;
    v23[13] = v68;
    if (v41)
    {
      *(void *)(v40 + 16) = v39;
      *(void *)&long long v67 = (char *)&v67 + 8;
      *((void *)&v67 + 1) = 0;
      uint64_t v68 = 0;
    }
    else
    {
      v23[11] = (uint64_t)v39;
    }
    int v42 = v23 + 15;
    sub_1000346F8((uint64_t)(v23 + 14), (void *)v23[15]);
    uint64_t v43 = v70;
    v23[14] = (uint64_t)v69;
    v23[15] = (uint64_t)v43;
    uint64_t v44 = v71;
    v23[16] = v71;
    if (v44)
    {
      v43[2] = v42;
      CFDataRef v69 = &v70;
      CFTypeID v70 = 0;
      uint64_t v71 = 0;
      uint64_t v43 = 0;
    }
    else
    {
      v23[14] = (uint64_t)v42;
    }
    v23[17] = v72;
    *((unsigned char *)v23 + 144) = v73;
    sub_1000346F8((uint64_t)&v69, v43);
    sub_1001A297C((uint64_t)&v67, *((void **)&v67 + 1));
    sub_1000346F8((uint64_t)&buf[8], *(void **)&buf[16]);
  }
  uint64_t v45 = *(void **)(v61 + 32);
  if (v45 != (void *)(v61 + 40))
  {
    do
    {
      unsigned int v46 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex v47 = (const char *)v45[4];
        uint64_t v48 = *((unsigned __int8 *)v45 + 55);
        uint64_t v49 = v45[5];
        sub_1003B2A30((uint64_t)(v45 + 7), __p);
        if ((v48 & 0x80u) == 0) {
          uint64_t v50 = v48;
        }
        else {
          uint64_t v50 = v49;
        }
        if ((v48 & 0x80u) == 0) {
          CFArrayRef v51 = (const char *)(v45 + 4);
        }
        else {
          CFArrayRef v51 = v47;
        }
        BOOL v52 = v50 == 0;
        *(_DWORD *)long long buf = 136315906;
        CFArrayRef v53 = "<invalid>";
        if (!v52) {
          CFArrayRef v53 = v51;
        }
        *(void *)&uint8_t buf[4] = "";
        CFArrayRef v54 = __p;
        if (v63 < 0) {
          CFArrayRef v54 = (void **)__p[0];
        }
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&buf[22] = 2080;
        uint64_t v66 = v53;
        LOWORD(v67) = 2080;
        *(void *)((char *)&v67 + 2) = v54;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I %s%sposted %s: %s", buf, 0x2Au);
        if (SHIBYTE(v63) < 0) {
          operator delete(__p[0]);
        }
      }
      CFTypeRef v55 = (void *)v45[1];
      if (v55)
      {
        do
        {
          xpc_object_t v56 = v55;
          CFTypeRef v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          xpc_object_t v56 = (void *)v45[2];
          BOOL v52 = *v56 == (void)v45;
          uint64_t v45 = v56;
        }
        while (!v52);
      }
      uint64_t v45 = v56;
    }
    while (v56 != (void *)(v61 + 40));
  }
  return sub_100405644((uint64_t)&v60);
}

void sub_1003FCE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_10031AD24((uint64_t)va1, 0);
  sub_1003FD7B0((void **)va2);
  sub_100405644((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FCED0(void *a1)
{
  v42[1] = a1 + 39;
  v42[0] = 1;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = (uint64_t *)&v44;
  uint64_t v2 = (void *)a1[43];
  uint64_t v3 = a1 + 44;
  if (v2 != a1 + 44)
  {
    while (1)
    {
      v46[0] = 0;
      uint64_t v4 = v44;
      if (v43 == (uint64_t *)&v44)
      {
        uint64_t v6 = &v44;
        if (!v44) {
          goto LABEL_14;
        }
      }
      else
      {
        long long v5 = &v44;
        if (v44)
        {
          do
          {
            uint64_t v6 = (uint64_t **)v4;
            uint64_t v4 = (uint64_t *)v4[1];
          }
          while (v4);
        }
        else
        {
          do
          {
            uint64_t v6 = (uint64_t **)v5[2];
            BOOL v7 = *v6 == (uint64_t *)v5;
            long long v5 = v6;
          }
          while (v7);
        }
        if ((sub_100046FE8(v6 + 4, (void **)v2 + 4) & 0x80) == 0)
        {
          size_t v8 = (uint64_t **)sub_100046ED4((uint64_t)&v43, v46, (void **)v2 + 4);
          goto LABEL_11;
        }
        if (!v44)
        {
LABEL_14:
          v46[0] = &v44;
          size_t v8 = &v44;
LABEL_15:
          uint64_t v37 = 0;
          uint64_t v9 = (char *)operator new(0x68uLL);
          uint64_t v10 = v9;
          __p[0] = v9;
          __p[1] = &v44;
          if (*((char *)v2 + 55) < 0)
          {
            sub_10004FC84(v9 + 32, (void *)v2[4], v2[5]);
          }
          else
          {
            long long v11 = *((_OWORD *)v2 + 2);
            *((void *)v9 + 6) = v2[6];
            *((_OWORD *)v9 + 2) = v11;
          }
          if (*((char *)v2 + 79) < 0)
          {
            sub_10004FC84(v10 + 56, (void *)v2[7], v2[8]);
          }
          else
          {
            long long v12 = *(_OWORD *)(v2 + 7);
            *((void *)v10 + 9) = v2[9];
            *(_OWORD *)(v10 + 56) = v12;
          }
          uint64_t v13 = v10 + 80;
          if (*((char *)v2 + 103) < 0)
          {
            sub_10004FC84(v13, (void *)v2[10], v2[11]);
          }
          else
          {
            long long v14 = *((_OWORD *)v2 + 5);
            *((void *)v10 + 12) = v2[12];
            *(_OWORD *)uint64_t v13 = v14;
          }
          LOBYTE(v37) = 1;
          uint64_t v15 = v46[0];
          long long v16 = (uint64_t *)__p[0];
          *(void *)__p[0] = 0;
          v16[1] = 0;
          v16[2] = v15;
          *size_t v8 = v16;
          if (*v43)
          {
            uint64_t v43 = (uint64_t *)*v43;
            long long v16 = *v8;
          }
          sub_100046C90(v44, v16);
          ++v45;
          __p[0] = 0;
          sub_10010E324((uint64_t)__p, 0);
          goto LABEL_27;
        }
      }
      v46[0] = v6;
      size_t v8 = v6 + 1;
LABEL_11:
      if (!*v8) {
        goto LABEL_15;
      }
LABEL_27:
      uint64_t v17 = (void *)v2[1];
      if (v17)
      {
        do
        {
          BOOL v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          BOOL v18 = (void *)v2[2];
          BOOL v7 = *v18 == (void)v2;
          uint64_t v2 = v18;
        }
        while (!v7);
      }
      uint64_t v2 = v18;
      if (v18 == v3)
      {
        long long v19 = v44;
        goto LABEL_35;
      }
    }
  }
  long long v19 = 0;
LABEL_35:
  sub_10010C01C((uint64_t)&v43, v19);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = (uint64_t *)&v44;
  char v20 = (void **)a1[75];
  if (v20 != a1 + 76)
  {
    do
    {
      v40[0] = 0;
      v40[1] = 0;
      uint64_t v41 = 0;
      (*(void (**)(void **__return_ptr))(*(void *)v20[9] + 112))(v40);
      char v21 = (void *)HIBYTE(v41);
      char v22 = HIBYTE(v41);
      if (v41 < 0) {
        char v21 = v40[1];
      }
      if (v21)
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v40;
        uint64_t v37 = v41;
        v40[0] = 0;
        v40[1] = 0;
        uint64_t v41 = 0;
        (*(void (**)(long long *__return_ptr))(*(void *)v20[9] + 120))(&v38);
        uint64_t v48 = 0;
        char v23 = (uint64_t **)sub_100046ED4((uint64_t)&v43, &v48, v20 + 4);
        long long v24 = *v23;
        if (!*v23)
        {
          uint64_t v47 = 0;
          uint64_t v25 = (char *)operator new(0x68uLL);
          v46[0] = v25;
          v46[1] = &v44;
          LOBYTE(v47) = 0;
          xpc_object_t v26 = v25 + 32;
          if (*((char *)v20 + 55) < 0)
          {
            sub_10004FC84(v26, v20[4], (unint64_t)v20[5]);
            int v28 = (uint64_t *)v46[0];
          }
          else
          {
            long long v27 = *((_OWORD *)v20 + 2);
            *((void *)v25 + 6) = v20[6];
            *(_OWORD *)xpc_object_t v26 = v27;
            int v28 = (uint64_t *)v25;
          }
          *(_OWORD *)(v25 + 88) = 0u;
          *(_OWORD *)(v25 + 72) = 0u;
          *(_OWORD *)(v25 + 56) = 0u;
          LOBYTE(v47) = 1;
          uint64_t v29 = v48;
          *int v28 = 0;
          v28[1] = 0;
          _OWORD v28[2] = v29;
          *char v23 = v28;
          if (*v43)
          {
            uint64_t v43 = (uint64_t *)*v43;
            int v28 = *v23;
          }
          sub_100046C90(v44, v28);
          long long v24 = (uint64_t *)v46[0];
          ++v45;
          v46[0] = 0;
          sub_10010E324((uint64_t)v46, 0);
        }
        char v30 = (void **)(v24 + 7);
        if (*((char *)v24 + 79) < 0) {
          operator delete(*v30);
        }
        *(_OWORD *)char v30 = *(_OWORD *)__p;
        v24[9] = v37;
        HIBYTE(v37) = 0;
        LOBYTE(__p[0]) = 0;
        CFArrayRef v31 = (void **)(v24 + 10);
        if (*((char *)v24 + 103) < 0)
        {
          operator delete(*v31);
          int v32 = SHIBYTE(v37);
          *(_OWORD *)CFArrayRef v31 = v38;
          v24[12] = v39;
          HIBYTE(v39) = 0;
          LOBYTE(v38) = 0;
          if (v32 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_OWORD *)CFArrayRef v31 = v38;
          v24[12] = v39;
        }
        char v22 = HIBYTE(v41);
      }
      if (v22 < 0) {
        operator delete(v40[0]);
      }
      CFIndex v33 = (void **)v20[1];
      if (v33)
      {
        do
        {
          xpc_object_t v34 = v33;
          CFIndex v33 = (void **)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          xpc_object_t v34 = (void **)v20[2];
          BOOL v7 = *v34 == v20;
          char v20 = v34;
        }
        while (!v7);
      }
      char v20 = v34;
    }
    while (v34 != a1 + 76);
  }
  return sub_1004057A0((uint64_t)v42);
}

void sub_1003FD35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1004057A0((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FD414(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v29[1] = a1 + 424;
  v29[0] = 1;
  CFArrayRef v31 = 0;
  uint64_t v32 = 0;
  char v30 = &v31;
  uint64_t v6 = *(void ***)(a1 + 456);
  BOOL v7 = (void **)(a1 + 464);
  if (v6 != (void **)(a1 + 464))
  {
    size_t v8 = 0;
    uint64_t v9 = &v31;
    while (1)
    {
      BOOL v36 = 0;
      if (v9 == &v31)
      {
        long long v11 = &v31;
        if (v8) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = &v31;
        if (v8)
        {
          do
          {
            long long v11 = (uint64_t **)v8;
            size_t v8 = (uint64_t *)v8[1];
          }
          while (v8);
        }
        else
        {
          do
          {
            long long v11 = (uint64_t **)v10[2];
            BOOL v12 = *v11 == (uint64_t *)v10;
            uint64_t v10 = v11;
          }
          while (v12);
        }
        if ((sub_100046FE8(v11 + 4, v6 + 4) & 0x80) == 0)
        {
          uint64_t v13 = (uint64_t **)sub_100046ED4((uint64_t)&v30, &v36, v6 + 4);
          goto LABEL_12;
        }
        if (v31)
        {
LABEL_11:
          BOOL v36 = v11;
          uint64_t v13 = v11 + 1;
LABEL_12:
          if (*v13) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
      }
      BOOL v36 = &v31;
      uint64_t v13 = &v31;
LABEL_16:
      CFIndex v33 = 0;
      xpc_object_t v34 = 0;
      uint64_t v35 = 0;
      sub_100406634((uint64_t)&v30, (uint64_t)(v6 + 4), &v33);
      long long v14 = v36;
      uint64_t v15 = v33;
      *CFIndex v33 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v14;
      *uint64_t v13 = v15;
      if (*v30)
      {
        char v30 = (uint64_t **)*v30;
        uint64_t v15 = *v13;
      }
      sub_100046C90(v31, v15);
      ++v32;
LABEL_19:
      long long v16 = (void **)v6[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          long long v16 = (void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void **)v6[2];
          BOOL v12 = *v17 == v6;
          uint64_t v6 = v17;
        }
        while (!v12);
      }
      if (v17 == v7) {
        break;
      }
      uint64_t v9 = v30;
      size_t v8 = v31;
      uint64_t v6 = v17;
    }
  }
  if ((void **)(a1 + 608) == sub_100046F68(a1 + 600, (void **)a2))
  {
    char v21 = (uint64_t *)sub_100046F68((uint64_t)&v30, (void **)a2);
    char v22 = v21;
    if (&v31 != (uint64_t **)v21)
    {
      char v23 = (uint64_t *)v21[1];
      if (v23)
      {
        do
        {
          long long v24 = (uint64_t **)v23;
          char v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        uint64_t v25 = v21;
        do
        {
          long long v24 = (uint64_t **)v25[2];
          BOOL v12 = *v24 == v25;
          uint64_t v25 = (uint64_t *)v24;
        }
        while (!v12);
      }
      if (v30 == (uint64_t **)v21) {
        char v30 = v24;
      }
      --v32;
      sub_10005EE6C(v31, v21);
      if (*((char *)v22 + 55) < 0) {
        operator delete((void *)v22[4]);
      }
      operator delete(v22);
    }
  }
  else
  {
    BOOL v36 = 0;
    BOOL v18 = (uint64_t **)sub_100046ED4((uint64_t)&v30, &v36, (void **)a2);
    long long v19 = *v18;
    if (!*v18)
    {
      uint64_t v35 = 0;
      long long v19 = (uint64_t *)operator new(0x40uLL);
      xpc_object_t v34 = &v31;
      LOBYTE(v35) = 0;
      char v20 = v19 + 4;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_10004FC84(v20, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)char v20 = *(_OWORD *)a2;
        v19[6] = *(void *)(a2 + 16);
      }
      v19[7] = 0;
      xpc_object_t v26 = v36;
      uint64_t *v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v26;
      void *v18 = v19;
      long long v27 = v19;
      if (*v30)
      {
        char v30 = (uint64_t **)*v30;
        long long v27 = *v18;
      }
      sub_100046C90(v31, v27);
      ++v32;
    }
    v19[7] = a3 | (unint64_t)&_mh_execute_header;
  }
  return sub_1004066E8((uint64_t)v29);
}

void sub_1003FD720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a15 = 0;
  sub_1000C6EE8(v16, v15);
  sub_1004066E8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FD764(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_1003FD7B0(void **a1)
{
  return a1;
}

void sub_1003FD7F8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, char a8)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  __p[3] = *a3;
  sub_1001A0DB0(&v17, a4);
  sub_1004011B4(&v18, a5);
  sub_1001A0DB0(v19, a6);
  v19[3] = *a7;
  char v20 = a8;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (v15)
  {
    if (std::__shared_weak_count::lock(v15)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FDAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  sub_1001A297C(v22, a21);
  sub_1000346F8(v21, a18);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1003FDAE8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FDBC8(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  int v7 = a3;
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1003FDD30(uint64_t a1)
{
  *(void *)a1 = off_1019C8270;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1003FDDA4(uint64_t a1)
{
  sub_1003FDD30(a1);

  operator delete();
}

void sub_1003FDDF4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1003FDDFC()
{
  return 0;
}

uint64_t sub_1003FDE04()
{
  return 0;
}

uint64_t sub_1003FDE0C()
{
  return 0;
}

uint64_t sub_1003FDE14()
{
  return 0;
}

uint64_t sub_1003FDE1C()
{
  return 0;
}

void *sub_1003FDE28@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "");
}

void *sub_1003FDE38@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "");
}

uint64_t sub_1003FDE50()
{
  return 0;
}

void sub_1003FDE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, const void **a7)
{
  sub_100058DB0(&__p, "getSIMStatusWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a6)
  {
    if (*a7)
    {
      _Block_copy(*a7);
      operator new();
    }
  }
}

void sub_1003FDF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FDF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, const void **a7)
{
  sub_100058DB0(&__p, "signUpForSIMServiceWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a6)
  {
    if (*a7)
    {
      _Block_copy(*a7);
      operator new();
    }
  }
}

void sub_1003FDFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE010(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const void **a5)
{
  sub_100058DB0(&__p, "getCarrierAuthNonceWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a4)
  {
    if (*a5)
    {
      _Block_copy(*a5);
      operator new();
    }
  }
}

void sub_1003FE0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, const void **a6)
{
  sub_100058DB0(&__p, "authenticateTrustFlagWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*a6)
    {
      _Block_copy(*a6);
      operator new();
    }
  }
}

void sub_1003FE1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, const void **a6)
{
  sub_100058DB0(&__p, "getAuthTokenWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*a6)
    {
      _Block_copy(*a6);
      operator new();
    }
  }
}

void sub_1003FE288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, const void **a6)
{
  sub_100058DB0(&__p, "transferSIMServiceWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*a6)
    {
      _Block_copy(*a6);
      operator new();
    }
  }
}

void sub_1003FE364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, const void **a6)
{
  sub_100058DB0(&__p, "transferAuthorizationWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*a6)
    {
      _Block_copy(*a6);
      operator new();
    }
  }
}

void sub_1003FE440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, const void **a6)
{
  sub_100058DB0(&__p, "getGeofenceDataWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*a6)
    {
      _Block_copy(*a6);
      operator new();
    }
  }
}

void sub_1003FE51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  sub_100058DB0(&__p, "getSigningKeysWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*(void *)(a6 + 24))
    {
      sub_1001B74C8((uint64_t)&__p, a6);
      operator new();
    }
  }
}

void sub_1003FE630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  sub_100058DB0(&__p, "getBlindSignaturesWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*(void *)(a6 + 24))
    {
      sub_1001B7AE0((uint64_t)&__p, a6);
      operator new();
    }
  }
}

void sub_1003FE75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  sub_100058DB0(&__p, "enableServiceWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a5)
  {
    if (*(void *)(a6 + 24))
    {
      sub_1001B80F8((uint64_t)&__p, a6);
      operator new();
    }
  }
}

void sub_1003FE888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FE8BC(uint64_t a1, uint64_t a2)
{
  sub_1001C6F8C((uint64_t)v4, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FE9C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1003FE9DC(uint64_t a1, uint64_t a2)
{
  sub_1000DFC90((uint64_t)v4, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FEAE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1003FEAFC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, const void **a5)
{
  sub_100058DB0(&__p, "queryAccountSubscriptionAndUsageStatusWithCallback");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a3)
  {
    if (*a5)
    {
      _Block_copy(*a5);
      operator new();
    }
  }
}

void sub_1003FEBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FEBDC(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1003FEBE4(uint64_t a1)
{
  sub_100058DB0(&__p, "setEntitlement");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    if (std::__shared_weak_count::lock(v2)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FECD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003FED00()
{
  return 3;
}

void sub_1003FED0C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1003FED14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000607A8(a3, 0);
}

void sub_1003FED24(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1003FED2C(uint64_t a1)
{
  sub_100058DB0(&__p, "getRegisteredLocationStatus");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    if (std::__shared_weak_count::lock(v2)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FEE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FEE40(uint64_t a1)
{
  sub_100058DB0(&__p, "enablePushNotification");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    if (std::__shared_weak_count::lock(v2)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FEF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FEF54(uint64_t a1)
{
  sub_100058DB0(&__p, "disablePushNotification");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    if (std::__shared_weak_count::lock(v2)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FF048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003FF070@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "");
}

void sub_1003FF090(uint64_t a1)
{
  sub_100058DB0(&__p, "getProvisioning");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    if (std::__shared_weak_count::lock(v2)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FF184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003FF1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100058DB0(&__p, "setProvisioning");
  sub_1003FF6E0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = a1;
  sub_10019E968((uint64_t)&__p.__r_.__value_.__l.__size_, a3);
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003FF2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003FF31C@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "");
}

void sub_1003FF330(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1003FF33C(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
  a1[16] = 0;
  a1[120] = 0;
}

uint64_t sub_1003FF350()
{
  return 0;
}

uint64_t sub_1003FF370()
{
  return 0;
}

void *sub_1003FF384(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003FF408(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003FF48C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003FF510(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003FF594(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003FF61C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003FF654(uint64_t a1)
{
}

uint64_t sub_1003FF670(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003FF6B4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1003FF6E0(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v24 = a2;
    }
    else {
      long long v24 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v25 = (const char *)(a1 + 64);
    uint64_t v26 = *(unsigned __int8 *)(a1 + 87);
    int v27 = (char)v26;
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *(void *)(a1 + 72);
    }
    if (v27 < 0) {
      uint64_t v25 = *(const char **)(a1 + 64);
    }
    if (!v26) {
      uint64_t v25 = "<invalid>";
    }
    *(_DWORD *)uint64_t v39 = 136315906;
    *(void *)&v39[4] = "";
    *(_WORD *)&v39[12] = 2080;
    *(void *)&v39[14] = "";
    *(_WORD *)&v39[22] = 2082;
    *(void *)&v39[24] = v24;
    *(_WORD *)&v39[32] = 2080;
    *(void *)&v39[34] = v25;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#E %s%s***** ERROR: Method %{public}s called for dummy persona:%s", v39, 0x2Au);
  }
  sub_100058DB0(&__dst, "action requested from dummy controller for persona:'");
  long long v5 = (const char *)(a1 + 64);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 87);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 72);
  }
  if (v7 < 0) {
    long long v5 = *(const char **)(a1 + 64);
  }
  if (v6) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = "<invalid>";
  }
  size_t v9 = strlen(v8);
  uint64_t v10 = std::string::append(&__dst, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(void *)&v39[16] = *((void *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v39 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  BOOL v12 = std::string::append((std::string *)v39, "'", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v39[23] & 0x80000000) != 0) {
    operator delete(*(void **)v39);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 48));
  uint64_t v15 = ServiceMap;
  if (v16 < 0)
  {
    uint64_t v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = 5381;
    do
    {
      uint64_t v16 = v18;
      unsigned int v19 = *v17++;
      uint64_t v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  std::mutex::lock(ServiceMap);
  *(void *)uint64_t v39 = v16;
  char v20 = sub_10004D37C(&v15[1].__m_.__sig, (unint64_t *)v39);
  if (!v20)
  {
    uint64_t v22 = 0;
LABEL_21:
    std::mutex::unlock(v15);
    uint64_t v21 = 0;
    char v23 = 1;
    if (!v22) {
      goto LABEL_41;
    }
    goto LABEL_22;
  }
  uint64_t v22 = v20[3];
  uint64_t v21 = (std::__shared_weak_count *)v20[4];
  if (!v21) {
    goto LABEL_21;
  }
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v15);
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v21);
  char v23 = 0;
  if (!v22) {
    goto LABEL_41;
  }
LABEL_22:
  *(_OWORD *)&v39[8] = 0u;
  *(_OWORD *)&v39[40] = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  memset(&v41, 0, sizeof(v41));
  long long v40 = 0u;
  uint64_t v42 = 23;
  qmemcpy(&v39[23], "\tCarrierEntitlements", 20);
  qmemcpy(v39, "Telephony", 9);
  v39[47] = 19;
  std::string::operator=((std::string *)&v39[48], &v28);
  std::string::operator=(&v41, a2);
  v42 |= 7uLL;
  sub_1000DB86C((char *)&__dst, (long long *)v39);
  v38[3] = 0;
  (*(void (**)(uint64_t, std::string *, void *))(*(void *)v22 + 16))(v22, &__dst, v38);
  sub_1000DBADC(v38);
  if (v37 < 0) {
    operator delete(__p);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v44) < 0) {
    operator delete((void *)v43);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(*(void **)&v39[48]);
  }
  if ((v39[47] & 0x80000000) != 0) {
    operator delete(*(void **)&v39[24]);
  }
  if ((v39[23] & 0x80000000) == 0)
  {
LABEL_41:
    if (v23) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  operator delete(*(void **)v39);
  if ((v23 & 1) == 0) {
LABEL_42:
  }
    sub_10004D2C8(v21);
LABEL_43:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1003FFB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_1000DBADC(&a35);
  sub_1001278A0((uint64_t)&a15);
  sub_1001278A0((uint64_t)&a39);
  if ((v45 & 1) == 0) {
    sub_10004D2C8(v44);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1003FFB94(const void **a1)
{
}

void sub_1003FFBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_1003FFC0C(v10);
}

void sub_1003FFC0C(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_1003FFC60(const void **a1)
{
}

void sub_1003FFCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_1003FFCD8(v10);
}

void sub_1003FFCD8(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_1003FFD2C(const void **a1)
{
}

void sub_1003FFD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_1003FFDA4(v10);
}

void sub_1003FFDA4(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_1003FFDF8(const void **a1)
{
}

void sub_1003FFE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_1003FFE70(v10);
}

void sub_1003FFE70(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_1003FFEC4(const void **a1)
{
}

void sub_1003FFF24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1003FFF48(v15);
}

void sub_1003FFF48(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_1003FFF9C(const void **a1)
{
}

void sub_1003FFFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_100400018(v10);
}

void sub_100400018(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_10040006C(const void **a1)
{
}

void sub_1004000C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_1004000E8(v10);
}

void sub_1004000E8(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_10040013C(const void **a1)
{
}

void sub_100400194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_1004001B4(v10);
}

void sub_1004001B4(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_100400208(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_100195908((uint64_t)a1, (uint64_t)&v2, 0);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (a1)
  {
    sub_10016EF68(a1);
    operator delete();
  }
}

void sub_10040026C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10)
  {
    sub_10016EF68(v10);
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_1004002A4(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_100195AA8((uint64_t)a1, (uint64_t)&v2, 0);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (a1)
  {
    sub_10016D740(a1);
    operator delete();
  }
}

void sub_100400308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10)
  {
    sub_10016D740(v10);
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_100400340(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_100195C48((uint64_t)a1, (uint64_t)&v2, 0);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (a1)
  {
    sub_10019FBA0(a1);
    operator delete();
  }
}

void sub_1004003A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10)
  {
    sub_10019FBA0(v10);
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_1004003DC(uint64_t *a1)
{
  uint64_t v2 = (void *)*a1;
  sub_1001C72C8(*a1, 0);
  if (v2)
  {
    sub_1001A28F8(v2);
    operator delete();
  }

  sub_10009AE08((uint64_t)a1);
}

void sub_100400448()
{
  if (v1)
  {
    sub_1001A28F8(v1);
    operator delete();
  }
  sub_10009AE08(v0);
}

void sub_10040047C(uint64_t *a1)
{
  uint64_t v2 = (void *)*a1;
  sub_1000607A8(*a1, 0);
  if (v2)
  {
    sub_100060644(v2);
    operator delete();
  }

  sub_10009AE08((uint64_t)a1);
}

void sub_1004004E8()
{
  if (v1)
  {
    sub_100060644(v1);
    operator delete();
  }
  sub_10009AE08(v0);
}

void sub_10040051C(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9 = (void (**)(const void *, long long *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*a1;
  char v12 = 0;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v13 = v14;
  v14[0] = 0;
  v16[0] = 0;
  v16[1] = 0;
  v14[1] = 0;
  uint64_t v15 = v16;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v17 = v18;
  char v19 = 0;
  v9[2](v9, &v10, 0, a4, a5, a6, a7, a8);
  sub_1000346F8((uint64_t)&v17, v18[0]);
  sub_1000346F8((uint64_t)&v15, v16[0]);
  sub_1000346F8((uint64_t)&v13, v14[0]);
  sub_1000558F4((const void **)v11 + 1);
  sub_1000558F4((const void **)v11);
  sub_1000558F4((const void **)&v10 + 1);
  sub_1000558F4((const void **)&v10);
  sub_10040060C(a1);
}

void sub_1004005F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100196AF4((uint64_t)&a9);
  sub_10040060C(v9);
}

void sub_10040060C(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void sub_100400660(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(char *)(v1 + 87) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 64), *(void *)(v1 + 72));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v1 + 64);
    uint64_t v5 = *(void *)(v1 + 80);
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_1001AC588((uint64_t)&event::entitlements::set_entitlement_result, (uint64_t)__p, 0, &v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  operator delete();
}

void sub_100400718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_100400768(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(char *)(v1 + 87) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 64), *(void *)(v1 + 72));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v1 + 64);
    uint64_t v5 = *(void *)(v1 + 80);
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_1001B2A7C((uint64_t)&event::entitlements::psas_updated, (uint64_t)__p, 0, &v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  operator delete();
}

void sub_100400820(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_100400870(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(char *)(v1 + 87) < 0)
  {
    sub_10004FC84(v9, *(void **)(v1 + 64), *(void *)(v1 + 72));
  }
  else
  {
    *(_OWORD *)size_t v9 = *(_OWORD *)(v1 + 64);
    uint64_t v10 = *(void *)(v1 + 80);
  }
  if (SHIBYTE(v10) < 0)
  {
    sub_10004FC84(__dst, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v9;
    uint64_t v12 = v10;
  }
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  sub_10004DE24((uint64_t)v15);
  uint64_t v2 = (void *)HIBYTE(v12);
  if (v12 < 0) {
    uint64_t v2 = __dst[1];
  }
  uint64_t v3 = __dst;
  if (v12 < 0) {
    uint64_t v3 = (void **)__dst[0];
  }
  if (v2) {
    uint64_t v4 = (const char *)v3;
  }
  else {
    uint64_t v4 = "<invalid>";
  }
  size_t v5 = strlen(v4);
  uint64_t v6 = sub_10004B96C(v15, (uint64_t)v4, v5);
  int v7 = sub_10004B96C(v6, (uint64_t)", ", 2);
  size_t v8 = sub_10004B96C(v7, (uint64_t)"RequestCanceled", 15);
  sub_10004B96C(v8, (uint64_t)", ", 2);
  std::ostream::operator<<();
  sub_10004BC98((uint64_t)v15 + 8, __p);
  sub_1001AA668(&qword_101B14088, (uint64_t *)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  v15[0] = 0uLL;
  sub_1001BFD44((uint64_t)&event::entitlements::enable_push_notification_result, (uint64_t)v9, 0, (uint64_t *)v15);
  if (*((void *)&v15[0] + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v15[0] + 1));
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  operator delete();
}

void sub_100400B28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100400BAC(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(char *)(v1 + 87) < 0)
  {
    sub_10004FC84(v9, *(void **)(v1 + 64), *(void *)(v1 + 72));
  }
  else
  {
    *(_OWORD *)size_t v9 = *(_OWORD *)(v1 + 64);
    uint64_t v10 = *(void *)(v1 + 80);
  }
  if (SHIBYTE(v10) < 0)
  {
    sub_10004FC84(__dst, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v9;
    uint64_t v12 = v10;
  }
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  sub_10004DE24((uint64_t)v15);
  uint64_t v2 = (void *)HIBYTE(v12);
  if (v12 < 0) {
    uint64_t v2 = __dst[1];
  }
  uint64_t v3 = __dst;
  if (v12 < 0) {
    uint64_t v3 = (void **)__dst[0];
  }
  if (v2) {
    uint64_t v4 = (const char *)v3;
  }
  else {
    uint64_t v4 = "<invalid>";
  }
  size_t v5 = strlen(v4);
  uint64_t v6 = sub_10004B96C(v15, (uint64_t)v4, v5);
  int v7 = sub_10004B96C(v6, (uint64_t)", ", 2);
  size_t v8 = sub_10004B96C(v7, (uint64_t)"RequestCanceled", 15);
  sub_10004B96C(v8, (uint64_t)", ", 2);
  std::ostream::operator<<();
  sub_10004BC98((uint64_t)v15 + 8, __p);
  sub_1001AA668(&qword_101B140A8, (uint64_t *)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  v15[0] = 0uLL;
  sub_1001C1450((uint64_t)&event::entitlements::disable_push_notification_result, (uint64_t)v9, 0, (uint64_t *)v15);
  if (*((void *)&v15[0] + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v15[0] + 1));
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  operator delete();
}

void sub_100400E64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100400EE8(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(char *)(v1 + 87) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 64), *(void *)(v1 + 72));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v1 + 64);
    uint64_t v5 = *(void *)(v1 + 80);
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_1001AE3A8((uint64_t)&event::entitlements::get_provisioning_update, (uint64_t)__p, 0, &v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  operator delete();
}

void sub_100400FA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_100400FF0(uint64_t *a1)
{
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v2 = *v3;
  uint64_t v8 = 0;
  size_t v9 = 0;
  LODWORD(v4) = 6005;
  sub_1001B03D0(v3 + 1, __p);
  sub_1001B08EC((int *)&v4, (uint64_t *)__p, &v8);
  if (__p[1]) {
    sub_10004D2C8((std::__shared_weak_count *)__p[1]);
  }
  if (*(char *)(v2 + 87) < 0)
  {
    sub_10004FC84(__p, *(void **)(v2 + 64), *(void *)(v2 + 72));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 64);
    uint64_t v7 = *(void *)(v2 + 80);
  }
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1001B04DC((uint64_t)&event::entitlements::set_provisioning_update, (uint64_t)__p, 0, &v4);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_100401150((uint64_t *)&v3);
  sub_10009AE08((uint64_t)a1);
}

void sub_1004010EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  long long v20 = *(std::__shared_weak_count **)(v19 - 32);
  if (v20) {
    sub_10004D2C8(v20);
  }
  sub_100401150(&a10);
  sub_10009AE08(v18);
}

uint64_t *sub_100401150(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    sub_10005D0E4(v1 + 8, *(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_1004011B4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10040120C(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1004011F4(_Unwind_Exception *a1)
{
  sub_1001A297C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10040120C(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_100401298(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100401298(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = sub_1000262C0(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_10040133C((uint64_t)a1, a4, v10);
    sub_100046C38(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1001BF34C((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_10040133C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x58uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1004013B0((uint64_t)v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100401398(_Unwind_Exception *a1)
{
  sub_1001BF34C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1004013B0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  sub_10040141C((void *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 6);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  return a1;
}

void *sub_10040141C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1001A1088(result, a4);
    uint64_t result = (void *)sub_1001A10CC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100401484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1001A14F4(&a9);
  _Unwind_Resume(a1);
}

void sub_1004014A4(void *a1)
{
  if (a1)
  {
    sub_1004014A4(*a1);
    sub_1004014A4(a1[1]);
    sub_1004014F8((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_1004014F8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void sub_10040155C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100401594(uint64_t a1)
{
}

uint64_t sub_1004015B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1004015F4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  return result;
}

void sub_100401620(ServiceManager::Service *this)
{
  *(void *)this = off_1019C8788;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_10040167C(ServiceManager::Service *this)
{
  *(void *)this = off_1019C8788;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_1004016EC@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "CarrierEntitlements");
}

unsigned char *sub_1004016FC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10040173C(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_1003FC65C(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_1003FC65C(v4, 0);
}

uint64_t sub_1004017C0()
{
  return 1;
}

uint64_t sub_1004017C8()
{
  return 1;
}

uint64_t sub_1004017D0()
{
  return 2;
}

void sub_1004017D8(uint64_t a1, xpc_object_t *a2, NSObject **a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  uint64_t v5 = *a3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
    sub_1003FC728(v4, v5);
  }
  sub_1003FC728(v4, 0);
}

void sub_100401874(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100401954(uint64_t a1, char a2, NSObject **this)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v9 = v4;
  char v10 = a2;
  uint64_t v5 = *this;
  dispatch_object_t object = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  uint64_t v6 = this[1];
  dispatch_object_t v12 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  uint64_t v7 = this[2];
  dispatch_object_t v13 = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  ServiceStage::holdOffStage(&v14, (ServiceStage *)this);
  uint64_t v8 = *(std::__shared_weak_count **)(v4 + 16);
  if (v8)
  {
    if (std::__shared_weak_count::lock(v8)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100401B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_group_t a11, dispatch_group_t object, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (object)
  {
    dispatch_group_leave(object);
    dispatch_release(object);
  }
  if (a11)
  {
    dispatch_group_leave(a11);
    dispatch_release(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100401B74(ServiceManager::Service *this)
{
  *(void *)this = off_1019C8788;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100401BD0(ServiceManager::Service *this)
{
  *(void *)this = off_1019C8788;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

uint64_t sub_100401C40()
{
  return 0;
}

uint64_t sub_100401C48()
{
  return 0;
}

uint64_t *sub_100401C54(void *a1)
{
  uint64_t v1 = (uint64_t *)*a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *v1;
  ctu::RestModule::disconnect((ctu::RestModule *)(*v1 + 72));
  uint64_t v3 = *(void *)(v2 + 696);
  if (v3) {
    (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v3 + 80))(v3, *((unsigned __int8 *)v1 + 8), v1 + 2);
  }
  sub_100401CEC(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100401CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void **sub_100401CEC(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1003FC5D8(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_100401D34(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(NSObject **)(*(void *)a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%sCarrierEntitlementsImpl init", buf, 0x16u);
  }
  pthread_mutex_lock(&stru_101B09E48);
  if (!off_101B09E88) {
    sub_1012D6D0C(buf);
  }
  uint64_t v4 = (std::__shared_weak_count *)*(&off_101B09E88 + 1);
  if (*(&off_101B09E88 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_101B09E88 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_101B09E48);
  if (v4) {
    sub_10004D2C8(v4);
  }
  Registry::createRestModuleOneTimeUseConnection(&v35, *(Registry **)(v2 + 56));
  uint64_t v5 = v2 + 72;
  ctu::RestModule::connect();
  if (v36) {
    sub_10004D2C8(v36);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v6 || (v7 = *(void *)(v2 + 8), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v8);
  char v10 = operator new(0x20uLL);
  void *v10 = off_1019C87F0;
  v10[1] = v2;
  v10[2] = v7;
  void v10[3] = v9;
  long long v43 = v10;
  uint64_t v11 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v11 || (uint64_t v12 = *(void *)(v2 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v14 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v13);
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = off_1019C8870;
  v15[1] = v2;
  uint64_t v16 = a1 + 8;
  v15[2] = v12;
  v15[3] = v14;
  std::string v41 = v15;
  v37[3] = 0;
  PersonalitiesTracker::bind();
  sub_100100490(v37);
  sub_10010040C(&v38);
  sub_100100388(buf);
  long long v17 = (unsigned char *)(v2 + 256);
  *(void *)long long buf = off_1019C88F0;
  *(void *)&uint8_t buf[8] = v2 + 72;
  long long v43 = buf;
  if (buf != (unsigned char *)(v2 + 256))
  {
    uint64_t v18 = *(unsigned char **)(v2 + 280);
    if (v18 == v17)
    {
      uint64_t v39 = v2 + 72;
      uint64_t v40 = 0;
      long long v38 = off_1019C88F0;
      long long v43 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 24))(v2 + 256, buf);
      (*(void (**)(void))(**(void **)(v2 + 280) + 32))(*(void *)(v2 + 280));
      *(void *)(v2 + 280) = 0;
      long long v43 = buf;
      ((void (*)(uint64_t (***)(), uint64_t))v38[3])(&v38, v2 + 256);
      ((void (*)(uint64_t (***)()))v38[4])(&v38);
    }
    else
    {
      *(void *)(v2 + 256) = off_1019C88F0;
      *(void *)(v2 + 264) = v5;
      long long v43 = v18;
    }
    *(void *)(v2 + 280) = v17;
  }
  sub_1003FF594(buf);
  uint64_t v19 = *(void *)(v2 + 280);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 48))(v19, v2 + 288);
  }
  long long v20 = (unsigned char *)(v2 + 312);
  *(void *)long long buf = off_1019C8980;
  *(void *)&uint8_t buf[8] = v2 + 72;
  long long v43 = buf;
  if (buf != (unsigned char *)(v2 + 312))
  {
    long long v21 = *(unsigned char **)(v2 + 336);
    if (v21 == v20)
    {
      uint64_t v39 = v2 + 72;
      uint64_t v40 = 0;
      long long v38 = off_1019C8980;
      long long v43 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v20 + 24))(v2 + 312, buf);
      (*(void (**)(void))(**(void **)(v2 + 336) + 32))(*(void *)(v2 + 336));
      *(void *)(v2 + 336) = 0;
      long long v43 = buf;
      ((void (*)(uint64_t (***)(), uint64_t))v38[3])(&v38, v2 + 312);
      ((void (*)(uint64_t (***)()))v38[4])(&v38);
    }
    else
    {
      *(void *)(v2 + 312) = off_1019C8980;
      *(void *)(v2 + 320) = v5;
      long long v43 = v21;
    }
    *(void *)(v2 + 336) = v20;
  }
  sub_1003FF510(buf);
  uint64_t v22 = *(void *)(v2 + 336);
  if (v22) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 48))(v22, v2 + 344);
  }
  long long v23 = (unsigned char *)(v2 + 368);
  *(void *)long long buf = off_1019C8A10;
  *(void *)&uint8_t buf[8] = v2 + 72;
  long long v43 = buf;
  if (buf != (unsigned char *)(v2 + 368))
  {
    long long v24 = *(unsigned char **)(v2 + 392);
    if (v24 == v23)
    {
      uint64_t v39 = v2 + 72;
      uint64_t v40 = 0;
      long long v38 = off_1019C8A10;
      long long v43 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 24))(v2 + 368, buf);
      (*(void (**)(void))(**(void **)(v2 + 392) + 32))(*(void *)(v2 + 392));
      *(void *)(v2 + 392) = 0;
      long long v43 = buf;
      ((void (*)(uint64_t (***)(), uint64_t))v38[3])(&v38, v2 + 368);
      ((void (*)(uint64_t (***)()))v38[4])(&v38);
    }
    else
    {
      *(void *)(v2 + 368) = off_1019C8A10;
      *(void *)(v2 + 376) = v5;
      long long v43 = v24;
    }
    *(void *)(v2 + 392) = v23;
  }
  sub_1003FF48C(buf);
  uint64_t v25 = *(void *)(v2 + 392);
  if (v25) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 48))(v25, v2 + 400);
  }
  long long v26 = (unsigned char *)(v2 + 424);
  *(void *)long long buf = off_1019C8AA0;
  *(void *)&uint8_t buf[8] = v2 + 72;
  long long v43 = buf;
  if (buf != (unsigned char *)(v2 + 424))
  {
    long long v27 = *(unsigned char **)(v2 + 448);
    if (v27 == v26)
    {
      uint64_t v39 = v2 + 72;
      uint64_t v40 = 0;
      long long v38 = off_1019C8AA0;
      long long v43 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 24))(v2 + 424, buf);
      (*(void (**)(void))(**(void **)(v2 + 448) + 32))(*(void *)(v2 + 448));
      *(void *)(v2 + 448) = 0;
      long long v43 = buf;
      ((void (*)(uint64_t (***)(), uint64_t))v38[3])(&v38, v2 + 424);
      ((void (*)(uint64_t (***)()))v38[4])(&v38);
    }
    else
    {
      *(void *)(v2 + 424) = off_1019C8AA0;
      *(void *)(v2 + 432) = v5;
      long long v43 = v27;
    }
    *(void *)(v2 + 448) = v26;
  }
  sub_1003FF408(buf);
  uint64_t v28 = *(void *)(v2 + 448);
  if (v28) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 48))(v28, v2 + 456);
  }
  uint64_t v29 = (unsigned char *)(v2 + 480);
  *(void *)long long buf = off_1019C8B30;
  *(void *)&uint8_t buf[8] = v2 + 72;
  long long v43 = buf;
  if (buf != (unsigned char *)(v2 + 480))
  {
    char v30 = *(unsigned char **)(v2 + 504);
    if (v30 == v29)
    {
      uint64_t v39 = v2 + 72;
      uint64_t v40 = 0;
      long long v38 = off_1019C8B30;
      long long v43 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v29 + 24))(v2 + 480, buf);
      (*(void (**)(void))(**(void **)(v2 + 504) + 32))(*(void *)(v2 + 504));
      *(void *)(v2 + 504) = 0;
      long long v43 = buf;
      ((void (*)(uint64_t (***)(), uint64_t))v38[3])(&v38, v2 + 480);
      ((void (*)(uint64_t (***)()))v38[4])(&v38);
    }
    else
    {
      *(void *)(v2 + 480) = off_1019C8B30;
      *(void *)(v2 + 488) = v5;
      long long v43 = v30;
    }
    *(void *)(v2 + 504) = v29;
  }
  sub_1003FF384(buf);
  uint64_t v31 = *(void *)(v2 + 504);
  if (v31) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 48))(v31, v2 + 512);
  }
  uint64_t v32 = *(void *)(v2 + 696);
  if (v32) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 88))(v32, v16);
  }
  return sub_1003C2130(&v34);
}

void sub_100402740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pthread_mutex_unlock(&stru_101B09E48);
  sub_1003C2130((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1004027EC(void *a1)
{
  *a1 = off_1019C87F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100402838(void *a1)
{
  *a1 = off_1019C87F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_1004028A4(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_1019C87F0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100402908(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019C87F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100402948(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100402958(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100402998(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[2])
  {
    char v10 = *(const std::string ****)(v7 + 240);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    dispatch_object_t v13 = v11;
    if (v11 != v12)
    {
      dispatch_object_t v13 = v11;
      while ((*v13)[2].__r_.__value_.__s.__data_[1] || HIDWORD((*v13)[2].__r_.__value_.__r.__words[0]) != 1)
      {
        v13 += 2;
        if (v13 == v12) {
          goto LABEL_14;
        }
      }
    }
    if (v13 == v12)
    {
LABEL_14:
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *v13;
      uint64_t v15 = (std::__shared_weak_count *)v13[1];
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = *(const std::string ****)(v7 + 240);
        uint64_t v11 = *v16;
        uint64_t v12 = v16[1];
      }
    }
    if (v11 == v12)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      long long v17 = v11;
      while (1)
      {
        uint64_t v18 = *v17;
        if (!(*v17)[2].__r_.__value_.__s.__data_[1] && HIDWORD(v18[2].__r_.__value_.__r.__words[0]) == 2) {
          break;
        }
        v17 += 2;
        if (v17 == v12) {
          goto LABEL_20;
        }
      }
      if (v17 == v12)
      {
LABEL_20:
        uint64_t v19 = 0;
        uint64_t v18 = 0;
        goto LABEL_21;
      }
      uint64_t v19 = (std::__shared_weak_count *)v17[1];
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v49 = *(const std::string ****)(v7 + 240);
        uint64_t v11 = *v49;
        uint64_t v12 = v49[1];
      }
LABEL_21:
      while (v11 != v12)
      {
        if ((*v11)[2].__r_.__value_.__s.__data_[1] == 1)
        {
          uint64_t v12 = v11;
          break;
        }
        v11 += 2;
      }
    }
    std::mutex::lock((std::mutex *)(v7 + 536));
    long long v20 = (std::string *)(v7 + 624);
    if (v14)
    {
      std::string::operator=(v20, v14 + 1);
    }
    else
    {
      memset(&__str, 0, sizeof(__str));
      std::string::operator=(v20, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    long long v21 = (std::string *)(v7 + 648);
    if (v18)
    {
      std::string::operator=(v21, v18 + 1);
    }
    else
    {
      memset(&__str, 0, sizeof(__str));
      std::string::operator=(v21, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    if (v12 == *(const std::string ***)(*(void *)(v7 + 240) + 8))
    {
      memset(&__str, 0, sizeof(__str));
      std::string::operator=((std::string *)(v7 + 672), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::operator=((std::string *)(v7 + 672), *v12 + 1);
    }
    std::mutex::unlock((std::mutex *)(v7 + 536));
    long long v70 = 0uLL;
    if ((*(unsigned char *)(a3 + 24) & 0xFE) == 6)
    {
      uint64_t v61 = v19;
      uint64_t v63 = v15;
      std::mutex::lock((std::mutex *)(v7 + 536));
      uint64_t v22 = (uint64_t **)(v7 + 600);
      long long v23 = sub_100046F68(v7 + 600, (void **)a3);
      if ((void **)(v7 + 608) == v23)
      {
        uint64_t v31 = 0;
        uint64_t v30 = 0;
        uint64_t v19 = v61;
      }
      else
      {
        long long v24 = (uint64_t *)v23;
        uint64_t v25 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
          BOOL v27 = (v26 & 0x80u) != 0;
          uint64_t v28 = *(const char **)a3;
          if ((v26 & 0x80u) != 0) {
            uint64_t v26 = *(void *)(a3 + 8);
          }
          if (!v27) {
            uint64_t v28 = (const char *)a3;
          }
          if (v26) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = "<invalid>";
          }
          LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
          WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
          HIWORD(__str.__r_.__value_.__r.__words[2]) = 2080;
          *(void *)&long long v74 = v29;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s%sRemoving controller for %s", (uint8_t *)&__str, 0x20u);
        }
        uint64_t v30 = v24[7];
        uint64_t v31 = (std::__shared_weak_count *)v24[8];
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v70 = v30;
        *((void *)&v70 + 1) = v31;
        uint64_t v32 = (uint64_t *)v24[1];
        if (v32)
        {
          do
          {
            char v33 = v32;
            uint64_t v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          uint64_t v50 = v24;
          do
          {
            char v33 = (uint64_t *)v50[2];
            BOOL v51 = *v33 == (void)v50;
            uint64_t v50 = v33;
          }
          while (!v51);
        }
        if (*v22 == v24) {
          *uint64_t v22 = v33;
        }
        --*(void *)(v7 + 616);
        sub_10005EE6C(*(uint64_t **)(v7 + 608), v24);
        sub_1004014F8((uint64_t)(v24 + 4));
        operator delete(v24);
        uint64_t v67 = 0;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
        v72[1] = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
        *((void *)&v65 + 1) = 0;
        *(void *)&long long v66 = 0;
        *(void *)&long long v65 = (char *)&v65 + 8;
        uint64_t v71 = v72;
        v72[0] = 0;
        uint64_t v69 = 0;
        sub_1003FC924(v7, a3, &v67, (uint64_t)&__str, (uint64_t)&v65, (uint64_t)&v71, &v69, 0);
        sub_1000346F8((uint64_t)&v71, v72[0]);
        sub_1001A297C((uint64_t)&v65, *((void **)&v65 + 1));
        sub_1000346F8((uint64_t)&__str, (void *)__str.__r_.__value_.__l.__size_);
        uint64_t v19 = v61;
        uint64_t v15 = v63;
        sub_1003FCED0((void *)v7);
        sub_1003FD414(v7, a3, 0);
      }
      std::mutex::unlock((std::mutex *)(v7 + 536));
LABEL_93:
      uint64_t v52 = *(void *)(v7 + 696);
      if (v52 && v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v52 + 104))(v52, a2, a3, &v70);
        uint64_t v31 = (std::__shared_weak_count *)*((void *)&v70 + 1);
      }
      if (v31) {
        sub_10004D2C8(v31);
      }
      if (v19) {
        sub_10004D2C8(v19);
      }
      if (v15) {
        sub_10004D2C8(v15);
      }
      goto LABEL_102;
    }
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v34 = *(void *)(v7 + 240);
    uint64_t v35 = *(void **)v34;
    BOOL v36 = *(void **)(v34 + 8);
    if (*(void **)v34 == v36) {
      goto LABEL_69;
    }
    while (!sub_10001D294((unsigned __int8 *)(*v35 + 24), (unsigned __int8 *)a3))
    {
      v35 += 2;
      if (v35 == v36)
      {
        uint64_t v35 = v36;
        break;
      }
    }
    if (v35 == *(void **)(v34 + 8))
    {
LABEL_69:
      uint64_t v67 = 0;
      uint64_t v68 = 0;
    }
    else
    {
      uint64_t v37 = *v35;
      long long v38 = (std::__shared_weak_count *)v35[1];
      uint64_t v67 = *v35;
      uint64_t v68 = v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v37)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        CFTypeID v62 = v19;
        uint64_t v64 = v15;
        std::mutex::lock((std::mutex *)(v7 + 536));
        uint64_t v39 = sub_100046F68(v7 + 600, (void **)a3);
        if ((void **)(v7 + 608) == v39)
        {
          std::mutex::unlock((std::mutex *)(v7 + 536));
          std::string v41 = 0;
        }
        else
        {
          uint64_t v40 = v39[7];
          std::string v41 = (std::__shared_weak_count *)v39[8];
          if (v41) {
            atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v65 = v40;
          *((void *)&v65 + 1) = v41;
          uint64_t v42 = v39[9];
          long long v43 = (atomic_ullong *)v39[10];
          if (v43) {
            atomic_fetch_add_explicit(v43 + 1, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v66 = v42;
          *((void *)&v66 + 1) = v43;
          std::mutex::unlock((std::mutex *)(v7 + 536));
          if (v42)
          {
            uint64_t v59 = 1;
            switch(*(unsigned char *)(a3 + 24))
            {
              case 1:
                goto LABEL_122;
              case 2:
                uint64_t v59 = 0;
LABEL_122:
                (*(void (**)(void *, uint64_t, uint64_t *, uint64_t))(*(void *)v42 + 32))(v42, v59, &v67, a2);
                break;
              case 3:
                uint64_t v60 = (void (**)(void *, uint64_t *))(*(void *)v42 + 40);
                goto LABEL_126;
              case 4:
                uint64_t v60 = (void (**)(void *, uint64_t *))(*(void *)v42 + 48);
                goto LABEL_126;
              case 5:
                uint64_t v60 = (void (**)(void *, uint64_t *))(*(void *)v42 + 56);
LABEL_126:
                (*v60)(v42, &v67);
                break;
              default:
                break;
            }
            uint64_t v31 = (std::__shared_weak_count *)*((void *)&v65 + 1);
            uint64_t v30 = v65;
            uint64_t v15 = v64;
            if (*((void *)&v65 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v65 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            long long v70 = v65;
            goto LABEL_130;
          }
        }
        if (*(unsigned __int8 *)(v67 + 49) <= 2u)
        {
          CFArrayRef v53 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v54 = *(unsigned __int8 *)(a3 + 23);
            BOOL v55 = (v54 & 0x80u) != 0;
            xpc_object_t v56 = *(const char **)a3;
            if ((v54 & 0x80u) != 0) {
              uint64_t v54 = *(void *)(a3 + 8);
            }
            if (!v55) {
              xpc_object_t v56 = (const char *)a3;
            }
            if (v54) {
              xpc_object_t v57 = v56;
            }
            else {
              xpc_object_t v57 = "<invalid>";
            }
            LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
            WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
            HIWORD(__str.__r_.__value_.__r.__words[2]) = 2080;
            *(void *)&long long v74 = v57;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#I %s%sCreating controller for %s", (uint8_t *)&__str, 0x20u);
          }
          xpc_object_t v58 = (char *)operator new(0x220uLL);
          *((void *)v58 + 1) = 0;
          *((void *)v58 + 2) = 0;
          *(void *)xpc_object_t v58 = off_1019C8BC0;
          sub_1004054F4(&v67, (void *)v58 + 3);
          v58[120] = 0;
          v58[320] = 0;
          v58[328] = 0;
          v58[352] = 0;
          v58[480] = 0;
          *((_WORD *)v58 + 244) = 0;
          *(_OWORD *)(v58 + 40) = 0u;
          *(_OWORD *)(v58 + 56) = 0u;
          *(_OWORD *)(v58 + 72) = 0u;
          *(_OWORD *)(v58 + 88) = 0u;
          *(_OWORD *)(v58 + 97) = 0u;
          v58[456] = 0;
          *(_OWORD *)(v58 + 360) = 0u;
          *(_OWORD *)(v58 + 376) = 0u;
          *(_OWORD *)(v58 + 392) = 0u;
          *(_OWORD *)(v58 + 408) = 0u;
          *(_OWORD *)(v58 + 424) = 0u;
          *(_OWORD *)(v58 + 440) = 0u;
          *((_OWORD *)v58 + 32) = 0u;
          *((_OWORD *)v58 + 33) = 0u;
          *((_OWORD *)v58 + 31) = 0u;
          *(void *)&long long v65 = v58 + 24;
          *((void *)&v65 + 1) = v58;
          if (v41) {
            sub_10004D2C8(v41);
          }
          entitlements::ControllerImpl::create();
        }
        uint64_t v31 = 0;
        uint64_t v30 = 0;
        uint64_t v15 = v64;
LABEL_130:
        uint64_t v19 = v62;
        if (*((void *)&v66 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v66 + 1));
        }
        if (*((void *)&v65 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v65 + 1));
        }
LABEL_80:
        if (v68) {
          sub_10004D2C8(v68);
        }
        goto LABEL_93;
      }
    }
    long long v44 = *(NSObject **)(v7 + 40);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(unsigned __int8 *)(a3 + 23);
      BOOL v46 = (v45 & 0x80u) != 0;
      uint64_t v47 = *(const char **)a3;
      if ((v45 & 0x80u) != 0) {
        uint64_t v45 = *(void *)(a3 + 8);
      }
      if (!v46) {
        uint64_t v47 = (const char *)a3;
      }
      if (v45) {
        uint64_t v48 = v47;
      }
      else {
        uint64_t v48 = "<invalid>";
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 2080;
      *(void *)&long long v74 = v48;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#I %s%s--- UNEXPECTED, Personality %s does not exist", (uint8_t *)&__str, 0x20u);
    }
    uint64_t v31 = 0;
    uint64_t v30 = 0;
    goto LABEL_80;
  }
LABEL_102:

  sub_10004D2C8(v9);
}

void sub_1004034F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_1004055EC((uint64_t)&a22);
  sub_1003FD764((uint64_t)&__p);
  std::mutex::unlock(v31);
  sub_10025B9C0((uint64_t)&a13);
  if (a18) {
    sub_10004D2C8(a18);
  }
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_100403640(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100403680()
{
}

void *sub_10040368C(void *a1)
{
  *a1 = off_1019C8870;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1004036D8(void *a1)
{
  *a1 = off_1019C8870;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100403744(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_1019C8870;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1004037A8(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019C8870;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1004037E8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1004037F8(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100403838(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[2])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          asString();
          uint64_t v7 = v9 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)long long buf = 136315650;
          uint64_t v11 = "";
          __int16 v12 = 2080;
          dispatch_object_t v13 = "";
          __int16 v14 = 2080;
          uint64_t v15 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sevent dispatched: %s", buf, 0x20u);
          if (v9 < 0) {
            operator delete(__p);
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10040398C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004039A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004039E0()
{
}

void sub_1004039F0()
{
}

void *sub_100403A04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019C88F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100403A4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C88F0;
  a2[1] = v2;
  return result;
}

void sub_100403A78(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v23 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v23 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v23 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      write_rest_value();
      std::string __p = &v23;
      long long v17 = "first";
      sub_100035E70((uint64_t)&__p, &v21, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      sub_1003B39C8(v6 + 7, &v19);
      std::string __p = &v23;
      long long v17 = "second";
      sub_100035E70((uint64_t)&__p, &v19, &v20);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v19);
      xpc_object_t v19 = 0;
      xpc_object_t v11 = v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_release(v23);
      xpc_array_append_value(v4, v11);
      xpc_release(v11);
      __int16 v12 = (void *)v6[1];
      if (v12)
      {
        do
        {
          dispatch_object_t v13 = v12;
          __int16 v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          dispatch_object_t v13 = (void *)v6[2];
          BOOL v14 = *v13 == (void)v6;
          uint64_t v6 = v13;
        }
        while (!v14);
      }
      uint64_t v6 = v13;
    }
    while (v13 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v15 = v4;
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/carrier_entitlements_info");
  xpc_object_t v23 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v18 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
}

void sub_100403D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100403DE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100403E28()
{
}

void sub_100403E38()
{
}

void *sub_100403E4C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019C8980;
  result[1] = v3;
  return result;
}

uint64_t sub_100403E94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C8980;
  a2[1] = v2;
  return result;
}

void sub_100403EC0(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v23 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v23 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v23 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      write_rest_value();
      std::string __p = &v23;
      long long v17 = "first";
      sub_100035E70((uint64_t)&__p, &v21, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      sub_1003B3428((uint64_t)(v6 + 7), &v19);
      std::string __p = &v23;
      long long v17 = "second";
      sub_100035E70((uint64_t)&__p, &v19, &v20);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v19);
      xpc_object_t v19 = 0;
      xpc_object_t v11 = v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_release(v23);
      xpc_array_append_value(v4, v11);
      xpc_release(v11);
      __int16 v12 = (void *)v6[1];
      if (v12)
      {
        do
        {
          dispatch_object_t v13 = v12;
          __int16 v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          dispatch_object_t v13 = (void *)v6[2];
          BOOL v14 = *v13 == (void)v6;
          uint64_t v6 = v13;
        }
        while (!v14);
      }
      uint64_t v6 = v13;
    }
    while (v13 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v15 = v4;
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/device_account_id");
  xpc_object_t v23 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v18 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
}

void sub_100404178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100404230(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100404270()
{
}

void sub_100404280()
{
}

void *sub_100404294(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019C8A10;
  result[1] = v3;
  return result;
}

uint64_t sub_1004042DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C8A10;
  a2[1] = v2;
  return result;
}

void sub_100404308(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v24 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v24 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v24 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      write_rest_value();
      std::string __p = &v24;
      char v18 = "first";
      sub_100035E70((uint64_t)&__p, &v22, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v22);
      xpc_object_t v22 = 0;
      if (*((char *)v6 + 79) >= 0) {
        xpc_object_t v11 = (const char *)(v6 + 7);
      }
      else {
        xpc_object_t v11 = (const char *)v6[7];
      }
      xpc_object_t v20 = xpc_string_create(v11);
      if (!v20) {
        xpc_object_t v20 = xpc_null_create();
      }
      std::string __p = &v24;
      char v18 = "second";
      sub_100035E70((uint64_t)&__p, &v20, &v21);
      xpc_release(v21);
      xpc_object_t v21 = 0;
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_object_t v12 = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_release(v24);
      xpc_array_append_value(v4, v12);
      xpc_release(v12);
      dispatch_object_t v13 = (void *)v6[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          dispatch_object_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (void *)v6[2];
          BOOL v15 = *v14 == (void)v6;
          uint64_t v6 = v14;
        }
        while (!v15);
      }
      uint64_t v6 = v14;
    }
    while (v14 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v16 = v4;
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/carrier_entitlements_wifi_pseudonym");
  xpc_object_t v24 = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t v24 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v24);
  xpc_object_t v24 = 0;
  if (v19 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
}

void sub_1004045DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_10040469C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004046DC()
{
}

void sub_1004046EC()
{
}

void *sub_100404700(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019C8AA0;
  result[1] = v3;
  return result;
}

uint64_t sub_100404748(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C8AA0;
  a2[1] = v2;
  return result;
}

void sub_100404774(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (int *)*a2;
  uint64_t v5 = (int *)(a2 + 1);
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v23 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v23 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v23 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      write_rest_value();
      std::string __p = &v23;
      long long v17 = "first";
      sub_100035E70((uint64_t)&__p, &v21, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      sub_1003B6534(v6 + 14, &v19);
      std::string __p = &v23;
      long long v17 = "second";
      sub_100035E70((uint64_t)&__p, &v19, &v20);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v19);
      xpc_object_t v19 = 0;
      xpc_object_t v11 = v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_release(v23);
      xpc_array_append_value(v4, v11);
      xpc_release(v11);
      xpc_object_t v12 = (int *)*((void *)v6 + 1);
      if (v12)
      {
        do
        {
          dispatch_object_t v13 = v12;
          xpc_object_t v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          dispatch_object_t v13 = (int *)*((void *)v6 + 2);
          BOOL v14 = *(void *)v13 == (void)v6;
          uint64_t v6 = v13;
        }
        while (!v14);
      }
      uint64_t v6 = v13;
    }
    while (v13 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v15 = v4;
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/carrier_entitlements_auth_state");
  xpc_object_t v23 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v18 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
}

void sub_100404A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100404AE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100404B24()
{
}

void sub_100404B34()
{
}

void *sub_100404B48(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019C8B30;
  result[1] = v3;
  return result;
}

uint64_t sub_100404B90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C8B30;
  a2[1] = v2;
  return result;
}

void sub_100404BBC(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v23 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v23 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v23 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      write_rest_value();
      std::string __p = &v23;
      long long v17 = "first";
      sub_100035E70((uint64_t)&__p, &v21, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      sub_1003B6A20(v6 + 7, &v19);
      std::string __p = &v23;
      long long v17 = "second";
      sub_100035E70((uint64_t)&__p, &v19, &v20);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v19);
      xpc_object_t v19 = 0;
      xpc_object_t v11 = v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_release(v23);
      xpc_array_append_value(v4, v11);
      xpc_release(v11);
      xpc_object_t v12 = (void *)v6[1];
      if (v12)
      {
        do
        {
          dispatch_object_t v13 = v12;
          xpc_object_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          dispatch_object_t v13 = (void *)v6[2];
          BOOL v14 = *v13 == (void)v6;
          uint64_t v6 = v13;
        }
        while (!v14);
      }
      uint64_t v6 = v13;
    }
    while (v13 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v15 = v4;
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/carrier_entitlements_reachability");
  xpc_object_t v23 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v18 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
}

void sub_100404E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100404F2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100404F6C()
{
}

void sub_100404F78(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v5 = "";
    __int16 v6 = 2080;
    uint64_t v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sCarrierEntitlementsImpl started", buf, 0x16u);
  }
  uint64_t v3 = *(void *)(v1 + 696);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 96))(v3);
  }
  operator delete();
}

void sub_100405084()
{
}

uint64_t *sub_1004050B0(void *a1)
{
  xpc_object_t v16 = a1;
  uint64_t v1 = *a1;
  memset(&v19, 0, sizeof(v19));
  memset(&v18, 0, sizeof(v18));
  std::mutex::lock((std::mutex *)(v1 + 536));
  std::string::operator=(&v19, (const std::string *)(v1 + 672));
  std::string::operator=(&v18, (const std::string *)(v1 + 624));
  std::mutex::unlock((std::mutex *)(v1 + 536));
  long long v17 = 0;
  CFStringRef v2 = (const __CFString *)kEntitlementsServerAddress;
  DevicePersistentCopyValue(&v20, kEntitlementsServerAddress, 0);
  sub_100056248(&v17, (CFTypeRef *)&v20);
  sub_1000577C4((const void **)&v20);
  if (v17) {
    uint64_t v3 = sub_1000810B8;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    DevicePersistentSaveValue(v2, 0);
    std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v19.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v1 + 56));
      __int16 v6 = ServiceMap;
      if (v7 < 0)
      {
        xpc_object_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v9 = 5381;
        do
        {
          uint64_t v7 = v9;
          unsigned int v10 = *v8++;
          uint64_t v9 = (33 * v9) ^ v10;
        }
        while (v10);
      }
      std::mutex::lock(ServiceMap);
      uint64_t v20 = v7;
      xpc_object_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v20);
      if (v11)
      {
        uint64_t v13 = v11[3];
        xpc_object_t v12 = (std::__shared_weak_count *)v11[4];
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v6);
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v12);
          char v14 = 0;
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      std::mutex::unlock(v6);
      xpc_object_t v12 = 0;
      char v14 = 1;
LABEL_16:
      (*(void (**)(uint64_t, std::string *, const __CFString *, const void *, void, void, uint64_t, void))(*(void *)v13 + 16))(v13, &v19, v2, v17, kCarrierEntitlementsWalletDomain, 0, 1, 0);
      if ((v14 & 1) == 0) {
        sub_10004D2C8(v12);
      }
    }
  }
  sub_1000558F4(&v17);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return sub_1003C2130((uint64_t *)&v16);
}

void sub_1004052C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v24);
  }
  sub_1000558F4(&a11);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_1003C2130(&a10);
  _Unwind_Resume(a1);
}

void sub_100405344(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100405364(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1004053B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 520);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 528);
    xpc_object_t v4 = *(void **)(a1 + 520);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      xpc_object_t v4 = *(void **)(a1 + 520);
    }
    *(void *)(a1 + 528) = v2;
    operator delete(v4);
  }
  xpc_object_t v8 = (void **)(a1 + 496);
  sub_10005CBF0(&v8);
  if (*(unsigned char *)(a1 + 480))
  {
    __int16 v6 = *(void **)(a1 + 456);
    if (v6)
    {
      *(void *)(a1 + 464) = v6;
      operator delete(v6);
    }
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(unsigned char *)(a1 + 352) && *(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(unsigned char *)(a1 + 320)) {
    sub_10019D50C(a1 + 120);
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void *sub_1004054F4@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = off_1019C8C10;
  uint64_t v5 = a1[1];
  result[3] = *a1;
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_100405564(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100405584(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8C10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1004055D8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1004055EC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1004014F8((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_100405644(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v2 + 32);
    }
  }
  return a1;
}

uint64_t *sub_1004056A8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1003FC924(*(void *)v1, v1 + 8, (void *)(v1 + 32), v1 + 40, v1 + 64, v1 + 88, (uint64_t *)(v1 + 112), *(unsigned char *)(v1 + 120));
  sub_100405724(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100405708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100405724(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1000346F8(v1 + 88, *(void **)(v1 + 96));
    sub_1001A297C(v1 + 64, *(void **)(v1 + 72));
    sub_1000346F8(v1 + 40, *(void **)(v1 + 48));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1004057A0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2[6] == *(void *)(a1 + 32))
    {
      uint64_t v3 = (unsigned __int8 *)v2[4];
      if (v3 == (unsigned __int8 *)(v2 + 5)) {
        goto LABEL_24;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
      while (sub_10001D294(v3 + 32, v4 + 32) && sub_1003B32FC(v3 + 56, v4 + 56))
      {
        uint64_t v5 = (unsigned __int8 *)*((void *)v3 + 1);
        __int16 v6 = v3;
        if (v5)
        {
          do
          {
            uint64_t v3 = v5;
            uint64_t v5 = *(unsigned __int8 **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v3 = (unsigned __int8 *)*((void *)v6 + 2);
            BOOL v7 = *(void *)v3 == (void)v6;
            __int16 v6 = v3;
          }
          while (!v7);
        }
        xpc_object_t v8 = (unsigned __int8 *)*((void *)v4 + 1);
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            xpc_object_t v8 = *(unsigned __int8 **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (unsigned __int8 *)*((void *)v4 + 2);
            BOOL v7 = *(void *)v9 == (void)v4;
            uint64_t v4 = v9;
          }
          while (!v7);
        }
        uint64_t v4 = v9;
        if (v3 == (unsigned __int8 *)(v2 + 5)) {
          goto LABEL_24;
        }
      }
    }
    unsigned int v10 = v2 + 5;
    sub_10010C01C((uint64_t)(v2 + 4), (void *)v2[5]);
    v2[4] = *(void *)(a1 + 16);
    xpc_object_t v11 = (void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 24);
    v2[5] = v12;
    uint64_t v13 = *(void *)(a1 + 32);
    v2[6] = v13;
    if (v13)
    {
      *(void *)(v12 + 16) = v10;
      *(void *)(a1 + 16) = v11;
      void *v11 = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      v2[4] = v10;
    }
    uint64_t v14 = v2[3];
    if (v14) {
      (*(void (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v2 + 4);
    }
  }
LABEL_24:
  sub_10010C01C(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t sub_100405918(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2[6] == *(void *)(a1 + 32))
    {
      uint64_t v3 = (void *)v2[4];
      if (v3 == v2 + 5) {
        goto LABEL_38;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
      while (sub_10001D294((unsigned __int8 *)v3 + 32, v4 + 32))
      {
        uint64_t v5 = *((unsigned __int8 *)v3 + 79);
        if ((v5 & 0x80u) == 0) {
          uint64_t v6 = *((unsigned __int8 *)v3 + 79);
        }
        else {
          uint64_t v6 = v3[8];
        }
        uint64_t v7 = v4[79];
        int v8 = (char)v7;
        if ((v7 & 0x80u) != 0) {
          uint64_t v7 = *((void *)v4 + 8);
        }
        if (v6 != v7) {
          break;
        }
        uint64_t v9 = (const void **)(v3 + 7);
        if (v8 >= 0) {
          unsigned int v10 = v4 + 56;
        }
        else {
          unsigned int v10 = (unsigned __int8 *)*((void *)v4 + 7);
        }
        if ((v5 & 0x80) != 0)
        {
          if (memcmp(*v9, v10, v3[8])) {
            break;
          }
        }
        else if (*((unsigned char *)v3 + 79))
        {
          while (*(unsigned __int8 *)v9 == *v10)
          {
            uint64_t v9 = (const void **)((char *)v9 + 1);
            ++v10;
            if (!--v5) {
              goto LABEL_21;
            }
          }
          break;
        }
LABEL_21:
        xpc_object_t v11 = (void *)v3[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            xpc_object_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v3[2];
            BOOL v13 = *v12 == (void)v3;
            uint64_t v3 = v12;
          }
          while (!v13);
        }
        uint64_t v14 = (unsigned __int8 *)*((void *)v4 + 1);
        if (v14)
        {
          do
          {
            xpc_object_t v15 = v14;
            uint64_t v14 = *(unsigned __int8 **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            xpc_object_t v15 = (unsigned __int8 *)*((void *)v4 + 2);
            BOOL v13 = *(void *)v15 == (void)v4;
            uint64_t v4 = v15;
          }
          while (!v13);
        }
        uint64_t v4 = v15;
        uint64_t v3 = v12;
        if (v12 == v2 + 5) {
          goto LABEL_38;
        }
      }
    }
    xpc_object_t v16 = v2 + 5;
    sub_10010C0E0((uint64_t)(v2 + 4), (void *)v2[5]);
    v2[4] = *(void *)(a1 + 16);
    long long v17 = (void *)(a1 + 24);
    uint64_t v18 = *(void *)(a1 + 24);
    v2[5] = v18;
    uint64_t v19 = *(void *)(a1 + 32);
    v2[6] = v19;
    if (v19)
    {
      *(void *)(v18 + 16) = v16;
      *(void *)(a1 + 16) = v17;
      *long long v17 = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      v2[4] = v16;
    }
    uint64_t v20 = v2[3];
    if (v20) {
      (*(void (**)(uint64_t, void *))(*(void *)v20 + 48))(v20, v2 + 4);
    }
  }
LABEL_38:
  sub_10010C0E0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t sub_100405AFC(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2[6] == *(void *)(a1 + 32))
    {
      uint64_t v3 = (unsigned __int8 *)v2[4];
      if (v3 == (unsigned __int8 *)(v2 + 5)) {
        goto LABEL_24;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
      while (sub_10001D294(v3 + 32, v4 + 32) && sub_1003B67CC((void *)v3 + 7, (void *)v4 + 7))
      {
        uint64_t v5 = (unsigned __int8 *)*((void *)v3 + 1);
        uint64_t v6 = v3;
        if (v5)
        {
          do
          {
            uint64_t v3 = v5;
            uint64_t v5 = *(unsigned __int8 **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v3 = (unsigned __int8 *)*((void *)v6 + 2);
            BOOL v7 = *(void *)v3 == (void)v6;
            uint64_t v6 = v3;
          }
          while (!v7);
        }
        int v8 = (unsigned __int8 *)*((void *)v4 + 1);
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            int v8 = *(unsigned __int8 **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (unsigned __int8 *)*((void *)v4 + 2);
            BOOL v7 = *(void *)v9 == (void)v4;
            uint64_t v4 = v9;
          }
          while (!v7);
        }
        uint64_t v4 = v9;
        if (v3 == (unsigned __int8 *)(v2 + 5)) {
          goto LABEL_24;
        }
      }
    }
    unsigned int v10 = v2 + 5;
    sub_10005CD2C((uint64_t)(v2 + 4), (char *)v2[5]);
    v2[4] = *(void *)(a1 + 16);
    xpc_object_t v11 = (void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 24);
    v2[5] = v12;
    uint64_t v13 = *(void *)(a1 + 32);
    v2[6] = v13;
    if (v13)
    {
      *(void *)(v12 + 16) = v10;
      *(void *)(a1 + 16) = v11;
      void *v11 = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      v2[4] = v10;
    }
    uint64_t v14 = v2[3];
    if (v14) {
      (*(void (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v2 + 4);
    }
  }
LABEL_24:
  sub_10005CD2C(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

uint64_t *sub_100405C74(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v12 = 0;
  uint64_t v5 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v12, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    BOOL v7 = v5;
    int v8 = *a3;
    uint64_t v6 = (uint64_t *)operator new(0x48uLL);
    uint64_t v9 = v6 + 4;
    if (*((char *)v8 + 23) < 0)
    {
      sub_10004FC84(v9, *(void **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      v6[6] = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v9 = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    sub_100046C38(a1, v12, v7, v6);
  }
  return v6;
}

void sub_100405D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  sub_1000C6EE8(v10, v9);
  _Unwind_Resume(a1);
}

void sub_100405D54(void ***a1)
{
  uint64_t v1 = **a1;
  sub_1003FCED0(v1);
  *(void *)long long buf = 1;
  *(void *)&uint8_t buf[8] = v1 + 46;
  long long v70 = 0;
  v71[0] = 0;
  *(void *)&uint8_t buf[16] = &v70;
  uint64_t v2 = (void *)v1[50];
  uint64_t v60 = v1;
  uint64_t v3 = v1 + 51;
  if (v2 == v1 + 51)
  {
    uint64_t v18 = 0;
    goto LABEL_32;
  }
  while (1)
  {
    *(void *)std::string __p = 0;
    uint64_t v4 = v70;
    if (*(uint64_t ***)&buf[16] == &v70)
    {
      uint64_t v6 = &v70;
      if (!v70) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v5 = &v70;
      if (v70)
      {
        do
        {
          uint64_t v6 = (uint64_t **)v4;
          uint64_t v4 = (uint64_t *)v4[1];
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t **)v5[2];
          BOOL v7 = *v6 == (uint64_t *)v5;
          uint64_t v5 = v6;
        }
        while (v7);
      }
      if ((sub_100046FE8(v6 + 4, (void **)v2 + 4) & 0x80) == 0)
      {
        int v8 = (uint64_t **)sub_100046ED4((uint64_t)&buf[16], __p, (void **)v2 + 4);
        goto LABEL_11;
      }
      if (!v70)
      {
LABEL_14:
        *(void *)std::string __p = &v70;
        int v8 = &v70;
LABEL_15:
        *((void *)&v63 + 1) = 0;
        uint64_t v9 = operator new(0x50uLL);
        uint64_t v10 = v9;
        uint64_t v62 = (uint64_t)v9;
        *(void *)&long long v63 = &v70;
        if (*((char *)v2 + 55) < 0)
        {
          sub_10004FC84(v9 + 32, (void *)v2[4], v2[5]);
        }
        else
        {
          long long v11 = *((_OWORD *)v2 + 2);
          *((void *)v9 + 6) = v2[6];
          *((_OWORD *)v9 + 2) = v11;
        }
        uint64_t v12 = v10 + 56;
        if (*((char *)v2 + 79) < 0)
        {
          sub_10004FC84(v12, (void *)v2[7], v2[8]);
        }
        else
        {
          long long v13 = *(_OWORD *)(v2 + 7);
          *((void *)v10 + 9) = v2[9];
          *(_OWORD *)uint64_t v12 = v13;
        }
        BYTE8(v63) = 1;
        uint64_t v14 = *(void *)__p;
        xpc_object_t v15 = (uint64_t *)v62;
        *(void *)uint64_t v62 = 0;
        v15[1] = 0;
        v15[2] = v14;
        *int v8 = v15;
        if (**(void **)&buf[16])
        {
          *(void *)&uint8_t buf[16] = **(void **)&buf[16];
          xpc_object_t v15 = *v8;
        }
        sub_100046C90(v70, v15);
        ++v71[0];
        uint64_t v62 = 0;
        sub_10010E764((uint64_t)&v62, 0);
        goto LABEL_24;
      }
    }
    *(void *)std::string __p = v6;
    int v8 = v6 + 1;
LABEL_11:
    if (!*v8) {
      goto LABEL_15;
    }
LABEL_24:
    xpc_object_t v16 = (void *)v2[1];
    if (v16)
    {
      do
      {
        long long v17 = v16;
        xpc_object_t v16 = (void *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        long long v17 = (void *)v2[2];
        BOOL v7 = *v17 == (void)v2;
        uint64_t v2 = v17;
      }
      while (!v7);
    }
    uint64_t v2 = v17;
    if (v17 == v3)
    {
      uint64_t v18 = v70;
LABEL_32:
      sub_10010C0E0((uint64_t)&buf[16], v18);
      long long v70 = 0;
      v71[0] = 0;
      *(void *)&uint8_t buf[16] = &v70;
      uint64_t v19 = (void **)v60[75];
      uint64_t v20 = (void **)(v60 + 76);
      if (v19 != v60 + 76)
      {
        do
        {
          uint64_t v61 = 0;
          (*(void (**)(const void **__return_ptr))(*(void *)v19[9] + 464))(&v61);
          if (v61) {
            xpc_object_t v21 = sub_1000810B8;
          }
          else {
            xpc_object_t v21 = 0;
          }
          if (v21)
          {
            uint64_t v62 = 0;
            long long v63 = 0uLL;
            ctu::cf::assign();
            uint64_t v22 = v62;
            long long v66 = 0;
            *(void *)std::string __p = v63;
            *(void *)&__p[7] = *(void *)((char *)&v63 + 7);
            char v23 = HIBYTE(v63);
            xpc_object_t v24 = (uint64_t **)sub_100046ED4((uint64_t)&buf[16], &v66, v19 + 4);
            uint64_t v25 = (uint64_t)*v24;
            if (!*v24)
            {
              *((void *)&v63 + 1) = 0;
              uint64_t v26 = operator new(0x50uLL);
              uint64_t v62 = (uint64_t)v26;
              *(void *)&long long v63 = &v70;
              BYTE8(v63) = 0;
              BOOL v27 = v26 + 4;
              if (*((char *)v19 + 55) < 0)
              {
                sub_10004FC84(v27, v19[4], (unint64_t)v19[5]);
                uint64_t v29 = (uint64_t *)v62;
              }
              else
              {
                long long v28 = *((_OWORD *)v19 + 2);
                v26[6] = v19[6];
                *(_OWORD *)BOOL v27 = v28;
                uint64_t v29 = v26;
              }
              v26[7] = 0;
              v26[8] = 0;
              v26[9] = 0;
              BYTE8(v63) = 1;
              uint64_t v30 = v66;
              *uint64_t v29 = 0;
              v29[1] = 0;
              void v29[2] = (uint64_t)v30;
              std::__shared_weak_count *v24 = v29;
              if (**(void **)&buf[16])
              {
                *(void *)&uint8_t buf[16] = **(void **)&buf[16];
                uint64_t v29 = *v24;
              }
              sub_100046C90(v70, v29);
              ++v71[0];
              uint64_t v25 = v62;
              uint64_t v62 = 0;
              sub_10010E764((uint64_t)&v62, 0);
            }
            if (*(char *)(v25 + 79) < 0) {
              operator delete(*(void **)(v25 + 56));
            }
            uint64_t v31 = *(void *)__p;
            *(void *)(v25 + 56) = v22;
            *(void *)(v25 + 64) = v31;
            *(void *)(v25 + 71) = *(void *)&__p[7];
            *(unsigned char *)(v25 + 79) = v23;
          }
          sub_1000558F4(&v61);
          uint64_t v32 = (void **)v19[1];
          if (v32)
          {
            do
            {
              char v33 = v32;
              uint64_t v32 = (void **)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              char v33 = (void **)v19[2];
              BOOL v7 = *v33 == v19;
              uint64_t v19 = v33;
            }
            while (!v7);
          }
          uint64_t v19 = v33;
        }
        while (v33 != v20);
      }
      sub_100405918((uint64_t)buf);
      uint64_t v62 = 1;
      *(void *)&long long v63 = v60 + 60;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      *((void *)&v63 + 1) = &v64;
      uint64_t v34 = (void *)v60[64];
      if (v34 == v60 + 65)
      {
        uint64_t v45 = 0;
LABEL_81:
        sub_10005CD2C((uint64_t)&v63 + 8, v45);
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        *((void *)&v63 + 1) = &v64;
        BOOL v46 = (void **)v60[75];
        if (v46 != v20)
        {
          do
          {
            uint64_t v47 = (*(uint64_t (**)(void *))(*(void *)v46[9] + 104))(v46[9]);
            uint64_t v49 = v48;
            *(void *)long long buf = v46 + 4;
            uint64_t v50 = sub_100405C74((uint64_t **)&v63 + 1, v46 + 4, (long long **)buf);
            v50[7] = v47;
            v50[8] = v49;
            BOOL v51 = v60[5];
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v52 = (void *)*((unsigned __int8 *)v46 + 55);
              BOOL v53 = (char)v52 < 0;
              if ((char)v52 < 0) {
                uint64_t v52 = v46[5];
              }
              if (v53) {
                uint64_t v54 = (uint64_t *)v46[4];
              }
              else {
                uint64_t v54 = (uint64_t *)(v46 + 4);
              }
              if (v52) {
                BOOL v55 = v54;
              }
              else {
                BOOL v55 = (uint64_t *)"<invalid>";
              }
              long long v66 = (long long *)(v46 + 4);
              xpc_object_t v56 = sub_100405C74((uint64_t **)&v63 + 1, v46 + 4, &v66);
              sub_1003B6830(v56 + 7, __p);
              xpc_object_t v57 = __p;
              if (v68 < 0) {
                xpc_object_t v57 = *(unsigned char **)__p;
              }
              *(_DWORD *)long long buf = 136315906;
              *(void *)&uint8_t buf[4] = "";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "";
              *(_WORD *)&unsigned char buf[22] = 2080;
              long long v70 = v55;
              LOWORD(v71[0]) = 2082;
              *(void *)((char *)v71 + 2) = v57;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#I %s%sreachability [%s]: %{public}s", buf, 0x2Au);
              if (v68 < 0) {
                operator delete(*(void **)__p);
              }
            }
            xpc_object_t v58 = (void **)v46[1];
            if (v58)
            {
              do
              {
                uint64_t v59 = v58;
                xpc_object_t v58 = (void **)*v58;
              }
              while (v58);
            }
            else
            {
              do
              {
                uint64_t v59 = (void **)v46[2];
                BOOL v7 = *v59 == v46;
                BOOL v46 = v59;
              }
              while (!v7);
            }
            BOOL v46 = v59;
          }
          while (v59 != v20);
        }
        sub_100405AFC((uint64_t)&v62);
        operator delete();
      }
      while (2)
      {
        *(void *)std::string __p = 0;
        uint64_t v35 = v64;
        if (*((uint64_t ***)&v63 + 1) == &v64)
        {
          uint64_t v37 = &v64;
          if (!v64) {
            goto LABEL_66;
          }
        }
        else
        {
          BOOL v36 = &v64;
          if (v64)
          {
            do
            {
              uint64_t v37 = (uint64_t **)v35;
              uint64_t v35 = (uint64_t *)v35[1];
            }
            while (v35);
          }
          else
          {
            do
            {
              uint64_t v37 = (uint64_t **)v36[2];
              BOOL v7 = *v37 == (uint64_t *)v36;
              BOOL v36 = v37;
            }
            while (v7);
          }
          if ((sub_100046FE8(v37 + 4, (void **)v34 + 4) & 0x80) == 0)
          {
            long long v38 = (uint64_t **)sub_100046ED4((uint64_t)&v63 + 8, __p, (void **)v34 + 4);
            goto LABEL_63;
          }
          if (!v64)
          {
LABEL_66:
            *(void *)std::string __p = &v64;
            long long v38 = &v64;
            goto LABEL_67;
          }
        }
        *(void *)std::string __p = v37;
        long long v38 = v37 + 1;
LABEL_63:
        if (!*v38)
        {
LABEL_67:
          *(void *)&uint8_t buf[16] = 0;
          uint64_t v39 = (char *)operator new(0x48uLL);
          *(void *)long long buf = v39;
          *(void *)&uint8_t buf[8] = &v64;
          uint64_t v40 = v39 + 32;
          if (*((char *)v34 + 55) < 0)
          {
            sub_10004FC84(v40, (void *)v34[4], v34[5]);
          }
          else
          {
            long long v41 = *((_OWORD *)v34 + 2);
            *((void *)v39 + 6) = v34[6];
            *(_OWORD *)uint64_t v40 = v41;
          }
          *(_OWORD *)(v39 + 56) = *(_OWORD *)(v34 + 7);
          uint64_t v42 = *(void *)__p;
          *(void *)uint64_t v39 = 0;
          *((void *)v39 + 1) = 0;
          *((void *)v39 + 2) = v42;
          *long long v38 = (uint64_t *)v39;
          if (**((void **)&v63 + 1))
          {
            *((void *)&v63 + 1) = **((void **)&v63 + 1);
            uint64_t v39 = (char *)*v38;
          }
          sub_100046C90(v64, (uint64_t *)v39);
          ++v65;
        }
        long long v43 = (void *)v34[1];
        if (v43)
        {
          do
          {
            long long v44 = v43;
            long long v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            long long v44 = (void *)v34[2];
            BOOL v7 = *v44 == (void)v34;
            uint64_t v34 = v44;
          }
          while (!v7);
        }
        uint64_t v34 = v44;
        if (v44 == v60 + 65)
        {
          uint64_t v45 = (char *)v64;
          goto LABEL_81;
        }
        continue;
      }
    }
  }
}

void sub_1004064CC()
{
}

uint64_t *sub_1004065CC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1003FD414(*(void *)v1, v1 + 8, *(_DWORD *)(v1 + 32));
  sub_1000E890C(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100406618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

unsigned char *sub_100406634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  BOOL v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_10004FC84(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v7 + 7) = *(void *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1004066CC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1000C6EE8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004066E8(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2[6] == *(void *)(a1 + 32))
    {
      uint64_t v3 = (void *)v2[4];
      if (v3 == v2 + 5) {
        goto LABEL_31;
      }
      uint64_t v4 = *(void **)(a1 + 16);
      while (sub_10001D294((unsigned __int8 *)v3 + 32, (unsigned __int8 *)v4 + 32))
      {
        int v5 = *((unsigned __int8 *)v4 + 60);
        if (*((unsigned char *)v3 + 60)) {
          BOOL v6 = v5 == 0;
        }
        else {
          BOOL v6 = 1;
        }
        if (v6)
        {
          if ((*((unsigned char *)v3 + 60) != 0) != (v5 != 0)) {
            break;
          }
        }
        else if (*((_DWORD *)v3 + 14) != *((_DWORD *)v4 + 14))
        {
          break;
        }
        BOOL v7 = (void *)v3[1];
        if (v7)
        {
          do
          {
            int v8 = v7;
            BOOL v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            int v8 = (void *)v3[2];
            BOOL v6 = *v8 == (void)v3;
            uint64_t v3 = v8;
          }
          while (!v6);
        }
        uint64_t v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v4[2];
            BOOL v6 = *v10 == (void)v4;
            uint64_t v4 = v10;
          }
          while (!v6);
        }
        uint64_t v4 = v10;
        uint64_t v3 = v8;
        if (v8 == v2 + 5) {
          goto LABEL_31;
        }
      }
    }
    long long v11 = v2 + 5;
    sub_10005CD2C((uint64_t)(v2 + 4), (char *)v2[5]);
    v2[4] = *(void *)(a1 + 16);
    uint64_t v12 = (void *)(a1 + 24);
    uint64_t v13 = *(void *)(a1 + 24);
    v2[5] = v13;
    uint64_t v14 = *(void *)(a1 + 32);
    v2[6] = v14;
    if (v14)
    {
      *(void *)(v13 + 16) = v11;
      *(void *)(a1 + 16) = v12;
      *uint64_t v12 = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      v2[4] = v11;
    }
    uint64_t v15 = v2[3];
    if (v15) {
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 48))(v15, v2 + 4);
    }
  }
LABEL_31:
  sub_10005CD2C(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

uint64_t sub_100406890()
{
  if ((byte_101B09E98 & 1) == 0)
  {
    byte_101B09E98 = 1;
    return __cxa_atexit((void (*)(void *))sub_10021691C, &stru_101B09E48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1004068CC()
{
}

void sub_100406924()
{
}

void *sub_100406948(void *a1)
{
  uint64_t v2 = (ctu::OsLogLogger *)(a1 + 1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v4, kCtLoggingSystemName, "sysconf.pref");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v5, &v4);
  ctu::OsLogLogger::OsLogLogger(v2, (const ctu::OsLogLogger *)v5);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v5);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v4);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = off_1019C8C60;
  a1[4] = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.CommCenter:registerForAirplaneModeNotifications", @"com.apple.radios.plist");
  a1[8] = 0;
  return a1;
}

void sub_100406A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 3);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  ctu::OsLogLogger::~OsLogLogger(v13);
  SCPreferencesInterface::~SCPreferencesInterface(v12);
  _Unwind_Resume(a1);
}

void sub_100406A78(uint64_t a1, dispatch_queue_t *a2, uint64_t a3)
{
  sub_1003351AC((void *)(a1 + 40), a3);
  context.version = 0;
  context.info = (void *)a1;
  memset(&context.retain, 0, 24);
  if (SCPreferencesSetCallback(*(SCPreferencesRef *)(a1 + 32), (SCPreferencesCallBack)sub_100406B2C, &context))
  {
    SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 32), *a2);
  }
  else
  {
    int v5 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to create SC preferences", v6, 2u);
    }
  }
}

void sub_100406B2C(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 && (a2 & 2) != 0)
  {
    uint64_t v3 = *(void *)(a3 + 64);
    if (v3)
    {
      OsLogContext v4 = *(void (**)(void))(*(void *)v3 + 48);
      v4();
    }
    else
    {
      int v5 = *(NSObject **)(a3 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)BOOL v6 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No callback", v6, 2u);
      }
    }
  }
}

uint64_t sub_100406BE0(SCPreferencesRef *a1)
{
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  return SCPreferencesSetCallback(a1[4], 0, &context);
}

uint64_t sub_100406C18(uint64_t a1)
{
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 32));
  CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 32), @"AirplaneMode");
  if (!Value) {
    goto LABEL_6;
  }
  CFBooleanRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFBooleanGetTypeID())
  {
    BOOL v7 = *(NSObject **)(a1 + 8);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    BOOL v5 = 0;
    int v6 = 0;
    if (!v8) {
      return v5 | (v6 << 8);
    }
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#N AirplaneMode value wasn't a BOOLean", v10, 2u);
LABEL_6:
    BOOL v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  BOOL v5 = CFBooleanGetValue(v3) != 0;
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t sub_100406CE4(uint64_t a1)
{
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 32));
  CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 32), @"LowPowerMode");
  if (!Value) {
    goto LABEL_6;
  }
  CFBooleanRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFBooleanGetTypeID())
  {
    BOOL v7 = *(NSObject **)(a1 + 8);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    BOOL v5 = 0;
    int v6 = 0;
    if (!v8) {
      return v5 | (v6 << 8);
    }
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#N LowPower value wasn't a BOOLean", v10, 2u);
LABEL_6:
    BOOL v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  BOOL v5 = CFBooleanGetValue(v3) != 0;
  int v6 = 1;
  return v5 | (v6 << 8);
}

void sub_100406DB0(uint64_t a1)
{
  *(void *)a1 = off_1019C8C60;
  sub_10003B34C((void *)(a1 + 40));
  sub_100406EA4((const void **)(a1 + 32));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));

  SCPreferencesInterface::~SCPreferencesInterface((SCPreferencesInterface *)a1);
}

void sub_100406E20(uint64_t a1)
{
  *(void *)a1 = off_1019C8C60;
  sub_10003B34C((void *)(a1 + 40));
  sub_100406EA4((const void **)(a1 + 32));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));
  SCPreferencesInterface::~SCPreferencesInterface((SCPreferencesInterface *)a1);

  operator delete();
}

const void **sub_100406EA4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_100406ED8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100406F58(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100406F94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100406FCC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100406FFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_100407040(void *a1, void *a2)
{
  CFTypeID v4 = (ctu::OsLogLogger *)(a1 + 1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, kCtLoggingSystemName, "wea");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v8, &v7);
  ctu::OsLogLogger::OsLogLogger(v4, (const ctu::OsLogLogger *)v8);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = off_1019C8D80;
  a1[4] = *a2;
  uint64_t v5 = a2[1];
  a1[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  return a1;
}

void sub_100407120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  LocationDelegateInterface::~LocationDelegateInterface(v2);
  _Unwind_Resume(a1);
}

void sub_100407154(uint64_t a1, void *a2)
{
}

id sub_10040715C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    return [v2 isLocationServiceEnabled];
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Invalid Location module", v5, 2u);
    }
    return 0;
  }
}

id sub_1004071F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    return [v2 isCircularGeofenceSupported];
  }
  else
  {
    CFBooleanRef v3 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid Location module", v5, 2u);
    }
    return 0;
  }
}

id sub_100407284(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    return [v2 isPolygonalGeofenceSupported];
  }
  else
  {
    CFBooleanRef v3 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid Location module", v5, 2u);
    }
    return 0;
  }
}

void sub_100407318(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I Starting..", v2, 2u);
  }
}

void sub_100407378(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I Ending..", v2, 2u);
  }
}

void sub_1004073D8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  if (*(void *)(a1 + 48))
  {
    id v12 = objc_alloc((Class)NSString);
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    id v17 = [v12 initWithUTF8String:a2];
    uint64_t v13 = objc_msgSend(*(id *)(a1 + 48), "setupCircularGeoFence:withName:", a4, a5, a6);
    uint64_t v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    void *v14 = off_1019C8EF0;
    id v15 = v13;
    *((_DWORD *)v14 + 6) = 0;
    void v14[4] = v15;
    *a3 = v14 + 3;
    a3[1] = v14;
  }
  else
  {
    xpc_object_t v16 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid Location module", buf, 2u);
    }
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_100407530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100407550(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*(void *)(a1 + 48))
  {
    id v8 = objc_alloc((Class)NSString);
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    id v9 = [v8 initWithUTF8String:a3];
    uint64_t v10 = *(void **)(a1 + 48);
    xpc_object_t v16 = 0;
    uint64_t v17 = 0;
    std::string __p = 0;
    sub_1004081A4(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    long long v11 = [v10 setupPolygonalGeoFence:&__p withName:v9];
    id v12 = operator new(0x28uLL);
    v12[1] = 0;
    v12[2] = 0;
    *id v12 = off_1019C8EF0;
    id v13 = v11;
    *((_DWORD *)v12 + 6) = 0;
    void v12[4] = v13;
    *a4 = v12 + 3;
    a4[1] = v12;

    if (__p)
    {
      xpc_object_t v16 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v14 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid Location module", buf, 2u);
    }
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_100407690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004076C4(uint64_t a1, uint64_t a2)
{
  CFBooleanRef v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)a2 + 8);
    [v3 stopGeofence:v4];
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid Location module", v6, 2u);
    }
  }
}

void sub_10040775C(uint64_t a1, uint64_t a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v5;
  id v9 = sub_10004D37C(&v4[1].__m_.__sig, &v13);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_9:
    std::mutex::unlock(v4);
    uint64_t v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v9[3];
  uint64_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2);
LABEL_11:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_10040786C(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100407888(uint64_t a1, uint64_t a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v5;
  id v9 = sub_10004D37C(&v4[1].__m_.__sig, &v13);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_9:
    std::mutex::unlock(v4);
    uint64_t v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v9[3];
  uint64_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, a2);
LABEL_11:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_100407998(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004079B4(uint64_t a1, uint64_t a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v5;
  id v9 = sub_10004D37C(&v4[1].__m_.__sig, &v13);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_9:
    std::mutex::unlock(v4);
    uint64_t v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v9[3];
  uint64_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 40))(v11, a2);
LABEL_11:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_100407AC4(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100407AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    unsigned int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, &v15);
  if (!v11)
  {
    uint64_t v13 = 0;
LABEL_9:
    std::mutex::unlock(v6);
    char v12 = 0;
    char v14 = 1;
    if (!v13) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v13 = v11[3];
  char v12 = (std::__shared_weak_count *)v11[4];
  if (!v12) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  char v14 = 0;
  if (v13) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 64))(v13, a2, a3);
LABEL_11:
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_100407C00(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100407C1C(uint64_t a1, uint64_t a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v13);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_9:
    std::mutex::unlock(v4);
    unsigned int v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v9[3];
  unsigned int v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a2);
LABEL_11:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_100407D2C(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100407D48(uint64_t a1, uint64_t a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v13);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_9:
    std::mutex::unlock(v4);
    unsigned int v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v9[3];
  unsigned int v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 56))(v11, a2);
LABEL_11:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_100407E58(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100407E74(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v11 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v11);
  if (!v7)
  {
    uint64_t v9 = 0;
LABEL_9:
    std::mutex::unlock(v2);
    unsigned int v8 = 0;
    char v10 = 1;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v9 = v7[3];
  unsigned int v8 = (std::__shared_weak_count *)v7[4];
  if (!v8) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v2);
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v8);
  char v10 = 0;
  if (v9) {
LABEL_10:
  }
    (*(void (**)(uint64_t))(*(void *)v9 + 80))(v9);
LABEL_11:
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
}

void sub_100407F7C(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100407F9C(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 32));
  uint64_t v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v11 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v11);
  if (!v7)
  {
    uint64_t v9 = 0;
LABEL_9:
    std::mutex::unlock(v2);
    unsigned int v8 = 0;
    char v10 = 1;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v9 = v7[3];
  unsigned int v8 = (std::__shared_weak_count *)v7[4];
  if (!v8) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v2);
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v8);
  char v10 = 0;
  if (v9) {
LABEL_10:
  }
    (*(void (**)(uint64_t))(*(void *)v9 + 72))(v9);
LABEL_11:
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
}

void sub_1004080A4(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004080C4(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    char v1 = *(void **)(a1 + 48);
    [v1 resetMonitoredRegions];
  }
  else
  {
    uint64_t v2 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v3 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Invalid Location module", v3, 2u);
    }
  }
}

id sub_100408154@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = *(id *)(a1 + 48);
  if (result) {
    return [result getCurrentLocation];
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_10040816C(uint64_t a1)
{
  sub_10040827C(a1);

  operator delete();
}

void *sub_1004081A4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    id result = sub_100408220(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100408204(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100408220(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100408264();
  }
  id result = (char *)sub_10006A794((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_100408264()
{
}

void sub_10040827C(uint64_t a1)
{
  *(void *)a1 = off_1019C8D80;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));

  LocationDelegateInterface::~LocationDelegateInterface((LocationDelegateInterface *)a1);
}

void sub_1004082F4(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x50uLL);
  sub_100408368(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000B3BC8((uint64_t)a2, v4 + 5, (uint64_t)(v4 + 3));
}

void sub_100408354(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100408368(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1019C8EA0;
  sub_100407040(a1 + 3, a2);
  return a1;
}

void sub_1004083B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004083C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004083E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100408438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void sub_100408460(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100408480(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019C8EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1004084D4(uint64_t a1)
{
}

void sub_1004084E0(uint64_t a1)
{
  *(void *)a1 = off_1019C8F40;
  uint64_t v2 = *(void *)(a1 + 264);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1000D3AC0(a1 + 392);
  ATCSDPCQueue::~ATCSDPCQueue((ATCSDPCQueue *)(a1 + 288));
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    sub_10004D2C8(v3);
  }
  ATCSTimer::~ATCSTimer((ATCSTimer *)(a1 + 96));
  ATCSTimer::~ATCSTimer((ATCSTimer *)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4) {
    sub_10004D2C8(v4);
  }

  ctu::concurrency::Monitor::~Monitor((ctu::concurrency::Monitor *)a1);
}

void sub_1004085E8(uint64_t a1)
{
  sub_1004084E0(a1);

  operator delete();
}

void sub_100408620()
{
}

void sub_100408970(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v14 + 400);
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  ATCSDPCQueue::~ATCSDPCQueue(v17);
  if (*(char *)(v14 + 263) < 0) {
    operator delete(*(void **)(v14 + 240));
  }
  if (*(char *)(v14 + 239) < 0) {
    operator delete(*(void **)(v14 + 216));
  }
  if (*(char *)(v14 + 215) < 0) {
    operator delete(*(void **)(v14 + 192));
  }
  if (*(char *)(v14 + 191) < 0) {
    operator delete(*(void **)(v14 + 168));
  }
  if (*(char *)(v14 + 167) < 0) {
    operator delete(*(void **)(v14 + 144));
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v14 + 136);
  if (v19) {
    sub_10004D2C8(v19);
  }
  ATCSTimer::~ATCSTimer(v16);
  ATCSTimer::~ATCSTimer(v15);
  uint64_t v20 = *(std::__shared_weak_count **)(v14 + 48);
  if (v20) {
    sub_10004D2C8(v20);
  }
  ctu::concurrency::Monitor::~Monitor((ctu::concurrency::Monitor *)v14);
  operator delete();
}

void sub_100408AB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v10 = 0;
  if (*(char *)(v1 + 167) < 0)
  {
    sub_10004FC84(__dst, *(void **)(v1 + 144), *(void *)(v1 + 152));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(v1 + 144);
    uint64_t v10 = *(void *)(v1 + 160);
  }
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  if (*(char *)(v1 + 215) < 0)
  {
    sub_10004FC84(v7, *(void **)(v1 + 192), *(void *)(v1 + 200));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(v1 + 192);
    uint64_t v8 = *(void *)(v1 + 208);
  }
  uint64_t v2 = dispatch_group_create();
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  if (SHIBYTE(v10) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    uint64_t v6 = v10;
  }
  ctu::path_join_impl();
  if ((sub_100101FC0((const char *)__p) & 1) == 0)
  {
    CSILogger::CSILogger();
    char v3 = v13;
    CSILogger::~CSILogger((CSILogger *)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = __p;
      if (v6 < 0) {
        uint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      char v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Module: Failed on removing %s\n", buf, 0xCu);
    }
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (v2) {
    dispatch_release(v2);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100408C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    dispatch_release(v28);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_100408CF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v5;
  *(void *)(a1 + 136) = v4;
  if (v6) {
    sub_10004D2C8(v6);
  }
  sub_10003ED78((std::string *)(a1 + 144), (char *)a2[3]);
  sub_10003ED78((std::string *)(a1 + 168), (char *)a2[4]);
  sub_10003ED78((std::string *)(a1 + 192), (char *)a2[5]);
  sub_10003ED78((std::string *)(a1 + 216), (char *)a2[6]);
  *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 4);
  operator new();
}

const char *sub_100408DB4(unsigned int a1)
{
  if (a1 < 7) {
    return off_1019C91E8[a1];
  }
  __TUAssertTrigger();
  return "";
}

void sub_100408DF4(uint64_t a1, unsigned int a2)
{
  CSILogger::CSILogger();
  uint64_t v4 = v11;
  CSILogger::~CSILogger((CSILogger *)&v7);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = sub_100408DB4(*(_DWORD *)(a1 + 272));
    uint64_t v6 = sub_100408DB4(a2);
    int v7 = 136315394;
    uint64_t v8 = v5;
    __int16 v9 = 2080;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Module: changes state from %s to %s\n", (uint8_t *)&v7, 0x16u);
  }
  *(_DWORD *)(a1 + 272) = a2;
}

uint64_t sub_100408ED8(int a1, int a2, int a3, void *aBlock)
{
  return ctu::concurrency::Monitor::notifyOnCompletion();
}

void sub_100408F7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v2 + 272))
  {
    CSILogger::CSILogger();
    char v3 = v9;
    CSILogger::~CSILogger((CSILogger *)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100408DB4(*(_DWORD *)(v2 + 272));
      *(_DWORD *)long long buf = 136315394;
      uint64_t v6 = v4;
      __int16 v7 = 2080;
      uint64_t v8 = "Idle";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Module: waiting for state change from %s to %s\n", buf, 0x16u);
    }
    sub_100408ED8(v2, *(_DWORD *)(a1 + 56), *(void *)(a1 + 48), *(void **)(a1 + 32));
  }
  else
  {
    sub_100408DF4(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56));
    dispatch_group_enter(*(dispatch_group_t *)(v2 + 56));
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    ctu::concurrency::Monitor::notifyOnCompletion();
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 56));
  }
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t sub_100409110(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100408DF4(v2, 0);
  char v3 = *(ATCSDPCQueue::Callback **)(a1 + 40);

  return ATCSDPCQueue::enqueue((ATCSDPCQueue *)(v2 + 288), v3);
}

void sub_100409158()
{
  CSILogger::CSILogger();
  uint64_t v0 = v2;
  CSILogger::~CSILogger((CSILogger *)v1);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#I Work Start\n", v1, 2u);
  }
}

uint64_t sub_1004091CC()
{
  CSILogger::CSILogger();
  uint64_t v0 = v3;
  CSILogger::~CSILogger((CSILogger *)v2);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#I Work Stop\n", v2, 2u);
  }
  return 1;
}

uint64_t sub_100409244(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11 = (CSILogger *)CSILogger::CSILogger();
  CSILogger::~CSILogger(v11);
  if (os_log_type_enabled((os_log_t)buf.st_atimespec.tv_sec, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.st_dev) = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)buf.st_atimespec.tv_sec, OS_LOG_TYPE_DEFAULT, "#I Work Snapshot\n", (uint8_t *)&buf, 2u);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a5;
    uint64_t v42 = *(void *)(a5 + 16);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_10004FC84(v39, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)a6;
    uint64_t v40 = *(void *)(a6 + 16);
  }
  uint64_t v52 = 0;
  memset(v51, 0, sizeof(v51));
  *(_OWORD *)uint64_t v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  *(_OWORD *)uint64_t v48 = 0u;
  if (SHIBYTE(v42) < 0)
  {
    sub_10004FC84(__src, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)__dst;
    uint64_t v46 = v42;
  }
  if (SHIBYTE(v40) < 0)
  {
    sub_10004FC84(v43, v39[0], (unint64_t)v39[1]);
  }
  else
  {
    *(_OWORD *)long long v43 = *(_OWORD *)v39;
    uint64_t v44 = v40;
  }
  char v12 = (CSILogger *)CSILogger::CSILogger();
  tv_sec = buf.st_atimespec.tv_sec;
  CSILogger::~CSILogger(v12);
  if (os_log_type_enabled(tv_sec, OS_LOG_TYPE_DEFAULT))
  {
    buf.st_dev = 136315394;
    *(void *)&buf.st_mode = "snapshotInternalPrepare";
    WORD2(buf.st_ino) = 1024;
    *(_DWORD *)((char *)&buf.st_ino + 6) = a4;
    _os_log_impl((void *)&_mh_execute_header, tv_sec, OS_LOG_TYPE_DEFAULT, "#I %s isResetting %u\n", (uint8_t *)&buf, 0x12u);
  }
  *(unsigned char *)(a1 + 384) = a4;
  uint64_t v14 = (void *)(a1 + 216);
  if (sub_1001025CC(a1 + 216, (const void **)"/tmp/"))
  {
    unint64_t v15 = (CSILogger *)CSILogger::CSILogger();
    xpc_object_t v16 = buf.st_atimespec.tv_sec;
    CSILogger::~CSILogger(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      buf.st_dev = 136315138;
      *(void *)&buf.st_mode = "/tmp/";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Copied workspace into %s\n", (uint8_t *)&buf, 0xCu);
    }
  }
  sub_100101ADC((const char *)v43, 493, 1);
  memset(&buf, 0, 72);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (HIBYTE(v46))
    {
      *(_OWORD *)std::string __p = *(_OWORD *)__src;
      uint64_t v56 = v46;
      goto LABEL_25;
    }
LABEL_27:
    sub_10044AB4C((uint64_t)&buf);
    goto LABEL_28;
  }
  if (!__src[1]) {
    goto LABEL_27;
  }
  sub_10004FC84(__p, __src[0], (unint64_t)__src[1]);
LABEL_25:
  sub_10044ABFC((uint64_t)&buf, (char *)__p);
  if (SHIBYTE(v56) < 0) {
    operator delete(__p[0]);
  }
LABEL_28:
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v54 = 0;
  sub_10044ACC4((unsigned __int16 *)&buf, &v57);
  uint64_t v17 = (__darwin_ino64_t *)(a1 + 192);
  sub_1002055B4((const void **)(a1 + 192), (const void **)&v57.__r_.__value_.__l.__data_, v53);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  CSILogger::CSILogger();
  uint64_t v18 = v58;
  CSILogger::~CSILogger((CSILogger *)&v57);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = v53;
    if (v54 < 0) {
      uint64_t v19 = (void **)v53[0];
    }
    LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Saving log files as %s-*\n", (uint8_t *)&v57, 0xCu);
  }
  sub_10044AE24((uint64_t)&buf);
  sub_10044ACC4((unsigned __int16 *)&buf, &v57);
  std::string::operator=((std::string *)(a1 + 240), &v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  CSILogger::CSILogger();
  uint64_t v20 = v58;
  CSILogger::~CSILogger((CSILogger *)&v57);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    p_st_uid = &buf.st_uid;
    if (buf.st_atimespec.tv_sec < 0) {
      p_st_uid = *(uid_t **)&buf.st_uid;
    }
    LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_st_uid;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Saving traces to %s-*\n", (uint8_t *)&v57, 0xCu);
  }
  uint64_t v52 = 0;
  memset(v51, 0, sizeof(v51));
  *(_OWORD *)uint64_t v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  *(_OWORD *)uint64_t v48 = 0u;
  sub_10044AACC((uint64_t)&v47, (uint64_t)&buf);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(&v51[1], *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v51[1] = *(_OWORD *)a2;
    v51[3] = *(void **)(a2 + 16);
  }
  LOBYTE(v52) = *(unsigned char *)(a1 + 384);
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(buf.st_mtimespec.tv_nsec) < 0) {
    operator delete((void *)buf.st_atimespec.tv_nsec);
  }
  if (SHIBYTE(buf.st_atimespec.tv_sec) < 0) {
    operator delete(*(void **)&buf.st_uid);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__src[0]);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 88))(a1, &v51[1]);
  sub_100058DB0(&v57, "/var/wireless/Library/Logs/vinylscratch/");
  memset(&buf, 0, sizeof(buf));
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v57;
  }
  else {
    uint64_t v22 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  int v23 = stat((const char *)v22, &buf);
  int v24 = v23;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v24) {
      goto LABEL_80;
    }
  }
  else if (v23)
  {
    goto LABEL_80;
  }
  uint64_t v25 = (const char *)sub_100058DB0(&buf, "/var/wireless/Library/Logs/vinylscratch/");
  int v26 = sub_100102D40(v25, *(_DWORD *)(a1 + 448));
  if (SHIBYTE(buf.st_gid) < 0) {
    operator delete(*(void **)&buf.st_dev);
  }
  if (v26 != -1)
  {
    if (SHIBYTE(v49[0]) >= 0) {
      size_t v27 = HIBYTE(v49[0]);
    }
    else {
      size_t v27 = (size_t)v48[1];
    }
    memset(&buf, 0, 24);
    p_stat buf = &buf;
    sub_1000C140C((uint64_t)&buf, v27 + 6);
    if ((buf.st_gid & 0x80000000) != 0) {
      p_stat buf = *(stat **)&buf.st_dev;
    }
    if (v27)
    {
      if (SHIBYTE(v49[0]) >= 0) {
        uint64_t v30 = v48;
      }
      else {
        uint64_t v30 = (void **)v48[0];
      }
      memmove(p_buf, v30, v27);
    }
    strcpy((char *)p_buf + v27, "-vinyl");
    if ((buf.st_gid & 0x80000000) == 0) {
      uint64_t v31 = (const std::__fs::filesystem::path *)&buf;
    }
    else {
      uint64_t v31 = *(const std::__fs::filesystem::path **)&buf.st_dev;
    }
    rename((const std::__fs::filesystem::path *)"/var/wireless/Library/Logs/vinylscratch/", v31, v29);
    sub_100058DB0(&v57, "/var/wireless/Library/Logs/vinylscratch/");
    sub_100103054((uint64_t *)&v57, v26);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.st_gid) < 0) {
      operator delete(*(void **)&buf.st_dev);
    }
  }
LABEL_80:
  if (sub_100101ADC((const char *)(a1 + 192), 493, 1))
  {
    int v32 = sub_100102D40((const char *)(a1 + 192), *(_DWORD *)(a1 + 448));
    if (v32 != -1)
    {
      if ((sub_1001025CC(a1 + 216, (const void **)(a1 + 192)) & 1) == 0)
      {
        char v33 = (CSILogger *)CSILogger::CSILogger();
        uint64_t v34 = buf.st_atimespec.tv_sec;
        CSILogger::~CSILogger(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a1 + 239) < 0) {
            uint64_t v14 = (void *)*v14;
          }
          __darwin_ino64_t v35 = a1 + 192;
          if (*(char *)(a1 + 215) < 0) {
            __darwin_ino64_t v35 = *v17;
          }
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = v14;
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I Moving the workspace folder (%s) to snapshot folder (%s) has failed!\n", (uint8_t *)&buf, 0x16u);
        }
      }
      sub_100103054((uint64_t *)(a1 + 192), v32);
    }
  }
  else
  {
    BOOL v36 = (CSILogger *)CSILogger::CSILogger();
    uint64_t v37 = buf.st_atimespec.tv_sec;
    CSILogger::~CSILogger(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 215) < 0) {
        uint64_t v17 = (__darwin_ino64_t *)*v17;
      }
      buf.st_dev = 136315138;
      *(void *)&buf.st_mode = v17;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I Creating a snapshot folder (%s) has failed!\n", (uint8_t *)&buf, 0xCu);
    }
  }
  *(unsigned char *)(a1 + 384) = 1;
  sub_100408DF4(a1, 0);
  if (SHIBYTE(v51[3]) < 0) {
    operator delete(v51[1]);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[1]);
  }
  if (SHIBYTE(v49[0]) < 0) {
    operator delete(v48[0]);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void sub_100409A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v56 - 201) < 0) {
    operator delete(*(void **)(v56 - 224));
  }
  sub_10040A2AC((uint64_t)&a31);
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_100409BA0(uint64_t a1, uint64_t a2)
{
  sub_100068A94(&v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 168))(v3, a2);
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_100409C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100409C20(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  CSILogger::CSILogger();
  uint64_t v8 = v64;
  CSILogger::~CSILogger((CSILogger *)buf);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = (a2[23] & 0x80u) == 0 ? a2 : *(unsigned __int8 **)a2;
    uint64_t v10 = (a3[23] & 0x80u) == 0 ? a3 : *(unsigned __int8 **)a3;
    sub_100466184(a4, (uint64_t)&__p);
    unint64_t v11 = v61 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)stat buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v10;
    *(_WORD *)&unsigned char buf[22] = 2080;
    long long v63 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Work Setting property of '%s', key '%s', value '%s'\n", buf, 0x20u);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p);
    }
  }
  if ((a2[23] & 0x80u) == 0) {
    size_t v12 = a2[23];
  }
  else {
    size_t v12 = *((void *)a2 + 1);
  }
  size_t v60 = 0;
  uint64_t v61 = 0;
  std::string __p = 0;
  p_p = &__p;
  sub_1000C140C((uint64_t)&__p, v12 + 2);
  if (v61 < 0) {
    p_p = __p;
  }
  if (v12)
  {
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = *(const void **)a2;
    }
    memmove(p_p, v14, v12);
  }
  strcpy((char *)p_p + v12, "::");
  uint64_t v15 = a2[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = a2[23];
  }
  else {
    uint64_t v16 = *((void *)a2 + 1);
  }
  if (v16 != 14)
  {
    if (v16 != 23) {
      goto LABEL_81;
    }
    uint64_t v17 = (v15 & 0x80u) == 0 ? a2 : *(unsigned __int8 **)a2;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *((void *)v17 + 1);
    uint64_t v20 = *(void *)(v17 + 15);
    BOOL v21 = v18 == 0x6552656C69626F4DLL && v19 == 0x6761694465746F6DLL;
    if (!v21 || v20 != 0x73636974736F6E67) {
      goto LABEL_81;
    }
    uint64_t v23 = a3[23];
    int v24 = (char)v23;
    if ((v23 & 0x80u) != 0) {
      uint64_t v23 = *((void *)a3 + 1);
    }
    if (v23 != 7) {
      goto LABEL_81;
    }
    uint64_t v25 = v24 >= 0 ? a3 : *(unsigned __int8 **)a3;
    int v26 = *(_DWORD *)v25;
    int v27 = *(_DWORD *)(v25 + 3);
    if (v26 != 1650552421 || v27 != 1684368482) {
      goto LABEL_81;
    }
    BOOL v58 = sub_10040A950((unsigned __int8 *)a4);
    uint64_t v29 = *(void *)(a1 + 264);
    if (v61 >= 0) {
      size_t v30 = HIBYTE(v61);
    }
    else {
      size_t v30 = v60;
    }
    memset(buf, 0, sizeof(buf));
    uint64_t v31 = buf;
    sub_1000C140C((uint64_t)buf, v30 + 8);
    if ((buf[23] & 0x80u) != 0) {
      uint64_t v31 = *(uint8_t **)buf;
    }
    if (v30)
    {
      if (v61 >= 0) {
        int v32 = &__p;
      }
      else {
        int v32 = __p;
      }
      memmove(v31, v32, v30);
    }
    strcpy((char *)&v31[v30], "fEnabled");
    (*(void (**)(uint64_t, uint8_t *, BOOL *))(*(void *)v29 + 40))(v29, buf, &v58);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
LABEL_112:
    uint64_t v40 = 1;
    goto LABEL_89;
  }
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "signalstrength", *((void *)a2 + 1))) {
      goto LABEL_81;
    }
  }
  else if (a2[23])
  {
    char v33 = "signalstrength";
    uint64_t v34 = a2;
    while (*v34 == *(unsigned __int8 *)v33)
    {
      ++v34;
      ++v33;
      if (!--v15) {
        goto LABEL_69;
      }
    }
    goto LABEL_81;
  }
LABEL_69:
  uint64_t v35 = a3[23];
  if ((v35 & 0x80u) == 0) {
    uint64_t v36 = a3[23];
  }
  else {
    uint64_t v36 = *((void *)a3 + 1);
  }
  if (v36 == 9)
  {
    if ((v35 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, "verbosity", *((void *)a3 + 1))) {
        goto LABEL_81;
      }
    }
    else if (a3[23])
    {
      uint64_t v37 = "verbosity";
      long long v38 = a3;
      while (*v38 == *(unsigned __int8 *)v37)
      {
        ++v38;
        ++v37;
        if (!--v35) {
          goto LABEL_80;
        }
      }
      goto LABEL_81;
    }
LABEL_80:
    *(void *)stat buf = 0;
    if (std::string::find((const std::string *)a4, 45, 0) == -1)
    {
      *__error() = 0;
      uint64_t v44 = *(char *)(a4 + 23) >= 0 ? (const char *)a4 : *(const char **)a4;
      unsigned int v45 = strtoul(v44, (char **)buf, 10);
      if (!*__error() && *(void *)buf && !**(unsigned char **)buf)
      {
        int v46 = *(unsigned __int8 *)(a1 + 440);
        *(void *)(a1 + 432) = v45;
        *(unsigned char *)(a1 + 441) = 1;
        if (!v46)
        {
LABEL_111:
          std::string v57 = (uint64_t *)sub_10040B4FC(&event::registration::signalStrengthVerbosity[1]);
          sub_10040B540(v57, v45);
          goto LABEL_112;
        }
        *(unsigned char *)(a1 + 441) = 0;
        ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 392));
        uint64_t v48 = ServiceMap;
        if (v49 < 0)
        {
          long long v50 = (unsigned __int8 *)(v49 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v51 = 5381;
          do
          {
            uint64_t v49 = v51;
            unsigned int v52 = *v50++;
            uint64_t v51 = (33 * v51) ^ v52;
          }
          while (v52);
        }
        std::mutex::lock(ServiceMap);
        *(void *)stat buf = v49;
        BOOL v53 = sub_10004D37C(&v48[1].__m_.__sig, (unint64_t *)buf);
        if (v53)
        {
          uint64_t v55 = v53[3];
          uint64_t v54 = (std::__shared_weak_count *)v53[4];
          if (v54)
          {
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v48);
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v54);
            char v56 = 0;
LABEL_107:
            if (v55) {
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v55 + 64))(v55, a1 + 408, *(void *)(a1 + 432));
            }
            if ((v56 & 1) == 0) {
              sub_10004D2C8(v54);
            }
            goto LABEL_111;
          }
        }
        else
        {
          uint64_t v55 = 0;
        }
        std::mutex::unlock(v48);
        uint64_t v54 = 0;
        char v56 = 1;
        goto LABEL_107;
      }
    }
  }
LABEL_81:
  CSILogger::CSILogger();
  uint64_t v39 = v64;
  CSILogger::~CSILogger((CSILogger *)buf);
  uint64_t v40 = 0;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      long long v41 = a2;
    }
    else {
      long long v41 = *(const void **)a2;
    }
    if ((a3[23] & 0x80u) == 0) {
      uint64_t v42 = a3;
    }
    else {
      uint64_t v42 = *(const void **)a3;
    }
    *(_DWORD *)stat buf = 136315394;
    *(void *)&uint8_t buf[4] = v41;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v42;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I Unrecognized trace %s or property %s\n", buf, 0x16u);
    uint64_t v40 = 0;
  }
LABEL_89:
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  sub_100408DF4(a1, 0);
  return v40;
}

void sub_10040A23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v24);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10040A2AC(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10040A300()
{
  CSILogger::CSILogger();
  uint64_t v0 = v2;
  CSILogger::~CSILogger((CSILogger *)v1);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#I Capturing Xlog\n", v1, 2u);
  }
}

uint64_t sub_10040A374(uint64_t a1, const void **a2, unsigned __int8 *a3, uint64_t a4)
{
  size_t v8 = *((unsigned __int8 *)a2 + 23);
  size_t v9 = (size_t)a2[1];
  size_t v46 = 0;
  uint64_t v47 = 0;
  if ((v8 & 0x80u) == 0) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v9;
  }
  unsigned int v45 = 0;
  unint64_t v11 = &v45;
  sub_1000C140C((uint64_t)&v45, v10 + 2);
  if (v47 < 0) {
    unint64_t v11 = v45;
  }
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v12 = a2;
    }
    else {
      size_t v12 = *a2;
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "::");
  uint64_t v13 = *((unsigned __int8 *)a2 + 23);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v14 = a2[1];
  }
  if (v14 == (const void *)14)
  {
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*a2, "signalstrength", (size_t)a2[1])) {
        goto LABEL_69;
      }
    }
    else if (*((unsigned char *)a2 + 23))
    {
      uint64_t v31 = "signalstrength";
      int v32 = a2;
      while (*(unsigned __int8 *)v32 == *(unsigned __int8 *)v31)
      {
        int v32 = (const void **)((char *)v32 + 1);
        ++v31;
        if (!--v13) {
          goto LABEL_58;
        }
      }
      goto LABEL_69;
    }
LABEL_58:
    uint64_t v33 = a3[23];
    if ((v33 & 0x80u) == 0) {
      uint64_t v34 = a3[23];
    }
    else {
      uint64_t v34 = *((void *)a3 + 1);
    }
    if (v34 == 9)
    {
      if ((v33 & 0x80) == 0)
      {
        if (a3[23])
        {
          uint64_t v35 = "verbosity";
          uint64_t v36 = a3;
          while (*v36 == *(unsigned __int8 *)v35)
          {
            ++v36;
            ++v35;
            if (!--v33) {
              goto LABEL_80;
            }
          }
          goto LABEL_69;
        }
        goto LABEL_80;
      }
      if (!memcmp(*(const void **)a3, "verbosity", *((void *)a3 + 1)))
      {
LABEL_80:
        uint64_t v63 = 0;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        *(_OWORD *)uint64_t v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        memset(__p, 0, sizeof(__p));
        sub_10004DE24((uint64_t)__p);
        std::ostream::operator<<();
        sub_10004BC98((uint64_t)&__p[1], &v42);
        goto LABEL_81;
      }
    }
LABEL_69:
    CSILogger::CSILogger();
    uint64_t v37 = v49;
    CSILogger::~CSILogger((CSILogger *)__p);
    uint64_t v38 = 0;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v39 = a2;
      }
      else {
        uint64_t v39 = (void *)*a2;
      }
      if ((a3[23] & 0x80u) == 0) {
        uint64_t v40 = a3;
      }
      else {
        uint64_t v40 = *(void **)a3;
      }
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = v39;
      WORD2(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 6) = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I Unrecognized trace %s or property %s\n", (uint8_t *)__p, 0x16u);
      uint64_t v38 = 0;
    }
    goto LABEL_77;
  }
  if (v14 != (const void *)23) {
    goto LABEL_69;
  }
  uint64_t v15 = (v13 & 0x80u) == 0 ? a2 : (const void **)*a2;
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = *(uint64_t *)((char *)v15 + 15);
  BOOL v19 = v16 == (const void *)0x6552656C69626F4DLL && v17 == (const void *)0x6761694465746F6DLL;
  if (!v19 || v18 != 0x73636974736F6E67) {
    goto LABEL_69;
  }
  uint64_t v21 = a3[23];
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *((void *)a3 + 1);
  }
  if (v21 != 7) {
    goto LABEL_69;
  }
  char v23 = v22 >= 0 ? a3 : *(unsigned __int8 **)a3;
  int v24 = *(_DWORD *)v23;
  int v25 = *(_DWORD *)(v23 + 3);
  if (v24 != 1650552421 || v25 != 1684368482) {
    goto LABEL_69;
  }
  int v44 = 0;
  uint64_t v27 = *(void *)(a1 + 264);
  if (v47 >= 0) {
    size_t v28 = HIBYTE(v47);
  }
  else {
    size_t v28 = v46;
  }
  memset(__p, 0, 24);
  uint64_t v29 = __p;
  sub_1000C140C((uint64_t)__p, v28 + 8);
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v29 = (void **)__p[0];
  }
  if (v28)
  {
    if (v47 >= 0) {
      size_t v30 = &v45;
    }
    else {
      size_t v30 = v45;
    }
    memmove(v29, v30, v28);
  }
  strcpy((char *)v29 + v28, "fEnabled");
  (*(void (**)(uint64_t, void **, int *))(*(void *)v27 + 32))(v27, __p, &v44);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v63 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)uint64_t v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  memset(__p, 0, sizeof(__p));
  sub_10004DE24((uint64_t)__p);
  std::ostream::operator<<();
  sub_10004BC98((uint64_t)&__p[1], &v42);
LABEL_81:
  if (SHIBYTE(v52) < 0) {
    operator delete(v51[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v42;
  *(void *)(a4 + 16) = v43;
  uint64_t v38 = 1;
LABEL_77:
  if (SHIBYTE(v47) < 0) {
    operator delete(v45);
  }
  return v38;
}

void sub_10040A8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10040A950(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = a1[23];
  }
  else {
    uint64_t v2 = *((void *)a1 + 1);
  }
  if (v2 != 4) {
    return 0;
  }
  if ((v1 & 0x80) != 0) {
    return memcmp(*(const void **)a1, "true", *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v3 = v1 - 1;
  uint64_t v4 = "true";
  do
  {
    int v6 = *a1++;
    int v5 = v6;
    int v8 = *(unsigned __int8 *)v4++;
    int v7 = v8;
    BOOL v10 = v3-- != 0;
    BOOL v11 = v5 == v7;
    BOOL v12 = v5 == v7;
  }
  while (v11 && v10);
  return v12;
}

uint64_t sub_10040A9E4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_10040AA58;
  v3[3] = &unk_1019C9008;
  v3[4] = a1;
  v3[5] = a2;
  return sub_100408ED8(a1, 1, a2, v3);
}

uint64_t sub_10040AA58(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 56));
  *(unsigned char *)(*(void *)(a1 + 40) + 8) = 1;
  return result;
}

uint64_t sub_10040AAB0(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_10040AB24;
  v3[3] = &unk_1019C9028;
  v3[4] = a1;
  v3[5] = a2;
  return sub_100408ED8(a1, 2, a2, v3);
}

uint64_t sub_10040AB24(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
  *(unsigned char *)(*(void *)(a1 + 40) + 8) = 1;
  return result;
}

void sub_10040AB78(uint64_t a1, uint64_t a2, long long *a3, char a4, int a5, long long *a6, long long *a7)
{
  CSILogger::CSILogger();
  uint64_t v14 = v29;
  CSILogger::~CSILogger((CSILogger *)buf);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315394;
    int v26 = "snapshot";
    __int16 v27 = 1024;
    int v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s isResetting %u\n", buf, 0x12u);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1174405120;
  v15[2] = sub_10040ADE4;
  v15[3] = &unk_1019C9048;
  _OWORD v15[4] = a1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v16, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
  }
  char v23 = a4;
  char v24 = a5;
  if (*((char *)a6 + 23) < 0)
  {
    sub_10004FC84(&v18, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v18 = *a6;
    uint64_t v19 = *((void *)a6 + 2);
  }
  if (*((char *)a7 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long __p = *a7;
    uint64_t v21 = *((void *)a7 + 2);
  }
  uint64_t v22 = a2;
  sub_100408ED8(a1, 3, a2, v15);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
}

void sub_10040AD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10040ADE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 120);
  int v4 = *(unsigned __int8 *)(a1 + 121);
  if (*(char *)(a1 + 87) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 80);
  }
  if (*(char *)(a1 + 111) < 0)
  {
    sub_10004FC84(__p, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 88);
    uint64_t v6 = *(void *)(a1 + 104);
  }
  (*(void (**)(uint64_t, uint64_t, BOOL, BOOL, void **, void **))(*(void *)v2 + 40))(v2, a1 + 40, v3 != 0, v4 != 0, __dst, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__dst[0]);
  }
  *(unsigned char *)(*(void *)(a1 + 112) + 8) = 1;
}

void sub_10040AEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10040AF1C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  uint64_t result = (unsigned char *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  long long v7 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)uint64_t result = v7;
  return result;
}

void sub_10040AFD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10040B008(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void sub_10040B070()
{
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  char v1 = 0;
  operator new();
}

void sub_10040B29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Block_object_dispose((const void *)(v33 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10040B324(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40), a1 + 48, a1 + 72, a1 + 96);
  uint64_t v2 = *(NSObject **)(a1 + 128);
  *(unsigned char *)(*(void *)(a1 + 120) + 8) = 1;
  dispatch_group_leave(v2);
  int v3 = *(NSObject **)(a1 + 128);

  dispatch_release(v3);
}

unsigned char *sub_10040B3A8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v5;
  }
  uint64_t result = (unsigned char *)(a1 + 96);
  if (*(char *)(a2 + 119) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  long long v7 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)uint64_t result = v7;
  return result;
}

void sub_10040B460(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10040B494(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

uint64_t sub_10040B4FC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

atomic_uint **sub_10040B540(uint64_t *a1, int a2)
{
  int v31 = a2;
  long long v30 = 0uLL;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  int v3 = (pthread_mutex_t *)sub_100060E64(a1 + 3);
  sub_100061F70(&v34, v3);
  uint64_t v4 = a1[1];
  if (v4)
  {
    if (atomic_load_explicit((atomic_uint *volatile)(v4 + 8), memory_order_acquire) == 1) {
      sub_10040B8C8(a1, &v34, 0, 1);
    }
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    if (v6) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = *a1;
  }
  long long v7 = v30;
  *(void *)&long long v30 = v5;
  *((void *)&v30 + 1) = v6;
  long long v32 = v7;
  sub_10000A740((atomic_uint **)&v32 + 1);
  sub_10000A6C8(*((pthread_mutex_t **)&v45 + 1));
  sub_10000A5F8(&v34);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  uint64_t v49 = 0;
  uint64_t v50 = 10;
  uint64_t v51 = (char *)&v34 + 8;
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  long long v53 = &v31;
  uint64_t v8 = (uint64_t *)sub_10040B97C((uint64_t *)&v30);
  v29[0] = &v34;
  v29[1] = a1;
  void v29[2] = sub_10040BBEC(v8);
  uint64_t v9 = sub_10040B97C((uint64_t *)&v30);
  sub_100060EA8((uint64_t *)(v9 + 16));
  BOOL v10 = (uint64_t *)sub_10040B97C((uint64_t *)&v30);
  uint64_t v11 = *(void *)(sub_10040BBEC(v10) + 8);
  BOOL v12 = (uint64_t *)sub_10040B97C((uint64_t *)&v30);
  *(void *)&long long v27 = v11;
  *((void *)&v27 + 1) = sub_10040BBEC(v12);
  *(void *)&long long v28 = &v34;
  *((void *)&v28 + 1) = *((void *)&v27 + 1);
  sub_10040BCC8((uint64_t *)&v27);
  uint64_t v13 = (uint64_t *)sub_10040B97C((uint64_t *)&v30);
  uint64_t v14 = sub_10040BBEC(v13);
  uint64_t v15 = (uint64_t *)sub_10040B97C((uint64_t *)&v30);
  uint64_t v23 = v14;
  uint64_t v24 = sub_10040BBEC(v15);
  int v25 = &v34;
  uint64_t v26 = v24;
  sub_10040BCC8(&v23);
  long long v32 = v27;
  long long v33 = v28;
  uint64_t v16 = v23;
  uint64_t v17 = v27;
  if ((void)v27 != v23)
  {
    long long v18 = (unsigned char *)v33;
    BOOL v19 = *(unsigned char *)v33 == 0;
    do
    {
      if (v19)
      {
        uint64_t v20 = sub_10040BAFC((uint64_t *)(v17 + 16));
        uint64_t v21 = sub_10040BBA8((uint64_t *)(v20 + 32));
        sub_10040BC30((void *)(v21 + 24));
        if (!*v18) {
          unsigned char *v18 = 1;
        }
      }
      if (!*(unsigned char *)v33) {
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      }
      *(void *)&long long v32 = *(void *)(v32 + 8);
      sub_10040BCC8((uint64_t *)&v32);
      long long v18 = (unsigned char *)v33;
      if (*(unsigned char *)v33) {
        *(unsigned char *)long long v33 = 0;
      }
      uint64_t v17 = v32;
      BOOL v19 = 1;
    }
    while ((void)v32 != v16);
  }
  sub_10040C044(v29);
  sub_10040C900((uint64_t)&v34);
  return sub_10000A740((atomic_uint **)&v30 + 1);
}

void sub_10040B86C(void *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  JUMPOUT(0x10040B8C0);
}

void sub_10040B894()
{
}

void sub_10040B89C(_Unwind_Exception *a1)
{
  sub_10040C044(&v2);
  sub_10040C900(&v4);
  sub_10000A740(&v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_10040B8C8(uint64_t *a1, void *a2, int a3, int a4)
{
  uint64_t v4 = a1[1];
  if (!v4 || atomic_load_explicit((atomic_uint *volatile)(v4 + 8), memory_order_acquire) != 1) {
    __assert_rtn("nolock_cleanup_connections", "signal_template.hpp", 461, "_shared_state.unique()");
  }
  uint64_t v9 = (uint64_t *)sub_10040B97C(a1);
  uint64_t v10 = sub_10040BBEC(v9);
  uint64_t v11 = (uint64_t *)a1[2];
  if (v11 == (uint64_t *)v10)
  {
    BOOL v12 = (uint64_t *)sub_10040B97C(a1);
    uint64_t v11 = *(uint64_t **)(sub_10040BBEC(v12) + 8);
  }
  uint64_t v14 = v11;
  return sub_10040B9C0(a1, a2, a3, &v14, a4);
}

uint64_t sub_10040B97C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

uint64_t *sub_10040B9C0(uint64_t *a1, void *a2, int a3, uint64_t **a4, int a5)
{
  uint64_t v5 = a1[1];
  if (!v5 || atomic_load_explicit((atomic_uint *volatile)(v5 + 8), memory_order_acquire) != 1) {
    __assert_rtn("nolock_cleanup_connections_from", "signal_template.hpp", 436, "_shared_state.unique()");
  }
  uint64_t v22 = *a4;
  uint64_t v10 = (uint64_t *)sub_10040B97C(a1);
  uint64_t result = (uint64_t *)sub_10040BBEC(v10);
  if (result != v22)
  {
    unsigned int v12 = a5 - 1;
    unsigned int v13 = 1;
    uint64_t result = v22;
    do
    {
      if (a3)
      {
        uint64_t v14 = sub_10040BAFC(result + 2);
        sub_10040BB40(v14, a2);
        uint64_t result = v22;
      }
      if (*(unsigned char *)(sub_10040BAFC(result + 2) + 24))
      {
        uint64_t v15 = (atomic_uint *)v22[1];
      }
      else
      {
        uint64_t v16 = (uint64_t *)sub_10040B97C(a1);
        uint64_t v17 = sub_10040BBEC(v16);
        uint64_t v18 = sub_10040BAFC(v22 + 2);
        uint64_t v15 = sub_1001631B0(v17, (void *)(v18 + 64), (void **)&v22);
      }
      uint64_t v22 = (uint64_t *)v15;
      BOOL v19 = (uint64_t *)sub_10040B97C(a1);
      uint64_t v20 = (uint64_t *)sub_10040BBEC(v19);
      uint64_t result = v22;
      if (v22 == v20) {
        break;
      }
    }
    while (v12 >= v13++);
  }
  a1[2] = (uint64_t)result;
  return result;
}

uint64_t sub_10040BAFC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

uint64_t *sub_10040BB40(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t result = (uint64_t *)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = (uint64_t *)sub_10040BBA8(result);
    uint64_t result = (uint64_t *)sub_100163358(v6);
    if (result)
    {
      if (*(unsigned char *)(a1 + 24))
      {
        *(unsigned char *)(a1 + 24) = 0;
        return (uint64_t *)sub_100163448((atomic_uint **)a1, a2);
      }
    }
  }
  return result;
}

uint64_t sub_10040BBA8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

uint64_t sub_10040BBEC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

uint64_t sub_10040BC30(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v4, "call to empty boost::function");
    v4.__vftable = (std::runtime_error_vtbl *)&off_10199A8C8;
    sub_100098518(&v4);
  }
  char v1 = *(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  uint64_t v2 = a1 + 1;

  return v1(v2);
}

void sub_10040BCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void sub_10040BCC8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 != a1[3])
  {
    if (v1 == a1[1]) {
      goto LABEL_24;
    }
    while (1)
    {
      sub_100062390((atomic_uint **)(a1[2] + 8), *(void *)(a1[2] + 264));
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v3 = *(void *)(*a1 + 16);
      sub_10040C004(v3);
      sub_10000A4EC(&v19, v3);
      uint64_t v4 = sub_10040BAFC((uint64_t *)(*a1 + 16));
      uint64_t v5 = (uint64_t *)(v4 + 32);
      if (*(void *)(v4 + 32))
      {
        uint64_t v6 = v4;
        uint64_t v7 = a1[2];
        uint64_t v8 = *(_DWORD **)sub_10040BBA8((uint64_t *)(v4 + 32));
        if (v8 != *(_DWORD **)(sub_10040BBA8(v5) + 8))
        {
          uint64_t v9 = (void *)(v7 + 8);
          while (1)
          {
            memset(v31, 0, sizeof(v31));
            sub_100060B10(v8, (uint64_t)v31);
            if (sub_100060A68((uint64_t)v8)) {
              break;
            }
            sub_100062188(v9, (uint64_t)v31);
            sub_1000624B4((uint64_t)v31);
            v8 += 6;
            if (v8 == *(_DWORD **)(sub_10040BBA8(v5) + 8)) {
              goto LABEL_12;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            sub_100060D70((atomic_uint **)v6, &v19);
          }
          sub_1000624B4((uint64_t)v31);
        }
      }
LABEL_12:
      uint64_t v10 = sub_10040BAFC((uint64_t *)(*a1 + 16));
      uint64_t v11 = a1[2];
      if (*(unsigned char *)(v10 + 24)) {
        ++*(_DWORD *)(v11 + 280);
      }
      else {
        ++*(_DWORD *)(v11 + 284);
      }
      uint64_t v12 = sub_10040BAFC((uint64_t *)(*a1 + 16));
      if (!*(unsigned char *)(v12 + 24)
        || (uint64_t v13 = *(void *)(v12 + 16)) != 0
        && atomic_load_explicit((atomic_uint *volatile)(v13 + 8), memory_order_acquire))
      {
        int v14 = 1;
      }
      else
      {
        sub_10000A39C(a1, &v19, *a1);
        int v14 = 0;
      }
      (*(void (**)(void))(**((void **)&v30 + 1) + 32))(*((void *)&v30 + 1));
      sub_10000A5F8(&v19);
      uint64_t v1 = *a1;
      uint64_t v15 = a1[1];
      if (!v14) {
        break;
      }
      uint64_t v16 = *(void *)(v1 + 8);
      *a1 = v16;
      if (v16 == v15)
      {
        uint64_t v1 = v15;
        goto LABEL_24;
      }
    }
    if (v1 == v15)
    {
LABEL_24:
      uint64_t v17 = a1[3];
      if (v17 != v1)
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        uint64_t v18 = *(void *)(v17 + 16);
        sub_10040C004(v18);
        sub_10000A4EC(&v19, v18);
        sub_10000A39C(a1, &v19, a1[1]);
        (*(void (**)(void))(**((void **)&v30 + 1) + 32))(*((void *)&v30 + 1));
        sub_10000A5F8(&v19);
      }
    }
  }
}

void sub_10040BFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10040C004(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void *sub_10040C044(void *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
  {
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v3 = a1[2];
    long long v11 = 0u;
    memset(v10, 0, sizeof(v10));
    uint64_t v4 = (pthread_mutex_t *)sub_100060E64(v2 + 3);
    sub_100061F70(v10, v4);
    uint64_t v5 = (uint64_t *)sub_10040B97C(v2);
    if (sub_10040BBEC(v5) == v3)
    {
      uint64_t v6 = v2[1];
      if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1) {
        operator new();
      }
      uint64_t v7 = (uint64_t *)sub_10040B97C(v2);
      uint64_t v9 = *(uint64_t **)(sub_10040BBEC(v7) + 8);
      sub_10040B9C0(v2, v10, 0, &v9, 0);
    }
    sub_10000A6C8(*((pthread_mutex_t **)&v11 + 1));
    sub_10000A5F8(v10);
  }
  return a1;
}

void sub_10040C1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_10040C20C(void *a1, uint64_t a2)
{
  if (a2)
  {
    if (*a1 == a2) {
      __assert_rtn("reset", "shared_ptr.hpp", 734, "p == 0 || p != px");
    }
  }
  sub_10040C2CC(&v2, a2);
}

uint64_t sub_10040C288(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void sub_10040C2CC(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  sub_10040C338(&v2);
}

void sub_10040C324(_Unwind_Exception *a1)
{
  sub_10000A740(v1);
  _Unwind_Resume(a1);
}

void sub_10040C338(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_10040C3A8(void *a1)
{
  __cxa_begin_catch(a1);
  sub_10016267C(v1);
  __cxa_rethrow();
}

void sub_10040C3BC(_Unwind_Exception *a1)
{
}

void sub_10040C3D4()
{
}

uint64_t sub_10040C3E8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    sub_10000A740((atomic_uint **)(v1 + 24));
    sub_10000A740((atomic_uint **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_10040C44C()
{
  return 0;
}

uint64_t sub_10040C454()
{
  return 0;
}

uint64_t sub_10040C45C()
{
  return 0;
}

void sub_10040C464()
{
}

void sub_10040C4E0()
{
}

uint64_t sub_10040C504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040C690((uint64_t *)a1, a2);
  sub_10040C6FC((uint64_t)(v4 + 3), a2 + 24);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void **)(a2 + 24);
  uint64_t v6 = (void *)(a2 + 32);
  if (v5 != (void *)(a2 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      if (v7 == (void *)(a1 + 32)) {
        __assert_rtn("grouped_list", "slot_groups.hpp", 80, "this_map_it != _group_map.end()");
      }
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v5 != v6) {
        uint64_t v9 = v5[6];
      }
      uint64_t v10 = (void *)v5[1];
      long long v11 = v10;
      uint64_t v12 = v5;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v6) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          uint64_t v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v14 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          uint64_t v7 = v18;
        }
        while (!v14);
      }
      uint64_t v5 = v16;
      uint64_t v7 = v18;
    }
    while (v16 != v6);
  }
  return a1;
}

void sub_10040C668(_Unwind_Exception *a1)
{
  sub_100162A90(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10040C690(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = a2; ; sub_100162A30(a1, (void *)(i + 16)))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == a2) {
      break;
    }
  }
  return a1;
}

void sub_10040C6E8(_Unwind_Exception *a1)
{
  sub_100162A90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10040C6FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)a1 = a1 + 8;
  sub_100162B6C((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10040C74C(_Unwind_Exception *a1)
{
  sub_1000346F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10040C764(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  sub_10040C7D0(&v2);
}

void sub_10040C7BC(_Unwind_Exception *a1)
{
  sub_10000A740(v1);
  _Unwind_Resume(a1);
}

void sub_10040C7D0(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_10040C840(void *a1)
{
  __cxa_begin_catch(a1);
  sub_100163050(v1);
  __cxa_rethrow();
}

void sub_10040C854(_Unwind_Exception *a1)
{
}

void sub_10040C86C()
{
}

uint64_t sub_10040C880(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    sub_1000346F8(v1 + 24, *(void **)(v1 + 32));
    sub_100162A90((atomic_uint **)v1);
    operator delete();
  }
  return result;
}

uint64_t sub_10040C8E8()
{
  return 0;
}

uint64_t sub_10040C8F0()
{
  return 0;
}

uint64_t sub_10040C8F8()
{
  return 0;
}

uint64_t sub_10040C900(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    long long v5 = 0u;
    memset(v4, 0, sizeof(v4));
    sub_10000A4EC(v4, v2);
    sub_100060D70(*(atomic_uint ***)(a1 + 288), v4);
    (*(void (**)(void))(**((void **)&v5 + 1) + 32))(*((void *)&v5 + 1));
    sub_10000A5F8(v4);
  }
  sub_10006224C((void *)(a1 + 8));
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_10040C9D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10040C9F8(ATCSDPCQueue::Callback *a1)
{
  ATCSDPCQueue::Callback::~Callback(a1);

  operator delete();
}

uint64_t sub_10040CA30(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void *, void))(result + 24);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = (void *)(v1 + (v3 >> 1));
    if (v3) {
      uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
    }
    return v2(v4, *(unsigned __int8 *)(result + 8));
  }
  return result;
}

uint64_t sub_10040CA88()
{
  return 0;
}

uint64_t sub_10040CA90(const void **a1)
{
  uint64_t result = 0;
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = (uint64_t)a1[1];
  }
  if (v3 > 33)
  {
    if (v3 == 34)
    {
      if (v4 >= 0) {
        uint64_t v15 = a1;
      }
      else {
        uint64_t v15 = *a1;
      }
      return 2 * (memcmp(v15, "NSFileProtectionCompleteUnlessOpen", 0x22uLL) == 0);
    }
    else if (v3 == 52)
    {
      if (v4 >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = *a1;
      }
      if (!memcmp(v10, "NSFileProtectionCompleteUntilFirstUserAuthentication", 0x34uLL)) {
        return 3;
      }
      else {
        return 0;
      }
    }
  }
  else if (v3 == 20)
  {
    long long v11 = (void *)*a1;
    if (v4 >= 0) {
      long long v11 = a1;
    }
    unint64_t v12 = 0x4E5346696C655072;
    unint64_t v13 = bswap64(*(void *)v11);
    if (v13 == 0x4E5346696C655072
      && (unint64_t v12 = 0x6F74656374696F6ELL, v13 = bswap64(*((void *)v11 + 1)), v13 == 0x6F74656374696F6ELL)
      && (unint64_t v12 = 1315925605, v13 = bswap32(*((_DWORD *)v11 + 4)), v13 == 1315925605))
    {
      int v14 = 0;
    }
    else if (v13 < v12)
    {
      int v14 = -1;
    }
    else
    {
      int v14 = 1;
    }
    return 4 * (v14 == 0);
  }
  else if (v3 == 24)
  {
    if (v4 < 0) {
      a1 = (const void **)*a1;
    }
    long long v5 = *a1;
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    return v5 == (const void *)0x7250656C6946534ELL
        && v6 == (const void *)0x6E6F69746365746FLL
        && v7 == (const void *)0x6574656C706D6F43;
  }
  return result;
}

void sub_10040CD94()
{
}

void sub_10040CEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040D0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040D244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040D394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040D4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040D634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040D784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040D950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040DCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_10040DE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040DEB8()
{
}

void sub_10040DF20()
{
}

void sub_10040DF44(void *a1)
{
  dispatch_object_t object = 0;
  sub_100104718(a1 + 1, "CarrierSpaceServer", QOS_CLASS_USER_INITIATED, &object);
  if (object) {
    dispatch_release(object);
  }
  *a1 = off_1019C9230;
  operator new();
}

void sub_10040E00C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
}

void sub_10040E05C(CarrierSpaceServerInterface *a1)
{
  *(void *)a1 = off_1019C9230;
  uint64_t v2 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v2)
  {
    sub_10040EA48((void *)(v2 + 8));

    operator delete();
  }
  sub_100087E88((void *)a1 + 1);

  CarrierSpaceServerInterface::~CarrierSpaceServerInterface(a1);
}

void sub_10040E0EC(CarrierSpaceServerInterface *a1)
{
  sub_10040E05C(a1);

  operator delete();
}

void sub_10040E128(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10040E228(uint64_t a1, dispatch_object_t *a2, uint64_t a3)
{
  long long v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_10040E34C(uint64_t result, void *a2)
{
  if (*a2)
  {
    uint64_t v2 = a2[1];
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(result + 16);
    if (v3)
    {
      if (std::__shared_weak_count::lock(v3)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  return result;
}

void sub_10040E454(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10040E534(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10040E614(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10040E6F4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10040E7D4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10040E8B4(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10040E9B8(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CTCarrierSpaceServiceInterface];
  uint64_t v2 = (void *)qword_101B0CDE8;
  qword_101B0CDE8 = v1;
}

void sub_10040EA00(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CTCarrierSpaceClientDelegateProxyInterface];
  uint64_t v2 = (void *)qword_101B0CDF8;
  qword_101B0CDF8 = v1;
}

void *sub_10040EA48(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10040EAD0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10040EB08(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10040EB38(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_10040EB7C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10040EC48(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_10040ED20);
  __cxa_rethrow();
}

void sub_10040EC70(_Unwind_Exception *a1)
{
}

void sub_10040EC88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10040ECC0(uint64_t a1)
{
}

uint64_t sub_10040ECDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10040ED20(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_10040ED4C(uint64_t a1, uint64_t a2, NSObject **a3)
{
  int v4 = [CarrierSpaceServerImpl alloc];
  long long v5 = *a3;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  operator new();
}

void sub_10040EEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10040EF14()
{
}

void *sub_10040EF28()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1019C9410;
  return result;
}

void sub_10040EF60(uint64_t a1, void *a2)
{
  *a2 = off_1019C9410;
}

id sub_10040EF88()
{
  id v0 = objc_alloc((Class)NSXPCListener);
  id v1 = [v0 initWithMachServiceName:kCarrierSpaceXpcServiceName];

  return v1;
}

uint64_t sub_10040EFC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10040F008()
{
}

uint64_t *sub_10040F014(void *a1)
{
  objc_msgSend(**(id **)(*(void *)*a1 + 40), "stop", a1, *a1);
  sub_100088C88(&v3);
  return sub_100046B58(&v2);
}

void sub_10040F060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10040F07C(void **a1)
{
  id v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v4 = v1[2];
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(v2 + 32);
  if (!v5) {
    sub_10007B600();
  }
  uint64_t v6 = *(void **)v2;
  uint64_t v7 = (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  uint64_t v11 = v4;
  unint64_t v12 = v3;
  objc_msgSend(v6, "bootstrapWithListener:controller:", v7, &v11, v9, v10);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }

  sub_10040F180((uint64_t *)&v10);
  return sub_100046B58((uint64_t *)&v9);
}

void sub_10040F140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }

  sub_10040F180(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10040F180(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(NSObject **)(v1 + 8);
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = *(NSObject **)(v1 + 8);
      if (v4) {
        dispatch_release(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10040F1EC(void *a1)
{
  objc_msgSend(**(id **)(*(void *)*a1 + 40), "capabilitiesChangeNotification:", **(void **)(*a1 + 8), a1, *a1);
  sub_1000E1A60(&v3);
  return sub_100046B58(&v2);
}

void sub_10040F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_10040F258(uint64_t a1)
{
  uint64_t v1 = a1;
  [**(id **)(**(void **)a1 + 40) userConsentFlowInfoChangeNotification];
  operator delete();
}

void sub_10040F2B4()
{
}

void sub_10040F2E0(uint64_t a1)
{
  uint64_t v1 = a1;
  [**(id **)(**(void **)a1 + 40) usageInfoChangeNotification];
  operator delete();
}

void sub_10040F33C()
{
}

void sub_10040F368(uint64_t a1)
{
  uint64_t v1 = a1;
  [**(id **)(**(void **)a1 + 40) plansInfoChangeNotification];
  operator delete();
}

void sub_10040F3C4()
{
}

void sub_10040F3F0(uint64_t a1)
{
  uint64_t v1 = a1;
  [**(id **)(**(void **)a1 + 40) appsInfoChangeNotification];
  operator delete();
}

void sub_10040F44C()
{
}

void sub_10040F478(uint64_t a1)
{
  uint64_t v1 = a1;
  [**(id **)(**(void **)a1 + 40) dataPlanMetricsChangeNotification];
  operator delete();
}

void sub_10040F4D4()
{
}

uint64_t *sub_10040F500(void *a1)
{
  objc_msgSend(**(id **)(*(void *)*a1 + 40), "planPurchaseStatusNotification:plan:", *(unsigned __int8 *)(*a1 + 8), **(void **)(*a1 + 16), a1, *a1);
  sub_10040F574(&v3);
  return sub_100046B58(&v2);
}

void sub_10040F558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10040F574(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2) {
      sub_10004D2C8(v2);
    }
    operator delete();
  }
  return result;
}

ctu::OsLogLogger *sub_10040F5C8(ctu::OsLogLogger *a1, void *a2, NSObject **a3, char *a4, void *a5)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v15, kCtLoggingSystemName, "lazuli.timer");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v16, &v15);
  ctu::OsLogLogger::OsLogLogger(a1, (const ctu::OsLogLogger *)v16);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v16);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v15);
  uint64_t v10 = *a3;
  *((void *)a1 + 1) = *a3;
  if (v10) {
    dispatch_retain(v10);
  }
  *((void *)a1 + 2) = *a2;
  uint64_t v11 = a2[1];
  *((void *)a1 + 3) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0((void *)a1 + 4, a4);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 3);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10004D2C8(v12);
  }
  else
  {
    v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  }
  *((void *)a1 + 7) = (uint64_t)((double)v13.__d_.__rep_ / 1000000.0);
  *((void *)a1 + 8) = *a5;
  *((void *)a1 + 9) = 0;
  *((void *)a1 + 13) = 0;
  return a1;
}

void sub_10040F6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  int v14 = (std::__shared_weak_count *)*((void *)v12 + 3);
  if (v14) {
    sub_10004D2C8(v14);
  }
  OsLogContext v15 = *((void *)v12 + 1);
  if (v15) {
    dispatch_release(v15);
  }
  ctu::OsLogLogger::~OsLogLogger(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_10040F734(uint64_t result, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 24))
  {
    uint64_t v4 = result;
    sub_1003351AC((void *)(result + 80), a2);
    Registry::getTimerService(&v16, *(Registry **)(v4 + 16));
    uint64_t v5 = v16;
    if (*(char *)(v4 + 55) < 0)
    {
      sub_10004FC84(__p, *(void **)(v4 + 32), *(void *)(v4 + 40));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v4 + 32);
      uint64_t v15 = *(void *)(v4 + 48);
    }
    if (a3) {
      uint64_t v6 = (uint64_t)((double)*(uint64_t *)(v4 + 64) * 0.99);
    }
    else {
      uint64_t v6 = *(void *)(v4 + 64);
    }
    uint64_t v7 = *(NSObject **)(v4 + 8);
    dispatch_object_t object = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 0x40000000;
    aBlock[2] = sub_10040F95C;
    aBlock[3] = &unk_1019C94A8;
    aBlock[4] = v4;
    unint64_t v12 = _Block_copy(aBlock);
    sub_100118A44(v5, (uint64_t)__p, 1, 1000000 * v6, &object, &v12);
    uint64_t v8 = v18;
    uint64_t v18 = 0;
    uint64_t v9 = *(void *)(v4 + 72);
    *(void *)(v4 + 72) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t v10 = v18;
      uint64_t v18 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    if (v12) {
      _Block_release(v12);
    }
    if (object) {
      dispatch_release(object);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      sub_10004D2C8(v17);
    }
    return sub_10040F9CC(v4, 0);
  }
  return result;
}

void sub_10040F908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, dispatch_object_t object, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  long long v24 = *(std::__shared_weak_count **)(v22 - 48);
  if (v24) {
    sub_10004D2C8(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10040F95C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10040F9CC(v1, 3);
  uint64_t result = *(void *)(v1 + 104);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v3();
  }
  return result;
}

uint64_t sub_10040F9CC(uint64_t a1, int a2)
{
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  memset(v40, 0, sizeof(v40));
  sub_10004BD84((uint64_t)&v39);
  long long v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  sub_100563958(*(void *)(a1 + 64), (uint64_t)&v36);
  long long v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_10055FCC0(*(void *)(a1 + 56), &v33);
  uint64_t v4 = sub_10004B96C(v40, (uint64_t)"TIMER: [", 8);
  int v5 = *(char *)(a1 + 55);
  if (v5 >= 0) {
    uint64_t v6 = a1 + 32;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  uint64_t v8 = sub_10004B96C(v4, v6, v7);
  uint64_t v9 = sub_10004B96C(v8, (uint64_t)"] ", 2);
  if ((a2 - 1) > 2) {
    uint64_t v10 = "(started)";
  }
  else {
    uint64_t v10 = off_1019C94C8[a2 - 1];
  }
  size_t v11 = strlen(v10);
  sub_10004B96C(v9, (uint64_t)v10, v11);
  unint64_t v12 = sub_10004B96C(v40, (uint64_t)". Total timer duration: (", 25);
  if (v38 >= 0) {
    std::chrono::system_clock::time_point v13 = &v36;
  }
  else {
    std::chrono::system_clock::time_point v13 = v36;
  }
  if (v38 >= 0) {
    uint64_t v14 = HIBYTE(v38);
  }
  else {
    uint64_t v14 = v37;
  }
  uint64_t v15 = sub_10004B96C(v12, (uint64_t)v13, v14);
  uint64_t v16 = sub_10004B96C(v15, (uint64_t)"), started at: (", 16);
  if (v35 >= 0) {
    uint64_t v17 = &v33;
  }
  else {
    uint64_t v17 = v33;
  }
  if (v35 >= 0) {
    uint64_t v18 = HIBYTE(v35);
  }
  else {
    uint64_t v18 = v34;
  }
  long long v19 = sub_10004B96C(v16, (uint64_t)v17, v18);
  sub_10004B96C(v19, (uint64_t)")", 1);
  if (a2)
  {
    long long __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    long long v20 = *(std::__shared_weak_count **)(a1 + 24);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v21.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_100563958((uint64_t)((double)v21.__d_.__rep_ / 1000000.0) - *(void *)(a1 + 56), (uint64_t)&__p);
    if (v20) {
      sub_10004D2C8(v20);
    }
    uint64_t v22 = sub_10004B96C(v40, (uint64_t)" , running for (", 16);
    if (v32 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v32 >= 0) {
      uint64_t v24 = HIBYTE(v32);
    }
    else {
      uint64_t v24 = v31;
    }
    long long v25 = sub_10004B96C(v22, (uint64_t)p_p, v24);
    sub_10004B96C(v25, (uint64_t)")", 1);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }
  long long v26 = *(NSObject **)a1;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)v40 + 8, &__p);
    long long v27 = v32 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)stat buf = 136446210;
    uint64_t v55 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %{public}s", buf, 0xCu);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v33);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v36);
  }
  *(void *)((char *)&v40[-1]
  *(void *)&v40[0] = v28;
  if (SHIBYTE(v42) < 0) {
    operator delete(*((void **)&v41 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10040FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_10008248C((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_10040FE68(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = (uint64_t)((double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v4 = a1[7];
  BOOL v5 = v4 <= v3;
  uint64_t v6 = v4 - v3;
  if (v5) {
    return v6 + a1[8];
  }
  else {
    return 0;
  }
}

uint64_t sub_10040FEE4@<X0>(capabilities::ct *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = capabilities::ct::supportsActivationPushRegistration(a1);
  if (result) {
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_10040FFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v10) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100410014(uint64_t a1, void *a2, uint64_t *a3)
{
  *(void *)a1 = off_1019C94F0;
  *(void *)(a1 + 48) = off_1019C9550;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v15, kCtLoggingSystemName, "pp.push");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v7 = dispatch_queue_create_with_target_V2("ActivationPushController", initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v7);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v16, &v15);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v16);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v16);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v15);
  *(void *)a1 = off_1019C94F0;
  *(void *)(a1 + 48) = off_1019C9550;
  uint64_t v8 = *a3;
  *a3 = 0;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 72) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, "ActivationPushController");
  int v10 = *(NSObject **)(a1 + 24);
  unint64_t v12 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::RestModule::RestModule();
  if (v12) {
    dispatch_release(v12);
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  (*(void (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  return a1;
}

void sub_10041023C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  long long v23 = (std::__shared_weak_count *)*((void *)v19 + 11);
  if (v23) {
    sub_10004D2C8(v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)v19 + 9);
  if (v24) {
    sub_10004D2C8(v24);
  }
  uint64_t v25 = *((void *)v19 + 7);
  *((void *)v19 + 7) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  ctu::OsLogLogger::~OsLogLogger(v21);
  sub_100087E88(v20);
  ActivationPushInterface::~ActivationPushInterface(v19);
  _Unwind_Resume(a1);
}

void sub_100410310(uint64_t a1)
{
  *(void *)a1 = off_1019C94F0;
  *(void *)(a1 + 48) = off_1019C9550;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10003B34C((void *)(a1 + 208));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 184);
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (*(unsigned char *)(a1 + 160) && *(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  sub_1000886C0(a1 + 112, *(char **)(a1 + 120));
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 104);
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));

  ActivationPushInterface::~ActivationPushInterface((ActivationPushInterface *)a1);
}

void sub_10041043C(uint64_t a1)
{
}

void sub_100410444(uint64_t a1)
{
  sub_100410310(a1);

  operator delete();
}

void sub_10041047C(uint64_t a1)
{
  sub_100410310(a1 - 48);

  operator delete();
}

void sub_1004104B8(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1004105B8(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1004106B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1000F0058((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1004107F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

BOOL sub_100410808(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1004133F0;
  v5[3] = &unk_1019C98F0;
  _OWORD v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_10005ACA8;
    int v10 = &unk_1019C9930;
    size_t v11 = &v13;
    unint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100059F44;
    int v10 = &unk_1019C9910;
    size_t v11 = &v13;
    unint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

void sub_100410938(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100410A18(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (void *)(result + 112);
  if (*(void *)(a2 + 16) == *(void *)(result + 128))
  {
    uint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = *(void **)a2;
    if (*(void *)a2 == a2 + 8) {
      return result;
    }
    uint64_t v6 = (void *)*v3;
    while (1)
    {
      uint64_t result = sub_10008D2E0((uint64_t)&v12, (uint64_t)(v5 + 4), (uint64_t)(v6 + 4));
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v7 = (void *)v5[1];
      uint64_t v8 = v5;
      if (v7)
      {
        do
        {
          uint64_t v5 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v8[2];
          BOOL v9 = *v5 == (void)v8;
          uint64_t v8 = v5;
        }
        while (!v9);
      }
      int v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          size_t v11 = v10;
          int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          size_t v11 = (void *)v6[2];
          BOOL v9 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v9);
      }
      uint64_t v6 = v11;
      if (v5 == v4) {
        return result;
      }
    }
  }
  return (*(uint64_t (**)(void, void *))(**(void **)(v2 + 96) + 80))(*(void *)(v2 + 96), v3);
}

uint64_t sub_100410B24(uint64_t result)
{
  if (*(unsigned char *)(result + 160))
  {
    if ((*(char *)(result + 159) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(result + 159)) {
        return result;
      }
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 96) + 88))(*(void *)(result + 96), result + 136);
    }
    if (*(void *)(result + 144)) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 96) + 88))(*(void *)(result + 96), result + 136);
    }
  }
  return result;
}

void sub_100410B74(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 169);
  if (*(unsigned char *)(a1 + 169) && *(unsigned char *)(a1 + 168) == 1)
  {
    if (*(void *)(a1 + 192)) {
      goto LABEL_29;
    }
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v4;
    if (v4) {
      dispatch_retain(v4);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t, dispatch_object_t *))(*(void *)v3 + 56))(buf, v3, &object);
    long long v5 = *(_OWORD *)buf;
    *(void *)stat buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 200);
    *(_OWORD *)(a1 + 192) = v5;
    if (v6)
    {
      sub_10004D2C8(v6);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (object) {
      dispatch_release(object);
    }
    if (*(void *)(a1 + 192))
    {
LABEL_29:
      if (!*(void *)(a1 + 176))
      {
        uint64_t v7 = *(NSObject **)(a1 + 24);
        if (v7) {
          dispatch_retain(v7);
        }
        uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8))
          {
            (*(void (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
            sub_100BDC8F0(buf);
          }
        }
        sub_100088B9C();
      }
    }
  }
  else
  {
    BOOL v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = "True";
      if (v2) {
        size_t v11 = "True";
      }
      else {
        size_t v11 = "False";
      }
      if (*(unsigned char *)(a1 + 168) != 1) {
        int v10 = "False";
      }
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Baseband Ready: %s, Internet Available: %s", buf, 0x16u);
    }
  }
}

void sub_100410DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100410DE0(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Start push token registration", buf, 2u);
  }
  *(void *)stat buf = 0;
  uint64_t v16 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 96) + 104))(buf);
  if (*(void *)buf)
  {
    if (*(void *)(a1 + 192))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v3 || (uint64_t v4 = std::__shared_weak_count::lock(v3)) == 0) {
        sub_100088B9C();
      }
      long long v5 = v4;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v4);
      uint64_t v6 = *(void *)(a1 + 192);
      uint64_t v13 = *(void *)buf;
      char v14 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v7 || (uint64_t v8 = *(void *)(a1 + 8), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
        sub_100088B9C();
      }
      int v10 = v9;
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      uint64_t v18 = 0;
      size_t v11 = operator new(0x20uLL);
      void *v11 = off_1019C9960;
      v11[1] = a1;
      _OWORD v11[2] = v8;
      _OWORD v11[3] = v10;
      uint64_t v18 = v11;
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v6 + 16))(v6, &v13, v17);
      sub_100127FE0(v17);
      if (v14) {
        sub_10004D2C8(v14);
      }
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    char v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v19 = 136315138;
      long long v20 = "registerPushToken_sync";
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s: Failed to generate Push Token Registration payload", v19, 0xCu);
    }
    (*(void (**)(void, void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96), 0);
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
}

void sub_100411044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004110A8(uint64_t a1, CFStringRef *a2, void *a3)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_100058DB0(&v36, "Content-Type");
  sub_100058DB0(v38, "application/xml");
  sub_1002369E0((uint64_t)&v33, &v36, 1);
  if (SBYTE7(v39) < 0) {
    operator delete(v38[0]);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (*a2) {
    uint64_t v6 = sub_1000810B8;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 && CFStringGetLength(*a2))
  {
    long long v36 = 0uLL;
    uint64_t v37 = 0;
    ctu::cf::assign();
    *(_OWORD *)uint64_t v31 = v36;
    uint64_t v32 = v37;
    uint64_t v29 = 0;
    long long v30 = 0;
    ctu::Http::HttpRequest::create();
    long long v7 = v36;
    long long v36 = 0uLL;
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 248);
    *(_OWORD *)(a1 + 240) = v7;
    if (v8)
    {
      sub_10004D2C8(v8);
      if (*((void *)&v36 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    if (v30) {
      sub_10004D2C8(v30);
    }
    if (!*(void *)(a1 + 240)) {
      goto LABEL_45;
    }
    if (*a3 == a3[1])
    {
      char v14 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v36) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Request body null", (uint8_t *)&v36, 2u);
      }
      goto LABEL_45;
    }
    *(void *)&long long v36 = 0;
    *((void *)&v36 + 1) = &v36;
    uint64_t v37 = 0x4802000000;
    v38[0] = sub_100411788;
    v38[1] = sub_1004117AC;
    long long v39 = 0u;
    long long v40 = 0u;
    LOBYTE(v39) = 1;
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
    int v10 = *(NSObject **)(a1 + 40);
    if (v9 < 1)
    {
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)stat buf = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Either timeDiff has overflown or we've somehow traveled back in time. Retrying token registration anyway", buf, 2u);
        }
        goto LABEL_34;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)stat buf = 0;
        OsLogContext v15 = "#I Previous token registration request not found - attempting to register";
        goto LABEL_33;
      }
    }
    else
    {
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if ((unint64_t)v9 >> 7 <= 0x2A2)
      {
        if (v11)
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I It has been less than a day since last token registration attempt. Not going to register token", buf, 2u);
        }
        uint64_t v12 = random();
        sub_1004117C0(a1, v12 % 10800 - v9 + 86400);
LABEL_43:
        _Block_object_dispose(&v36, 8);
        if (SHIBYTE(v40) < 0) {
          operator delete(*((void **)&v39 + 1));
        }
LABEL_45:
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[0]);
        }
        goto LABEL_47;
      }
      if (v11)
      {
        *(_WORD *)stat buf = 0;
        OsLogContext v15 = "#I Previous failed token registration found, but it has been more than a day; retrying";
LABEL_33:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
      }
    }
LABEL_34:
    (*(void (**)(void, void))(**(void **)(a1 + 240) + 8))(*(void *)(a1 + 240), *(void *)(a1 + 24));
    (*(void (**)(void, void *))(**(void **)(a1 + 240) + 56))(*(void *)(a1 + 240), a3);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 240) + 208))(*(void *)(a1 + 240), 1);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 240) + 120))(*(void *)(a1 + 240), 1);
    (*(void (**)(void, double))(**(void **)(a1 + 240) + 96))(*(void *)(a1 + 240), 60.0);
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v16 || (uint64_t v17 = *(void *)(a1 + 8), (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
      sub_100088B9C();
    }
    long long v19 = v18;
    p_shared_weak_owners = &v18->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v18);
    uint64_t v21 = *(void *)(a1 + 240);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 1174405120;
    v26[2] = sub_100411ABC;
    v26[3] = &unk_1019C9578;
    v26[5] = a1;
    v26[6] = v17;
    long long v27 = v19;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    v26[4] = &v36;
    (*(void (**)(uint64_t, void *))(*(void *)v21 + 16))(v21, v26);
    uint64_t v22 = *(void *)(a1 + 240);
    __p[1] = 0;
    uint64_t v25 = 0;
    __p[0] = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v22 + 40))(v22, __p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    long long v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I Sending push token registration", buf, 2u);
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
    std::__shared_weak_count::__release_weak(v19);
    goto LABEL_43;
  }
  uint64_t v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v36) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Invalid URL", (uint8_t *)&v36, 2u);
  }
LABEL_47:
  sub_10010C0E0((uint64_t)&v33, v34);
}

void sub_1004116A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35)
{
  _Block_object_dispose((const void *)(v35 - 128), 8);
  if (*(char *)(v35 - 57) < 0) {
    operator delete(*(void **)(v35 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_10010C0E0((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

__n128 sub_100411788(__n128 *a1, __n128 *a2)
{
  a1[2].n128_u16[4] = a2[2].n128_u16[4];
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_1004117AC(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_1004117C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    uint64_t v2 = random() % 10800 + 86400;
  }
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134218496;
    *(void *)&uint8_t buf[4] = v2 / 3600;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v2 / 60 % 60;
    __int16 v18 = 2048;
    uint64_t v19 = v2 % 60;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Starting a timer for time = %zuh %zum %llds", buf, 0x20u);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5 || (uint64_t v6 = *(void *)(a1 + 8), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v7);
  Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 64));
  uint64_t v9 = *(void *)buf;
  sub_100058DB0(__p, "Activation push token registration retry timer");
  int v10 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1174405120;
  _OWORD v11[2] = sub_1004122B0;
  _OWORD v11[3] = &unk_1019C95A8;
  _OWORD v11[4] = a1;
  void v11[5] = v6;
  uint64_t v12 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  aBlock = _Block_copy(v11);
  sub_10027A2C0(v9, (uint64_t)__p, 1, 1000000 * v2, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void sub_100411A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100411ABC(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    long long v5 = (void *)a1[5];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[6])
      {
        if (*a2)
        {
          uint64_t v8 = (ctu::Http *)(*(uint64_t (**)(void))(*(void *)*a2 + 24))(*a2);
          int v9 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
          uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
          BOOL v11 = v5[5];
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            long long v40 = v7;
            (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 64))(v50);
            if (v51 >= 0) {
              uint64_t v12 = v50;
            }
            else {
              uint64_t v12 = *(unsigned char **)v50;
            }
            ctu::Http::asString();
            if (v49 >= 0) {
              char v14 = theData;
            }
            else {
              char v14 = (CFDataRef *)theData[0];
            }
            uint64_t v38 = v14;
            long long v39 = v12;
            ctu::Http::asString((uint64_t *)format, v8, v13);
            if (v47 >= 0) {
              OsLogContext v15 = format;
            }
            else {
              OsLogContext v15 = (CFPropertyListFormat *)format[0];
            }
            (*(void (**)(CFTypeRef *__return_ptr))(*(void *)*a2 + 48))(cf);
            int v16 = v45;
            uint64_t v17 = (CFTypeRef *)cf[0];
            ctu::Http::asString();
            __int16 v18 = cf;
            if (v16 < 0) {
              __int16 v18 = v17;
            }
            p_p = &__p;
            if (v43 < 0) {
              p_p = __p;
            }
            *(_DWORD *)stat buf = 136316930;
            *(void *)&uint8_t buf[4] = v39;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v9;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v38;
            __int16 v53 = 1024;
            int v54 = (int)v8;
            __int16 v55 = 2080;
            long long v56 = v15;
            __int16 v57 = 2080;
            long long v58 = v18;
            __int16 v59 = 2048;
            uint64_t v60 = v10;
            __int16 v61 = 2080;
            long long v62 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Response: '%s', Result: %d (%s), HttpStatus: '%d' (%s), Response: '%s' ErrorCode: '%ld' (%s)", buf, 0x4Au);
            if (v43 < 0) {
              operator delete(__p);
            }
            long long v7 = v40;
            if (v45 < 0) {
              operator delete((void *)cf[0]);
            }
            if (v47 < 0) {
              operator delete((void *)format[0]);
            }
            if (v49 < 0) {
              operator delete(theData[0]);
            }
            if (v51 < 0) {
              operator delete(*(void **)v50);
            }
          }
          long long v20 = *(std::string **)(a1[4] + 8);
          if (v9 == 1 && v8 == 200)
          {
            v20[1].__r_.__value_.__s.__data_[17] = 1;
            theData[0] = 0;
            (*(void (**)(CFDataRef *__return_ptr))(*(void *)*a2 + 40))(theData);
            if (theData[0]) {
              uint64_t v21 = sub_10008324C;
            }
            else {
              uint64_t v21 = 0;
            }
            if (v21 && theData[0] && CFDataGetLength(theData[0]) >= 1)
            {
              format[0] = kCFPropertyListXMLFormat_v1_0;
              cf[0] = 0;
              *(void *)stat buf = CFPropertyListCreateWithData(kCFAllocatorDefault, theData[0], 0, format, 0);
              sub_100084068(cf, (CFTypeRef *)buf);
              memset(buf, 0, 24);
              uint64_t v22 = v5[12];
              CFTypeRef v41 = cf[0];
              if (cf[0]) {
                CFRetain(cf[0]);
              }
              int v23 = (*(uint64_t (**)(uint64_t, CFTypeRef *, unsigned char *))(*(void *)v22 + 96))(v22, &v41, buf);
              sub_100057D78(&v41);
              if (v23)
              {
                uint64_t v24 = v5[5];
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v37 = buf;
                  if (buf[23] < 0) {
                    uint64_t v37 = *(unsigned char **)buf;
                  }
                  *(_DWORD *)long long v50 = 136315138;
                  *(void *)&v50[4] = v37;
                  _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Push token registration response w/ error %s", v50, 0xCu);
                }
                *(unsigned char *)(*(void *)(a1[4] + 8) + 41) = 0;
              }
              std::string::operator=((std::string *)(*(void *)(a1[4] + 8) + 48), (const std::string *)buf);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              sub_100057D78(cf);
            }
            sub_100030068((const void **)theData);
          }
          else
          {
            sub_10003ECB8(v20 + 2, "HTTPResponse is not OK: ", 0x18uLL);
            std::string::append((std::string *)(*(void *)(a1[4] + 8) + 48), "Result=", 7uLL);
            uint64_t v25 = *(std::string **)(a1[4] + 8);
            ctu::Http::asString();
            if (buf[23] >= 0) {
              long long v26 = buf;
            }
            else {
              long long v26 = *(const std::string::value_type **)buf;
            }
            if (buf[23] >= 0) {
              std::string::size_type v27 = buf[23];
            }
            else {
              std::string::size_type v27 = *(void *)&buf[8];
            }
            std::string::append(v25 + 2, v26, v27);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            std::string::append((std::string *)(*(void *)(a1[4] + 8) + 48), ",ResponseCode=", 0xEuLL);
            xpc_object_t v28 = *(std::string **)(a1[4] + 8);
            ctu::Http::asString((uint64_t *)buf, v8, v29);
            if (buf[23] >= 0) {
              long long v30 = buf;
            }
            else {
              long long v30 = *(const std::string::value_type **)buf;
            }
            if (buf[23] >= 0) {
              std::string::size_type v31 = buf[23];
            }
            else {
              std::string::size_type v31 = *(void *)&buf[8];
            }
            std::string::append(v28 + 2, v30, v31);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        else
        {
          sub_10003ECB8((std::string *)(*(void *)(a1[4] + 8) + 48), "No response from server", 0x17uLL);
        }
        int v32 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 41);
        (*(void (**)(void, void))(*(void *)v5[12] + 64))(v5[12], *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 41));
        uint64_t v33 = v5[24];
        uint64_t v34 = *(void *)(a1[4] + 8);
        uint64_t v35 = (*(uint64_t (**)(void))(*(void *)v5[12] + 48))(v5[12]);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 40))(v33, v34 + 40, v35);
        uint64_t v36 = *(void *)v5[12];
        if (v32)
        {
          (*(void (**)(void))(v36 + 56))();
        }
        else
        {
          (*(void (**)(void))(v36 + 40))();
          sub_1004117C0((uint64_t)v5, 0);
        }
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_10041216C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100412284(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1004122A0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1004122B0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v7 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Push token registration retry timer has fired - retry token registration", v7, 2u);
        }
        sub_100410DE0(v3);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10041234C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100412360(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10041237C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10041238C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1004124D8(uint64_t a1, uint64_t a2)
{
}

void sub_1004124E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1004125C0(uint64_t a1)
{
}

uint64_t sub_1004125C8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 169)) {
      uint64_t v3 = "true";
    }
    else {
      uint64_t v3 = "false";
    }
    int v9 = 136315138;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Baseband is ready: %s", (uint8_t *)&v9, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 176)) {
      uint64_t v4 = "true";
    }
    else {
      uint64_t v4 = "false";
    }
    int v9 = 136315138;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Push observer: %s", (uint8_t *)&v9, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 192)) {
      long long v5 = "true";
    }
    else {
      long long v5 = "false";
    }
    int v9 = 136315138;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Push helper: %s", (uint8_t *)&v9, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v6 = "true";
    }
    else {
      uint64_t v6 = "false";
    }
    int v9 = 136315138;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Push notification handler: %s", (uint8_t *)&v9, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 240)) {
      long long v7 = "true";
    }
    else {
      long long v7 = "false";
    }
    int v9 = 136315138;
    uint64_t v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I HTTP request: %s", (uint8_t *)&v9, 0xCu);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 112))(*(void *)(a1 + 96));
}

void sub_1004127F8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004128C4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_10041299C);
  __cxa_rethrow();
}

void sub_1004128EC(_Unwind_Exception *a1)
{
}

void sub_100412904(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10041293C(uint64_t a1)
{
}

uint64_t sub_100412958(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10041299C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *sub_1004129C8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  Registry::createRestModuleOneTimeUseConnection(&v10, *(Registry **)(*(void *)v1 + 64));
  ctu::RestModule::connect();
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_100058DB0(__p, "/cc/prefs-nb/imeis");
  uint64_t v3 = operator new(0x28uLL);
  *uint64_t v3 = off_1019C9700;
  v3[1] = v2 + 112;
  v3[2] = v2;
  v3[3] = sub_100410A18;
  v3[4] = 0;
  OsLogContext v15 = v3;
  ctu::RestModule::observeProperty();
  sub_10003F600(v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/prefs-nb/meid");
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = off_1019C9780;
  v4[1] = v2 + 136;
  v4[2] = v2;
  v4[3] = sub_100410B24;
  v4[4] = 0;
  OsLogContext v15 = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/internet_status");
  long long v5 = operator new(0x28uLL);
  *long long v5 = off_1019C9800;
  v5[1] = v2 + 168;
  void v5[2] = v2;
  v5[3] = sub_100410DDC;
  _OWORD v5[4] = 0;
  OsLogContext v15 = v5;
  ctu::RestModule::observeProperty();
  sub_10003F600(v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/dump_state");
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_1019C9880;
  v6[1] = v2;
  v6[2] = sub_1004125C8;
  v6[3] = 0;
  OsLogContext v15 = v6;
  ctu::RestModule::observeEvent();
  sub_10003F600(v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void))(**(void **)(v2 + 96) + 16))(*(void *)(v2 + 96));
  sub_100088C88(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_100412C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_100088C88(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100412CE0()
{
}

__n128 sub_100412CF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C9700;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100412D48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C9700;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100412D80(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  uint64_t v9 = (char **)*v3;
  uint64_t v10 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v10;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_1000FF5C4((uint64_t)v3, a2);
  uint64_t v6 = (void (*)(void *, char ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(void (**)(void *, char ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000886C0((uint64_t)&v9, v10);
}

void sub_100412E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_100412E58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100412E98()
{
}

void sub_100412EA8()
{
}

__n128 sub_100412EBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C9780;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100412F10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C9780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100412F48(uint64_t *a1, xpc_object_t *a2)
{
  sub_10008BD58(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100412FC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100413004()
{
}

void sub_100413014()
{
}

__n128 sub_100413028(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019C9800;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10041307C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C9800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1004130B4(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (char *)a1[1];
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    char v13 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (unsigned __int8 *)a2, v6);
    *uint64_t v4 = v13;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  uint64_t v9 = (uint64_t (*)(void *))a1[3];
  uint64_t v10 = a1[4];
  BOOL v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    uint64_t v9 = *(uint64_t (**)(void *))(*v11 + v9);
  }
  return v9(v11);
}

uint64_t sub_1004131A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004131E4()
{
}

void sub_1004131F4()
{
}

__n128 sub_100413208(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019C9880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10041325C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019C9880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100413294(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1004132DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041331C()
{
}

uint64_t *sub_100413328(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  ctu::RestModule::disconnect((ctu::RestModule *)(*(void *)v1 + 80));
  sub_100088C88(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100413370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10041338C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1003351AC((void *)(*(void *)v1 + 208), v1 + 8);
  sub_10033515C(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_1004133D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_1004133F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(**(void **)(a1 + 40) + 96) + 24))();
}

void sub_100413420(uint64_t **a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = **a1;
  *(unsigned char *)(v1 + 169) = 1;
  sub_100410B74(v1);
  operator delete();
}

void sub_10041347C()
{
}

void *sub_1004134A8(void *a1)
{
  *a1 = off_1019C9960;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1004134F4(void *a1)
{
  *a1 = off_1019C9960;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100413560(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = off_1019C9960;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1004135C4(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019C9960;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100413604(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100413614(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100413654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(NSObject **)(v7 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a2 + 1)) {
      uint64_t v9 = "successful";
    }
    else {
      uint64_t v9 = "failed";
    }
    LODWORD(v20[0]) = 136315138;
    *(std::__shared_weak_count **)((char *)v20 + 4) = (std::__shared_weak_count *)v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Encoding activation push token registration %s", (uint8_t *)v20, 0xCu);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
  if (v10)
  {
    BOOL v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      if (*(void *)(a1 + 16))
      {
        if (*(unsigned char *)(a2 + 1))
        {
          uint64_t v13 = *(void *)(v7 + 192);
          char v14 = *(std::__shared_weak_count **)(a1 + 24);
          v20[0] = *(std::__shared_weak_count **)(a1 + 16);
          v20[1] = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v22 = 0;
          sub_10005C928(__p, v5, v6, v6 - (void)v5);
          uint64_t v24 = 0;
          OsLogContext v15 = (char *)operator new(0x30uLL);
          long long v16 = *(_OWORD *)__p;
          *(_OWORD *)(v15 + 8) = *(_OWORD *)v20;
          *(void *)OsLogContext v15 = off_1019C99E0;
          v20[0] = 0;
          v20[1] = 0;
          *(_OWORD *)(v15 + 24) = v16;
          *((void *)v15 + 5) = v22;
          __p[1] = 0;
          uint64_t v22 = 0;
          __p[0] = 0;
          uint64_t v24 = v15;
          (*(void (**)(uint64_t, void *))(*(void *)v13 + 24))(v13, v23);
          sub_1001289E8(v23);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v20[1]) {
            std::__shared_weak_count::__release_weak(v20[1]);
          }
        }
        else
        {
          (*(void (**)(void, void))(**(void **)(v7 + 96) + 64))(*(void *)(v7 + 96), 0);
          uint64_t v17 = *(void *)(v7 + 192);
          uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(v7 + 96) + 48))(*(void *)(v7 + 96));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 40))(v17, a2, v18);
          (*(void (**)(void))(**(void **)(v7 + 96) + 40))(*(void *)(v7 + 96));
          sub_1004117C0(v7, 0);
          uint64_t v19 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v20[0]) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to encode Push Token Registration", (uint8_t *)v20, 2u);
          }
        }
      }
      sub_10004D2C8(v12);
    }
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_100413944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sub_10004D2C8(v15);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004139A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1004139E4()
{
}

void *sub_1004139F0(void *a1)
{
  *a1 = off_1019C99E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_100413A4C(void *a1)
{
  *a1 = off_1019C99E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_100413AC8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = off_1019C99E0;
  sub_100413DC4(v2 + 1, v1);
  return v2;
}

void sub_100413B1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100413B30(uint64_t a1, void *a2)
{
  *a2 = off_1019C99E0;
  return sub_100413DC4(a2 + 1, a1 + 8);
}

void sub_100413B5C(uint64_t a1)
{
}

void sub_100413B64(void *a1)
{
  sub_100413E34(a1 + 1);

  operator delete(a1);
}

const void **sub_100413BA0(uint64_t a1, const void **a2)
{
  uint64_t v3 = *a2;
  v10[0] = *a2;
  *a2 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 8);
      if (v7)
      {
        v10[1] = v3;
        if (v3) {
          CFRetain(v3);
        }
        uint64_t __p_8 = 0;
        long long v12 = 0uLL;
        sub_10005C928(&__p_8, *(const void **)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 32) - *(void *)(a1 + 24));
        uint64_t v13 = v7;
        char v14 = v6;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v5);
    }
  }
  return sub_1000558F4(v10);
}

void sub_100413D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, const void *);
  sub_1000558F4((const void **)va1);
  sub_10004D2C8(v2);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100413D78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100413DB8()
{
}

void *sub_100413DC4(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_10005C928(a1 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  return a1;
}

void sub_100413E1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100413E34(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *sub_100413E88(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(v1 + 32);
  sub_100083DA4(&v6, (const void **)v1);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(void *)v2 + 56))(v2, &v6, v1 + 8);
  sub_1000558F4(&v6);
  sub_100413F30(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100413F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_1000558F4((const void **)va2);
  sub_100413F30((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100413F30(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2) {
      sub_10004D2C8(v2);
    }
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    sub_1000558F4((const void **)v1);
    operator delete();
  }
  return result;
}

uint64_t *sub_100413F98(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *v1;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96), v1 + 1)) {
    sub_100410DE0(v2);
  }
  sub_1001102C4((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_10041400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_100414028(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 24);
  dispatch_object_t object = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  v5[0] = off_1019C9A70;
  v5[1] = v1;
  v5[3] = v5;
  sub_100E2E5CC(&object, v1 + 64, 0, 0, 0, (uint64_t)v5);
  sub_100414310(v5);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v3 = *(void *)(v1 + 232);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  operator delete();
}

void sub_100414134(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, char a12)
{
}

void sub_100414180()
{
}

void *sub_100414194(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1019C9A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1004141DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019C9A70;
  a2[1] = v2;
  return result;
}

void sub_100414208(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*a2) {
      uint64_t v4 = "success";
    }
    else {
      uint64_t v4 = "failed";
    }
    int v5 = 136315138;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Request to update baseband ticket %s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_1004142C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100414304()
{
}

void *sub_100414310(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1004149C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  _Unwind_Resume(a1);
}

void sub_100415104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void sub_100415560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100415A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100415AF4()
{
}

void sub_100415B7C(uint64_t a1@<X0>, NSObject **a2@<X1>, void *a3@<X8>)
{
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(Registry **)(a1 + 8);
  if (!v9)
  {
    sub_10004D2C8(v8);
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  Registry::getCommandDriversFactory(&v13, v9);
  uint64_t v10 = v13;
  BOOL v11 = *a2;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v10 + 144))(v10, &object);
  if (object) {
    dispatch_release(object);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  sub_10004D2C8(v8);
}

void sub_100415C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v12);
  _Unwind_Resume(a1);
}

double sub_100415C80@<D0>(CCPreferences *a1@<X0>, _OWORD *a2@<X8>)
{
  CCPreferences::create((uint64_t *)&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void sub_100415CB8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    uint64_t v7 = 0;
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_13;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = *(Registry **)(a1 + 8);
  if (!v8) {
    goto LABEL_12;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v8);
  uint64_t v10 = ServiceMap;
  if ((v11 & 0x8000000000000000) != 0)
  {
    long long v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      unint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v11;
  OsLogContext v15 = sub_10004D37C(&v10[1].__m_.__sig, &v19);
  if (!v15)
  {
    uint64_t v17 = 0;
LABEL_17:
    std::mutex::unlock(v10);
    long long v16 = 0;
    char v18 = 1;
    if (!v17) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
  uint64_t v17 = v15[3];
  long long v16 = (std::__shared_weak_count *)v15[4];
  if (!v16) {
    goto LABEL_17;
  }
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v10);
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v16);
  char v18 = 0;
  if (!v17)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_19;
  }
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, a2);
LABEL_19:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
LABEL_13:
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_100415E10(_Unwind_Exception *a1)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v3);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_100415E3C(AudioFactoryInterface *this)
{
  *(void *)this = off_1019C9B00;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  AudioFactoryInterface::~AudioFactoryInterface(this);
}

void sub_100415E98(AudioFactoryInterface *this)
{
  *(void *)this = off_1019C9B00;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  AudioFactoryInterface::~AudioFactoryInterface(this);

  operator delete();
}

void sub_100415F08(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100415F70(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100415FAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100415FE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100416014(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100416058()
{
}

void sub_1004160C0()
{
}

uint64_t sub_1004160E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v6, kCtLoggingSystemName, "time.loc");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v7, &v6);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, (const ctu::OsLogLogger *)v7);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v6);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  MCC::MCC((MCC *)(a1 + 40));
  MNC::MNC((MNC *)(a1 + 72));
  *(_DWORD *)(a1 + 104) = 11;
  return a1;
}

void sub_100416178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*(void **)(v12 + 48));
  }
  unsigned int v14 = *(std::__shared_weak_count **)(v12 + 16);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v12);
  _Unwind_Resume(a1);
}

void sub_1004161D0(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  char v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)this);
}

void sub_100416230(uint64_t a1, int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 104);
  if (a3 && v5 == 11)
  {
    OsLogContext v6 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = asString();
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 136315394;
      *(void *)&__p[4] = v7;
      __int16 v15 = 2080;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I RAT is %s for %s, but it is being ignored", __p, 0x16u);
    }
    if (a2 < 1) {
      goto LABEL_16;
    }
  }
  else if (a2 < 1 || (v5 & 0xFFFFFFFD) != 0)
  {
LABEL_16:
    uint64_t v12 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I LAC update for %s, Area code is invalid", __p, 0xCu);
    }
    return;
  }
  if (*(_DWORD *)(a1 + 32) != a2)
  {
    *(_DWORD *)(a1 + 32) = a2;
    sub_100416410(a1);
    uint64_t v9 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      sub_100031984(a1, __p);
      if (v17 >= 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = *(unsigned char **)__p;
      }
      *(_DWORD *)stat buf = 136315394;
      uint64_t v19 = v10;
      __int16 v20 = 2080;
      uint64_t v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Updating %s Location LAC to %s", buf, 0x16u);
      if (v17 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
}

void sub_100416410(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  if (v1)
  {
    uint64_t v3 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      v5[0] = 67109378;
      v5[1] = v1;
      __int16 v6 = 2080;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Clearing TAC %d in %s", (uint8_t *)v5, 0x12u);
    }
    *(_DWORD *)(a1 + 36) = 0;
  }
}

void sub_1004164D0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1)
  {
    uint64_t v3 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      v5[0] = 67109378;
      v5[1] = v1;
      __int16 v6 = 2080;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Clearing LAC %d in %s", (uint8_t *)v5, 0x12u);
    }
    *(_DWORD *)(a1 + 32) = 0;
  }
}

uint64_t sub_100416590(uint64_t a1)
{
  char v2 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    int v5 = 136315138;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Clearing the %s location parameters", (uint8_t *)&v5, 0xCu);
  }
  sub_1004164D0(a1);
  sub_100416410(a1);
  MCC::clear((MCC *)(a1 + 40));
  uint64_t result = MCC::clear((MCC *)(a1 + 72));
  *(_DWORD *)(a1 + 104) = 11;
  return result;
}

void sub_100416658(uint64_t a1)
{
  char v2 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    sub_100031984(a1, __p);
    if (v6 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)stat buf = 136315394;
    uint64_t v8 = v3;
    __int16 v9 = 2080;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s location: %s", buf, 0x16u);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100416740(uint64_t a1, os_log_t *a2)
{
  uint64_t v4 = *a2;
  if (os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Time update values", buf, 2u);
  }
  long long v5 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v5;
  v14[2] = *(_OWORD *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 48);
  sub_10041696C(a2, (int *)v14);
  char v6 = *a2;
  if (os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Timezone update values", buf, 2u);
  }
  long long v7 = *(_OWORD *)(a1 + 72);
  v12[0] = *(_OWORD *)(a1 + 56);
  v12[1] = v7;
  v12[2] = *(_OWORD *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 104);
  sub_10041696C(a2, (int *)v12);
  uint64_t v8 = *a2;
  if (os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT))
  {
    IntCFBooleanRef Value = MCC::getIntValue((MCC *)(a1 + 112));
    *(_DWORD *)stat buf = 67109120;
    LODWORD(v17) = IntValue;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Last reported MCC: %03d", buf, 8u);
    uint64_t v8 = *a2;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    *(_DWORD *)stat buf = 136315138;
    char v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Last repored time source: %s", buf, 0xCu);
    uint64_t v8 = *a2;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v11 = (void *)(a1 + 168);
    if (*(char *)(a1 + 191) < 0) {
      unint64_t v11 = (void *)*v11;
    }
    *(_DWORD *)stat buf = 136315138;
    char v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Last repored timezone source: %s", buf, 0xCu);
  }
}

void sub_10041696C(os_log_t *a1, int *a2)
{
  uint64_t v4 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = a2[5];
    int v13 = 67109120;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Year  : %d", (uint8_t *)&v13, 8u);
    uint64_t v4 = *a1;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = a2[4];
    int v13 = 67109120;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Month : %d", (uint8_t *)&v13, 8u);
    uint64_t v4 = *a1;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = a2[3];
    int v13 = 67109120;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Day   : %d", (uint8_t *)&v13, 8u);
    uint64_t v4 = *a1;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *a2;
    int v13 = 67109120;
    int v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Hour  : %d", (uint8_t *)&v13, 8u);
    uint64_t v4 = *a1;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = a2[1];
    int v13 = 67109120;
    int v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Minute: %d", (uint8_t *)&v13, 8u);
    uint64_t v4 = *a1;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = a2[2];
    int v13 = 67109120;
    int v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Second: %d", (uint8_t *)&v13, 8u);
    uint64_t v4 = *a1;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = a2[6];
    int v13 = 67109120;
    int v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I TZ    : %d", (uint8_t *)&v13, 8u);
    uint64_t v4 = *a1;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = a2[12];
    int v13 = 67109120;
    int v14 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I DST   : %d", (uint8_t *)&v13, 8u);
  }
}

void sub_100416C10(os_log_t *a1, uint64_t a2, MCC *a3, MNC *a4, uint64_t a5, int a6)
{
  long long v10 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v10;
  void v17[2] = *(_OWORD *)(a2 + 32);
  uint64_t v18 = *(void *)(a2 + 48);
  sub_10041696C(a1, (int *)v17);
  int v11 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
  {
    IntCFBooleanRef Value = MCC::getIntValue(a3);
    *(_DWORD *)stat buf = 67109120;
    LODWORD(v20[0]) = IntValue;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I MCC   : %03d", buf, 8u);
    int v11 = *a1;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int IntegerWidth = MNC::getIntegerWidth(a4);
    int v14 = MCC::getIntValue(a4);
    *(_DWORD *)stat buf = 67109376;
    LODWORD(v20[0]) = IntegerWidth;
    WORD2(v20[0]) = 1024;
    *(_DWORD *)((char *)v20 + 6) = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I MNC   : %0.*d", buf, 0xEu);
    int v11 = *a1;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = asString();
    *(_DWORD *)stat buf = 136315138;
    v20[0] = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I RAT   : %s", buf, 0xCu);
    int v11 = *a1;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = "No";
    if (a6) {
      uint64_t v16 = "Yes";
    }
    *(_DWORD *)stat buf = 136315138;
    v20[0] = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Look ahead for operator support : %s", buf, 0xCu);
  }
}

void sub_100416E08(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100416E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100416F74((void ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_100416EB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void **sub_100416EE8(uint64_t a1)
{
  uint64_t result = *(void ***)(a1 + 24);
  if (result)
  {
    sub_1004161D0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100416F30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void **sub_100416F74(void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1004161D0(result);
    operator delete();
  }
  return result;
}

void sub_100416FC4(PB::Base *this)
{
  *(void *)this = &off_1019C9C40;
  uint64_t v4 = *((void *)this + 2);
  char v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *char v2 = 0;
  if (v4) {
    sub_100206334((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    sub_100206334((uint64_t)this + 8, v5);
  }

  PB::Base::~Base(this);
}

void sub_10041703C(PB::Base *a1)
{
  sub_100416FC4(a1);

  operator delete();
}

uint64_t sub_100417074(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = 0;
  *(void *)uint64_t result = &off_1019C9C40;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  if (*(unsigned char *)(a2 + 28))
  {
    int v2 = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(result + 28) = 1;
    *(_DWORD *)(result + 24) = v2;
  }
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_1004171C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  if (*(void *)(a1 + 16)) {
    PB::TextFormatter::format();
  }
  if (*(unsigned char *)(a1 + 28)) {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 24));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100417250(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      unsigned __int8 v19 = v11 & 7;
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2) {
        operator new();
      }
      if (v20 == 1)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        uint64_t v23 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)this + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_45;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)this + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_41:
              LODWORD(v26) = 0;
              goto LABEL_45;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_41;
            }
          }
        }
LABEL_45:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(this, v20, v19, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14)
      {
LABEL_19:
        unsigned __int8 v19 = 0;
        LODWORD(v20) = 0;
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_100417560(uint64_t result, PB::Writer *this)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(result + 28)) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
  }
  if (*(void *)(v2 + 16)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return result;
}

void RoamingHandler::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100417BDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, RoamingEventDelegate *a15, ctu::OsLogLogger *a16, uint64_t a17, dispatch_object_t object, dispatch_object_t a19, dispatch_object_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

void sub_100417EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  sub_100087E88(v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  JUMPOUT(0x100417E74);
}

void sub_100417EF8()
{
}

const char *sub_100417F00(int a1)
{
  int v1 = "roam.?";
  if (a1 == 2) {
    int v1 = "roam.2";
  }
  if (a1 == 1) {
    return "roam.1";
  }
  else {
    return v1;
  }
}

void *sub_100417F2C(uint64_t a1)
{
  sub_1000346F8(a1 + 32, *(void **)(a1 + 40));

  return sub_10041A760((void *)a1);
}

void *sub_100417F6C(uint64_t a1)
{
  sub_1000346F8(a1 + 32, *(void **)(a1 + 40));

  return sub_10041A7E4((void *)a1);
}

uint64_t sub_100417FAC(uint64_t a1)
{
  *(void *)a1 = off_1019C9C90;
  uint64_t v2 = (RoamingEventDelegate *)(a1 + 48);
  *(void *)(a1 + 48) = off_1019C9D18;
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 520);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_1000346F8(a1 + 480, *(void **)(a1 + 488));
  sub_10041A760((void *)(a1 + 448));
  sub_1000346F8(a1 + 424, *(void **)(a1 + 432));
  sub_10019D5B8(a1 + 400, *(void **)(a1 + 408));
  sub_100087F94(a1 + 376, *(void **)(a1 + 384));
  sub_100087F94(a1 + 352, *(void **)(a1 + 360));
  sub_1000346F8(a1 + 320, *(void **)(a1 + 328));
  sub_10041A760((void *)(a1 + 288));
  sub_1000346F8(a1 + 264, *(void **)(a1 + 272));
  sub_10041A760((void *)(a1 + 232));
  sub_1000346F8(a1 + 208, *(void **)(a1 + 216));
  sub_10041A760((void *)(a1 + 176));
  sub_1000346F8(a1 + 152, *(void **)(a1 + 160));
  sub_10041A7E4((void *)(a1 + 120));
  int v4 = *(std::__shared_weak_count **)(a1 + 112);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (v5) {
    sub_10004D2C8(v5);
  }
  sub_10005D0E4(a1 + 64, *(void **)(a1 + 72));
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  RoamingEventDelegate::~RoamingEventDelegate(v2);
  RoamingInterface::~RoamingInterface((RoamingInterface *)a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

uint64_t sub_100418144(uint64_t a1)
{
  return sub_100417FAC(a1 - 48);
}

void sub_10041814C(uint64_t a1)
{
  sub_100417FAC(a1);

  operator delete();
}

void sub_100418184(uint64_t a1)
{
  sub_100417FAC(a1 - 48);

  operator delete();
}

void sub_1004181C0(uint64_t a1, dispatch_object_t object)
{
  unint64_t v3 = (void *)(a1 + 8);
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  v4[0] = 0;
  v4[1] = 0;
  sub_10003E168(v4, v3);
  operator new();
}

void sub_1004182B8(uint64_t a1, xpc_object_t object, NSObject **a3)
{
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_null_create();
  }
  uint64_t v5 = *a3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  sub_10003E168(v6, (void *)(a1 + 8));
  operator new();
}

uint64_t sub_100418420(uint64_t a1, int a2)
{
  int v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_10041E7D0;
  void v7[3] = &unk_1019CA648;
  void v7[4] = a1 + 8;
  v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    unsigned int v15 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unint64_t v11 = sub_10041E940;
    unint64_t v12 = &unk_1019CA688;
    uint64_t v13 = &v15;
    BOOL v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    unsigned int v15 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unint64_t v11 = sub_10041E904;
    unint64_t v12 = &unk_1019CA668;
    uint64_t v13 = &v15;
    BOOL v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15;
}

void sub_100418554(uint64_t a1, int a2, void *a3)
{
  void v5[4] = a1;
  int v6 = a2;
  int v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  sub_10003E168(v5, (void *)(a1 + 8));
  operator new();
}

void sub_100418750(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10041876C(uint64_t a1, int a2, void *a3)
{
  void v5[4] = a1;
  int v6 = a2;
  int v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  sub_10003E168(v5, (void *)(a1 + 8));
  operator new();
}

void sub_100418968(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100418984(uint64_t a1, int a2)
{
  int v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_10041ECF4;
  void v7[3] = &unk_1019CA6A8;
  void v7[4] = a1 + 8;
  v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unint64_t v11 = sub_10041EE88;
    unint64_t v12 = &unk_1019CA6E8;
    uint64_t v13 = &v15;
    BOOL v14 = &v8;
    uint64_t v15 = 0;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unint64_t v11 = sub_10041EE44;
    unint64_t v12 = &unk_1019CA6C8;
    uint64_t v13 = &v15;
    BOOL v14 = &v8;
    uint64_t v15 = 0;
    dispatch_sync(v2, &block);
  }
  return v15;
}

void sub_100418AB8(uint64_t a1, int a2, uint64_t a3)
{
  v4[4] = a1;
  int v5 = a2;
  sub_1000DFC90((uint64_t)&v6, a3);
  v4[0] = 0;
  v4[1] = 0;
  sub_10003E168(v4, (void *)(a1 + 8));
  operator new();
}

void sub_100418BFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t RoamingHandler::getDataRoamingSetting_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  sub_100061CB0(&v10, a1, a2);
  uint64_t v6 = v10;
  if (v10)
  {
    __int16 v7 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 144))(v10);
    unsigned __int8 v2 = v7;
    int v3 = HIBYTE(v7);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (!v6)
  {
    uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Could not find network for getting data roaming setting", (uint8_t *)&v10, 2u);
    }
    int v3 = 0;
    unsigned __int8 v2 = 0;
  }
  return v2 | (v3 << 8);
}

void sub_100418D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100418D44(uint64_t a1, int a2, char a3, uint64_t a4)
{
  void v5[4] = a1;
  int v6 = a2;
  char v7 = a3;
  sub_100017108((uint64_t)&v8, a4);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003E168(v5, (void *)(a1 + 8));
  operator new();
}

void sub_100418E8C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_100418EA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_100061CB0(&v12, a1, a2);
  if (!v12)
  {
    char v9 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Could not find network for setting raw data roaming setting", buf, 2u);
    }
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(void))(*(void *)v12 + 136))() & 1) == 0)
  {
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  unsigned int DataRoamingSetting_sync = (unsigned __int16)RoamingHandler::getDataRoamingSetting_sync(a1, a2);
  if (DataRoamingSetting_sync <= 0x100) {
    LOBYTE(DataRoamingSetting_sync) = 0;
  }
  v11[0] = DataRoamingSetting_sync != 0;
  v11[1] = a4;
  _OWORD v11[2] = 1;
  *(void *)stat buf = _NSConcreteStackBlock;
  uint64_t v15 = 0x40000000;
  uint64_t v16 = sub_1004CC270;
  uint64_t v17 = &unk_1019D5458;
  int v20 = a2;
  uint64_t v18 = a1;
  unsigned __int8 v19 = v11;
  sub_1004CC090((wis::MetricFactory *)0x80065);
  uint64_t v8 = 1;
LABEL_9:
  if (v13) {
    sub_10004D2C8(v13);
  }
  return v8;
}

void sub_100419058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041907C(uint64_t a1)
{
  v16[0] = 1;
  long long v17 = 0u;
  uint64_t v18 = 0;
  v16[1] = a1 + 448;
  sub_10005DF14((uint64_t *)&v17, a1 + 480);
  subscriber::makeSimSlotRange();
  int v3 = v13;
  unsigned __int8 v2 = v14;
  if (v13 != v14)
  {
    int v4 = v15;
    while ((v15(*v3) & 1) == 0)
    {
      if (++v3 == v14)
      {
        int v3 = v14;
        break;
      }
    }
    int v5 = v14;
    while (v3 != v5)
    {
      int v12 = 0;
      uint64_t v6 = *v3;
      int v12 = *v3;
      if (*(_DWORD *)(a1 + 344))
      {
        BOOL v7 = 1;
      }
      else
      {
        unsigned int DataRoamingSetting_sync = (unsigned __int16)RoamingHandler::getDataRoamingSetting_sync(a1, v6);
        if (DataRoamingSetting_sync <= 0x100) {
          LOBYTE(DataRoamingSetting_sync) = 0;
        }
        BOOL v7 = DataRoamingSetting_sync != 0;
      }
      BOOL v11 = v7;
      sub_1004191E8((uint64_t)&v17, &v12, &v11);
      char v9 = v3 + 1;
      int v3 = v2;
      if (v9 != v2)
      {
        int v3 = v9;
        while ((v4(*v3) & 1) == 0)
        {
          if (++v3 == v2)
          {
            int v3 = v2;
            break;
          }
        }
      }
    }
  }
  return sub_10041F34C((uint64_t)v16);
}

void sub_1004191C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10041F34C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1004191E8(uint64_t a1, int *a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    uint64_t v5 = a1 + 8;
    return sub_10041F4EC((uint64_t **)a1, (uint64_t *)v5, a2, a2, a3);
  }
  int v4 = *a2;
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 < v4;
    if (v6 >= v4) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 8 || v4 < *(_DWORD *)(v5 + 28)) {
    return sub_10041F4EC((uint64_t **)a1, (uint64_t *)v5, a2, a2, a3);
  }
  *(unsigned char *)(v5 + 32) = *a3;
  return (_DWORD *)v5;
}

void sub_100419274(uint64_t a1, dispatch_object_t *a2)
{
  unsigned __int8 v2 = (void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = 0;
  v4[1] = 0;
  sub_10003E168(v4, v2);
  operator new();
}

void sub_10041939C(uint64_t a1, int a2, uint64_t a3)
{
  v4[4] = a1;
  int v5 = a2;
  sub_10041F6B4((uint64_t)&v6, a3);
  v4[0] = 0;
  v4[1] = 0;
  sub_10003E168(v4, (void *)(a1 + 8));
  operator new();
}

void sub_1004194E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_1004194F8(uint64_t result, int a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    uint64_t v3 = (void *)(result + 8);
    v4[4] = result;
    int v5 = a2;
    sub_100023950((uint64_t)&v6, a3);
    v4[0] = 0;
    v4[1] = 0;
    sub_10003E168(v4, v3);
    operator new();
  }
  return result;
}

void sub_100419648(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100419658(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = 0;
  sub_10003E168(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100419744(uint64_t a1)
{
}

void sub_10041974C(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = 0;
  sub_10003E168(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100419834(uint64_t a1)
{
}

uint64_t sub_10041983C(uint64_t a1, uint64_t a2)
{
  uint64_t result = rest::operator==();
  if ((result & 1) == 0)
  {
    int v5 = *(void **)(a1 + 352);
    if (v5 != (void *)(a1 + 360))
    {
      uint64_t v6 = (uint64_t *)(a2 + 8);
      while (1)
      {
        uint64_t v7 = *v6;
        if (!*v6) {
          break;
        }
        uint64_t v8 = *((unsigned int *)v5 + 8);
        uint64_t v9 = a2 + 8;
        do
        {
          int v10 = *(_DWORD *)(v7 + 32);
          BOOL v11 = v10 < (int)v8;
          if (v10 >= (int)v8) {
            int v12 = (uint64_t *)v7;
          }
          else {
            int v12 = (uint64_t *)(v7 + 8);
          }
          if (!v11) {
            uint64_t v9 = v7;
          }
          uint64_t v7 = *v12;
        }
        while (*v12);
        if ((uint64_t *)v9 == v6 || (int)v8 < *(_DWORD *)(v9 + 32)) {
          goto LABEL_17;
        }
        uint64_t result = rest::operator==();
        if ((result & 1) == 0)
        {
          uint64_t v8 = *((unsigned int *)v5 + 8);
          uint64_t v13 = a1;
          uint64_t v14 = (uint64_t)(v5 + 5);
          goto LABEL_18;
        }
LABEL_19:
        uint64_t v15 = (void *)v5[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v16 = (void *)v5[2];
            BOOL v17 = *v16 == (void)v5;
            int v5 = v16;
          }
          while (!v17);
        }
        int v5 = v16;
        if (v16 == (void *)(a1 + 360)) {
          return result;
        }
      }
      uint64_t v8 = *((unsigned int *)v5 + 8);
LABEL_17:
      uint64_t v14 = (uint64_t)(v5 + 5);
      uint64_t v13 = a1;
LABEL_18:
      uint64_t result = sub_10041FE14(v13, v8, v14);
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_100419940(void *a1, uint64_t a2)
{
  uint64_t result = rest::operator==();
  if ((result & 1) == 0)
  {
    int v5 = (void *)a1[47];
    if (v5 != a1 + 48)
    {
      uint64_t v6 = (void *)(a2 + 8);
      while (1)
      {
        uint64_t v7 = *v6;
        if (!*v6) {
          break;
        }
        int v8 = *((_DWORD *)v5 + 8);
        uint64_t v9 = v6;
        do
        {
          int v10 = *(_DWORD *)(v7 + 32);
          BOOL v11 = v10 < v8;
          if (v10 >= v8) {
            int v12 = (uint64_t *)v7;
          }
          else {
            int v12 = (uint64_t *)(v7 + 8);
          }
          if (!v11) {
            uint64_t v9 = (void *)v7;
          }
          uint64_t v7 = *v12;
        }
        while (*v12);
        if (v9 == v6 || v8 < *((_DWORD *)v9 + 8)) {
          goto LABEL_16;
        }
        uint64_t result = rest::operator==();
        if ((result & 1) == 0) {
          break;
        }
LABEL_17:
        uint64_t v13 = (void *)v5[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v5[2];
            BOOL v15 = *v14 == (void)v5;
            int v5 = v14;
          }
          while (!v15);
        }
        int v5 = v14;
        if (v14 == a1 + 48) {
          return result;
        }
      }
      int v8 = *((_DWORD *)v5 + 8);
LABEL_16:
      uint64_t result = sub_1000685C8(a1, v8);
      goto LABEL_17;
    }
  }
  return result;
}

void sub_100419A24(void *a1, void *a2)
{
  if (a2[2] == a1[52])
  {
    int v4 = a2 + 1;
    int v5 = (void *)*a2;
    if ((void *)*a2 == a2 + 1) {
      return;
    }
    uint64_t v6 = (void *)a1[50];
    while (*((_DWORD *)v5 + 8) == *((_DWORD *)v6 + 8) && rest::operator==())
    {
      uint64_t v7 = (void *)v5[1];
      int v8 = v5;
      if (v7)
      {
        do
        {
          int v5 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v5 = (void *)v8[2];
          BOOL v9 = *v5 == (void)v8;
          int v8 = v5;
        }
        while (!v9);
      }
      int v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (void *)v6[2];
          BOOL v9 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v9);
      }
      uint64_t v6 = v11;
      if (v5 == v4) {
        return;
      }
    }
  }
  int v12 = (void *)a1[50];
  if (v12 != a1 + 51)
  {
    uint64_t v13 = a2 + 1;
    while (1)
    {
      uint64_t v14 = *v13;
      if (!*v13) {
        break;
      }
      uint64_t v15 = *((unsigned int *)v12 + 8);
      uint64_t v16 = a2 + 1;
      do
      {
        int v17 = *(_DWORD *)(v14 + 32);
        BOOL v18 = v17 < (int)v15;
        if (v17 >= (int)v15) {
          unsigned __int8 v19 = (uint64_t *)v14;
        }
        else {
          unsigned __int8 v19 = (uint64_t *)(v14 + 8);
        }
        if (!v18) {
          uint64_t v16 = (uint64_t *)v14;
        }
        uint64_t v14 = *v19;
      }
      while (*v19);
      if (v16 == v13 || (int)v15 < *((_DWORD *)v16 + 8)) {
        goto LABEL_33;
      }
      if ((rest::operator==() & 1) == 0)
      {
        uint64_t v15 = *((unsigned int *)v12 + 8);
        uint64_t v20 = (uint64_t)a1;
        uint64_t v21 = (uint64_t)(v12 + 5);
        goto LABEL_34;
      }
LABEL_35:
      unint64_t v22 = (void *)v12[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          unint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v12[2];
          BOOL v9 = *v23 == (void)v12;
          int v12 = v23;
        }
        while (!v9);
      }
      int v12 = v23;
      if (v23 == a1 + 51) {
        return;
      }
    }
    uint64_t v15 = *((unsigned int *)v12 + 8);
LABEL_33:
    uint64_t v21 = (uint64_t)(v12 + 5);
    uint64_t v20 = (uint64_t)a1;
LABEL_34:
    sub_10041FF34(v20, v15, v21);
    goto LABEL_35;
  }
}

void sub_100419BC8(uint64_t a1, void *a2)
{
  if (a2[2] == *(void *)(a1 + 440))
  {
    uint64_t v3 = (void *)*a2;
    if ((void *)*a2 == a2 + 1) {
      return;
    }
    int v4 = *(void **)(a1 + 424);
    int v5 = v4;
    while (1)
    {
      BOOL v6 = *((_DWORD *)v3 + 7) == *((_DWORD *)v5 + 7) && *((_DWORD *)v3 + 8) == *((_DWORD *)v5 + 8);
      if (!v6) {
        break;
      }
      uint64_t v7 = (void *)v3[1];
      int v8 = v3;
      if (v7)
      {
        do
        {
          uint64_t v3 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v3 = (void *)v8[2];
          BOOL v6 = *v3 == (void)v8;
          int v8 = v3;
        }
        while (!v6);
      }
      BOOL v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v5[2];
          BOOL v6 = *v10 == (void)v5;
          int v5 = v10;
        }
        while (!v6);
      }
      int v5 = v10;
      if (v3 == a2 + 1) {
        return;
      }
    }
  }
  else
  {
    int v4 = *(void **)(a1 + 424);
  }
  BOOL v11 = (void *)(a1 + 432);
  if (v4 != (void *)(a1 + 432))
  {
    int v12 = a2 + 1;
    while (1)
    {
      uint64_t v13 = *v12;
      uint64_t v14 = *((unsigned int *)v4 + 7);
      if (!*v12) {
        break;
      }
      uint64_t v15 = v12;
      do
      {
        int v16 = *(_DWORD *)(v13 + 28);
        BOOL v17 = v16 < (int)v14;
        if (v16 >= (int)v14) {
          BOOL v18 = (uint64_t *)v13;
        }
        else {
          BOOL v18 = (uint64_t *)(v13 + 8);
        }
        if (!v17) {
          uint64_t v15 = (void *)v13;
        }
        uint64_t v13 = *v18;
      }
      while (*v18);
      if (v15 == v12 || (int)v14 < *((_DWORD *)v15 + 7)) {
        break;
      }
      unsigned __int8 v19 = (int *)(v4 + 4);
      if (*((_DWORD *)v15 + 8) != *((_DWORD *)v4 + 8)) {
        goto LABEL_35;
      }
LABEL_40:
      uint64_t v21 = (void *)v4[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unint64_t v22 = (void *)v4[2];
          BOOL v6 = *v22 == (void)v4;
          int v4 = v22;
        }
        while (!v6);
      }
      int v4 = v22;
      if (v22 == v11) {
        return;
      }
    }
    unsigned __int8 v19 = (int *)(v4 + 4);
LABEL_35:
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    sub_100061CB0(&v25, a1, v14);
    if (v25)
    {
      (*(void (**)(uint64_t, void))(*(void *)v25 + 128))(v25, *v19);
    }
    else
    {
      uint64_t v20 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), v14);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *v19;
        char v24 = "Device Type unknown";
        if (v23 <= 3) {
          char v24 = off_1019CA768[v23];
        }
        *(_DWORD *)stat buf = 136315138;
        char v28 = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Could not get roaming network for device type (%s) change", buf, 0xCu);
      }
    }
    if (v26) {
      sub_10004D2C8(v26);
    }
    goto LABEL_40;
  }
}

void sub_100419E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100419EAC(uint64_t result, _DWORD *a2)
{
  if (*(_DWORD *)(result + 344) != *a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(NSObject **)(result + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Triggering further action as effective roaming settings may be changed due to CellularPlanBootstrapStatus change", buf, 2u);
    }
    subscriber::makeSimSlotRange();
    int v5 = *(unsigned int **)buf;
    int v4 = v14;
    if (*(unsigned int **)buf != v14)
    {
      BOOL v6 = v15;
      while ((v6(*v5) & 1) == 0)
      {
        if (++v5 == v4)
        {
          int v5 = v4;
          break;
        }
      }
      uint64_t v7 = v14;
      while (v5 != v7)
      {
        uint64_t v8 = *v5;
        BOOL v9 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_DWORD *)(v2 + 344)) {
            goto LABEL_15;
          }
          unsigned int DataRoamingSetting_sync = (unsigned __int16)RoamingHandler::getDataRoamingSetting_sync(v2, v8);
          if (DataRoamingSetting_sync <= 0x100) {
            LOBYTE(DataRoamingSetting_sync) = 0;
          }
          if ((_BYTE)DataRoamingSetting_sync) {
LABEL_15:
          }
            BOOL v11 = "true";
          else {
            BOOL v11 = "false";
          }
          *(_DWORD *)int v16 = 136315138;
          BOOL v17 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I \t%s", v16, 0xCu);
        }
        int v12 = v5 + 1;
        int v5 = v4;
        if (v12 != v4)
        {
          int v5 = v12;
          while ((v6(*v5) & 1) == 0)
          {
            if (++v5 == v4)
            {
              int v5 = v4;
              break;
            }
          }
        }
      }
    }
    return sub_10041907C(v2);
  }
  return result;
}

void sub_10041A0C8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v38 = "Roaming results:";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  }
  uint64_t v3 = *(void **)(a1 + 152);
  if (v3 != (void *)(a1 + 160))
  {
    do
    {
      int v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *((unsigned int *)v3 + 7));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = asString();
        *(_DWORD *)stat buf = 136315138;
        uint64_t v38 = (const char *)v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I \t%s", buf, 0xCu);
      }
      BOOL v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          BOOL v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != (void *)(a1 + 160));
  }
  BOOL v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v38 = "In home countries:";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  }
  int v10 = *(void **)(a1 + 208);
  if (v10 != (void *)(a1 + 216))
  {
    do
    {
      BOOL v11 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *((unsigned int *)v10 + 7));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)v10 + 32)) {
          int v12 = "true";
        }
        else {
          int v12 = "false";
        }
        *(_DWORD *)stat buf = 136315138;
        uint64_t v38 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I \t%s", buf, 0xCu);
      }
      uint64_t v13 = (void *)v10[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v10[2];
          BOOL v8 = *v14 == (void)v10;
          int v10 = v14;
        }
        while (!v8);
      }
      int v10 = v14;
    }
    while (v14 != (void *)(a1 + 216));
  }
  uint64_t v15 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v38 = "In home countries definite:";
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  }
  int v16 = *(void **)(a1 + 264);
  if (v16 != (void *)(a1 + 272))
  {
    do
    {
      BOOL v17 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *((unsigned int *)v16 + 7));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)v16 + 32)) {
          BOOL v18 = "true";
        }
        else {
          BOOL v18 = "false";
        }
        *(_DWORD *)stat buf = 136315138;
        uint64_t v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I \t%s", buf, 0xCu);
      }
      unsigned __int8 v19 = (void *)v16[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          unsigned __int8 v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v16[2];
          BOOL v8 = *v20 == (void)v16;
          int v16 = v20;
        }
        while (!v8);
      }
      int v16 = v20;
    }
    while (v20 != (void *)(a1 + 272));
  }
  uint64_t v21 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v38 = "Domestic roamings: ";
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  }
  unint64_t v22 = *(void **)(a1 + 320);
  if (v22 != (void *)(a1 + 328))
  {
    do
    {
      uint64_t v23 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *((unsigned int *)v22 + 7));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)v22 + 32)) {
          char v24 = "true";
        }
        else {
          char v24 = "false";
        }
        *(_DWORD *)stat buf = 136315138;
        uint64_t v38 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I \t%s", buf, 0xCu);
      }
      uint64_t v25 = (void *)v22[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v22[2];
          BOOL v8 = *v26 == (void)v22;
          unint64_t v22 = v26;
        }
        while (!v8);
      }
      unint64_t v22 = v26;
    }
    while (v26 != (void *)(a1 + 328));
  }
  unint64_t v27 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v38 = "Effective data roaming setting:";
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  }
  char v28 = *(void **)(a1 + 480);
  if (v28 != (void *)(a1 + 488))
  {
    do
    {
      int v29 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *((unsigned int *)v28 + 7));
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)v28 + 32)) {
          char v30 = "true";
        }
        else {
          char v30 = "false";
        }
        *(_DWORD *)stat buf = 136315138;
        uint64_t v38 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I \t%s", buf, 0xCu);
      }
      unsigned int v31 = (void *)v28[1];
      if (v31)
      {
        do
        {
          unint64_t v32 = v31;
          unsigned int v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          unint64_t v32 = (void *)v28[2];
          BOOL v8 = *v32 == (void)v28;
          char v28 = v32;
        }
        while (!v8);
      }
      char v28 = v32;
    }
    while (v32 != (void *)(a1 + 488));
  }
  char v33 = *(void **)(a1 + 64);
  uint64_t v34 = (void *)(a1 + 72);
  if (v33 != v34)
  {
    do
    {
      (*(void (**)(void))(*(void *)v33[5] + 96))(v33[5]);
      uint64_t v35 = (void *)v33[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          uint64_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (void *)v33[2];
          BOOL v8 = *v36 == (void)v33;
          char v33 = v36;
        }
        while (!v8);
      }
      char v33 = v36;
    }
    while (v36 != v34);
  }
}

void *sub_10041A760(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10041A7E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10041A868(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10041A8EC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10041A970(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10041A9F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10041AA30(uint64_t a1)
{
}

uint64_t sub_10041AA4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10041AA90(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_10041AABC(ServiceManager::Service *this)
{
  *(void *)this = off_1019C9F20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_10041AB18(ServiceManager::Service *this)
{
  *(void *)this = off_1019C9F20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_10041AB88@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "RoamingHandler");
}

unsigned char *sub_10041AB98@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10041ABD8(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_1004181C0(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_1004181C0(v4, 0);
}

uint64_t sub_10041AC5C()
{
  return 1;
}

uint64_t sub_10041AC64()
{
  return 1;
}

uint64_t sub_10041AC6C()
{
  return 2;
}

void sub_10041AC74(uint64_t a1, xpc_object_t *a2, NSObject **a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  xpc_object_t v5 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  BOOL v6 = *a3;
  uint64_t v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    sub_1004182B8(v4, v5, &v7);
  }
  sub_1004182B8(v4, v5, &v7);
}

void sub_10041AD24(uint64_t a1)
{
  int v1 = (void *)(*(void *)(a1 + 8) + 8);
  v2[0] = 0;
  v2[1] = 0;
  sub_10003E168(v2, v1);
  operator new();
}

void sub_10041AE00(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003E168(v5, (void *)(v3 + 8));
  operator new();
}

void sub_10041AF14(ServiceManager::Service *this)
{
  *(void *)this = off_1019C9F20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_10041AF70(ServiceManager::Service *this)
{
  *(void *)this = off_1019C9F20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

uint64_t sub_10041AFE0()
{
  return 0;
}

uint64_t sub_10041AFE8()
{
  return 0;
}

void sub_10041AFF8()
{
}

uint64_t sub_10041B00C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

uint64_t *sub_10041B018(void **a1)
{
  int v1 = *a1;
  BOOL v11 = a1;
  int v12 = v1;
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(NSObject **)(*v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down", buf, 2u);
  }
  uint64_t v4 = (void *)v2[8];
  if (v4 != v2 + 9)
  {
    do
    {
      uint64_t v5 = v4[5];
      BOOL v6 = v1[1];
      *(void *)stat buf = v6;
      if (v6)
      {
        dispatch_retain(v6);
        if (*(void *)buf) {
          dispatch_group_enter(*(dispatch_group_t *)buf);
        }
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 32))(v5, buf);
      if (*(void *)buf)
      {
        dispatch_group_leave(*(dispatch_group_t *)buf);
        if (*(void *)buf) {
          dispatch_release(*(dispatch_object_t *)buf);
        }
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != v2 + 9);
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 13));
  sub_100088C88((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_10041B158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_group_t group)
{
}

uint64_t *sub_10041B194(void **a1)
{
  int v1 = *a1;
  long long v46 = a1;
  char v47 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(NSObject **)(*v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  Registry::createRestModuleOneTimeUseConnection(&v57, *(Registry **)(v2 + 88));
  ctu::RestModule::connect();
  if (v58) {
    sub_10004D2C8(v58);
  }
  uint64_t v4 = (uint8_t *)(v2 + 120);
  *(void *)stat buf = off_1019CA008;
  uint64_t v65 = v2 + 104;
  uint64_t v67 = buf;
  if (buf != (uint8_t *)(v2 + 120))
  {
    uint64_t v5 = *(uint8_t **)(v2 + 144);
    if (v5 == v4)
    {
      uint64_t v60 = v2 + 104;
      __int16 v61 = 0;
      long long __p = off_1019CA008;
      uint64_t v67 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v4 + 24))(v2 + 120, buf);
      (*(void (**)(void))(**(void **)(v2 + 144) + 32))(*(void *)(v2 + 144));
      *(void *)(v2 + 144) = 0;
      uint64_t v67 = buf;
      (*((void (**)(void **, uint64_t))__p + 3))(&__p, v2 + 120);
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else
    {
      *(void *)(v2 + 120) = off_1019CA008;
      *(void *)(v2 + 128) = v2 + 104;
      uint64_t v67 = v5;
    }
    *(void *)(v2 + 144) = v4;
  }
  sub_10041A7E4(buf);
  uint64_t v6 = *(void *)(v2 + 144);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v2 + 152);
  }
  *(void *)stat buf = off_1019CA098;
  uint64_t v65 = v2 + 104;
  uint64_t v67 = buf;
  sub_10041CA0C(buf, (void *)(v2 + 176));
  sub_10041A760(buf);
  uint64_t v7 = *(void *)(v2 + 200);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v2 + 208);
  }
  *(void *)stat buf = off_1019CA128;
  uint64_t v65 = v2 + 104;
  uint64_t v67 = buf;
  sub_10041CA0C(buf, (void *)(v2 + 232));
  sub_10041A760(buf);
  uint64_t v8 = *(void *)(v2 + 256);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v2 + 264);
  }
  *(void *)stat buf = off_1019CA1A8;
  uint64_t v65 = v2 + 104;
  uint64_t v67 = buf;
  sub_10041CA0C(buf, (void *)(v2 + 288));
  sub_10041A760(buf);
  uint64_t v9 = *(void *)(v2 + 312);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v2 + 320);
  }
  *(void *)stat buf = off_1019CA228;
  uint64_t v65 = v2 + 104;
  uint64_t v67 = buf;
  sub_10041CA0C(buf, (void *)(v2 + 448));
  sub_10041A760(buf);
  uint64_t v10 = *(void *)(v2 + 472);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v2 + 480);
  }
  sub_100058DB0(&__p, "/cc/props/carrier_bundles");
  BOOL v11 = (uint8_t *)operator new(0x28uLL);
  *(void *)BOOL v11 = off_1019CA2A8;
  *((void *)v11 + 1) = v2 + 352;
  *((void *)v11 + 2) = v2;
  *((void *)v11 + 3) = sub_10041983C;
  *((void *)v11 + 4) = 0;
  uint64_t v67 = v11;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/props/operator_bundles");
  int v12 = (uint8_t *)operator new(0x28uLL);
  *(void *)int v12 = off_1019CA328;
  *((void *)v12 + 1) = v2 + 376;
  *((void *)v12 + 2) = v2;
  *((void *)v12 + 3) = sub_100419940;
  *((void *)v12 + 4) = 0;
  uint64_t v67 = v12;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/props/mcc_mnc_computed_info");
  uint64_t v13 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v13 = off_1019CA3A8;
  *((void *)v13 + 1) = v2 + 400;
  *((void *)v13 + 2) = v2;
  *((void *)v13 + 3) = sub_100419A24;
  *((void *)v13 + 4) = 0;
  uint64_t v67 = v13;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/events/dump_state");
  uint64_t v14 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v14 = off_1019CA428;
  *((void *)v14 + 1) = v2;
  *((void *)v14 + 2) = sub_10041A0C8;
  *((void *)v14 + 3) = 0;
  uint64_t v67 = v14;
  ctu::RestModule::observeEvent();
  uint64_t v15 = (capabilities::ct *)sub_10003F600(buf);
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  if (capabilities::ct::getProvisioningProfileSupport(v15) == 1)
  {
    sub_100058DB0(&__p, "/cc/props/cellular_plan_bootstrap_status");
    int v16 = (uint8_t *)operator new(0x28uLL);
    *(void *)int v16 = off_1019CA4A8;
    *((void *)v16 + 1) = v2 + 344;
    *((void *)v16 + 2) = v2;
    *((void *)v16 + 3) = sub_100419EAC;
    *((void *)v16 + 4) = 0;
    uint64_t v67 = v16;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p);
    }
  }
  sub_100058DB0(&__p, "/cc/props/device_types");
  BOOL v17 = (uint8_t *)operator new(0x28uLL);
  *(void *)BOOL v17 = off_1019CA528;
  *((void *)v17 + 1) = v2 + 424;
  *((void *)v17 + 2) = v2;
  *((void *)v17 + 3) = sub_100419BC8;
  *((void *)v17 + 4) = 0;
  uint64_t v67 = v17;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  sub_10041BCB4(v2 + 504);
  BOOL v18 = *(void **)(v2 + 64);
  if (v18 != (void *)(v2 + 72))
  {
    do
    {
      uint64_t v19 = v18[5];
      uint64_t v20 = v1[1];
      dispatch_group_t group = v20;
      if (v20)
      {
        dispatch_retain(v20);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      uint64_t v21 = *(std::__shared_weak_count **)(v2 + 16);
      if (!v21 || (uint64_t v22 = *(void *)(v2 + 8), (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
        sub_100088B9C();
      }
      uint64_t v24 = v22 + 48;
      if (!v22) {
        uint64_t v24 = 0;
      }
      uint64_t v54 = v24;
      __int16 v55 = v23;
      (*(void (**)(uint64_t, dispatch_group_t *, uint64_t *))(*(void *)v19 + 16))(v19, &group, &v54);
      if (v55) {
        sub_10004D2C8(v55);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      uint64_t v25 = (void *)v18[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v18[2];
          BOOL v27 = *v26 == (void)v18;
          BOOL v18 = v26;
        }
        while (!v27);
      }
      BOOL v18 = v26;
    }
    while (v26 != (void *)(v2 + 72));
  }
  RoamingHandler::setupAwdMetricCallback_sync((RoamingHandler *)v2);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 88));
  int v29 = ServiceMap;
  if (v30 < 0)
  {
    unsigned int v31 = (unsigned __int8 *)(v30 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v32 = 5381;
    do
    {
      uint64_t v30 = v32;
      unsigned int v33 = *v31++;
      uint64_t v32 = (33 * v32) ^ v33;
    }
    while (v33);
  }
  std::mutex::lock(ServiceMap);
  *(void *)stat buf = v30;
  uint64_t v34 = sub_10004D37C(&v29[1].__m_.__sig, (unint64_t *)buf);
  if (v34)
  {
    uint64_t v36 = v34[3];
    uint64_t v35 = (std::__shared_weak_count *)v34[4];
    if (v35)
    {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v29);
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v35);
      char v37 = 0;
      if (!v36) {
        goto LABEL_76;
      }
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v36 = 0;
  }
  std::mutex::unlock(v29);
  uint64_t v35 = 0;
  char v37 = 1;
  if (!v36) {
    goto LABEL_76;
  }
LABEL_61:
  uint64_t v38 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v38 || (uint64_t v39 = *(void *)(v2 + 8), (v40 = std::__shared_weak_count::lock(v38)) == 0)) {
    sub_100088B9C();
  }
  CFTypeRef v41 = v40;
  p_shared_weak_owners = &v40->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v40);
  uint64_t v52 = v39;
  __int16 v53 = v41;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v43 = *(NSObject **)(v2 + 24);
  dispatch_object_t object = v43;
  if (v43) {
    dispatch_retain(v43);
  }
  *(void *)stat buf = _NSConcreteStackBlock;
  uint64_t v65 = 0x40000000;
  long long v66 = sub_10041BF30;
  uint64_t v67 = (uint8_t *)&unk_1019C9FB8;
  uint64_t v68 = v2;
  sub_10041BD94(v36, (uint64_t)"commCenterSwitchState", &v52, &object, buf);
  if (object) {
    dispatch_release(object);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  uint64_t v49 = v39;
  long long v50 = v41;
  atomic_fetch_add_explicit(&v41->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v44 = *(NSObject **)(v2 + 24);
  dispatch_object_t v48 = v44;
  if (v44) {
    dispatch_retain(v44);
  }
  long long __p = _NSConcreteStackBlock;
  uint64_t v60 = 0x40000000;
  __int16 v61 = sub_10041C3EC;
  long long v62 = &unk_1019C9FD8;
  uint64_t v63 = v2;
  sub_10041BD94(v36, (uint64_t)"commCenterRoamingInfo", &v49, &v48, &__p);
  if (v48) {
    dispatch_release(v48);
  }
  if (v50) {
    std::__shared_weak_count::__release_weak(v50);
  }
  std::__shared_weak_count::__release_weak(v41);
LABEL_76:
  if ((v37 & 1) == 0) {
    sub_10004D2C8(v35);
  }
  sub_100088C88((uint64_t *)&v47);
  return sub_100046B58((uint64_t *)&v46);
}

void sub_10041BB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, uint64_t a12, std::__shared_weak_count *a13, dispatch_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, dispatch_group_t group, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041BCB4(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/current_data_slot");
  v4[0] = off_1019CA5A8;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_10041BD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10041BD94(uint64_t a1, uint64_t a2, void *a3, dispatch_object_t *a4, void *aBlock)
{
  if (a2 && aBlock && *a4)
  {
    uint64_t v9 = _Block_copy(aBlock);
    uint64_t v10 = v9;
    dispatch_object_t object = *a4;
    *a4 = 0;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1174405120;
    v13[2] = sub_10041DD80;
    _OWORD v13[3] = &unk_1019CA618;
    BOOL v11 = (std::__shared_weak_count *)a3[1];
    void v13[4] = *a3;
    uint64_t v14 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (v9) {
      int v12 = _Block_copy(v9);
    }
    else {
      int v12 = 0;
    }
    aBlocka = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t, dispatch_object_t *, void *))(*(void *)a1 + 40))(a1, a2, 1, &object, v13);
    if (object) {
      dispatch_release(object);
    }
    if (aBlocka) {
      _Block_release(aBlocka);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v10) {
      _Block_release(v10);
    }
  }
}

void sub_10041BEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *aBlock, dispatch_object_t object)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041BF30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v32 = (Registry **)(v1 + 88);
  subscriber::makeSimSlotRange();
  uint64_t v2 = v33;
  if (v33 != v34)
  {
    while ((v35(*v2) & 1) == 0)
    {
      if (++v2 == v34)
      {
        uint64_t v2 = v34;
        break;
      }
    }
    if (v2 != v34)
    {
      unsigned int v31 = (uint64_t *)(v1 + 408);
      while (1)
      {
        uint64_t v3 = *v2;
        RoamingHandler::getDataRoamingSetting_sync(v1, v3);
        if (v3) {
          break;
        }
LABEL_46:
        uint64_t v30 = v2 + 1;
        uint64_t v2 = v34;
        if (v30 != v34)
        {
          uint64_t v2 = v30;
          while ((v35(*v2) & 1) == 0)
          {
            if (++v2 == v34)
            {
              uint64_t v2 = v34;
              break;
            }
          }
        }
        if (v2 == v34) {
          return;
        }
      }
      ServiceMap = (std::mutex *)Registry::getServiceMap(*v32);
      uint64_t v5 = ServiceMap;
      if (v6 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v8 = 5381;
        do
        {
          uint64_t v6 = v8;
          unsigned int v9 = *v7++;
          uint64_t v8 = (33 * v8) ^ v9;
        }
        while (v9);
      }
      std::mutex::lock(ServiceMap);
      *(void *)stat buf = v6;
      uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
      if (v10)
      {
        uint64_t v12 = v10[3];
        BOOL v11 = (std::__shared_weak_count *)v10[4];
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v5);
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v11);
          char v13 = 0;
          if (!v12)
          {
LABEL_44:
            if ((v13 & 1) == 0) {
              sub_10004D2C8(v11);
            }
            goto LABEL_46;
          }
LABEL_17:
          uint64_t v14 = (std::mutex *)Registry::getServiceMap(*v32);
          uint64_t v15 = v14;
          if (v16 < 0)
          {
            BOOL v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v18 = 5381;
            do
            {
              uint64_t v16 = v18;
              unsigned int v19 = *v17++;
              uint64_t v18 = (33 * v18) ^ v19;
            }
            while (v19);
          }
          std::mutex::lock(v14);
          *(void *)stat buf = v16;
          uint64_t v20 = sub_10004D37C(&v15[1].__m_.__sig, (unint64_t *)buf);
          if (v20)
          {
            uint64_t v22 = v20[3];
            uint64_t v21 = (std::__shared_weak_count *)v20[4];
            if (v21)
            {
              atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v15);
              atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v21);
              char v23 = 0;
              if (!v22) {
                goto LABEL_23;
              }
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v22 = 0;
          }
          std::mutex::unlock(v15);
          uint64_t v21 = 0;
          char v23 = 1;
          if (!v22)
          {
LABEL_23:
            uint64_t v24 = *(NSObject **)(v1 + 40);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)stat buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#N PersonalityShop is not ready", buf, 2u);
            }
LABEL_42:
            if ((v23 & 1) == 0) {
              sub_10004D2C8(v21);
            }
            goto LABEL_44;
          }
LABEL_27:
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v22 + 8))(&v37, v22, v3);
          if (v37)
          {
            if (*(unsigned char *)(v37 + 48))
            {
              uint64_t v25 = *v31;
              if (*v31)
              {
                uint64_t v26 = v1 + 408;
                do
                {
                  int v27 = *(_DWORD *)(v25 + 32);
                  BOOL v28 = v27 < (int)v3;
                  if (v27 >= (int)v3) {
                    int v29 = (uint64_t *)v25;
                  }
                  else {
                    int v29 = (uint64_t *)(v25 + 8);
                  }
                  if (!v28) {
                    uint64_t v26 = v25;
                  }
                  uint64_t v25 = *v29;
                }
                while (*v29);
                if ((uint64_t *)v26 != v31 && *(_DWORD *)(v26 + 32) <= (int)v3) {
                  operator new();
                }
              }
            }
          }
          if (v38) {
            sub_10004D2C8(v38);
          }
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      std::mutex::unlock(v5);
      BOOL v11 = 0;
      char v13 = 1;
      if (!v12) {
        goto LABEL_44;
      }
      goto LABEL_17;
    }
  }
}

void sub_10041C340()
{
}

void sub_10041C3E0()
{
  if (v0) {
    JUMPOUT(0x10041C3ACLL);
  }
  JUMPOUT(0x10041C3A4);
}

uint64_t sub_10041C3EC(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  uint64_t v2 = (void *)v1[8];
  uint64_t v3 = v1 + 9;
  if (v2 != v1 + 9)
  {
    uint64_t v4 = v1 + 51;
    do
    {
      uint64_t v5 = *v4;
      if (*v4)
      {
        int v6 = *((_DWORD *)v2 + 8);
        uint64_t v7 = v4;
        do
        {
          int v8 = *(_DWORD *)(v5 + 32);
          BOOL v9 = v8 < v6;
          if (v8 >= v6) {
            uint64_t v10 = (uint64_t *)v5;
          }
          else {
            uint64_t v10 = (uint64_t *)(v5 + 8);
          }
          if (!v9) {
            uint64_t v7 = (void *)v5;
          }
          uint64_t v5 = *v10;
        }
        while (*v10);
        if (v7 != v4 && v6 >= *((_DWORD *)v7 + 8)) {
          uint64_t result = (*(uint64_t (**)(void, void))(*(void *)v2[5] + 120))(v2[5], 0);
        }
      }
      BOOL v11 = (void *)v2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v2[2];
          BOOL v13 = *v12 == (void)v2;
          uint64_t v2 = v12;
        }
        while (!v13);
      }
      uint64_t v2 = v12;
    }
    while (v12 != v3);
  }
  return result;
}

void sub_10041C4D0()
{
}

void *sub_10041C4E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019CA008;
  result[1] = v3;
  return result;
}

uint64_t sub_10041C52C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CA008;
  a2[1] = v2;
  return result;
}

void sub_10041C558(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v29 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v29 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v29 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      int v11 = *((_DWORD *)v6 + 7);
      uint64_t v12 = subscriber::asString();
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v27, (ctu::rest::detail *)v11, v12, v13);
      long long __p = &v29;
      char v23 = "first";
      sub_100035E70((uint64_t)&__p, &v27, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      int v14 = *((_DWORD *)v6 + 8);
      uint64_t v15 = asString();
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v25, (ctu::rest::detail *)v14, v15, v16);
      long long __p = &v29;
      char v23 = "second";
      sub_100035E70((uint64_t)&__p, &v25, &v26);
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_release(v25);
      xpc_object_t v25 = 0;
      xpc_object_t v17 = v29;
      if (v29) {
        xpc_retain(v29);
      }
      else {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_release(v29);
      xpc_array_append_value(v4, v17);
      xpc_release(v17);
      uint64_t v18 = (void *)v6[1];
      if (v18)
      {
        do
        {
          unsigned int v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unsigned int v19 = (void *)v6[2];
          BOOL v20 = *v19 == (void)v6;
          int v6 = v19;
        }
        while (!v20);
      }
      int v6 = v19;
    }
    while (v19 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v21 = v4;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/roaming_results");
  xpc_object_t v29 = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t v29 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v29);
  xpc_object_t v29 = 0;
  if (v24 < 0) {
    operator delete(__p);
  }
  xpc_release(v21);
}

void sub_10041C830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_10041C8E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041C928()
{
}

void sub_10041C938()
{
}

void *sub_10041C94C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019CA098;
  result[1] = v3;
  return result;
}

uint64_t sub_10041C994(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CA098;
  a2[1] = v2;
  return result;
}

uint64_t sub_10041C9C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041CA00()
{
}

void *sub_10041CA0C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    xpc_object_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10041CC74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_10041CC84()
{
}

void *sub_10041CC98(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019CA128;
  result[1] = v3;
  return result;
}

uint64_t sub_10041CCE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CA128;
  a2[1] = v2;
  return result;
}

void sub_10041CD0C(uint64_t a1, void *a2)
{
  xpc_object_t v5 = 0;
  sub_100014264(a2, &v5);
  sub_100058DB0(&__p, "/cc/props/in_home_countries_definite");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_10041CDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10041CDF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041CE34()
{
}

void sub_10041CE44()
{
}

void *sub_10041CE58(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019CA1A8;
  result[1] = v3;
  return result;
}

uint64_t sub_10041CEA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CA1A8;
  a2[1] = v2;
  return result;
}

void sub_10041CECC(uint64_t a1, void *a2)
{
  xpc_object_t v5 = 0;
  sub_100014264(a2, &v5);
  sub_100058DB0(&__p, "/cc/props/domestic_roamings");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_10041CF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10041CFB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041CFF4()
{
}

void sub_10041D004()
{
}

void *sub_10041D018(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019CA228;
  result[1] = v3;
  return result;
}

uint64_t sub_10041D060(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CA228;
  a2[1] = v2;
  return result;
}

void sub_10041D08C(uint64_t a1, void *a2)
{
  xpc_object_t v5 = 0;
  sub_100014264(a2, &v5);
  sub_100058DB0(&__p, "/cc/props/effective_data_roaming_setting");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_10041D130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10041D174(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041D1B4()
{
}

void sub_10041D1C4()
{
}

__n128 sub_10041D1D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019CA2A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10041D22C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CA2A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10041D264(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  char v4 = v3 + 1;
  xpc_object_t v5 = (void *)v3[1];
  xpc_object_t v9 = (void **)*v3;
  xpc_object_t v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *uint64_t v3 = v4;
    *char v4 = 0;
    v3[2] = 0;
  }
  else
  {
    xpc_object_t v9 = &v10;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087F94((uint64_t)&v9, v10);
}

void sub_10041D324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_10041D33C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041D37C()
{
}

void sub_10041D38C()
{
}

__n128 sub_10041D3A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019CA328;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10041D3F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CA328;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10041D42C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  char v4 = v3 + 1;
  xpc_object_t v5 = (void *)v3[1];
  xpc_object_t v9 = (void **)*v3;
  xpc_object_t v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *uint64_t v3 = v4;
    *char v4 = 0;
    v3[2] = 0;
  }
  else
  {
    xpc_object_t v9 = &v10;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087F94((uint64_t)&v9, v10);
}

void sub_10041D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_10041D504(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041D544()
{
}

void sub_10041D554()
{
}

__n128 sub_10041D568(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019CA3A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10041D5BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CA3A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10041D5F4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  char v4 = v3 + 1;
  xpc_object_t v5 = (void *)v3[1];
  xpc_object_t v9 = (void **)*v3;
  xpc_object_t v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *uint64_t v3 = v4;
    *char v4 = 0;
    v3[2] = 0;
  }
  else
  {
    xpc_object_t v9 = &v10;
  }
  sub_1001A789C((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10019D5B8((uint64_t)&v9, v10);
}

void sub_10041D6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_10041D6CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041D70C()
{
}

void sub_10041D71C()
{
}

__n128 sub_10041D730(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019CA428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10041D784(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CA428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10041D7BC(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_10041D804(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041D844()
{
}

void sub_10041D854()
{
}

__n128 sub_10041D868(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019CA4A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10041D8BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CA4A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10041D8F4(void *a1, xpc_object_t *a2)
{
  char v4 = (int *)a1[1];
  int v13 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v6);
    *char v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *char v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  xpc_object_t v9 = (uint64_t (*)(void *, int *))a1[3];
  uint64_t v10 = a1[4];
  int v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    xpc_object_t v9 = *(uint64_t (**)(void *, int *))(*v11 + v9);
  }
  return v9(v11, &v13);
}

uint64_t sub_10041D9F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041DA30()
{
}

void sub_10041DA40()
{
}

__n128 sub_10041DA54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019CA528;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10041DAA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CA528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10041DAE0(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  char v4 = v3 + 1;
  xpc_object_t v5 = (void *)v3[1];
  xpc_object_t v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *uint64_t v3 = v4;
    *char v4 = 0;
    v3[2] = 0;
  }
  else
  {
    xpc_object_t v9 = &v10;
  }
  sub_100026EC0((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10);
}

void sub_10041DBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_10041DBB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041DBF8()
{
}

void sub_10041DC08()
{
}

void *sub_10041DC1C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1019CA5A8;
  result[1] = v3;
  return result;
}

uint64_t sub_10041DC64(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CA5A8;
  a2[1] = v2;
  return result;
}

xpc_type_t sub_10041DC90(uint64_t a1, xpc_object_t *a2)
{
  return sub_10041DCE4((int **)(a1 + 8), a2);
}

uint64_t sub_10041DC98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10041DCD8()
{
}

xpc_type_t sub_10041DCE4(int **a1, xpc_object_t *a2)
{
  uint64_t v3 = *a1;
  xpc_type_t result = xpc_get_type(*a2);
  if (result == (xpc_type_t)&_xpc_type_string)
  {
    int v8 = *v3;
    xpc_type_t result = (xpc_type_t)ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v8, (int *)a2, v5);
    *uint64_t v3 = v8;
  }
  else if (result == (xpc_type_t)&_xpc_type_BOOL {
         || result == (xpc_type_t)&_xpc_type_int64
  }
         || result == (xpc_type_t)&_xpc_type_uint64)
  {
    xpc_type_t result = (xpc_type_t)xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v5);
    *uint64_t v3 = (int)result;
  }
  return result;
}

void sub_10041DD80(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    xpc_object_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      if (a1[4]) {
        sub_10041DE0C(a1 + 6, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_10041DDF8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_10041DE0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
  }
  (*(void (**)(uint64_t, void **))(v2 + 16))(v2, __p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10041DE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10041DEA0(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_type_t result = (void *)a2[6];
  if (result) {
    xpc_type_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void sub_10041DEEC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10041DF40(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  uint64_t v3 = *(void **)(v1 + 64);
  if (v3 != (void *)(v1 + 72))
  {
    do
    {
      (*(void (**)(void))(*(void *)v3[5] + 24))(v3[5]);
      uint64_t v4 = (void *)v3[1];
      if (v4)
      {
        do
        {
          xpc_object_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          xpc_object_t v5 = (void *)v3[2];
          BOOL v6 = *v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != (void *)(v1 + 72));
  }
  sub_10041907C(v1);
  operator delete();
}

void sub_10041E050()
{
}

uint64_t *sub_10041E080(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v37 = a1;
  uint64_t v38 = v1;
  uint64_t v4 = *v1;
  std::string::size_type v3 = (std::string::size_type)(v1 + 1);
  uint64_t v2 = v4;
  buf.__r_.__value_.__r.__words[0] = v3;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsEraseInstall";
  sub_100048BAC((uint64_t)&buf, &object);
  int v6 = xpc::dyn_cast_or_default((xpc *)&object, 0, v5);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      int v8 = "#I Erase-install, skipping roaming handler migration";
      xpc_object_t v9 = v7;
      uint32_t v10 = 2;
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&buf, v10);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v11 = *(unsigned int *)(v2 + 504);
  if (subscriber::isValidSimSlot())
  {
    CFTypeRef cf = 0;
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kLastSystemVersionString";
    sub_100048BAC((uint64_t)&buf, __s);
    xpc::bridge((uint64_t *)&object, (xpc *)__s, v12);
    sub_100056248(&cf, (CFTypeRef *)&object.__r_.__value_.__l.__data_);
    sub_1000577C4((const void **)&object.__r_.__value_.__l.__data_);
    xpc_release(*(xpc_object_t *)__s);
    CFStringRef v13 = (const __CFString *)cf;
    CFStringRef theString = (CFStringRef)cf;
    if (cf)
    {
      CFRetain(cf);
      CFStringRef v13 = theString;
    }
    *(_DWORD *)__s = 1145258561;
    if (v13) {
      int v14 = sub_1000810B8;
    }
    else {
      int v14 = 0;
    }
    if (!v14 || CFStringGetLength(v13) < 3)
    {
      sub_1000558F4((const void **)&theString);
      goto LABEL_13;
    }
    memset(&buf, 0, sizeof(buf));
    ctu::cf::assign();
    std::string object = buf;
    xpc_object_t v25 = std::string::basic_string(&buf, &object, 0, 2uLL, (std::allocator<char> *)&v42);
    unsigned int v26 = std::stoul(v25, 0, 10);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v26 > 0x11) {
      goto LABEL_32;
    }
    if (v26 != 17)
    {
LABEL_48:
      char v27 = 1;
LABEL_49:
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(object.__r_.__value_.__l.__data_);
      }
      sub_1000558F4((const void **)&theString);
      if ((v27 & 1) == 0)
      {
        uint64_t v35 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          memset(&buf, 0, sizeof(buf));
          ctu::cf::assign();
          std::string object = buf;
          p_std::string object = &object;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__s = 136446210;
          *(void *)&__s[4] = p_object;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I Migration not required from version: %{public}s", __s, 0xCu);
          if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(object.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_36;
      }
LABEL_13:
      uint64_t v15 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        memset(&buf, 0, sizeof(buf));
        ctu::cf::assign();
        std::string object = buf;
        uint64_t v16 = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &object;
        }
        *(_DWORD *)__s = 136446210;
        *(void *)&__s[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Migrating from version: %{public}s", __s, 0xCu);
        if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(object.__r_.__value_.__l.__data_);
        }
      }
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      LOWORD(object.__r_.__value_.__l.__data_) = RoamingHandler::getDataRoamingSetting_sync(v2, 1);
      xpc_object_t v17 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), 1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = printers::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Migrating with roaming setting: %s", (uint8_t *)&buf, 0xCu);
      }
      if (v11 != 1 && object.__r_.__value_.__s.__data_[1])
      {
        *(_WORD *)__s = RoamingHandler::getDataRoamingSetting_sync(v2, v11);
        uint64_t v19 = *(void *)(v2 + 56);
        BOOL v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 16);
        if (*(unsigned __int16 *)__s >= 0x100u)
        {
          BOOL v28 = *(NSObject **)v20(v19, v11);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = printers::asString();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Preserving data sim roaming setting: %s", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          xpc_object_t v21 = *(NSObject **)v20(v19, v11);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = printers::asString();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Assigning data sim roaming setting: %s", (uint8_t *)&buf, 0xCu);
          }
          sub_100418EA4(v2, v11, object.__r_.__value_.__s.__data_[0], 1);
        }
      }
      sub_10041907C(v2);
LABEL_36:
      sub_1000558F4(&cf);
      goto LABEL_37;
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    {
      if (object.__r_.__value_.__l.__size_ > 2)
      {
        unsigned int v31 = (std::string::value_type *)(object.__r_.__value_.__r.__words[0] + 2);
        goto LABEL_44;
      }
    }
    else if (HIBYTE(object.__r_.__value_.__r.__words[2]) > 2u)
    {
      unsigned int v31 = &object.__r_.__value_.__s.__data_[2];
LABEL_44:
      __darwin_ct_rune_t v32 = __toupper(*v31);
      unsigned int v33 = &__s[4];
      if (v32 == (char)v32)
      {
        uint64_t v34 = memchr(__s, v32, 4uLL);
        if (v34) {
          unsigned int v33 = v34;
        }
      }
      if (v33 - __s == 4)
      {
LABEL_32:
        char v27 = 0;
        goto LABEL_49;
      }
      goto LABEL_48;
    }
    sub_1000C14D8();
  }
  char v23 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = subscriber::asString();
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v24;
    int v8 = "#I Invalid data slot (%s), skipping roaming handler migration";
    xpc_object_t v9 = v23;
    uint32_t v10 = 12;
    goto LABEL_28;
  }
LABEL_37:
  sub_10041E760((uint64_t *)&v38);
  return sub_100046B58((uint64_t *)&v37);
}

void sub_10041E654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, int a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t object)
{
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  sub_1000558F4(&a15);
  sub_10041E760(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10041E760(uint64_t *result)
{
  uint64_t v1 = *result;
  *xpc_type_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(v1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      std::string::size_type v3 = *(NSObject **)(v1 + 16);
      if (v3) {
        dispatch_release(v3);
      }
    }
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t sub_10041E7D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  long long v7 = 0uLL;
  sub_100061CB0(&v7, v2, 1);
  if ((void)v7)
  {
    uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)v7 + 56))(v7, **(unsigned int **)(v1 + 8));
    if (*((void *)&v7 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  else
  {
    if (*((void *)&v7 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v7 + 1));
    }
    uint64_t v4 = *(NSObject **)(v2 + 40);
    uint64_t v3 = 1;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = subscriber::asString();
      LODWORD(v7) = 136315138;
      *(void *)((char *)&v7 + 4) = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not find network %s for is roaming query", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3;
}

void sub_10041E8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041E904(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_10041E940(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t *sub_10041E97C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_100061CB0(&v11, v2, *(_DWORD *)(v1 + 8));
  if (v11)
  {
    char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(v11);
    uint64_t v4 = 0;
  }
  else
  {
    BOOL v5 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), *(unsigned int *)(v1 + 8));
    uint64_t v4 = 0x1600000001;
    uint64_t v6 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not find network for is in home country query", buf, 2u);
    }
    char v3 = 0;
  }
  sub_1002483DC(v1 + 16, v4, v3);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10041EACC(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_10041EAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10041EACC(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10041EACC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10041A868((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_10041EB1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v12 = 0;
  CFStringRef v13 = 0;
  sub_100061CB0(&v12, v2, *(_DWORD *)(v1 + 8));
  uint64_t v3 = v12;
  if (v12)
  {
    char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
    char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 80))(v3);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0x1600000001;
    long long v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), *(unsigned int *)(v1 + 8));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Could not find network for is in home country query", buf, 2u);
    }
    char v4 = 0;
    char v5 = 0;
  }
  sub_100248450(v1 + 16, v6, v4, v5);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10041ECA4(&v10);
  return sub_100046B58((uint64_t *)&v9);
}

void sub_10041EC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10041ECA4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10041ECA4(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10041A8EC((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

unint64_t sub_10041ECF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_100061CB0(&v10, v2, **(_DWORD **)(v1 + 8));
  uint64_t v3 = v10;
  if (v10)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10);
    unsigned __int8 v5 = v4;
    unint64_t v6 = v4 & 0xFFFFFFFF00000000;
    uint64_t v7 = v4 & 0xFFFFFF00;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    unsigned __int8 v5 = 0;
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (!v3)
  {
    int v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), **(unsigned int **)(v1 + 8));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Could not find network for is in home country definite query", (uint8_t *)&v10, 2u);
    }
    unint64_t v6 = 0;
    unsigned __int8 v5 = 0;
  }
  return v6 & 0xFFFFFFFF00000000 | v7 | v5;
}

void sub_10041EE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041EE44(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  uint64_t v3 = *(void *)(a1 + 32);
  *(unsigned char *)uint64_t v3 = result;
  *(_DWORD *)(v3 + 4) = HIDWORD(result);
  return result;
}

uint64_t sub_10041EE88(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  uint64_t v3 = *(void *)(a1 + 32);
  *(unsigned char *)uint64_t v3 = result;
  *(_DWORD *)(v3 + 4) = HIDWORD(result);
  return result;
}

uint64_t sub_10041EECC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  uint64_t v3 = *(void *)(a1 + 32);
  *(unsigned char *)uint64_t v3 = result;
  *(_DWORD *)(v3 + 4) = HIDWORD(result);
  return result;
}

uint64_t *sub_10041EF10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  unsigned int DataRoamingSetting_sync = (unsigned __int16)RoamingHandler::getDataRoamingSetting_sync(*(void *)v1, *(unsigned int *)(v1 + 8));
  if (DataRoamingSetting_sync <= 0x100) {
    LOBYTE(DataRoamingSetting_sync) = 0;
  }
  sub_1000607A8(v1 + 16, DataRoamingSetting_sync != 0);
  sub_10041EF98(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_10041EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10041EF98(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_10041EFE8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  BOOL v20 = a1;
  uint64_t v21 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(*(void *)v1 + 56) + 16))(*(void *)(*(void *)v1 + 56), *(unsigned int *)(v1 + 8));
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_100061CB0(&v22, v2, *(_DWORD *)(v1 + 8));
  if (v22)
  {
    char v4 = sub_100418EA4(v2, *(unsigned int *)(v1 + 8), *(unsigned __int8 *)(v1 + 12), 0);
    unsigned int DataRoamingSetting_sync = (unsigned __int16)RoamingHandler::getDataRoamingSetting_sync(v2, *(unsigned int *)(v1 + 8));
    if (DataRoamingSetting_sync <= 0x100) {
      char v6 = 0;
    }
    else {
      char v6 = DataRoamingSetting_sync;
    }
    if ((v4 & 1) == 0)
    {
      sub_100060854(v1 + 16, 0);
      goto LABEL_24;
    }
    sub_10041907C(v2);
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 88));
    int v8 = ServiceMap;
    if (v9 < 0)
    {
      uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v11 = 5381;
      do
      {
        uint64_t v9 = v11;
        unsigned int v12 = *v10++;
        uint64_t v11 = (33 * v11) ^ v12;
      }
      while (v12);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string buf = v9;
    CFStringRef v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
    if (v13)
    {
      uint64_t v15 = v13[3];
      int v14 = (std::__shared_weak_count *)v13[4];
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v8);
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v14);
        char v16 = 0;
LABEL_18:
        if (v6)
        {
          uint64_t v18 = *v3;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Data roaming has been enabled, sending CS-PS Registration Preference request to Baseband", buf, 2u);
          }
          (*(void (**)(uint64_t, void))(*(void *)v15 + 376))(v15, *(unsigned int *)(v1 + 8));
        }
        (*(void (**)(uint64_t, void, BOOL))(*(void *)v15 + 464))(v15, *(unsigned int *)(v1 + 8), v6 != 0);
        sub_100060854(v1 + 16, 0);
        if ((v16 & 1) == 0) {
          sub_10004D2C8(v14);
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    std::mutex::unlock(v8);
    int v14 = 0;
    char v16 = 1;
    goto LABEL_18;
  }
  xpc_object_t v17 = *v3;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Could not find network for setting data roaming setting", buf, 2u);
  }
  sub_100060854(v1 + 16, 0x1600000001);
LABEL_24:
  if (v23) {
    sub_10004D2C8(v23);
  }
  sub_10041F2FC(&v21);
  return sub_100046B58((uint64_t *)&v20);
}

void sub_10041F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10041F2FC(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10041F2FC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10001C9D4((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_10041F34C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    uint64_t v3 = (void *)(a1 + 16);
    if (v2[6] == *(void *)(a1 + 32))
    {
      char v4 = (void *)v2[4];
      if (v4 == v2 + 5) {
        goto LABEL_24;
      }
      uint64_t v5 = (void *)*v3;
      while (1)
      {
        BOOL v6 = *((_DWORD *)v4 + 7) == *((_DWORD *)v5 + 7)
          && *((unsigned __int8 *)v4 + 32) == *((unsigned __int8 *)v5 + 32);
        if (!v6) {
          break;
        }
        uint64_t v7 = (void *)v4[1];
        int v8 = v4;
        if (v7)
        {
          do
          {
            char v4 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            char v4 = (void *)v8[2];
            BOOL v6 = *v4 == (void)v8;
            int v8 = v4;
          }
          while (!v6);
        }
        uint64_t v9 = (void *)v5[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v5[2];
            BOOL v6 = *v10 == (void)v5;
            uint64_t v5 = v10;
          }
          while (!v6);
        }
        uint64_t v5 = v10;
        if (v4 == v2 + 5) {
          goto LABEL_24;
        }
      }
    }
    sub_10041F480((uint64_t)(v2 + 4), v3);
    uint64_t v11 = v2[3];
    if (v11) {
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v2 + 4);
    }
  }
LABEL_24:
  sub_1000346F8(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10041F480(uint64_t a1, void *a2)
{
  char v4 = (void *)(a1 + 8);
  sub_1000346F8(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *char v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

_DWORD *sub_10041F4EC(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4, unsigned char *a5)
{
  uint64_t v12 = 0;
  CFStringRef v13 = 0;
  int v8 = sub_10005CF3C(a1, a2, &v13, &v12, a3);
  uint64_t v9 = (_DWORD *)*v8;
  if (!*v8)
  {
    uint64_t v10 = (uint64_t **)v8;
    uint64_t v9 = operator new(0x28uLL);
    v9[7] = *a4;
    *((unsigned char *)v9 + 32) = *a5;
    sub_100046C38(a1, (uint64_t)v13, v10, (uint64_t *)v9);
  }
  return v9;
}

uint64_t *sub_10041F58C(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void **)(*v1 + 64);
  uint64_t v3 = *v1 + 72;
  if (v2 != (void *)v3)
  {
    do
    {
      uint64_t v4 = v2[5];
      uint64_t v5 = v1[1];
      dispatch_group_t group = v5;
      if (v5)
      {
        dispatch_retain(v5);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v4 + 152))(v4, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != (void *)v3);
  }
  sub_100088C88((uint64_t *)&v11);
  return sub_100046B58((uint64_t *)&v10);
}

void sub_10041F680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  sub_100088C88(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10041F6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10041F74C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_10041F7CC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  long long __p = 0;
  uint64_t v10 = 0;
  sub_100061CB0(&__p, v2, *(_DWORD *)(v1 + 8));
  uint64_t v3 = __p;
  if (__p)
  {
    sub_10041F6B4((uint64_t)v12, v1 + 16);
    (*(void (**)(void *, void *))(*(void *)v3 + 104))(v3, v12);
    sub_10041A970(v12);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (!v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not find network for equivalent country list", (uint8_t *)&__p, 2u);
    }
    long long __p = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v5 = *(void *)(v1 + 40);
    if (!v5) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 48))(v5, &__p);
    if (__p)
    {
      uint64_t v10 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
  }
  sub_10041F98C(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_10041F93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10041F98C(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10041F98C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10041A970((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_10041F9DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  *(void *)std::string buf = 0;
  uint64_t v11 = 0;
  sub_100061CB0(buf, v2, *(_DWORD *)(v1 + 8));
  uint64_t v3 = *(void *)buf;
  if (*(void *)buf)
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)buf + 160))(*(void *)buf, *(unsigned int *)(v1 + 8));
    char v5 = v4;
    if (v4) {
      sub_10041907C(v2);
    }
    sub_1000607A8(v1 + 16, v5);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (!v3)
  {
    uint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not find network for checking if update is required", buf, 2u);
    }
    sub_1000607A8(v1 + 16, 0);
  }
  sub_10041FB18(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_10041FAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10041FB18(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

void sub_10041FB68(uint64_t **a1)
{
  int v4 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  v5[0] = 1;
  v5[1] = v2 + 232;
  char v3 = *((unsigned char *)v1 + 12);
  uint64_t v6 = v1 + 1;
  *((unsigned char *)sub_10005CE78((uint64_t **)(v2 + 264), (int *)v1 + 2, (uint64_t)&unk_10144E20E, &v6) + 32) = v3;
  sub_10041FC28((uint64_t)v5);
  operator delete();
}

void sub_10041FBF4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10041FC28((uint64_t)va);
  operator delete();
}

uint64_t sub_10041FC28(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v2 + 32);
    }
  }
  return a1;
}

void sub_10041FC8C(uint64_t **a1)
{
  uint64_t v12 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v5 = *(void *)(v2 + 160);
  int v4 = (uint64_t **)(v2 + 160);
  uint64_t v3 = v5;
  v13[0] = 1;
  v13[1] = v4 - 5;
  int v7 = *((_DWORD *)v1 + 2);
  int v6 = *((_DWORD *)v1 + 3);
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = v3;
        int v9 = *(_DWORD *)(v3 + 28);
        if (v9 <= v7) {
          break;
        }
        uint64_t v3 = *(void *)v8;
        uint64_t v10 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= v7) {
        goto LABEL_10;
      }
      uint64_t v3 = *(void *)(v8 + 8);
    }
    while (v3);
    uint64_t v10 = (uint64_t **)(v8 + 8);
  }
  else
  {
    uint64_t v10 = v4;
    uint64_t v8 = (uint64_t)v4;
  }
LABEL_9:
  uint64_t v11 = (uint64_t *)operator new(0x28uLL);
  *((_DWORD *)v11 + 7) = v7;
  *((_DWORD *)v11 + 8) = 0;
  sub_100046C38(v4 - 1, v8, v10, v11);
  uint64_t v8 = (uint64_t)v11;
LABEL_10:
  *(_DWORD *)(v8 + 32) = v6;
  sub_10041FDB0((uint64_t)v13);
  operator delete();
}

void sub_10041FD7C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10041FDB0((uint64_t)va);
  operator delete();
}

uint64_t sub_10041FDB0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v2 + 32);
    }
  }
  return a1;
}

uint64_t sub_10041FE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_100061CB0(&v9, a1, a2);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, a3);
  }
  else
  {
    int v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not find network for handling carrier bundle change", v8, 2u);
    }
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  return sub_1000685C8((void *)a1, a2);
}

void sub_10041FF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041FF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_100061CB0(&v8, a1, a2);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, a3);
  }
  else
  {
    int v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not find network for handling subscriber MCC/MNC computed change", v7, 2u);
    }
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_10042002C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100420048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)emergency::CallAgent::CallAgent();
  *uint64_t v5 = &off_1019CA798;
  v5[15] = a3;
  if (!a3) {
    __assert_rtn("CSCallAgent", "EmergencyCSCallAgent.cpp", 20, "driver && \"Need valid search driver\"");
  }
  return a1;
}

void sub_1004200BC(_Unwind_Exception *a1)
{
  emergency::CallAgent::~CallAgent(v1);
  _Unwind_Resume(a1);
}

const char *sub_1004200D0(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  if (v1 > 3) {
    return "???";
  }
  else {
    return off_1019CA800[v1];
  }
}

uint64_t sub_1004200F8()
{
  return 1;
}

uint64_t sub_100420100(emergency::CallAgent *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000F0058((uint64_t)v10, a2);
  sub_1000DFC90((uint64_t)v9, a3);
  sub_1000F0058((uint64_t)v8, a4);
  emergency::CallAgent::dial();
  sub_10003B34C(v8);
  sub_100060644(v9);
  sub_10003B34C(v10);
  return emergency::CallAgent::readyToDial(a1);
}

void sub_1004201B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_10003B34C((uint64_t *)va);
  sub_100060644((uint64_t *)va1);
  sub_10003B34C((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004201F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120), *(unsigned int *)(a1 + 8));
}

void sub_100420228(emergency::CallAgent *a1)
{
  emergency::CallAgent::~CallAgent(a1);

  operator delete();
}

void sub_100420260(Registry **a1@<X0>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x80uLL);
  *((void *)v4 + 1) = 0;
  *(void *)int v4 = off_1019CA940;
  uint64_t v5 = v4 + 24;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = off_1019CA830;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v15, kCtLoggingSystemName, "cp.ids.mgr");
  uint64_t v6 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  uint64_t v7 = dispatch_queue_create("CellularPlanIDSServiceManager", v6);
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    dispatch_retain(v7);
    *((void *)v4 + 7) = 0;
    dispatch_release(v8);
  }
  else
  {
    *((void *)v4 + 7) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&v16, &v15);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v4 + 64), (const ctu::OsLogLogger *)&v16);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&v16);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v15);
  *((void *)v4 + 3) = off_1019CA830;
  uint64_t v9 = *((void *)v4 + 6);
  *((void *)v4 + 9) = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  uint64_t v10 = (capabilities::ct *)capabilities::ct::supportsSIMProvisioningAsSignupSource((capabilities::ct *)v9);
  if ((v10 & 1) != 0
    || (uint64_t v11 = (std::__shared_weak_count *)capabilities::ct::supportsSIMProvisioningAsSignupDestination(v10), v11))
  {
    LOBYTE(v16) = 0;
    sub_100420B5C(&v15, *((NSObject **)v4 + 9), (uint64_t)a1, (unsigned __int8 *)&v16);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v4 + 11);
    *((OsLogContext *)v4 + 5) = v15;
    if (v12) {
      sub_10004D2C8(v12);
    }
    LOBYTE(v16) = 2;
    sub_100420B5C(&v15, *((NSObject **)v4 + 9), (uint64_t)a1, (unsigned __int8 *)&v16);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v4 + 15);
    *((OsLogContext *)v4 + 7) = v15;
    if (v11) {
      sub_10004D2C8(v11);
    }
  }
  if (capabilities::ct::supportsRegisteredIDSService((capabilities::ct *)v11))
  {
    LOBYTE(v16) = 1;
    sub_100420B5C(&v15, *((NSObject **)v4 + 9), (uint64_t)a1, (unsigned __int8 *)&v16);
    CFStringRef v13 = (std::__shared_weak_count *)*((void *)v4 + 13);
    *((OsLogContext *)v4 + 6) = v15;
    if (v13) {
      sub_10004D2C8(v13);
    }
  }
  int v14 = (std::__shared_weak_count *)*((void *)v4 + 5);
  if (v14)
  {
    if (v14->__shared_owners_ != -1) {
      goto LABEL_20;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
  }
  sub_10004D2C8((std::__shared_weak_count *)v4);
LABEL_20:
  OsLogContext v15 = (OsLogContext)0;
  Registry::getServiceManager((uint64_t *)&v15, *a1);
  if (v15.var0)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    operator new();
  }
  if (v15.var1.fRef) {
    sub_10004D2C8((std::__shared_weak_count *)v15.var1.fRef);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_10042054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = (std::__shared_weak_count *)v12[5].__vftable;
  if (v16) {
    sub_10004D2C8(v16);
  }
  shared_owners = (std::__shared_weak_count *)v12[4].__shared_owners_;
  if (shared_owners) {
    sub_10004D2C8(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v12[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    sub_10004D2C8(shared_weak_owners);
  }
  uint64_t v19 = v12[3].__vftable;
  if (v19) {
    dispatch_release(v19);
  }
  ctu::OsLogLogger::~OsLogLogger(v14);
  sub_100087E88(v13);
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void *sub_100420644(void *a1)
{
  *a1 = off_1019CA830;
  uint64_t v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_10004D2C8(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = a1[6];
  if (v5) {
    dispatch_release(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);
  return a1;
}

void sub_1004206CC(void *a1)
{
  sub_100420644(a1);

  operator delete();
}

uint64_t sub_100420704(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[7];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = v1[9];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  uint64_t result = v1[11];
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v5();
  }
  return result;
}

uint64_t sub_1004207C0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 64);
  *a2 = *(void *)(result + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1004207DC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 80);
  *a2 = *(void *)(result + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1004207F8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 96);
  *a2 = *(void *)(result + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100420814(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CA940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100420834(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CA940;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100420888(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1004208B0(ServiceManager::Service *this)
{
  *(void *)this = off_1019CA990;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_10042090C(ServiceManager::Service *this)
{
  *(void *)this = off_1019CA990;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_10042097C@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "CellularPlanIDSServiceManager");
}

unsigned char *sub_10042098C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1004209C8(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v2);
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

uint64_t sub_100420A24()
{
  return 0;
}

uint64_t sub_100420A2C()
{
  return 1;
}

uint64_t sub_100420A34()
{
  return 0;
}

void sub_100420A40(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_100420704;
  void v7[3] = &unk_1019CA858;
  void v7[4] = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (!v2 || (uint64_t v3 = v1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  uint64_t v6 = v1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100420D3C;
  block[3] = &unk_1019CAA58;
  block[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

void sub_100420B5C(void *a1, NSObject *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x50uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_1019CAA10;
  uint64_t v9 = &v8[1].__vftable;
  dispatch_object_t object = a2;
  if (a2) {
    dispatch_retain(a2);
  }
  sub_1005094AC(v9, &object, a3, *a4);
  if (object) {
    dispatch_release(object);
  }
  *a1 = v9;
  a1[1] = v8;
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }

  sub_10004D2C8(v8);
}

void sub_100420C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_100420CA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CAA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100420CC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CAA10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100420D14(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100420D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100420D4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100420D68(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100420D78(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100420EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100420F10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  v6[0] = off_1019CACA8;
  v6[1] = a1;
  void v6[3] = v6;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 112))(v2, v6);
  sub_100428830(v6);
  uint64_t v3 = *(void *)(a1 + 104);
  v5[0] = off_1019CAD38;
  v5[1] = a1;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 128))(v3, v5);
  return sub_100428F9C(v5);
}

void sub_100421014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100428F9C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100421038(uint64_t a1, NSObject **a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v23, kCtLoggingSystemName, "cp.upload.t");
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v16 = *a2;
  *(void *)(a1 + 24) = *a2;
  if (v16) {
    dispatch_retain(v16);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v24, &v23);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v24);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v24);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v23);
  *(void *)a1 = off_1019CAA98;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a1 + 64) = *a7;
  uint64_t v17 = a7[1];
  *(void *)(a1 + 72) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a5;
  uint64_t v18 = a5[1];
  *(void *)(a1 + 88) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = *a4;
  uint64_t v19 = a4[1];
  *(void *)(a1 + 112) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 120) = *a6;
  uint64_t v20 = a6[1];
  *(void *)(a1 + 128) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = a1 + 192;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = *a8;
  uint64_t v21 = a8[1];
  *(void *)(a1 + 352) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 392) = 0uLL;
  *(_OWORD *)(a1 + 408) = 0uLL;
  *(_OWORD *)(a1 + 424) = 0uLL;
  *(_OWORD *)(a1 + 440) = 0uLL;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = a1 + 472;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 491) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = a1 + 512;
  return a1;
}

void sub_100421240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  sub_100087E88(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10042126C(uint64_t a1)
{
  *(void *)a1 = off_1019CAA98;
  sub_10005CD2C(a1 + 504, *(char **)(a1 + 512));
  sub_100313534(a1 + 464, *(void **)(a1 + 472));
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  sub_1000886C0(a1 + 368, *(char **)(a1 + 376));
  uint64_t v2 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 352);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v11 = (void **)(a1 + 312);
  sub_10030EC88(&v11);
  uint64_t v11 = (void **)(a1 + 288);
  sub_10010DF1C(&v11);
  uint64_t v11 = (void **)(a1 + 264);
  sub_10030EC88(&v11);
  uint64_t v11 = (void **)(a1 + 240);
  sub_100426D90(&v11);
  if (*(unsigned char *)(a1 + 232)) {
    sub_10023A670(a1 + 208, *(void **)(a1 + 216));
  }
  sub_10030AAD0(a1 + 184, *(void **)(a1 + 192));
  uint64_t v11 = (void **)(a1 + 160);
  sub_1000C56F4(&v11);
  uint64_t v11 = (void **)(a1 + 136);
  sub_10008A88C(&v11);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 112);
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 56);
  if (v9) {
    sub_10004D2C8(v9);
  }
  CellularPlanUploadTriggersModelInterface::~CellularPlanUploadTriggersModelInterface((CellularPlanUploadTriggersModelInterface *)a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void **sub_10042144C(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_10030EC88(&v3);
  uint64_t v3 = a1;
  sub_10010DF1C(&v3);
  return a1;
}

void sub_100421498(uint64_t a1)
{
  sub_10042126C(a1);

  operator delete();
}

void sub_1004214D0(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 492) != a2)
  {
    *(unsigned char *)(a1 + 492) = a2;
    *(unsigned char *)(a1 + 493) = a2;
    if (a2)
    {
      *(_DWORD *)(a1 + 500) |= 1u;
      sub_100421550(a1);
      *(_DWORD *)(a1 + 496) |= 1u;
      sub_100421950(a1);
      sub_100421EB0(a1);
    }
  }
}

void sub_100421550(uint64_t a1)
{
  if (sub_1004268F0(a1))
  {
    uint64_t v2 = *(void *)(a1 + 360);
    if (v2 && ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2) & 1) == 0)
    {
      uint64_t v3 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I In blacklist hysteresis, reset timer", (uint8_t *)&buf, 2u);
      }
      uint64_t v4 = *(void *)(a1 + 360);
      *(void *)(a1 + 360) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = 1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Delay blacklist upload for %lu min", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    (***(void (****)(long long *__return_ptr))(a1 + 48))(&buf);
    Registry::getTimerService(&v21, (Registry *)buf);
    if (*((void *)&buf + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
    }
    if (v21)
    {
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v6 || (v7 = *(void *)(a1 + 8), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
        sub_100088B9C();
      }
      uint64_t v9 = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      uint64_t v10 = v21;
      sub_100058DB0(__p, "Delay Blacklist Upload");
      uint64_t v11 = *(NSObject **)(a1 + 24);
      dispatch_object_t object = v11;
      if (v11) {
        dispatch_retain(v11);
      }
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3321888768;
      uint64_t v24 = sub_1004269CC;
      xpc_object_t v25 = &unk_1019CAB60;
      uint64_t v26 = a1;
      uint64_t v27 = v7;
      BOOL v28 = v9;
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      aBlock = _Block_copy(&buf);
      sub_100118A44(v10, (uint64_t)__p, 0, 60000000, &object, &aBlock);
      uint64_t v12 = v20;
      uint64_t v20 = 0;
      uint64_t v13 = *(void *)(a1 + 360);
      *(void *)(a1 + 360) = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        uint64_t v14 = v20;
        uint64_t v20 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v28) {
        std::__shared_weak_count::__release_weak(v28);
      }
      std::__shared_weak_count::__release_weak(v9);
    }
    else
    {
      OsLogContext v15 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Cannot get timer service", (uint8_t *)&buf, 2u);
      }
    }
    if (v22) {
      sub_10004D2C8(v22);
    }
  }
}

void sub_1004218BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100421950(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(uint64_t ***)(a1 + 344);
    if (*((char *)v3 + 23) < 0) {
      uint64_t v3 = (uint64_t **)*v3;
    }
    if (*(unsigned char *)(a1 + 232)) {
      uint64_t v4 = *(void *)(a1 + 224);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v5 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3);
    uint64_t v6 = *(void *)(a1 + 200);
    char v7 = *(unsigned char *)(a1 + 336);
    uint64_t v8 = (void *)(a1 + 416);
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3);
    if (*(char *)(a1 + 439) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a1 + 490);
    int v11 = *(unsigned __int8 *)(a1 + 491);
    int v12 = *(unsigned __int8 *)(a1 + 492);
    int v13 = *(unsigned __int8 *)(a1 + 489);
    uint64_t v14 = "kUnknown";
    if (v13 == 1) {
      uint64_t v14 = "kSource";
    }
    BOOL v15 = v13 == 2;
    int v16 = *(unsigned __int8 *)(a1 + 488);
    if (v15) {
      uint64_t v14 = "kTarget";
    }
    *(_DWORD *)long long buf = 136317954;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v5;
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v39 = (void *)v9;
    *(_WORD *)long long v40 = 2048;
    *(void *)&_OWORD v40[2] = v6;
    *(_WORD *)&v40[10] = 2048;
    *(void *)&v40[12] = v4;
    *(_WORD *)&v40[20] = 256;
    v40[22] = v7;
    *(_WORD *)&v40[23] = 2080;
    CFTypeRef v41 = v8;
    __int16 v42 = 1024;
    int v43 = v10;
    __int16 v44 = 1024;
    int v45 = v11;
    __int16 v46 = 1024;
    int v47 = v12;
    __int16 v48 = 2080;
    uint64_t v49 = v14;
    __int16 v50 = 1024;
    int v51 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DeviceName[%s], SimInfo[%lu], VinylInfo[%lu], Entitlements[%lu], AssignedSimLabels[%lu], InternetStatus[%hhu], IdsDeviceId[%s], DeviceFirstUnlock[%d], PasscodeSet[%d], CKSignedInWithEncryption[%d], TransferState[%s:%d]", buf, 0x63u);
  }
  if (sub_100425530(a1))
  {
    uint64_t v17 = *(void *)(a1 + 96);
    if (v17 && ((*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17) & 1) == 0)
    {
      uint64_t v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I In hysteresis, reset timer", buf, 2u);
      }
      uint64_t v19 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    uint64_t v20 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Delay upload for 1 min", buf, 2u);
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    (***(void (****)(unsigned char *__return_ptr))(a1 + 48))(buf);
    Registry::getTimerService(&v36, *(Registry **)buf);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v36)
    {
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v21 || (uint64_t v22 = *(void *)(a1 + 8), (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
        sub_100088B9C();
      }
      uint64_t v24 = v23;
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v23);
      uint64_t v25 = v36;
      sub_100058DB0(__p, "Delay Manatee Upload");
      uint64_t v26 = *(NSObject **)(a1 + 24);
      dispatch_object_t object = v26;
      if (v26) {
        dispatch_retain(v26);
      }
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3321888768;
      *(void *)&uint8_t buf[16] = sub_100425820;
      uint64_t v39 = &unk_1019CAB60;
      *(void *)long long v40 = a1;
      *(void *)&v40[8] = v22;
      *(void *)&v40[16] = v24;
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      aBlock = _Block_copy(buf);
      sub_100118A44(v25, (uint64_t)__p, 0, 60000000, &object, &aBlock);
      uint64_t v27 = v35;
      uint64_t v35 = 0;
      uint64_t v28 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        uint64_t v29 = v35;
        uint64_t v35 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      if (*(void *)&v40[16]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v40[16]);
      }
      std::__shared_weak_count::__release_weak(v24);
    }
    else
    {
      uint64_t v30 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Cannot get timer service", buf, 2u);
      }
    }
    if (v37) {
      sub_10004D2C8(v37);
    }
  }
}

void sub_100421E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100421EB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 494) && capabilities::ct::supportsCellularPlanInfoInCloud((capabilities::ct *)a1))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v6 = (Registry *)"CellularPlanUploadTriggersModel";
    sub_1002BFAE4((char **)&v6, (dispatch_object_t *)(a1 + 24), &v10);
    (***(void (****)(Registry **__return_ptr))(a1 + 48))(&v6);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v8, v6);
    ctu::RestModule::connect();
    if (v9) {
      sub_10004D2C8(v9);
    }
    if (v7) {
      sub_10004D2C8(v7);
    }
    int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    uint64_t v3 = *(void *)(a1 + 80);
    if (v2) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = 1;
    }
    v12[0] = off_1019CB498;
    v12[1] = a1;
    v12[2] = v4;
    _OWORD v12[3] = v12;
    if (v2) {
      uint64_t v5 = 3;
    }
    else {
      uint64_t v5 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v3 + 16))(v3, v10, v5, v12);
    sub_100060644(v12);
    if (v11) {
      sub_10004D2C8(v11);
    }
  }
}

void sub_10042203C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100060644((uint64_t *)va);
  if (a7) {
    sub_10004D2C8(a7);
  }
  _Unwind_Resume(a1);
}

void sub_100422098(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 136;
  if ((uint64_t *)v3 != a2) {
    sub_1003DB990(v3, *a2, a2[1], 0xCF3CF3CF3CF3CF3DLL * ((a2[1] - *a2) >> 3));
  }
  *(_DWORD *)(a1 + 496) |= 0x100u;
  sub_100421550(a1);

  sub_100421950(a1);
}

void sub_100422114(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = a1 + 160;
  if ((uint64_t *)v4 != a2) {
    sub_1003DB294(v4, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  }
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  if (v5 != v6)
  {
    while (*(_DWORD *)(v5 + 4) != 2)
    {
      v5 += 88;
      if (v5 == v6) {
        goto LABEL_11;
      }
    }
  }
  if (v5 != v6)
  {
    ctu::hex((uint64_t *)&v8, (ctu *)(v5 + 16), (const void *)0x10, a3);
    char v7 = (void **)(a1 + 440);
    if (*(char *)(a1 + 463) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)char v7 = v8;
    *(void *)(a1 + 456) = v9;
  }
LABEL_11:
  *(_DWORD *)(a1 + 496) |= 0x200u;
  sub_100421950(a1);
}

void sub_1004221E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 184);
  if (v5 != (uint64_t **)a2) {
    sub_100429020(v5, *(long long **)a2, (long long *)(a2 + 8));
  }
  if ((void *)(a1 + 464) != a3)
  {
    long long v8 = (char *)*a3;
    uint64_t v6 = (char *)(a3 + 1);
    char v7 = v8;
    if (*(void *)(a1 + 480))
    {
      uint64_t v9 = *(void *)(a1 + 464);
      uint64_t v10 = *(void *)(a1 + 472);
      *(void *)(a1 + 464) = a1 + 472;
      *(void *)(v10 + 16) = 0;
      *(void *)(a1 + 472) = 0;
      *(void *)(a1 + 480) = 0;
      if (*(void *)(v9 + 8)) {
        int v11 = *(char **)(v9 + 8);
      }
      else {
        int v11 = (char *)v9;
      }
      unsigned int v33 = (uint64_t *)(a1 + 464);
      char v34 = v11;
      uint64_t v35 = (uint64_t *)v11;
      if (!v11 || (char v34 = (char *)sub_1000EA590((uint64_t)v11), v7 == v6))
      {
        uint64_t v14 = v7;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v11 + 32), (const std::string *)(v7 + 32));
          if (v11 != v7) {
            sub_10005D87C((uint64_t **)v11 + 7, *((void **)v7 + 7), (void *)v7 + 8);
          }
          *(void *)long long buf = 0;
          int v12 = (uint64_t **)sub_1000EA518(a1 + 464, buf, v35 + 4);
          sub_100046C38((uint64_t **)(a1 + 464), *(uint64_t *)buf, v12, v35);
          int v11 = v34;
          uint64_t v35 = (uint64_t *)v34;
          if (v34) {
            char v34 = (char *)sub_1000EA590((uint64_t)v34);
          }
          int v13 = (char *)*((void *)v7 + 1);
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              int v13 = *(char **)v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v14 = (char *)*((void *)v7 + 2);
              BOOL v15 = *(void *)v14 == (void)v7;
              char v7 = v14;
            }
            while (!v15);
          }
          if (!v11) {
            break;
          }
          char v7 = v14;
        }
        while (v14 != v6);
      }
      sub_100429774((uint64_t)&v33);
      char v7 = v14;
    }
    if (v7 != v6)
    {
      do
      {
        uint64_t v35 = 0;
        int v16 = (uint64_t *)operator new(0x50uLL);
        uint64_t v17 = v16;
        unsigned int v33 = v16;
        char v34 = (char *)(a1 + 472);
        if (v7[55] < 0)
        {
          sub_10004FC84((unsigned char *)v16 + 32, *((void **)v7 + 4), *((void *)v7 + 5));
        }
        else
        {
          long long v18 = *((_OWORD *)v7 + 2);
          v16[6] = *((void *)v7 + 6);
          *((_OWORD *)v16 + 2) = v18;
        }
        sub_1001A0DB0(v17 + 7, (uint64_t)(v7 + 56));
        LOBYTE(v35) = 1;
        *(void *)long long buf = 0;
        uint64_t v19 = (uint64_t **)sub_1000EA518(a1 + 464, buf, v33 + 4);
        sub_100046C38((uint64_t **)(a1 + 464), *(uint64_t *)buf, v19, v33);
        unsigned int v33 = 0;
        sub_10031E5B4((uint64_t)&v33, 0);
        uint64_t v20 = (char *)*((void *)v7 + 1);
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            uint64_t v20 = *(char **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (char *)*((void *)v7 + 2);
            BOOL v15 = *(void *)v21 == (void)v7;
            char v7 = v21;
          }
          while (!v15);
        }
        char v7 = v21;
      }
      while (v21 != v6);
    }
  }
  *(_DWORD *)(a1 + 496) |= 0x400u;
  sub_100421550(a1);
  sub_100421950(a1);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v22) {
    return;
  }
  OsLogContext v23 = std::__shared_weak_count::lock(v22);
  if (!v23) {
    return;
  }
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(a1 + 120);
  if (!v25) {
    goto LABEL_59;
  }
  unsigned int v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(void *)v25 + 216))(&v33, v25);
  if (!v35) {
    goto LABEL_58;
  }
  uint64_t v26 = *(void ***)(a1 + 184);
  if (v26 == (void **)(a1 + 192)) {
    goto LABEL_58;
  }
  do
  {
    if (!sub_10010E128((uint64_t)&v33, v26 + 4)) {
      goto LABEL_52;
    }
    uint64_t v27 = (uint64_t *)v26[15];
    if (!v27) {
      goto LABEL_52;
    }
    while (1)
    {
      int v28 = *((_DWORD *)v27 + 7);
      if (v28 <= 13) {
        break;
      }
LABEL_44:
      uint64_t v27 = (uint64_t *)*v27;
      if (!v27) {
        goto LABEL_52;
      }
    }
    if (v28 != 13)
    {
      ++v27;
      goto LABEL_44;
    }
    *(_DWORD *)long long buf = 13;
    if (*(_DWORD *)sub_10012EF5C((uint64_t)(v26 + 14), (int *)buf) == 2)
    {
      uint64_t v29 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = v26 + 4;
        if (*((char *)v26 + 55) < 0) {
          uint64_t v30 = v26[4];
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I mark plan [%s] as non expired", buf, 0xCu);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v25 + 208))(v25, v26 + 4);
    }
LABEL_52:
    unsigned int v31 = (void **)v26[1];
    if (v31)
    {
      do
      {
        __darwin_ct_rune_t v32 = v31;
        unsigned int v31 = (void **)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        __darwin_ct_rune_t v32 = (void **)v26[2];
        BOOL v15 = *v32 == v26;
        uint64_t v26 = v32;
      }
      while (!v15);
    }
    uint64_t v26 = v32;
  }
  while (v32 != (void **)(a1 + 192));
LABEL_58:
  sub_10005CD2C((uint64_t)&v33, v34);
LABEL_59:
  sub_10004D2C8(v24);
}

void sub_100422620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_10005CD2C((uint64_t)&a12, a13);
  sub_10004D2C8(v13);
  _Unwind_Resume(a1);
}

void sub_100422690(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v60 = a1 + 208;
    if (*(unsigned char *)(a1 + 232))
    {
      if (*(void *)(a1 + 224) == *(void *)(a2 + 16))
      {
        uint64_t v4 = *(unsigned __int8 **)(a1 + 208);
        uint64_t v5 = a1 + 216;
        if (v4 == (unsigned __int8 *)(a1 + 216))
        {
LABEL_19:
          int v12 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I No sim label change, abort uploading.", buf, 2u);
          }
          return;
        }
        uint64_t v6 = *(unsigned __int8 **)a2;
        while (sub_10001D294(v4 + 32, v6 + 32) && SimLabel::operator==())
        {
          char v7 = (unsigned __int8 *)*((void *)v4 + 1);
          long long v8 = v4;
          if (v7)
          {
            do
            {
              uint64_t v4 = v7;
              char v7 = *(unsigned __int8 **)v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v4 = (unsigned __int8 *)*((void *)v8 + 2);
              BOOL v9 = *(void *)v4 == (void)v8;
              long long v8 = v4;
            }
            while (!v9);
          }
          uint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
          if (v10)
          {
            do
            {
              int v11 = v10;
              uint64_t v10 = *(unsigned __int8 **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              int v11 = (unsigned __int8 *)*((void *)v6 + 2);
              BOOL v9 = *(void *)v11 == (void)v6;
              uint64_t v6 = v11;
            }
            while (!v9);
          }
          uint64_t v6 = v11;
          if (v4 == (unsigned __int8 *)v5) {
            goto LABEL_19;
          }
        }
        if (!*(unsigned char *)(a2 + 24)) {
          goto LABEL_27;
        }
      }
      if (*(unsigned char *)(a1 + 232))
      {
LABEL_27:
        uint64_t v59 = a2;
        uint64_t v14 = (unsigned __int8 *)(a2 + 8);
        BOOL v15 = *(unsigned __int8 **)a2;
        if (*(void *)a2 == a2 + 8) {
          goto LABEL_127;
        }
        while (1)
        {
          if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48)))
          {
            long long v56 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I skip phone number based blocklist for iPad", buf, 2u);
            }
            goto LABEL_127;
          }
          int v16 = v15 + 32;
          uint64_t v17 = *(void *)(a1 + 136);
          uint64_t v18 = *(void *)(a1 + 144);
          if ((char)v15[55] < 0)
          {
            sub_10004FC84(__p, *((void **)v15 + 4), *((void *)v15 + 5));
          }
          else
          {
            *(_OWORD *)long long __p = *v16;
            uint64_t v62 = *((void *)v15 + 6);
          }
          uint64_t v19 = HIBYTE(v62);
          if (v17 == v18)
          {
LABEL_51:
            if ((v19 & 0x80) != 0) {
              operator delete(__p[0]);
            }
            uint64_t v28 = *(void *)(a1 + 160);
            uint64_t v29 = *(void *)(a1 + 168);
            if (v28 != v29)
            {
              unsigned __int8 v30 = v15[55];
              if ((v30 & 0x80u) == 0) {
                uint64_t v31 = v15[55];
              }
              else {
                uint64_t v31 = *((void *)v15 + 5);
              }
              if ((v30 & 0x80u) == 0) {
                __darwin_ct_rune_t v32 = v15 + 32;
              }
              else {
                __darwin_ct_rune_t v32 = (unsigned __int8 *)*((void *)v15 + 4);
              }
              do
              {
                if (*(unsigned char *)(v28 + 80))
                {
                  uint64_t v34 = *(void *)(v28 + 56);
                  uint64_t v33 = *(void *)(v28 + 64);
                  while (v34 != v33)
                  {
                    uint64_t v35 = *(unsigned __int8 *)(v34 + 39);
                    if ((v35 & 0x80u) == 0) {
                      uint64_t v36 = *(unsigned __int8 *)(v34 + 39);
                    }
                    else {
                      uint64_t v36 = *(void *)(v34 + 24);
                    }
                    if (v36 == v31)
                    {
                      if ((v35 & 0x80) != 0)
                      {
                        if (!memcmp(*(const void **)(v34 + 16), v32, *(void *)(v34 + 24)))
                        {
LABEL_77:
                          if (!sub_100424894(a1, v34)) {
                            goto LABEL_82;
                          }
                          uint64_t v38 = *(NSObject **)(a1 + 40);
                          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                          {
                            if ((char)v15[55] < 0) {
                              int v16 = *(_OWORD **)v16;
                            }
                            *(_DWORD *)long long buf = 136315138;
                            *(void *)&uint8_t buf[4] = v16;
                            uint64_t v39 = v38;
                            long long v40 = "#I ignore DisablePhoneNumberCheckforBlacklist set iccid: %s";
                            goto LABEL_114;
                          }
                          goto LABEL_115;
                        }
                      }
                      else
                      {
                        if (!*(unsigned char *)(v34 + 39)) {
                          goto LABEL_77;
                        }
                        uint64_t v37 = 0;
                        while (*(unsigned __int8 *)(v34 + v37 + 16) == v32[v37])
                        {
                          if (v35 == ++v37) {
                            goto LABEL_77;
                          }
                        }
                      }
                    }
                    v34 += 216;
                  }
                }
                v28 += 88;
              }
              while (v28 != v29);
            }
LABEL_82:
            if ((void **)(a1 + 216) == sub_100046F68(v60, (void **)v15 + 4))
            {
              unsigned __int8 v45 = v15[159];
              if ((char)v45 < 0)
              {
                if (!*((void *)v15 + 18)) {
                  goto LABEL_115;
                }
              }
              else if (!v15[159])
              {
                goto LABEL_115;
              }
              __int16 v46 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                int v47 = v15 + 32;
                if ((char)v15[55] < 0) {
                  int v47 = *(void **)v16;
                }
                __int16 v48 = v15 + 136;
                if ((v45 & 0x80) != 0) {
                  __int16 v48 = (void *)*((void *)v15 + 17);
                }
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = v47;
                __int16 v64 = 2080;
                uint64_t v65 = v48;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I Found new entry iccid: [%s] phone number: [%s]", buf, 0x16u);
              }
            }
            else
            {
              *(void *)long long buf = 0;
              uint64_t v41 = *sub_100046ED4(v60, buf, (void **)v15 + 4);
              if (!v41) {
                sub_1000C14F0("map::at:  key not found");
              }
              uint64_t v42 = *(unsigned __int8 *)(v41 + 159);
              uint64_t v43 = *(void *)(v41 + 144);
              if ((v42 & 0x80u) == 0) {
                uint64_t v43 = v42;
              }
              if (v43) {
                goto LABEL_115;
              }
              unsigned __int8 v44 = v15[159];
              if ((char)v44 < 0)
              {
                if (!*((void *)v15 + 18)) {
                  goto LABEL_115;
                }
              }
              else if (!v15[159])
              {
                goto LABEL_115;
              }
              uint64_t v49 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v50 = v15 + 32;
                if ((char)v15[55] < 0) {
                  __int16 v50 = *(void **)v16;
                }
                int v51 = v15 + 136;
                if ((v44 & 0x80) != 0) {
                  int v51 = (void *)*((void *)v15 + 17);
                }
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = v50;
                __int16 v64 = 2080;
                uint64_t v65 = v51;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I Found new number iccid: [%s] phone number: [%s]", buf, 0x16u);
              }
            }
            *(_DWORD *)long long buf = 1;
            sub_100422E24((void *)a1, (long long *)v15 + 2, (std::string *)(v15 + 136), buf);
            goto LABEL_115;
          }
          uint64_t v21 = __p[0];
          uint64_t v20 = __p[1];
          if (v62 >= 0) {
            uint64_t v22 = (void *)HIBYTE(v62);
          }
          else {
            uint64_t v22 = __p[1];
          }
          while (1)
          {
            if (*(_DWORD *)(v17 + 64) != 1) {
              goto LABEL_50;
            }
            OsLogContext v23 = (void *)*(unsigned __int8 *)(v17 + 95);
            int v24 = (char)v23;
            if ((char)v23 < 0) {
              OsLogContext v23 = *(void **)(v17 + 80);
            }
            if (v22 != v23) {
              goto LABEL_50;
            }
            uint64_t v25 = v24 >= 0 ? (unsigned __int8 *)(v17 + 72) : *(unsigned __int8 **)(v17 + 72);
            if ((v19 & 0x80) != 0) {
              break;
            }
            if (!v19) {
              goto LABEL_110;
            }
            uint64_t v26 = __p;
            uint64_t v27 = v19;
            while (*(unsigned __int8 *)v26 == *v25)
            {
              uint64_t v26 = (void **)((char *)v26 + 1);
              ++v25;
              if (!--v27) {
                goto LABEL_110;
              }
            }
LABEL_50:
            v17 += 168;
            if (v17 == v18) {
              goto LABEL_51;
            }
          }
          if (memcmp(v21, v25, (size_t)v20)) {
            goto LABEL_50;
          }
          operator delete(v21);
LABEL_110:
          uint64_t v52 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            if ((char)v15[55] < 0) {
              int v16 = *(_OWORD **)v16;
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v16;
            uint64_t v39 = v52;
            long long v40 = "#I ignore physical sim. iccid: %s";
LABEL_114:
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v40, buf, 0xCu);
          }
LABEL_115:
          __int16 v53 = (unsigned __int8 *)*((void *)v15 + 1);
          if (v53)
          {
            do
            {
              uint64_t v54 = v53;
              __int16 v53 = *(unsigned __int8 **)v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              uint64_t v54 = (unsigned __int8 *)*((void *)v15 + 2);
              BOOL v9 = *(void *)v54 == (void)v15;
              BOOL v15 = v54;
            }
            while (!v9);
          }
          BOOL v15 = v54;
          if (v54 == v14)
          {
LABEL_127:
            sub_100426E14(v60, v59);
            uint64_t v57 = *(uint64_t **)(a1 + 240);
            long long v58 = *(uint64_t **)(a1 + 248);
            if (v58 != v57)
            {
              do
              {
                sub_1008A2AA0(v57, (os_log_t *)(a1 + 40));
                v57 += 29;
              }
              while (v57 != v58);
              (*(void (**)(void, uint64_t))(**(void **)(a1 + 104) + 104))(*(void *)(a1 + 104), a1 + 240);
              *(_DWORD *)(a1 + 500) |= 0x80u;
              sub_100421550(a1);
            }
            *(_DWORD *)(a1 + 496) |= 8u;
            sub_100421950(a1);
            return;
          }
        }
      }
    }
    __int16 v55 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I Loaded assignedSimLabels first time.", buf, 2u);
    }
    sub_100426E14(v60, a2);
  }
  else
  {
    int v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Sim label not loaded, abort uploading.", buf, 2u);
    }
    if (*(unsigned char *)(a1 + 232))
    {
      sub_10023A670(a1 + 208, *(void **)(a1 + 216));
      *(unsigned char *)(a1 + 232) = 0;
    }
  }
}

std::string *sub_100422E24(void *a1, long long *a2, std::string *__str, _DWORD *a4)
{
  uint64_t v9 = a1[30];
  uint64_t v10 = a1[31];
  long long v8 = a1 + 30;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v27 = *((void *)a2 + 2);
  }
  char v11 = HIBYTE(v27);
  if (v9 != v10)
  {
    if (v27 >= 0) {
      uint64_t v12 = HIBYTE(v27);
    }
    else {
      uint64_t v12 = *((void *)&__dst + 1);
    }
    if (v27 >= 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (long long *)__dst;
    }
    do
    {
      uint64_t v14 = *(unsigned __int8 *)(v9 + 143);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v9 + 143);
      }
      else {
        uint64_t v15 = *(void *)(v9 + 128);
      }
      if (v15 == v12)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v9 + 120), p_dst, *(void *)(v9 + 128))) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!*(unsigned char *)(v9 + 143)) {
            goto LABEL_24;
          }
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v9 + v16 + 120) == *((unsigned __int8 *)p_dst + v16))
          {
            if (v14 == ++v16) {
              goto LABEL_24;
            }
          }
        }
      }
      v9 += 232;
    }
    while (v9 != v10);
    uint64_t v9 = v10;
  }
LABEL_24:
  if (v11 < 0) {
    operator delete((void *)__dst);
  }
  if (v9 != a1[31]) {
    return std::string::operator=((std::string *)(v9 + 168), __str);
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84((unsigned char *)&v20[7] + 8, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(long long *)((char *)&v20[7] + 8) = *a2;
    *((void *)&v20[8] + 1) = *((void *)a2 + 2);
  }
  long long v21 = 0uLL;
  *(void *)&v22[0] = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84((unsigned char *)v22 + 8, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)((char *)v22 + 8) = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    *((void *)&v22[1] + 1) = *((void *)&__str->__r_.__value_.__l + 2);
  }
  LODWORD(v23) = *a4;
  BYTE4(v23) = 0;
  *((void *)&v23 + 1) = CFAbsoluteTimeGetCurrent();
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  unint64_t v18 = a1[31];
  if (v18 >= a1[32])
  {
    uint64_t v19 = sub_10042763C(v8, v20);
  }
  else
  {
    sub_10042775C((char *)a1[31], v20);
    uint64_t v19 = v18 + 232;
    a1[31] = v18 + 232;
  }
  a1[31] = v19;
  return (std::string *)sub_100427BEC((uint64_t)v20);
}

void sub_10042303C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004230F4(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (dispatch_object_t *)a1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 == *a2)
  {
    long long v24 = a1[5];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I No deleted blacklist record", buf, 2u);
    }
    sub_1000607A8(a3, 0);
    return;
  }
  uint64_t v7 = a1[30];
  long long v8 = (long long *)a1[31];
  if ((long long *)v7 == v8) {
    goto LABEL_48;
  }
  uint64_t v29 = (uint64_t **)(a1 + 30);
  char v10 = 0;
  char v11 = (os_log_t *)(a1 + 5);
  while (2)
  {
    char v30 = v10;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    while (1)
    {
      uint64_t v12 = v5;
      if (v5 != v6)
      {
        int v13 = *(char *)(v7 + 143);
        if (v13 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(v7 + 143);
        }
        else {
          uint64_t v14 = *(void *)(v7 + 128);
        }
        uint64_t v12 = v5;
        do
        {
          uint64_t v15 = *(unsigned __int8 *)(v12 + 71);
          if ((v15 & 0x80u) == 0) {
            uint64_t v16 = *(unsigned __int8 *)(v12 + 71);
          }
          else {
            uint64_t v16 = *(void *)(v12 + 56);
          }
          if (v16 == v14)
          {
            if (v13 >= 0) {
              uint64_t v17 = (unsigned __int8 *)(v7 + 120);
            }
            else {
              uint64_t v17 = *(unsigned __int8 **)(v7 + 120);
            }
            if ((v15 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)(v12 + 48), v17, *(void *)(v12 + 56))) {
                goto LABEL_26;
              }
            }
            else
            {
              if (!*(unsigned char *)(v12 + 71)) {
                goto LABEL_26;
              }
              uint64_t v18 = 0;
              while (*(unsigned __int8 *)(v12 + v18 + 48) == v17[v18])
              {
                if (v15 == ++v18) {
                  goto LABEL_26;
                }
              }
            }
          }
          v12 += 72;
        }
        while (v12 != v6);
        goto LABEL_27;
      }
LABEL_26:
      if (v12 != v6) {
        break;
      }
LABEL_27:
      v7 += 232;
      if ((long long *)v7 == v8)
      {
        uint64_t v7 = (uint64_t)v8;
        uint64_t v4 = (dispatch_object_t *)a1;
        if ((v30 & 1) == 0) {
          goto LABEL_48;
        }
        goto LABEL_41;
      }
    }
    uint64_t v19 = *v11;
    uint64_t v4 = (dispatch_object_t *)a1;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = (void *)(v7 + 120);
      if (*(char *)(v7 + 143) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      long long v21 = (void *)(v7 + 168);
      if (*(char *)(v7 + 191) < 0) {
        long long v21 = (void *)*v21;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Ignore deleted blacklist candidate iccid: [%s] phone number: [%s]", buf, 0x16u);
      long long v8 = (long long *)a1[31];
    }
    long long v8 = (long long *)sub_100427194((long long *)(v7 + 232), v8, v7);
    for (uint64_t i = a1[31]; (long long *)i != v8; uint64_t i = sub_100427BEC(i - 232))
      ;
    a1[31] = v8;
    char v10 = 1;
    if ((long long *)v7 != v8) {
      continue;
    }
    break;
  }
LABEL_41:
  for (j = *v29; j != (uint64_t *)v7; j += 29)
    sub_1008A2AA0(j, v11);
  (*((void (**)(dispatch_object_t, uint64_t **))v4[13]->isa + 13))(v4[13], v29);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
LABEL_48:
  long long v46 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_1003229A4(&buf[24], v5, v6, 0x8E38E38E38E38E39 * ((v6 - v5) >> 3));
  long long v39 = 0uLL;
  uint64_t v35 = (Registry *)"CellularPlanUploadTriggersModel";
  sub_1002BFAE4((char **)&v35, v4 + 3, &v39);
  (*(void (**)(Registry **__return_ptr))v4[6]->isa)(&v35);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v37, v35);
  ctu::RestModule::connect();
  if (v38) {
    sub_10004D2C8(v38);
  }
  if (v36) {
    sub_10004D2C8(v36);
  }
  dispatch_object_t v25 = v4[10];
  uint64_t v26 = v39;
  memset(v33, 0, sizeof(v33));
  sub_100322898(v33, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3));
  memset(v34, 0, sizeof(v34));
  sub_1003229A4(v34, *(uint64_t *)&buf[24], v46, 0x8E38E38E38E38E39 * ((uint64_t)(v46 - *(void *)&buf[24]) >> 3));
  long long v40 = v4;
  sub_1000DFC90((uint64_t)v41, a3);
  long long v42 = v39;
  if (*((void *)&v39 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v44 = 0;
  uint64_t v27 = operator new(0x40uLL);
  uint64_t v28 = v40;
  void *v27 = off_1019CADC8;
  v27[1] = v28;
  sub_100023950((uint64_t)(v27 + 2), (uint64_t)v41);
  *((_OWORD *)v27 + 3) = v42;
  long long v42 = 0uLL;
  unsigned __int8 v44 = v27;
  (*((void (**)(dispatch_object_t, uint64_t, void *, void *))v25->isa + 8))(v25, v26, v33, v43);
  sub_100322EB8(v43);
  if (*((void *)&v42 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v42 + 1));
  }
  sub_100060644(v41);
  uint64_t v35 = (Registry *)v34;
  sub_10030EC88((void ***)&v35);
  uint64_t v35 = (Registry *)v33;
  sub_10010DF1C((void ***)&v35);
  if (*((void *)&v39 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v39 + 1));
  }
  *(void *)&long long v39 = &buf[24];
  sub_10030EC88((void ***)&v39);
  *(void *)&long long v39 = buf;
  sub_10010DF1C((void ***)&v39);
}

void sub_100423618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,char a28)
{
  sub_100322EB8((void *)(v28 - 192));
  sub_1004236D0((uint64_t)&a28);
  sub_10042144C(&a15);
  if (a26) {
    sub_10004D2C8(a26);
  }
  sub_10042144C((void **)(v28 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_1004236D0(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100060644((void *)(a1 + 8));
  return a1;
}

void sub_100423708(uint64_t a1, unsigned char *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 336);
  int v5 = *a2;
  if (v4 == v5)
  {
    int v5 = *(unsigned __int8 *)(a1 + 336);
  }
  else
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      uint64_t v9 = asString();
      __int16 v10 = 2080;
      uint64_t v11 = asString();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I internetStatus changed from: %s to: %s ", (uint8_t *)&v8, 0x16u);
      int v4 = *(unsigned __int8 *)(a1 + 336);
      int v5 = *a2;
    }
  }
  if (v4 != 1 && v5 == 1)
  {
    *(unsigned char *)(a1 + 336) = 1;
    *(_DWORD *)(a1 + 500) |= 0x800u;
    sub_100421550(a1);
    *(_DWORD *)(a1 + 496) |= 0x800u;
    sub_100421950(a1);
    sub_100421EB0(a1);
    LOBYTE(v5) = *a2;
  }
  *(unsigned char *)(a1 + 336) = v5;
}

void sub_100423844(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 352);
  *(void *)(a1 + 344) = v4;
  *(void *)(a1 + 352) = v3;
  if (v5) {
    sub_10004D2C8(v5);
  }
  *(_DWORD *)(a1 + 496) |= 2u;

  sub_100421950(a1);
}

uint64_t **sub_1004238A8(uint64_t a1, uint64_t **a2)
{
  uint64_t result = (uint64_t **)(a1 + 368);
  if (result != a2) {
    return sub_100429B2C(result, *a2, a2 + 1);
  }
  return result;
}

std::string *sub_1004238C4(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 392), a2);
}

void sub_1004238CC(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 416), a2);
  *(_DWORD *)(a1 + 496) |= 4u;

  sub_100421950(a1);
}

void sub_100423914(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 490) = a2;
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 104);
    v4[0] = off_1019CAE48;
    v4[3] = v4;
    (*(void (**)(uint64_t, void *))(*(void *)v3 + 96))(v3, v4);
    sub_100429EAC(v4);
    *(_DWORD *)(a1 + 496) |= 0x20u;
    sub_100421950(a1);
  }
}

void sub_1004239DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1004239F8(uint64_t a1)
{
  *(_DWORD *)(a1 + 496) |= 0x200u;
  sub_100421950(a1);
}

void sub_100423A08(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 491) != a2)
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Change in Passcode Set State. New State %d", (uint8_t *)v5, 8u);
    }
    *(unsigned char *)(a1 + 491) = a2;
    *(_DWORD *)(a1 + 496) |= 0x10u;
    sub_100421950(a1);
  }
}

void sub_100423AD4(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(a1 + 488) = a2;
  *(unsigned char *)(a1 + 489) = a3;
  if ((a2 & 1) == 0)
  {
    *(_DWORD *)(a1 + 496) |= 0x40u;
    sub_100421950(a1);
  }
}

BOOL sub_100423AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  int v8 = (uint64_t **)(a1 + 504);
  if (!sub_10010E128(a1 + 504, (void **)a6))
  {
    CFDictionaryRef theDict = 0;
    (*(void (**)(CFDictionaryRef *__return_ptr))(**(void **)(a1 + 48) + 768))(&theDict);
    if (theDict) {
      __int16 v10 = sub_100080778;
    }
    else {
      __int16 v10 = 0;
    }
    if (v10)
    {
      if (CFDictionaryContainsKey(theDict, @"PhoneAccountTransfer"))
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PhoneAccountTransfer");
        if (CFDictionaryContainsKey(Value, @"SendTransferTypeHintToCloud"))
        {
          uint64_t v12 = (BOOL *)CFDictionaryGetValue(Value, @"SendTransferTypeHintToCloud");
          int v13 = v12;
          buf[0] = 0;
          if (v12 && (CFTypeID v14 = CFGetTypeID(v12), v14 == CFBooleanGetTypeID()))
          {
            ctu::cf::assign((ctu::cf *)buf, v13, v15);
            int v16 = buf[0];
          }
          else
          {
            int v16 = 0;
          }
          BOOL v9 = v16 != 0;
          uint64_t v19 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            if (a6[23] >= 0) {
              uint64_t v20 = a6;
            }
            else {
              uint64_t v20 = *(char **)a6;
            }
            *(_DWORD *)long long buf = 138412802;
            *(void *)&uint8_t buf[4] = @"SendTransferTypeHintToCloud";
            __int16 v28 = 1024;
            LODWORD(v29[0]) = v16;
            WORD2(v29[0]) = 2080;
            *(void *)((char *)v29 + 6) = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %@ is set to %d for ICCID: [%s]", buf, 0x1Cu);
          }
          *(void *)long long buf = a6;
          *((unsigned char *)sub_1000ED870(v8, (void **)a6, (uint64_t)&unk_10144E20E, (long long **)buf) + 56) = v16;
          goto LABEL_29;
        }
        long long v21 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          if (a6[23] >= 0) {
            uint64_t v22 = a6;
          }
          else {
            uint64_t v22 = *(char **)a6;
          }
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = @"SendTransferTypeHintToCloud";
          __int16 v28 = 2080;
          v29[0] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I %@ not present in CB for ICCID: [%s]", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v18 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          if (a6[23] >= 0) {
            dispatch_object_t v25 = a6;
          }
          else {
            dispatch_object_t v25 = *(char **)a6;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "missing PhoneAccountTransfer from CB for iccid: %s", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v17 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if (a6[23] >= 0) {
          long long v24 = a6;
        }
        else {
          long long v24 = *(char **)a6;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed loading PhoneAccountTransfer CB for iccid: %s", buf, 0xCu);
      }
    }
    *(void *)long long buf = a6;
    BOOL v9 = 1;
    *((unsigned char *)sub_1000ED870(v8, (void **)a6, (uint64_t)&unk_10144E20E, (long long **)buf) + 56) = 1;
LABEL_29:
    sub_100057D78((const void **)&theDict);
    return v9;
  }
  return *(unsigned char *)sub_10005DDEC((uint64_t)v8, (void **)a6) != 0;
}

void sub_100423ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_100423EF4(uint64_t a1, void **a2, void **a3, const void **a4, std::string *a5, void **a6)
{
  uint64_t v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v13 = a2;
    }
    else {
      int v13 = *a2;
    }
    if (*((char *)a3 + 23) >= 0) {
      CFTypeID v14 = a3;
    }
    else {
      CFTypeID v14 = *a3;
    }
    if (*((char *)a4 + 23) >= 0) {
      CFBooleanRef v15 = a4;
    }
    else {
      CFBooleanRef v15 = (void *)*a4;
    }
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v16 = a5;
    }
    else {
      int v16 = (std::string *)a5->__r_.__value_.__r.__words[0];
    }
    if (*((char *)a6 + 23) >= 0) {
      uint64_t v17 = a6;
    }
    else {
      uint64_t v17 = *a6;
    }
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v14;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&unsigned char buf[24] = v15;
    *(_WORD *)&uint8_t buf[32] = 2080;
    *(void *)&buf[34] = v16;
    *(_WORD *)&buf[42] = 2080;
    *(void *)&buf[44] = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Transfer completed - Blacklist: [IMEI: %s, EID: %s, ICCID: %s] -> [EID: %s, ICCID: %s]", buf, 0x34u);
  }
  uint64_t v18 = *((unsigned __int8 *)a4 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (const void *)*((unsigned __int8 *)a4 + 23);
  }
  else {
    uint64_t v19 = a4[1];
  }
  uint64_t v20 = (void *)*((unsigned __int8 *)a6 + 23);
  int v21 = (char)v20;
  unint64_t v22 = (unint64_t)a6[1];
  if ((char)v20 < 0) {
    uint64_t v20 = a6[1];
  }
  if (v19 == v20)
  {
    if (v21 >= 0) {
      long long v23 = (unsigned __int8 *)a6;
    }
    else {
      long long v23 = (unsigned __int8 *)*a6;
    }
    if ((v18 & 0x80) != 0)
    {
      if (!memcmp(*a4, v23, (size_t)a4[1])) {
        return;
      }
    }
    else
    {
      if (!*((unsigned char *)a4 + 23)) {
        return;
      }
      for (uint64_t i = a4; *(unsigned __int8 *)i == *v23; uint64_t i = (const void **)((char *)i + 1))
      {
        ++v23;
        if (!--v18) {
          return;
        }
      }
    }
  }
  std::string __str = a5;
  uint64_t v26 = *(void *)(a1 + 240);
  uint64_t v27 = *(void *)(a1 + 248);
  dispatch_object_t v25 = (uint64_t *)(a1 + 240);
  if (v21 < 0)
  {
    sub_10004FC84(__p, *a6, v22);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a6;
    uint64_t v38 = a6[2];
  }
  char v28 = HIBYTE(v38);
  if (v26 != v27)
  {
    if (SHIBYTE(v38) >= 0) {
      uint64_t v29 = (void *)HIBYTE(v38);
    }
    else {
      uint64_t v29 = __p[1];
    }
    if (SHIBYTE(v38) >= 0) {
      char v30 = __p;
    }
    else {
      char v30 = (void **)__p[0];
    }
    do
    {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 143);
      if ((v31 & 0x80u) == 0) {
        __darwin_ct_rune_t v32 = (void *)*(unsigned __int8 *)(v26 + 143);
      }
      else {
        __darwin_ct_rune_t v32 = *(void **)(v26 + 128);
      }
      if (v32 == v29)
      {
        if ((v31 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v26 + 120), v30, *(void *)(v26 + 128))) {
            goto LABEL_57;
          }
        }
        else
        {
          if (!*(unsigned char *)(v26 + 143)) {
            goto LABEL_57;
          }
          uint64_t v33 = 0;
          while (*(unsigned __int8 *)(v26 + v33 + 120) == *((unsigned __int8 *)v30 + v33))
          {
            if (v31 == ++v33) {
              goto LABEL_57;
            }
          }
        }
      }
      v26 += 232;
    }
    while (v26 != v27);
    uint64_t v26 = v27;
LABEL_57:
    dispatch_object_t v25 = (uint64_t *)(a1 + 240);
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v26 == *(void *)(a1 + 248))
  {
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    memset(v43, 0, sizeof(v43));
    long long v41 = 0u;
    long long v42 = 0u;
    memset(buf, 0, sizeof(buf));
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(buf, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)a2;
      *(void *)&uint8_t buf[16] = a2[2];
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_10004FC84(&buf[24], *a3, (unint64_t)a3[1]);
    }
    else
    {
      *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)a3;
      *(void *)&buf[40] = a3[2];
    }
    if (*((char *)a4 + 23) < 0)
    {
      sub_10004FC84(&buf[48], (void *)*a4, (unint64_t)a4[1]);
    }
    else
    {
      *(_OWORD *)&buf[48] = *(_OWORD *)a4;
      *(void *)&long long v41 = a4[2];
    }
    *((void *)&v41 + 1) = 0;
    long long v42 = 0uLL;
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(v43, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v43[0] = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      *(void *)&v43[1] = *((void *)&__str->__r_.__value_.__l + 2);
    }
    if (*((char *)a6 + 23) < 0)
    {
      sub_10004FC84((unsigned char *)&v43[1] + 8, *a6, (unint64_t)a6[1]);
    }
    else
    {
      *(_OWORD *)((char *)&v43[1] + 8) = *(_OWORD *)a6;
      *((void *)&v43[2] + 1) = a6[2];
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    LODWORD(v47) = 2;
    BYTE4(v47) = 0;
    *((void *)&v47 + 1) = CFAbsoluteTimeGetCurrent();
    uint64_t v49 = 0;
    long long v48 = 0uLL;
    unint64_t v34 = *(void *)(a1 + 248);
    if (v34 >= *(void *)(a1 + 256))
    {
      uint64_t v35 = sub_10042763C(v25, (long long *)buf);
    }
    else
    {
      sub_10042775C(*(char **)(a1 + 248), (long long *)buf);
      uint64_t v35 = v34 + 232;
      *(void *)(a1 + 248) = v34 + 232;
    }
    *(void *)(a1 + 248) = v35;
    sub_100427BEC((uint64_t)buf);
  }
  else
  {
    std::string::operator=((std::string *)v26, (const std::string *)a2);
    std::string::operator=((std::string *)(v26 + 24), (const std::string *)a3);
    std::string::operator=((std::string *)(v26 + 48), (const std::string *)a4);
    std::string::operator=((std::string *)(v26 + 96), __str);
    *(_DWORD *)(v26 + 192) = 2;
  }
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 104) + 104))(*(void *)(a1 + 104), v25);
  *(_DWORD *)(a1 + 500) |= 0x40u;
  v39[0] = off_1019CAED8;
  v39[3] = v39;
  sub_10042448C(a1, (uint64_t)v39);
  sub_10003B34C(v39);
}

void sub_1004243AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void *sub_10042448C(uint64_t a1, uint64_t a2)
{
  sub_1000F0058((uint64_t)v5, a2);
  uint64_t v7 = 0;
  uint64_t v3 = operator new(0x28uLL);
  *uint64_t v3 = off_1019CAF58;
  sub_1000DA470((uint64_t)(v3 + 1), (uint64_t)v5);
  uint64_t v7 = v3;
  sub_100424578(a1, (uint64_t)v6);
  sub_10003B34C(v6);
  return sub_10003B34C(v5);
}

void sub_10042453C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_10003B34C((uint64_t *)va1);
  sub_10003B34C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100424568(long long **a1@<X1>, void *a2@<X8>)
{
}

uint64_t sub_100424570(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 491);
}

void *sub_100424578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %ld min expiry - start black list upload", buf, 0xCu);
  }
  if (sub_1004268F0(a1))
  {
    v13[1] = (void **)a1;
    sub_1000DA470((uint64_t)v14, a2);
    int v16 = 0;
    uint64_t v6 = operator new(0x30uLL);
    void *v6 = off_1019CB1E8;
    v6[1] = a1;
    sub_1000DA470((uint64_t)(v6 + 2), (uint64_t)v14);
    int v16 = v6;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
    if (v7)
    {
      int v8 = std::__shared_weak_count::lock(v7);
      BOOL v9 = v8;
      if (v8)
      {
        uint64_t v10 = *(void *)(a1 + 64);
        if (v10)
        {
          *(void *)long long buf = *(void *)(a1 + 64);
          *(void *)&uint8_t buf[8] = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10042EDA0((uint64_t)v18, (uint64_t)v15);
          uint64_t v20 = 0;
          uint64_t v11 = (char *)operator new(0x38uLL);
          *(void *)uint64_t v11 = off_1019CB378;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          sub_10042EDA0((uint64_t)(v11 + 24), (uint64_t)v18);
          uint64_t v20 = v11;
          (*(void (**)(uint64_t, void *))(*(void *)v10 + 16))(v10, v19);
          sub_10030ED0C(v19);
          sub_10042E52C(v18);
          if (*(void *)&buf[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
          }
          goto LABEL_15;
        }
      }
    }
    else
    {
      BOOL v9 = 0;
    }
    memset(buf, 0, sizeof(buf));
    v18[0] = 0;
    memset(v19, 0, sizeof(v19));
    sub_100426BFC((uint64_t)v16, (uint64_t)buf, (uint64_t)v19, 5);
    v13[0] = (void **)v19;
    sub_10010DF1C(v13);
    v13[0] = (void **)buf;
    sub_1000C5238(v13);
    if (!v9)
    {
LABEL_16:
      sub_10042E52C(v15);
      return sub_10003B34C(v14);
    }
LABEL_15:
    sub_10004D2C8(v9);
    goto LABEL_16;
  }
  uint64_t result = *(void **)(a2 + 24);
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 48))(result);
  }
  return result;
}

void sub_100424824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_10030ED0C((void *)(v9 - 88));
  sub_100426C4C((uint64_t)va1);
  sub_10004D2C8(v8);
  sub_10042E52C((uint64_t *)va);
  sub_10003B34C(v7);
  _Unwind_Resume(a1);
}

BOOL sub_100424894(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(**(void **)(a1 + 48) + 768))(&theDict);
  if (theDict) {
    uint64_t v4 = sub_100080778;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4)
  {
    uint64_t v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 39) >= 0) {
        uint64_t v12 = a2 + 16;
      }
      else {
        uint64_t v12 = *(void *)(a2 + 16);
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v15 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed loading PhoneAccountTransfer CB for iccid: %s", buf, 0xCu);
    }
    goto LABEL_11;
  }
  if (!CFDictionaryContainsKey(theDict, @"PhoneAccountTransfer")
    || (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PhoneAccountTransfer"),
        !CFDictionaryContainsKey(Value, @"DisablePhoneNumberCheckforBlacklist")))
  {
LABEL_11:
    BOOL v7 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = CFDictionaryGetValue(Value, @"DisablePhoneNumberCheckforBlacklist");
  BOOL v7 = (BOOL)v6;
  buf[0] = 0;
  if (v6)
  {
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)buf, (BOOL *)v7, v9);
      BOOL v7 = buf[0] != 0;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_12:
  sub_100057D78((const void **)&theDict);
  return v7;
}

void sub_100424A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100424A74(void *a1, void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = a1[15];
      if (v6)
      {
        (*(void (**)(void *__return_ptr, void))(*(void *)v6 + 216))(v9, a1[15]);
        uint64_t v7 = sub_10010E128((uint64_t)v9, a2);
        sub_10005CD2C((uint64_t)v9, (char *)v9[1]);
        if (!v7)
        {
          (*(void (**)(uint64_t, void **))(*(void *)v6 + 200))(v6, a2);
          sub_100421950((uint64_t)a1);
        }
LABEL_10:
        sub_10004D2C8(v5);
        return;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  CFTypeID v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "invalid pending transfer handler", (uint8_t *)v9, 2u);
  }
  if (v5) {
    goto LABEL_10;
  }
}

void sub_100424BA0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_100424BB8(uint64_t a1, char *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 120);
      if (v6)
      {
        if ((*(uint64_t (**)(void, char *))(*(void *)v6 + 240))(*(void *)(a1 + 120), a2))
        {
          (*(void (**)(uint8_t *__return_ptr, uint64_t, char *))(*(void *)v6 + 168))(v20, v6, a2);
          if (!v23) {
            goto LABEL_25;
          }
          unint64_t v7 = v22;
          int v8 = (char)v22;
          if ((v22 & 0x80u) != 0) {
            unint64_t v7 = (unint64_t)v21[1];
          }
          if (v7)
          {
            CFBooleanRef v9 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v10 = (const void **)v21[0];
              if (v8 >= 0) {
                uint64_t v10 = v21;
              }
              if (a2[23] >= 0) {
                uint64_t v11 = a2;
              }
              else {
                uint64_t v11 = *(char **)a2;
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v10;
              __int16 v17 = 2080;
              uint64_t v18 = v11;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I ODA transfer %s -> %s complete", buf, 0x16u);
            }
            sub_100058DB0(buf, "");
            sub_100058DB0(__p, "");
            sub_100423EF4(a1, (void **)buf, __p, v21, (std::string *)(a1 + 440), (void **)a2);
            if (v15 < 0) {
              operator delete(__p[0]);
            }
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
LABEL_25:
            uint64_t v13 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I SourceIccid is not present", buf, 2u);
            }
          }
          if (v23) {
            sub_10030D10C((uint64_t)v20);
          }
        }
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v20 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid pending transfer handler", v20, 2u);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
LABEL_23:
  sub_10004D2C8(v5);
}

void sub_100424E40(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (a8 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (LOBYTE(STACK[0x520])) {
    sub_10030D10C((uint64_t)va);
  }
  sub_10004D2C8(v15);
  _Unwind_Resume(a1);
}

void sub_100424EA0(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*(void *)(a1 + 80))
  {
    uint64_t v4 = (std::string *)*a2;
    uint64_t v5 = a2[1];
    if (*a2 != v5)
    {
      int v8 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10042A214(&__s, (uint64_t)v4);
        std::string v38 = __s;
        for (uint64_t i = (uint64_t)&v4[3]; i != v5; i += 72)
        {
          *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&__s, "\n\t");
          std::string::append(&v38, (const std::string::value_type *)&__s, 2uLL);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          sub_10042A214(&__s, i);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_s = &__s;
          }
          else {
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __s.__r_.__value_.__l.__size_;
          }
          std::string::append(&v38, (const std::string::value_type *)p_s, size);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v12 = &v38;
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        LODWORD(__s.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I deleting denylist items:\n\t%s", (uint8_t *)&__s, 0xCu);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        uint64_t v4 = (std::string *)*a2;
        uint64_t v5 = a2[1];
      }
      if (v5 - (uint64_t)v4 >= 1)
      {
        uint64_t v13 = (v5 - (uint64_t)v4) / 72;
        uint64_t v14 = a1 + 280;
        int v16 = *(std::string **)(a1 + 272);
        uint64_t v15 = *(void *)(a1 + 280);
        if ((uint64_t)(0x8E38E38E38E38E39 * ((v15 - (uint64_t)v16) >> 3)) >= v13)
        {
          if (v13 <= 0)
          {
            char v23 = &v4[3 * v13];
            sub_100427370(a1 + 264, *(void *)(a1 + 272), *(void *)(a1 + 272), (uint64_t)&v16[3 * v13]);
            for (; v4 != v23; int v16 = v24 + 1)
            {
              std::string::operator=(v16, v4);
              long long v24 = v16 + 1;
              dispatch_object_t v25 = v4 + 1;
              std::string::operator=(v24++, v25);
              std::string::operator=(v24, ++v25);
              uint64_t v4 = (std::string *)&v25[1];
            }
          }
          else
          {
            *(void *)(a1 + 272) = sub_100323350(v14, (uint64_t)v4, v5, *(void *)(a1 + 272));
          }
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 264);
          unint64_t v18 = 0x8E38E38E38E38E39 * (((uint64_t)v16 - v17) >> 3);
          unint64_t v19 = v18 + v13;
          if (v18 + v13 > 0x38E38E38E38E38ELL) {
            sub_10006A748();
          }
          unint64_t v20 = 0x8E38E38E38E38E39 * ((v15 - v17) >> 3);
          if (2 * v20 > v19) {
            unint64_t v19 = 2 * v20;
          }
          if (v20 >= 0x1C71C71C71C71C7) {
            unint64_t v21 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v21 = v19;
          }
          uint64_t v43 = a1 + 280;
          if (v21) {
            unsigned __int8 v22 = (char *)sub_10016ACDC(v14, v21);
          }
          else {
            unsigned __int8 v22 = 0;
          }
          uint64_t v26 = &v22[72 * v18];
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
          __s.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
          __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v26;
          long long v42 = &v22[72 * v21];
          std::string::size_type v27 = (std::string::size_type)&v26[72 * v13];
          uint64_t v28 = 72 * v13;
          do
          {
            sub_1003233D4(v26, (long long *)v4);
            v26 += 72;
            v4 += 3;
            v28 -= 72;
          }
          while (v28);
          __s.__r_.__value_.__r.__words[2] = v27;
          sub_100427418((long long **)(a1 + 264), &__s, (long long *)v16);
          sub_10030EC38((uint64_t)&__s);
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 104) + 120))(*(void *)(a1 + 104), a1 + 264);
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)"CellularPlanUploadTriggersModel";
      sub_1002BFAE4(&v38.__r_.__value_.__l.__data_, (dispatch_object_t *)(a1 + 24), &__s);
      (***(void (****)(std::string *__return_ptr))(a1 + 48))(&v38);
      Registry::createRestModuleOneTimeUseMobileHelperConnection(&v36, (Registry *)v38.__r_.__value_.__l.__data_);
      ctu::RestModule::connect();
      if (v37) {
        sub_10004D2C8(v37);
      }
      if (v38.__r_.__value_.__l.__size_) {
        sub_10004D2C8((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
      }
      uint64_t v29 = *(void *)(a1 + 80);
      std::string::size_type v30 = __s.__r_.__value_.__r.__words[0];
      memset(v35, 0, sizeof(v35));
      sub_1003229A4((void *)&v35[1] + 1, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
      if (*((char *)a3 + 23) < 0)
      {
        sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long __p = *a3;
        uint64_t v34 = *((void *)a3 + 2);
      }
      long long v40 = 0;
      uint64_t v31 = operator new(0x28uLL);
      *uint64_t v31 = off_1019CAFD8;
      v31[1] = a1;
      __darwin_ct_rune_t v32 = v31 + 2;
      if (SHIBYTE(v34) < 0)
      {
        sub_10004FC84(v32, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        *(_OWORD *)__darwin_ct_rune_t v32 = __p;
        v31[4] = v34;
      }
      long long v40 = v31;
      (*(void (**)(uint64_t, std::string::size_type, _OWORD *, void *))(*(void *)v29 + 64))(v29, v30, v35, v39);
      sub_100322EB8(v39);
      if (SHIBYTE(v34) < 0) {
        operator delete((void *)__p);
      }
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35[1] + 8;
      sub_10030EC88((void ***)&v38);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
      sub_10010DF1C((void ***)&v38);
      if (__s.__r_.__value_.__l.__size_) {
        sub_10004D2C8((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
      }
    }
  }
}

void sub_10042542C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  *(void *)(v31 + 272) = v32;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100425530(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 336) != 1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 490))
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    BOOL v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v8) {
      return result;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    unint64_t v7 = "#I Device never unlocked since boot, abort saving and uploading";
    goto LABEL_17;
  }
  if (*(void *)(a1 + 160) == *(void *)(a1 + 168))
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    BOOL v10 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    unint64_t v7 = "#I vinylInfo is empty";
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144);
  if (v2 == v3)
  {
LABEL_13:
    uint64_t v4 = *(NSObject **)(a1 + 40);
    BOOL v9 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v9) {
      return result;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    unint64_t v7 = "#I Not all sims are settled";
    goto LABEL_17;
  }
  do
  {
    if ((subscriber::isSimSettled() & 1) == 0) {
      goto LABEL_13;
    }
    v2 += 168;
  }
  while (v2 != v3);
  if (*(unsigned char *)(a1 + 489) != 1 || !*(unsigned char *)(a1 + 488))
  {
    uint64_t v11 = *(void **)(a1 + 184);
    if (v11 == (void *)(a1 + 192)) {
      return 1;
    }
    while (1)
    {
      if (*((char *)v11 + 55) < 0) {
        sub_10004FC84(&__p, (void *)v11[4], v11[5]);
      }
      else {
        std::string __p = *(std::string *)(v11 + 4);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size >= 0x15) {
        break;
      }
      char v20 = 0;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_44;
      }
LABEL_45:
      if (v20) {
        goto LABEL_9;
      }
      unint64_t v21 = (void *)v11[1];
      if (v21)
      {
        do
        {
          unsigned __int8 v22 = v21;
          unint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unsigned __int8 v22 = (void *)v11[2];
          BOOL v18 = *v22 == (void)v11;
          uint64_t v11 = v22;
        }
        while (!v18);
      }
      uint64_t v11 = v22;
      if (v22 == (void *)(a1 + 192)) {
        return 1;
      }
    }
    std::string::basic_string(&buf, &__p, 0, 0x14uLL, (std::allocator<char> *)&v25);
    std::string::size_type v13 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v13 = buf.__r_.__value_.__l.__size_;
    }
    if (v13 == 20)
    {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      std::string::size_type v15 = p_buf->__r_.__value_.__r.__words[0];
      std::string::size_type v16 = p_buf->__r_.__value_.__l.__size_;
      int v17 = p_buf->__r_.__value_.__r.__words[2];
      BOOL v18 = v15 == 0x72616C756C6C6543 && v16 == 0x6E6172546E616C50;
      char v20 = v18 && v17 == 1919247987;
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_55:
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_45;
        }
LABEL_44:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_45;
      }
    }
    else
    {
      char v20 = 0;
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_55;
      }
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_55;
  }
LABEL_9:
  uint64_t v4 = *(NSObject **)(a1 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (!v5) {
    return result;
  }
  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
  unint64_t v7 = "#I Transfer ongoing on target device";
LABEL_17:
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&buf, 2u);
  return 0;
}

void sub_100425804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100425820(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  BOOL v5 = v4;
  if (!a1[5]) {
    goto LABEL_197;
  }
  uint64_t v6 = *(void *)(v3 + 96);
  *(void *)(v3 + 96) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  unint64_t v7 = *(NSObject **)(v3 + 40);
  std::string::size_type v84 = (os_log_t *)(v3 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I 1 min expiry - start saveAndUpload", (uint8_t *)&buf, 2u);
  }
  if (!sub_100425530(v3)) {
    goto LABEL_197;
  }
  if (*(char *)(v3 + 415) < 0)
  {
    if (!*(void *)(v3 + 400))
    {
LABEL_17:
      BOOL v10 = *(void **)(v3 + 368);
      if (v10 != (void *)(v3 + 376))
      {
        do
        {
          if (*((_DWORD *)v10 + 8))
          {
            if (*((char *)v10 + 63) < 0)
            {
              if (v10[6]) {
                goto LABEL_14;
              }
            }
            else if (*((unsigned char *)v10 + 63))
            {
              goto LABEL_14;
            }
          }
          uint64_t v11 = (void *)v10[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v10[2];
              BOOL v37 = *v12 == (void)v10;
              BOOL v10 = v12;
            }
            while (!v37);
          }
          BOOL v10 = v12;
        }
        while (v12 != (void *)(v3 + 376));
      }
      for (uint64_t i = *(void *)(v3 + 160); ; i += 88)
      {
        if (i == *(void *)(v3 + 168))
        {
          char v20 = *v84;
          if (os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "missing csn + imeis + meid", (uint8_t *)&buf, 2u);
          }
          goto LABEL_197;
        }
        if (*(_DWORD *)(i + 4) && *(_OWORD *)(i + 16) != 0) {
          break;
        }
      }
    }
  }
  else if (!*(unsigned char *)(v3 + 415))
  {
    goto LABEL_17;
  }
LABEL_14:
  BOOL v8 = *(std::__shared_weak_count **)(v3 + 72);
  if (v8)
  {
    BOOL v8 = std::__shared_weak_count::lock(v8);
    BOOL v9 = v8;
    if (v8) {
      BOOL v8 = *(std::__shared_weak_count **)(v3 + 64);
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  if (!*(unsigned char *)(v3 + 491)
    || v8
    && (((uint64_t (*)(std::__shared_weak_count *))v8->__vftable[1].~__shared_weak_count_0)(v8) & 1) == 0)
  {
    uint64_t v19 = *(void *)(v3 + 104);
    sub_10008CF3C((uint64_t *)v90, v3 + 368);
    *(void *)&long long buf = off_1019CB058;
    *((void *)&buf + 1) = v3;
    *((void *)&v105 + 1) = &buf;
    (*(void (**)(uint64_t, _OWORD *, long long *))(*(void *)v19 + 176))(v19, v90, &buf);
    sub_1000605C0(&buf);
    sub_1000886C0((uint64_t)v90, *((char **)&v90[0] + 1));
    if (v9) {
      goto LABEL_196;
    }
    goto LABEL_197;
  }
  *((void *)&v98 + 1) = 0;
  uint64_t v99 = 0;
  *(void *)&long long v98 = (char *)&v98 + 8;
  uint64_t v14 = *(std::__shared_weak_count **)(v3 + 128);
  BOOL v77 = v5;
  char v78 = v9;
  if (v14)
  {
    std::string::size_type v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      std::string::size_type v16 = v15;
      uint64_t v17 = *(void *)(v3 + 120);
      if (v17)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v17 + 224))(&buf);
        sub_10005CD2C((uint64_t)&v98, *((char **)&v98 + 1));
        BOOL v18 = (char *)*((void *)&buf + 1);
        long long v98 = buf;
        uint64_t v99 = v105;
        if ((void)v105)
        {
          *(void *)(*((void *)&buf + 1) + 16) = (char *)&v98 + 8;
          *(void *)&long long buf = (char *)&buf + 8;
          *((void *)&buf + 1) = 0;
          *(void *)&long long v105 = 0;
          BOOL v18 = 0;
        }
        else
        {
          *(void *)&long long v98 = (char *)&v98 + 8;
        }
        sub_10005CD2C((uint64_t)&buf, v18);
      }
      sub_10004D2C8(v16);
    }
  }
  uint64_t v97 = 0;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  *(_OWORD *)std::string::size_type v92 = 0u;
  memset(v90, 0, sizeof(v90));
  if (*(char *)(v3 + 415) < 0)
  {
    sub_10004FC84(__dst, *(void **)(v3 + 392), *(void *)(v3 + 400));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(v3 + 392);
    uint64_t v88 = *(void *)(v3 + 408);
  }
  char v89 = 1;
  uint64_t v82 = v3 + 464;
  uint64_t v83 = v3 + 184;
  v86[0] = 0;
  v86[1] = 0;
  long long v85 = (uint64_t *)v86;
  uint64_t v21 = *(void *)(v3 + 136);
  uint64_t v22 = *(void *)(v3 + 144);
  if (v21 == v22) {
    goto LABEL_119;
  }
  do
  {
    if (subscriber::isEsimCapable()) {
      goto LABEL_106;
    }
    memset(v118, 0, sizeof(v118));
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long buf = 0u;
    long long v105 = 0u;
    char v23 = *(std::__shared_weak_count **)(v3 + 72);
    if (v23)
    {
      long long v24 = std::__shared_weak_count::lock(v23);
      if (v24)
      {
        char v25 = v24;
        uint64_t v26 = *(void *)(v3 + 64);
        if (v26)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v26 + 40))(&__p);
          uint64_t v27 = *(unsigned __int8 *)(v21 + 95);
          if ((v27 & 0x80u) == 0) {
            uint64_t v28 = *(unsigned __int8 *)(v21 + 95);
          }
          else {
            uint64_t v28 = *(void *)(v21 + 80);
          }
          uint64_t v29 = BYTE7(v101);
          int v30 = SBYTE7(v101);
          if (SBYTE7(v101) < 0) {
            uint64_t v29 = *((void *)&__p + 1);
          }
          if (v28 == v29)
          {
            if ((SBYTE7(v101) & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (long long *)__p;
            }
            if ((v27 & 0x80) != 0)
            {
              BOOL v36 = memcmp(*(const void **)(v21 + 72), p_p, *(void *)(v21 + 80)) == 0;
            }
            else if (*(unsigned char *)(v21 + 95))
            {
              uint64_t v32 = 0;
              uint64_t v33 = v27 - 1;
              do
              {
                int v34 = *((unsigned __int8 *)p_p + v32);
                int v35 = *(unsigned __int8 *)(v21 + v32 + 72);
                BOOL v36 = v35 == v34;
                BOOL v37 = v35 != v34 || v33 == v32++;
              }
              while (!v37);
            }
            else
            {
              BOOL v36 = 1;
            }
          }
          else
          {
            BOOL v36 = 0;
          }
          if (v30 < 0) {
            operator delete((void *)__p);
          }
          if (v36) {
            BYTE1(v116) = 1;
          }
        }
        sub_10004D2C8(v25);
      }
    }
    LOWORD(v118[3]) = sub_100CDD060(v84, v83, v21 + 72);
    long long v101 = 0u;
    long long v102 = 0u;
    long long __p = 0u;
    sub_100E63EA4((uint64_t)&__p);
    std::string v38 = sub_100046F68(v82, (void **)(v21 + 72));
    if ((void **)(v3 + 472) == v38 || (long long v39 = v38, (v40 = v38[8]) == 0))
    {
LABEL_95:
      if (sub_100423AF4(v3, (uint64_t)&__p, (uint64_t)&v101 + 8, v21 + 120, v21 + 144, (char *)(v21 + 72))) {
        WORD4(v105) = 259;
      }
      if (((*(uint64_t (**)(void, long long *, char *, uint64_t, uint64_t, uint64_t))(**(void **)(v3 + 48)
                                                                                             + 240))(*(void *)(v3 + 48), &__p, (char *)&v101 + 8, v21 + 120, v21 + 144, v21 + 72) & 1) == 0)WORD4(v105) = 262;
      if (((*(uint64_t (**)(void, long long *, char *, uint64_t, uint64_t, uint64_t))(**(void **)(v3 + 48)
                                                                                             + 256))(*(void *)(v3 + 48), &__p, (char *)&v101 + 8, v21 + 120, v21 + 144, v21 + 72) & 1) == 0)WORD4(v105) = 262;
      goto LABEL_101;
    }
    long long v41 = v38[8];
    while (1)
    {
      int v42 = v41[7];
      if (v42 <= 16) {
        break;
      }
LABEL_90:
      long long v41 = *(_DWORD **)v41;
      if (!v41) {
        goto LABEL_91;
      }
    }
    if (v42 != 16)
    {
      v41 += 2;
      goto LABEL_90;
    }
    LODWORD(v103[0]) = 16;
    if (*(_DWORD *)sub_10012EF5C((uint64_t)(v38 + 7), (int *)v103) == 2) {
      char v45 = 2;
    }
    else {
      char v45 = 1;
    }
    LOBYTE(v116) = v45;
    long long v40 = v39[8];
    if (!v40) {
      goto LABEL_95;
    }
LABEL_91:
    while (2)
    {
      int v43 = v40[7];
      if (v43 > 13)
      {
LABEL_94:
        long long v40 = *(_DWORD **)v40;
        if (!v40) {
          goto LABEL_95;
        }
        continue;
      }
      break;
    }
    if (v43 != 13)
    {
      v40 += 2;
      goto LABEL_94;
    }
    LODWORD(v103[0]) = 13;
    if (*(_DWORD *)sub_10012EF5C((uint64_t)(v39 + 7), (int *)v103) == 2)
    {
      if (sub_100423AF4(v3, (uint64_t)&__p, (uint64_t)&v101 + 8, v21 + 120, v21 + 144, (char *)(v21 + 72)))
      {
        __int16 v46 = 259;
        goto LABEL_117;
      }
    }
    else
    {
      __int16 v46 = 272;
LABEL_117:
      WORD4(v105) = v46;
    }
LABEL_101:
    v103[0] = (long long *)(v21 + 72);
    long long v44 = sub_10032FE40(&v85, (void **)(v21 + 72), (uint64_t)&unk_10144E20E, v103);
    std::string::operator=((std::string *)(v44 + 7), (const std::string *)&buf);
    *((_WORD *)v44 + 40) = WORD4(v105);
    sub_100179AF8((std::string *)(v44 + 11), (const std::string *)&v106);
    sub_100179AF8((std::string *)v44 + 5, (const std::string *)&v108);
    sub_100179AF8((std::string *)(v44 + 19), (const std::string *)&v110);
    sub_100179AF8((std::string *)(v44 + 23), (const std::string *)&v112);
    *((_WORD *)v44 + 108) = v114;
    std::string::operator=((std::string *)(v44 + 28), (const std::string *)((char *)&v114 + 8));
    *((_WORD *)v44 + 124) = v116;
    *((unsigned char *)v44 + 250) = BYTE2(v116);
    sub_100179AF8((std::string *)(v44 + 32), (const std::string *)((char *)&v116 + 8));
    *((_OWORD *)v44 + 18) = *(_OWORD *)&v118[1];
    *((_WORD *)v44 + 152) = v118[3];
    if (SHIBYTE(v102) < 0) {
      operator delete(*((void **)&v101 + 1));
    }
    if (SBYTE7(v101) < 0) {
      operator delete((void *)__p);
    }
    sub_1000C5578((uint64_t)&buf);
LABEL_106:
    v21 += 168;
  }
  while (v21 != v22);
LABEL_119:
  uint64_t v47 = *(void *)(v3 + 160);
  uint64_t v79 = *(void *)(v3 + 168);
  if (v47 != v79)
  {
    while (1)
    {
      uint64_t v80 = v47;
      if (*(_DWORD *)v47 == 2)
      {
        if (*(unsigned char *)(v47 + 80)) {
          break;
        }
      }
LABEL_182:
      uint64_t v47 = v80 + 88;
      if (v80 + 88 == v79) {
        goto LABEL_183;
      }
    }
    uint64_t v49 = *(void *)(v47 + 56);
    uint64_t v48 = *(void *)(v47 + 64);
    uint64_t v81 = v48;
LABEL_123:
    if (v49 == v48) {
      goto LABEL_182;
    }
    memset(v118, 0, sizeof(v118));
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long buf = 0u;
    long long v105 = 0u;
    __int16 v50 = *(std::__shared_weak_count **)(v3 + 72);
    if (v50)
    {
      int v51 = std::__shared_weak_count::lock(v50);
      if (v51)
      {
        uint64_t v52 = v51;
        uint64_t v53 = *(void *)(v3 + 64);
        if (!v53) {
          goto LABEL_147;
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v53 + 40))(&__p);
        uint64_t v54 = *(unsigned __int8 *)(v49 + 39);
        if ((v54 & 0x80u) == 0) {
          uint64_t v55 = *(unsigned __int8 *)(v49 + 39);
        }
        else {
          uint64_t v55 = *(void *)(v49 + 24);
        }
        uint64_t v56 = BYTE7(v101);
        int v57 = SBYTE7(v101);
        if (SBYTE7(v101) < 0) {
          uint64_t v56 = *((void *)&__p + 1);
        }
        if (v55 == v56)
        {
          if ((SBYTE7(v101) & 0x80u) == 0) {
            long long v58 = &__p;
          }
          else {
            long long v58 = (long long *)__p;
          }
          if ((v54 & 0x80) != 0)
          {
            BOOL v63 = memcmp(*(const void **)(v49 + 16), v58, *(void *)(v49 + 24)) == 0;
            if ((v57 & 0x80000000) == 0) {
              goto LABEL_145;
            }
          }
          else if (*(unsigned char *)(v49 + 39))
          {
            uint64_t v59 = 0;
            uint64_t v60 = v54 - 1;
            do
            {
              int v61 = *((unsigned __int8 *)v58 + v59);
              int v62 = *(unsigned __int8 *)(v49 + v59 + 16);
              BOOL v63 = v62 == v61;
            }
            while (v62 == v61 && v60 != v59++);
            if ((SBYTE7(v101) & 0x80000000) == 0)
            {
LABEL_145:
              if (v63) {
                goto LABEL_146;
              }
              goto LABEL_147;
            }
          }
          else
          {
            BOOL v63 = 1;
            if ((SBYTE7(v101) & 0x80000000) == 0) {
              goto LABEL_145;
            }
          }
        }
        else
        {
          BOOL v63 = 0;
          if ((SBYTE7(v101) & 0x80000000) == 0) {
            goto LABEL_145;
          }
        }
        operator delete((void *)__p);
        if (v63) {
LABEL_146:
        }
          BYTE1(v116) = 1;
LABEL_147:
        sub_10004D2C8(v52);
      }
    }
    LOWORD(v118[3]) = sub_100CDD060(v84, v83, v49 + 16);
    uint64_t v65 = sub_100046F68(v82, (void **)(v49 + 16));
    if ((void **)(v3 + 472) == v65) {
      goto LABEL_159;
    }
    long long v66 = v65;
    uint64_t v67 = v65[8];
    if (!v67) {
      goto LABEL_159;
    }
    uint64_t v68 = v65[8];
    while (1)
    {
      int v69 = v68[7];
      if (v69 <= 16)
      {
        if (v69 == 16)
        {
          LODWORD(__p) = 16;
          if (*(_DWORD *)sub_10012EF5C((uint64_t)(v65 + 7), (int *)&__p) == 2) {
            char v72 = 2;
          }
          else {
            char v72 = 1;
          }
          LOBYTE(v116) = v72;
          uint64_t v67 = v66[8];
          if (!v67)
          {
LABEL_159:
            if (sub_100423AF4(v3, v49 + 96, v49 + 120, v49 + 144, v49 + 168, (char *)(v49 + 16))) {
              WORD4(v105) = 259;
            }
            if (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v3 + 48)
                                                                                                 + 240))(*(void *)(v3 + 48), v49 + 96, v49 + 120, v49 + 144, v49 + 168, v49 + 16) & 1) == 0)WORD4(v105) = 262;
            goto LABEL_163;
          }
LABEL_155:
          while (2)
          {
            int v70 = v67[7];
            if (v70 > 13)
            {
LABEL_158:
              uint64_t v67 = *(_DWORD **)v67;
              if (!v67) {
                goto LABEL_159;
              }
              continue;
            }
            break;
          }
          if (v70 != 13)
          {
            v67 += 2;
            goto LABEL_158;
          }
          LODWORD(__p) = 13;
          if (*(_DWORD *)sub_10012EF5C((uint64_t)(v66 + 7), (int *)&__p) == 2)
          {
            if (sub_100423AF4(v3, v49 + 96, v49 + 120, v49 + 144, v49 + 168, (char *)(v49 + 16)))
            {
              __int16 v73 = 259;
              goto LABEL_178;
            }
          }
          else
          {
            __int16 v73 = 272;
LABEL_178:
            WORD4(v105) = v73;
          }
LABEL_163:
          *(void *)&long long __p = v49 + 16;
          uint64_t v71 = sub_10032FE40(&v85, (void **)(v49 + 16), (uint64_t)&unk_10144E20E, (long long **)&__p);
          std::string::operator=((std::string *)(v71 + 7), (const std::string *)&buf);
          *((_WORD *)v71 + 40) = WORD4(v105);
          sub_100179AF8((std::string *)(v71 + 11), (const std::string *)&v106);
          sub_100179AF8((std::string *)v71 + 5, (const std::string *)&v108);
          sub_100179AF8((std::string *)(v71 + 19), (const std::string *)&v110);
          sub_100179AF8((std::string *)(v71 + 23), (const std::string *)&v112);
          *((_WORD *)v71 + 108) = v114;
          std::string::operator=((std::string *)(v71 + 28), (const std::string *)((char *)&v114 + 8));
          *((_WORD *)v71 + 124) = v116;
          *((unsigned char *)v71 + 250) = BYTE2(v116);
          sub_100179AF8((std::string *)(v71 + 32), (const std::string *)((char *)&v116 + 8));
          *((_OWORD *)v71 + 18) = *(_OWORD *)&v118[1];
          *((_WORD *)v71 + 152) = v118[3];
          sub_1000C5578((uint64_t)&buf);
          v49 += 216;
          uint64_t v48 = v81;
          goto LABEL_123;
        }
        v68 += 2;
      }
      uint64_t v68 = *(_DWORD **)v68;
      if (!v68) {
        goto LABEL_155;
      }
    }
  }
LABEL_183:
  sub_1008A1A04((uint64_t)v90, (uint64_t *)(v3 + 160), (uint64_t *)(v3 + 136), v3 + 368, (long long *)__dst, (long long *)(v3 + 416), (uint64_t)&v85);
  sub_100330068((uint64_t)&v85, v86[0]);
  BOOL v5 = v77;
  BOOL v9 = v78;
  if (v89 && SHIBYTE(v88) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v74 = *(void *)(v3 + 104);
  int v75 = *(unsigned __int8 *)(v3 + 493);
  uint64_t v76 = *(void *)(v3 + 352);
  *(void *)&long long __p = *(void *)(v3 + 344);
  *((void *)&__p + 1) = v76;
  if (v76) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&long long buf = off_1019CB0D8;
  *((void *)&buf + 1) = v3;
  *((void *)&v105 + 1) = &buf;
  (*(void (**)(uint64_t, BOOL, _OWORD *, long long *, long long *, long long *))(*(void *)v74 + 152))(v74, v75 != 0, v90, &__p, &v98, &buf);
  sub_10042AF74(&buf);
  if (*((void *)&__p + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&__p + 1));
  }
  *(unsigned char *)(v3 + 493) = 0;
  sub_100330068((uint64_t)&v96, *((void **)&v96 + 1));
  if (SHIBYTE(v95) < 0) {
    operator delete(*((void **)&v94 + 1));
  }
  if ((_BYTE)v94 && SHIBYTE(v93) < 0) {
    operator delete(v92[1]);
  }
  sub_1000886C0((uint64_t)&v91, *((char **)&v91 + 1));
  __dst[0] = (char *)&v90[1] + 8;
  sub_10008A88C((void ***)__dst);
  __dst[0] = v90;
  sub_1000C56F4((void ***)__dst);
  sub_10005CD2C((uint64_t)&v98, *((char **)&v98 + 1));
  if (v78) {
LABEL_196:
  }
    sub_10004D2C8(v9);
LABEL_197:

  sub_10004D2C8(v5);
}

void sub_100426718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51)
{
  sub_10004D2C8(v51);
  sub_10005CD2C((uint64_t)&a50, (char *)a51);
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_10004D2C8(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10042683C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100426858(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_100426868(uint64_t a1)
{
  sub_100330068(a1 + 128, *(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  sub_1000886C0(a1 + 48, *(char **)(a1 + 56));
  uint64_t v3 = (void **)(a1 + 24);
  sub_10008A88C(&v3);
  uint64_t v3 = (void **)a1;
  sub_1000C56F4(&v3);
  return a1;
}

BOOL sub_1004268F0(uint64_t a1)
{
  if (*(void *)(a1 + 240) == *(void *)(a1 + 248) && *(void *)(a1 + 264) == *(void *)(a1 + 272))
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "fBlacklistInfosForNewlyActivatedPlans and fDeletingBlocklistInfos are empty", buf, 2u);
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 336) == 1) {
      return 1;
    }
    uint64_t v2 = *(NSObject **)(a1 + 40);
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v3)
    {
      *(_WORD *)BOOL v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Internet is not available for blacklist upload", v5, 2u);
      return 0;
    }
  }
  return result;
}

void sub_1004269CC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (a1[5])
      {
        v6[0] = off_1019CB168;
        void v6[3] = v6;
        sub_100424578(v3, (uint64_t)v6);
        sub_10003B34C(v6);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100426A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003B34C((uint64_t *)va);
  sub_10004D2C8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100426AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 120);
  if (v7) {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 240))(v7, a2);
  }
  else {
    uint64_t v8 = 0;
  }
  sub_10004D2C8(v6);
  return v8;
}

void sub_100426B34(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100426B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100426B9C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  BOOL v5 = (void **)(a1 + 80);
  sub_10030EC88(&v5);
  BOOL v5 = v2;
  sub_10010DF1C(&v5);
  sub_100322EB8((void *)(a1 + 24));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

uint64_t sub_100426BFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = a4;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 48))(a1, a2, a3, &v5);
}

uint64_t sub_100426C4C(uint64_t a1)
{
  sub_10042E52C((void *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100426C84(void *a1, int a2, int a3, unsigned __int8 a4, char a5, int a6)
{
  uint64_t v7 = (std::__shared_weak_count *)a1[9];
  if (v7)
  {
    std::string::size_type v13 = std::__shared_weak_count::lock(v7);
    if (v13)
    {
      uint64_t v14 = a1[8];
      if (v14)
      {
        v16[0] = a2;
        v16[1] = a3;
        int v18 = a6;
        int v17 = a4;
        BYTE1(v17) = a5;
        (*(void (**)(uint64_t, _DWORD *))(*(void *)v14 + 32))(v14, v16);
LABEL_9:
        sub_10004D2C8(v13);
        return;
      }
    }
  }
  else
  {
    std::string::size_type v13 = 0;
  }
  std::string::size_type v15 = a1[5];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I No delegate to submit CKUploadDetails", (uint8_t *)v16, 2u);
  }
  if (v13) {
    goto LABEL_9;
  }
}

void sub_100426D7C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_100426D90(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100427BEC(v4 - 232);
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100426E14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = (long long *)(a2 + 8);
      uint64_t v3 = *(long long **)a2;
      sub_100426EA4((uint64_t **)a1, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    sub_10023A670(a1, *(void **)(a1 + 8));
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    sub_100319F54((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
}

uint64_t **sub_100426EA4(uint64_t **result, long long *a2, long long *a3)
{
  char v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    std::string::size_type v15 = result;
    std::string::size_type v16 = v8;
    int v17 = v8;
    if (v8)
    {
      std::string::size_type v16 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_100427038((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          BOOL v10 = (uint64_t **)sub_1000EA518((uint64_t)v5, v18, v17 + 4);
          sub_100046C38(v5, v18[0], v10, v17);
          int v17 = v16;
          if (v16) {
            std::string::size_type v16 = sub_1000EA590((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          BOOL v9 = a2;
        }
        while (!v12);
      }
    }
    BOOL result = (uint64_t **)sub_1004270AC((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)sub_100427104(v5, a2 + 2);
      std::string::size_type v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          std::string::size_type v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100427024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1004270AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100427038(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  std::string::operator=((std::string *)v4, (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(v4 + 24), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(v4 + 48), (const std::string *)(a2 + 72));
  *(unsigned char *)(v4 + 72) = *(unsigned char *)(a2 + 96);
  std::string::operator=((std::string *)(v4 + 80), (const std::string *)(a2 + 104));
  return a1;
}

uint64_t sub_1004270AC(uint64_t a1)
{
  sub_10023A670(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10023A670(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100427104(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  sub_10031A0DC((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  uint64_t v3 = (uint64_t **)sub_1000EA518((uint64_t)a1, &v6, v7[0] + 4);
  sub_100046C38(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_10023C164((uint64_t)v7, 0);
  return v4;
}

void sub_10042717C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023C164((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100427194(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    char v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)char v5 = 0;
      uint64_t v7 = (void **)(a3 + 24);
      if (*(char *)(a3 + 47) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(long long *)((char *)v5 + 24);
      *(void *)(a3 + 40) = *((void *)v5 + 5);
      *(_OWORD *)uint64_t v7 = v8;
      *((unsigned char *)v5 + 47) = 0;
      *((unsigned char *)v5 + 24) = 0;
      BOOL v9 = (void **)(a3 + 48);
      if (*(char *)(a3 + 71) < 0) {
        operator delete(*v9);
      }
      long long v10 = v5[3];
      *(void *)(a3 + 64) = *((void *)v5 + 8);
      *(_OWORD *)BOOL v9 = v10;
      *((unsigned char *)v5 + 71) = 0;
      *((unsigned char *)v5 + 48) = 0;
      uint64_t v11 = (void **)(a3 + 72);
      if (*(char *)(a3 + 95) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(long long *)((char *)v5 + 72);
      *(void *)(a3 + 88) = *((void *)v5 + 11);
      *(_OWORD *)uint64_t v11 = v12;
      *((unsigned char *)v5 + 95) = 0;
      *((unsigned char *)v5 + 72) = 0;
      std::string::size_type v13 = (void **)(a3 + 96);
      if (*(char *)(a3 + 119) < 0) {
        operator delete(*v13);
      }
      long long v14 = v5[6];
      *(void *)(a3 + 112) = *((void *)v5 + 14);
      *(_OWORD *)std::string::size_type v13 = v14;
      *((unsigned char *)v5 + 119) = 0;
      *((unsigned char *)v5 + 96) = 0;
      std::string::size_type v15 = (void **)(a3 + 120);
      if (*(char *)(a3 + 143) < 0) {
        operator delete(*v15);
      }
      long long v16 = *(long long *)((char *)v5 + 120);
      *(void *)(a3 + 136) = *((void *)v5 + 17);
      *(_OWORD *)std::string::size_type v15 = v16;
      *((unsigned char *)v5 + 143) = 0;
      *((unsigned char *)v5 + 120) = 0;
      int v17 = (void **)(a3 + 144);
      if (*(char *)(a3 + 167) < 0) {
        operator delete(*v17);
      }
      long long v18 = v5[9];
      *(void *)(a3 + 160) = *((void *)v5 + 20);
      *(_OWORD *)int v17 = v18;
      *((unsigned char *)v5 + 167) = 0;
      *((unsigned char *)v5 + 144) = 0;
      uint64_t v19 = (void **)(a3 + 168);
      if (*(char *)(a3 + 191) < 0) {
        operator delete(*v19);
      }
      long long v20 = *(long long *)((char *)v5 + 168);
      *(void *)(a3 + 184) = *((void *)v5 + 23);
      *(_OWORD *)uint64_t v19 = v20;
      *((unsigned char *)v5 + 191) = 0;
      *((unsigned char *)v5 + 168) = 0;
      *(_OWORD *)(a3 + 192) = v5[12];
      uint64_t v21 = (void **)(a3 + 208);
      if (*(char *)(a3 + 231) < 0) {
        operator delete(*v21);
      }
      long long v22 = v5[13];
      *(void *)(a3 + 224) = *((void *)v5 + 28);
      *(_OWORD *)uint64_t v21 = v22;
      *((unsigned char *)v5 + 231) = 0;
      *((unsigned char *)v5 + 208) = 0;
      a3 += 232;
      char v5 = (long long *)((char *)v5 + 232);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_100427370(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      long long v11 = *(_OWORD *)(v9 + 24);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 24) = 0;
      long long v12 = *(_OWORD *)(v9 + 48);
      *(void *)(v8 + 64) = *(void *)(v9 + 64);
      *(_OWORD *)(v8 + 48) = v12;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 48) = 0;
      v8 += 72;
      v9 += 72;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_100427544((uint64_t)&v14, a2, v7, v6);
}

long long *sub_100427418(long long **a1, void *a2, long long *a3)
{
  BOOL result = (long long *)a2[1];
  char v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    unint64_t v7 = a3;
    uint64_t v8 = a2[1];
    do
    {
      uint64_t v6 = (long long *)(v8 - 72);
      long long v9 = *(long long *)((char *)v7 - 72);
      *(void *)(v8 - 56) = *((void *)v7 - 7);
      *(_OWORD *)(v8 - 72) = v9;
      *((void *)v7 - 8) = 0;
      *((void *)v7 - 7) = 0;
      *((void *)v7 - 9) = 0;
      long long v10 = *(v7 - 3);
      *(void *)(v8 - 32) = *((void *)v7 - 4);
      *(_OWORD *)(v8 - 48) = v10;
      *((void *)v7 - 5) = 0;
      *((void *)v7 - 4) = 0;
      *((void *)v7 - 6) = 0;
      long long v11 = *(long long *)((char *)v7 - 24);
      *(void *)(v8 - 8) = *((void *)v7 - 1);
      *(_OWORD *)(v8 - 24) = v11;
      *((void *)v7 - 2) = 0;
      *((void *)v7 - 1) = 0;
      *((void *)v7 - 3) = 0;
      unint64_t v7 = (long long *)((char *)v7 - 72);
      v8 -= 72;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  long long v12 = a1[1];
  uint64_t v13 = a2[2];
  if (v12 != a3)
  {
    do
    {
      long long v14 = *a3;
      *(void *)(v13 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      *(void *)a3 = 0;
      long long v15 = *(long long *)((char *)a3 + 24);
      *(void *)(v13 + 40) = *((void *)a3 + 5);
      *(_OWORD *)(v13 + 24) = v15;
      *((void *)a3 + 4) = 0;
      *((void *)a3 + 5) = 0;
      *((void *)a3 + 3) = 0;
      long long v16 = a3[3];
      *(void *)(v13 + 64) = *((void *)a3 + 8);
      *(_OWORD *)(v13 + 48) = v16;
      *((void *)a3 + 7) = 0;
      *((void *)a3 + 8) = 0;
      *((void *)a3 + 6) = 0;
      v13 += 72;
      a3 = (long long *)((char *)a3 + 72);
    }
    while (a3 != v12);
    uint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v13;
  int v17 = *a1;
  *a1 = v6;
  a2[1] = v17;
  long long v18 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v18;
  uint64_t v19 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100427544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = (void **)(a4 - 72);
      if (*(char *)(a4 - 49) < 0) {
        operator delete(*v8);
      }
      uint64_t v9 = v7 - 72;
      long long v10 = *(_OWORD *)(v7 - 72);
      *(void *)(a4 - 56) = *(void *)(v7 - 56);
      *(_OWORD *)uint64_t v8 = v10;
      *(unsigned char *)(v7 - 49) = 0;
      *(unsigned char *)(v7 - 72) = 0;
      long long v11 = (void **)(a4 - 48);
      if (*(char *)(a4 - 25) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(_OWORD *)(v7 - 48);
      *(void *)(a4 - 32) = *(void *)(v7 - 32);
      *(_OWORD *)long long v11 = v12;
      *(unsigned char *)(v7 - 25) = 0;
      *(unsigned char *)(v7 - 48) = 0;
      uint64_t v13 = (void **)(a4 - 24);
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*v13);
      }
      long long v14 = *(_OWORD *)(v7 - 24);
      *(void *)(a4 - 8) = *(void *)(v7 - 8);
      *(_OWORD *)uint64_t v13 = v14;
      *(unsigned char *)(v7 - 1) = 0;
      *(unsigned char *)(v7 - 24) = 0;
      a4 -= 72;
      v7 -= 72;
    }
    while (v9 != a2);
  }
  return a3;
}

uint64_t sub_10042763C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x8D3DCB08D3DCB0) {
    unint64_t v9 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1001F9DC8(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = &v10[232 * v4];
  long long v16 = &v10[232 * v9];
  sub_10042775C(v14, a2);
  long long v15 = v14 + 232;
  sub_100427A14(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100427B9C((uint64_t)&v13);
  return v11;
}

void sub_100427748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100427B9C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10042775C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_10004FC84(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    sub_10004FC84(__dst + 144, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *((_OWORD *)__dst + 9) = v10;
  }
  if (*((char *)a2 + 191) < 0)
  {
    sub_10004FC84(__dst + 168, *((void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)(__dst + 168) = v11;
  }
  *((_OWORD *)__dst + 12) = a2[12];
  long long v12 = __dst + 208;
  if (*((char *)a2 + 231) < 0)
  {
    sub_10004FC84(v12, *((void **)a2 + 26), *((void *)a2 + 27));
  }
  else
  {
    long long v13 = a2[13];
    *((void *)__dst + 28) = *((void *)a2 + 28);
    *(_OWORD *)long long v12 = v13;
  }
  return __dst;
}

void sub_100427950(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100427A14(uint64_t *a1, void *a2)
{
  sub_100427A8C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_100427A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a7 - 112;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 232);
      *(void *)(v8 - 104) = *(void *)(a3 - 216);
      *(_OWORD *)(v8 - 120) = v9;
      *(void *)(a3 - 224) = 0;
      *(void *)(a3 - 216) = 0;
      *(void *)(a3 - 232) = 0;
      long long v10 = *(_OWORD *)(a3 - 208);
      *(void *)(v8 - 80) = *(void *)(a3 - 192);
      *(_OWORD *)(v8 - 96) = v10;
      *(void *)(a3 - 200) = 0;
      *(void *)(a3 - 192) = 0;
      *(void *)(a3 - 208) = 0;
      long long v11 = *(_OWORD *)(a3 - 184);
      *(void *)(v8 - 56) = *(void *)(a3 - 168);
      *(_OWORD *)(v8 - 72) = v11;
      *(void *)(a3 - 176) = 0;
      *(void *)(a3 - 168) = 0;
      *(void *)(a3 - 184) = 0;
      long long v12 = *(_OWORD *)(a3 - 160);
      *(void *)(v8 - 32) = *(void *)(a3 - 144);
      *(_OWORD *)(v8 - 48) = v12;
      *(void *)(a3 - 160) = 0;
      *(void *)(a3 - 152) = 0;
      *(void *)(a3 - 144) = 0;
      long long v13 = *(_OWORD *)(a3 - 136);
      *(void *)(v8 - 8) = *(void *)(a3 - 120);
      *(_OWORD *)(v8 - 24) = v13;
      *(void *)(a3 - 136) = 0;
      *(void *)(a3 - 128) = 0;
      *(void *)(a3 - 120) = 0;
      long long v14 = *(_OWORD *)(a3 - 112);
      *(void *)(v8 + 16) = *(void *)(a3 - 96);
      *(_OWORD *)uint64_t v8 = v14;
      *(void *)(a3 - 112) = 0;
      *(void *)(a3 - 104) = 0;
      *(void *)(a3 - 96) = 0;
      long long v15 = *(_OWORD *)(a3 - 88);
      *(void *)(v8 + 40) = *(void *)(a3 - 72);
      *(_OWORD *)(v8 + 24) = v15;
      *(void *)(a3 - 88) = 0;
      *(void *)(a3 - 80) = 0;
      *(void *)(a3 - 72) = 0;
      long long v16 = *(_OWORD *)(a3 - 64);
      *(void *)(v8 + 64) = *(void *)(a3 - 48);
      *(_OWORD *)(v8 + 48) = v16;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 - 40);
      __n128 result = *(__n128 *)(a3 - 24);
      *(void *)(v8 + 104) = *(void *)(a3 - 8);
      *(__n128 *)(v8 + 88) = result;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      v7 -= 232;
      v8 -= 232;
      a3 -= 232;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t sub_100427B9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 232;
    sub_100427BEC(i - 232);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100427BEC(uint64_t a1)
{
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100427CA0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100427D28(result, a4);
    __n128 result = (void *)sub_100427D80((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100427D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100426D90(&a9);
  _Unwind_Resume(a1);
}

char *sub_100427D28(void *a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    sub_10006A748();
  }
  __n128 result = (char *)sub_1001F9DC8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

uint64_t sub_100427D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10042775C((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100427DE0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 232;
    do
    {
      sub_100427BEC(v4 + v2);
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100427E04(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100427E5C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_100427E5C(uint64_t a1)
{
  sub_10010DDFC(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100427EAC(uint64_t *a1, void *a2)
{
  uint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 200;
    uint64_t v4 = (long long *)((char *)v4 - 200);
    sub_100427F40(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 sub_100427F40(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v5 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  long long v6 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v6;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(__n128 *)(a1 + 120) = result;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  if (*((unsigned char *)a2 + 192))
  {
    *(_OWORD *)(a1 + 144) = a2[9];
    __n128 result = (__n128)a2[10];
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *(__n128 *)(a1 + 160) = result;
    *((void *)a2 + 21) = 0;
    *((void *)a2 + 22) = 0;
    *((void *)a2 + 20) = 0;
    *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
    *(unsigned char *)(a1 + 192) = 1;
  }
  return result;
}

uint64_t sub_100428018(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 200;
    sub_10010DDFC(i - 200);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100428068(void *a1)
{
  if (a1)
  {
    sub_100428068(*a1);
    sub_100428068(a1[1]);
    sub_100427E5C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_1004280BC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100428188(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100428260);
  __cxa_rethrow();
}

void sub_1004281B0(_Unwind_Exception *a1)
{
}

void sub_1004281C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100428200(uint64_t a1)
{
}

uint64_t sub_10042821C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100428260(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100428290()
{
}

void *sub_1004282A4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1019CACA8;
  result[1] = v3;
  return result;
}

uint64_t sub_1004282EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CACA8;
  a2[1] = v2;
  return result;
}

void sub_100428318(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v2 = v6;
  long long v7 = *(_OWORD *)(a2 + 8);
  uint64_t v3 = v7;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v4 = *(void *)(a1 + 8);
  v8[0] = v4;
  v8[1] = 0uLL;
  sub_100427CA0((void *)v8 + 1, v2, v3, 0x34F72C234F72C235 * ((v3 - v2) >> 3));
  long long v5 = *(std::__shared_weak_count **)(v4 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10042847C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 56) = &a10;
  sub_100426D90((void ***)(v10 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_10042849C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1004284DC()
{
}

uint64_t *sub_1004284E8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v19 = a1;
  long long v20 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = (void **)(*v1 + 240);
  if (v3 != (void **)(v1 + 1))
  {
    long long v5 = (std::string *)v1[1];
    unint64_t v4 = (std::string *)v1[2];
    unint64_t v6 = 0x34F72C234F72C235 * (((char *)v4 - (char *)v5) >> 3);
    uint64_t v7 = *(void *)(v2 + 256);
    uint64_t v8 = *(void *)(v2 + 240);
    if (0x34F72C234F72C235 * ((v7 - v8) >> 3) < v6)
    {
      if (v8)
      {
        uint64_t v9 = *(void *)(v2 + 248);
        uint64_t v10 = *(void **)(v2 + 240);
        if (v9 != v8)
        {
          do
            uint64_t v9 = sub_100427BEC(v9 - 232);
          while (v9 != v8);
          uint64_t v10 = *v3;
        }
        *(void *)(v2 + 248) = v8;
        operator delete(v10);
        uint64_t v7 = 0;
        *uint64_t v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      if (v6 > 0x11A7B9611A7B961) {
        sub_10006A748();
      }
      unint64_t v11 = 0x34F72C234F72C235 * (v7 >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v6) {
        uint64_t v12 = 0x34F72C234F72C235 * (((char *)v4 - (char *)v5) >> 3);
      }
      if (v11 >= 0x8D3DCB08D3DCB0) {
        unint64_t v13 = 0x11A7B9611A7B961;
      }
      else {
        unint64_t v13 = v12;
      }
      sub_100427D28(v3, v13);
      uint64_t v14 = sub_100427D80(v2 + 256, (uint64_t)v5, (uint64_t)v4, *(void *)(v2 + 248));
      goto LABEL_17;
    }
    if (0x34F72C234F72C235 * ((*(void *)(v2 + 248) - v8) >> 3) < v6)
    {
      long long v15 = (std::string *)((char *)v5 + 8 * ((*(void *)(v2 + 248) - v8) >> 3));
      sub_100428770(v5, v15, *(std::string **)(v2 + 240));
      uint64_t v14 = sub_100427D80(v2 + 256, (uint64_t)v15, (uint64_t)v4, *(void *)(v2 + 248));
LABEL_17:
      *(void *)(v2 + 248) = v14;
      goto LABEL_22;
    }
    long long v16 = sub_100428770(v5, v4, *(std::string **)(v2 + 240));
    for (uint64_t i = *(void *)(v2 + 248); (std::string *)i != v16; uint64_t i = sub_100427BEC(i - 232))
      ;
    *(void *)(v2 + 248) = v16;
  }
LABEL_22:
  sub_100421550(v2);
  sub_100428710((uint64_t *)&v20);
  return sub_100046B58((uint64_t *)&v19);
}

void sub_1004286DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 248) = v11;
  sub_100428710(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100428710(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    sub_100426D90(&v2);
    operator delete();
  }
  return result;
}

std::string *sub_100428770(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    long long v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      std::string::operator=(this + 2, v5 + 2);
      std::string::operator=(this + 3, v5 + 3);
      std::string::operator=(this + 4, v5 + 4);
      std::string::operator=(this + 5, v5 + 5);
      std::string::operator=(this + 6, v5 + 6);
      std::string::operator=(this + 7, v5 + 7);
      *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[8].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)((char *)this + 208), (std::string *)((char *)v5 + 208));
      this = (std::string *)((char *)this + 232);
      long long v5 = (std::string *)((char *)v5 + 232);
    }
    while (v5 != a2);
  }
  return this;
}

void *sub_100428830(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1004288B8()
{
}

void *sub_1004288CC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1019CAD38;
  result[1] = v3;
  return result;
}

uint64_t sub_100428914(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CAD38;
  a2[1] = v2;
  return result;
}

void sub_100428940(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v2 = v6;
  long long v7 = *(_OWORD *)(a2 + 8);
  uint64_t v3 = v7;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v4 = *(void *)(a1 + 8);
  v8[0] = v4;
  v8[1] = 0uLL;
  sub_1003229A4((void *)v8 + 1, v2, v3, 0x8E38E38E38E38E39 * ((v3 - v2) >> 3));
  long long v5 = *(std::__shared_weak_count **)(v4 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100428AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 56) = &a10;
  sub_10030EC88((void ***)(v10 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_100428AC4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100428B04()
{
}

uint64_t *sub_100428B10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v25 = a1;
  uint64_t v26 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = (void **)(*(void *)v1 + 264);
  if (v3 != (void **)(v1 + 8))
  {
    long long v5 = *(std::string **)(v1 + 8);
    unint64_t v4 = *(std::string **)(v1 + 16);
    unint64_t v6 = 0x8E38E38E38E38E39 * (((char *)v4 - (char *)v5) >> 3);
    long long v7 = v2 + 35;
    uint64_t v8 = (std::string *)v2[33];
    if (0x8E38E38E38E38E39 * ((uint64_t)(v2[35] - (void)v8) >> 3) < v6)
    {
      sub_100428EB8(v3);
      if (v6 > 0x38E38E38E38E38ELL) {
        sub_10006A748();
      }
      unint64_t v9 = 0x1C71C71C71C71C72 * ((uint64_t)(*v7 - (void)*v3) >> 3);
      if (v9 <= v6) {
        unint64_t v9 = 0x8E38E38E38E38E39 * (((char *)v4 - (char *)v5) >> 3);
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(*v7 - (void)*v3) >> 3) >= 0x1C71C71C71C71C7) {
        unint64_t v10 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v10 = v9;
      }
      sub_10019E6A8(v3, v10);
      uint64_t v11 = sub_100322A2C((uint64_t)(v2 + 35), (uint64_t)v5, (uint64_t)v4, v2[34]);
      goto LABEL_12;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v2[34] - (void)v8) >> 3) < v6)
    {
      uint64_t v12 = (std::string *)((char *)v5 + 8 * ((uint64_t)(v2[34] - (void)v8) >> 3));
      sub_100428F20((int)buf, v5, v12, v8);
      uint64_t v11 = sub_100322A2C((uint64_t)(v2 + 35), (uint64_t)v12, (uint64_t)v4, v2[34]);
LABEL_12:
      v2[34] = v11;
      goto LABEL_17;
    }
    sub_100428F20((int)buf, v5, v4, v8);
    uint64_t v14 = v13;
    for (uint64_t i = v2[34]; i != v14; sub_10010C078(i))
      i -= 72;
    v2[34] = v14;
  }
LABEL_17:
  long long v16 = v2[5];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v2[34] - v2[33]) >> 3);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v28 = (void *)v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I load [%lu] deleting blocklist info from preferences.", buf, 0xCu);
  }
  long long v18 = (uint64_t *)v2[33];
  for (j = (uint64_t *)v2[34]; v18 != j; v18 += 9)
  {
    long long v20 = v2[5];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = v18 + 3;
      if (*((char *)v18 + 47) < 0) {
        uint64_t v21 = (void *)*v21;
      }
      long long v22 = v18 + 6;
      if (*((char *)v18 + 71) < 0) {
        long long v22 = (void *)*v22;
      }
      char v23 = v18;
      if (*((char *)v18 + 23) < 0) {
        char v23 = (uint64_t *)*v18;
      }
      *(_DWORD *)long long buf = 136315650;
      uint64_t v28 = v21;
      __int16 v29 = 2080;
      int v30 = v22;
      __int16 v31 = 2080;
      uint64_t v32 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I \tdelete record: { eid:%s, iccid:%s, imei:%s }", buf, 0x20u);
    }
  }
  sub_100421550((uint64_t)v2);
  sub_100428E58(&v26);
  return sub_100046B58((uint64_t *)&v25);
}

void sub_100428E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  *(void *)(v3 + 272) = v4;
  sub_100428E58((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100428E58(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    sub_10030EC88(&v2);
    operator delete();
  }
  return result;
}

void sub_100428EB8(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        sub_10010C078(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_100428F20(int a1, std::string *__str, std::string *a3, std::string *this)
{
  long long v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    this += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

void *sub_100428F9C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **sub_100429020(uint64_t **result, long long *a2, long long *a3)
{
  long long v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    long long v15 = result;
    long long v16 = v8;
    unint64_t v17 = v8;
    if (v8)
    {
      long long v16 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_1004291B4((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          unint64_t v10 = (uint64_t **)sub_1000EA518((uint64_t)v5, v18, v17 + 4);
          sub_100046C38(v5, v18[0], v10, v17);
          unint64_t v17 = v16;
          if (v16) {
            long long v16 = sub_1000EA590((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    __n128 result = (uint64_t **)sub_100429538((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_100429590(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1004291A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100429538((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004291B4(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)(a2 + 24);
  if (v4 != a2 + 24)
  {
    sub_10005D87C((uint64_t **)(v4 + 8), *(void **)(a2 + 32), (void *)(a2 + 40));
    sub_100429244((uint64_t **)(v4 + 32), *(void **)(a2 + 56), (void *)(a2 + 64));
    sub_10005D87C((uint64_t **)(v4 + 56), *(void **)(a2 + 80), (void *)(a2 + 88));
  }
  uint64_t v5 = *(void *)(a2 + 104);
  *(unsigned char *)(v4 + 88) = *(unsigned char *)(a2 + 112);
  *(void *)(v4 + 80) = v5;
  return a1;
}

uint64_t **sub_100429244(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    long long v15 = v8;
    long long v16 = v8;
    if (v8)
    {
      long long v15 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          sub_1004293B8((uint64_t)v17, (uint64_t)(v9 + 4));
          sub_1001A0A9C(v5, (uint64_t)v16);
          long long v16 = v15;
          if (v15) {
            long long v15 = sub_1000EA590((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          uint64_t v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v11);
      }
    }
    __n128 result = (uint64_t **)sub_100429440((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_100429498((uint64_t)v5, (uint64_t)(a2 + 4));
      BOOL v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1004293A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100429440((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004293B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)a2;
  if (v4 != a2 + 8) {
    sub_1001A0F10((uint64_t *)v4, *(long long **)(a2 + 8), *(long long **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 6);
  }
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *(std::__shared_weak_count **)(v4 + 32);
  *(void *)(v4 + 24) = v6;
  *(void *)(v4 + 32) = v5;
  if (v7) {
    sub_10004D2C8(v7);
  }
  *(_WORD *)(v4 + 40) = *(_WORD *)(a2 + 48);
  return a1;
}

uint64_t sub_100429440(uint64_t a1)
{
  sub_1001A297C(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1001A297C(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100429498(uint64_t a1, uint64_t a2)
{
  memset(v8, 0, sizeof(v8));
  sub_10040133C(a1, a2, v8);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v8[0] + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_100046C38((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  sub_1001BF34C((uint64_t)v8, 0);
  return v6;
}

uint64_t sub_100429538(uint64_t a1)
{
  sub_10030AAD0(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10030AAD0(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100429590(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  sub_100429620((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  uint64_t v3 = (uint64_t **)sub_1000EA518((uint64_t)a1, &v6, v7[0] + 4);
  sub_100046C38(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_10031AD24((uint64_t)v7, 0);
  return v4;
}

void sub_100429608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10031AD24((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100429620@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x98uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = sub_100429694(v6 + 4, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10042967C(_Unwind_Exception *a1)
{
  sub_10031AD24(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100429694(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  __dst[3] = *((void *)a2 + 3);
  sub_1001A0DB0(__dst + 4, (uint64_t)(a2 + 2));
  sub_1004011B4(__dst + 7, (uint64_t)a2 + 56);
  sub_1001A0DB0(__dst + 10, (uint64_t)(a2 + 5));
  uint64_t v5 = *((void *)a2 + 13);
  *((unsigned char *)__dst + 112) = *((unsigned char *)a2 + 112);
  __dst[13] = v5;
  return __dst;
}

void sub_100429730(_Unwind_Exception *a1)
{
  sub_1001A297C(v3, *(void **)(v1 + 64));
  sub_1000346F8(v2, *(void **)(v1 + 40));
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100429774(uint64_t a1)
{
  sub_100313534(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_100313534(*(void *)a1, v2);
  }
  return a1;
}

void *sub_1004297CC(void *a1)
{
  *a1 = off_1019CADC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100060644(a1 + 2);
  return a1;
}

void sub_100429820(void *a1)
{
  *a1 = off_1019CADC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100060644(a1 + 2);

  operator delete();
}

void *sub_100429894(void *a1)
{
  uint64_t v2 = operator new(0x40uLL);
  uint64_t v3 = a1[1];
  *uint64_t v2 = off_1019CADC8;
  v2[1] = v3;
  sub_1000DFC90((uint64_t)(v2 + 2), (uint64_t)(a1 + 2));
  uint64_t v4 = a1[7];
  v2[6] = a1[6];
  v2[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return v2;
}

void sub_100429904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100429918(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  *a2 = off_1019CADC8;
  a2[1] = v4;
  uint64_t result = sub_1000DFC90((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  uint64_t v6 = a1[7];
  a2[6] = a1[6];
  a2[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_100429980(uint64_t a1)
{
  return sub_100429AEC(a1 + 8);
}

void sub_100429988(void *a1)
{
  sub_100429AEC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_1004299C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = v4[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = v3 & 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Delete blacklist record result: %d", (uint8_t *)v7, 8u);
  }
  if ((v3 & 0x100) != 0) {
    sub_100426C84(v4, 4096, 8, v3 & 1, 1, SHIDWORD(v3));
  }
  return sub_1000607A8(a1 + 16, v3 & 1);
}

uint64_t sub_100429AA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100429AE0()
{
}

void *sub_100429AEC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_10004D2C8(v2);
  }

  return sub_100060644((void *)(a1 + 8));
}

uint64_t **sub_100429B2C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    long long v15 = v8;
    long long v16 = v8;
    if (v8)
    {
      long long v15 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v9 + 5));
          sub_1001A0A9C(v5, (uint64_t)v16);
          uint64_t v8 = v15;
          long long v16 = v15;
          if (v15) {
            long long v15 = sub_1000EA590((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_100429C9C((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_100429CF4((uint64_t)v5, (uint64_t)(a2 + 4));
      BOOL v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100429C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100429C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100429C9C(uint64_t a1)
{
  sub_1000886C0(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1000886C0(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *sub_100429CF4(uint64_t a1, uint64_t a2)
{
  memset(v7, 0, sizeof(v7));
  sub_10008D0B0(a1, a2, v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7[0] + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_100046C38((uint64_t **)a1, (uint64_t)v3, v5, v7[0]);
  return v7[0];
}

void sub_100429D84()
{
}

void *sub_100429D98()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1019CAE48;
  return result;
}

void sub_100429DD0(uint64_t a1, void *a2)
{
  *a2 = off_1019CAE48;
}

void sub_100429DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = *(void **)a3;
  int v5 = *(char *)(a3 + 23);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (v5 < 0)
  {
    operator delete(v4);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }

  operator delete(v3);
}

uint64_t sub_100429E60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100429EA0()
{
}

void *sub_100429EAC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100429F34()
{
}

void *sub_100429F48()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1019CAED8;
  return result;
}

void sub_100429F80(uint64_t a1, void *a2)
{
  *a2 = off_1019CAED8;
}

uint64_t sub_100429FAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100429FEC()
{
}

void *sub_100429FF8(void *a1)
{
  *a1 = off_1019CAF58;
  sub_10003B34C(a1 + 1);
  return a1;
}

void sub_10042A03C(void *a1)
{
  *a1 = off_1019CAF58;
  sub_10003B34C(a1 + 1);

  operator delete();
}

void *sub_10042A0A0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_1019CAF58;
  sub_1000F0058((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10042A0F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10042A108(uint64_t a1, void *a2)
{
  *a2 = off_1019CAF58;
  return sub_1000F0058((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_10042A134(uint64_t a1)
{
  return sub_10003B34C((void *)(a1 + 8));
}

void sub_10042A13C(void *a1)
{
  sub_10003B34C(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10042A178(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_10007B600();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10042A1C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042A208()
{
}

void sub_10042A214(std::string *a1, uint64_t a2)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v22, ", IMEI:", 7uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    long long v7 = (const std::string::value_type *)a2;
  }
  else {
    long long v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::string::append(&v23, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  BOOL v11 = std::string::append(&v24, ", EID:", 6uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  long long v15 = *(const std::string::value_type **)(a2 + 24);
  uint64_t v14 = a2 + 24;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    unint64_t v17 = (const std::string::value_type *)v14;
  }
  else {
    unint64_t v17 = v13;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(v14 + 8);
  }
  uint64_t v19 = std::string::append(&v25, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  uint64_t v21 = std::string::append(&v26, " }", 2uLL);
  *a1 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_10042A39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042A418(uint64_t a1)
{
  *(void *)a1 = off_1019CAFD8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10042A468(uint64_t a1)
{
  *(void *)a1 = off_1019CAFD8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_10042A4D8(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_1019CAFD8;
  v2[1] = v3;
  uint64_t v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_10004FC84(v4, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(void *)(a1 + 32);
  }
  return v2;
}

void sub_10042A550(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_10042A564(char *result, void *a2)
{
  uint64_t v2 = *((void *)result + 1);
  *a2 = off_1019CAFD8;
  a2[1] = v2;
  uint64_t v3 = a2 + 2;
  if (result[39] < 0) {
    return (char *)sub_10004FC84(v3, *((void **)result + 2), *((void *)result + 3));
  }
  long long v4 = *((_OWORD *)result + 1);
  a2[4] = *((void *)result + 4);
  *(_OWORD *)uint64_t v3 = v4;
  return result;
}

void sub_10042A5B4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void sub_10042A5C8(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void sub_10042A60C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if ((v3 & 1) == 0) {
      return;
    }
LABEL_10:
    if (!*(unsigned char *)(v4 + 232))
    {
      std::string::size_type v8 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I fLastKnownAssignedSimLabels is empty", buf, 2u);
      }
      return;
    }
    memset(buf, 0, sizeof(buf));
    if (*(char *)(a1 + 39) < 0)
    {
      sub_10004FC84(buf, *(void **)(a1 + 16), *(void *)(a1 + 24));
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)(a1 + 16);
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 32);
    }
    unint64_t v9 = sub_100046F68(v4 + 208, (void **)buf);
    if ((void **)(v4 + 216) != v9)
    {
      char v10 = *((unsigned char *)v9 + 159);
      if (v10 < 0)
      {
        if (!v9[18]) {
          goto LABEL_29;
        }
      }
      else if (!*((unsigned char *)v9 + 159))
      {
        goto LABEL_29;
      }
      BOOL v11 = (std::string *)(v9 + 17);
      long long v12 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 39) >= 0) {
          uint64_t v13 = a1 + 16;
        }
        else {
          uint64_t v13 = *(void *)(a1 + 16);
        }
        uint64_t v14 = v11;
        if (v10 < 0) {
          uint64_t v14 = (std::string *)v11->__r_.__value_.__r.__words[0];
        }
        int v15 = 136315394;
        uint64_t v16 = v13;
        __int16 v17 = 2080;
        std::string::size_type v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Add iccid (%s) and phone number (%s) to deny list", (uint8_t *)&v15, 0x16u);
      }
      int v15 = 4;
      sub_100422E24((void *)v4, (long long *)(a1 + 16), v11, &v15);
      sub_100421550(v4);
    }
LABEL_29:
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    return;
  }
  int v6 = "succeed";
  if ((v3 & 1) == 0) {
    int v6 = "fail";
  }
  *(_DWORD *)long long buf = 136315650;
  *(void *)&uint8_t buf[4] = v6;
  if ((v3 & 0x100) != 0) {
    long long v7 = "true";
  }
  else {
    long long v7 = "false";
  }
  *(_WORD *)&unsigned char buf[12] = 2080;
  *(void *)&buf[14] = v7;
  *(_WORD *)&unsigned char buf[22] = 1024;
  int v20 = HIDWORD(v3);
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I deleting denylist %s. modified: %s, with error code: %d", buf, 0x1Cu);
  if (v3) {
    goto LABEL_10;
  }
}

void sub_10042A878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042A8A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042A8E0()
{
}

void sub_10042A8F0()
{
}

void *sub_10042A904(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019CB058;
  result[1] = v3;
  return result;
}

uint64_t sub_10042A94C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CB058;
  a2[1] = v2;
  return result;
}

void sub_10042A978(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_10042AA70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042AAB0()
{
}

void sub_10042AABC(uint64_t **a1)
{
  int v6 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)v1 + 8)) {
      uint64_t v4 = "success";
    }
    else {
      uint64_t v4 = "failure";
    }
    long long v5 = "";
    if (!*((unsigned char *)v1 + 9)) {
      long long v5 = "out";
    }
    *(_DWORD *)long long buf = 136315394;
    std::string::size_type v8 = v4;
    __int16 v9 = 2080;
    char v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Delete transfer plan from cloud result: %s, with%s CK modification", buf, 0x16u);
  }
  if (*((unsigned char *)v1 + 9))
  {
    sub_100426C84((void *)v2, *(_DWORD *)(v2 + 496), 8, *((unsigned char *)v1 + 8), 0, 80000);
    *(_DWORD *)(v2 + 496) = 0;
  }
  operator delete();
}

void sub_10042ABF8()
{
}

void sub_10042AC28()
{
}

void *sub_10042AC3C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1019CB0D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10042AC84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CB0D8;
  a2[1] = v2;
  return result;
}

void sub_10042ACB0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_10042ADB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042ADF0()
{
}

void sub_10042ADFC(uint64_t **a1)
{
  std::string::size_type v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)v1 + 8)) {
      uint64_t v4 = "success";
    }
    else {
      uint64_t v4 = "failure";
    }
    long long v5 = "";
    int v6 = *((unsigned __int8 *)v1 + 9);
    char v10 = v4;
    int v7 = *((_DWORD *)v1 + 3);
    *(_DWORD *)long long buf = 136315650;
    if (!v6) {
      long long v5 = "out";
    }
    __int16 v11 = 2080;
    long long v12 = v5;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Saved and uploaded to cloud result: %s, with%s CK modification, with error code: %d", buf, 0x1Cu);
  }
  if (*((unsigned char *)v1 + 9))
  {
    sub_100426C84((void *)v2, *((_DWORD *)v1 + 4) | *(_DWORD *)(v2 + 496), *((_DWORD *)v1 + 5), *((unsigned char *)v1 + 8), 0, *((_DWORD *)v1 + 3));
    *(_DWORD *)(v2 + 496) = 0;
  }
  operator delete();
}

void sub_10042AF48()
{
}

void *sub_10042AF74(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10042AFFC()
{
}

void *sub_10042B010()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1019CB168;
  return result;
}

void sub_10042B048(uint64_t a1, void *a2)
{
  *a2 = off_1019CB168;
}

uint64_t sub_10042B074(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019CB1C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10042B0B4()
{
  return &off_1019CB1C8;
}

void *sub_10042B0C0(void *a1)
{
  *a1 = off_1019CB1E8;
  sub_10003B34C(a1 + 2);
  return a1;
}

void sub_10042B104(void *a1)
{
  *a1 = off_1019CB1E8;
  sub_10003B34C(a1 + 2);

  operator delete();
}

void *sub_10042B168(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_1019CB1E8;
  v2[1] = v3;
  sub_1000F0058((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_10042B1C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10042B1D4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019CB1E8;
  a2[1] = v2;
  return sub_1000F0058((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_10042B204(uint64_t a1)
{
  return sub_10003B34C((void *)(a1 + 16));
}

void sub_10042B20C(void *a1)
{
  sub_10003B34C(a1 + 2);

  operator delete(a1);
}

void sub_10042B248(uint64_t a1, long long *a2, long long *a3, unsigned char *a4)
{
  long long v248 = *a2;
  uint64_t v249 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v246 = *a3;
  uint64_t v247 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v5 = *(void **)(a1 + 8);
  if (*a4)
  {
    int v6 = v5[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      buf.var0 = 136315138;
      *(void *)&buf.var1 = asString();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#E upload blacklist failure: %s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
    }
    goto LABEL_465;
  }
  uint64_t v8 = v5[30];
  uint64_t v9 = v5[31];
  char v10 = v5 + 30;
  v252 = 0;
  v253 = 0;
  uint64_t v254 = 0;
  sub_100427CA0(&v252, v8, v9, 0x34F72C234F72C235 * ((v9 - v8) >> 3));
  uint64_t v231 = a1;
  uint64_t v243 = v5[30];
  uint64_t v244 = v5[31];
  v235 = v5;
  memset(v276, 0, 24);
  v242 = (std::string *)(v5 + 46);
  sub_100CD990C(v5 + 46, (uint64_t)v276);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__l.__size_;
  uint64_t v12 = *((void *)&v246 + 1);
  for (uint64_t i = v246; i != v12; i += 200)
  {
    if (sub_10010E128((uint64_t)v276, (void **)(i + 24)))
    {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      p_std::string::size_type size = &__dst.__r_.__value_.__l.__size_;
      int v15 = &__dst.__r_.__value_.__l.__size_;
      if (!__dst.__r_.__value_.__l.__size_) {
        goto LABEL_17;
      }
      p_std::string::size_type size = &__dst.__r_.__value_.__l.__size_;
      while (1)
      {
        while (1)
        {
          int v15 = (std::string::size_type *)size;
          uint64_t v16 = (void *)(size + 32);
          if ((sub_100046FE8((void *)(i + 72), (void **)(size + 32)) & 0x80) == 0) {
            break;
          }
          std::string::size_type size = *v15;
          p_std::string::size_type size = v15;
          if (!*v15) {
            goto LABEL_17;
          }
        }
        if ((sub_100046FE8(v16, (void **)(i + 72)) & 0x80) == 0) {
          break;
        }
        p_std::string::size_type size = v15 + 1;
        std::string::size_type size = v15[1];
        if (!size) {
          goto LABEL_17;
        }
      }
      if (!*p_size)
      {
LABEL_17:
        buf.var2.__r_.__value_.var0.var1.__size_ = 0;
        __int16 v17 = (char *)operator new(0x100uLL);
        std::string::size_type v18 = v17;
        *(void *)&buf.var0 = v17;
        buf.var2.__r_.__value_.var0.var1.__data_ = &__dst.__r_.__value_.__s.__data_[8];
        if (*(char *)(i + 95) < 0)
        {
          sub_10004FC84(v17 + 32, *(void **)(i + 72), *(void *)(i + 80));
        }
        else
        {
          long long v19 = *(_OWORD *)(i + 72);
          *((void *)v17 + 6) = *(void *)(i + 88);
          *((_OWORD *)v17 + 2) = v19;
        }
        sub_10010DB3C(v18 + 56, (long long *)i);
        buf.var2.__r_.__value_.var0.var0.__data_[8] = 1;
        *(void *)std::string::size_type v18 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = v15;
        *p_std::string::size_type size = (std::string::size_type)v18;
        if (*(void *)__dst.__r_.__value_.__l.__data_)
        {
          __dst.__r_.__value_.__r.__words[0] = *(void *)__dst.__r_.__value_.__l.__data_;
          std::string::size_type v18 = (char *)*p_size;
        }
        sub_100046C90((uint64_t *)__dst.__r_.__value_.__l.__size_, (uint64_t *)v18);
        ++__dst.__r_.__value_.__r.__words[2];
        *(void *)&buf.var0 = 0;
        sub_100427E04((uint64_t)&buf);
      }
    }
  }
  sub_10005CD2C((uint64_t)v276, *(char **)&v276[8]);
  *(_OWORD *)buf.var2.__r_.__value_.var0.var0.__data_ = 0uLL;
  *(void *)&buf.var0 = &buf.var2;
  uint64_t v20 = (uint64_t)v235;
  uint64_t v21 = v235[17];
  uint64_t v22 = v235[18];
  if (v21 != v22)
  {
    uint64_t v23 = v21 + 72;
    do
    {
      if (*(char *)(v23 + 23) < 0)
      {
        if (*(void *)(v23 + 8))
        {
LABEL_30:
          if (subscriber::isSimSettled()) {
            sub_100046BAC((uint64_t **)&buf, (void **)v23, v23);
          }
        }
      }
      else if (*(unsigned char *)(v23 + 23))
      {
        goto LABEL_30;
      }
      uint64_t v24 = v23 + 96;
      v23 += 168;
    }
    while (v24 != v22);
  }
  *(void *)&v276[16] = 0;
  *(void *)&v276[8] = 0;
  *(void *)v276 = &v276[8];
  uint64_t v25 = v235[20];
  uint64_t v26 = v235[21];
  while (v25 != v26)
  {
    if (*(unsigned char *)(v25 + 80))
    {
      uint64_t v27 = *(void *)(v25 + 56);
      uint64_t v28 = *(void *)(v25 + 64);
      while (1)
      {
        if (v27 == v28) {
          goto LABEL_44;
        }
        if (*(char *)(v27 + 39) < 0) {
          break;
        }
        if (*(unsigned char *)(v27 + 39)) {
          goto LABEL_42;
        }
LABEL_43:
        v27 += 216;
      }
      if (!*(void *)(v27 + 24)) {
        goto LABEL_43;
      }
LABEL_42:
      sub_100046BAC((uint64_t **)v276, (void **)(v27 + 16), v27 + 16);
      goto LABEL_43;
    }
LABEL_44:
    v25 += 88;
  }
  uint64_t v29 = v235[30];
  uint64_t v30 = v235[31];
  if (v29 == v30)
  {
    uint64_t v30 = v235[30];
  }
  else
  {
    __int16 v31 = v252;
    if (v252 != v253)
    {
      uint64_t v32 = (uint64_t **)(v235 + 58);
      do
      {
        if (!sub_1008A2A44(v29)) {
          goto LABEL_69;
        }
        if (sub_100426AA4(v20, v29 + 120)) {
          goto LABEL_50;
        }
        if (*(char *)(v29 + 191) < 0) {
          uint64_t v33 = *(void *)(v29 + 176);
        }
        else {
          uint64_t v33 = *(unsigned __int8 *)(v29 + 191);
        }
        uint64_t v20 = (uint64_t)v235;
        if (!v33)
        {
          BOOL v37 = v235[5];
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v281.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "invalid newly activated plan record. missing phone number and source info", (uint8_t *)&v281, 2u);
          }
LABEL_69:
          v29 += 232;
          __int16 v31 = (long long *)((char *)v31 + 232);
          goto LABEL_103;
        }
        int v34 = (void *)(v29 + 168);
        int v35 = (void **)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          do
          {
            if ((sub_100046FE8((void *)(v29 + 120), v35 + 4) & 0x80) == 0)
            {
              if ((sub_100046FE8(v35 + 4, (void **)(v29 + 120)) & 0x80) == 0)
              {
                int v43 = v235[5];
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  if (*(char *)(v29 + 191) < 0) {
                    int v34 = (void *)*v34;
                  }
                  LODWORD(v281.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v281.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I ignore blocklisted plan with phone number: %s", (uint8_t *)&v281, 0xCu);
                }
                uint64_t v20 = (uint64_t)v235;
                uint64_t v44 = sub_100427194((long long *)(v29 + 232), (long long *)v235[31], v29);
                for (uint64_t j = v235[31]; j != v44; uint64_t j = sub_100427BEC(j - 232))
                  ;
                v235[31] = v44;
                __int16 v46 = (long long *)sub_100427194((long long *)((char *)v31 + 232), v253, (uint64_t)v31);
                for (k = v253; k != v46; k = (long long *)sub_100427BEC((uint64_t)k - 232))
                  ;
LABEL_125:
                v253 = v46;
                goto LABEL_103;
              }
              ++v35;
            }
            int v35 = (void **)*v35;
          }
          while (v35);
        }
        if (sub_10010E128((uint64_t)&buf, (void **)(v29 + 120)))
        {
          BOOL v36 = (void **)v235[59];
          if (!v36) {
            goto LABEL_94;
          }
          while (1)
          {
            if ((sub_100046FE8((void *)(v29 + 120), v36 + 4) & 0x80) == 0)
            {
              if ((sub_100046FE8(v36 + 4, (void **)(v29 + 120)) & 0x80) == 0)
              {
                v281.__r_.__value_.__r.__words[0] = v29 + 120;
                for (uint64_t m = sub_10031E45C(v32, (void **)(v29 + 120), (uint64_t)&unk_10144E20E, (long long **)&v281)[8];
                      m;
                      uint64_t m = *(void *)m)
                {
                  int v49 = *(_DWORD *)(m + 28);
                  if (v49 <= 13)
                  {
                    if (v49 == 13)
                    {
                      v281.__r_.__value_.__r.__words[0] = v29 + 120;
                      uint64_t v55 = sub_10031E45C(v32, (void **)(v29 + 120), (uint64_t)&unk_10144E20E, (long long **)&v281);
                      LODWORD(v262.__r_.__value_.__l.__data_) = 13;
                      v281.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
                      if (*((_DWORD *)sub_10030B04C((uint64_t **)v55 + 7, (int *)&v262, (uint64_t)&unk_10144E20E, (unsigned int **)&v281)+ 8) != 2)
                      {
                        uint64_t v56 = v235[5];
                        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                        {
                          if (*(char *)(v29 + 191) < 0) {
                            int v34 = (void *)*v34;
                          }
                          LODWORD(v281.__r_.__value_.__l.__data_) = 136315138;
                          *(std::string::size_type *)((char *)v281.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I ignore entitlement forbidden plan : %s", (uint8_t *)&v281, 0xCu);
                        }
                        uint64_t v20 = (uint64_t)v235;
                        uint64_t v57 = sub_100427194((long long *)(v29 + 232), (long long *)v235[31], v29);
                        for (uint64_t n = v235[31]; n != v57; uint64_t n = sub_100427BEC(n - 232))
                          ;
                        v235[31] = v57;
                        __int16 v46 = (long long *)sub_100427194((long long *)((char *)v31 + 232), v253, (uint64_t)v31);
                        for (iuint64_t i = v253; ii != v46; iuint64_t i = (long long *)sub_100427BEC((uint64_t)ii - 232))
                          ;
                        goto LABEL_125;
                      }
LABEL_50:
                      v29 += 232;
                      __int16 v31 = (long long *)((char *)v31 + 232);
LABEL_102:
                      uint64_t v20 = (uint64_t)v235;
                      goto LABEL_103;
                    }
                    m += 8;
                  }
                }
LABEL_94:
                __int16 v50 = v235[5];
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  if (*(char *)(v29 + 191) < 0) {
                    int v34 = (void *)*v34;
                  }
                  LODWORD(v281.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v281.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I ignore plan without entitlement result. phone number: %s", (uint8_t *)&v281, 0xCu);
                }
                int v51 = (long long *)sub_100427194((long long *)((char *)v31 + 232), v253, (uint64_t)v31);
                for (juint64_t j = v253; jj != v51; juint64_t j = (long long *)sub_100427BEC((uint64_t)jj - 232))
                  ;
                v29 += 232;
                v253 = v51;
                goto LABEL_102;
              }
              ++v36;
            }
            BOOL v36 = (void **)*v36;
            if (!v36) {
              goto LABEL_94;
            }
          }
        }
        std::string v38 = (long long *)sub_100427194((long long *)((char *)v31 + 232), v253, (uint64_t)v31);
        for (kk = v253; kk != v38; kk = (long long *)sub_100427BEC((uint64_t)kk - 232))
          ;
        v253 = v38;
        uint64_t v40 = sub_10010E128((uint64_t)v276, (void **)(v29 + 120));
        long long v41 = v235[5];
        BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
        if (v40)
        {
          if (v42)
          {
            if (*(char *)(v29 + 191) < 0) {
              int v34 = (void *)*v34;
            }
            LODWORD(v281.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v281.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I ignore disabled plan with phone number: %s", (uint8_t *)&v281, 0xCu);
          }
          v29 += 232;
          goto LABEL_102;
        }
        if (v42)
        {
          if (*(char *)(v29 + 191) < 0) {
            int v34 = (void *)*v34;
          }
          LODWORD(v281.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v281.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I ignore dangling plan with phone number: %s", (uint8_t *)&v281, 0xCu);
        }
        uint64_t v20 = (uint64_t)v235;
        uint64_t v53 = sub_100427194((long long *)(v29 + 232), (long long *)v235[31], v29);
        for (muint64_t m = v235[31]; mm != v53; muint64_t m = sub_100427BEC(mm - 232))
          ;
        v235[31] = v53;
LABEL_103:
        if (v29 == *(void *)(v20 + 248)) {
          goto LABEL_127;
        }
      }
      while (v31 != v253);
      uint64_t v29 = *(void *)(v20 + 248);
LABEL_127:
      uint64_t v30 = v29;
      uint64_t v29 = *v10;
    }
  }
  if (v244 - v243 != v30 - v29)
  {
    for (; v29 != v30; v29 += 232)
      sub_1008A2AA0((uint64_t *)v29, (os_log_t *)(v20 + 40));
    (*(void (**)(void, uint64_t *))(**(void **)(v20 + 104) + 104))(*(void *)(v20 + 104), v10);
  }
  sub_10005CD2C((uint64_t)v276, *(char **)&v276[8]);
  sub_10005CD2C((uint64_t)&buf, buf.var2.__r_.__value_.var0.var1.__data_);
  sub_100428068((void *)__dst.__r_.__value_.__l.__size_);
  uint64_t v60 = v252;
  for (nn = v253; v60 != nn; uint64_t v20 = (uint64_t)v235)
  {
    if (sub_100426AA4(v20, (uint64_t)v60 + 120))
    {
      uint64_t v63 = *((void *)&v248 + 1);
      uint64_t v62 = v248;
      if ((void)v248 != *((void *)&v248 + 1))
      {
        __int16 v64 = (void **)v60 + 3;
        do
        {
          if (*(unsigned char *)(v62 + 240))
          {
            uint64_t v66 = *(void *)(v62 + 200);
            uint64_t v65 = *(void *)(v62 + 208);
            while (v66 != v65)
            {
              long long v274 = 0u;
              long long v275 = 0u;
              *(_OWORD *)v272 = 0u;
              long long v273 = 0u;
              long long v270 = 0u;
              long long v271 = 0u;
              *(_OWORD *)v268 = 0u;
              *(_OWORD *)v269 = 0u;
              *(_OWORD *)v266 = 0u;
              *(_OWORD *)v267 = 0u;
              *(_OWORD *)v265 = 0u;
              memset(&buf, 0, sizeof(buf));
              VinylInfo::findProfile();
              if (BYTE8(v275))
              {
                std::string::operator=((std::string *)v60, (const std::string *)&v274);
                ctu::hex((uint64_t *)v276, (ctu *)(v66 + 16), (const void *)0x10, v67);
                if (*((char *)v60 + 47) < 0) {
                  operator delete(*v64);
                }
                *(_OWORD *)__int16 v64 = *(_OWORD *)v276;
                *((void *)v60 + 5) = *(void *)&v276[16];
                if (BYTE8(v275)) {
                  sub_1000C584C((uint64_t)&buf);
                }
              }
              v66 += 88;
            }
          }
          v62 += 400;
        }
        while (v62 != v63);
      }
    }
    uint64_t v60 = (long long *)((char *)v60 + 232);
  }
  long long v250 = 0uLL;
  v251[0] = 0;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v68 = *(uint64_t **)(v20 + 376);
  if (!v68)
  {
LABEL_152:
    *(_DWORD *)v276 = 1;
    p_CSIPhoneNumber buf = (CSIPhoneNumber *)v276;
    goto LABEL_154;
  }
  while (1)
  {
    int v69 = *((_DWORD *)v68 + 8);
    if (v69 <= 2) {
      break;
    }
LABEL_151:
    uint64_t v68 = (uint64_t *)*v68;
    if (!v68) {
      goto LABEL_152;
    }
  }
  if (v69 != 2)
  {
    ++v68;
    goto LABEL_151;
  }
  buf.var0 = 2;
  p_CSIPhoneNumber buf = &buf;
LABEL_154:
  uint64_t v71 = sub_1000FD774((uint64_t)v242, &p_buf->var0);
  if (*((char *)v71 + 23) < 0)
  {
    sub_10004FC84(&__dst, (void *)*v71, v71[1]);
  }
  else
  {
    long long v72 = *(_OWORD *)v71;
    __dst.__r_.__value_.__r.__words[2] = v71[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v72;
  }
  __int16 v73 = v253;
  *(_OWORD *)&v281.__r_.__value_.__r.__words[1] = 0uLL;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281.__r_.__value_.__l.__size_;
  if (v252 != v253)
  {
    uint64_t v74 = (char *)v252 + 168;
    do
    {
      if (sub_1008A2A44((uint64_t)(v74 - 168)))
      {
        if (v74[23] < 0)
        {
          if (*((void *)v74 + 1))
          {
LABEL_164:
            *(void *)v276 = 0;
            int v75 = (uint64_t **)sub_100046ED4((uint64_t)&v281, v276, (void **)v74);
            if (!*v75)
            {
              buf.var2.__r_.__value_.var0.var1.__size_ = 0;
              uint64_t v76 = (uint64_t *)operator new(0x40uLL);
              buf.var2.__r_.__value_.var0.var1.__data_ = &v281.__r_.__value_.__s.__data_[8];
              buf.var2.__r_.__value_.var0.var0.__data_[8] = 0;
              BOOL v77 = v76 + 4;
              if (v74[23] < 0)
              {
                sub_10004FC84(v77, *(void **)v74, *((void *)v74 + 1));
              }
              else
              {
                long long v78 = *(_OWORD *)v74;
                v76[6] = *((void *)v74 + 2);
                *(_OWORD *)BOOL v77 = v78;
              }
              v76[7] = *((void *)v74 + 4);
              uint64_t v79 = *(void *)v276;
              *uint64_t v76 = 0;
              v76[1] = 0;
              v76[2] = v79;
              atomic_ullong *v75 = v76;
              if (*(void *)v281.__r_.__value_.__l.__data_)
              {
                v281.__r_.__value_.__r.__words[0] = *(void *)v281.__r_.__value_.__l.__data_;
                uint64_t v76 = *v75;
              }
              sub_100046C90((uint64_t *)v281.__r_.__value_.__l.__size_, v76);
              ++v281.__r_.__value_.__r.__words[2];
            }
            uint64_t v20 = (uint64_t)v235;
            uint64_t v80 = v235[5];
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v81 = v74;
              if (v74[23] < 0) {
                uint64_t v81 = *(void **)v74;
              }
              buf.var0 = 136315138;
              *(void *)&buf.var1 = v81;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#I Blocklist phone number: %s", (uint8_t *)&buf, 0xCu);
            }
          }
        }
        else if (v74[23])
        {
          goto LABEL_164;
        }
      }
      uint64_t v82 = (long long *)(v74 + 64);
      v74 += 232;
    }
    while (v82 != v73);
  }
  uint64_t v83 = *(NSObject **)(v20 + 40);
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    buf.var0 = 134217984;
    *(void *)&buf.var1 = *((void *)&v281.__r_.__value_.__l + 2);
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I Found %ld new phone numbers", (uint8_t *)&buf, 0xCu);
  }
  long long v250 = 0uLL;
  v251[0] = 0;
  memset(&v262, 0, sizeof(v262));
  std::string::size_type v84 = *(const std::string **)(v20 + 344);
  if (v84) {
    std::string::operator=(&v262, v84 + 7);
  }
  v232 = (void *)*((void *)&v248 + 1);
  long long v85 = (void *)v248;
  if ((void)v248 != *((void *)&v248 + 1))
  {
    v237 = (std::string *)(v20 + 440);
    while (1)
    {
      sub_10098FD3C(v85, (uint64_t)&buf);
      uint64_t v86 = *(void *)(v20 + 344);
      if (buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0) {
        data = (char *)buf.var2.__r_.__value_.var0.var0.__data_[15];
      }
      else {
        data = buf.var2.__r_.__value_.var0.var1.__data_;
      }
      uint64_t v88 = (char *)*(unsigned __int8 *)(v86 + 167);
      int v89 = (char)v88;
      if ((char)v88 < 0) {
        uint64_t v88 = *(char **)(v86 + 152);
      }
      v240 = v85;
      if (data != v88) {
        break;
      }
      std::string::size_type v92 = *(unsigned __int8 **)(v86 + 144);
      long long v90 = (unsigned __int8 *)(v86 + 144);
      long long v91 = v92;
      if (v89 >= 0) {
        long long v93 = v90;
      }
      else {
        long long v93 = v91;
      }
      if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0)
      {
        long long v98 = *(void **)&buf.var0;
        int v99 = memcmp(*(const void **)&buf.var0, v93, (size_t)buf.var2.__r_.__value_.var0.var1.__data_);
        long long v100 = v98;
        long long v85 = v240;
        operator delete(v100);
        if (v99) {
          goto LABEL_204;
        }
      }
      else if (buf.var2.__r_.__value_.var0.var0.__data_[15])
      {
        uint64_t v94 = 0;
        do
        {
          int v95 = *((unsigned __int8 *)&buf.var0 + v94);
          int v96 = v93[v94];
          BOOL v97 = v95 != v96 || buf.var2.__r_.__value_.var0.var0.__data_[15] - 1 == v94++;
        }
        while (!v97);
        if (v95 != v96) {
          goto LABEL_204;
        }
      }
      *((void *)&v255 + 1) = 0;
      uint64_t v256 = 0;
      *(void *)&long long v255 = (char *)&v255 + 8;
      long long v105 = (std::string *)v85[46];
      long long v106 = (std::string *)v85[47];
      std::string __str = v106;
      while (v105 != v106)
      {
        long long v107 = (void **)v105[2].__r_.__value_.__l.__size_;
        v238 = (ctu *)v105;
        long long v108 = &v105[2].__r_.__value_.__r.__words[2];
        if (v107 != (void **)&v105[2].__r_.__value_.__r.__words[2])
        {
          do
          {
            long long v109 = (std::string *)v281.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v281.__r_.__value_.__l.__data_ != &v281.__r_.__value_.__r.__words[1])
            {
              while (1)
              {
                *(void *)&long long v270 = 0;
                *(_OWORD *)v268 = 0u;
                *(_OWORD *)v269 = 0u;
                *(_OWORD *)v266 = 0u;
                *(_OWORD *)v267 = 0u;
                *(_OWORD *)v265 = 0u;
                memset(&buf, 0, sizeof(buf));
                CSIPhoneNumber::CSIPhoneNumber();
                uint64_t v280 = 0;
                long long v278 = 0u;
                long long v279 = 0u;
                *(_OWORD *)long long __p = 0u;
                memset(v276, 0, sizeof(v276));
                CSIPhoneNumber::CSIPhoneNumber();
                char isOriginalNumberSame = CSIPhoneNumber::isOriginalNumberSame(&buf, (const CSIPhoneNumber *)v276);
                if (SHIBYTE(v278) < 0) {
                  operator delete(__p[1]);
                }
                if (SHIBYTE(__p[0]) < 0) {
                  operator delete(*(void **)&v276[64]);
                }
                if ((v276[55] & 0x80000000) != 0) {
                  operator delete(*(void **)&v276[32]);
                }
                if ((v276[31] & 0x80000000) != 0) {
                  operator delete(*(void **)&v276[8]);
                }
                if (SHIBYTE(v268[1]) < 0) {
                  operator delete(v267[1]);
                }
                if (SHIBYTE(v267[0]) < 0) {
                  operator delete(v266[0]);
                }
                if (SHIBYTE(v265[0]) < 0) {
                  operator delete(*(void **)&buf.var2.__r_.var0);
                }
                if (*((char *)&buf.var2.__r_.__value_.var0.var1 + 23) < 0) {
                  operator delete(buf.var2.__r_.__value_.var0.var1.__data_);
                }
                if (isOriginalNumberSame) {
                  break;
                }
                long long v111 = (std::string *)v109->__r_.__value_.__l.__size_;
                if (v111)
                {
                  do
                  {
                    long long v112 = v111;
                    long long v111 = (std::string *)v111->__r_.__value_.__r.__words[0];
                  }
                  while (v111);
                }
                else
                {
                  do
                  {
                    long long v112 = (std::string *)v109->__r_.__value_.__r.__words[2];
                    BOOL v97 = v112->__r_.__value_.__r.__words[0] == (void)v109;
                    long long v109 = v112;
                  }
                  while (!v97);
                }
                long long v109 = v112;
                if (v112 == (std::string *)&v281.__r_.__value_.__r.__words[1]) {
                  goto LABEL_242;
                }
              }
              if (v109 != (std::string *)&v281.__r_.__value_.__r.__words[1])
              {
                uint64_t v113 = v109[2].__r_.__value_.__l.__size_;
                *(void *)&buf.var0 = v107 + 4;
                sub_10042E5B0((uint64_t **)&v255, v107 + 4, (uint64_t)&unk_10144E20E, (long long **)&buf)[7] = v113;
              }
            }
LABEL_242:
            long long v114 = (void **)v107[1];
            if (v114)
            {
              do
              {
                long long v115 = v114;
                long long v114 = (void **)*v114;
              }
              while (v114);
            }
            else
            {
              do
              {
                long long v115 = (void **)v107[2];
                BOOL v97 = *v115 == v107;
                long long v107 = v115;
              }
              while (!v97);
            }
            long long v107 = v115;
          }
          while (v115 != (void **)v108);
        }
        long long v105 = (std::string *)((char *)v238 + 80);
        long long v106 = __str;
      }
      if (*((unsigned char *)v240 + 240))
      {
        uint64_t v116 = v240[25];
        for (uint64_t i1 = v240[26]; v116 != i1; v116 += 88)
        {
          if (!*(unsigned char *)(v116 + 80)) {
            continue;
          }
          uint64_t v118 = *(void *)(v116 + 56);
          uint64_t v117 = *(void *)(v116 + 64);
          if (v118 == v117) {
            continue;
          }
          v239 = (ctu *)(v116 + 16);
          uint64_t v234 = v116;
          do
          {
            uint64_t v119 = (_OWORD *)v255;
            if ((long long *)v255 == (long long *)((char *)&v255 + 8)) {
              goto LABEL_334;
            }
            do
            {
              uint64_t v120 = *(unsigned __int8 *)(v118 + 39);
              size_t v121 = *(void *)(v118 + 24);
              if ((v120 & 0x80u) == 0) {
                uint64_t v122 = *(unsigned __int8 *)(v118 + 39);
              }
              else {
                uint64_t v122 = *(void *)(v118 + 24);
              }
              uint64_t v123 = *((unsigned __int8 *)v119 + 55);
              int v124 = (char)v123;
              if ((v123 & 0x80u) != 0) {
                uint64_t v123 = *((void *)v119 + 5);
              }
              if (v122 == v123)
              {
                if (v124 >= 0) {
                  uint32_t v125 = (unsigned __int8 *)(v119 + 2);
                }
                else {
                  uint32_t v125 = (unsigned __int8 *)*((void *)v119 + 4);
                }
                if ((v120 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)(v118 + 16), v125, v121)) {
                    goto LABEL_327;
                  }
LABEL_271:
                  *(void *)&long long v274 = 0;
                  *(_OWORD *)v272 = 0u;
                  long long v273 = 0u;
                  long long v270 = 0u;
                  long long v271 = 0u;
                  *(_OWORD *)v268 = 0u;
                  *(_OWORD *)v269 = 0u;
                  *(_OWORD *)v266 = 0u;
                  *(_OWORD *)v267 = 0u;
                  *(_OWORD *)v265 = 0u;
                  memset(&buf, 0, sizeof(buf));
                  if (*((unsigned char *)v240 + 56)) {
                    std::string::operator=((std::string *)(&buf.var2.__r_.__value_.var0.var1 + 1), (const std::string *)(v240 + 8));
                  }
                  ctu::hex((uint64_t *)v276, v239, (const void *)0x10, v121);
                  if (SHIBYTE(v266[0]) < 0) {
                    operator delete(v265[0]);
                  }
                  *(_OWORD *)v265 = *(_OWORD *)v276;
                  v266[0] = *(void **)&v276[16];
                  std::string::operator=((std::string *)&v266[1], (const std::string *)(v118 + 16));
                  std::string::operator=((std::string *)v268, &__dst);
                  std::string::operator=((std::string *)&v269[1], v237);
                  *(_DWORD *)v276 = 1;
                  *(void *)&v276[8] = *((void *)v119 + 7);
                  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
                    sub_10004FC84(&v276[16], v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
                  }
                  else {
                    *(std::string *)&v276[16] = v262;
                  }
                  v276[40] = 0;
                  long long v271 = *(_OWORD *)v276;
                  if ((_BYTE)v274)
                  {
                    if (SBYTE7(v273) < 0)
                    {
                      operator delete(v272[0]);
                      char v127 = v276[40];
                    }
                    else
                    {
                      char v127 = 0;
                    }
                    *(_OWORD *)v272 = *(_OWORD *)&v276[16];
                    *(void *)&long long v273 = *(void *)&v276[32];
                    BYTE8(v273) = v127;
                  }
                  else
                  {
                    *(_OWORD *)v272 = *(_OWORD *)&v276[16];
                    *(void *)&long long v273 = *(void *)&v276[32];
                    BYTE8(v273) = 0;
                    LOBYTE(v274) = 1;
                  }
                  std::string::size_type v128 = *(NSObject **)(v20 + 40);
                  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v129 = &buf.var2.__r_.__value_.var0.var1 + 1;
                    if (buf.var2.var0 < 0) {
                      uint64_t v129 = (__long *)*((void *)&buf.var2.__r_.__value_.var0.var1 + 2);
                    }
                    unint64_t v130 = v265;
                    if (SHIBYTE(v266[0]) < 0) {
                      unint64_t v130 = (void **)v265[0];
                    }
                    unint64_t v131 = &v266[1];
                    if (SHIBYTE(v267[1]) < 0) {
                      unint64_t v131 = (void **)v266[1];
                    }
                    uint64_t v132 = v268;
                    if (SHIBYTE(v269[0]) < 0) {
                      uint64_t v132 = (void **)v268[0];
                    }
                    CFTypeID v133 = &v269[1];
                    if (v270 < 0) {
                      CFTypeID v133 = (void **)v269[1];
                    }
                    uint64_t v134 = *((void *)v119 + 7);
                    *(_DWORD *)v276 = 136316418;
                    *(void *)&v276[4] = v129;
                    *(_WORD *)&v276[12] = 2080;
                    *(void *)&v276[14] = v130;
                    *(_WORD *)&v276[22] = 2080;
                    *(void *)&v276[24] = v131;
                    *(_WORD *)&v276[32] = 2080;
                    *(void *)&v276[34] = v132;
                    *(_WORD *)&v276[42] = 2080;
                    *(void *)&v276[44] = v133;
                    *(_WORD *)&v276[52] = 2048;
                    *(void *)&v276[54] = v134;
                    _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "#I Add blocklist plan [IMEI: [%s], EID: [%s], ICCID: [%s], UploaderIMEI: [%s], UploaderEID: [%s], out-of-band, createdAt:%lf ]", v276, 0x3Eu);
                  }
                  if (*((void *)&v250 + 1) >= v251[0])
                  {
                    unint64_t v136 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v250 + 1) - v250) >> 3) + 1;
                    if (v136 > 0x147AE147AE147AELL) {
                      sub_10006A748();
                    }
                    if (0x1EB851EB851EB852 * ((uint64_t)(v251[0] - v250) >> 3) > v136) {
                      unint64_t v136 = 0x1EB851EB851EB852 * ((uint64_t)(v251[0] - v250) >> 3);
                    }
                    if (0x8F5C28F5C28F5C29 * ((uint64_t)(v251[0] - v250) >> 3) >= 0xA3D70A3D70A3D7) {
                      unint64_t v137 = 0x147AE147AE147AELL;
                    }
                    else {
                      unint64_t v137 = v136;
                    }
                    *(void *)&v276[32] = v251;
                    if (v137) {
                      char v138 = (char *)sub_10030FA44((uint64_t)v251, v137);
                    }
                    else {
                      char v138 = 0;
                    }
                    *(void *)v276 = v138;
                    *(void *)&v276[8] = &v138[8 * ((uint64_t)(*((void *)&v250 + 1) - v250) >> 3)];
                    *(void *)&v276[16] = *(void *)&v276[8];
                    *(void *)&v276[24] = &v138[200 * v137];
                    sub_10010DB3C(*(char **)&v276[8], (long long *)&buf.var0);
                    uint64_t v139 = *(void *)&v276[8];
                    uint64_t v135 = *(void *)&v276[16] + 200;
                    *(void *)&v276[16] += 200;
                    uint64_t v140 = (long long *)*((void *)&v250 + 1);
                    if (*((void *)&v250 + 1) == (void)v250)
                    {
                      int64x2_t v141 = vdupq_n_s64(*((unint64_t *)&v250 + 1));
                    }
                    else
                    {
                      do
                      {
                        v139 -= 200;
                        uint64_t v140 = (long long *)((char *)v140 - 200);
                        sub_100427F40(v139, v140);
                      }
                      while (v140 != (long long *)v250);
                      int64x2_t v141 = (int64x2_t)v250;
                      uint64_t v135 = *(void *)&v276[16];
                    }
                    *(void *)&long long v250 = v139;
                    *((void *)&v250 + 1) = v135;
                    *(int64x2_t *)&v276[8] = v141;
                    uint64_t v142 = v251[0];
                    v251[0] = *(void *)&v276[24];
                    *(void *)&v276[24] = v142;
                    *(void *)v276 = v141.i64[0];
                    sub_100428018((uint64_t)v276);
                    uint64_t v20 = (uint64_t)v235;
                  }
                  else
                  {
                    sub_10010DB3C(*((char **)&v250 + 1), (long long *)&buf.var0);
                    uint64_t v135 = *((void *)&v250 + 1) + 200;
                  }
                  *((void *)&v250 + 1) = v135;
                  if ((_BYTE)v274 && SBYTE7(v273) < 0) {
                    operator delete(v272[0]);
                  }
                  if (SHIBYTE(v270) < 0) {
                    operator delete(v269[1]);
                  }
                  if (SHIBYTE(v269[0]) < 0) {
                    operator delete(v268[0]);
                  }
                  if (SHIBYTE(v267[1]) < 0) {
                    operator delete(v266[1]);
                  }
                  if (SHIBYTE(v266[0]) < 0) {
                    operator delete(v265[0]);
                  }
                  if (SHIBYTE(buf.var2.var0) < 0) {
                    operator delete(*((void **)&buf.var2.__r_.__value_.var0.var1 + 2));
                  }
                  if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
                    operator delete(*(void **)&buf.var0);
                  }
                  goto LABEL_327;
                }
                if (!*(unsigned char *)(v118 + 39)) {
                  goto LABEL_271;
                }
                uint64_t v126 = 0;
                while (*(unsigned __int8 *)(v118 + v126 + 16) == v125[v126])
                {
                  if (v120 == ++v126) {
                    goto LABEL_271;
                  }
                }
              }
LABEL_327:
              uint64_t v143 = (void *)*((void *)v119 + 1);
              if (v143)
              {
                do
                {
                  uint64_t v144 = v143;
                  uint64_t v143 = (void *)*v143;
                }
                while (v143);
              }
              else
              {
                do
                {
                  uint64_t v144 = (_OWORD *)*((void *)v119 + 2);
                  BOOL v97 = *(void *)v144 == (void)v119;
                  uint64_t v119 = v144;
                }
                while (!v97);
              }
              uint64_t v119 = v144;
            }
            while (v144 != (long long *)((char *)&v255 + 8));
            uint64_t v116 = v234;
            uint64_t v117 = *(void *)(v234 + 64);
LABEL_334:
            v118 += 216;
          }
          while (v118 != v117);
        }
      }
      sub_10005CD2C((uint64_t)&v255, *((char **)&v255 + 1));
LABEL_337:
      long long v85 = v240 + 50;
      if (v240 + 50 == v232) {
        goto LABEL_338;
      }
    }
    if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
      operator delete(*(void **)&buf.var0);
    }
LABEL_204:
    long long v101 = *(NSObject **)(v20 + 40);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v102 = *(void *)(v20 + 344);
      long long v103 = (void *)(v102 + 144);
      if (*(char *)(v102 + 167) < 0) {
        long long v103 = (void *)*v103;
      }
      sub_10098FD3C(v240, (uint64_t)&buf);
      if (buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0) {
        long long v104 = &buf;
      }
      else {
        long long v104 = *(CSIPhoneNumber **)&buf.var0;
      }
      *(_DWORD *)v276 = 136446466;
      *(void *)&v276[4] = v103;
      *(_WORD *)&v276[12] = 2082;
      *(void *)&v276[14] = v104;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#I ignore non %{public}s record. model:%{public}s", v276, 0x16u);
      if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
        operator delete(*(void **)&buf.var0);
      }
    }
    goto LABEL_337;
  }
LABEL_338:
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  sub_10005CD2C((uint64_t)&v281, (char *)v281.__r_.__value_.__l.__size_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  memset(&buf, 0, 24);
  sub_100322898(&buf, v250, *((uint64_t *)&v250 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v250 + 1) - v250) >> 3));
  memset(&buf.var2.__r_.__value_.var0.var1 + 1, 0, 24);
  sub_1003229A4((void *)&buf.var2.__r_.__value_.var0.var1 + 2, *(void *)(v20 + 264), *(void *)(v20 + 272), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v20 + 272) - *(void *)(v20 + 264)) >> 3));
  sub_10034B2A0((void **)(v20 + 288));
  *(_OWORD *)(v20 + 288) = *(_OWORD *)&buf.var0;
  *(void *)(v20 + 304) = buf.var2.__r_.__value_.var0.var1.__size_;
  memset(&buf, 0, 24);
  sub_100428EB8((void **)(v20 + 312));
  v241 = (long long **)(v20 + 288);
  *(_OWORD *)(v20 + 312) = *((_OWORD *)&buf.var2.__r_.__value_.var0.var1 + 1);
  *(void *)(v20 + 328) = buf.var2.var0;
  memset(&buf.var2.__r_.__value_.var0.var1 + 1, 0, 24);
  *(void *)v276 = &buf.var2.__r_.__value_.var0.var1 + 1;
  sub_10030EC88((void ***)v276);
  *(void *)v276 = &buf;
  sub_10010DF1C((void ***)v276);
  memset(&__dst, 0, sizeof(__dst));
  memset(&v281, 0, sizeof(v281));
  uint64_t v145 = *(const std::string **)(v20 + 344);
  if (v145) {
    std::string::operator=(&v281, v145 + 7);
  }
  v146 = v252;
  v147 = v253;
  if (v252 != v253)
  {
    long long v148 = (std::string *)(&buf.var2.__r_.__value_.var0.var1 + 1);
    do
    {
      if (!sub_1008A2A44((uint64_t)v146))
      {
        *(void *)&long long v274 = 0;
        *(_OWORD *)v272 = 0u;
        long long v273 = 0u;
        long long v270 = 0u;
        long long v271 = 0u;
        *(_OWORD *)v268 = 0u;
        *(_OWORD *)v269 = 0u;
        *(_OWORD *)v266 = 0u;
        *(_OWORD *)v267 = 0u;
        *(_OWORD *)v265 = 0u;
        memset(&buf, 0, sizeof(buf));
        std::string::operator=(v148, (const std::string *)v146);
        std::string::operator=((std::string *)v265, (const std::string *)v146 + 1);
        std::string::operator=((std::string *)&v266[1], (const std::string *)v146 + 2);
        std::string::operator=((std::string *)v268, (const std::string *)v146 + 3);
        std::string::operator=((std::string *)&v269[1], (const std::string *)v146 + 4);
        int v149 = *((_DWORD *)v146 + 48);
        if ((v149 - 1) >= 4) {
          int v149 = 0;
        }
        *(_DWORD *)v276 = v149;
        *(void *)&v276[8] = *((void *)v146 + 25);
        if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&v276[16], v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)&v276[16] = v281;
        }
        v276[40] = 0;
        long long v271 = *(_OWORD *)v276;
        if ((_BYTE)v274)
        {
          if (SBYTE7(v273) < 0)
          {
            operator delete(v272[0]);
            char v150 = v276[40];
          }
          else
          {
            char v150 = 0;
          }
          *(_OWORD *)v272 = *(_OWORD *)&v276[16];
          *(void *)&long long v273 = *(void *)&v276[32];
          BYTE8(v273) = v150;
        }
        else
        {
          *(_OWORD *)v272 = *(_OWORD *)&v276[16];
          *(void *)&long long v273 = *(void *)&v276[32];
          BYTE8(v273) = 0;
          LOBYTE(v274) = 1;
        }
        std::string::size_type v151 = __dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_ >= __dst.__r_.__value_.__r.__words[2])
        {
          unint64_t v153 = 0x8F5C28F5C28F5C29
               * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v154 = v153 + 1;
          if (v153 + 1 > 0x147AE147AE147AELL) {
            sub_10006A748();
          }
          if (0x1EB851EB851EB852
             * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 3) > v154)
            unint64_t v154 = 0x1EB851EB851EB852
                 * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 3);
          if (0x8F5C28F5C28F5C29
             * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 3) >= 0xA3D70A3D70A3D7)
            unint64_t v155 = 0x147AE147AE147AELL;
          else {
            unint64_t v155 = v154;
          }
          *(void *)&v276[32] = (char *)&__dst.__r_.__value_.__l + 16;
          if (v155) {
            uint64_t v156 = (char *)sub_10030FA44((uint64_t)&__dst.__r_.__value_.__r.__words[2], v155);
          }
          else {
            uint64_t v156 = 0;
          }
          char v157 = v148;
          *(void *)v276 = v156;
          *(void *)&v276[8] = &v156[200 * v153];
          *(void *)&v276[16] = *(void *)&v276[8];
          *(void *)&v276[24] = &v156[200 * v155];
          sub_10010DB3C(*(char **)&v276[8], (long long *)&buf.var0);
          uint64_t v158 = *(void *)&v276[8];
          std::string::size_type v152 = *(void *)&v276[16] + 200;
          *(void *)&v276[16] += 200;
          int v159 = (long long *)__dst.__r_.__value_.__l.__size_;
          std::string::size_type v160 = __dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ == __dst.__r_.__value_.__r.__words[0])
          {
            int64x2_t v161 = vdupq_n_s64(__dst.__r_.__value_.__l.__size_);
          }
          else
          {
            do
            {
              v158 -= 200;
              int v159 = (long long *)((char *)v159 - 200);
              sub_100427F40(v158, v159);
            }
            while (v159 != (long long *)v160);
            int64x2_t v161 = *(int64x2_t *)&__dst.__r_.__value_.__l.__data_;
            std::string::size_type v152 = *(void *)&v276[16];
          }
          __dst.__r_.__value_.__r.__words[0] = v158;
          __dst.__r_.__value_.__l.__size_ = v152;
          *(int64x2_t *)&v276[8] = v161;
          std::string::size_type v162 = __dst.__r_.__value_.__r.__words[2];
          __dst.__r_.__value_.__r.__words[2] = *(void *)&v276[24];
          *(void *)&v276[24] = v162;
          *(void *)v276 = v161.i64[0];
          sub_100428018((uint64_t)v276);
          long long v148 = v157;
        }
        else
        {
          sub_10010DB3C((char *)__dst.__r_.__value_.__l.__size_, (long long *)&buf.var0);
          std::string::size_type v152 = v151 + 200;
        }
        __dst.__r_.__value_.__l.__size_ = v152;
        if ((_BYTE)v274 && SBYTE7(v273) < 0) {
          operator delete(v272[0]);
        }
        if (SHIBYTE(v270) < 0) {
          operator delete(v269[1]);
        }
        if (SHIBYTE(v269[0]) < 0) {
          operator delete(v268[0]);
        }
        if (SHIBYTE(v267[1]) < 0) {
          operator delete(v266[1]);
        }
        if (SHIBYTE(v266[0]) < 0) {
          operator delete(v265[0]);
        }
        if (SHIBYTE(buf.var2.var0) < 0) {
          operator delete(*((void **)&buf.var2.__r_.__value_.var0.var1 + 2));
        }
        if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
          operator delete(*(void **)&buf.var0);
        }
      }
      v146 = (long long *)((char *)v146 + 232);
    }
    while (v146 != v147);
  }
  v163 = (long long *)__dst.__r_.__value_.__r.__words[0];
  v164 = v235;
  if ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >= 1)
  {
    uint64_t v165 = (uint64_t)(v235 + 38);
    int64_t v166 = (int64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) / 200;
    uint64_t v168 = v235[36];
    unint64_t v167 = v235[37];
    uint64_t v169 = (uint64_t)(v167 - v168) / 200;
    int v170 = (long long *)(v168 + 200 * v169);
    uint64_t v171 = v235[38];
    if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)(v171 - v167) >> 3)) < v166)
    {
      unint64_t v172 = v169 + v166;
      if ((unint64_t)(v169 + v166) > 0x147AE147AE147AELL) {
        sub_10006A748();
      }
      unint64_t v173 = 0x8F5C28F5C28F5C29 * ((v171 - v168) >> 3);
      if (2 * v173 > v172) {
        unint64_t v172 = 2 * v173;
      }
      if (v173 >= 0xA3D70A3D70A3D7) {
        unint64_t v174 = 0x147AE147AE147AELL;
      }
      else {
        unint64_t v174 = v172;
      }
      *(void *)&buf.var2.__r_.var0 = v235 + 38;
      if (v174) {
        v175 = (char *)sub_10030FA44(v165, v174);
      }
      else {
        v175 = 0;
      }
      char v213 = &v175[200 * v169];
      *(void *)&buf.var0 = v175;
      buf.var2.__r_.__value_.var0.var1.__data_ = v213;
      buf.var2.__r_.__value_.var0.var1.__size_ = (unint64_t)v213;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = &v175[200 * v174];
      uint64_t v214 = 200 * v166;
      uint64_t v215 = (uint64_t)&v213[200 * v166];
      do
      {
        sub_10010DB3C(v213, v163);
        v213 += 200;
        v163 = (long long *)((char *)v163 + 200);
        v214 -= 200;
      }
      while (v214);
      uint64_t v216 = buf.var2.__r_.__value_.var0.var1.__data_;
      char v217 = *v241;
      if (*v241 != v170)
      {
        v218 = (long long *)(v168 + 200 * v169);
        do
        {
          v216 -= 200;
          v218 = (long long *)((char *)v218 - 200);
          sub_100427F40((uint64_t)v216, v218);
        }
        while (v218 != v217);
      }
      uint64_t v219 = (long long *)v235[37];
      if (v219 != v170)
      {
        do
        {
          sub_100427F40(v215, v170);
          int v170 = (long long *)((char *)v170 + 200);
          v215 += 200;
        }
        while (v170 != v219);
        int v170 = (long long *)v235[37];
      }
      uint64_t v220 = (char *)v235[36];
      v235[36] = v216;
      v235[37] = v215;
      uint64_t v221 = v235[38];
      v235[38] = *((void *)&buf.var2.__r_.__value_.var0.var1 + 2);
      buf.var2.__r_.__value_.var0.var1.__size_ = (unint64_t)v170;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v221;
      *(void *)&buf.var0 = v220;
      buf.var2.__r_.__value_.var0.var1.__data_ = v220;
      sub_100428018((uint64_t)&buf);
      goto LABEL_443;
    }
    if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)(v167 - (void)v170) >> 3)) >= v166)
    {
      v245 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + 200 * v166);
      uint64_t v177 = v235[37];
      goto LABEL_404;
    }
    uint64_t v176 = __dst.__r_.__value_.__r.__words[0] + 8 * ((uint64_t)(v167 - (void)v170) >> 3);
    uint64_t v177 = sub_100322920(v165, v176, __dst.__r_.__value_.__l.__size_, v235[37]);
    v235[37] = v177;
    v164 = v235;
    if ((uint64_t)(v167 - (void)v170) >= 1)
    {
      v245 = (std::string *)v176;
LABEL_404:
      v178 = (char *)v170 + 200 * v166;
      uint64_t v179 = (long long *)(v177 - 200 * v166);
      uint64_t v180 = v177;
      if ((unint64_t)v179 < v167)
      {
        uint64_t v180 = v177;
        do
        {
          sub_100427F40(v180, v179);
          uint64_t v179 = (long long *)((char *)v179 + 200);
          v180 += 200;
        }
        while ((unint64_t)v179 < v167);
      }
      v235[37] = v180;
      if ((char *)v177 != v178)
      {
        uint64_t v181 = 0;
        uint64_t v182 = v168 + 8 * ((v177 - (uint64_t)v178) >> 3) + 200 * v169;
        uint64_t v183 = -8 * ((v177 - (uint64_t)v178) >> 3);
        do
        {
          uint64_t v184 = v177 + v181;
          uint64_t v185 = (void **)(v177 + v181 - 200);
          if (*(char *)(v177 + v181 - 177) < 0) {
            operator delete(*v185);
          }
          uint64_t v186 = v182 + v181;
          v187 = (long long *)(v182 + v181 - 200);
          long long v188 = *v187;
          *(void *)(v177 + v181 - 184) = *(void *)(v182 + v181 - 184);
          *(_OWORD *)uint64_t v185 = v188;
          *(unsigned char *)(v182 + v181 - 177) = 0;
          *(unsigned char *)v187 = 0;
          uint64_t v189 = v184 - 176;
          if (*(char *)(v184 - 153) < 0) {
            operator delete(*(void **)v189);
          }
          uint64_t v190 = v182 + v181;
          long long v191 = *(_OWORD *)(v186 - 176);
          *(void *)(v189 + 16) = *(void *)(v186 - 160);
          *(_OWORD *)uint64_t v189 = v191;
          *(unsigned char *)(v182 + v181 - 153) = 0;
          *(unsigned char *)(v186 - 176) = 0;
          uint64_t v192 = v177 + v181;
          long long v193 = (void **)(v177 + v181 - 152);
          if (*(char *)(v177 + v181 - 129) < 0) {
            operator delete(*v193);
          }
          long long v194 = *(_OWORD *)(v190 - 152);
          *(void *)(v177 + v181 - 136) = *(void *)(v190 - 136);
          *(_OWORD *)long long v193 = v194;
          *(unsigned char *)(v190 - 129) = 0;
          *(unsigned char *)(v190 - 152) = 0;
          v195 = (void **)(v192 - 128);
          if (*(char *)(v192 - 105) < 0) {
            operator delete(*v195);
          }
          std::string v196 = (long long *)(v190 - 128);
          uint64_t v197 = v182 + v181;
          long long v198 = *v196;
          *(void *)(v192 - 112) = *((void *)v196 + 2);
          *(_OWORD *)v195 = v198;
          *(unsigned char *)(v182 + v181 - 105) = 0;
          *(unsigned char *)std::string v196 = 0;
          uint64_t v199 = v177 + v181;
          long long v200 = (void **)(v177 + v181 - 104);
          if (*(char *)(v177 + v181 - 81) < 0) {
            operator delete(*v200);
          }
          long long v201 = *(_OWORD *)(v197 - 104);
          *(void *)(v177 + v181 - 88) = *(void *)(v197 - 88);
          *(_OWORD *)long long v200 = v201;
          *(unsigned char *)(v197 - 81) = 0;
          *(unsigned char *)(v197 - 104) = 0;
          v202 = (void **)(v199 - 80);
          if (*(char *)(v199 - 57) < 0) {
            operator delete(*v202);
          }
          long long v203 = *(_OWORD *)(v197 - 80);
          *(void *)(v199 - 64) = *(void *)(v197 - 64);
          *(_OWORD *)v202 = v203;
          *(unsigned char *)(v182 + v181 - 57) = 0;
          *(unsigned char *)(v197 - 80) = 0;
          uint64_t v204 = v177 + v181;
          long long v205 = (_OWORD *)(v177 + v181 - 56);
          long long v206 = (_OWORD *)(v182 + v181 - 56);
          if (*(unsigned __int8 *)(v177 + v181 - 8) == *(unsigned __int8 *)(v182 + v181 - 8))
          {
            if (*(unsigned char *)(v177 + v181 - 8))
            {
              *long long v205 = *v206;
              long long v207 = (void **)(v177 + v181 - 40);
              if (*(char *)(v177 + v181 - 17) < 0) {
                operator delete(*v207);
              }
              uint64_t v208 = v182 + v181;
              long long v209 = *(_OWORD *)(v182 + v181 - 40);
              *(void *)(v177 + v181 - 24) = *(void *)(v182 + v181 - 24);
              *(_OWORD *)long long v207 = v209;
              *(unsigned char *)(v208 - 17) = 0;
              *(unsigned char *)(v208 - 40) = 0;
              *(unsigned char *)(v177 + v181 - 16) = *(unsigned char *)(v182 + v181 - 16);
            }
          }
          else if (*(unsigned char *)(v177 + v181 - 8))
          {
            if (*(char *)(v177 + v181 - 17) < 0) {
              operator delete(*(void **)(v177 + v181 - 40));
            }
            *(unsigned char *)(v204 - 8) = 0;
          }
          else
          {
            *long long v205 = *v206;
            uint64_t v210 = v177 + v181;
            uint64_t v211 = v182 + v181;
            long long v212 = *(_OWORD *)(v182 + v181 - 40);
            *(void *)(v210 - 24) = *(void *)(v182 + v181 - 24);
            *(_OWORD *)(v210 - 40) = v212;
            *(void *)(v211 - 32) = 0;
            *(void *)(v211 - 24) = 0;
            *(void *)(v211 - 40) = 0;
            *(unsigned char *)(v210 - 16) = *(unsigned char *)(v182 + v181 - 16);
            *(unsigned char *)(v204 - 8) = 1;
          }
          v181 -= 200;
        }
        while (v183 != v181);
      }
      sub_10034B300((int)&buf, (std::string *)v163, v245, (std::string *)v170);
      v164 = v235;
    }
  }
LABEL_443:
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v281.__r_.__value_.__l.__data_);
  }
  *(void *)&buf.var0 = &__dst;
  sub_10010DF1C((void ***)&buf);
  int v222 = *((_DWORD *)v164 + 125);
  *(void *)v276 = v164;
  long long v223 = (std::__shared_weak_count *)v164[2];
  if (!v223 || (uint64_t v224 = v164[1], (v225 = std::__shared_weak_count::lock(v223)) == 0)) {
    sub_100088B9C();
  }
  *(void *)&v276[8] = v224;
  *(void *)&v276[16] = v225;
  atomic_fetch_add_explicit(&v225->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v225);
  sub_1000F0058((uint64_t)&v276[24], v231 + 16);
  memset(&v276[56], 0, 24);
  sub_100427CA0(&v276[56], (uint64_t)v252, (uint64_t)v253, 0x34F72C234F72C235 * (((char *)v253 - (char *)v252) >> 3));
  __p[1] = 0;
  __p[0] = 0;
  *(void *)&long long v278 = 0;
  sub_1003229A4(__p, v164[33], v164[34], 0x8E38E38E38E38E39 * ((uint64_t)(v164[34] - v164[33]) >> 3));
  v263 = 0;
  long long v226 = (char *)operator new(0x70uLL);
  *(void *)long long v226 = off_1019CB268;
  *(_OWORD *)(v226 + 8) = *(_OWORD *)v276;
  *((void *)v226 + 3) = *(void *)&v276[16];
  *(void *)&v276[8] = 0;
  *(void *)&v276[16] = 0;
  sub_1000DA470((uint64_t)(v226 + 32), (uint64_t)&v276[24]);
  *((_OWORD *)v226 + 4) = *(_OWORD *)&v276[56];
  *((void *)v226 + 10) = *(void *)&v276[72];
  memset(&v276[56], 0, 24);
  *(_OWORD *)(v226 + 88) = *(_OWORD *)__p;
  *((void *)v226 + 13) = v278;
  __p[1] = 0;
  *(void *)&long long v278 = 0;
  __p[0] = 0;
  v263 = v226;
  if (v164[37] == v164[36] && v164[40] == v164[39])
  {
    v230 = v164[5];
    if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.var0) = 0;
      _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_DEFAULT, "#I Nothing to update blacklist", (uint8_t *)&buf, 2u);
    }
    sub_100426B48((uint64_t)&v262, 0x1388000000000);
  }
  else
  {
    long long v255 = 0uLL;
    *(void *)&buf.var0 = "CellularPlanUploadTriggersModel";
    sub_1002BFAE4((char **)&buf, (dispatch_object_t *)v164 + 3, &v255);
    (**(void (***)(CSIPhoneNumber *__return_ptr))v164[6])(&buf);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v259, *(Registry **)&buf.var0);
    ctu::RestModule::connect();
    if (v260) {
      sub_10004D2C8(v260);
    }
    if (buf.var2.__r_.__value_.var0.var1.__data_) {
      sub_10004D2C8((std::__shared_weak_count *)buf.var2.__r_.__value_.var0.var1.__data_);
    }
    uint64_t v227 = v164[10];
    uint64_t v228 = v255;
    memset(&__dst, 0, sizeof(__dst));
    sub_100322898(&__dst, v164[36], v164[37], 0x8F5C28F5C28F5C29 * ((uint64_t)(v164[37] - v164[36]) >> 3));
    memset(v258, 0, 24);
    sub_1003229A4(v258, v164[39], v164[40], 0x8E38E38E38E38E39 * ((uint64_t)(v164[40] - v164[39]) >> 3));
    *(void *)&buf.var0 = v164;
    *(_OWORD *)buf.var2.__r_.__value_.var0.var0.__data_ = v255;
    if (*((void *)&v255 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v255 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    sub_10042E708((uint64_t)(&buf.var2.__r_.__value_.var0.var1 + 1), (uint64_t)&v262);
    v265[1] = 0;
    v266[0] = 0;
    v266[1] = 0;
    sub_100322898(&v265[1], v235[36], v235[37], 0x8F5C28F5C28F5C29 * ((uint64_t)(v235[37] - v235[36]) >> 3));
    v267[1] = 0;
    v267[0] = 0;
    v268[0] = 0;
    sub_1003229A4(v267, v235[39], v235[40], 0x8E38E38E38E38E39 * ((uint64_t)(v235[40] - v235[39]) >> 3));
    LODWORD(v268[1]) = v222;
    v282 = 0;
    v229 = (char *)operator new(0x78uLL);
    *(void *)v229 = off_1019CB2F8;
    *(_OWORD *)(v229 + 8) = *(_OWORD *)&buf.var0;
    *((void *)v229 + 3) = buf.var2.__r_.__value_.var0.var1.__size_;
    *(_OWORD *)buf.var2.__r_.__value_.var0.var0.__data_ = 0uLL;
    sub_10042E708((uint64_t)(v229 + 32), (uint64_t)(&buf.var2.__r_.__value_.var0.var1 + 1));
    *((void *)v229 + 8) = 0;
    *((void *)v229 + 9) = 0;
    *((void *)v229 + 10) = 0;
    sub_100322898((void *)v229 + 8, (uint64_t)v265[1], (uint64_t)v266[0], 0x8F5C28F5C28F5C29 * (((char *)v266[0] - (char *)v265[1]) >> 3));
    *((void *)v229 + 11) = 0;
    *((void *)v229 + 12) = 0;
    *((void *)v229 + 13) = 0;
    sub_1003229A4((void *)v229 + 11, (uint64_t)v267[0], (uint64_t)v267[1], 0x8E38E38E38E38E39 * (((char *)v267[1] - (char *)v267[0]) >> 3));
    *((_DWORD *)v229 + 28) = v268[1];
    v282 = v229;
    (*(void (**)(uint64_t, uint64_t, std::string *, std::string *))(*(void *)v227 + 64))(v227, v228, &__dst, &v281);
    sub_100322EB8(&v281);
    p_dst = (std::string *)v267;
    sub_10030EC88((void ***)&p_dst);
    p_dst = (std::string *)&v265[1];
    sub_10010DF1C((void ***)&p_dst);
    sub_100322EB8((void *)&buf.var2.__r_.__value_.var0.var1 + 2);
    if (buf.var2.__r_.__value_.var0.var1.__size_) {
      sub_10004D2C8((std::__shared_weak_count *)buf.var2.__r_.__value_.var0.var1.__size_);
    }
    p_dst = (std::string *)v258;
    sub_10030EC88((void ***)&p_dst);
    p_dst = &__dst;
    sub_10010DF1C((void ***)&p_dst);
    if (*((void *)&v255 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v255 + 1));
    }
  }
  sub_100322EB8(&v262);
  *(void *)&buf.var0 = __p;
  sub_10030EC88((void ***)&buf);
  *(void *)&buf.var0 = &v276[56];
  sub_100426D90((void ***)&buf);
  sub_10003B34C(&v276[24]);
  if (*(void *)&v276[16]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v276[16]);
  }
  *(void *)&buf.var0 = &v250;
  sub_10010DF1C((void ***)&buf);
  *(void *)&buf.var0 = &v252;
  sub_100426D90((void ***)&buf);
LABEL_465:
  *(void *)&buf.var0 = &v246;
  sub_10010DF1C((void ***)&buf);
  *(void *)&buf.var0 = &v248;
  sub_1000C5238((void ***)&buf);
}

void sub_10042D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  sub_10005CD2C((uint64_t)&STACK[0x2A0], (char *)STACK[0x2A8]);
  sub_10005CD2C((uint64_t)&a65, (char *)a66);
  sub_100428068((void *)a52);
  a51 = &a45;
  sub_100426D90((void ***)&a51);
  a41 = (uint64_t)&a33;
  sub_10010DF1C((void ***)&a41);
  a41 = (uint64_t)&a37;
  sub_1000C5238((void ***)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_10042DB38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042DB78()
{
}

uint64_t sub_10042DB84(uint64_t a1)
{
  *(void *)a1 = off_1019CB268;
  uint64_t v4 = (void **)(a1 + 88);
  sub_10030EC88(&v4);
  uint64_t v4 = (void **)(a1 + 64);
  sub_100426D90(&v4);
  sub_10003B34C((void *)(a1 + 32));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10042DC00(uint64_t a1)
{
  *(void *)a1 = off_1019CB268;
  uint64_t v3 = (void **)(a1 + 88);
  sub_10030EC88(&v3);
  uint64_t v3 = (void **)(a1 + 64);
  sub_100426D90(&v3);
  sub_10003B34C((void *)(a1 + 32));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete();
}

void *sub_10042DC90(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x70uLL);
  *uint64_t v2 = off_1019CB268;
  sub_10042E3C8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10042DCE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10042DCF8(uint64_t a1, void *a2)
{
  *a2 = off_1019CB268;
  return sub_10042E3C8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10042DD24(uint64_t a1)
{
}

void sub_10042DD2C(void *a1)
{
  sub_10042E4D0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10042DD68(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *a2;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[7];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  int v6 = (std::__shared_weak_count *)v2[3];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      if (v2[2])
      {
        if (v3)
        {
          __int16 v55 = v3;
          uint64_t v56 = v7;
          uint64_t v9 = *(long long **)(v4 + 240);
          uint64_t v54 = v4 + 240;
          if (v9 == *(long long **)(v4 + 248)) {
            goto LABEL_66;
          }
          uint64_t v59 = v2;
          do
          {
            uint64_t v10 = v4;
            uint64_t v12 = v2[8];
            uint64_t v11 = v2[9];
            uint64_t v13 = (uint64_t)v9;
            sub_10042775C((char *)&v72, v9);
            if (v12 == v11)
            {
LABEL_59:
              sub_100427BEC((uint64_t)&v72);
              uint64_t v9 = (long long *)(v13 + 232);
              uint64_t v4 = v10;
              uint64_t v36 = *(void *)(v10 + 248);
              goto LABEL_60;
            }
            uint64_t v14 = v77;
            size_t v15 = v76;
            __s1 = v75;
            if ((v77 & 0x80u) == 0) {
              size_t v16 = v77;
            }
            else {
              size_t v16 = v76;
            }
            uint64_t v17 = v80;
            uint64_t v60 = v78;
            size_t v61 = v79;
            if ((v80 & 0x80u) == 0) {
              size_t v18 = v80;
            }
            else {
              size_t v18 = v79;
            }
            uint64_t v19 = v74;
            size_t v20 = v73;
            uint64_t v57 = v72;
            size_t v58 = v73;
            if ((v74 & 0x80u) == 0) {
              size_t v20 = v74;
            }
            size_t v62 = v20;
            while (1)
            {
              uint64_t v21 = *(unsigned __int8 *)(v12 + 47);
              int v22 = (char)v21;
              if ((v21 & 0x80u) != 0) {
                uint64_t v21 = *(void *)(v12 + 32);
              }
              if (v16 != v21) {
                goto LABEL_58;
              }
              uint64_t v23 = v22 >= 0 ? (unsigned __int8 *)(v12 + 24) : *(unsigned __int8 **)(v12 + 24);
              if ((v14 & 0x80) != 0)
              {
                if (memcmp(__s1, v23, v15)) {
                  goto LABEL_58;
                }
              }
              else if (v14)
              {
                uint64_t v24 = &v75;
                uint64_t v25 = v14;
                while (*(unsigned __int8 *)v24 == *v23)
                {
                  uint64_t v24 = (void **)((char *)v24 + 1);
                  ++v23;
                  if (!--v25) {
                    goto LABEL_32;
                  }
                }
                goto LABEL_58;
              }
LABEL_32:
              uint64_t v26 = *(unsigned __int8 *)(v12 + 71);
              int v27 = (char)v26;
              if ((v26 & 0x80u) != 0) {
                uint64_t v26 = *(void *)(v12 + 56);
              }
              if (v18 != v26) {
                goto LABEL_58;
              }
              uint64_t v28 = v27 >= 0 ? (unsigned __int8 *)(v12 + 48) : *(unsigned __int8 **)(v12 + 48);
              if ((v17 & 0x80) != 0)
              {
                if (memcmp(v60, v28, v61)) {
                  goto LABEL_58;
                }
              }
              else if (v17)
              {
                uint64_t v29 = &v78;
                uint64_t v30 = v17;
                while (*(unsigned __int8 *)v29 == *v28)
                {
                  uint64_t v29 = (const void **)((char *)v29 + 1);
                  ++v28;
                  if (!--v30) {
                    goto LABEL_45;
                  }
                }
                goto LABEL_58;
              }
LABEL_45:
              uint64_t v31 = *(unsigned __int8 *)(v12 + 23);
              int v32 = (char)v31;
              if ((v31 & 0x80u) != 0) {
                uint64_t v31 = *(void *)(v12 + 8);
              }
              if (v62 != v31) {
                goto LABEL_58;
              }
              uint64_t v33 = v32 >= 0 ? (unsigned __int8 *)v12 : *(unsigned __int8 **)v12;
              if ((v19 & 0x80) != 0) {
                break;
              }
              if (!v19) {
                goto LABEL_62;
              }
              int v34 = &v72;
              uint64_t v35 = v19;
              while (*(unsigned __int8 *)v34 == *v33)
              {
                int v34 = (const void **)((char *)v34 + 1);
                ++v33;
                if (!--v35) {
                  goto LABEL_62;
                }
              }
LABEL_58:
              v12 += 232;
              if (v12 == v11) {
                goto LABEL_59;
              }
            }
            if (memcmp(v57, v33, v58)) {
              goto LABEL_58;
            }
LABEL_62:
            sub_100427BEC((uint64_t)&v72);
            uint64_t v9 = (long long *)v13;
            uint64_t v4 = v10;
            uint64_t v36 = sub_100427194((long long *)(v13 + 232), *(long long **)(v10 + 248), v13);
            for (uint64_t i = *(void *)(v10 + 248); i != v36; uint64_t i = sub_100427BEC(i - 232))
              ;
            *(void *)(v10 + 248) = v36;
LABEL_60:
            uint64_t v2 = v59;
          }
          while (v9 != (long long *)v36);
LABEL_66:
          std::string v38 = *(long long **)(v4 + 264);
          if (v38 != *(long long **)(v4 + 272))
          {
            do
            {
              uint64_t v40 = v2[11];
              uint64_t v39 = v2[12];
              if (*((char *)v38 + 23) < 0)
              {
                sub_10004FC84(__dst, *(void **)v38, *((void *)v38 + 1));
              }
              else
              {
                long long v41 = *v38;
                uint64_t v67 = *((void *)v38 + 2);
                *(_OWORD *)std::string __dst = v41;
              }
              if (*((char *)v38 + 47) < 0)
              {
                sub_10004FC84(&v68, *((void **)v38 + 3), *((void *)v38 + 4));
              }
              else
              {
                long long v42 = *(long long *)((char *)v38 + 24);
                uint64_t v69 = *((void *)v38 + 5);
                long long v68 = v42;
              }
              if (*((char *)v38 + 71) < 0)
              {
                sub_10004FC84(&__p, *((void **)v38 + 6), *((void *)v38 + 7));
              }
              else
              {
                long long v43 = v38[3];
                uint64_t v71 = *((void *)v38 + 8);
                long long __p = v43;
              }
              if (v40 == v39)
              {
                int v45 = 0;
              }
              else
              {
                do
                {
                  int v44 = rest::DeleteCloudCellularPlanBlacklistRecord::operator==();
                  int v45 = v44;
                  v40 += 72;
                  if (v40 == v39) {
                    int v46 = 1;
                  }
                  else {
                    int v46 = v44;
                  }
                }
                while (v46 != 1);
              }
              if (SHIBYTE(v71) < 0) {
                operator delete((void *)__p);
              }
              if (SHIBYTE(v69) < 0) {
                operator delete((void *)v68);
              }
              if (SHIBYTE(v67) < 0)
              {
                operator delete(__dst[0]);
                if (v45)
                {
LABEL_89:
                  uint64_t v47 = (uint64_t)v38 + 72;
                  uint64_t v48 = *(long long **)(v4 + 272);
                  if ((long long *)((char *)v38 + 72) == v48)
                  {
                    uint64_t v52 = v38;
                  }
                  else
                  {
                    int v49 = v38;
                    do
                    {
                      if (*((char *)v49 + 23) < 0) {
                        operator delete(*(void **)v49);
                      }
                      *int v49 = *(long long *)((char *)v49 + 72);
                      *((void *)v49 + 2) = *((void *)v49 + 11);
                      *((unsigned char *)v49 + 95) = 0;
                      *((unsigned char *)v49 + 72) = 0;
                      __int16 v50 = (void **)v49 + 3;
                      if (*((char *)v49 + 47) < 0) {
                        operator delete(*v50);
                      }
                      *(_OWORD *)__int16 v50 = v49[6];
                      *((void *)v49 + 5) = *((void *)v49 + 14);
                      *((unsigned char *)v49 + 119) = 0;
                      *((unsigned char *)v49 + 96) = 0;
                      int v51 = (void **)(v49 + 3);
                      if (*((char *)v49 + 71) < 0) {
                        operator delete(*v51);
                      }
                      *(_OWORD *)int v51 = *(long long *)((char *)v49 + 120);
                      *((void *)v49 + 8) = *((void *)v49 + 17);
                      *((unsigned char *)v49 + 143) = 0;
                      *((unsigned char *)v49 + 120) = 0;
                      uint64_t v52 = (long long *)((char *)v49 + 72);
                      uint64_t v53 = v49 + 9;
                      int v49 = (long long *)((char *)v49 + 72);
                    }
                    while (v53 != v48);
                    uint64_t v47 = *(void *)(v4 + 272);
                  }
                  while ((long long *)v47 != v52)
                  {
                    v47 -= 72;
                    sub_10010C078(v47);
                  }
                  *(void *)(v4 + 272) = v52;
                  continue;
                }
              }
              else if (v45)
              {
                goto LABEL_89;
              }
              std::string v38 = (long long *)((char *)v38 + 72);
              uint64_t v52 = *(long long **)(v4 + 272);
            }
            while (v38 != v52);
          }
          sub_10034B2A0((void **)(v4 + 288));
          *(void *)(v4 + 288) = 0;
          *(void *)(v4 + 296) = 0;
          *(void *)(v4 + 304) = 0;
          memset(v64, 0, sizeof(v64));
          sub_100428EB8((void **)(v4 + 312));
          *(void *)(v4 + 312) = 0;
          *(void *)(v4 + 320) = 0;
          *(void *)(v4 + 328) = 0;
          memset(v65, 0, sizeof(v65));
          v81[0] = v65;
          sub_10030EC88(v81);
          v81[0] = (void **)v64;
          sub_10010DF1C(v81);
          uint64_t v8 = v56;
          (*(void (**)(void, uint64_t))(**(void **)(v4 + 104) + 104))(*(void *)(v4 + 104), v54);
          LOWORD(v3) = v55;
          (*(void (**)(void, uint64_t))(**(void **)(v4 + 104) + 120))(*(void *)(v4 + 104), v4 + 264);
        }
        if ((v3 & 0x100) != 0) {
          *(_DWORD *)(v4 + 500) = 0;
        }
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_10042E318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
}

uint64_t sub_10042E37C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042E3BC()
{
}

uint64_t sub_10042E3C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  sub_1000F0058(a1 + 24, a2 + 24);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_100427CA0((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_1003229A4((void *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  return a1;
}

void sub_10042E494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100426D90((void ***)va);
  sub_10003B34C(v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void sub_10042E4D0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 80);
  sub_10030EC88(&v3);
  uint64_t v3 = (void **)(a1 + 56);
  sub_100426D90(&v3);
  sub_10003B34C((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *sub_10042E52C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_10042E5B0(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10042E654((uint64_t)a1, a4, v8);
    sub_100046C38(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_10042E654@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_10004FC84(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10042E6EC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1000C6EE8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10042E708(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_10042E788(uint64_t a1)
{
  *(void *)a1 = off_1019CB2F8;
  uint64_t v2 = (void **)(a1 + 64);
  uint64_t v5 = (void **)(a1 + 88);
  sub_10030EC88(&v5);
  uint64_t v5 = v2;
  sub_10010DF1C(&v5);
  sub_100322EB8((void *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_10042E804(uint64_t a1)
{
  *(void *)a1 = off_1019CB2F8;
  uint64_t v2 = (void **)(a1 + 64);
  uint64_t v4 = (void **)(a1 + 88);
  sub_10030EC88(&v4);
  uint64_t v4 = v2;
  sub_10010DF1C(&v4);
  sub_100322EB8((void *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_10004D2C8(v3);
  }
  operator delete();
}

void *sub_10042E894(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x78uLL);
  *uint64_t v2 = off_1019CB2F8;
  sub_10042EB9C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10042E8E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10042E8FC(uint64_t a1, void *a2)
{
  *a2 = off_1019CB2F8;
  return sub_10042EB9C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10042E928(uint64_t a1)
{
}

void sub_10042E930(void *a1)
{
  sub_10042ED44((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_10042E96C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = HIDWORD(*a2);
  uint64_t v5 = *(void **)(a1 + 8);
  int v6 = v5[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3);
    unint64_t v8 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
    uint64_t v9 = v3 & 0x100;
    int v15 = 134219010;
    unint64_t v16 = v7;
    __int16 v17 = 2048;
    long long v10 = "out";
    if ((v3 & 0x100) != 0) {
      long long v10 = "";
    }
    unint64_t v18 = v8;
    __int16 v19 = 1024;
    int v20 = v3 & 1;
    __int16 v21 = 2080;
    int v22 = v10;
    __int16 v23 = 1024;
    int v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Remove %ld self in blacklist table, and save %ld blacklist plans, result: %d, with%s CK modification, with error code: %d", (uint8_t *)&v15, 0x2Cu);
  }
  else
  {
    uint64_t v9 = v3 & 0x100;
  }
  if (*(void *)(a1 + 96) == *(void *)(a1 + 88)) {
    int v11 = 2 * (*(void *)(a1 + 72) != *(void *)(a1 + 64));
  }
  else {
    int v11 = (2 * (*(void *)(a1 + 72) != *(void *)(a1 + 64))) | 8;
  }
  if (v9)
  {
    uint64_t v12 = v5[5];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a1 + 112);
      int v15 = 67109120;
      LODWORD(v16) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I fBlacklistUploadReasons:0x%x", (uint8_t *)&v15, 8u);
    }
    sub_100426C84(v5, *(_DWORD *)(a1 + 112), v11, v3 & 1, 1, v4);
  }
  return sub_100426B48(a1 + 32, v3);
}

uint64_t sub_10042EB50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042EB90()
{
}

uint64_t sub_10042EB9C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10042ECAC(a1 + 24, a2 + 24);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_100322898((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_1003229A4((void *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

void sub_10042EC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10010DF1C((void ***)va);
  sub_100322EB8(v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (v5) {
    sub_10004D2C8(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10042ECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10042ED44(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  uint64_t v4 = (void **)(a1 + 80);
  sub_10030EC88(&v4);
  uint64_t v4 = v2;
  sub_10010DF1C(&v4);
  sub_100322EB8((void *)(a1 + 24));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
}

uint64_t sub_10042EDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_10042EE20(void *a1)
{
  *a1 = off_1019CB378;
  sub_10042E52C(a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_10042EE70(void *a1)
{
  *a1 = off_1019CB378;
  sub_10042E52C(a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_10042EEE0(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = off_1019CB378;
  sub_10042F198(v2 + 1, v1);
  return v2;
}

void sub_10042EF34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10042EF48(uint64_t a1, void *a2)
{
  *a2 = off_1019CB378;
  return sub_10042F198(a2 + 1, (void *)(a1 + 8));
}

void sub_10042EF74(uint64_t a1)
{
}

void sub_10042EF7C(void *a1)
{
  sub_10042F290((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10042EFB8(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 2);
  long long v3 = *a2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  long long v8 = v3;
  uint64_t v9 = v2;
  memset(v6, 0, sizeof(v6));
  sub_10042F1F8((uint64_t)v10, a1 + 24);
  uint64_t v12 = 0;
  uint64_t v5 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v5 = off_1019CB3F8;
  *(_OWORD *)(v5 + 8) = v8;
  *((void *)v5 + 3) = v9;
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  sub_10042EDA0((uint64_t)(v5 + 32), (uint64_t)v10);
  uint64_t v12 = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(v4, v11);
  sub_10030ED90(v11);
  sub_10042E52C(v10);
  unint64_t v7 = (void **)&v8;
  sub_1000C5238(&v7);
  *(void *)&long long v8 = v6;
  sub_1000C5238((void ***)&v8);
}

void sub_10042F0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13)
{
  sub_10030ED90((void *)(v14 - 72));
  sub_10042E52C(v13);
  a12 = (void **)&a13;
  sub_1000C5238(&a12);
  a12 = (void **)&a9;
  sub_1000C5238(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10042F14C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042F18C()
{
}

void *sub_10042F198(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10042F1F8((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_10042F1E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042F1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10042F290(uint64_t a1)
{
  sub_10042E52C((void *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

uint64_t sub_10042F2DC(uint64_t a1)
{
  *(void *)a1 = off_1019CB3F8;
  sub_10042E52C((void *)(a1 + 32));
  uint64_t v3 = (void **)(a1 + 8);
  sub_1000C5238(&v3);
  return a1;
}

void sub_10042F338(uint64_t a1)
{
  *(void *)a1 = off_1019CB3F8;
  sub_10042E52C((void *)(a1 + 32));
  uint64_t v2 = (void **)(a1 + 8);
  sub_1000C5238(&v2);
  operator delete();
}

void *sub_10042F3A8(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = off_1019CB3F8;
  sub_10042F628(v2 + 1, v1);
  return v2;
}

void sub_10042F3FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10042F410(uint64_t a1, void *a2)
{
  *a2 = off_1019CB3F8;
  return sub_10042F628(a2 + 1, (uint64_t *)(a1 + 8));
}

void sub_10042F43C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  sub_10042E52C((void *)(a1 + 32));
  uint64_t v2 = v1;
  sub_1000C5238(&v2);
}

void sub_10042F478(void **a1)
{
  uint64_t v2 = a1 + 1;
  sub_10042E52C(a1 + 4);
  uint64_t v3 = v2;
  sub_1000C5238(&v3);
  operator delete(a1);
}

void sub_10042F4C0(uint64_t *a1, long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  memset(v6, 0, sizeof(v6));
  sub_1003420CC(v6, a1[1], a1[2], 0x8F5C28F5C28F5C29 * ((a1[2] - a1[1]) >> 4));
  memset(v5, 0, sizeof(v5));
  sub_100322898(v5, v3, *((uint64_t *)&v3 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v3 + 1) - v3) >> 3));
  sub_100426BFC(a1[7], (uint64_t)v6, (uint64_t)v5, 0);
  unint64_t v7 = (void ***)v5;
  sub_10010DF1C((void ***)&v7);
  unint64_t v7 = v6;
  sub_1000C5238((void ***)&v7);
  v6[0] = (void **)&v3;
  sub_10010DF1C(v6);
}

void sub_10042F594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v16 - 24) = v15;
  sub_10010DF1C((void ***)(v16 - 24));
  *(void *)(v16 - 24) = &a15;
  sub_1000C5238((void ***)(v16 - 24));
  *(void *)(v16 - 24) = &a9;
  sub_10010DF1C((void ***)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10042F5DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042F61C()
{
}

void *sub_10042F628(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1003420CC(a1, *a2, a2[1], 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 4));
  sub_10042F1F8((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  return a1;
}

void sub_10042F694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5238((void ***)va);
  _Unwind_Resume(a1);
}

void sub_10042F6B0()
{
}

__n128 sub_10042F6C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1019CB498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10042F710(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CB498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10042F740(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = rest::asString();
    __int16 v7 = 1024;
    int v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I subscribeRecordChange. type: [%s] result: [%d]", (uint8_t *)&v5, 0x12u);
  }
  *(unsigned char *)(v3 + 494) = v2;
}

uint64_t sub_10042F804(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10042F844()
{
}

uint64_t sub_10042F850@<X0>(capabilities::euicc *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = capabilities::euicc::supportsEOS(a1);
  if (result) {
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_10042FC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t a9, dispatch_object_t object, uint64_t a11, dispatch_object_t a12, dispatch_object_t a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19)
{
  if (object) {
    (*((void (**)(dispatch_object_t))object->isa + 1))(object);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  sub_10004D2C8(v19);
  _Unwind_Resume(a1);
}

void sub_10042FE40(void *a1)
{
  *a1 = off_1019CB518;
  a1[6] = off_1019CB578;
  sub_100431A28(a1 + 16);
  int v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4) {
    sub_10004D2C8(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);

  EosControllerInterface::~EosControllerInterface((EosControllerInterface *)a1);
}

void sub_10042FEF4(uint64_t a1)
{
}

void sub_10042FEFC(void *a1)
{
  sub_10042FE40(a1);

  operator delete();
}

void sub_10042FF34(uint64_t a1)
{
  sub_10042FE40((void *)(a1 - 48));

  operator delete();
}

void sub_10042FF70(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100430098(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 112);
    int v6 = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I [EOS] : Number of hard reset attempts : %u", (uint8_t *)&v6, 8u);
    int v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 113);
    int v6 = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I [EOS] : Current active no reset assertion count : %u", (uint8_t *)&v6, 8u);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96));
}

uint64_t sub_1004301B0(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 168) != a2)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 168))
    {
      char v3 = *(unsigned char *)(result + 113);
      if (!v3)
      {
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 96) + 32))(*(void *)(result + 96), 0);
        char v3 = *(unsigned char *)(v2 + 113);
      }
      *(unsigned char *)(v2 + 113) = v3 + 1;
    }
    else
    {
      return sub_100430240(result);
    }
  }
  return result;
}

uint64_t sub_100430240(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 113);
  if (v2 > 1
    || (uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 96) + 40))(*(void *)(result + 96), 0), LOBYTE(v2) = *(unsigned char *)(v1 + 113), (_BYTE)v2))
  {
    *(unsigned char *)(v1 + 113) = v2 - 1;
  }
  return result;
}

void sub_1004302A8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10043039C(uint64_t a1)
{
}

void sub_1004303A4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100430484(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100430564(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100430644(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100430724(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100430804(uint64_t a1, int a2)
{
  int v2 = a2;
  unsigned __int8 v8 = a2;
  int v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = printers::asString((printers *)&v8, v5);
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I force-require booted assertion : %s", buf, 0xCu);
    int v2 = v8;
  }
  if (v2) {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), 1);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 96) + 32))(*(void *)(a1 + 96), 1);
}

void sub_100430918(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 112);
  char v3 = *(NSObject **)(a1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      v5[0] = 67109120;
      v5[1] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Cannot trigger EOS reset; Reset attempts per session(%d) exceeded",
        (uint8_t *)v5,
        8u);
    }
  }
  else
  {
    if (v4)
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Trigger EOS reset", (uint8_t *)v5, 2u);
    }
    (*(void (**)(void))(**(void **)(a1 + 96) + 48))(*(void *)(a1 + 96));
    ++*(unsigned char *)(a1 + 112);
  }
}

void sub_100430A28(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CSIPhoneNumber buf = 136315394;
    *(void *)&uint8_t buf[4] = asString();
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Handling EOS Status Ind : state : %s, assertionState : %s", buf, 0x16u);
  }
  int v7 = *(_DWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 116) = a2;
  *(_DWORD *)(a1 + 120) = a3;
  if (v7 != a2)
  {
    *(_DWORD *)(a1 + 160) = a2;
    uint64_t v8 = *(void *)(a1 + 152);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(**(Registry ***)(a1 + 56));
  uint64_t v10 = ServiceMap;
  if (v11 < 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)CSIPhoneNumber buf = v11;
  uint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v15)
  {
    uint64_t v17 = v15[3];
    uint64_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      if (!v17) {
        goto LABEL_12;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  uint64_t v16 = 0;
  char v18 = 1;
  if (!v17)
  {
LABEL_12:
    __int16 v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CSIPhoneNumber buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "AnalyticsInterface not found.", buf, 2u);
    }
    goto LABEL_32;
  }
LABEL_16:
  xpc_object_t v30 = 0;
  xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v21 = v20;
  if (v20)
  {
    xpc_object_t v30 = v20;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    xpc_object_t v30 = v21;
    if (!v21)
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
      goto LABEL_23;
    }
  }
  if (xpc_get_type(v21) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v22 = xpc_null_create();
LABEL_23:
    xpc_object_t v30 = v22;
    goto LABEL_24;
  }
  xpc_retain(v21);
LABEL_24:
  xpc_release(v21);
  __int16 v23 = (const char *)asString();
  xpc_object_t v28 = xpc_string_create(v23);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  *(void *)CSIPhoneNumber buf = &v30;
  *(void *)&uint8_t buf[8] = "PlatformState";
  sub_100035E70((uint64_t)buf, &v28, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v28);
  xpc_object_t v28 = 0;
  int v24 = (const char *)asString();
  xpc_object_t v26 = xpc_string_create(v24);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  *(void *)CSIPhoneNumber buf = &v30;
  *(void *)&uint8_t buf[8] = "AssertionState";
  sub_100035E70((uint64_t)buf, &v26, &v27);
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
  *(void *)CSIPhoneNumber buf = v30;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    *(void *)CSIPhoneNumber buf = xpc_null_create();
  }
  (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)v17 + 16))(v17, "commCenterEOSStatistics", buf);
  xpc_release(*(xpc_object_t *)buf);
  *(void *)CSIPhoneNumber buf = 0;
  xpc_release(v30);
LABEL_32:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  if (a2 != 2)
  {
    if (a2 == 4)
    {
      sub_100430918(a1);
      return;
    }
    if (a2 == 3) {
      sub_100430804(a1, 1);
    }
    goto LABEL_46;
  }
  if (!a3 || a3 == 2)
  {
LABEL_46:
    sub_100430240(a1);
    return;
  }
  if (a3 == 1)
  {
    char v25 = *(unsigned char *)(a1 + 113);
    if (!v25)
    {
      (*(void (**)(void, void))(**(void **)(a1 + 96) + 32))(*(void *)(a1 + 96), 0);
      char v25 = *(unsigned char *)(a1 + 113);
    }
    *(unsigned char *)(a1 + 113) = v25 + 1;
  }
}

void sub_100430E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t object)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100430EE0(void *a1, uint64_t a2)
{
  if (sub_10004D710())
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1174405120;
    v15[2] = sub_1004310EC;
    void v15[3] = &unk_1019CB590;
    _OWORD v15[4] = a1;
    sub_1004330B4((uint64_t)v16, a2);
    BOOL v4 = (std::__shared_weak_count *)a1[2];
    if (!v4 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      sub_100088B9C();
    }
    int v7 = v6;
    uint64_t v8 = a1[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_10043314C;
    block[3] = &unk_1019CB9F0;
    block[5] = v5;
    unsigned int v14 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    block[4] = v15;
    dispatch_async(v8, block);
    if (v14) {
      sub_10004D2C8(v14);
    }
    sub_10004D2C8(v7);
    return (const void **)sub_100433030(v16);
  }
  else
  {
    v11[0] = 2;
    LOBYTE(v12) = 4;
    uint64_t v10 = *(void *)(a2 + 24);
    if (!v10) {
      sub_10007B600();
    }
    uint64_t result = (const void **)(*(uint64_t (**)(uint64_t, char *))(*(void *)v10 + 48))(v10, v11);
    if (v11[0] == 1) {
      return sub_100057D78(&v12);
    }
  }
  return result;
}

void sub_1004310B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1004310EC(uint64_t a1)
{
  xpc_object_t v19 = 0;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t v19 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v19 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t v19 = v4;
LABEL_9:
  xpc_release(v3);
  uint64_t v5 = (const char *)asString();
  xpc_object_t v17 = xpc_string_create(v5);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  uint64_t v15 = &v19;
  uint64_t v16 = "eos_state";
  sub_100035E70((uint64_t)&v15, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  uint64_t v6 = (const char *)asString();
  xpc_object_t v13 = xpc_string_create(v6);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  uint64_t v15 = &v19;
  uint64_t v16 = "eos_assertion_state";
  sub_100035E70((uint64_t)&v15, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_object_t v9 = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&v10, (xpc *)&v9, v7);
  sub_10004EFE4(&v15, &v10);
  LOBYTE(v11) = 0;
  sub_1000C7FE8(&v11, (const void **)&v15);
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, const void **))(*(void *)v8 + 48))(v8, &v11);
  if (v11 == 1) {
    sub_100057D78(&v12);
  }
  LOBYTE(v11) = 0;
  sub_100057D78((const void **)&v15);
  sub_1000577C4(&v10);
  xpc_release(v9);
  xpc_release(v19);
}

void sub_100431308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, const void *a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_1000577C4(&a11);
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v18 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_100431398(uint64_t a1, uint64_t a2)
{
  return sub_1004330B4(a1 + 40, a2 + 40);
}

void *sub_1004313A4(uint64_t a1)
{
  return sub_100433030((void *)(a1 + 40));
}

void sub_1004313AC(void *a1, long long *a2, long long *a3, uint64_t a4)
{
  if (sub_10004D710())
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1174405120;
    _DWORD v16[2] = sub_100431678;
    void v16[3] = &unk_1019CB5C0;
    void v16[4] = a1;
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(&v17, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v17 = *a2;
      uint64_t v18 = *((void *)a2 + 2);
    }
    sub_10043320C((uint64_t)v19, a4);
    if (*((char *)a3 + 23) < 0)
    {
      sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long __p = *a3;
      uint64_t v21 = *((void *)a3 + 2);
    }
    xpc_object_t v9 = (std::__shared_weak_count *)a1[2];
    if (!v9 || (uint64_t v10 = a1[1], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v12 = v11;
    xpc_object_t v13 = a1[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_10043314C;
    block[3] = &unk_1019CB9F0;
    block[5] = v10;
    uint64_t v15 = v12;
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    block[4] = v16;
    dispatch_async(v13, block);
    if (v15) {
      sub_10004D2C8(v15);
    }
    sub_10004D2C8(v12);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)__p);
    }
    sub_100433188(v19);
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)v17);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a4 + 24);
    sub_100431628(v8, 4);
  }
}

void sub_1004315E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_100433188(v27);
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100431628(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t sub_100431678(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = (uint64_t *)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 63);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  int v6 = 1;
  if (v4 > 11)
  {
    if (v4 == 19)
    {
      if (v5 < 0) {
        char v3 = (uint64_t *)*v3;
      }
      unsigned int v14 = (uint64_t *)*v3;
      uint64_t v15 = v3[1];
      uint64_t v16 = *(uint64_t *)((char *)v3 + 11);
      if (v14 != (uint64_t *)0x65766F6365726E75 || v15 != 0x72655F656C626172 || v16 != 0x726F7272655F656CLL) {
        goto LABEL_69;
      }
      int v6 = 4;
    }
    else
    {
      if (v4 != 12) {
        goto LABEL_69;
      }
      if (v5 < 0) {
        char v3 = (uint64_t *)*v3;
      }
      if (*v3 != 0x696C616974696E69 || *((_DWORD *)v3 + 2) != 1735289210)
      {
        uint64_t v8 = (uint64_t *)*v3;
        int v9 = *((_DWORD *)v3 + 2);
        if (v8 != (uint64_t *)0x657465645F746F6ELL || v9 != 1684370531) {
          goto LABEL_69;
        }
        int v6 = 3;
      }
    }
  }
  else if (v4 == 7)
  {
    if (v5 < 0) {
      char v3 = (uint64_t *)*v3;
    }
    int v11 = *(_DWORD *)v3;
    int v12 = *(_DWORD *)((char *)v3 + 3);
    if (v11 != 1852534389 || v12 != 1853321070) {
      goto LABEL_69;
    }
    int v6 = 0;
  }
  else
  {
    if (v4 != 8) {
      goto LABEL_69;
    }
    if (v5 < 0) {
      char v3 = (uint64_t *)*v3;
    }
    if (*v3 != 0x6465746365746564) {
      goto LABEL_69;
    }
    int v6 = 2;
  }
  xpc_object_t v19 = (uint64_t *)(a1 + 96);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 119);
  int v21 = (char)v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a1 + 104);
  }
  if (v20 == 7)
  {
    if (v21 < 0) {
      xpc_object_t v19 = (uint64_t *)*v19;
    }
    int v27 = *(_DWORD *)v19;
    int v28 = *(_DWORD *)((char *)v19 + 3);
    if (v27 != 1852534389 || v28 != 1853321070) {
      goto LABEL_65;
    }
    int v26 = 0;
  }
  else
  {
    if (v20 != 15)
    {
LABEL_65:
      LOBYTE(v6) = 1;
      goto LABEL_69;
    }
    if (v21 < 0) {
      xpc_object_t v19 = (uint64_t *)*v19;
    }
    if (*v19 == 0x5F65726975716361 && *(uint64_t *)((char *)v19 + 7) == 0x74657365726F6E5FLL)
    {
      int v26 = 1;
    }
    else
    {
      __int16 v23 = (uint64_t *)*v19;
      uint64_t v24 = *(uint64_t *)((char *)v19 + 7);
      if (v23 != (uint64_t *)0x5F657361656C6572 || v24 != 0x74657365726F6E5FLL) {
        goto LABEL_65;
      }
      int v26 = 2;
    }
  }
  sub_100430A28(v2, v6, v26);
  LOBYTE(v6) = 5;
LABEL_69:
  uint64_t v30 = *(void *)(a1 + 88);

  return sub_100431628(v30, v6);
}

unsigned char *sub_100431900(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  sub_10043320C(a1 + 64, a2 + 64);
  uint64_t result = (unsigned char *)(a1 + 96);
  if (*(char *)(a2 + 119) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  long long v6 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)uint64_t result = v6;
  return result;
}

void sub_100431998(_Unwind_Exception *a1)
{
  sub_100433188(v3);
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_1004319C4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 64);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_100433188(v2);
  if (*(char *)(a1 + 63) < 0)
  {
    char v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void *sub_100431A28(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100431AB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100431AE8(uint64_t a1)
{
}

uint64_t sub_100431B04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100431B48(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100431B74(ServiceManager::Service *this)
{
  *(void *)this = off_1019CB718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100431BD0(ServiceManager::Service *this)
{
  *(void *)this = off_1019CB718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100431C40@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "EosController");
}

unsigned char *sub_100431C50@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100431C8C(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_10042FF70(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_10042FF70(v4, 0);
}

uint64_t sub_100431D10()
{
  return 0;
}

uint64_t sub_100431D18()
{
  return 1;
}

uint64_t sub_100431D20()
{
  return 0;
}

void sub_100431D2C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100431E0C(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group, this);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t *sub_100431F34(unsigned char **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  int v5 = v1;
  if (!v1[8])
  {
    uint64_t v2 = *(void *)v1;
    ctu::RestModule::disconnect((ctu::RestModule *)(*(void *)v1 + 64));
    EosCommandDriver::stop(*(EosCommandDriver **)(v2 + 80));
    (*(void (**)(void))(**(void **)(v2 + 96) + 24))(*(void *)(v2 + 96));
  }
  sub_100113010((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100431FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100431FD0(void **a1)
{
  uint64_t v1 = *a1;
  long long v17 = a1;
  uint64_t v18 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(std::__shared_weak_count **)(*v1 + 16);
  if (!v3 || (v4 = *(void *)(v2 + 8), (int v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  long long v6 = v5;
  int v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1019CB798;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_1019CB840;
  v7[1].__shared_owners_ = v4;
  v7[1].__shared_weak_owners_ = (uint64_t)v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v6);
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_1019CB7E8;
  int v21 = v7 + 1;
  xpc_object_t v22 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  EosCommandDriver::setDelegate();
  if (v7) {
    sub_10004D2C8(v7);
  }
  Registry::createRestModuleOneTimeUseConnection(&v19, **(Registry ***)(v2 + 56));
  ctu::RestModule::connect();
  if (v20) {
    sub_10004D2C8(v20);
  }
  sub_100058DB0(__p, "/cc/events/dump_state");
  uint64_t v8 = (dispatch_group_t *)operator new(0x20uLL);
  *uint64_t v8 = (dispatch_group_t)off_1019CB868;
  v8[1] = (dispatch_group_t)v2;
  _OWORD v8[2] = (dispatch_group_t)sub_100430098;
  void v8[3] = 0;
  uint64_t v24 = v8;
  ctu::RestModule::observeEvent();
  sub_10003F600(group);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/call_state");
  int v9 = (dispatch_group_t *)operator new(0x28uLL);
  *int v9 = (dispatch_group_t)off_1019CB8E8;
  v9[1] = (dispatch_group_t)(v2 + 168);
  uint64_t v9[2] = (dispatch_group_t)v2;
  v9[3] = (dispatch_group_t)sub_1004301B0;
  void v9[4] = 0;
  uint64_t v24 = v9;
  ctu::RestModule::observeProperty();
  sub_10003F600(group);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = (dispatch_group_t *)(v2 + 128);
  group[0] = (dispatch_group_t)off_1019CB968;
  group[1] = (dispatch_group_t)(v2 + 64);
  uint64_t v24 = group;
  if (group != (dispatch_group_t *)(v2 + 128))
  {
    int v11 = *(dispatch_group_t **)(v2 + 152);
    if (v11 == v10)
    {
      __p[1] = (void *)(v2 + 64);
      uint64_t v26 = 0;
      uint64_t v24 = 0;
      __p[0] = off_1019CB968;
      ((void (*)(uint64_t, dispatch_group_t *))(*v10)[3].isa)(v2 + 128, group);
      (*(void (**)(void))(**(void **)(v2 + 152) + 32))(*(void *)(v2 + 152));
      *(void *)(v2 + 152) = 0;
      uint64_t v24 = group;
      (*((void (**)(void **, uint64_t))__p[0] + 3))(__p, v2 + 128);
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else
    {
      *(void *)(v2 + 128) = off_1019CB968;
      *(void *)(v2 + 136) = v2 + 64;
      uint64_t v24 = v11;
    }
    *(void *)(v2 + 152) = v10;
  }
  sub_100431A28(group);
  uint64_t v12 = *(void *)(v2 + 152);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v2 + 160);
  }
  (*(void (**)(void))(**(void **)(v2 + 96) + 16))(*(void *)(v2 + 96));
  sub_10004D2C8(v7);
  xpc_object_t v13 = *(EosCommandDriver **)(v2 + 80);
  unsigned int v14 = v1[1];
  group[0] = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  v15.var0.fObuint64_t j = (dispatch_object_s *)group;
  EosCommandDriver::bootstrap(v13, v15);
  if (group[0])
  {
    dispatch_group_leave(group[0]);
    if (group[0]) {
      dispatch_release(group[0]);
    }
  }
  sub_100088C88((uint64_t *)&v18);
  return sub_100046B58((uint64_t *)&v17);
}

void sub_100432420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004324E4(uint64_t a1)
{
  uint64_t v1 = a1;
  EosCommandDriver::start(*(EosCommandDriver **)(**(void **)a1 + 80));
  operator delete();
}

void sub_10043253C()
{
}

void sub_100432568(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CB798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100432588(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CB798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004325DC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100432604(void *a1)
{
  *a1 = off_1019CB840;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100432650(void *a1)
{
  *a1 = off_1019CB840;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_1004326BC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5) {
        sub_1004302A8(v5);
      }
      sub_10004D2C8(v4);
    }
  }
}

void *sub_100432738(void *a1)
{
  *a1 = off_1019CB840;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100432784(void *a1)
{
  *a1 = off_1019CB840;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_1004327F4()
{
}

__n128 sub_100432808(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019CB868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10043285C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CB868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100432894(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1004328DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10043291C()
{
}

void sub_10043292C()
{
}

__n128 sub_100432940(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019CB8E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100432994(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CB8E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1004329CC(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (unsigned char *)a1[1];
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = v9;
  sub_10031571C((uint64_t)&v8, a2);
  int v4 = *v3;
  sub_1003159D4(v3, &v8);
  if (v4 != *v3)
  {
    uint64_t v5 = (void (*)(void *, BOOL))a1[3];
    uint64_t v6 = a1[4];
    int v7 = (void *)(a1[2] + (v6 >> 1));
    if (v6) {
      uint64_t v5 = *(void (**)(void *, BOOL))(*v7 + v5);
    }
    v5(v7, v4 != 0);
  }
  sub_10005CD2C((uint64_t)&v8, v9[0]);
}

void sub_100432A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_100432AAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100432AEC()
{
}

void sub_100432AFC()
{
}

void *sub_100432B10(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1019CB968;
  result[1] = v3;
  return result;
}

uint64_t sub_100432B58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CB968;
  a2[1] = v2;
  return result;
}

void sub_100432B84()
{
  xpc_object_t v3 = 0;
  write_rest_value();
  sub_100058DB0(&__p, "/cc/props/eos_state");
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v2 < 0) {
    operator delete(__p);
  }
  xpc_release(v3);
}

void sub_100432C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100432C6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100432CAC()
{
}

void sub_100432CB8(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_100430A28(**a1, *((_DWORD *)*a1 + 2), *((_DWORD *)*a1 + 3));
  operator delete();
}

void sub_100432D10()
{
}

void sub_100432D3C(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_100430804(**a1, 0);
  operator delete();
}

void sub_100432D94()
{
}

void sub_100432DC0(uint64_t a1)
{
  uint64_t v1 = a1;
  (*(void (**)(void, uint64_t))(**(void **)(**(void **)a1 + 96) + 40))(*(void *)(**(void **)a1 + 96), 1);
  operator delete();
}

void sub_100432E3C()
{
}

void sub_100432E68(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(unsigned char *)(v1 + 113);
  if (!v2)
  {
    (*(void (**)(void, void))(**(void **)(v1 + 96) + 32))(*(void *)(v1 + 96), 0);
    char v2 = *(unsigned char *)(v1 + 113);
  }
  *(unsigned char *)(v1 + 113) = v2 + 1;
  operator delete();
}

void sub_100432EF8()
{
}

void sub_100432F24(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_100430240(**a1);
  operator delete();
}

void sub_100432F78()
{
}

void sub_100432FA4(uint64_t **a1)
{
  char v2 = a1;
  uint64_t v1 = **a1;
  sub_100430240(v1);
  sub_100430918(v1);
  operator delete();
}

void sub_100433004()
{
}

void *sub_100433030(void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1004330B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10043314C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10043315C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100433178(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void *sub_100433188(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10043320C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1004332A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    int v4 = (const char *)a2;
  }
  else {
    int v4 = *(const char **)a2;
  }
  int v5 = open(v4, 0);
  if ((v5 & 0x80000000) == 0)
  {
    int v6 = v5;
    int v25 = 0;
    uint64_t v7 = 0;
    if (read(v5, &v25, 4uLL) == 4)
    {
      lseek(v6, 0, 0);
      if ((v25 + 17958194) >= 2)
      {
        uint64_t v7 = 0;
        if (v25 == -1095041334)
        {
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)host_info_out = 0u;
          mach_msg_type_number_t host_info_outCnt = 12;
          mach_port_t v8 = mach_host_self();
          if (host_info(v8, 1, host_info_out, &host_info_outCnt) || (uint64_t v32 = 0, read(v6, &v32, 8uLL) != 8))
          {
            uint64_t v7 = 0;
          }
          else
          {
            int v9 = HIDWORD(v32);
            HIDWORD(v32) = bswap32(HIDWORD(v32));
            long long __p = 0;
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            if (v9)
            {
              unint64_t v10 = 0;
              do
              {
                uint64_t v26 = 0;
                uint64_t v27 = 0;
                int v28 = 0;
                if (read(v6, &v26, 0x14uLL) != 20) {
                  goto LABEL_42;
                }
                LODWORD(v26) = bswap32(v26);
                if ((~v26 & 0xC) == 0)
                {
                  unsigned int v11 = bswap32(v27);
                  LODWORD(v27) = v11;
                  uint64_t v12 = v30;
                  if (v30 >= v31)
                  {
                    unsigned int v14 = (unsigned int *)__p;
                    uint64_t v15 = ((char *)v30 - (unsigned char *)__p) >> 2;
                    unint64_t v16 = v15 + 1;
                    if ((unint64_t)(v15 + 1) >> 62) {
                      sub_10006A748();
                    }
                    uint64_t v17 = (char *)v31 - (unsigned char *)__p;
                    if (((char *)v31 - (unsigned char *)__p) >> 1 > v16) {
                      unint64_t v16 = v17 >> 1;
                    }
                    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v18 = v16;
                    }
                    if (v18)
                    {
                      uint64_t v19 = (char *)sub_10005ECD8((uint64_t)&v31, v18);
                      unsigned int v14 = (unsigned int *)__p;
                      uint64_t v12 = v30;
                      unsigned int v11 = v27;
                    }
                    else
                    {
                      uint64_t v19 = 0;
                    }
                    uint64_t v20 = (unsigned int *)&v19[4 * v15];
                    *uint64_t v20 = v11;
                    xpc_object_t v13 = v20 + 1;
                    while (v12 != v14)
                    {
                      unsigned int v21 = *--v12;
                      *--uint64_t v20 = v21;
                    }
                    long long __p = v20;
                    uint64_t v30 = v13;
                    uint64_t v31 = (unsigned int *)&v19[4 * v18];
                    if (v14) {
                      operator delete(v14);
                    }
                  }
                  else
                  {
                    unsigned int *v30 = v11;
                    xpc_object_t v13 = v12 + 1;
                  }
                  uint64_t v30 = v13;
                }
                ++v10;
              }
              while (v10 < HIDWORD(v32));
              __int16 v23 = (unsigned int *)__p;
              xpc_object_t v22 = v30;
              if (__p == v30)
              {
                uint64_t v7 = 1;
                if (!__p) {
                  goto LABEL_40;
                }
              }
              else
              {
                while (lseek(v6, *v23, 0) != -1 && (sub_1004335D4(v6, a3) & 1) != 0)
                {
                  if (++v23 == v22)
                  {
                    uint64_t v7 = 1;
                    goto LABEL_43;
                  }
                }
LABEL_42:
                uint64_t v7 = 0;
LABEL_43:
                __int16 v23 = (unsigned int *)__p;
                if (!__p) {
                  goto LABEL_40;
                }
              }
              uint64_t v30 = v23;
              operator delete(v23);
              goto LABEL_40;
            }
            uint64_t v7 = 1;
          }
        }
      }
      else
      {
        uint64_t v7 = sub_1004335D4(v6, a3);
      }
    }
LABEL_40:
    close(v6);
    return v7;
  }
  return 0;
}

void sub_100433574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10043359C(OSServicesInterface *a1)
{
  OSServicesInterface::~OSServicesInterface(a1);

  operator delete();
}

uint64_t sub_1004335D4(int a1, uint64_t *a2)
{
  BOOL v3 = a1;
  v23[0] = 0;
  v23[1] = 0;
  int v25 = 0;
  uint64_t v24 = 0;
  if (read(a1, v23, 0x1CuLL) != 28) {
    return 0;
  }
  if (LODWORD(v23[0]) == -17958193) {
    lseek(v3, 4, 1);
  }
  int v4 = v24;
  if (v24)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v22 = 0;
      if (read(v3, &v22, 8uLL) != 8)
      {
        BOOL v3 = 0;
        goto LABEL_27;
      }
      if (v22 == 27) {
        break;
      }
      lseek(v3, HIDWORD(v22) - 8, 1);
      if (++v5 >= (unint64_t)v24)
      {
        int v4 = 0;
        return v4 & v3;
      }
    }
    uint64_t v28 = 0;
    v29[0] = 0;
    v29[1] = 0;
    ssize_t v7 = read(v3, v29, 0x10uLL);
    BOOL v3 = v7 == 16;
    if (v7 == 16)
    {
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)v29, out);
      sub_100058DB0(__p, out);
      unint64_t v8 = a2[2];
      unint64_t v9 = a2[1];
      if (v9 >= v8)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a2) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1000D8578();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *a2) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        v26[4] = a2 + 2;
        if (v14) {
          uint64_t v15 = (char *)sub_10004812C((uint64_t)(a2 + 2), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = &v15[24 * v11];
        v26[0] = v15;
        v26[1] = v16;
        v26[3] = &v15[24 * v14];
        long long v17 = *(_OWORD *)__p;
        *((void *)v16 + 2) = v21;
        *(_OWORD *)unint64_t v16 = v17;
        __p[1] = 0;
        uint64_t v21 = 0;
        __p[0] = 0;
        v26[2] = v16 + 24;
        sub_100048204(a2, v26);
        uint64_t v18 = a2[1];
        sub_100048174((uint64_t)v26);
        int v19 = SHIBYTE(v21);
        a2[1] = v18;
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)__p;
        *(void *)(v9 + 16) = v21;
        *(_OWORD *)unint64_t v9 = v10;
        a2[1] = v9 + 24;
      }
    }
LABEL_27:
    int v4 = 1;
  }
  return v4 & v3;
}

void sub_100433844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100433878()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B0CE28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B0CE28))
  {
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&qword_101B0CE20, kCtLoggingSystemName, "cp.set");
    __cxa_guard_release(&qword_101B0CE28);
  }
}

void sub_1004338F8(_Unwind_Exception *a1)
{
}

uint64_t CellularPlanSettingsDevice::CellularPlanSettingsDevice(uint64_t a1, void *a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)a1 = &off_1019CBA78;
  *(void *)(a1 + 8) = off_1019CBFF0;
  *(void *)(a1 + 16) = off_1019CC028;
  *(void *)(a1 + 24) = off_1019CC058;
  *(void *)(a1 + 32) = off_1019CC140;
  *(void *)(a1 + 40) = off_1019CC1A8;
  *(void *)(a1 + 48) = off_1019CC1E8;
  *(void *)(a1 + 72) = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 80) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  CCPreferences::create((uint64_t *)&v5, (CCPreferences *)a1);
  *(_OWORD *)(a1 + 88) = v5;
  if (!*(void *)(a1 + 72)) {
    __assert_rtn("CellularPlanSettingsDevice", "CellularPlanSettingsDevice.cpp", 245, "fRegistry && \"registry is not valid\"");
  }
  return a1;
}

void sub_100433A78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 80);
  if (v3) {
    sub_10004D2C8(v3);
  }
  int v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100433AB0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 80);
  *a2 = *(void *)(result + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100433AD4(Registry **a1)
{
  uint64_t result = capabilities::ct::supportsHydra((capabilities::ct *)a1);
  if (!result) {
    return result;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(a1[9]);
  int v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    int v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v14 = v5;
  unint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v14);
  if (!v9)
  {
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = v9[3];
  long long v10 = (std::__shared_weak_count *)v9[4];
  if (!v10)
  {
LABEL_9:
    std::mutex::unlock(v4);
    long long v10 = 0;
    char v12 = 1;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
LABEL_10:
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 128))(v11);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  return (v13 & 0x10) == 0 || (v13 & 0xFF00000000) == 0;
}

void sub_100433BF4(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100433C2C(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  char v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    int v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v13);
  if (v7)
  {
    uint64_t v9 = v7[3];
    unsigned int v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  unsigned int v8 = 0;
  char v10 = 1;
  if (!v9)
  {
LABEL_7:
    uint64_t v11 = 1;
    if (v10) {
      return v11;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 160))(v9);
  if ((v10 & 1) == 0) {
LABEL_12:
  }
    sub_10004D2C8(v8);
  return v11;
}

void sub_100433D44(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100433D60(capabilities::ct *a1)
{
  int v1 = capabilities::ct::defaultVinylSlotID(a1);

  return VinylSlotIdFromInt(v1);
}

uint64_t sub_100433D90(uint64_t a1, int a2)
{
  if (a2 != 2) {
    return 1;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v14 = v4;
  unsigned int v8 = sub_10004D37C(&v3[1].__m_.__sig, &v14);
  if (v8)
  {
    uint64_t v10 = v8[3];
    uint64_t v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  uint64_t v9 = 0;
  char v11 = 1;
LABEL_10:
  unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 128))(v10);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  if ((v12 & 0xFF00000000) != 0) {
    return (v12 >> 2) & 1;
  }
  return 1;
}

void sub_100433EB0(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100433ECC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, CFArrayRef *a7@<X6>, CFDictionaryRef *a8@<X8>)
{
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
LABEL_11:
    *a8 = 0;
    return;
  }
  long long v84 = 0u;
  long long v85 = 0u;
  MCC::MCC();
  long long v82 = 0u;
  long long v83 = 0u;
  MNC::MNC();
  long long v80 = 0uLL;
  uint64_t v81 = 0;
  formPLMN((const MCC *)&v84, (const MNC *)&v82);
  *(void *)size_t v79 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    long long v17 = *(__CFDictionary **)v79;
    *(void *)size_t v79 = Mutable;
    __p[0] = v17;
    sub_10005717C((const void **)__p);
  }
  if (SHIBYTE(v81) < 0)
  {
    sub_10004FC84(__dst, (void *)v80, *((unint64_t *)&v80 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = v80;
    long long v78 = v81;
  }
  if (SHIBYTE(v78) < 0)
  {
    sub_10004FC84(v51, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)int v51 = *(_OWORD *)__dst;
    v52[0] = v78;
  }
  v58[0] = 0;
  if (SHIBYTE(v52[0]) < 0)
  {
    sub_10004FC84(__p, v51[0], (unint64_t)v51[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v51;
    v62[0] = v52[0];
  }
  *(void *)&long long v87 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v18 = v58[0];
    v58[0] = (void *)v87;
    *(void *)&long long v89 = v18;
    sub_1000558F4((const void **)&v89);
  }
  if (SHIBYTE(v62[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v92 = v58[0];
  v58[0] = 0;
  sub_1000558F4((const void **)v58);
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
  sub_10010F3F0(*(__CFDictionary **)v79, (void *)qword_101B13EC0, (uint64_t)v92);
  sub_1000558F4((const void **)&v92);
  if (SHIBYTE(v78) < 0) {
    operator delete(__dst[0]);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(v75, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)int v75 = *(_OWORD *)a4;
    size_t v76 = *(void **)(a4 + 16);
  }
  if (SHIBYTE(v76) < 0)
  {
    sub_10004FC84(v51, v75[0], (unint64_t)v75[1]);
  }
  else
  {
    *(_OWORD *)int v51 = *(_OWORD *)v75;
    v52[0] = v76;
  }
  v58[0] = 0;
  if (SHIBYTE(v52[0]) < 0)
  {
    sub_10004FC84(__p, v51[0], (unint64_t)v51[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v51;
    v62[0] = v52[0];
  }
  *(void *)&long long v87 = 0;
  if (ctu::cf::convert_copy())
  {
    int v19 = v58[0];
    v58[0] = (void *)v87;
    *(void *)&long long v89 = v19;
    sub_1000558F4((const void **)&v89);
  }
  if (SHIBYTE(v62[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v92 = v58[0];
  v58[0] = 0;
  sub_1000558F4((const void **)v58);
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
  sub_10010F3F0(*(__CFDictionary **)v79, @"GID1", (uint64_t)v92);
  sub_1000558F4((const void **)&v92);
  if (SHIBYTE(v76) < 0) {
    operator delete(v75[0]);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(v73, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)size_t v73 = *(_OWORD *)a5;
    unsigned __int8 v74 = *(void **)(a5 + 16);
  }
  if (SHIBYTE(v74) < 0)
  {
    sub_10004FC84(v51, v73[0], (unint64_t)v73[1]);
  }
  else
  {
    *(_OWORD *)int v51 = *(_OWORD *)v73;
    v52[0] = v74;
  }
  v58[0] = 0;
  if (SHIBYTE(v52[0]) < 0)
  {
    sub_10004FC84(__p, v51[0], (unint64_t)v51[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v51;
    v62[0] = v52[0];
  }
  *(void *)&long long v87 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v20 = v58[0];
    v58[0] = (void *)v87;
    *(void *)&long long v89 = v20;
    sub_1000558F4((const void **)&v89);
  }
  if (SHIBYTE(v62[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v92 = v58[0];
  v58[0] = 0;
  sub_1000558F4((const void **)v58);
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
  sub_10010F3F0(*(__CFDictionary **)v79, @"GID2", (uint64_t)v92);
  sub_1000558F4((const void **)&v92);
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    unint64_t v21 = *(void *)(a6 + 8);
    if (!v21) {
      goto LABEL_80;
    }
    sub_10004FC84(v71, *(void **)a6, v21);
  }
  else
  {
    if (!*(unsigned char *)(a6 + 23)) {
      goto LABEL_80;
    }
    *(_OWORD *)uint64_t v71 = *(_OWORD *)a6;
    long long v72 = *(void **)(a6 + 16);
  }
  if (SHIBYTE(v72) < 0)
  {
    sub_10004FC84(v51, v71[0], (unint64_t)v71[1]);
  }
  else
  {
    *(_OWORD *)int v51 = *(_OWORD *)v71;
    v52[0] = v72;
  }
  v58[0] = 0;
  if (SHIBYTE(v52[0]) < 0)
  {
    sub_10004FC84(__p, v51[0], (unint64_t)v51[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v51;
    v62[0] = v52[0];
  }
  *(void *)&long long v87 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v22 = v58[0];
    v58[0] = (void *)v87;
    *(void *)&long long v89 = v22;
    sub_1000558F4((const void **)&v89);
  }
  if (SHIBYTE(v62[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v92 = v58[0];
  v58[0] = 0;
  sub_1000558F4((const void **)v58);
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
  sub_10010F3F0(*(__CFDictionary **)v79, (void *)qword_101B13EB8, (uint64_t)v92);
  sub_1000558F4((const void **)&v92);
  if (SHIBYTE(v72) < 0) {
    operator delete(v71[0]);
  }
LABEL_80:
  uint64_t v70 = 0;
  long long v68 = 0u;
  *(_OWORD *)uint64_t v69 = 0u;
  long long v66 = 0u;
  *(_OWORD *)uint64_t v67 = 0u;
  *(_OWORD *)__int16 v64 = 0u;
  *(_OWORD *)uint64_t v65 = 0u;
  *(_OWORD *)size_t v62 = 0u;
  long long v63 = 0u;
  *(_OWORD *)long long __p = 0u;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v24 = ServiceMap;
  if (v25 < 0)
  {
    uint64_t v26 = (unsigned __int8 *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v27 = 5381;
    do
    {
      uint64_t v25 = v27;
      unsigned int v28 = *v26++;
      uint64_t v27 = (33 * v27) ^ v28;
    }
    while (v28);
  }
  std::mutex::lock(ServiceMap);
  v51[0] = (void *)v25;
  uint64_t v29 = sub_10004D37C(&v24[1].__m_.__sig, (unint64_t *)v51);
  if (!v29)
  {
    uint64_t v31 = 0;
    goto LABEL_87;
  }
  uint64_t v31 = v29[3];
  uint64_t v30 = (std::__shared_weak_count *)v29[4];
  if (!v30)
  {
LABEL_87:
    std::mutex::unlock(v24);
    uint64_t v30 = 0;
    char v32 = 1;
    goto LABEL_88;
  }
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v24);
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v30);
  char v32 = 0;
LABEL_88:
  sub_10004EFE4(&v60, (CFTypeRef *)v79);
  (*(void (**)(void **__return_ptr, uint64_t, const void **))(*(void *)v31 + 32))(__p, v31, &v60);
  sub_100057D78(&v60);
  if ((v32 & 1) == 0) {
    sub_10004D2C8(v30);
  }
  v58[0] = 0;
  v58[1] = 0;
  uint64_t v59 = 0;
  if (SHIBYTE(v70) < 0)
  {
    sub_10004FC84(v58, v69[0], (unint64_t)v69[1]);
  }
  else
  {
    *(_OWORD *)size_t v58 = *(_OWORD *)v69;
    uint64_t v59 = v70;
  }
  *(_OWORD *)uint64_t v56 = 0u;
  long long v57 = 0u;
  *(_OWORD *)uint64_t v54 = 0u;
  long long v55 = 0u;
  *(_OWORD *)uint64_t v53 = 0u;
  *(_OWORD *)int v51 = 0u;
  memset(v52, 0, sizeof(v52));
  sub_100029158((char *)v51, (long long *)__p);
  uint64_t v33 = (void *)HIBYTE(v59);
  if (v59 < 0) {
    uint64_t v33 = v58[1];
  }
  if (v33)
  {
    CFDictionaryRef theDict = 0;
    Registry::getFileSystemInterface((uint64_t *)&v89, *(Registry **)(a1 + 72));
    (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)v89 + 152))(&theDict);
    if (*((void *)&v89 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v89 + 1));
    }
    if (theDict) {
      int v34 = sub_100080778;
    }
    else {
      int v34 = 0;
    }
    if (v34 && (*a7 ? (long long v35 = sub_100083F10) : (long long v35 = 0), v35))
    {
      CFDictionaryRef v49 = 0;
      CFDictionaryRef v36 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v36)
      {
        CFDictionaryRef v37 = v49;
        CFDictionaryRef v49 = v36;
        *(void *)&long long v89 = v37;
        sub_10005717C((const void **)&v89);
      }
      CFIndex Count = CFArrayGetCount(*a7);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(*a7, i);
          long long v41 = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeID v42 = CFGetTypeID(ValueAtIndex);
            if (v42 != CFStringGetTypeID()) {
              long long v41 = 0;
            }
          }
          CFDictionaryRef Value = CFDictionaryGetValue(theDict, v41);
          if (Value)
          {
            sub_1004486E0(v49, v41, (uint64_t)Value);
          }
          else if (CFEqual(v41, @"BundleIdentifier"))
          {
            uint64_t v48 = 0;
            if (SHIBYTE(v52[3]) < 0)
            {
              sub_10004FC84(v46, v52[1], (unint64_t)v52[2]);
            }
            else
            {
              *(_OWORD *)int v46 = *(_OWORD *)&v52[1];
              uint64_t v47 = v52[3];
            }
            if (SHIBYTE(v47) < 0)
            {
              sub_10004FC84(&v87, v46[0], (unint64_t)v46[1]);
            }
            else
            {
              long long v87 = *(_OWORD *)v46;
              uint64_t v88 = v47;
            }
            uint64_t v86 = 0;
            if (SHIBYTE(v88) < 0)
            {
              sub_10004FC84(&v89, (void *)v87, *((unint64_t *)&v87 + 1));
            }
            else
            {
              long long v89 = v87;
              long long v90 = v88;
            }
            long long v91 = 0;
            if (ctu::cf::convert_copy())
            {
              int v44 = v86;
              uint64_t v86 = v91;
              std::string::size_type v92 = v44;
              sub_1000558F4((const void **)&v92);
            }
            if (SHIBYTE(v90) < 0) {
              operator delete((void *)v89);
            }
            uint64_t v48 = (uint64_t)v86;
            uint64_t v86 = 0;
            sub_1000558F4((const void **)&v86);
            if (SHIBYTE(v88) < 0) {
              operator delete((void *)v87);
            }
            if (SHIBYTE(v47) < 0) {
              operator delete(v46[0]);
            }
            sub_10010F3F0(v49, v41, v48);
            sub_1000558F4((const void **)&v48);
          }
        }
      }
      if (CFDictionaryGetCount(v49))
      {
        *a8 = 0;
        CFDictionaryRef v45 = v49;
        CFDictionaryRef v49 = 0;
      }
      else
      {
        CFDictionaryRef v45 = 0;
      }
      *a8 = v45;
      sub_10005717C((const void **)&v49);
    }
    else
    {
      *a8 = 0;
    }
    sub_100057D78((const void **)&theDict);
  }
  else
  {
    *a8 = 0;
  }
  if (SBYTE7(v57) < 0) {
    operator delete(v56[0]);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[1]);
  }
  if (SHIBYTE(v54[0]) < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(v52[3]) < 0) {
    operator delete(v52[1]);
  }
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(v58[0]);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (SBYTE7(v68) < 0) {
    operator delete(v67[0]);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[1]);
  }
  if (SHIBYTE(v65[0]) < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v63) < 0) {
    operator delete(v62[1]);
  }
  if (SHIBYTE(v62[0]) < 0) {
    operator delete(__p[0]);
  }
  sub_10005717C((const void **)v79);
  if (SHIBYTE(v81) < 0) {
    operator delete((void *)v80);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(*((void **)&v82 + 1));
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(*((void **)&v84 + 1));
  }
}

void sub_100434970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, const void *a16, const void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  sub_1000558F4((const void **)(v73 - 168));
  if (*(char *)(v73 - 137) < 0) {
    operator delete(*(void **)(v73 - 160));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10005717C(&a16);
  sub_100057D78(&a17);
  sub_10039A890((uint64_t)&a18);
  if (a39 < 0) {
    operator delete(a34);
  }
  sub_10015C5A0((uint64_t)&a41);
  sub_10005717C(&a72);
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a73);
  }
  if (*(char *)(v73 - 209) < 0) {
    operator delete(*(void **)(v73 - 232));
  }
  if (*(char *)(v73 - 177) < 0) {
    operator delete(*(void **)(v73 - 200));
  }
  _Unwind_Resume(a1);
}

const void **sub_100434C48@<X0>(const void **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, void *a8@<X8>)
{
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (!v9) {
    goto LABEL_18;
  }
  uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  if (v11)
  {
    uint64_t v17 = (uint64_t)result;
    *(_OWORD *)values = *(_OWORD *)off_1019CC218;
    CFArrayRef v18 = CFArrayCreate(kCFAllocatorDefault, (const void **)values, 2, &kCFTypeArrayCallBacks);
    CFDictionaryRef theDict = 0;
    CFArrayRef v25 = v18;
    CFArrayRef v23 = v18;
    if (v18) {
      CFRetain(v18);
    }
    sub_100433ECC(v17, a2, a3, a4, a5, a6, &v23, (CFDictionaryRef *)&v26);
    sub_10004EFE4(&theDict, (CFTypeRef *)&v26);
    sub_10005717C((const void **)&v26);
    sub_100044D00((const void **)&v23);
    if (theDict) {
      int v19 = sub_100080778;
    }
    else {
      int v19 = 0;
    }
    if (!v19
      || a7
      && (Value = (const __CFString *)CFDictionaryGetValue(theDict, @"BundleIdentifier"), (CFStringRef v21 = Value) != 0)
      && (CFTypeID v22 = CFGetTypeID(Value), v22 == CFStringGetTypeID())
      && CFEqual(v21, @"com.apple.Unknown"))
    {
      *a8 = 0;
      a8[1] = 0;
      a8[2] = 0;
    }
    else
    {
      CFDictionaryGetValue(theDict, @"CarrierName");
      long long v26 = 0uLL;
      uint64_t v27 = 0;
      ctu::cf::assign();
      *(_OWORD *)a8 = v26;
      a8[2] = v27;
    }
    sub_100057D78((const void **)&theDict);
    return sub_100044D00((const void **)&v25);
  }
  else
  {
LABEL_18:
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
  return result;
}

void sub_100434E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a10);
  sub_100044D00(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_100434EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (!v6) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8) {
    return 0;
  }
  values = @"PreferCarrierNameFromMetadata";
  CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v25 = v14;
  CFArrayRef v23 = v14;
  if (v14) {
    CFRetain(v14);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v23, (CFDictionaryRef *)buf);
  sub_10004EFE4(&theDict, (CFTypeRef *)buf);
  sub_10005717C((const void **)buf);
  sub_100044D00((const void **)&v23);
  if (theDict) {
    uint64_t v15 = sub_100080778;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 && CFDictionaryContainsKey(theDict, @"PreferCarrierNameFromMetadata"))
  {
    CFStringRef Value = CFDictionaryGetValue(theDict, @"PreferCarrierNameFromMetadata");
    BOOL v17 = (BOOL)Value;
    buf[0] = 0;
    if (Value)
    {
      CFTypeID v18 = CFGetTypeID(Value);
      if (v18 == CFBooleanGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)buf, (BOOL *)v17, v19);
        BOOL v17 = buf[0] != 0;
      }
      else
      {
        BOOL v17 = 0;
      }
    }
    sub_100433878();
    uint64_t v20 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v21 = "no";
      if (v17) {
        CFStringRef v21 = "yes";
      }
      *(_DWORD *)CSIPhoneNumber buf = 136315138;
      uint64_t v27 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Carrier prefers name from metadata: [%s]", buf, 0xCu);
    }
  }
  else
  {
    BOOL v17 = 0;
  }
  sub_100057D78((const void **)&theDict);
  sub_100044D00((const void **)&v25);
  return v17;
}

void sub_1004350E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100435140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  values = @"iCloudAddOnPlanFlowType";
  CFArrayRef v12 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v32 = v12;
  CFArrayRef v30 = v12;
  if (v12) {
    CFRetain(v12);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v30, (CFDictionaryRef *)buf);
  sub_10004EFE4(&theDict, (CFTypeRef *)buf);
  sub_10005717C((const void **)buf);
  sub_100044D00((const void **)&v30);
  if (theDict) {
    unint64_t v13 = sub_100080778;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 && CFDictionaryContainsKey(theDict, @"iCloudAddOnPlanFlowType"))
  {
    CFDictionaryGetValue(theDict, @"iCloudAddOnPlanFlowType");
    memset(buf, 0, sizeof(buf));
    int64_t v35 = 0;
    ctu::cf::assign();
    uint64_t v29 = v35;
    *(_OWORD *)long long __p = *(_OWORD *)buf;
    unint64_t v14 = HIBYTE(v35);
    int v15 = SHIBYTE(v35);
    if (v35 < 0) {
      unint64_t v14 = *(void *)&buf[8];
    }
    if (v14 == 15)
    {
      if (v35 >= 0) {
        CFStringRef v21 = (unint64_t *)__p;
      }
      else {
        CFStringRef v21 = (unint64_t *)__p[0];
      }
      unint64_t v22 = 0x456E7469746C656DLL;
      unint64_t v23 = bswap64(*v21);
      if (v23 == 0x456E7469746C656DLL
        && (unint64_t v22 = 0x6D656E74466C6F77,
            unint64_t v23 = bswap64(*(unint64_t *)((char *)v21 + 7)),
            v23 == 0x6D656E74466C6F77))
      {
        int v24 = 0;
      }
      else if (v23 < v22)
      {
        int v24 = -1;
      }
      else
      {
        int v24 = 1;
      }
      uint64_t v20 = 2 * (v24 == 0);
    }
    else if (v14 == 14)
    {
      unint64_t v16 = (void **)__p[0];
      if (v35 >= 0) {
        unint64_t v16 = __p;
      }
      BOOL v17 = *v16;
      uint64_t v18 = *(uint64_t *)((char *)v16 + 6);
      uint64_t v20 = v17 == (void *)0x7461726765746E49 && v18 == 0x776F6C4664657461;
    }
    else
    {
      uint64_t v20 = 0;
    }
    sub_100433878();
    CFArrayRef v25 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = asString();
      *(_DWORD *)CSIPhoneNumber buf = 136315138;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I iCloud add on plan flow type: [%s]", buf, 0xCu);
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  sub_100057D78((const void **)&theDict);
  sub_100044D00((const void **)&v32);
  return v20;
}

void sub_1004353FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, const void *a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a15);
  sub_100044D00(&a16);
  _Unwind_Resume(a1);
}

void sub_100435478()
{
}

BOOL sub_100435480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDictionaryRef theDict = 0;
  sub_100058DB0(__p, "");
  sub_10043570C(a1, a2, a3, a4, a5, (uint64_t)__p, &theDict);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (theDict) {
    uint64_t v10 = sub_100080778;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularDataPlanSettings");
    CFDictionaryRef v12 = Value;
    __p[0] = Value;
    if (Value)
    {
      unint64_t v13 = sub_100080778;
      CFRetain(Value);
    }
    else
    {
      unint64_t v13 = 0;
    }
    if (v13)
    {
      if (CFDictionaryContainsKey(v12, @"RequiresPeriodicProfileEnablement"))
      {
        unint64_t v16 = CFDictionaryGetValue((CFDictionaryRef)__p[0], @"RequiresPeriodicProfileEnablement");
        BOOL v15 = (BOOL)v16;
        v22[0] = 0;
        if (!v16)
        {
LABEL_22:
          sub_100057D78((const void **)__p);
          goto LABEL_23;
        }
        CFTypeID v17 = CFGetTypeID(v16);
        if (v17 == CFBooleanGetTypeID())
        {
          ctu::cf::assign((ctu::cf *)v22, (BOOL *)v15, v18);
          BOOL v15 = v22[0] != 0;
          goto LABEL_22;
        }
LABEL_21:
        BOOL v15 = 0;
        goto LABEL_22;
      }
      sub_100433878();
      CFBooleanRef v19 = qword_101B0CE20;
      if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_WORD *)unint64_t v22 = 0;
      uint64_t v20 = "RequiresPeriodicProfileEnablement not present in CB entitlements";
    }
    else
    {
      sub_100433878();
      CFBooleanRef v19 = qword_101B0CE20;
      if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_WORD *)unint64_t v22 = 0;
      uint64_t v20 = "failed loading CB entitlements";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v20, v22, 2u);
    goto LABEL_21;
  }
  sub_100433878();
  unint64_t v14 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed loading CB", (uint8_t *)__p, 2u);
  }
  BOOL v15 = 0;
LABEL_23:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_1004356C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
}

const void **sub_10043570C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  values = @"CellularDataPlanSettings";
  CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v30 = v14;
  CFArrayRef v28 = v14;
  if (v14) {
    CFRetain(v14);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v28, &theDict);
  sub_100044D00((const void **)&v28);
  value = 0;
  if (theDict) {
    BOOL v15 = sub_1000C06D0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularDataPlanSettings");
    CFDictionaryRef v17 = v16;
    if (v16 && (CFTypeID v18 = CFGetTypeID(v16), v18 == CFDictionaryGetTypeID()))
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v17);
      uint64_t v20 = value;
      value = MutableCopy;
      *(void *)CSIPhoneNumber buf = v20;
      sub_10005717C((const void **)buf);
    }
    else
    {
      sub_100433878();
      CFStringRef v21 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CSIPhoneNumber buf = 138412290;
        *(void *)&uint8_t buf[4] = @"CellularDataPlanSettings";
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Type for %@ not as expected", buf, 0xCu);
      }
    }
  }
  CFMutableDictionaryRef v26 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v23 = v26;
    CFMutableDictionaryRef v26 = Mutable;
    *(void *)CSIPhoneNumber buf = v23;
    sub_10005717C((const void **)buf);
  }
  if (value) {
    char v24 = sub_1000C06D0;
  }
  else {
    char v24 = 0;
  }
  if (v24) {
    CFDictionaryAddValue(v26, @"CellularDataPlanSettings", value);
  }
  sub_10004EFE4(a7, (CFTypeRef *)&v26);
  sub_10005717C((const void **)&v26);
  sub_10005717C((const void **)&value);
  sub_10005717C((const void **)&theDict);
  return sub_100044D00((const void **)&v30);
}

void sub_100435960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, const void *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  unsigned int v7 = va_arg(va2, const void *);
  sub_10005717C((const void **)va);
  sub_10005717C((const void **)va1);
  sub_100044D00((const void **)va2);
  _Unwind_Resume(a1);
}

BOOL sub_1004359C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  CFDictionaryRef theDict = 0;
  CFTypeID v18 = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 224))(&theDict);
  if (theDict) {
    unsigned int v7 = sub_100080778;
  }
  else {
    unsigned int v7 = 0;
  }
  if (!v7)
  {
    sub_100433878();
    CFDictionaryRef v12 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    if (*((char *)a6 + 23) >= 0) {
      unint64_t v13 = a6;
    }
    else {
      unint64_t v13 = (uint64_t *)*a6;
    }
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    uint64_t v20 = v13;
    CFArrayRef v14 = "failed loading CB entitlements for ICCID: [%s]";
LABEL_21:
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
    goto LABEL_15;
  }
  if (!CFDictionaryContainsKey(theDict, @"SupportManageAccountUrlOverEntitlement"))
  {
    sub_100433878();
    CFDictionaryRef v12 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    if (*((char *)a6 + 23) >= 0) {
      CFDictionaryRef v16 = a6;
    }
    else {
      CFDictionaryRef v16 = (uint64_t *)*a6;
    }
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    uint64_t v20 = v16;
    CFArrayRef v14 = "SupportManageAccountUrlOverEntitlement not present in CB entitlements for ICCID: [%s]";
    goto LABEL_21;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"SupportManageAccountUrlOverEntitlement");
  BOOL v9 = (BOOL)Value;
  buf[0] = 0;
  if (Value)
  {
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)buf, (BOOL *)v9, v11);
      BOOL v9 = buf[0] != 0;
      goto LABEL_16;
    }
LABEL_15:
    BOOL v9 = 0;
  }
LABEL_16:
  sub_100057D78(&v18);
  sub_100057D78((const void **)&theDict);
  return v9;
}

void sub_100435B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

BOOL sub_100435BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  CFDictionaryRef theDict = 0;
  CFTypeID v18 = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 224))(&theDict);
  if (theDict) {
    unsigned int v7 = sub_100080778;
  }
  else {
    unsigned int v7 = 0;
  }
  if (!v7)
  {
    sub_100433878();
    CFDictionaryRef v12 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      BOOL v9 = 1;
      goto LABEL_16;
    }
    if (*((char *)a6 + 23) >= 0) {
      unint64_t v13 = a6;
    }
    else {
      unint64_t v13 = (uint64_t *)*a6;
    }
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    uint64_t v20 = v13;
    CFArrayRef v14 = "failed loading CB entitlements for ICCID: [%s]";
LABEL_22:
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
    goto LABEL_15;
  }
  if (!CFDictionaryContainsKey(theDict, @"SupportsEligibilityOniPhoneForAddOnPlan"))
  {
    sub_100433878();
    CFDictionaryRef v12 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    if (*((char *)a6 + 23) >= 0) {
      CFDictionaryRef v16 = a6;
    }
    else {
      CFDictionaryRef v16 = (uint64_t *)*a6;
    }
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    uint64_t v20 = v16;
    CFArrayRef v14 = "SupportsEligibilityOniPhoneForAddOnPlan not present in CB entitlements for ICCID: [%s]";
    goto LABEL_22;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"SupportsEligibilityOniPhoneForAddOnPlan");
  BOOL v9 = (BOOL)Value;
  buf[0] = 0;
  if (Value)
  {
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)buf, (BOOL *)v9, v11);
      BOOL v9 = buf[0] != 0;
    }
    else
    {
      BOOL v9 = 0;
    }
  }
LABEL_16:
  sub_100057D78(&v18);
  sub_100057D78((const void **)&theDict);
  return v9;
}

void sub_100435D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

const void **sub_100435DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  CFDictionaryRef theDict = 0;
  sub_10043570C(a1, a2, a3, a4, a5, a6, &theDict);
  if (theDict) {
    BOOL v9 = sub_100080778;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularDataPlanSettings");
    CFDictionaryRef v11 = Value;
    CFDictionaryRef v27 = Value;
    if (Value)
    {
      CFDictionaryRef v12 = sub_100080778;
      CFRetain(Value);
    }
    else
    {
      CFDictionaryRef v12 = 0;
    }
    if (v12)
    {
      if (CFDictionaryContainsKey(v11, @"CellularDataPlanAccountURLForESim"))
      {
        CFDictionaryGetValue(v27, @"CellularDataPlanAccountURLForESim");
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        uint64_t v16 = *(void *)buf;
        uint64_t v15 = *(void *)&buf[8];
        uint64_t v17 = *(void *)&buf[15];
        *(void *)a7 = *(void *)buf;
        *(void *)(a7 + 8) = v15;
        *(void *)(a7 + 15) = v17;
        int v18 = (char)buf[23];
        *(unsigned char *)(a7 + 23) = buf[23];
        sub_100433878();
        CFBooleanRef v19 = qword_101B0CE20;
        if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a6 + 23) >= 0) {
            uint64_t v20 = a6;
          }
          else {
            uint64_t v20 = *(void *)a6;
          }
          if (v18 >= 0) {
            uint64_t v21 = a7;
          }
          else {
            uint64_t v21 = v16;
          }
          *(_DWORD *)CSIPhoneNumber buf = 136315394;
          *(void *)&uint8_t buf[4] = v20;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I CellularDataPlanAccountURLForESim for iccid: [%s] is [%s]", buf, 0x16u);
        }
        goto LABEL_29;
      }
      sub_100433878();
      unint64_t v22 = qword_101B0CE20;
      if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
LABEL_29:
        sub_100057D78((const void **)&v27);
        return sub_100057D78((const void **)&theDict);
      }
      if (*(char *)(a6 + 23) >= 0) {
        uint64_t v26 = a6;
      }
      else {
        uint64_t v26 = *(void *)a6;
      }
      *(_DWORD *)CSIPhoneNumber buf = 136315138;
      *(void *)&uint8_t buf[4] = v26;
      char v24 = "CellularDataPlanAccountURLForESim not present in CB CellularDataPlanSettings for ICCID: [%s]";
    }
    else
    {
      sub_100433878();
      unint64_t v22 = qword_101B0CE20;
      if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      if (*(char *)(a6 + 23) >= 0) {
        uint64_t v23 = a6;
      }
      else {
        uint64_t v23 = *(void *)a6;
      }
      *(_DWORD *)CSIPhoneNumber buf = 136315138;
      *(void *)&uint8_t buf[4] = v23;
      char v24 = "failed loading CB entitlements for ICCID: [%s]";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v24, buf, 0xCu);
    goto LABEL_29;
  }
  sub_100433878();
  unint64_t v13 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v14 = a6;
    }
    else {
      uint64_t v14 = *(void *)a6;
    }
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "failed loading CB for ICCID: [%s]", buf, 0xCu);
  }
  return sub_100057D78((const void **)&theDict);
}

void sub_1004360A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

BOOL sub_100436134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFDictionaryRef theDict = 0;
  sub_10043570C(a1, a2, a3, a4, a5, a6, &theDict);
  if (theDict) {
    unsigned int v7 = sub_100080778;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularDataPlanSettings");
    CFDictionaryRef v9 = Value;
    CFDictionaryRef v22 = Value;
    if (Value)
    {
      CFTypeID v10 = sub_100080778;
      CFRetain(Value);
    }
    else
    {
      CFTypeID v10 = 0;
    }
    if (v10)
    {
      if (CFDictionaryContainsKey(v9, @"CellularPlanStatusFromPlanExpiryDetection"))
      {
        unint64_t v13 = CFDictionaryGetValue(v22, @"CellularPlanStatusFromPlanExpiryDetection");
        BOOL v12 = (BOOL)v13;
        buf[0] = 0;
        if (!v13)
        {
LABEL_22:
          sub_100057D78((const void **)&v22);
          goto LABEL_23;
        }
        CFTypeID v14 = CFGetTypeID(v13);
        if (v14 == CFBooleanGetTypeID())
        {
          ctu::cf::assign((ctu::cf *)buf, (BOOL *)v12, v15);
          BOOL v12 = buf[0] != 0;
          goto LABEL_22;
        }
LABEL_21:
        BOOL v12 = 0;
        goto LABEL_22;
      }
      sub_100433878();
      uint64_t v16 = qword_101B0CE20;
      if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      if (*(char *)(a6 + 23) >= 0) {
        uint64_t v21 = a6;
      }
      else {
        uint64_t v21 = *(void *)a6;
      }
      *(_DWORD *)CSIPhoneNumber buf = 136315138;
      uint64_t v25 = v21;
      int v18 = "CellularPlanStatusFromPlanExpiryDetection not present in CB CellularDataPlanSettings for ICCID: [%s]";
    }
    else
    {
      sub_100433878();
      uint64_t v16 = qword_101B0CE20;
      if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      if (*(char *)(a6 + 23) >= 0) {
        uint64_t v17 = a6;
      }
      else {
        uint64_t v17 = *(void *)a6;
      }
      *(_DWORD *)CSIPhoneNumber buf = 136315138;
      uint64_t v25 = v17;
      int v18 = "failed loading CB entitlements for ICCID: [%s]";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
    goto LABEL_21;
  }
  sub_100433878();
  CFDictionaryRef v11 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v20 = a6;
    }
    else {
      uint64_t v20 = *(void *)a6;
    }
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    uint64_t v25 = v20;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed loading CB for ICCID: [%s]", buf, 0xCu);
  }
  BOOL v12 = 0;
LABEL_23:
  sub_100057D78((const void **)&theDict);
  return v12;
}

void sub_1004363A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

BOOL sub_1004363EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    if (v8)
    {
      values = @"CellularPlanProvisioningSettings";
      CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFDictionaryRef theDict = 0;
      CFArrayRef v29 = v14;
      CFArrayRef v26 = v14;
      if (v14) {
        CFRetain(v14);
      }
      sub_100433ECC(a1, a2, a3, a4, a5, a6, &v26, (CFDictionaryRef *)buf);
      sub_10004EFE4(&theDict, buf);
      sub_10005717C(buf);
      sub_100044D00((const void **)&v26);
      if (theDict) {
        CFBooleanRef v15 = sub_100080778;
      }
      else {
        CFBooleanRef v15 = 0;
      }
      if (v15)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularPlanProvisioningSettings");
        CFDictionaryRef v17 = Value;
        if (Value && (CFTypeID v18 = CFGetTypeID(Value), v18 == CFDictionaryGetTypeID()))
        {
          if (CFDictionaryContainsKey(v17, @"RequiresChinaCertOnEuiccCheck"))
          {
            CFBooleanRef v19 = CFDictionaryGetValue(v17, @"RequiresChinaCertOnEuiccCheck");
            BOOL v20 = (BOOL)v19;
            LOBYTE(buf[0]) = 0;
            if (!v19)
            {
LABEL_24:
              sub_100057D78((const void **)&theDict);
              sub_100044D00((const void **)&v29);
              return v20;
            }
            CFTypeID v21 = CFGetTypeID(v19);
            if (v21 == CFBooleanGetTypeID())
            {
              ctu::cf::assign((ctu::cf *)buf, (BOOL *)v20, v22);
              BOOL v20 = LOBYTE(buf[0]) != 0;
              goto LABEL_24;
            }
LABEL_23:
            BOOL v20 = 0;
            goto LABEL_24;
          }
          sub_100433878();
          uint64_t v23 = qword_101B0CE20;
          if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          LOWORD(buf[0]) = 0;
          char v24 = "RequiresChinaCertOnEuiccCheckKey does not exist";
        }
        else
        {
          sub_100433878();
          uint64_t v23 = qword_101B0CE20;
          if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          LOWORD(buf[0]) = 0;
          char v24 = "Failed to get dictionary";
        }
      }
      else
      {
        sub_100433878();
        uint64_t v23 = qword_101B0CE20;
        if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        LOWORD(buf[0]) = 0;
        char v24 = "Failed to side lookup";
      }
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)buf, 2u);
      goto LABEL_23;
    }
  }
  return 0;
}

void sub_100436690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  _Unwind_Resume(a1);
}

unsigned int *sub_1004366F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (!v6) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8) {
    return 0;
  }
  values = @"WaitTimeForProfileRelease";
  CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v24 = v14;
  CFArrayRef v22 = v14;
  if (v14) {
    CFRetain(v14);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v22, (CFDictionaryRef *)buf);
  sub_10004EFE4(&theDict, (CFTypeRef *)buf);
  sub_10005717C((const void **)buf);
  sub_100044D00((const void **)&v22);
  if (theDict) {
    CFBooleanRef v15 = sub_100080778;
  }
  else {
    CFBooleanRef v15 = 0;
  }
  if (v15 && CFDictionaryContainsKey(theDict, @"WaitTimeForProfileRelease"))
  {
    CFDictionaryRef Value = (unsigned int *)CFDictionaryGetValue(theDict, @"WaitTimeForProfileRelease");
    CFDictionaryRef v17 = Value;
    *(_DWORD *)CSIPhoneNumber buf = 0;
    if (Value)
    {
      CFTypeID v18 = CFGetTypeID(Value);
      if (v18 == CFNumberGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)buf, v17, v19);
        CFDictionaryRef v17 = (unsigned int *)*(unsigned int *)buf;
      }
      else
      {
        CFDictionaryRef v17 = 0;
      }
    }
    sub_100433878();
    BOOL v20 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CSIPhoneNumber buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Wait time for profile install: [%u]", buf, 8u);
    }
  }
  else
  {
    CFDictionaryRef v17 = 0;
  }
  sub_100057D78((const void **)&theDict);
  sub_100044D00((const void **)&v24);
  return v17;
}

void sub_100436904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_10043695C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v7;
  CFDictionaryRef v11 = sub_10004D37C(&v6[1].__m_.__sig, &v16);
  if (v11)
  {
    uint64_t v13 = v11[3];
    BOOL v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  BOOL v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 80))(&v15, v13, a2, 1, @"CarrierName", 0, 0);
  sub_100056248(a3, &v15);
  sub_1000577C4(&v15);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_100436A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1000577C4(&a9);
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  _Unwind_Resume(a1);
}

void sub_100436AC8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v7;
  CFDictionaryRef v11 = sub_10004D37C(&v6[1].__m_.__sig, &v16);
  if (v11)
  {
    uint64_t v13 = v11[3];
    BOOL v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  BOOL v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 80))(&v15, v13, a2, 1, @"CarrierName", 0, 0);
  sub_100056248(a3, &v15);
  sub_1000577C4(&v15);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_100436C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1000577C4(&a9);
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100436C34(uint64_t a1, uint64_t *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v7 = CFPreferencesCopyValue(@"PrimaryCsnForNewPlanAlert", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1000171E8(&cf, &v7);
  if (cf) {
    unint64_t v3 = sub_10008324C;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v3)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a2 = sub_100CCD240((CFDataRef *)&v6);
    a2[1] = v4;
    sub_100030068(&v6);
  }
  sub_100030068(&cf);
  return v3 != 0;
}

void sub_100436CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  sub_100030068((const void **)va);
  sub_100030068((const void **)va1);
  _Unwind_Resume(a1);
}

const void **sub_100436D14(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)bytes = *a2;
  CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, bytes, 16);
  CFStringRef v2 = (const __CFString *)kCommCenterPreferencesNoBackupAppID;
  CFPreferencesSetValue(@"PrimaryCsnForNewPlanAlert", v4, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  CFPreferencesSynchronize(v2, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  return sub_100030068((const void **)&v4);
}

void sub_100436DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_100436E04(uint64_t a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 56), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  CFTypeRef v7 = v6;
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x98uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC388;
  uint64_t v9 = v8 + 1;
  v11[0] = v5;
  v11[1] = (uint64_t)v7;
  sub_100857590((uint64_t)&v8[1], v11);
  sub_10004D2C8(v7);
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_7;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_7:
    sub_10004D2C8(v8);
  }
  *a2 = v9;
  a2[1] = v8;
}

void sub_100436EFC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_100436F2C(uint64_t a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  void (***v5)(Registry **__return_ptr);
  std::__shared_weak_count *v6;
  void (***v7)(Registry **__return_ptr);
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9[2];
  dispatch_object_t object;
  long long v11;

  xpc_object_t object = *a2;
  *a2 = 0;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  if (!*(void *)(a1 + 64)
    || (uint64_t v5 = *(void (****)(Registry **__return_ptr))(a1 + 56),
        (CFTypeRef v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 64))) == 0))
  {
    sub_100088B9C();
  }
  CFTypeRef v7 = v5;
  uint64_t v8 = v6;
  sub_100A04B74(&v7, &v11);
  *a4 = v11;
  CFDictionaryRef v11 = 0uLL;
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v9[1]) {
    std::__shared_weak_count::__release_weak(v9[1]);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_100436FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, dispatch_object_t object)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10043700C(capabilities::ct *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  CFTypeRef v6 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_101B0CE30, memory_order_acquire) & 1) == 0)
  {
    a1 = (capabilities::ct *)__cxa_guard_acquire(qword_101B0CE30);
    if (a1)
    {
      __cxa_atexit((void (*)(void *))sub_1004379C8, &xmmword_101B0CE40, (void *)&_mh_execute_header);
      __cxa_guard_release(qword_101B0CE30);
    }
  }
  if (!(void)xmmword_101B0CE40)
  {
    int64x2_t v86 = 0uLL;
    v87[0] = 0;
    uint64_t v8 = (capabilities::ct *)capabilities::ct::supportsRemoteCellularPlan(a1);
    if (!v8) {
      goto LABEL_57;
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 8);
    if (!v9 || (uint64_t v10 = *((void *)v6 + 7), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      sub_100088B9C();
    }
    BOOL v12 = v11;
    uint64_t v13 = *a2;
    char v14 = (std::__shared_weak_count *)operator new(0x240uLL);
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC3D8;
    uint64_t v15 = (uint64_t)&v14[1];
    object[0] = v13;
    if (v13) {
      dispatch_retain(v13);
    }
    uint64_t v88 = v10;
    v89.i64[0] = (uint64_t)v12;
    sub_100DE6A20(v15, object, &v88);
    if (v89.i64[0]) {
      sub_10004D2C8((std::__shared_weak_count *)v89.i64[0]);
    }
    if (object[0]) {
      dispatch_release(object[0]);
    }
    unint64_t v16 = (std::__shared_weak_count *)v14[2].__vftable;
    if (v16)
    {
      if (v16->__shared_owners_ != -1) {
        goto LABEL_17;
      }
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v14[1].__shared_weak_owners_ = v15;
      v14[2].__vftable = (std::__shared_weak_count_vtbl *)v14;
      std::__shared_weak_count::__release_weak(v16);
    }
    else
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v14[1].__shared_weak_owners_ = v15;
      v14[2].__vftable = (std::__shared_weak_count_vtbl *)v14;
    }
    sub_10004D2C8(v14);
LABEL_17:
    uint64_t v17 = v86.i64[1];
    if (v86.i64[1] >= v87[0])
    {
      uint64_t v19 = (v86.i64[1] - v86.i64[0]) >> 4;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60) {
        sub_10006A748();
      }
      uint64_t v21 = v87[0] - v86.i64[0];
      if ((v87[0] - v86.i64[0]) >> 3 > v20) {
        unint64_t v20 = v21 >> 3;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      long long v91 = v87;
      uint64_t v23 = (char *)sub_10006A794((uint64_t)v87, v22);
      CFArrayRef v24 = (uint64_t *)&v23[16 * v19];
      long long v90 = &v23[16 * v25];
      uint64_t *v24 = v15;
      v24[1] = (uint64_t)v14;
      CFTypeID v18 = v24 + 2;
      v89.i64[1] = (uint64_t)(v24 + 2);
      CFArrayRef v26 = (void *)v86.i64[1];
      CFDictionaryRef v27 = (void *)v86.i64[0];
      if (v86.i64[1] == v86.i64[0])
      {
        int64x2_t v29 = vdupq_n_s64(v86.u64[1]);
      }
      else
      {
        do
        {
          long long v28 = *((_OWORD *)v26 - 1);
          v26 -= 2;
          *((_OWORD *)v24 - 1) = v28;
          v24 -= 2;
          void *v26 = 0;
          v26[1] = 0;
        }
        while (v26 != v27);
        int64x2_t v29 = v86;
        CFTypeID v18 = (void *)v89.i64[1];
      }
      v86.i64[0] = (uint64_t)v24;
      v86.i64[1] = (uint64_t)v18;
      int64x2_t v89 = v29;
      CFArrayRef v30 = (char *)v87[0];
      v87[0] = v90;
      long long v90 = v30;
      uint64_t v88 = v29.i64[0];
      sub_10019E528((uint64_t)&v88);
    }
    else
    {
      *(void *)v86.i64[1] = v15;
      *(void *)(v17 + 8) = v14;
      CFTypeID v18 = (void *)(v17 + 16);
    }
    v86.i64[1] = (uint64_t)v18;
    uint64_t v31 = (std::__shared_weak_count *)*((void *)v6 + 8);
    if (!v31 || (uint64_t v32 = *((void *)v6 + 7), (v33 = std::__shared_weak_count::lock(v31)) == 0)) {
      sub_100088B9C();
    }
    int v34 = v33;
    int64_t v35 = *a2;
    CFDictionaryRef v36 = (std::__shared_weak_count *)operator new(0x190uLL);
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC428;
    uint64_t v37 = (uint64_t)&v36[1];
    object[0] = v35;
    if (v35) {
      dispatch_retain(v35);
    }
    uint64_t v88 = v32;
    v89.i64[0] = (uint64_t)v34;
    sub_100788FF4(v37, object, &v88);
    if (v89.i64[0]) {
      sub_10004D2C8((std::__shared_weak_count *)v89.i64[0]);
    }
    if (object[0]) {
      dispatch_release(object[0]);
    }
    uint64_t v8 = (capabilities::ct *)v36[2].__vftable;
    if (v8)
    {
      if (*((void *)v8 + 1) != -1)
      {
LABEL_43:
        uint64_t v38 = v86.i64[1];
        if (v86.i64[1] >= v87[0])
        {
          uint64_t v40 = (v86.i64[1] - v86.i64[0]) >> 4;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 60) {
            sub_10006A748();
          }
          uint64_t v42 = v87[0] - v86.i64[0];
          if ((v87[0] - v86.i64[0]) >> 3 > v41) {
            unint64_t v41 = v42 >> 3;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          long long v91 = v87;
          int v44 = (char *)sub_10006A794((uint64_t)v87, v43);
          CFDictionaryRef v45 = (uint64_t *)&v44[16 * v40];
          long long v90 = &v44[16 * v46];
          *CFDictionaryRef v45 = v37;
          v45[1] = (uint64_t)v36;
          uint64_t v39 = v45 + 2;
          v89.i64[1] = (uint64_t)(v45 + 2);
          uint64_t v47 = (void *)v86.i64[1];
          uint64_t v48 = (void *)v86.i64[0];
          if (v86.i64[1] == v86.i64[0])
          {
            int64x2_t v50 = vdupq_n_s64(v86.u64[1]);
          }
          else
          {
            do
            {
              long long v49 = *((_OWORD *)v47 - 1);
              v47 -= 2;
              *((_OWORD *)v45 - 1) = v49;
              v45 -= 2;
              *uint64_t v47 = 0;
              v47[1] = 0;
            }
            while (v47 != v48);
            int64x2_t v50 = v86;
            uint64_t v39 = (void *)v89.i64[1];
          }
          v86.i64[0] = (uint64_t)v45;
          v86.i64[1] = (uint64_t)v39;
          int64x2_t v89 = v50;
          int v51 = (char *)v87[0];
          v87[0] = v90;
          long long v90 = v51;
          uint64_t v88 = v50.i64[0];
          uint64_t v8 = (capabilities::ct *)sub_10019E528((uint64_t)&v88);
        }
        else
        {
          *(void *)v86.i64[1] = v37;
          *(void *)(v38 + 8) = v36;
          uint64_t v39 = (void *)(v38 + 16);
        }
        v86.i64[1] = (uint64_t)v39;
LABEL_57:
        if (capabilities::ct::supportedVinylSlotCount(v8))
        {
          uint64_t v52 = *a2;
          v84[6] = v52;
          if (v52) {
            dispatch_retain(v52);
          }
          uint64_t v53 = (std::__shared_weak_count *)*((void *)v6 + 8);
          if (v53)
          {
            uint64_t v54 = *((void *)v6 + 7);
            long long v55 = std::__shared_weak_count::lock(v53);
            if (v55)
            {
              v84[4] = v54;
              v84[5] = v55;
              sub_1000C1704(object);
            }
          }
          sub_100088B9C();
        }
        if (!capabilities::ct::supportsRegisteredIDSService(0))
        {
LABEL_91:
          long long v78 = *a2;
          v84[3] = v78;
          if (v78) {
            dispatch_retain(v78);
          }
          memset(v84, 0, 24);
          sub_10037A8D0(v84, v86.i64[0], (void *)v86.i64[1], (v86.i64[1] - v86.i64[0]) >> 4);
          sub_100376AB0();
        }
        uint64_t v56 = (std::__shared_weak_count *)*((void *)v6 + 8);
        if (!v56 || (v57 = *((void *)v6 + 7), (size_t v58 = std::__shared_weak_count::lock(v56)) == 0)) {
          sub_100088B9C();
        }
        uint64_t v59 = v58;
        uint64_t v60 = *a2;
        size_t v61 = (std::__shared_weak_count *)operator new(0x1A0uLL);
        v61->__shared_owners_ = 0;
        v61->__shared_weak_owners_ = 0;
        v61->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC478;
        uint64_t v62 = (uint64_t)&v61[1];
        object[0] = v60;
        if (v60) {
          dispatch_retain(v60);
        }
        uint64_t v88 = v57;
        v89.i64[0] = (uint64_t)v59;
        sub_100813274(v62, object, &v88);
        if (v89.i64[0]) {
          sub_10004D2C8((std::__shared_weak_count *)v89.i64[0]);
        }
        if (object[0]) {
          dispatch_release(object[0]);
        }
        long long v63 = (std::__shared_weak_count *)v61[2].__vftable;
        if (v63)
        {
          if (v63->__shared_owners_ != -1)
          {
LABEL_77:
            uint64_t v64 = v86.i64[1];
            if (v86.i64[1] >= v87[0])
            {
              uint64_t v66 = (v86.i64[1] - v86.i64[0]) >> 4;
              unint64_t v67 = v66 + 1;
              if ((unint64_t)(v66 + 1) >> 60) {
                sub_10006A748();
              }
              uint64_t v68 = v87[0] - v86.i64[0];
              if ((v87[0] - v86.i64[0]) >> 3 > v67) {
                unint64_t v67 = v68 >> 3;
              }
              if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v69 = v67;
              }
              long long v91 = v87;
              uint64_t v70 = (char *)sub_10006A794((uint64_t)v87, v69);
              long long v72 = (uint64_t *)&v70[16 * v66];
              uint64_t *v72 = v62;
              v72[1] = (uint64_t)v61;
              atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v65 = v72 + 2;
              uint64_t v73 = (void *)v86.i64[1];
              unsigned __int8 v74 = (void *)v86.i64[0];
              if (v86.i64[1] == v86.i64[0])
              {
                int64x2_t v76 = vdupq_n_s64(v86.u64[1]);
              }
              else
              {
                do
                {
                  long long v75 = *((_OWORD *)v73 - 1);
                  v73 -= 2;
                  *((_OWORD *)v72 - 1) = v75;
                  v72 -= 2;
                  *uint64_t v73 = 0;
                  v73[1] = 0;
                }
                while (v73 != v74);
                int64x2_t v76 = v86;
              }
              v86.i64[0] = (uint64_t)v72;
              v86.i64[1] = (uint64_t)v65;
              int64x2_t v89 = v76;
              unsigned __int8 v77 = (char *)v87[0];
              v87[0] = &v70[16 * v71];
              long long v90 = v77;
              uint64_t v88 = v76.i64[0];
              sub_10019E528((uint64_t)&v88);
            }
            else
            {
              *(void *)v86.i64[1] = v62;
              *(void *)(v64 + 8) = v61;
              atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v65 = (void *)(v64 + 16);
            }
            v86.i64[1] = (uint64_t)v65;
            sub_10004D2C8(v61);
            goto LABEL_91;
          }
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v61->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v61[1].__shared_weak_owners_ = v62;
          v61[2].__vftable = (std::__shared_weak_count_vtbl *)v61;
          std::__shared_weak_count::__release_weak(v63);
        }
        else
        {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v61->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v61[1].__shared_weak_owners_ = v62;
          v61[2].__vftable = (std::__shared_weak_count_vtbl *)v61;
        }
        sub_10004D2C8(v61);
        goto LABEL_77;
      }
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v36[1].__shared_weak_owners_ = v37;
      v36[2].__vftable = (std::__shared_weak_count_vtbl *)v36;
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
    else
    {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v36[1].__shared_weak_owners_ = v37;
      v36[2].__vftable = (std::__shared_weak_count_vtbl *)v36;
    }
    sub_10004D2C8(v36);
    goto LABEL_43;
  }
  if (*a3)
  {
    uint64_t v79 = xmmword_101B0CE40;
    long long v80 = (std::__shared_weak_count *)a3[1];
    uint64_t v82 = *a3;
    long long v83 = v80;
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v79 + 16))(v79, &v82);
    if (v83) {
      sub_10004D2C8(v83);
    }
  }
  uint64_t v81 = *((void *)&xmmword_101B0CE40 + 1);
  *a4 = xmmword_101B0CE40;
  a4[1] = v81;
  if (v81) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1004378A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, dispatch_object_t object, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10004D2C8(v26);
  a16 = &a21;
  sub_10005CBF0((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004379C8(uint64_t a1)
{
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1004379F8(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v5 || (uint64_t v9 = *(void *)(a1 + 56), (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  CFDictionaryRef v11 = v10;
  BOOL v12 = *a2;
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x1D0uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC4C8;
  uint64_t v14 = (uint64_t)&v13[1];
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  uint64_t v15 = *a3;
  unint64_t v16 = (std::__shared_weak_count *)a3[1];
  v19[0] = v15;
  v19[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v18[0] = v9;
  v18[1] = v11;
  sub_100ACD144(v14, &object, v19, v18);
  sub_10004D2C8(v11);
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  shared_weak_owners = (std::__shared_weak_count *)v13[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__shared_owners_ = v14;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
    goto LABEL_15;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__shared_owners_ = v14;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_15:
    sub_10004D2C8(v13);
  }
  *a4 = v14;
  a4[1] = (uint64_t)v13;
}

void sub_100437B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  sub_10004D2C8(v15);
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_100437B94(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  CFTypeRef v7 = *a2;
  BOOL v12 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9 || (uint64_t v10 = std::__shared_weak_count::lock(v9)) == 0) {
    sub_100088B9C();
  }
  CFDictionaryRef v11 = v10;
  sub_100BA535C((capabilities::ct *)&v12, &v13);
  *a4 = v13;
  long long v13 = 0uLL;
  sub_10004D2C8(v11);
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v7) {
    dispatch_release(v7);
  }
}

void sub_100437C64(_Unwind_Exception *a1)
{
  sub_10004D2C8(v3);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100437C98(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_100F025A0(&v3);
}

void sub_100437D28(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100437D4C(uint64_t a1@<X0>, NSObject **a2@<X1>, void *a3@<X2>, std::__shared_weak_count **a4@<X8>)
{
  if (*a2) {
    BOOL v5 = *a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  uint64_t v8 = (void *)(a1 + 72);
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x1A0uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC518;
  uint64_t v10 = v9 + 1;
  sub_100BE5478((uint64_t)&v9[1], a2, v8, a3);
  shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    goto LABEL_11;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_11:
    sub_10004D2C8(v9);
  }
  *a4 = v10;
  a4[1] = v9;
}

void sub_100437E40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

const void **sub_100437E58@<X0>(const void **result@<X0>, int a2@<W1>, const void **a3@<X2>, NSObject **a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  CFTypeRef v7 = result;
  if (a2 == 2)
  {
    sub_100058198(&v22, a3);
    uint64_t v15 = *a4;
    dispatch_object_t v21 = v15;
    if (v15) {
      dispatch_retain(v15);
    }
    unint64_t v16 = (std::__shared_weak_count *)v7[8];
    if (!v16 || (uint64_t v17 = (uint64_t)v7[7], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v19 = v17;
    unint64_t v20 = v18;
    char v29 = 2;
    char v28 = a5;
    sub_10024A8EC(&v29, &v22, &v21, &v19, &v28, &v27);
    *(_OWORD *)a6 = v27;
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (v21) {
      dispatch_release(v21);
    }
    long long v13 = &v22;
    return sub_100057D78(v13);
  }
  if (a2 == 1)
  {
    sub_100058198(&v26, a3);
    uint64_t v9 = *a4;
    dispatch_object_t object = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)v7[8];
    if (!v10 || (v11 = (uint64_t)v7[7], (BOOL v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v23 = v11;
    CFArrayRef v24 = v12;
    char v29 = 1;
    sub_100D6C354(&v29, &v26, (id *)&object, &v23, &v27);
    *(_OWORD *)a6 = v27;
    if (v24) {
      sub_10004D2C8(v24);
    }
    if (object) {
      dispatch_release(object);
    }
    long long v13 = &v26;
    return sub_100057D78(v13);
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  return result;
}

void sub_100437FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, dispatch_object_t object, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (object) {
    dispatch_release(object);
  }
  sub_100057D78(&a12);
  _Unwind_Resume(a1);
}

void sub_100438024(uint64_t a1@<X0>, int a2@<W1>, NSObject **a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, std::__shared_weak_count **a7@<X8>)
{
  if (a2 == 1)
  {
    if (!*(void *)(a1 + 64)) {
      goto LABEL_44;
    }
    uint64_t v21 = *(void *)(a1 + 56);
    unint64_t v22 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 64));
    if (!v22) {
      goto LABEL_44;
    }
    uint64_t v23 = v22;
    CFArrayRef v24 = *a3;
    uint64_t v25 = (std::__shared_weak_count *)operator new(0x388uLL);
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC568;
    dispatch_object_t object = v24;
    if (v24) {
      dispatch_retain(v24);
    }
    CFArrayRef v26 = (std::__shared_weak_count *)a4[1];
    uint64_t v38 = *a4;
    uint64_t v39 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v27 = v25 + 1;
    uint64_t v36 = v21;
    uint64_t v37 = v23;
    uint64_t v28 = *a5;
    char v29 = (std::__shared_weak_count *)a5[1];
    uint64_t v34 = v28;
    int64_t v35 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *a6;
    uint64_t v31 = (std::__shared_weak_count *)a6[1];
    *(void *)&long long v33 = v30;
    *((void *)&v33 + 1) = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1011B8E08((uint64_t)&v25[1], &object, &v38, &v36, &v34, &v33);
    if (v31) {
      sub_10004D2C8(v31);
    }
    if (v29) {
      sub_10004D2C8(v29);
    }
    sub_10004D2C8(v23);
    if (v26) {
      sub_10004D2C8(v26);
    }
    if (object) {
      dispatch_release(object);
    }
    uint64_t v32 = (std::__shared_weak_count *)v25[2].__vftable;
    if (v32)
    {
      if (v32->__shared_owners_ != -1)
      {
LABEL_42:
        *a7 = v27;
        a7[1] = v25;
        return;
      }
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v25[1].__shared_weak_owners_ = (uint64_t)v27;
      v25[2].__vftable = (std::__shared_weak_count_vtbl *)v25;
      std::__shared_weak_count::__release_weak(v32);
    }
    else
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v25[1].__shared_weak_owners_ = (uint64_t)v27;
      v25[2].__vftable = (std::__shared_weak_count_vtbl *)v25;
    }
    sub_10004D2C8(v25);
    goto LABEL_42;
  }
  if (a2 != 2)
  {
    *a7 = 0;
    a7[1] = 0;
    return;
  }
  if (!*(void *)(a1 + 64)
    || (uint64_t v11 = *(void *)(a1 + 56),
        (BOOL v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 64))) == 0))
  {
LABEL_44:
    sub_100088B9C();
  }
  long long v13 = v12;
  uint64_t v14 = *a3;
  uint64_t v15 = operator new(0x430uLL);
  v15[1] = 0;
  v15[2] = 0;
  *uint64_t v15 = off_1019CCBB8;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  uint64_t v16 = *a4;
  uint64_t v17 = (std::__shared_weak_count *)a4[1];
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = v11;
  uint64_t v37 = v13;
  uint64_t v18 = *a5;
  uint64_t v19 = (std::__shared_weak_count *)a5[1];
  uint64_t v34 = v18;
  int64_t v35 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100B3D058((uint64_t)(v15 + 3), &object, &v38, &v36, &v34);
  if (v19) {
    sub_10004D2C8(v19);
  }
  sub_10004D2C8(v13);
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (object) {
    dispatch_release(object);
  }
  *(void *)&long long v33 = v15 + 3;
  *((void *)&v33 + 1) = v15;
  sub_1000B3BC8((uint64_t)&v33, v15 + 4, (uint64_t)(v15 + 3));
  *(_OWORD *)a7 = v33;
}

void sub_1004382E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (v22) {
    sub_10004D2C8(v22);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
  sub_10004D2C8(v19);
  if (v21) {
    sub_10004D2C8(v21);
  }
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_100438368@<X0>(capabilities::ct *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = capabilities::ct::supportsCerberus(a1);
  if (result)
  {
    uint64_t v11 = *a2;
    if (v11) {
      dispatch_retain(v11);
    }
    uint64_t v12 = *(void *)(a4 + 8);
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a3 + 8);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 8);
    if (v14)
    {
      if (std::__shared_weak_count::lock(v14)) {
        CellularPlanPrivateNetworksController::create();
      }
    }
    sub_100088B9C();
  }
  *a5 = 0;
  a5[1] = 0;
  return result;
}

void sub_100438478(_Unwind_Exception *a1)
{
  sub_10004D2C8(v4);
  if (v3)
  {
    sub_10004D2C8(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  sub_10004D2C8(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  dispatch_release(v1);
  goto LABEL_5;
}

void sub_1004384C4(uint64_t a1@<X1>, NSObject **a2@<X2>, void *a3@<X8>)
{
  BOOL v5 = *a2;
  CFTypeRef v6 = operator new(0x40uLL);
  CFTypeRef v7 = v6;
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = off_1019CC5B8;
  uint64_t v8 = v6 + 3;
  if (v5)
  {
    dispatch_retain(v5);
    void v7[3] = a1;
    void v7[4] = v5;
    dispatch_retain(v5);
    void v7[6] = 0;
    v7[7] = 0;
    void v7[5] = v7 + 6;
    dispatch_release(v5);
  }
  else
  {
    v6[6] = 0;
    void v6[3] = a1;
    void v6[4] = 0;
    v6[7] = 0;
    v6[5] = v6 + 6;
  }
  *a3 = v8;
  a3[1] = v7;
}

void sub_100438574(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      PrivateNetworkTelemetryController::create();
    }
  }
  sub_100088B9C();
}

void sub_100438610(_Unwind_Exception *a1)
{
  sub_10004D2C8(v2);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100438638(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  long long v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 56), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  sub_1012E9CEC((uint64_t)&v7, &v9);
  *a2 = v9;
  long long v9 = 0uLL;
  if (v8) {
    sub_10004D2C8(v8);
  }
}

void sub_1004386A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004386BC(NSObject **a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  CFTypeRef v6 = (std::__shared_weak_count *)operator new(0x68uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC608;
  uint64_t v7 = &v6[1].__vftable;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100A6E6E4(v7, &object, a2);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v8 = (std::__shared_weak_count *)v6[2].__vftable;
  if (!v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_weak_owners_ = (uint64_t)v7;
    v6[2].__vftable = (std::__shared_weak_count_vtbl *)v6;
    goto LABEL_9;
  }
  if (v8->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_weak_owners_ = (uint64_t)v7;
    v6[2].__vftable = (std::__shared_weak_count_vtbl *)v6;
    std::__shared_weak_count::__release_weak(v8);
LABEL_9:
    sub_10004D2C8(v6);
  }
  *a3 = v7;
  a3[1] = v6;
}

void sub_1004387B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_1004387D4(uint64_t a1, dispatch_object_t *a2, uint64_t a3)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  CFTypeRef v6 = *(std::__shared_weak_count **)(a1 + 64);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      sub_100556C38();
    }
  }
  sub_100088B9C();
}

void sub_1004388BC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v3);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1004388F0()
{
}

void sub_100438928(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v6 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v10 = *(uint64_t **)a2;
  uint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  long long v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100B1E518(&v12, &v10, &v8, &v14);
  *a4 = v14;
  long long v14 = 0uLL;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (v13) {
    sub_10004D2C8(v13);
  }
}

void sub_1004389DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100438A0C(uint64_t a1, NSObject **a2, uint64_t a3)
{
  CFDataRef v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v12[0] = v7;
      v12[1] = v8;
      long long v9 = *a2;
      dispatch_object_t object = v9;
      if (v9) {
        dispatch_retain(v9);
      }
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      CellularPlanPendingTransferHandler::create((uint64_t)v12, &object, v10, &v13);
    }
  }
  sub_100088B9C();
}

void sub_100438AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, dispatch_object_t object, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100438AF4(uint64_t a1, uint64_t a2, void *a3)
{
  long long v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3))
    {
      uint64_t v5 = operator new(0x30uLL);
      v5[1] = 0;
      _DWORD v5[2] = 0;
      *uint64_t v5 = off_1019CC658;
      *a3 = 0;
      a3[1] = 0;
      sub_1002C2CBC(v5 + 3);
    }
  }
  sub_100088B9C();
}

void sub_100438BC8(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_10004D2C8(v1);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_100438C04@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = off_1019CC6A8;
  result[3] = off_101A46C10;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void *sub_100438C70@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = off_1019CC6F8;
  result[3] = &off_101A0BE90;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

uint64_t sub_100438CDC(capabilities::ct *a1, dispatch_object_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = capabilities::ct::supportsSIMProvisioningAsSignupSource(a1);
  if (v8)
  {
    v13[0] = 0;
    v13[1] = 0;
    if (*a2) {
      dispatch_retain(*a2);
    }
    long long v9 = (std::__shared_weak_count *)*((void *)a1 + 8);
    if (v9 && std::__shared_weak_count::lock(v9))
    {
      uint64_t v10 = *(void *)(a3 + 8);
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(void *)(a4 + 8);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      cellplan::CellularPlanControllerPhone::create(v13);
    }
    sub_100088B9C();
  }
  return v8;
}

void sub_100438E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100438E54@<X0>(capabilities::ct *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = capabilities::ct::supportsSIMProvisioningAsSignupDestination(a1);
  if (result)
  {
    long long v9 = *a2;
    if (v9) {
      dispatch_retain(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 8);
    if (v10 && std::__shared_weak_count::lock(v10))
    {
      uint64_t v11 = *(void *)(a3 + 8);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1010EE4F8(&v12);
    }
    sub_100088B9C();
  }
  *a4 = 0;
  a4[1] = 0;
  return result;
}

void sub_100438F38(_Unwind_Exception *a1)
{
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_10004D2C8(v2);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100438F6C(uint64_t a1, dispatch_object_t *a2, uint64_t a3)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5 && std::__shared_weak_count::lock(v5))
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100F0B2FC(&v7);
  }
  sub_100088B9C();
}

void sub_10043903C(_Unwind_Exception *a1)
{
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_10004D2C8(v2);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100439070(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  long long v9 = *a2;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 80);
  long long v13 = *(Registry **)(a1 + 72);
  long long v14 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 8);
  long long v12 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1006D3B84(&v13, a4, a5);
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_100439140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, dispatch_object_t object)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100439170@<X0>(uint64_t result@<X0>, int a2@<W1>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, long long *a5@<X6>, void *a6@<X8>)
{
  if (((1 << a2) & 0x35) == 0)
  {
    uint64_t v8 = result;
    if (a2 == 1)
    {
      if (*a3) {
        dispatch_retain(*a3);
      }
      uint64_t v9 = *(void *)(v8 + 80);
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(void *)(a4 + 8);
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      long long v15 = *a5;
      if (*((char *)a5 + 39) < 0)
      {
        sub_10004FC84(__p, *((void **)a5 + 2), *((void *)a5 + 3));
      }
      else
      {
        *(_OWORD *)long long __p = a5[1];
        __p[2] = *((void **)a5 + 4);
      }
      char v17 = *((unsigned char *)a5 + 40);
      CellularPlanAttachProvisioningMonitorMode::create();
    }
    if (*a3) {
      dispatch_retain(*a3);
    }
    uint64_t v11 = *(void *)(v8 + 80);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(void *)(a4 + 8);
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    if (*((char *)a5 + 39) < 0)
    {
      sub_10004FC84(v13, *((void **)a5 + 2), *((void *)a5 + 3));
    }
    else
    {
      *(_OWORD *)long long v13 = a5[1];
      void v13[2] = *((void **)a5 + 4);
    }
    char v14 = *((unsigned char *)a5 + 40);
    CellularPlanAttachProvisioningMonitorMode::create();
  }
  *a6 = 0;
  a6[1] = 0;
  return result;
}

void sub_1004393F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a17) {
    sub_10004D2C8(a17);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100439444(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  if (a17) {
    sub_10004D2C8(a17);
  }
  if (!a18) {
    JUMPOUT(0x10043943CLL);
  }
  JUMPOUT(0x100439438);
}

void sub_10043947C(uint64_t *a1@<X0>, NSObject **a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v11 = a4;
  uint64_t v9 = (capabilities::ct *)capabilities::ct::supportsSIMProvisioningAsSignupDestination((capabilities::ct *)a1);
  if (v9 || capabilities::ct::supportsRegisteredIDSService(v9))
  {
    sub_100448F54(v10, *a2, a1 + 9, a3, &v11);
    *(_OWORD *)a5 = *(_OWORD *)v10;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
  }
}

void sub_1004394F4(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  long long v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  long long v15 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9 || (uint64_t v10 = *(void *)(a1 + 56), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v12 = v10;
  long long v13 = v11;
  sub_10109CF74(&object, &v14, &v12, &v17);
  *a4 = v17;
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1004395B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, dispatch_object_t object)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_1004395F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v3 || (v5 = *(void *)(a1 + 56), (uint64_t result = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v5 + 8;
  if (!v5) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

void sub_10043963C(uint64_t a1, NSObject **a2)
{
  WirelessUserDirectory = (char *)_GetWirelessUserDirectory();
  sub_100058DB0(&v17, WirelessUserDirectory);
  uint64_t v5 = std::string::append(&v17, "/Library/Preferences/no_backup", 0x1EuLL);
  std::string v18 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  int v6 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v18.__r_.__value_.__l.__size_;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v8 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v8 = v18.__r_.__value_.__l.__size_;
  }
  memset(&v16, 0, sizeof(v16));
  uint64_t v9 = &v16;
  sub_1000C140C((uint64_t)&v16, v8 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (v6 >= 0) {
      uint64_t v10 = &v18;
    }
    else {
      uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
  char v11 = std::string::append(&v16, "remoteplandb.sqlite", 0x13uLL);
  std::string v17 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100439964;
  block[3] = &unk_1019CC228;
  block[4] = a1;
  if (v6 < 0) {
    sub_10004FC84(&__p, v18.__r_.__value_.__l.__data_, size);
  }
  else {
    std::string __p = v18;
  }
  if (qword_101B0CE10 != -1) {
    dispatch_once(&qword_101B0CE10, block);
  }
  uint64_t v12 = *a2;
  if (v12) {
    dispatch_retain(v12);
  }
  long long v13 = operator new(0x50uLL);
  v13[1] = 0;
  void v13[2] = 0;
  *long long v13 = off_1019CC798;
  sub_100DB2E28((uint64_t)(v13 + 3), (long long *)&v17);
  sub_10023D604();
}

void sub_1004398C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (v36 < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_100439950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    JUMPOUT(0x100439944);
  }
  JUMPOUT(0x100439948);
}

void sub_100439964(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = 0;
  CFDataRef v4 = 0;
  Registry::getFileSystemInterface(&v3, *(Registry **)(v2 + 72));
  if (v3 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 88))(v3, a1 + 40) & 1) == 0) {
    (*(void (**)(void))(*(void *)v3 + 72))();
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_100439A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100439A3C(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFDataRef v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    int v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    uint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  uint64_t v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    long long v13 = sub_100080778;
  }
  else {
    long long v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"ResetVolteSettingOnSignupIntent");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_100439BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100439C2C(uint64_t a1, uint64_t a2)
{
  return sub_100439A3C(a1 - 8, a2);
}

void sub_100439C34(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    CFDataRef v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v13);
  if (v7)
  {
    uint64_t v9 = v7[3];
    unsigned int v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  unsigned int v8 = 0;
  char v10 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 8))(&v11, v9, 1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 64))(v11, 2);
  if (v12) {
    sub_10004D2C8(v12);
  }
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
}

void sub_100439D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100439DA4(uint64_t a1)
{
}

void sub_100439DAC(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    CFDataRef v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v11 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v11);
  if (v7)
  {
    uint64_t v9 = (MaxDataRateInterface *)v7[3];
    unsigned int v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      if (!v9) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  unsigned int v8 = 0;
  char v10 = 1;
  if (!v9) {
    goto LABEL_12;
  }
LABEL_10:
  if (MaxDataRateInterface::getUserPreferenceEnableLTE(v9) != 2)
  {
    _OWORD v12[3] = 0;
    (*(void (**)(MaxDataRateInterface *, uint64_t, uint64_t, void *))(*(void *)v9 + 24))(v9, 1, 3, v12);
    sub_100449214(v12);
  }
LABEL_12:
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
}

void sub_100439F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100449214((uint64_t *)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100439F44(uint64_t a1)
{
}

void sub_100439F4C(uint64_t a1@<X0>, NSObject **a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v5 || (uint64_t v9 = *(void *)(a1 + 56), (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v11 = v10;
  char v12 = *a2;
  unint64_t v13 = (std::__shared_weak_count *)operator new(0x80uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC7E8;
  uint64_t v14 = (uint64_t)&v13[1];
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  uint64_t v15 = v9 + 40;
  if (!v9) {
    uint64_t v15 = 0;
  }
  v17[0] = v15;
  v17[1] = v11;
  sub_1004DB904(v14, &object, v17, a3);
  sub_10004D2C8(v11);
  if (object) {
    dispatch_release(object);
  }
  shared_weak_owners = (std::__shared_weak_count *)v13[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__shared_owners_ = v14;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
    goto LABEL_13;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__shared_owners_ = v14;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_13:
    sub_10004D2C8(v13);
  }
  *a4 = v14;
  a4[1] = (uint64_t)v13;
}

void sub_10043A088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  sub_10004D2C8(v13);
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_10043A0C4(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, std::__shared_weak_count **a5@<X8>)
{
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v6 || (v11 = *(void *)(a1 + 56), (char v12 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v13 = v12;
  uint64_t v14 = *a2;
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x490uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC838;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  CFTypeID v16 = v15 + 1;
  v24[0] = v11;
  v24[1] = v13;
  uint64_t v17 = *a3;
  std::string v18 = (std::__shared_weak_count *)a3[1];
  v23[0] = v17;
  v23[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *a4;
  unint64_t v20 = (std::__shared_weak_count *)a4[1];
  v22[0] = v19;
  v22[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1003CBF68((uint64_t)&v15[1], &object, (uint64_t)v24, v23, v22);
  if (v20) {
    sub_10004D2C8(v20);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  sub_10004D2C8(v13);
  if (object) {
    dispatch_release(object);
  }
  shared_weak_owners = (std::__shared_weak_count *)v15[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = (uint64_t)v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    goto LABEL_19;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = (uint64_t)v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_19:
    sub_10004D2C8(v15);
  }
  *a5 = v16;
  a5[1] = v15;
}

void sub_10043A244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_object_t object)
{
  if (v19) {
    sub_10004D2C8(v19);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  sub_10004D2C8(v17);
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_10043A298()
{
}

void sub_10043A2D0(uint64_t a1@<X0>, void *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFDataRef v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    unsigned int v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v12);
  if (v9)
  {
    uint64_t v11 = v9[3];
    char v10 = (std::__shared_weak_count *)v9[4];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    char v10 = 0;
  }
  std::mutex::unlock(v4);
  *a2 = v11;
  a2[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v10);
  }
}

void *sub_10043A39C@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = off_1019CC888;
  result[3] = off_101A0CFE0;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void sub_10043A408(uint64_t a1@<X0>, NSObject **a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = (void *)(a1 + 72);
  unsigned int v6 = operator new(0x30uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = off_1019CC8D8;
  void v6[3] = off_101A04850;
  sub_100777D10(a2, v5, v6 + 4);
  *a3 = v6 + 3;
  a3[1] = v6;
}

void sub_10043A4AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10043A4C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, void *a4@<X8>)
{
  if (*(void *)(result + 72))
  {
    if (*(void *)(result + 64) && std::__shared_weak_count::lock(*(std::__shared_weak_count **)(result + 64)))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(void *)(a3 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      sub_100420D78(&v8);
    }
    sub_100088B9C();
  }
  *a4 = 0;
  a4[1] = 0;
  return result;
}

void sub_10043A5D8(_Unwind_Exception *a1)
{
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_10043A604(uint64_t *a1@<X1>, NSObject **a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, _OWORD *a6@<X8>)
{
  char v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a2;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v19 = *a3;
  unint64_t v20 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)a4[1];
  uint64_t v17 = *a4;
  std::string v18 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a5[1];
  uint64_t v15 = *a5;
  CFTypeID v16 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1002168A8(&v22, &object, &v19, &v17, &v15, &v24);
  *a6 = v24;
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v23) {
    sub_10004D2C8(v23);
  }
}

void sub_10043A710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a18) {
    sub_10004D2C8(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10043A758(uint64_t a1, dispatch_object_t *a2, uint64_t a3)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3 && std::__shared_weak_count::lock(v3))
  {
    if (*a2) {
      dispatch_retain(*a2);
    }
    uint64_t v6 = *(void *)(a3 + 8);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    CellularPlanSourceTransferModel::create(&v7);
  }
  sub_100088B9C();
}

void sub_10043A81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_10043A84C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v3 || (v5 = *(void *)(a1 + 56), (uint64_t result = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v5 + 24;
  if (!v5) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

void sub_10043A898(uint64_t a1, NSObject **a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  dispatch_object_t v14 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  v13[0] = v6;
  v13[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 64);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    char v10 = std::__shared_weak_count::lock(v8);
    if (v10)
    {
      uint64_t v11 = v9 + 24;
      if (!v9) {
        uint64_t v11 = 0;
      }
      v12[0] = v11;
      v12[1] = v10;
      sub_1008218D0(&v14, (uint64_t)v13, (uint64_t)v12);
    }
  }
  sub_100088B9C();
}

void sub_10043A994(_Unwind_Exception *a1)
{
  sub_10004D2C8(v3);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_10043A9C8(uint64_t a1, NSObject **a2, uint64_t *a3)
{
}

BOOL sub_10043A9D0(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFDataRef v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    char v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  char v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    unint64_t v13 = sub_100080778;
  }
  else {
    unint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UsesAutoAssignment");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_10043AB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10043ABC0(uint64_t a1, uint64_t a2)
{
  return sub_10043A9D0(a1 - 24, a2);
}

const void **sub_10043ABC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    unsigned int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v23 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, &v23);
  if (v11)
  {
    uint64_t v13 = v11[3];
    char v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  char v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 80))(&v21, v13, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v21);
  sub_1000577C4(&v21);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (theDict) {
    BOOL v15 = sub_100080778;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15 && (Value = CFDictionaryGetValue(theDict, @"ProvisioningMethod"), (CFBooleanRef v17 = Value) != 0))
  {
    CFTypeID v18 = CFGetTypeID(Value);
    if (v18 == CFStringGetTypeID()) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  sub_100056210(a3, v19);
  return sub_100057D78((const void **)&theDict);
}

void sub_10043AD70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

const void **sub_10043ADAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10043ABC8(a1 - 24, a2, a3);
}

uint64_t sub_10043ADB4(uint64_t a1, const void **a2, uint64_t a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)*a2;
  if (*a2) {
    uint64_t v6 = sub_100080778;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_21;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v9 = ServiceMap;
  if (v10 < 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v27 = v10;
  char v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)&v27);
  if (v14)
  {
    uint64_t v16 = v14[3];
    BOOL v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v17 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  BOOL v15 = 0;
  char v17 = 1;
LABEL_13:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v16 + 80))(&v25, v16, a3, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&v26, &v25);
  if (&v26 != a2)
  {
    CFTypeID v18 = *a2;
    *a2 = v26;
    CFArrayRef v26 = 0;
    uint64_t v27 = (uint64_t)v18;
    sub_100057D78((const void **)&v27);
  }
  sub_100057D78(&v26);
  sub_1000577C4(&v25);
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  CFDictionaryRef v5 = (const __CFDictionary *)*a2;
  if (*a2) {
    uint64_t v19 = sub_100080778;
  }
  else {
    uint64_t v19 = 0;
  }
  if (!v19) {
    return 0;
  }
LABEL_21:
  uint64_t result = CFDictionaryContainsKey(v5, @"RequireLiveIDCheck");
  if (result)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)*a2, @"RequireLiveIDCheck");
    if (Value)
    {
      CFBooleanRef v22 = Value;
      CFTypeID v23 = CFGetTypeID(Value);
      if (v23 == CFBooleanGetTypeID()) {
        CFBooleanRef v24 = v22;
      }
      else {
        CFBooleanRef v24 = 0;
      }
    }
    else
    {
      CFBooleanRef v24 = 0;
    }
    return v24 == kCFBooleanTrue;
  }
  return result;
}

void sub_10043AFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10043AFF0(uint64_t a1, const void **a2, uint64_t a3)
{
  return sub_10043ADB4(a1 - 24, a2, a3);
}

BOOL sub_10043AFF8(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFDataRef v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    uint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  uint64_t v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    unsigned int v13 = sub_100080778;
  }
  else {
    unsigned int v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFBooleanRef Value = CFDictionaryGetValue(theDict, @"IncludeUnusableIccidForPlanSignupRequest");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_10043B1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10043B1E8(uint64_t a1, uint64_t a2)
{
  return sub_10043AFF8(a1 - 24, a2);
}

uint64_t sub_10043B1F0(uint64_t a1, const void **a2, uint64_t a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)*a2;
  if (*a2) {
    uint64_t v6 = sub_100080778;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_21;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v9 = ServiceMap;
  if (v10 < 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v26 = v10;
  char v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)&v26);
  if (v14)
  {
    uint64_t v16 = v14[3];
    BOOL v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v17 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  BOOL v15 = 0;
  char v17 = 1;
LABEL_13:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v16 + 80))(&v24, v16, a3, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&v25, &v24);
  if (&v25 != a2)
  {
    CFTypeID v18 = *a2;
    *a2 = v25;
    uint64_t v25 = 0;
    uint64_t v26 = (uint64_t)v18;
    sub_100057D78((const void **)&v26);
  }
  sub_100057D78(&v25);
  sub_1000577C4(&v24);
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  CFDictionaryRef v5 = (const __CFDictionary *)*a2;
  if (*a2) {
    uint64_t v19 = sub_100080778;
  }
  else {
    uint64_t v19 = 0;
  }
  if (!v19) {
    return 0;
  }
LABEL_21:
  uint64_t result = CFDictionaryContainsKey(v5, @"ProvisioningMethod");
  if (result)
  {
    CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)*a2, @"ProvisioningMethod");
    if (Value)
    {
      CFBooleanRef v22 = Value;
      CFTypeID v23 = CFGetTypeID(Value);
      if (v23 == CFStringGetTypeID()) {
        CFBooleanRef Value = v22;
      }
      else {
        CFBooleanRef Value = 0;
      }
    }
    return CFEqual(Value, @"CarrierFlow") != 0;
  }
  return result;
}

void sub_10043B3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10043B424(uint64_t a1, const void **a2, uint64_t a3)
{
  return sub_10043B1F0(a1 - 24, a2, a3);
}

const void **sub_10043B42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v9 = ServiceMap;
  if (v10 < 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long v52 = v10;
  char v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)&v52);
  if (v14)
  {
    uint64_t v16 = v14[3];
    BOOL v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v17 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  BOOL v15 = 0;
  char v17 = 1;
LABEL_9:
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v16 + 80))(v46, v16, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&cf, (CFTypeRef *)v46);
  sub_1000577C4((const void **)v46);
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  if (cf) {
    CFTypeID v18 = sub_100080778;
  }
  else {
    CFTypeID v18 = 0;
  }
  if (!v18) {
    goto LABEL_30;
  }
  CFTypeRef v50 = cf;
  if (cf) {
    CFRetain(cf);
  }
  int v19 = sub_10043B1F0(a1, &v50, a2);
  sub_100057D78(&v50);
  CFTypeRef v49 = cf;
  if (cf) {
    CFRetain(cf);
  }
  int v20 = sub_10043ADB4(a1, &v49, a2);
  sub_100057D78(&v49);
  if (v20) {
    int v21 = v19 | 0x40;
  }
  else {
    int v21 = v19;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"SupportsFauxCard");
  CFBooleanRef v23 = Value;
  if (Value)
  {
    CFTypeID v24 = CFGetTypeID(Value);
    if (v24 == CFBooleanGetTypeID()) {
      CFBooleanRef v25 = v23;
    }
    else {
      CFBooleanRef v25 = 0;
    }
  }
  else
  {
    CFBooleanRef v25 = 0;
  }
  if (v25 == kCFBooleanTrue)
  {
    v21 |= 2u;
  }
  else if (!v21)
  {
LABEL_30:
    *(_DWORD *)a4 = 0;
    sub_100058DB0((void *)(a4 + 8), "");
    return sub_100057D78(&cf);
  }
  memset(v48, 0, 7);
  CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"CellularTrialPlan");
  CFDictionaryRef v27 = v26;
  if (!v26
    || (CFTypeID v28 = CFGetTypeID(v26), v28 != CFDictionaryGetTypeID())
    || ((CFBooleanRef v29 = (const __CFBoolean *)CFDictionaryGetValue(v27, @"SupportsTrialPlan"), (v30 = v29) == 0)
      ? (CFBooleanRef v32 = 0)
      : (CFTypeID v31 = CFGetTypeID(v29), v31 != CFBooleanGetTypeID())
      ? (CFBooleanRef v32 = 0)
      : (CFBooleanRef v32 = v30),
        v32 == kCFBooleanFalse))
  {
    *(_DWORD *)a4 = v21;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0;
    return sub_100057D78(&cf);
  }
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  CFDictionaryGetValue(v27, @"TrialEndPeriod");
  long long v52 = 0uLL;
  uint64_t v53 = 0;
  ctu::cf::assign();
  *(_OWORD *)uint64_t v46 = v52;
  uint64_t v47 = v53;
  id v33 = objc_alloc_init((Class)NSISO8601DateFormatter);
  if (v47 >= 0) {
    uint64_t v34 = v46;
  }
  else {
    uint64_t v34 = (void **)v46[0];
  }
  id v35 = objc_msgSend(v33, "dateFromString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34));
  int v36 = +[NSDate date];
  if (v35)
  {
    uint64_t v37 = v36;
    if ([(NSDate *)v36 isEqualToDate:[(NSDate *)v36 earlierDate:v35]])
    {
      CFDictionaryGetValue(v27, @"TrialStartPeriod");
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      ctu::cf::assign();
      *(_OWORD *)std::string __p = v52;
      uint64_t v45 = v53;
      if (v53 >= 0) {
        uint64_t v38 = __p;
      }
      else {
        uint64_t v38 = (void **)v52;
      }
      id v39 = objc_msgSend(v33, "dateFromString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38, __p[0], __p[1], v45));
      if (v39)
      {
        if ([(NSDate *)v37 isEqualToDate:[(NSDate *)v37 laterDate:v39]])
        {
          v21 |= 4u;
          if (a3) {
            goto LABEL_56;
          }
        }
      }
      else
      {
        v21 |= 4u;
        if (a3)
        {
LABEL_56:
          sub_10043BA24((uint64_t)&v52, v27);
          unint64_t v42 = *((void *)&v52 + 1);
          unint64_t v41 = (void *)v52;
          v48[0] = v53;
          *(_DWORD *)((char *)v48 + 3) = *(_DWORD *)((char *)&v53 + 3);
          char v43 = HIBYTE(v53);
          goto LABEL_58;
        }
      }
      unint64_t v41 = 0;
      unint64_t v42 = 0;
      char v43 = 0;
LABEL_58:
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_60;
    }
  }
  unint64_t v41 = 0;
  unint64_t v42 = 0;
  char v43 = 0;
LABEL_60:

  *(_DWORD *)a4 = v21;
  if (v43 < 0)
  {
    sub_10004FC84((unsigned char *)(a4 + 8), v41, v42);
  }
  else
  {
    *(void *)(a4 + 8) = v41;
    *(void *)(a4 + 16) = v42;
    *(_DWORD *)(a4 + 24) = v48[0];
    *(_DWORD *)(a4 + 27) = *(_DWORD *)((char *)v48 + 3);
    *(unsigned char *)(a4 + 31) = v43;
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  if (v43 < 0) {
    operator delete(v41);
  }
  return sub_100057D78(&cf);
}

void sub_10043B92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,int a28,const void *a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_100057D78(&a29);
  _Unwind_Resume(a1);
}

double sub_10043BA24(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  CFDictionaryGetValue(theDict, @"TrialPlanType");
  long long v7 = 0uLL;
  unint64_t v8 = 0;
  ctu::cf::assign();
  double result = 0.0;
  *(_OWORD *)a1 = 0uLL;
  unint64_t v4 = v8;
  *(void *)(a1 + 16) = v8;
  unint64_t v5 = HIBYTE(v4);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (!v5)
  {
    sub_100058DB0(&v7, "FreeOrSpecial");
    if (v6 < 0) {
      operator delete(*(void **)a1);
    }
    double result = *(double *)&v7;
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  return result;
}

void sub_10043BAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v17 = v16;
  if (v17 < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10043BB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_10043B42C(a1 - 24, a2, a3, a4);
}

const void **sub_10043BB08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  int v6 = ServiceMap;
  if (v7 < 0)
  {
    unint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long v28 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v28);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 80))(&v26, v13, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, (CFTypeRef *)&v26);
  sub_1000577C4((const void **)&v26);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (theDict) {
    BOOL v15 = sub_100080778;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"MatchingICCIDPrefixes");
    CFArrayRef v17 = Value;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    if (Value)
    {
      CFTypeID v18 = CFGetTypeID(Value);
      if (v18 == CFArrayGetTypeID())
      {
        long long v28 = 0uLL;
        uint64_t v29 = 0;
        SCPreferencesContext context = (void **)&v28;
        v31.length = CFArrayGetCount(v17);
        v31.locatiouint64_t n = 0;
        CFArrayApplyFunction(v17, v31, (CFArrayApplierFunction)sub_100449508, &context);
        long long v19 = v26;
        long long v26 = v28;
        long long v28 = v19;
        uint64_t v20 = v27;
        uint64_t v27 = v29;
        uint64_t v29 = v20;
        SCPreferencesContext context = (void **)&v28;
        sub_100047F64(&context);
      }
    }
    uint64_t v21 = v27;
    long long v23 = v26;
    uint64_t v27 = 0;
    long long v26 = 0uLL;
    *(void *)&long long v28 = &v26;
    sub_100047F64((void ***)&v28);
    sub_10005CBB4(a3);
    *(_OWORD *)a3 = v23;
    a3[2] = v21;
    memset(v24, 0, sizeof(v24));
    *(void *)&long long v28 = v24;
    sub_100047F64((void ***)&v28);
  }
  return sub_100057D78((const void **)&theDict);
}

void sub_10043BD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  *(void *)(v20 - 72) = v19;
  sub_100047F64((void ***)(v20 - 72));
  a19 = (void **)&a15;
  sub_100047F64(&a19);
  sub_100047F64(&a19);
  sub_100057D78(&a14);
  _Unwind_Resume(a1);
}

const void **sub_10043BDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10043BB08(a1 - 24, a2, a3);
}

const void **sub_10043BDE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  values = @"MatchingICCIDPrefixes";
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v27 = v14;
  CFArrayRef v25 = v14;
  if (v14) {
    CFRetain(v14);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v25, (CFDictionaryRef *)&v30);
  sub_10004EFE4(&theDict, (CFTypeRef *)&v30);
  sub_10005717C((const void **)&v30);
  sub_100044D00((const void **)&v25);
  if (theDict) {
    BOOL v15 = sub_100080778;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"MatchingICCIDPrefixes");
    CFArrayRef v17 = Value;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    if (Value)
    {
      CFTypeID v18 = CFGetTypeID(Value);
      if (v18 == CFArrayGetTypeID())
      {
        long long v30 = 0uLL;
        uint64_t v31 = 0;
        SCPreferencesContext context = (void **)&v30;
        v34.length = CFArrayGetCount(v17);
        v34.locatiouint64_t n = 0;
        CFArrayApplyFunction(v17, v34, (CFArrayApplierFunction)sub_100449508, &context);
        long long v19 = v28;
        long long v28 = v30;
        long long v30 = v19;
        uint64_t v20 = v29;
        uint64_t v29 = v31;
        uint64_t v31 = v20;
        SCPreferencesContext context = (void **)&v30;
        sub_100047F64(&context);
      }
    }
    uint64_t v21 = v29;
    long long v23 = v28;
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    *(void *)&long long v30 = &v28;
    sub_100047F64((void ***)&v30);
    sub_10005CBB4(a7);
    *(_OWORD *)a7 = v23;
    a7[2] = v21;
    memset(v24, 0, sizeof(v24));
    *(void *)&long long v30 = v24;
    sub_100047F64((void ***)&v30);
  }
  sub_100057D78((const void **)&theDict);
  return sub_100044D00((const void **)&v27);
}

void sub_10043C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, const void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  *(void *)(v22 - 88) = v21;
  sub_100047F64((void ***)(v22 - 88));
  a21 = (void **)&a17;
  sub_100047F64(&a21);
  sub_100057D78(&a15);
  sub_100044D00(&a16);
  sub_100047F64(&a21);
  _Unwind_Resume(a1);
}

const void **sub_10043C09C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return sub_10043BDE8(a1 - 24, a2, a3, a4, a5, a6, a7);
}

const void **sub_10043C0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v8 = ServiceMap;
  if ((v9 & 0x8000000000000000) != 0)
  {
    unsigned int v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      unint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v28 = v9;
  uint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, &v28);
  if (v13)
  {
    uint64_t v15 = v13[3];
    CFArrayRef v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  CFArrayRef v14 = 0;
  char v16 = 1;
LABEL_9:
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v15 + 80))(v30, v15, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, (CFTypeRef *)v30);
  sub_1000577C4((const void **)v30);
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  if (theDict) {
    CFArrayRef v17 = sub_100080778;
  }
  else {
    CFArrayRef v17 = 0;
  }
  if (v17)
  {
    if (CFDictionaryContainsKey(theDict, @"GServerURL"))
    {
      unsigned int v18 = *(unsigned __int8 *)(a3 + 8);
      if (v18 > 0x28 || ((1 << v18) & 0x1A800000000) == 0)
      {
        CFDictionaryGetValue(theDict, @"GServerURL");
        unint64_t v28 = 0;
        long long v29 = 0uLL;
        ctu::cf::assign();
        unint64_t v24 = v28;
        *(void *)long long v30 = v29;
        *(void *)&v30[7] = *(void *)((char *)&v29 + 7);
        char v25 = HIBYTE(v29);
        if (*(char *)(a4 + 23) < 0) {
          operator delete(*(void **)a4);
        }
        uint64_t v26 = *(void *)v30;
        *(void *)a4 = v24;
        *(void *)(a4 + 8) = v26;
        *(void *)(a4 + 15) = *(void *)&v30[7];
        *(unsigned char *)(a4 + 23) = v25;
      }
    }
    uint64_t v19 = *(void *)(a4 + 8);
    int v20 = *(char *)(a4 + 23);
    if (v20 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a4 + 23);
    }
    if (!v19)
    {
      CFDictionaryGetValue(theDict, @"ServerURL");
      unint64_t v28 = 0;
      long long v29 = 0uLL;
      ctu::cf::assign();
      unint64_t v21 = v28;
      *(void *)long long v30 = v29;
      *(void *)&v30[7] = *(void *)((char *)&v29 + 7);
      char v22 = HIBYTE(v29);
      if (v20 < 0) {
        operator delete(*(void **)a4);
      }
      *(void *)a4 = v21;
      *(void *)(a4 + 8) = *(void *)v30;
      *(void *)(a4 + 15) = *(void *)&v30[7];
      *(unsigned char *)(a4 + 23) = v22;
    }
  }
  return sub_100057D78((const void **)&theDict);
}

void sub_10043C350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a10);
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(a1);
}

const void **sub_10043C3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10043C0A4(a1 - 24, a2, a3, a4);
}

const void **sub_10043C3DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  values = @"PhoneAccountTransfer";
  CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  uint64_t v17 = 0;
  CFArrayRef v18 = v14;
  CFArrayRef v16 = v14;
  if (v14) {
    CFRetain(v14);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v16, (CFDictionaryRef *)&v17);
  sub_100044D00((const void **)&v16);
  sub_10004EFE4(a7, &v17);
  sub_10005717C(&v17);
  return sub_100044D00((const void **)&v18);
}

void sub_10043C4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10043C528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  CFDictionaryRef theDict = 0;
  sub_10043C3DC(a1, a2, a3, a4, a5, a6, &theDict);
  if (theDict) {
    unint64_t v8 = sub_100080778;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 && CFDictionaryContainsKey(theDict, @"PhoneAccountTransfer"))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PhoneAccountTransfer");
    CFDictionaryRef v10 = Value;
    if (Value && (CFTypeID v11 = CFGetTypeID(Value), v11 == CFDictionaryGetTypeID()))
    {
      if (CFDictionaryContainsKey(v10, @"LocalInstallSMDPURL"))
      {
        CFDictionaryGetValue(v10, @"LocalInstallSMDPURL");
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        uint64_t v12 = *(void *)&buf[8];
        uint64_t v13 = *(void *)&buf[15];
        *(void *)a7 = *(void *)buf;
        *(void *)(a7 + 8) = v12;
        *(void *)(a7 + 15) = v13;
        *(unsigned char *)(a7 + 23) = buf[23];
      }
    }
    else
    {
      sub_100433878();
      CFArrayRef v14 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CSIPhoneNumber buf = 138412290;
        *(void *)&uint8_t buf[4] = @"PhoneAccountTransfer";
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Type for %@ not as expected", buf, 0xCu);
      }
    }
  }
  return sub_100057D78((const void **)&theDict);
}

void sub_10043C6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a10);
  _Unwind_Resume(a1);
}

const void **sub_10043C6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  CFDictionaryRef theDict = 0;
  sub_10043C3DC(a1, a2, a3, a4, a5, a6, &theDict);
  if (theDict) {
    unint64_t v8 = sub_100080778;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 && CFDictionaryContainsKey(theDict, @"PhoneAccountTransfer"))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PhoneAccountTransfer");
    CFDictionaryRef v10 = Value;
    if (Value && (CFTypeID v11 = CFGetTypeID(Value), v11 == CFDictionaryGetTypeID()))
    {
      if (CFDictionaryContainsKey(v10, @"TransferPageURL"))
      {
        CFDictionaryGetValue(v10, @"TransferPageURL");
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        uint64_t v12 = *(void *)&buf[8];
        uint64_t v13 = *(void *)&buf[15];
        *(void *)a7 = *(void *)buf;
        *(void *)(a7 + 8) = v12;
        *(void *)(a7 + 15) = v13;
        *(unsigned char *)(a7 + 23) = buf[23];
      }
    }
    else
    {
      sub_100433878();
      CFArrayRef v14 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CSIPhoneNumber buf = 138412290;
        *(void *)&uint8_t buf[4] = @"PhoneAccountTransfer";
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Type for %@ not as expected", buf, 0xCu);
      }
    }
  }
  return sub_100057D78((const void **)&theDict);
}

void sub_10043C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a10);
  _Unwind_Resume(a1);
}

const void **sub_10043C8B8@<X0>(const void **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    if (v10)
    {
      uint64_t v15 = (uint64_t)result;
      values = @"CarrierAuthHost";
      CFArrayRef v16 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFDictionaryRef theDict = 0;
      CFArrayRef v26 = v16;
      CFArrayRef v24 = v16;
      if (v16) {
        CFRetain(v16);
      }
      sub_100433ECC(v15, a2, a3, a4, a5, a6, &v24, (CFDictionaryRef *)buf);
      sub_10004EFE4(&theDict, (CFTypeRef *)buf);
      sub_10005717C((const void **)buf);
      sub_100044D00((const void **)&v24);
      if (theDict) {
        uint64_t v17 = sub_100080778;
      }
      else {
        uint64_t v17 = 0;
      }
      if (v17)
      {
        if (CFDictionaryContainsKey(theDict, @"CarrierAuthHost"))
        {
          CFDictionaryGetValue(theDict, @"CarrierAuthHost");
          memset(buf, 0, sizeof(buf));
          ctu::cf::assign();
          uint64_t v19 = *(void *)buf;
          uint64_t v18 = *(void *)&buf[8];
          uint64_t v20 = *(void *)&buf[15];
          *(void *)a7 = *(void *)buf;
          *(void *)(a7 + 8) = v18;
          *(void *)(a7 + 15) = v20;
          int v21 = (char)buf[23];
          *(unsigned char *)(a7 + 23) = buf[23];
          sub_100433878();
          char v22 = qword_101B0CE20;
          if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
          {
            if (v21 >= 0) {
              uint64_t v23 = a7;
            }
            else {
              uint64_t v23 = v19;
            }
            *(_DWORD *)CSIPhoneNumber buf = 136315138;
            *(void *)&uint8_t buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Carrier auth host endpoint: [%s]", buf, 0xCu);
          }
        }
      }
      sub_100057D78((const void **)&theDict);
      return sub_100044D00((const void **)&v26);
    }
  }
  return result;
}

void sub_10043CAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_100057D78(&a10);
  sub_100044D00(&a11);
  if (v19 < 0) {
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_10043CB60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = *(unsigned __int8 *)(a6 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a6 + 8);
  }
  if (!v8)
  {
    sub_100433878();
    uint64_t v15 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CSIPhoneNumber buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Carrier identification is empty", buf, 2u);
    }
    sub_100058DB0(buf, "");
    sub_10043C8B8((const void **)a1, a2, a3, a4, a5, (uint64_t)buf, a7);
    if (SHIBYTE(v85[0]) < 0) {
      operator delete(*(void **)buf);
    }
    return;
  }
  values = @"CarrierIdentificationToCarrierInformation";
  CFArrayRef v10 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFTypeRef cf = 0;
  CFArrayRef v95 = v10;
  CFArrayRef theArray = v10;
  if (v10) {
    CFRetain(v10);
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (v11)
  {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a3 + 8);
    }
    if (v12)
    {
      long long v101 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFArrayRef v14 = v101;
        long long v101 = Mutable;
        *(void *)CSIPhoneNumber buf = v14;
        sub_10005717C((const void **)buf);
      }
      *(_OWORD *)CSIPhoneNumber buf = 0u;
      *(_OWORD *)long long v85 = 0u;
      MCC::MCC();
      long long v99 = 0u;
      long long v100 = 0u;
      MNC::MNC();
      memset(&v98, 0, sizeof(v98));
      formPLMN((const MCC *)buf, (const MNC *)&v99);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&__p, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v98;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = __p;
      }
      uint64_t v102 = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&v104, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v104 = __dst;
      }
      long long v105 = 0;
      if (ctu::cf::convert_copy())
      {
        CFArrayRef v16 = v102;
        uint64_t v102 = v105;
        long long v106 = v16;
        sub_1000558F4(&v106);
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      CFTypeRef v97 = v102;
      uint64_t v102 = 0;
      sub_1000558F4(&v102);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      sub_10010F3F0(v101, (void *)qword_101B13EC0, (uint64_t)v97);
      sub_1000558F4(&v97);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&v104, 0, sizeof(v104));
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          uint64_t v20 = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeID v21 = CFGetTypeID(ValueAtIndex);
            if (v21 != CFStringGetTypeID()) {
              uint64_t v20 = 0;
            }
          }
          std::string::size_type size = v104.__r_.__value_.__l.__size_;
          if (v104.__r_.__value_.__l.__size_ >= v104.__r_.__value_.__r.__words[2])
          {
            uint64_t v24 = (uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v24 + 1) >> 61) {
              sub_10006A748();
            }
            unint64_t v25 = (uint64_t)(v104.__r_.__value_.__r.__words[2] - v104.__r_.__value_.__r.__words[0]) >> 2;
            if (v25 <= v24 + 1) {
              unint64_t v25 = v24 + 1;
            }
            if (v104.__r_.__value_.__r.__words[2] - v104.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26) {
              CFArrayRef v27 = (char *)sub_10004EF74((uint64_t)&v104.__r_.__value_.__r.__words[2], v26);
            }
            else {
              CFArrayRef v27 = 0;
            }
            unint64_t v28 = &v27[8 * v24];
            *(void *)unint64_t v28 = v20;
            std::string::size_type v23 = (std::string::size_type)(v28 + 8);
            long long v29 = (char *)v104.__r_.__value_.__l.__size_;
            std::string::size_type v30 = v104.__r_.__value_.__r.__words[0];
            if (v104.__r_.__value_.__l.__size_ != v104.__r_.__value_.__r.__words[0])
            {
              do
              {
                uint64_t v31 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v28 - 1) = v31;
                v28 -= 8;
              }
              while (v29 != (char *)v30);
              long long v29 = (char *)v104.__r_.__value_.__r.__words[0];
            }
            v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
            v104.__r_.__value_.__l.__size_ = v23;
            v104.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v26];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *(void *)v104.__r_.__value_.__l.__size_ = v20;
            std::string::size_type v23 = size + 8;
          }
          v104.__r_.__value_.__l.__size_ = v23;
        }
      }
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
      id v33 = ServiceMap;
      if ((v34 & 0x8000000000000000) != 0)
      {
        id v35 = (unsigned __int8 *)(v34 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v36 = 5381;
        do
        {
          std::string::size_type v34 = v36;
          unsigned int v37 = *v35++;
          uint64_t v36 = (33 * v36) ^ v37;
        }
        while (v37);
      }
      std::mutex::lock(ServiceMap);
      __dst.__r_.__value_.__r.__words[0] = v34;
      uint64_t v38 = sub_10004D37C(&v33[1].__m_.__sig, (unint64_t *)&__dst);
      if (v38)
      {
        uint64_t v40 = v38[3];
        id v39 = (std::__shared_weak_count *)v38[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v33);
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v39);
          char v41 = 0;
LABEL_66:
          sub_10004EFE4(&__dst, (CFTypeRef *)&v101);
          (*(void (**)(CFTypeRef *__return_ptr, uint64_t, std::string *, std::string *))(*(void *)v40 + 304))(&cf, v40, &__dst, &v104);
          sub_100057D78((const void **)&__dst.__r_.__value_.__l.__data_);
          if ((v41 & 1) == 0) {
            sub_10004D2C8(v39);
          }
          if (v104.__r_.__value_.__r.__words[0])
          {
            v104.__r_.__value_.__l.__size_ = v104.__r_.__value_.__r.__words[0];
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v100) < 0) {
            operator delete(*((void **)&v99 + 1));
          }
          if (SHIBYTE(v85[1]) < 0) {
            operator delete(*(void **)&buf[8]);
          }
          sub_10005717C((const void **)&v101);
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v40 = 0;
      }
      std::mutex::unlock(v33);
      id v39 = 0;
      char v41 = 1;
      goto LABEL_66;
    }
  }
  CFTypeRef cf = 0;
LABEL_77:
  sub_100044D00((const void **)&theArray);
  if (cf) {
    unint64_t v42 = sub_100080934;
  }
  else {
    unint64_t v42 = 0;
  }
  if (!v42 || (CFTypeID TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(cf)))
  {
    sub_100433878();
    int v44 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CSIPhoneNumber buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#I Failed to find key from country bundle", buf, 2u);
    }
    goto LABEL_171;
  }
  CFTypeRef v92 = cf;
  if (cf)
  {
    CFRetain(cf);
    *(void *)&long long v99 = v92;
    if (v92) {
      CFRetain(v92);
    }
  }
  else
  {
    *(void *)&long long v99 = 0;
  }
  v104.__r_.__value_.__r.__words[0] = 0;
  *(void *)CSIPhoneNumber buf = 0;
  sub_100044D6C(buf, (CFTypeRef *)&v99);
  if (*(void *)buf) {
    uint64_t v45 = sub_100083F10;
  }
  else {
    uint64_t v45 = 0;
  }
  if (v45) {
    sub_100449580((const void **)&v104.__r_.__value_.__l.__data_, (const void **)buf);
  }
  sub_100044D00((const void **)buf);
  __dst.__r_.__value_.__r.__words[0] = v104.__r_.__value_.__r.__words[0];
  v104.__r_.__value_.__r.__words[0] = 0;
  sub_100044D00((const void **)&v104.__r_.__value_.__l.__data_);
  sub_1000577C4((const void **)&v99);
  CFArrayRef v46 = (const __CFArray *)__dst.__r_.__value_.__r.__words[0];
  sub_100044D00((const void **)&__dst.__r_.__value_.__l.__data_);
  sub_1000577C4(&v92);
  CFIndex v47 = CFArrayGetCount(v46);
  if (v47 < 1) {
    goto LABEL_169;
  }
  CFIndex v48 = 0;
  while (1)
  {
    CFDictionaryRef v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(v46, v48);
    CFDictionaryRef v50 = v49;
    if (v49)
    {
      CFTypeID v51 = CFGetTypeID(v49);
      if (v51 != CFDictionaryGetTypeID()) {
        CFDictionaryRef v50 = 0;
      }
    }
    CFDictionaryRef Value = CFDictionaryGetValue(v50, @"CarrierIdentification");
    if (Value)
    {
      CFGetTypeID(Value);
      CFStringGetTypeID();
    }
    memset(buf, 0, sizeof(buf));
    v85[0] = 0;
    ctu::cf::assign();
    *(void **)&long long v100 = v85[0];
    long long v99 = *(_OWORD *)buf;
    uint64_t v53 = *(void *)(a6 + 8);
    int v54 = *(char *)(a6 + 23);
    unint64_t v55 = (unint64_t)v85[0] >> 56;
    if (SHIBYTE(v85[0]) >= 0) {
      unint64_t v56 = (unint64_t)v85[0] >> 56;
    }
    else {
      unint64_t v56 = *((void *)&v99 + 1);
    }
    if (v54 >= 0) {
      uint64_t v53 = *(unsigned __int8 *)(a6 + 23);
    }
    if (v56 != v53)
    {
      if ((HIBYTE(v85[0]) & 0x80) != 0) {
        operator delete((void *)v99);
      }
      goto LABEL_123;
    }
    uint64_t v57 = v54 >= 0 ? (unsigned __int8 *)a6 : *(unsigned __int8 **)a6;
    if ((HIBYTE(v85[0]) & 0x80) == 0) {
      break;
    }
    long long v63 = (void *)v99;
    int v64 = memcmp((const void *)v99, v57, *(size_t *)&buf[8]);
    operator delete(v63);
    if (!v64) {
      goto LABEL_125;
    }
LABEL_123:
    if (++v48 == v47) {
      goto LABEL_169;
    }
  }
  if (v55)
  {
    uint64_t v58 = 0;
    unint64_t v59 = v55 - 1;
    do
    {
      int v60 = *((unsigned __int8 *)&v99 + v58);
      int v61 = v57[v58];
    }
    while (v60 == v61 && v59 != v58++);
    if (v60 != v61) {
      goto LABEL_123;
    }
  }
LABEL_125:
  sub_100433878();
  uint64_t v65 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CSIPhoneNumber buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I Found a matching carrier identification from bundle", buf, 2u);
  }
  CFArrayRef v66 = (const __CFArray *)CFDictionaryGetValue(v50, @"CarrierInformation");
  CFArrayRef v67 = v66;
  if (v66)
  {
    CFTypeID v68 = CFGetTypeID(v66);
    if (v68 == CFArrayGetTypeID())
    {
      long long v99 = 0uLL;
      *(void *)&long long v100 = 0;
      sub_100058DB0(&v99, "");
      CFIndex v69 = CFArrayGetCount(v67);
      if (v69 < 1)
      {
LABEL_163:
        sub_100433878();
        int64x2_t v76 = qword_101B0CE20;
        if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CSIPhoneNumber buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#I Fallback to carrier bundle again", buf, 2u);
        }
        sub_100058DB0(buf, "");
        sub_10043C8B8((const void **)a1, a2, a3, a4, a5, (uint64_t)buf, a7);
        if (SHIBYTE(v85[0]) < 0) {
          operator delete(*(void **)buf);
        }
      }
      else
      {
        CFIndex v70 = 0;
        while (1)
        {
          memset(&v104, 0, sizeof(v104));
          CFArrayGetValueAtIndex(v67, v70);
          memset(buf, 0, sizeof(buf));
          v85[0] = 0;
          ctu::cf::assign();
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
          v104.__r_.__value_.__r.__words[2] = (std::string::size_type)v85[0];
          uint64_t v91 = 0;
          long long v89 = 0u;
          *(_OWORD *)long long v90 = 0u;
          *(_OWORD *)long long v87 = 0u;
          *(_OWORD *)uint64_t v88 = 0u;
          *(_OWORD *)long long v85 = 0u;
          long long v86 = 0u;
          *(_OWORD *)CSIPhoneNumber buf = 0u;
          getCarrierInformation(&v104, (uint64_t)buf);
          uint64_t v71 = (void *)HIBYTE(v91);
          if (v91 < 0) {
            uint64_t v71 = v90[1];
          }
          if (v71)
          {
            sub_100058DB0(&v98, "");
            sub_10043C8B8((const void **)a1, (uint64_t)&v85[1], (uint64_t)v87, (uint64_t)&v88[1], (uint64_t)v90, (uint64_t)&v98, (uint64_t)&__dst);
            if (SBYTE7(v100) < 0) {
              operator delete((void *)v99);
            }
            long long v99 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *(void *)&long long v100 = *((void *)&__dst.__r_.__value_.__l + 2);
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v98.__r_.__value_.__l.__data_);
            }
            uint64_t v72 = BYTE7(v100);
            if (SBYTE7(v100) < 0) {
              uint64_t v72 = *((void *)&v99 + 1);
            }
            if (v72)
            {
              sub_100433878();
              uint64_t v73 = qword_101B0CE20;
              if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#I Found a carrier auth URL with carrier identification", (uint8_t *)&__dst, 2u);
              }
              *(_OWORD *)a7 = v99;
              *(void *)(a7 + 16) = v100;
              *(void *)&long long v100 = 0;
              long long v99 = 0uLL;
              int v74 = 1;
            }
            else
            {
              int v74 = 0;
            }
          }
          else
          {
            sub_100433878();
            long long v75 = qword_101B0CE20;
            if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#I Skip using carrier information with empty GID2", (uint8_t *)&__dst, 2u);
            }
            int v74 = 15;
          }
          if (SHIBYTE(v91) < 0) {
            operator delete(v90[0]);
          }
          if (SHIBYTE(v89) < 0) {
            operator delete(v88[1]);
          }
          if (SHIBYTE(v88[0]) < 0) {
            operator delete(v87[0]);
          }
          if (SHIBYTE(v86) < 0) {
            operator delete(v85[1]);
          }
          if (SHIBYTE(v85[0]) < 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          if (v74 != 15 && v74) {
            break;
          }
          if (v69 == ++v70) {
            goto LABEL_163;
          }
        }
      }
      if (SBYTE7(v100) < 0)
      {
        unsigned __int8 v77 = (void *)v99;
        goto LABEL_173;
      }
      goto LABEL_174;
    }
  }
LABEL_169:
  sub_100433878();
  long long v78 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CSIPhoneNumber buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#I No matching carrier identification from country bundle and fallback to carrier bundle", buf, 2u);
  }
LABEL_171:
  sub_100058DB0(buf, "");
  sub_10043C8B8((const void **)a1, a2, a3, a4, a5, (uint64_t)buf, a7);
  if (SHIBYTE(v85[0]) < 0)
  {
    unsigned __int8 v77 = *(void **)buf;
LABEL_173:
    operator delete(v77);
  }
LABEL_174:
  sub_1000577C4(&cf);
  sub_100044D00((const void **)&v95);
}

void sub_10043D774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,const void *a43,const void *a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 201) < 0) {
    operator delete(*(void **)(v58 - 224));
  }
  sub_1000577C4(&a43);
  sub_100044D00(&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_10043D9BC(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if (v5 < 0)
  {
    int v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  value = (void *)v5;
  unint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)&value);
  if (v9)
  {
    uint64_t v11 = v9[3];
    CFArrayRef v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  CFArrayRef v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v18, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v18);
  sub_1000577C4(&v18);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  value = 0;
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13
    && CFDictionaryGetValueIfPresent(theDict, @"PeriodOfSubscriptionUpdateOnGetPlansFromUI", (const void **)&value))
  {
    uint64_t v14 = (uint64_t)value;
    LODWORD(v18) = 0;
    if (value)
    {
      CFTypeID v15 = CFGetTypeID(value);
      if (v15 == CFNumberGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)&v18, (unsigned int *)v14, v16);
        uint64_t v14 = v18;
      }
      else
      {
        uint64_t v14 = 0;
      }
    }
  }
  else
  {
    uint64_t v14 = 300;
  }
  sub_100057D78((const void **)&theDict);
  return v14;
}

void sub_10043DB7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10043DBB8(uint64_t a1, uint64_t a2)
{
  return sub_10043D9BC(a1 - 24, a2);
}

const void **sub_10043DBC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  int v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    unsigned int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v23 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, &v23);
  if (v11)
  {
    uint64_t v13 = v11[3];
    char v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  char v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 80))(&v21, v13, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v21);
  sub_1000577C4(&v21);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (theDict) {
    CFTypeID v15 = sub_100080778;
  }
  else {
    CFTypeID v15 = 0;
  }
  if (v15
    && (CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"ActivatingStateSubscriptionCheckTimerIntervals"),
        (uint64_t v17 = Value) != 0))
  {
    CFTypeID v18 = CFGetTypeID(Value);
    if (v18 == CFArrayGetTypeID()) {
      int v19 = v17;
    }
    else {
      int v19 = 0;
    }
  }
  else
  {
    int v19 = 0;
  }
  sub_100044D34(a3, v19);
  return sub_100057D78((const void **)&theDict);
}

void sub_10043DD68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

const void **sub_10043DDA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10043DBC0(a1 - 24, a2, a3);
}

uint64_t sub_10043DDAC(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v2 = ServiceMap;
  if (v3 < 0)
  {
    unint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      uint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  *(void *)CSIPhoneNumber buf = v3;
  unint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, (unint64_t *)buf);
  if (!v7)
  {
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  uint64_t v9 = v7[3];
  unsigned int v8 = (std::__shared_weak_count *)v7[4];
  if (!v8)
  {
LABEL_8:
    std::mutex::unlock(v2);
    unsigned int v8 = 0;
    char v10 = 1;
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v2);
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v8);
  char v10 = 0;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, void, const __CFString *, void, void))(*(void *)v9 + 40))(&v18, v9, kCarrier1BundleId, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v18);
  sub_1000577C4(&v18);
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
  if (theDict) {
    uint64_t v11 = sub_100080778;
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v11) {
    goto LABEL_21;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"AllowSIMSelectionWhileInactive");
  uint64_t v13 = (uint64_t)Value;
  buf[0] = 0;
  if (!Value) {
    goto LABEL_22;
  }
  CFTypeID v14 = CFGetTypeID(Value);
  if (v14 != CFBooleanGetTypeID() || (ctu::cf::assign((ctu::cf *)buf, (BOOL *)v13, v15), !buf[0]))
  {
LABEL_21:
    uint64_t v13 = 0;
    goto LABEL_22;
  }
  sub_100433878();
  CFNumberRef v16 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CSIPhoneNumber buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Carrier has override for default behaviour AllowSIMSelectionWhileInactive: True", buf, 2u);
  }
  uint64_t v13 = 1;
LABEL_22:
  sub_100057D78((const void **)&theDict);
  return v13;
}

void sub_10043DFA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10043DFE4(uint64_t a1)
{
  return sub_10043DDAC(a1 - 24);
}

void sub_10043DFEC(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4)
{
  if (objc_opt_class())
  {
    uint64_t v15 = 0;
    CFNumberRef v16 = &v15;
    uint64_t v17 = 0x3052000000;
    CFTypeID v18 = sub_10043E1D0;
    int v19 = sub_10043E1E0;
    id v20 = 0;
    id v20 = [objc_alloc((Class)IDSPhoneCertificateVendor) initWithQueue:a2];
    unint64_t v7 = (void *)v16[5];
    unsigned int v8 = *a4;
    if (v7)
    {
      if (v8)
      {
        uint64_t v9 = _Block_copy(v8);
        unint64_t v7 = (void *)v16[5];
      }
      else
      {
        uint64_t v9 = 0;
      }
      uint64_t v11 = *a3;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3321888768;
      void v13[2] = sub_10043E270;
      _OWORD v13[3] = &unk_1019CC260;
      if (v9) {
        char v12 = _Block_copy(v9);
      }
      else {
        char v12 = 0;
      }
      void v13[4] = &v15;
      aBlock = v12;
      [v7 requestCarrierTokenWithMessageBody:v11 completion:v13];
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v9) {
        _Block_release(v9);
      }
    }
    else
    {
      sub_10043E1EC((uint64_t)v8, 0);
    }
    _Block_object_dispose(&v15, 8);
  }
  else
  {
    uint64_t v10 = (uint64_t)*a4;
    sub_10043E1EC(v10, 0);
  }
}

void sub_10043E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, char a15)
{
}

void sub_10043E1D0(uint64_t a1, uint64_t a2)
{
}

void sub_10043E1E0(uint64_t a1)
{
}

void sub_10043E1EC(uint64_t a1, char a2)
{
  v2[0] = 2;
  LOBYTE(__p) = a2;
  (*(void (**)(uint64_t, char *))(a1 + 16))(a1, v2);
  if (v2[0] == 1)
  {
    if (__p)
    {
      unint64_t v4 = __p;
      operator delete(__p);
    }
  }
}

void sub_10043E248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *__p, uint64_t a11)
{
  if (a9 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10043E270(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [a2 length];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (a3 || (id v7 = v6) == 0)
  {
    sub_100433878();
    uint64_t v9 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CSIPhoneNumber buf = 138412290;
      *(void *)CFTypeID v14 = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Retrieved carrier token failed: %@", buf, 0xCu);
    }
    sub_10043E1EC(*(void *)(a1 + 40), 0);
  }
  else
  {
    sub_10011FDF0((unint64_t *)&v10, (size_t)v6);
    [a2 getBytes:v10 length:v7];
    uint64_t v8 = *(void *)(a1 + 40);
    buf[0] = 1;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)&void v14[4] = 0;
    sub_10005C928(&v14[4], v10, (uint64_t)v11, v11 - (unsigned char *)v10);
    (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
    if (buf[0] == 1 && *(void *)&v14[4])
    {
      uint64_t v15 = *(void *)&v14[4];
      operator delete(*(void **)&v14[4]);
    }
  }

  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_10043E3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
}

void *sub_10043E434(uint64_t a1, uint64_t a2)
{
  double result = *(void **)(a2 + 40);
  if (result) {
    double result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10043E468(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

const void **sub_10043E490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  id v6 = ServiceMap;
  if (v7 < 0)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)CSIPhoneNumber buf = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 80))(&v59, v13, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v59);
  sub_1000577C4(&v59);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (theDict) {
    uint64_t v15 = sub_100080778;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SupportedSKUs");
    CFArrayRef v17 = Value;
    if (Value)
    {
      CFTypeID v18 = CFGetTypeID(Value);
      if (v18 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount(v17);
        if (Count >= 1)
        {
          CFIndex v20 = 0;
          CFTypeID v21 = (char *)a3[2];
          unint64_t v22 = *a3;
          do
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, v20);
            CFStringRef v24 = ValueAtIndex;
            if (!ValueAtIndex) {
              goto LABEL_108;
            }
            CFTypeID v25 = CFGetTypeID(ValueAtIndex);
            if (v25 != CFStringGetTypeID()) {
              goto LABEL_108;
            }
            if (CFStringCompare(v24, @"SKU_NA", 0))
            {
              if (CFStringCompare(v24, @"SKU_EU", 0))
              {
                if (CFStringCompare(v24, @"SKU_CU", 0))
                {
                  if (CFStringCompare(v24, @"SKU_CMCC", 0))
                  {
                    if (CFStringCompare(v24, @"SKU_POST2018_ALL", 0))
                    {
                      sub_100433878();
                      unint64_t v26 = qword_101B0CE20;
                      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)CSIPhoneNumber buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I invalid sku in bundle", buf, 2u);
                      }
                      goto LABEL_108;
                    }
                    CFArrayRef v27 = (char *)a3[1];
                    if (v27 >= v21)
                    {
                      CFIndex v47 = &v27[-v22];
                      uint64_t v48 = (uint64_t)&v27[-v22 + 1];
                      if (v48 < 0) {
                        sub_10006A748();
                      }
                      if (2 * (uint64_t)&v21[-v22] > (unint64_t)v48) {
                        uint64_t v48 = 2 * (void)&v21[-v22];
                      }
                      if ((unint64_t)&v21[-v22] >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v31 = v48;
                      }
                      if (v31) {
                        CFBooleanRef v32 = (char *)operator new(v31);
                      }
                      else {
                        CFBooleanRef v32 = 0;
                      }
                      unsigned int v37 = &v47[(void)v32];
                      unint64_t v55 = &v47[(void)v32];
                      char *v55 = 7;
                      id v39 = v55 + 1;
                      if (v27 != (char *)v22)
                      {
                        unint64_t v56 = &v27[~v22];
                        do
                        {
                          char v57 = *--v27;
                          (v56--)[(void)v32] = v57;
                        }
                        while (v27 != (char *)v22);
                        goto LABEL_103;
                      }
LABEL_104:
                      CFTypeID v21 = &v32[v31];
                      *a3 = (unint64_t)v37;
                      a3[1] = (unint64_t)v39;
                      a3[2] = (unint64_t)&v32[v31];
                      if (v22) {
                        operator delete((void *)v22);
                      }
                      unint64_t v22 = (unint64_t)v37;
                      goto LABEL_107;
                    }
                    char v28 = 7;
                  }
                  else
                  {
                    CFArrayRef v27 = (char *)a3[1];
                    if (v27 >= v21)
                    {
                      unint64_t v42 = &v27[-v22];
                      uint64_t v43 = (uint64_t)&v27[-v22 + 1];
                      if (v43 < 0) {
                        sub_10006A748();
                      }
                      if (2 * (uint64_t)&v21[-v22] > (unint64_t)v43) {
                        uint64_t v43 = 2 * (void)&v21[-v22];
                      }
                      if ((unint64_t)&v21[-v22] >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v31 = v43;
                      }
                      if (v31) {
                        CFBooleanRef v32 = (char *)operator new(v31);
                      }
                      else {
                        CFBooleanRef v32 = 0;
                      }
                      unsigned int v37 = &v42[(void)v32];
                      long long v52 = &v42[(void)v32];
                      *long long v52 = 4;
                      id v39 = v52 + 1;
                      if (v27 == (char *)v22) {
                        goto LABEL_104;
                      }
                      uint64_t v53 = &v27[~v22];
                      do
                      {
                        char v54 = *--v27;
                        (v53--)[(void)v32] = v54;
                      }
                      while (v27 != (char *)v22);
                      goto LABEL_103;
                    }
                    char v28 = 4;
                  }
                }
                else
                {
                  CFArrayRef v27 = (char *)a3[1];
                  if (v27 >= v21)
                  {
                    id v35 = &v27[-v22];
                    uint64_t v36 = (uint64_t)&v27[-v22 + 1];
                    if (v36 < 0) {
                      sub_10006A748();
                    }
                    if (2 * (uint64_t)&v21[-v22] > (unint64_t)v36) {
                      uint64_t v36 = 2 * (void)&v21[-v22];
                    }
                    if ((unint64_t)&v21[-v22] >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v31 = v36;
                    }
                    if (v31) {
                      CFBooleanRef v32 = (char *)operator new(v31);
                    }
                    else {
                      CFBooleanRef v32 = 0;
                    }
                    unsigned int v37 = &v35[(void)v32];
                    CFDictionaryRef v49 = &v35[(void)v32];
                    *CFDictionaryRef v49 = 3;
                    id v39 = v49 + 1;
                    if (v27 == (char *)v22) {
                      goto LABEL_104;
                    }
                    CFDictionaryRef v50 = &v27[~v22];
                    do
                    {
                      char v51 = *--v27;
                      (v50--)[(void)v32] = v51;
                    }
                    while (v27 != (char *)v22);
                    goto LABEL_103;
                  }
                  char v28 = 3;
                }
              }
              else
              {
                CFArrayRef v27 = (char *)a3[1];
                if (v27 >= v21)
                {
                  id v33 = &v27[-v22];
                  uint64_t v34 = (uint64_t)&v27[-v22 + 1];
                  if (v34 < 0) {
                    sub_10006A748();
                  }
                  if (2 * (uint64_t)&v21[-v22] > (unint64_t)v34) {
                    uint64_t v34 = 2 * (void)&v21[-v22];
                  }
                  if ((unint64_t)&v21[-v22] >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v31 = v34;
                  }
                  if (v31) {
                    CFBooleanRef v32 = (char *)operator new(v31);
                  }
                  else {
                    CFBooleanRef v32 = 0;
                  }
                  unsigned int v37 = &v33[(void)v32];
                  int v44 = &v33[(void)v32];
                  *int v44 = 2;
                  id v39 = v44 + 1;
                  if (v27 == (char *)v22) {
                    goto LABEL_104;
                  }
                  uint64_t v45 = &v27[~v22];
                  do
                  {
                    char v46 = *--v27;
                    (v45--)[(void)v32] = v46;
                  }
                  while (v27 != (char *)v22);
                  goto LABEL_103;
                }
                char v28 = 2;
              }
            }
            else
            {
              CFArrayRef v27 = (char *)a3[1];
              if (v27 >= v21)
              {
                long long v29 = &v27[-v22];
                uint64_t v30 = (uint64_t)&v27[-v22 + 1];
                if (v30 < 0) {
                  sub_10006A748();
                }
                if (2 * (uint64_t)&v21[-v22] > (unint64_t)v30) {
                  uint64_t v30 = 2 * (void)&v21[-v22];
                }
                if ((unint64_t)&v21[-v22] >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v31 = v30;
                }
                if (v31) {
                  CFBooleanRef v32 = (char *)operator new(v31);
                }
                else {
                  CFBooleanRef v32 = 0;
                }
                unsigned int v37 = &v29[(void)v32];
                uint64_t v38 = &v29[(void)v32];
                *uint64_t v38 = 1;
                id v39 = v38 + 1;
                if (v27 == (char *)v22) {
                  goto LABEL_104;
                }
                uint64_t v40 = &v27[~v22];
                do
                {
                  char v41 = *--v27;
                  (v40--)[(void)v32] = v41;
                }
                while (v27 != (char *)v22);
LABEL_103:
                unsigned int v37 = v32;
                goto LABEL_104;
              }
              char v28 = 1;
            }
            char *v27 = v28;
            id v39 = v27 + 1;
LABEL_107:
            a3[1] = (unint64_t)v39;
LABEL_108:
            ++v20;
          }
          while (v20 != Count);
        }
      }
    }
  }
  return sub_100057D78((const void **)&theDict);
}

void sub_10043EA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

const void **sub_10043EAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_10043E490(a1 - 24, a2, a3);
}

BOOL sub_10043EAF8(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    id v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    unsigned int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unsigned int v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"InconsistentICCIDLength");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_10043ECAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10043ECE8(uint64_t a1, uint64_t a2)
{
  return sub_10043EAF8(a1 - 24, a2);
}

BOOL sub_10043ECF0(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    id v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    unsigned int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unsigned int v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"RequiresExtendedGetSIMStatus");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_10043EEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10043EEE0(uint64_t a1, uint64_t a2)
{
  return sub_10043ECF0(a1 - 24, a2);
}

uint64_t sub_10043EEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  CFTypeID v16 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    id v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v17 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v17);
  if (v9)
  {
    uint64_t v11 = v9[3];
    unsigned int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unsigned int v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 8))(&v15, v11, a2);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (v15) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const __CFString *))(*(void *)v15 + 88))(v15, 8, @"authenticateTrustFlag");
  }
  else {
    uint64_t v13 = 0;
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
  return v13;
}

void sub_10043F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10043F078(uint64_t a1, uint64_t a2)
{
  return sub_10043EEE8(a1 - 24, a2);
}

uint64_t sub_10043F080(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  CFTypeID v16 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    id v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v17 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v17);
  if (v9)
  {
    uint64_t v11 = v9[3];
    unsigned int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unsigned int v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 8))(&v15, v11, a2);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  uint64_t v13 = v15;
  if (v15) {
    char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 488))(v15, 13);
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
  return (v13 != 0) & v12;
}

void sub_10043F1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10043F218(uint64_t a1, uint64_t a2)
{
  return sub_10043F080(a1 - 24, a2);
}

BOOL sub_10043F220(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    id v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v22 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v22);
  if (v9)
  {
    uint64_t v11 = v9[3];
    unsigned int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unsigned int v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v20, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v20);
  sub_1000577C4(&v20);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13
    && (CFArrayRef Value = (BOOL *)CFDictionaryGetValue(theDict, @"SuppressSIMAllianceVersioningAttributes"),
        uint64_t v15 = Value,
        LOBYTE(v22) = 0,
        Value)
    && (CFTypeID v16 = CFGetTypeID(Value), v16 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v22, v15, v17);
    BOOL v18 = (_BYTE)v22 == 0;
  }
  else
  {
    BOOL v18 = 1;
  }
  sub_100057D78((const void **)&theDict);
  return v18;
}

void sub_10043F3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10043F410(uint64_t a1, uint64_t a2)
{
  return sub_10043F220(a1 - 24, a2);
}

BOOL sub_10043F418(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    id v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    unsigned int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unsigned int v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"IgnoreAssociatedSubscriptionType");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_10043F5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10043F608(uint64_t a1, uint64_t a2)
{
  return sub_10043F418(a1 - 24, a2);
}

BOOL sub_10043F610(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  unint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    id v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    unsigned int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unsigned int v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"RequireAltAccountDeviceIDInGetSIMStatus");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_10043F7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10043F800(uint64_t a1, uint64_t a2)
{
  return sub_10043F610(a1 - 24, a2);
}

uint64_t *sub_10043F808@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Registry::getTimerService(a2, *(Registry **)(a1 + 72));
}

uint64_t *sub_10043F810@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Registry::getTimerService(a2, *(Registry **)(a1 + 48));
}

uint64_t *sub_10043F818@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Registry::getTimerService(a2, *(Registry **)(a1 + 40));
}

uint64_t *sub_10043F820@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Registry::getTimerService(a2, *(Registry **)(a1 + 32));
}

uint64_t sub_10043F828()
{
  return 180000000;
}

uint64_t sub_10043F834()
{
  return 180000000;
}

uint64_t sub_10043F840(capabilities::ct *a1)
{
  if (capabilities::ct::supportsSequoia(a1)) {
    return 120;
  }
  else {
    return 15;
  }
}

uint64_t sub_10043F868(capabilities::ct *a1)
{
  if (capabilities::ct::supportsSequoia(a1)) {
    return 120;
  }
  else {
    return 15;
  }
}

void sub_10043F890(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1011DEFFC(a2);
}

void sub_10043F8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10043F8FC@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "http://www.apple.com/library/test/success.html");
}

void *sub_10043F90C@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "http://www.apple.com/library/test/success.html");
}

void sub_10043F91C(void *a1@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  unint64_t v4 = v5;
  *a1 = 0;
  a1[1] = 0;
  sub_100058DB0(&__p, "http://www.apple.com/library/test/success.html");
  ctu::Http::HttpRequest::create();
  if (v3 < 0) {
    operator delete(__p);
  }
  if (*a1)
  {
    (*(void (**)(void, void))(*(void *)*a1 + 152))(*a1, kCTDataConnectionServiceTypeInternetProbe);
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 176))(*a1, 1);
  }
  sub_10010C0E0((uint64_t)&v4, v5[0]);
}

void sub_10043FA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10010C0E0((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10043FA64()
{
  return 25;
}

uint64_t sub_10043FA6C()
{
  return 25;
}

void sub_10043FA74(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      sub_1011D5B28(&v4);
    }
  }
  sub_100088B9C();
}

void sub_10043FB1C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v2);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_10043FB44(uint64_t a1)
{
  sub_100433878();
  uint64_t v2 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Send sim reprovision APDU", v3, 2u);
  }
  sub_10043FBB8(a1);
}

void sub_10043FBB8(uint64_t a1)
{
  uint64_t v2 = operator new(0xFuLL);
  *(void *)uint64_t v2 = 0x15F14430000000A0;
  void v2[2] = 16868198;
  *((_WORD *)v2 + 6) = 18755;
  *((unsigned char *)v2 + 14) = 49;
  char v3 = (std::__shared_weak_count *)operator new(0x30uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1019B47B8;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v3[1].__shared_owners_ = (uint64_t)v2 + 15;
  v3[1].__shared_weak_owners_ = (uint64_t)v2 + 15;
  long long v4 = (std::__shared_weak_count_vtbl *)operator new(1uLL);
  LOBYTE(v4->~__shared_weak_count) = 0;
  unint64_t v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_1019B47B8;
  v5[1].__vftable = v4;
  v5[1].__shared_owners_ = (uint64_t)&v4->~__shared_weak_count + 1;
  v5[1].__shared_weak_owners_ = (uint64_t)&v4->~__shared_weak_count + 1;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v7 = ServiceMap;
  if (v8 < 0)
  {
    uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)CSIPhoneNumber buf = v8;
  char v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    uint64_t v14 = v12[3];
    uint64_t v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      if (!v14) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  uint64_t v13 = 0;
  char v15 = 1;
  if (!v14)
  {
LABEL_7:
    sub_100433878();
    CFTypeID v16 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CSIPhoneNumber buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I No subscriber interface to send SIM reprovision", buf, 2u);
    }
    goto LABEL_15;
  }
LABEL_11:
  int v19 = v3 + 1;
  CFIndex v20 = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  CFBooleanRef v17 = v5 + 1;
  BOOL v18 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v23 = 0;
  v22[0] = off_1019CC928;
  v22[1] = _Block_copy(&stru_1019CC2B0);
  unint64_t v23 = v22;
  (*(void (**)(uint64_t, uint64_t, std::__shared_weak_count **, uint64_t, std::__shared_weak_count **, void *))(*(void *)v14 + 272))(v14, 1, &v19, 162, &v17, v22);
  sub_100060644(v22);
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
LABEL_15:
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v5);
  sub_10004D2C8(v3);
}

void sub_10043FEA0(_Unwind_Exception *a1)
{
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v3);
  }
  sub_10004D2C8(v2);
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_10043FF3C(uint64_t a1)
{
}

void sub_10043FF44(id a1, BOOL a2)
{
  BOOL v2 = a2;
  sub_100433878();
  char v3 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Sent SIM reprovision: %d", (uint8_t *)v4, 8u);
  }
}

void sub_10043FFE8(uint64_t a1)
{
}

uint64_t sub_10043FFF0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    if (*(char *)(a2 + 31) < 0)
    {
      sub_10004FC84(v7, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 24);
    }
    if (SHIBYTE(v8) < 0)
    {
      sub_10004FC84(__p, v7[0], (unint64_t)v7[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v7;
      uint64_t v12 = v8;
    }
    uint64_t v10 = 0;
    if (SHIBYTE(v12) < 0)
    {
      sub_10004FC84(&__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)__p;
      uint64_t v14 = v12;
    }
    char v15 = 0;
    if (ctu::cf::convert_copy())
    {
      char v3 = v10;
      uint64_t v10 = v15;
      CFTypeID v16 = v3;
      sub_1000558F4(&v16);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__dst);
    }
    char v4 = v10;
    uint64_t v9 = v10;
    uint64_t v10 = 0;
    sub_1000558F4(&v10);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7[0]);
    }
    if (v4) {
      unint64_t v5 = sub_1000810B8;
    }
    else {
      unint64_t v5 = 0;
    }
    CFStringRef v2 = (const __CFString *)kRemoteCellularPlanStorage;
    if (v5) {
      CFPreferencesSetAppValue(@"RemotePlanSimOperationLastResetKey", v4, kRemoteCellularPlanStorage);
    }
    sub_1000558F4(&v9);
  }
  else
  {
    CFStringRef v2 = (const __CFString *)kRemoteCellularPlanStorage;
    CFPreferencesSetAppValue(@"RemotePlanSimOperationLastResetKey", 0, kRemoteCellularPlanStorage);
  }
  return CFPreferencesAppSynchronize(v2);
}

void sub_100440190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, const void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

const void **sub_1004401F8@<X0>(uint64_t a1@<X8>)
{
  id v6 = 0;
  CFTypeRef v7 = CFPreferencesCopyAppValue(@"RemotePlanSimOperationLastResetKey", kRemoteCellularPlanStorage);
  sub_100225AE0(&v6, &v7);
  if (v6) {
    CFStringRef v2 = sub_1000810B8;
  }
  else {
    CFStringRef v2 = 0;
  }
  if (v2)
  {
    CFTypeRef v7 = 0;
    long long v8 = 0uLL;
    ctu::cf::assign();
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)((char *)&v8 + 7);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 23) = v4;
    *(unsigned char *)(a1 + 31) = HIBYTE(v8);
    LOBYTE(v2) = 1;
  }
  *(unsigned char *)a1 = (_BYTE)v2;
  return sub_1000558F4(&v6);
}

void sub_1004402A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000558F4((const void **)&a9);
  _Unwind_Resume(a1);
}

BOOL *sub_1004402CC(uint64_t a1)
{
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFStringRef v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v3;
  CFTypeRef v7 = sub_10004D37C(&v2[1].__m_.__sig, &v16);
  if (v7)
  {
    uint64_t v9 = v7[3];
    long long v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  long long v8 = 0;
  char v10 = 1;
LABEL_9:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void, const __CFString *, void, void))(*(void *)v9 + 40))(&cf, v9, kCarrier1BundleId, @"CardProvisioningRequiresResetTrigger", 0, 0);
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
  unsigned int v11 = (BOOL *)cf;
  LOBYTE(v16) = 0;
  if (cf)
  {
    CFTypeID v12 = CFGetTypeID(cf);
    if (v12 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v16, v11, v13);
      unsigned int v11 = (BOOL *)((_BYTE)v16 != 0);
    }
    else
    {
      unsigned int v11 = 0;
    }
  }
  sub_1000577C4(&cf);
  return v11;
}

void sub_100440440(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_100440470(uint64_t a1)
{
  return sub_1004402CC(a1 - 32);
}

BOOL *sub_100440478(uint64_t a1)
{
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFStringRef v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v3;
  CFTypeRef v7 = sub_10004D37C(&v2[1].__m_.__sig, &v16);
  if (v7)
  {
    uint64_t v9 = v7[3];
    long long v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  long long v8 = 0;
  char v10 = 1;
LABEL_9:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void, const __CFString *, void, void))(*(void *)v9 + 40))(&cf, v9, kCarrier1BundleId, @"CardSupportsReprovisionTrigger", 0, 0);
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
  unsigned int v11 = (BOOL *)cf;
  LOBYTE(v16) = 0;
  if (cf)
  {
    CFTypeID v12 = CFGetTypeID(cf);
    if (v12 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v16, v11, v13);
      unsigned int v11 = (BOOL *)((_BYTE)v16 != 0);
    }
    else
    {
      unsigned int v11 = 0;
    }
  }
  sub_1000577C4(&cf);
  return v11;
}

void sub_1004405EC(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_10044061C(uint64_t a1)
{
  return sub_100440478(a1 - 32);
}

const void **sub_100440624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  values[0] = @"CarrierEntitlements";
  values[1] = @"PushSettings";
  CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)values, 2, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v43 = v14;
  CFArrayRef v41 = v14;
  if (v14) {
    CFRetain(v14);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v41, &theDict);
  sub_100044D00((const void **)&v41);
  CFDictionaryRef v40 = 0;
  if (theDict) {
    char v15 = sub_1000C06D0;
  }
  else {
    char v15 = 0;
  }
  if (v15)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CarrierEntitlements");
    CFDictionaryRef v17 = Value;
    if (Value && (CFTypeID v18 = CFGetTypeID(Value), v18 == CFDictionaryGetTypeID()))
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v17);
      CFDictionaryRef v20 = v40;
      CFDictionaryRef v40 = MutableCopy;
      *(void *)&long long buf = v20;
      sub_10005717C((const void **)&buf);
      if (CFDictionaryContainsKey(v40, @"SupportedActions"))
      {
        CFArrayRef theArray = 0;
        CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (Mutable)
        {
          CFArrayRef v22 = theArray;
          CFArrayRef theArray = Mutable;
          *(void *)&long long buf = v22;
          sub_1000440D4((const void **)&buf);
        }
        CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(v40, @"SupportedActions");
        CFArrayRef v24 = v23;
        if (v23)
        {
          CFTypeID v25 = CFGetTypeID(v23);
          if (v25 == CFArrayGetTypeID())
          {
            CFIndex Count = CFArrayGetCount(v24);
            if (Count >= 1)
            {
              for (CFIndex i = 0; i != Count; ++i)
              {
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v24, i);
                CFStringRef v29 = ValueAtIndex;
                if (ValueAtIndex)
                {
                  CFTypeID v30 = CFGetTypeID(ValueAtIndex);
                  if (v30 == CFStringGetTypeID()
                    && (CFStringCompare(v29, @"TransferSIMService", 1uLL) == kCFCompareEqualTo
                     || CFStringCompare(v29, @"transferAuthorization", 1uLL) == kCFCompareEqualTo))
                  {
                    sub_1001C6B94(theArray, v29);
                  }
                }
              }
            }
          }
        }
        CFDictionaryRemoveValue(v40, @"SupportedActions");
        if (CFArrayGetCount(theArray) >= 1) {
          sub_1001C6DC0(v40, @"SupportedActions", (uint64_t)theArray);
        }
        sub_1000440D4((const void **)&theArray);
      }
    }
    else
    {
      sub_100433878();
      size_t v31 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = @"CarrierEntitlements";
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%@ is missing or of incorrect type", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  CFArrayRef theArray = 0;
  if (theDict) {
    CFBooleanRef v32 = sub_1000C06D0;
  }
  else {
    CFBooleanRef v32 = 0;
  }
  if (v32)
  {
    CFDictionaryRef v33 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PushSettings");
    CFDictionaryRef v34 = v33;
    if (v33)
    {
      CFTypeID v35 = CFGetTypeID(v33);
      if (v35 == CFDictionaryGetTypeID())
      {
        CFArrayRef v36 = CFDictionaryCreateMutableCopy(0, 0, v34);
        CFArrayRef v37 = theArray;
        CFArrayRef theArray = v36;
        *(void *)&long long buf = v37;
        sub_10005717C((const void **)&buf);
      }
    }
  }
  *(void *)&long long buf = v40;
  if (v40) {
    CFRetain(v40);
  }
  *((void *)&buf + 1) = theArray;
  if (theArray) {
    CFRetain(theArray);
  }
  sub_10004EFE4(a7, (CFTypeRef *)&buf);
  sub_10004EFE4(a7 + 1, (CFTypeRef *)&buf + 1);
  sub_10005717C((const void **)&buf + 1);
  sub_10005717C((const void **)&buf);
  sub_10005717C((const void **)&theArray);
  sub_10005717C((const void **)&v40);
  sub_10005717C((const void **)&theDict);
  return sub_100044D00((const void **)&v43);
}

void sub_100440A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  char v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  uint64_t v7 = va_arg(va2, void);
  va_copy(va3, va2);
  long long v8 = va_arg(va3, const void *);
  sub_1000440D4((const void **)va);
  sub_10005717C((const void **)va1);
  sub_10005717C((const void **)va2);
  sub_100044D00((const void **)va3);
  _Unwind_Resume(a1);
}

const void **sub_100440ACC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  value = 0;
  char v10 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 224))(&value);
  CFMutableDictionaryRef theDict = 0;
  CFArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = theDict;
    CFMutableDictionaryRef theDict = Mutable;
    CFMutableDictionaryRef v11 = v4;
    sub_10005717C((const void **)&v11);
  }
  if (value) {
    uint64_t v5 = sub_100080778;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5) {
    CFDictionaryAddValue(theDict, @"CarrierEntitlements", value);
  }
  if (v10) {
    unsigned int v6 = sub_100080778;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6) {
    CFDictionaryAddValue(theDict, @"PushSettings", v10);
  }
  sub_10004EFE4(a2, (CFTypeRef *)&theDict);
  sub_10005717C((const void **)&theDict);
  sub_100057D78((const void **)&v10);
  return sub_100057D78((const void **)&value);
}

void sub_100440BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10005717C(&a9);
  sub_100057D78(v10);
  sub_100057D78(&a10);
  _Unwind_Resume(a1);
}

unint64_t sub_100440C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  values = @"CarrierEntitlements";
  CFArrayRef v12 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v25 = v12;
  CFArrayRef v23 = v12;
  if (v12) {
    CFRetain(v12);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v23, (CFDictionaryRef *)buf);
  sub_10004EFE4(&theDict, (CFTypeRef *)buf);
  sub_10005717C((const void **)buf);
  sub_100044D00((const void **)&v23);
  if (theDict) {
    CFBooleanRef v13 = sub_100080778;
  }
  else {
    CFBooleanRef v13 = 0;
  }
  if (v13
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CarrierEntitlements"), (CFDictionaryRef v15 = Value) != 0)
    && (CFTypeID v16 = CFGetTypeID(Value), v16 == CFDictionaryGetTypeID()))
  {
    uint64_t v21 = 0;
    CFArrayRef v22 = 0;
    CFDictionaryRef v17 = *(std::__shared_weak_count **)(a1 + 80);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)long long buf = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    sub_100CE946C(v15, 8u, &v21);
    if (v17) {
      sub_10004D2C8(v17);
    }
    if (v21) {
      unint64_t v18 = ((unint64_t)sub_100CE9554(v21) >> 13) & 1;
    }
    else {
      unint64_t v18 = 0;
    }
    if (v22) {
      sub_10004D2C8(v22);
    }
  }
  else
  {
    unint64_t v18 = 0;
  }
  sub_100057D78((const void **)&theDict);
  sub_100433878();
  int v19 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I iPhone Transfer supported: [%d]", buf, 8u);
  }
  sub_100044D00((const void **)&v25);
  return v18;
}

void sub_100440E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  long long v8 = va_arg(va1, const void *);
  if (a6) {
    sub_10004D2C8(a6);
  }
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100440EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)unint64_t v26 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFBooleanRef v13 = *(__CFArray **)v26;
    *(void *)unint64_t v26 = Mutable;
    v21[0] = v13;
    sub_1000440D4(v21);
  }
  sub_1001C6B94(*(__CFArray **)v26, @"CarrierEntitlements");
  CFDictionaryRef theDict = 0;
  sub_100044D6C(&v24, (CFTypeRef *)v26);
  sub_100433ECC(a1, a2, a3, a4, a5, a6, (CFArrayRef *)&v24, (CFDictionaryRef *)v21);
  sub_10004EFE4(&theDict, v21);
  sub_10005717C(v21);
  sub_100044D00(&v24);
  if (theDict) {
    CFArrayRef v14 = sub_100080778;
  }
  else {
    CFArrayRef v14 = 0;
  }
  if (!v14) {
    goto LABEL_18;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CarrierEntitlements");
  CFDictionaryRef v16 = Value;
  if (!Value) {
    goto LABEL_18;
  }
  CFTypeID v17 = CFGetTypeID(Value);
  if (v17 != CFDictionaryGetTypeID()) {
    goto LABEL_18;
  }
  uint64_t v22 = 0;
  CFArrayRef v23 = 0;
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 80);
  v21[3] = *(CFTypeRef *)(a1 + 72);
  v21[4] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v21, 0, 24);
  sub_100CE946C(v16, 8u, &v22);
  if (v18) {
    sub_10004D2C8(v18);
  }
  uint64_t v19 = v22;
  if (v22) {
    LOBYTE(a1) = sub_100CEBBBC(v22, @"EntitlementRequestViaWebService", 0);
  }
  if (v23) {
    sub_10004D2C8(v23);
  }
  if (!v19) {
LABEL_18:
  }
    LOBYTE(a1) = 0;
  sub_100057D78((const void **)&theDict);
  sub_1000440D4((const void **)v26);
  return a1 & 1;
}

void sub_100441098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  char v10 = va_arg(va1, const void *);
  if (a8) {
    sub_10004D2C8(a8);
  }
  sub_100057D78((const void **)va);
  sub_1000440D4((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100441104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)unint64_t v26 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFBooleanRef v13 = *(__CFArray **)v26;
    *(void *)unint64_t v26 = Mutable;
    v21[0] = v13;
    sub_1000440D4(v21);
  }
  sub_1001C6B94(*(__CFArray **)v26, @"CarrierEntitlements");
  CFDictionaryRef theDict = 0;
  sub_100044D6C(&v24, (CFTypeRef *)v26);
  sub_100433ECC(a1, a2, a3, a4, a5, a6, (CFArrayRef *)&v24, (CFDictionaryRef *)v21);
  sub_10004EFE4(&theDict, v21);
  sub_10005717C(v21);
  sub_100044D00(&v24);
  if (theDict) {
    CFArrayRef v14 = sub_100080778;
  }
  else {
    CFArrayRef v14 = 0;
  }
  if (!v14) {
    goto LABEL_18;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CarrierEntitlements");
  CFDictionaryRef v16 = Value;
  if (!Value) {
    goto LABEL_18;
  }
  CFTypeID v17 = CFGetTypeID(Value);
  if (v17 != CFDictionaryGetTypeID()) {
    goto LABEL_18;
  }
  uint64_t v22 = 0;
  CFArrayRef v23 = 0;
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 80);
  v21[3] = *(CFTypeRef *)(a1 + 72);
  v21[4] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v21, 0, 24);
  sub_100CE946C(v16, 8u, &v22);
  if (v18) {
    sub_10004D2C8(v18);
  }
  uint64_t v19 = v22;
  if (v22) {
    LOBYTE(a1) = sub_100CEBBBC(v22, @"SupportPhysicalSIMtoESIMTransfer", 0);
  }
  if (v23) {
    sub_10004D2C8(v23);
  }
  if (!v19) {
LABEL_18:
  }
    LOBYTE(a1) = 0;
  sub_100057D78((const void **)&theDict);
  sub_1000440D4((const void **)v26);
  return a1 & 1;
}

void sub_1004412E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  char v10 = va_arg(va1, const void *);
  if (a8) {
    sub_10004D2C8(a8);
  }
  sub_100057D78((const void **)va);
  sub_1000440D4((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_100441350(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 80);
  CFStringRef v2 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CarrierEntitlements::setSubscriberId();
  if (v2) {
    sub_10004D2C8(v2);
  }
}

void sub_1004413A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004413B8(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 80);
  CFStringRef v2 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CarrierEntitlements::setServiceToken();
  if (v2) {
    sub_10004D2C8(v2);
  }
}

void sub_100441408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100441420(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 80);
  CFStringRef v2 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CarrierEntitlements::setTransferTargetSlot();
  if (v2) {
    sub_10004D2C8(v2);
  }
}

void sub_100441470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100441488(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    xpc_object_t object = 0;
    cellplan::write_rest_value((cellplan *)(a2 + 8), (const cellplan::RemoteSimSelectionModel *)a2);
    CFPropertyListRef value = 0;
    xpc::bridge((uint64_t *)&v6, (xpc *)&object, v2);
    sub_10004EFE4(&value, &v6);
    sub_1000577C4(&v6);
    if (value) {
      char v3 = sub_100080778;
    }
    else {
      char v3 = 0;
    }
    if (v3) {
      CFPreferencesSetAppValue(@"RemotePlanSelectedKey", value, kRemoteCellularPlanStorage);
    }
    sub_100057D78(&value);
    xpc_release(object);
    CFStringRef v4 = (const __CFString *)kRemoteCellularPlanStorage;
  }
  else
  {
    CFStringRef v4 = (const __CFString *)kRemoteCellularPlanStorage;
    CFPreferencesSetAppValue(@"RemotePlanSelectedKey", 0, kRemoteCellularPlanStorage);
  }
  return CFPreferencesAppSynchronize(v4);
}

void sub_100441560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, xpc_object_t object)
{
}

uint64_t sub_10044159C(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  *(void *)&long long v10 = CFPreferencesCopyAppValue(@"RemotePlanSelectedKey", kRemoteCellularPlanStorage);
  sub_100084068(&v9, (CFTypeRef *)&v10);
  if (v9) {
    CFStringRef v4 = sub_100080778;
  }
  else {
    CFStringRef v4 = 0;
  }
  if (!v4) {
    goto LABEL_11;
  }
  xpc_object_t object = 0;
  ctu::cf_to_xpc((uint64_t *)&object, v9, v3);
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_null)
  {
    xpc_release(object);
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  cellplan::RemoteSimSelectionModel::RemoteSimSelectionModel((cellplan::RemoteSimSelectionModel *)&v10);
  cellplan::read_rest_value((cellplan *)&v10, (cellplan::RemoteSimSelectionModel *)&object, v5);
  sub_1004496DC(a2, (uint64_t)&v10);
  if (BYTE8(v11) && SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
  uint64_t v6 = 1;
LABEL_12:
  sub_100057D78((const void **)&v9);
  return v6;
}

void sub_1004416CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100441734(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    xpc_object_t object = 0;
    cellplan::write_rest_value((cellplan *)(a2 + 8), (const cellplan::RemoteSimSelectionModel *)a2);
    CFPropertyListRef value = 0;
    xpc::bridge((uint64_t *)&v6, (xpc *)&object, v2);
    sub_10004EFE4(&value, &v6);
    sub_1000577C4(&v6);
    if (value) {
      char v3 = sub_100080778;
    }
    else {
      char v3 = 0;
    }
    if (v3) {
      CFPreferencesSetAppValue(@"RemotePlanSelectedOverrideKey", value, kRemoteCellularPlanStorage);
    }
    sub_100057D78(&value);
    xpc_release(object);
    CFStringRef v4 = (const __CFString *)kRemoteCellularPlanStorage;
  }
  else
  {
    CFStringRef v4 = (const __CFString *)kRemoteCellularPlanStorage;
    CFPreferencesSetAppValue(@"RemotePlanSelectedOverrideKey", 0, kRemoteCellularPlanStorage);
  }
  return CFPreferencesAppSynchronize(v4);
}

void sub_10044180C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, xpc_object_t object)
{
}

uint64_t sub_100441848(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  *(void *)&long long v10 = CFPreferencesCopyAppValue(@"RemotePlanSelectedOverrideKey", kRemoteCellularPlanStorage);
  sub_100084068(&v9, (CFTypeRef *)&v10);
  if (v9) {
    CFStringRef v4 = sub_100080778;
  }
  else {
    CFStringRef v4 = 0;
  }
  if (!v4) {
    goto LABEL_11;
  }
  xpc_object_t object = 0;
  ctu::cf_to_xpc((uint64_t *)&object, v9, v3);
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_null)
  {
    xpc_release(object);
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  cellplan::RemoteSimSelectionModel::RemoteSimSelectionModel((cellplan::RemoteSimSelectionModel *)&v10);
  cellplan::read_rest_value((cellplan *)&v10, (cellplan::RemoteSimSelectionModel *)&object, v5);
  sub_1004496DC(a2, (uint64_t)&v10);
  if (BYTE8(v11) && SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
  uint64_t v6 = 1;
LABEL_12:
  sub_100057D78((const void **)&v9);
  return v6;
}

void sub_100441978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004419E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Registry::createRestModuleOneTimeUseConnection(a2, *(Registry **)(a1 + 72));
}

uint64_t *sub_1004419E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Registry::createRestModuleOneTimeUseConnection(a2, *(Registry **)(a1 + 40));
}

uint64_t sub_1004419F0()
{
  return 420;
}

uint64_t sub_1004419F8()
{
  return 420;
}

std::__shared_weak_count *sub_100441A00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v3 || (v5 = *(void *)(a1 + 56), (double result = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v5 + 16;
  if (!v5) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t sub_100441A4C()
{
  return 15;
}

uint64_t sub_100441A54()
{
  return 15;
}

void sub_100441A5C(uint64_t a1, int a2)
{
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t v12 = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v12 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t v12 = v5;
LABEL_9:
  xpc_release(v4);
  xpc_object_t v10 = xpc_int64_create(a2);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  v9[0] = &v12;
  v9[1] = "kCTCellularPlanSimSubscriptionStatusKey";
  sub_100035E70((uint64_t)v9, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_object_t v6 = v12;
  v9[0] = v12;
  if (v12)
  {
    xpc_retain(v12);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    v9[0] = v6;
  }
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v8 = v7;
  sub_1000452AC(165, v9, &v8);
  xpc_release(v7);
  xpc_release(v6);
  xpc_release(v12);
}

void sub_100441BB0(_Unwind_Exception *a1)
{
  xpc_object_t v4 = v2;
  xpc_release(v4);
  xpc_release(v1);
  xpc_release(*(xpc_object_t *)(v3 - 24));
  _Unwind_Resume(a1);
}

void sub_100441C08(uint64_t a1@<X0>, NSObject **a2@<X1>, void *a3@<X8>)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v4 || (v7 = *(void *)(a1 + 56), (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v9 = v8;
  xpc_object_t v10 = *a2;
  long long v11 = (std::__shared_weak_count *)operator new(0x58uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC9A8;
  xpc_object_t v12 = &v11[1].__vftable;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v13 = v7 + 48;
  if (!v7) {
    uint64_t v13 = 0;
  }
  v15[0] = v13;
  v15[1] = (uint64_t)v9;
  sub_101049334(v12, &object, v15);
  sub_10004D2C8(v9);
  if (object) {
    dispatch_release(object);
  }
  shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[1].__shared_owners_ = (uint64_t)v12;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
    goto LABEL_13;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[1].__shared_owners_ = (uint64_t)v12;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_13:
    sub_10004D2C8(v11);
  }
  *a3 = v12;
  a3[1] = v11;
}

void sub_100441D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  sub_10004D2C8(v13);
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100441D80(uint64_t a1, std::string *a2, std::string *a3)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  xpc_object_t v6 = ServiceMap;
  if (v7 < 0)
  {
    xpc_object_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v7;
  long long v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v11)
  {
    uint64_t v13 = v11[3];
    xpc_object_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  xpc_object_t v12 = 0;
  char v14 = 1;
LABEL_9:
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)long long buf = 0u;
  long long v26 = 0u;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 216))(buf, v13, 1);
  if (MCC::valid((MCC *)buf))
  {
    MCC::getStringValue((uint64_t *)&__str, (MCC *)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str;
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(*(void **)&buf[8]);
  }
  memset(&__str, 0, sizeof(__str));
  *(_OWORD *)long long buf = 0u;
  long long v26 = 0u;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 232))(buf, v13, 1);
  if (MCC::valid((MCC *)buf))
  {
    MCC::getStringValue((uint64_t *)&__val, (MCC *)buf);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = __val;
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(*(void **)&buf[8]);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_28;
  }
  std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
  }
  if (v16)
  {
    std::string::operator=(a2, &__p);
    std::string::operator=(a3, &__str);
    uint64_t v17 = 1;
  }
  else
  {
LABEL_28:
    uint64_t v17 = 0;
  }
  if (sub_10004D710())
  {
    int v22 = -1;
    LODWORD(__val.__r_.__value_.__l.__data_) = -1;
    uint64_t v18 = sub_100365D74();
    sub_100058DB0(buf, "SequoiaSignIdMap::MccOverride");
    sub_1004421D8(v18, (void **)buf, &__val);
    if (SBYTE7(v26) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v19 = sub_100365D74();
    sub_100058DB0(buf, "SequoiaSignIdMap::MncOverride");
    sub_1004421D8(v19, (void **)buf, &v22);
    if (SBYTE7(v26) < 0) {
      operator delete(*(void **)buf);
    }
    if (SLODWORD(__val.__r_.__value_.__l.__data_) >= 1 && v22 >= 1)
    {
      sub_100433878();
      CFDictionaryRef v20 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I overriding mcc and mnc", buf, 2u);
      }
      std::to_string((std::string *)buf, (int)__val.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
      __p.__r_.__value_.__r.__words[2] = v26;
      std::to_string((std::string *)buf, v22);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
      __str.__r_.__value_.__r.__words[2] = v26;
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v14) {
      return v17;
    }
    goto LABEL_47;
  }
  if ((v14 & 1) == 0) {
LABEL_47:
  }
    sub_10004D2C8(v12);
  return v17;
}

void sub_10044212C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if ((v36 & 1) == 0) {
    sub_10004D2C8(v35);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1004421D8(uint64_t a1, void **a2, _DWORD *a3)
{
  std::mutex::lock(&stru_101B09FA8);
  memset(&v11, 0, sizeof(v11));
  xpc_object_t v6 = sub_100046F68(a1, a2);
  uint64_t v7 = v6;
  xpc_object_t v8 = (void **)(a1 + 8);
  if (v8 != v6)
  {
    std::string::operator=(&v11, (const std::string *)(v6 + 7));
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v11;
    }
    else {
      uint64_t v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    *a3 = strtoll((const char *)v9, 0, 16);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  std::mutex::unlock(&stru_101B09FA8);
  return v8 != v7;
}

void sub_100442298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(&stru_101B09FA8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004422C0(uint64_t a1, std::string *a2, std::string *a3)
{
  return sub_100441D80(a1 - 48, a2, a3);
}

uint64_t sub_1004422C8()
{
  uint64_t result = +[CTLocationManager sharedManager];
  if (result)
  {
    char v1 = (void *)result;
    uint64_t result = (uint64_t)[(id)result isLocationServiceAuthorized];
    if (result)
    {
      [v1 startLocationUpdatesWithReason:"Cellular Plan"];
      return 1;
    }
  }
  return result;
}

uint64_t sub_100442314()
{
  id v0 = +[CTLocationManager sharedManager];
  if (!v0) {
    return 58;
  }
  char v1 = v0;
  if (![v0 isLocationServiceEnabled]) {
    return 59;
  }
  if ([v1 isLocationServiceAuthorized]) {
    return 58;
  }
  return 60;
}

void sub_100442374(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = 0.0;
  a2[1] = 0.0;
  a2[2] = 0.0;
  id v4 = objc_msgSend(+[CTLocationManager sharedManager](CTLocationManager, "sharedManager"), "copyLastKnownLocation");
  xpc_object_t v5 = v4;
  if (v4)
  {
    [v4 coordinate];
    uint64_t v7 = v6;
    [v5 coordinate];
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v8;
    *(unsigned char *)a2 = 1;
    id v9 = [v5 sourceInformation];
    unsigned int v10 = v9;
    if (v9)
    {
      if ([v9 isSimulatedBySoftware]) {
        unsigned int v11 = 1;
      }
      else {
        unsigned int v11 = [v10 isProducedByAccessory];
      }
      int v12 = v11 ^ 1;
    }
    else
    {
      int v12 = 0;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (sub_10004D710())
  {
    CFTypeRef cf = 0;
    (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 88) + 40))(&cf);
    uint64_t v13 = (BOOL *)cf;
    if (cf) {
      char v14 = sub_100080934;
    }
    else {
      char v14 = 0;
    }
    if (v14)
    {
      LOBYTE(__p[0]) = 0;
      if (cf)
      {
        CFTypeID v15 = CFGetTypeID(cf);
        if (v15 == CFBooleanGetTypeID()) {
          ctu::cf::assign((ctu::cf *)__p, v13, v16);
        }
      }
      BOOL v17 = LOBYTE(__p[0]) != 0;
    }
    else
    {
      BOOL v17 = 0;
    }
    double v27 = 0.0;
    double v28 = 0.0;
    uint64_t v19 = sub_100365D74();
    sub_100058DB0(__p, "SequoiaSignIdMap::LatitudeOverride");
    sub_1002261A0(v19, __p, &v28);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v20 = sub_100365D74();
    sub_100058DB0(__p, "SequoiaSignIdMap::LongitureOverride");
    sub_1002261A0(v20, __p, &v27);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 == 0.0 && v27 == 0.0)
    {
      sub_1000577C4(&cf);
      if (!v5 || ((v17 | v12) & 1) != 0) {
        return;
      }
      goto LABEL_33;
    }
    sub_100433878();
    int v22 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I overriding lat and long", (uint8_t *)__p, 2u);
    }
    double v24 = v27;
    double v23 = v28;
    if (!v5) {
      *(unsigned char *)a2 = 1;
    }
    a2[1] = v23;
    a2[2] = v24;
    sub_1000577C4(&cf);
  }
  else
  {
    if (v5) {
      char v18 = v12;
    }
    else {
      char v18 = 1;
    }
    if ((v18 & 1) == 0)
    {
LABEL_33:
      sub_100433878();
      uint64_t v21 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I block untrusted locations", (uint8_t *)__p, 2u);
      }
      *(unsigned char *)a2 = 0;
    }
  }
}

void sub_10044266C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, const void *a17)
{
  sub_1000577C4(&a17);
  if (v18) {
    *BOOL v17 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004426CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, const CFStringRef, const CFStringRef))(**(void **)(a1 + 88)
                                                                                                  + 40))(*(void *)(a1 + 88), a2, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
}

void sub_100442718(uint64_t a1@<X0>, double *a2@<X8>)
{
}

void sub_100442720(uint64_t a1, uint64_t *a2, id *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    id v4 = a2;
  }
  else {
    id v4 = (uint64_t *)*a2;
  }
  xpc_object_t v5 = +[NSString stringWithUTF8String:v4];
  uint64_t v8 = 0;
  if (*a3) {
    uint64_t v6 = sub_10008324C;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6 || ([*a3 writeToFile:v5 options:0x40000000 error:&v8] & 1) == 0)
  {
    sub_100433878();
    uint64_t v7 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Writing to file failed with error: %@", buf, 0xCu);
    }
  }
}

void sub_100442820(uint64_t a1, uint64_t *a2, id *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    id v4 = a2;
  }
  else {
    id v4 = (uint64_t *)*a2;
  }
  xpc_object_t v5 = +[NSString stringWithUTF8String:v4];
  if (*a3) {
    uint64_t v6 = sub_10008324C;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6 || ([*a3 writeToFile:v5 atomically:1] & 1) == 0)
  {
    sub_100433878();
    uint64_t v7 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "error writing to file", v8, 2u);
    }
  }
}

void sub_1004428DC(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X8>)
{
  *a3 = 0;
  uint64_t v8 = 0;
  id v9 = 0;
  Registry::getFileSystemInterface(&v8, *(Registry **)(a1 + 72));
  if (v8)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 88))(v8, a2))
    {
      (*(void (**)(const void **__return_ptr))(*(void *)v8 + 168))(&v7);
      if (&v7 != a3)
      {
        *(void *)long long buf = *a3;
        *a3 = v7;
        uint64_t v7 = 0;
        sub_100030068((const void **)buf);
      }
      sub_100030068(&v7);
    }
    else
    {
      sub_100433878();
      uint64_t v6 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I No cache file to load", buf, 2u);
      }
    }
  }
  else
  {
    sub_100433878();
    xpc_object_t v5 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Missing File System Interface", buf, 2u);
    }
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100442A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_100030068(v12);
  _Unwind_Resume(a1);
}

void sub_100442A88(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  int v12 = 0;
  Registry::getFileSystemInterface(&v11, *(Registry **)(a1 + 72));
  if (!v11)
  {
    sub_100433878();
    uint64_t v8 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_WORD *)long long buf = 0;
    xpc_object_t v5 = "Missing File System Interface";
    uint64_t v6 = v8;
    uint32_t v7 = 2;
    goto LABEL_11;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 88))(v11, a2))
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 112))(v11, a2)) {
      goto LABEL_17;
    }
    sub_100433878();
    uint64_t v3 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    if (*((char *)a2 + 23) >= 0) {
      id v4 = a2;
    }
    else {
      id v4 = (uint64_t *)*a2;
    }
    *(_DWORD *)long long buf = 136315138;
    char v14 = v4;
    xpc_object_t v5 = "Failed to remove %s";
    uint64_t v6 = v3;
    uint32_t v7 = 12;
LABEL_11:
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v5, buf, v7);
    goto LABEL_17;
  }
  sub_100433878();
  id v9 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)long long buf = 136315138;
    char v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I No cache file to remove: %s", buf, 0xCu);
  }
LABEL_17:
  if (v12) {
    sub_10004D2C8(v12);
  }
}

void sub_100442C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100442C90(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  id v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v5;
  id v9 = sub_10004D37C(&v4[1].__m_.__sig, &v21);
  if (v9)
  {
    uint64_t v11 = v9[3];
    uint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  uint64_t v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(&v19, v11, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v19);
  sub_1000577C4(&v19);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"RequiresPairingSupportIndicator");
  BOOL v15 = (BOOL)Value;
  LOBYTE(v21) = 0;
  if (Value)
  {
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v21, (BOOL *)v15, v17);
      BOOL v15 = (_BYTE)v21 != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  return v15;
}

void sub_100442E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100442E80(uint64_t a1, uint64_t a2, int a3)
{
  CFDictionaryRef theDict = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v6 = ServiceMap;
  if (v7 < 0)
  {
    unsigned int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  CFArrayRef v25 = (void *)v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v25);
  if (v11)
  {
    uint64_t v13 = v11[3];
    char v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  char v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 80))(&v23, v13, a2, 1, @"RemoteCardProvisioningSettings", 0, 0);
  sub_10004EFE4(&theDict, &v23);
  sub_1000577C4(&v23);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (theDict) {
    BOOL v15 = sub_100080778;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    if (a3 == 2) {
      CFDictionaryGetValue(theDict, @"MinCompatibleWatchOSForStandaloneMode");
    }
    else {
      CFDictionaryGetValue(theDict, @"MinCompatibleWatchOS");
    }
    CFArrayRef v25 = 0;
    char v26 = 0;
    uint64_t v27 = 0;
    ctu::cf::assign();
    CFBooleanRef v17 = v25;
    LODWORD(v23) = v27;
    *(_DWORD *)((char *)&v23 + 3) = *(_DWORD *)((char *)&v27 + 3);
    char v18 = HIBYTE(v27);
    if (v27 < 0)
    {
      sub_10004FC84(__p, v25, (unint64_t)v26);
    }
    else
    {
      __p[0] = v25;
      __p[1] = v26;
      *(_DWORD *)unint64_t v21 = v23;
      *(_DWORD *)&v21[3] = *(_DWORD *)((char *)&v23 + 3);
      char v22 = HIBYTE(v27);
    }
    uint64_t v16 = sub_100CD1928((const char *)__p);
    if (v22 < 0)
    {
      operator delete(__p[0]);
      if ((v18 & 0x80) == 0) {
        goto LABEL_24;
      }
    }
    else if ((v18 & 0x80) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v17);
    goto LABEL_24;
  }
  uint64_t v16 = 0;
LABEL_24:
  sub_100057D78((const void **)&theDict);
  return v16;
}

void sub_1004430B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, const void *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  operator delete(v20);
  sub_100057D78(&a14);
  _Unwind_Resume(a1);
}

void sub_100443120(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  memset(v94, 0, sizeof(v94));
  long long v93 = 0u;
  long long v90 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  std::string __p = 0;
  uint64_t v88 = 0;
  long long v89 = 0;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8) {
    goto LABEL_82;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
LABEL_82:
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    *(void *)(a7 + 24) = 0;
    long long v93 = 0uLL;
    v94[0] = 0uLL;
    *(void *)(a7 + 32) = 0;
    *(void *)(a7 + 40) = 0;
    v94[1] = 0uLL;
    goto LABEL_95;
  }
  values = @"SupportDualSimSuppressionOnColdPhysicalSIM";
  CFArrayRef v16 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef theDict = 0;
  CFArrayRef v86 = v16;
  CFArrayRef v84 = v16;
  if (v16) {
    CFRetain(v16);
  }
  sub_100433ECC(a1, a2, a3, a4, a5, a6, &v84, (CFDictionaryRef *)&buf);
  sub_10004EFE4(&theDict, (CFTypeRef *)&buf.__r_.__value_.__l.__data_);
  sub_10005717C((const void **)&buf.__r_.__value_.__l.__data_);
  sub_100044D00((const void **)&v84);
  if (theDict) {
    CFBooleanRef v17 = sub_100080778;
  }
  else {
    CFBooleanRef v17 = 0;
  }
  if (!v17)
  {
    sub_100433878();
    uint64_t v71 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_92;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v72 = "Failed to side lookup";
    goto LABEL_91;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"SupportDualSimSuppressionOnColdPhysicalSIM");
  CFDictionaryRef v19 = Value;
  if (!Value || (CFTypeID v20 = CFGetTypeID(Value), v20 != CFDictionaryGetTypeID()))
  {
    sub_100433878();
    uint64_t v71 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_92;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v72 = "Failed to get dictionary";
LABEL_91:
    _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, v72, (uint8_t *)&buf, 2u);
    goto LABEL_92;
  }
  if (!CFDictionaryContainsKey(v19, @"SIMsRequireSuppression")
    || !CFDictionaryContainsKey(v19, @"AuthRespCodesRequireSuppression"))
  {
    sub_100433878();
    uint64_t v71 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_92;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v72 = "Key does not exist";
    goto LABEL_91;
  }
  CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v19, @"AuthRespCodesRequireSuppression");
  CFArrayRef v22 = v21;
  if (!v21 || (CFTypeID v23 = CFGetTypeID(v21), v23 != CFArrayGetTypeID()))
  {
    sub_100433878();
    uint64_t v71 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_92;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v72 = "Fail to get auth response codes";
    goto LABEL_91;
  }
  CFTypeRef cf = CFDictionaryGetValue(v19, @"SIMsRequireSuppression");
  if (cf)
  {
    CFTypeID v24 = CFGetTypeID(cf);
    if (v24 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount(v22);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFStringRef ValueAtIndex = (int *)CFArrayGetValueAtIndex(v22, i);
          CFStringRef v29 = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeID v30 = CFGetTypeID(ValueAtIndex);
            if (v30 == CFNumberGetTypeID()) {
              size_t v31 = v29;
            }
            else {
              size_t v31 = 0;
            }
          }
          else
          {
            size_t v31 = 0;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 0;
          ctu::cf::assign((ctu::cf *)&buf, v31, v28);
          int data = (int)buf.__r_.__value_.__l.__data_;
          CFDictionaryRef v33 = v88;
          if (v88 >= v89)
          {
            CFTypeID v35 = (char *)__p;
            uint64_t v36 = (v88 - (unsigned char *)__p) >> 2;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62) {
              sub_10006A748();
            }
            uint64_t v38 = v89 - (unsigned char *)__p;
            if ((v89 - (unsigned char *)__p) >> 1 > v37) {
              unint64_t v37 = v38 >> 1;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              CFDictionaryRef v40 = (char *)sub_10005ECD8((uint64_t)&v89, v39);
              CFTypeID v35 = (char *)__p;
              CFDictionaryRef v33 = v88;
            }
            else
            {
              CFDictionaryRef v40 = 0;
            }
            CFArrayRef v41 = &v40[4 * v36];
            *(_DWORD *)CFArrayRef v41 = data;
            CFDictionaryRef v34 = v41 + 4;
            while (v33 != v35)
            {
              int v42 = *((_DWORD *)v33 - 1);
              v33 -= 4;
              *((_DWORD *)v41 - 1) = v42;
              v41 -= 4;
            }
            std::string __p = v41;
            uint64_t v88 = v34;
            long long v89 = &v40[4 * v39];
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v88 = buf.__r_.__value_.__l.__data_;
            CFDictionaryRef v34 = v33 + 4;
          }
          uint64_t v88 = v34;
        }
      }
      CFIndex v43 = CFArrayGetCount((CFArrayRef)cf);
      if (v43 >= 1)
      {
        for (CFIndex j = 0; j != v43; ++j)
        {
          memset(&v83, 0, sizeof(v83));
          CFArrayGetValueAtIndex((CFArrayRef)cf, j);
          memset(&buf, 0, sizeof(buf));
          ctu::cf::assign();
          std::string v83 = buf;
          getCarrierIdentifier(&v83, (uint64_t)&buf);
          uint64_t v45 = v91;
          if ((unint64_t)v91 >= v92)
          {
            unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v91 - v90) >> 3);
            unint64_t v52 = v51 + 1;
            if (v51 + 1 > 0x222222222222222) {
              sub_10006A748();
            }
            if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v92 - (void)v90) >> 3) > v52) {
              unint64_t v52 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v92 - (void)v90) >> 3);
            }
            if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v92 - (void)v90) >> 3) >= 0x111111111111111) {
              unint64_t v53 = 0x222222222222222;
            }
            else {
              unint64_t v53 = v52;
            }
            if (v53) {
              unint64_t v53 = (unint64_t)sub_100448470(v53);
            }
            else {
              uint64_t v54 = 0;
            }
            uint64_t v55 = v53 + 120 * v51;
            long long v56 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *(void *)(v55 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v55 = v56;
            memset(&buf, 0, sizeof(buf));
            long long v57 = v75;
            *(void *)(v55 + 40) = v76;
            *(_OWORD *)(v55 + 24) = v57;
            uint64_t v76 = 0;
            long long v75 = 0uLL;
            long long v58 = v77;
            *(void *)(v55 + 64) = v78;
            *(_OWORD *)(v55 + 48) = v58;
            uint64_t v78 = 0;
            long long v77 = 0uLL;
            long long v59 = v79;
            *(void *)(v55 + 88) = v80;
            *(_OWORD *)(v55 + 72) = v59;
            long long v79 = 0uLL;
            uint64_t v80 = 0;
            long long v60 = v81;
            *(void *)(v55 + 112) = v82;
            *(_OWORD *)(v55 + 96) = v60;
            long long v81 = 0uLL;
            uint64_t v82 = 0;
            uint64_t v61 = (uint64_t)v90;
            uint64_t v62 = v91;
            if (v91 == v90)
            {
              uint64_t v70 = v55 + 120;
              long long v90 = (char *)v55;
              uint64_t v91 = (char *)(v55 + 120);
              unint64_t v92 = v53 + 120 * v54;
            }
            else
            {
              uint64_t v63 = v53 + 120 * v51;
              do
              {
                long long v64 = *(_OWORD *)(v62 - 120);
                *(void *)(v63 - 104) = *((void *)v62 - 13);
                *(_OWORD *)(v63 - 120) = v64;
                *((void *)v62 - 14) = 0;
                *((void *)v62 - 13) = 0;
                *((void *)v62 - 15) = 0;
                long long v65 = *((_OWORD *)v62 - 6);
                *(void *)(v63 - 80) = *((void *)v62 - 10);
                *(_OWORD *)(v63 - 96) = v65;
                *((void *)v62 - 11) = 0;
                *((void *)v62 - 10) = 0;
                *((void *)v62 - 12) = 0;
                long long v66 = *(_OWORD *)(v62 - 72);
                *(void *)(v63 - 56) = *((void *)v62 - 7);
                *(_OWORD *)(v63 - 72) = v66;
                *((void *)v62 - 8) = 0;
                *((void *)v62 - 7) = 0;
                *((void *)v62 - 9) = 0;
                long long v67 = *((_OWORD *)v62 - 3);
                *(void *)(v63 - 32) = *((void *)v62 - 4);
                *(_OWORD *)(v63 - 48) = v67;
                *((void *)v62 - 6) = 0;
                *((void *)v62 - 5) = 0;
                *((void *)v62 - 4) = 0;
                long long v68 = *(_OWORD *)(v62 - 24);
                *(void *)(v63 - 8) = *((void *)v62 - 1);
                *(_OWORD *)(v63 - 24) = v68;
                v63 -= 120;
                *((void *)v62 - 3) = 0;
                *((void *)v62 - 2) = 0;
                *((void *)v62 - 1) = 0;
                v62 -= 120;
              }
              while (v62 != (char *)v61);
              uint64_t v62 = v90;
              uint64_t v69 = (uint64_t)v91;
              uint64_t v70 = v55 + 120;
              long long v90 = (char *)v63;
              uint64_t v91 = (char *)(v55 + 120);
              unint64_t v92 = v53 + 120 * v54;
              while ((char *)v69 != v62)
              {
                v69 -= 120;
                sub_1003991D0(v69);
              }
            }
            if (v62) {
              operator delete(v62);
            }
            uint64_t v91 = (char *)v70;
            if (SHIBYTE(v82) < 0) {
              operator delete((void *)v81);
            }
          }
          else
          {
            long long v46 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *((void *)v91 + 2) = *((void *)&buf.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v45 = v46;
            memset(&buf, 0, sizeof(buf));
            uint64_t v47 = v76;
            *(_OWORD *)(v45 + 24) = v75;
            *((void *)v45 + 5) = v47;
            uint64_t v76 = 0;
            long long v75 = 0uLL;
            long long v48 = v77;
            *((void *)v45 + 8) = v78;
            *((_OWORD *)v45 + 3) = v48;
            uint64_t v78 = 0;
            long long v77 = 0uLL;
            long long v49 = v79;
            *((void *)v45 + 11) = v80;
            *(_OWORD *)(v45 + 72) = v49;
            long long v79 = 0uLL;
            uint64_t v80 = 0;
            long long v50 = v81;
            *((void *)v45 + 14) = v82;
            *((_OWORD *)v45 + 6) = v50;
            long long v81 = 0uLL;
            uint64_t v82 = 0;
            uint64_t v91 = v45 + 120;
          }
          if (SHIBYTE(v80) < 0) {
            operator delete((void *)v79);
          }
          if (SHIBYTE(v78) < 0) {
            operator delete((void *)v77);
          }
          if (SHIBYTE(v76) < 0) {
            operator delete((void *)v75);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
        }
      }
      sub_1004484B8((char **)a7, (uint64_t *)&v90, (uint64_t)&__p);
      goto LABEL_93;
    }
  }
LABEL_92:
  *(_OWORD *)a7 = v93;
  *(void *)(a7 + 16) = *(void *)&v94[0];
  long long v93 = 0uLL;
  *(_OWORD *)(a7 + 24) = *(_OWORD *)((char *)v94 + 8);
  *(void *)(a7 + 40) = *((void *)&v94[1] + 1);
  memset(v94, 0, sizeof(v94));
LABEL_93:
  sub_100057D78((const void **)&theDict);
  sub_100044D00((const void **)&v86);
  if (__p)
  {
    uint64_t v88 = (char *)__p;
    operator delete(__p);
  }
LABEL_95:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
  sub_1004485E0((void ***)&buf);
  if (*((void *)&v94[0] + 1))
  {
    *(void *)&v94[1] = *((void *)&v94[0] + 1);
    operator delete(*((void **)&v94[0] + 1));
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
  sub_1004485E0((void ***)&buf);
}

void sub_10044395C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,const void *a38,const void *a39,void *__p,uint64_t a41)
{
  sub_100057D78(&a38);
  sub_100044D00(&a39);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  std::string __p = (void *)(v41 - 184);
  sub_1004485E0((void ***)&__p);
  sub_100443A44(v41 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_100443A44(uint64_t a1)
{
  CFStringRef v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  id v4 = (void **)a1;
  sub_1004485E0(&v4);
  return a1;
}

BOOL sub_100443A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    if (v8)
    {
      values = @"CellularPlanProvisioningSettings";
      CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFDictionaryRef theDict = 0;
      CFArrayRef v29 = v14;
      CFArrayRef v26 = v14;
      if (v14) {
        CFRetain(v14);
      }
      sub_100433ECC(a1, a2, a3, a4, a5, a6, &v26, (CFDictionaryRef *)buf);
      sub_10004EFE4(&theDict, buf);
      sub_10005717C(buf);
      sub_100044D00((const void **)&v26);
      if (theDict) {
        BOOL v15 = sub_100080778;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularPlanProvisioningSettings");
        CFDictionaryRef v17 = Value;
        if (Value && (CFTypeID v18 = CFGetTypeID(Value), v18 == CFDictionaryGetTypeID()))
        {
          if (CFDictionaryContainsKey(v17, @"EnableAttachMonitorMode"))
          {
            CFDictionaryRef v19 = CFDictionaryGetValue(v17, @"EnableAttachMonitorMode");
            BOOL v20 = (BOOL)v19;
            LOBYTE(buf[0]) = 0;
            if (v19)
            {
              CFTypeID v21 = CFGetTypeID(v19);
              if (v21 == CFBooleanGetTypeID())
              {
                ctu::cf::assign((ctu::cf *)buf, (BOOL *)v20, v22);
                BOOL v20 = LOBYTE(buf[0]) != 0;
              }
              else
              {
                BOOL v20 = 0;
              }
            }
            goto LABEL_24;
          }
          sub_100433878();
          CFTypeID v23 = qword_101B0CE20;
          if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf[0]) = 0;
            CFTypeID v24 = "Enable attach monitor mode key does not exist";
            goto LABEL_30;
          }
        }
        else
        {
          sub_100433878();
          CFTypeID v23 = qword_101B0CE20;
          if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf[0]) = 0;
            CFTypeID v24 = "Failed to get dictionary";
LABEL_30:
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)buf, 2u);
          }
        }
      }
      else
      {
        sub_100433878();
        CFTypeID v23 = qword_101B0CE20;
        if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          CFTypeID v24 = "Failed to side lookup";
          goto LABEL_30;
        }
      }
      BOOL v20 = 1;
LABEL_24:
      sub_100057D78((const void **)&theDict);
      sub_100044D00((const void **)&v29);
      return v20;
    }
  }
  return 0;
}

void sub_100443D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  _Unwind_Resume(a1);
}

BOOL sub_100443D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    if (v8)
    {
      values = @"CellularPlanProvisioningSettings";
      CFArrayRef v14 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFDictionaryRef theDict = 0;
      CFArrayRef v29 = v14;
      CFArrayRef v26 = v14;
      if (v14) {
        CFRetain(v14);
      }
      sub_100433ECC(a1, a2, a3, a4, a5, a6, &v26, (CFDictionaryRef *)buf);
      sub_10004EFE4(&theDict, buf);
      sub_10005717C(buf);
      sub_100044D00((const void **)&v26);
      if (theDict) {
        BOOL v15 = sub_100080778;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularPlanProvisioningSettings");
        CFDictionaryRef v17 = Value;
        if (Value && (CFTypeID v18 = CFGetTypeID(Value), v18 == CFDictionaryGetTypeID()))
        {
          if (CFDictionaryContainsKey(v17, @"RequireEntitlementCheckForAttachMonitorMode"))
          {
            CFDictionaryRef v19 = CFDictionaryGetValue(v17, @"RequireEntitlementCheckForAttachMonitorMode");
            BOOL v20 = (BOOL)v19;
            LOBYTE(buf[0]) = 0;
            if (!v19)
            {
LABEL_24:
              sub_100057D78((const void **)&theDict);
              sub_100044D00((const void **)&v29);
              return v20;
            }
            CFTypeID v21 = CFGetTypeID(v19);
            if (v21 == CFBooleanGetTypeID())
            {
              ctu::cf::assign((ctu::cf *)buf, (BOOL *)v20, v22);
              BOOL v20 = LOBYTE(buf[0]) != 0;
              goto LABEL_24;
            }
LABEL_23:
            BOOL v20 = 0;
            goto LABEL_24;
          }
          sub_100433878();
          CFTypeID v23 = qword_101B0CE20;
          if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          LOWORD(buf[0]) = 0;
          CFTypeID v24 = "Require entitlement check for attach monitor mode key does not exist";
        }
        else
        {
          sub_100433878();
          CFTypeID v23 = qword_101B0CE20;
          if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          LOWORD(buf[0]) = 0;
          CFTypeID v24 = "Failed to get dictionary";
        }
      }
      else
      {
        sub_100433878();
        CFTypeID v23 = qword_101B0CE20;
        if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        LOWORD(buf[0]) = 0;
        CFTypeID v24 = "Failed to side lookup";
      }
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)buf, 2u);
      goto LABEL_23;
    }
  }
  return 0;
}

void sub_10044403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10044409C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 119);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 104);
  }
  if (v2)
  {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 143);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a2 + 128);
    }
    if (v4)
    {
      values = @"CellularPlanProvisioningSettings";
      CFArrayRef v6 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFDictionaryRef theDict = 0;
      CFArrayRef v22 = v6;
      CFArrayRef v19 = v6;
      if (v6) {
        CFRetain(v6);
      }
      sub_100433ECC(a1, a2 + 96, a2 + 120, a2 + 144, a2 + 168, a2 + 16, &v19, (CFDictionaryRef *)buf);
      sub_10004EFE4(&theDict, buf);
      sub_10005717C(buf);
      sub_100044D00((const void **)&v19);
      if (theDict) {
        uint64_t v7 = sub_100080778;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularPlanProvisioningSettings");
        CFDictionaryRef v9 = Value;
        if (Value && (CFTypeID v10 = CFGetTypeID(Value), v10 == CFDictionaryGetTypeID()))
        {
          if (CFDictionaryContainsKey(v9, @"SkipEligibilityCheck"))
          {
            uint64_t v11 = (BOOL *)CFDictionaryGetValue(v9, @"SkipEligibilityCheck");
            char v12 = v11;
            LOBYTE(buf[0]) = 0;
            if (v11)
            {
              CFTypeID v13 = CFGetTypeID(v11);
              if (v13 == CFBooleanGetTypeID())
              {
                ctu::cf::assign((ctu::cf *)buf, v12, v14);
                LODWORD(v12) = LOBYTE(buf[0]);
              }
              else
              {
                LODWORD(v12) = 0;
              }
            }
            int v15 = 1;
            goto LABEL_24;
          }
          sub_100433878();
          CFArrayRef v16 = qword_101B0CE20;
          if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf[0]) = 0;
            CFDictionaryRef v17 = "skip eligibility check key does not exist";
            goto LABEL_31;
          }
        }
        else
        {
          sub_100433878();
          CFArrayRef v16 = qword_101B0CE20;
          if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf[0]) = 0;
            CFDictionaryRef v17 = "Failed to get dictionary";
LABEL_31:
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)buf, 2u);
          }
        }
      }
      else
      {
        sub_100433878();
        CFArrayRef v16 = qword_101B0CE20;
        if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          CFDictionaryRef v17 = "Failed to side lookup";
          goto LABEL_31;
        }
      }
      int v15 = 0;
      LODWORD(v12) = 0;
LABEL_24:
      sub_100057D78((const void **)&theDict);
      sub_100044D00((const void **)&v22);
      return v12 | (v15 << 8);
    }
  }
  int v15 = 0;
  LODWORD(v12) = 0;
  return v12 | (v15 << 8);
}

void sub_100444330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  CFArrayRef v6 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_100444394(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v7 = operator new(0x40uLL);
  v7[1] = 0;
  _DWORD v7[2] = 0;
  void *v7 = off_1019CC9F8;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    void v7[3] = off_101A0C038;
    void v7[4] = v9;
    void v7[5] = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    void v7[3] = off_101A0C038;
    void v7[4] = v9;
    void v7[5] = 0;
  }
  void v7[6] = v6;
  v7[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
  *a3 = v7 + 3;
  a3[1] = v7;
}

void sub_100444498(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, std::__shared_weak_count **a5@<X8>)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v6 || (v11 = *(void *)(a1 + 56), (char v12 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_100088B9C();
  }
  CFTypeID v13 = v12;
  CFBooleanRef v14 = *a2;
  int v15 = (std::__shared_weak_count *)operator new(0x4C8uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCA48;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  CFArrayRef v16 = v15 + 1;
  v24[0] = v11;
  v24[1] = v13;
  uint64_t v17 = *a3;
  CFTypeID v18 = (std::__shared_weak_count *)a3[1];
  v23[0] = v17;
  v23[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *a4;
  BOOL v20 = (std::__shared_weak_count *)a4[1];
  v22[0] = v19;
  v22[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CellularPlanListModelLocal::CellularPlanListModelLocal((uint64_t)&v15[1], &object, v24, v23, v22);
  if (v20) {
    sub_10004D2C8(v20);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  sub_10004D2C8(v13);
  if (object) {
    dispatch_release(object);
  }
  shared_weak_owners = (std::__shared_weak_count *)v15[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = (uint64_t)v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    goto LABEL_19;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = (uint64_t)v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_19:
    sub_10004D2C8(v15);
  }
  *a5 = v16;
  a5[1] = v15;
}

void sub_100444618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_object_t object)
{
  if (v19) {
    sub_10004D2C8(v19);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  sub_10004D2C8(v17);
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_10044466C(uint64_t a1@<X0>, NSObject **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(a1 + 72);
  unint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x58uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCA98;
  uint64_t v7 = &v6[1].__vftable;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_10008D4F4(v7, &object, v4);
  if (object) {
    dispatch_release(object);
  }
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v7;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    goto LABEL_9;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v7;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_9:
    sub_10004D2C8(v6);
  }
  *a3 = v7;
  a3[1] = v6;
}

void sub_100444760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_100444784@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = (void *)(a1 + 72);
  uint64_t v4 = operator new(0xA8uLL);
  v4[1] = 0;
  _DWORD v4[2] = 0;
  *uint64_t v4 = off_1019CCAE8;
  uint64_t result = sub_1013F6C7C((uint64_t)(v4 + 3), v3);
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void sub_1004447E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_100444800@<X0>(void *a1@<X8>)
{
  unsigned int v7 = -1;
  uint64_t v2 = sub_100365D74();
  sub_100058DB0(__p, "TestEnvIndexKey");
  sub_1004421D8(v2, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v7 >= 7) {
    char v3 = "https://sq-device.apple.com/customer/";
  }
  else {
    char v3 = (&off_1019CCBF8)[v7];
  }
  return sub_100058DB0(a1, v3);
}

void sub_100444894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1004448B0@<X0>(void *a1@<X8>)
{
  CFTypeRef v3 = CFPreferencesCopyValue(@"BootstrapProvisioningState", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  return sub_100084068(a1, &v3);
}

uint64_t sub_100444918(uint64_t a1, CFPropertyListRef *a2)
{
  CFStringRef v2 = (const __CFString *)kCommCenterPreferencesNoBackupAppID;
  CFPreferencesSetValue(@"BootstrapProvisioningState", *a2, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);

  return CFPreferencesSynchronize(v2, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
}

uint64_t sub_100444998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t, uint64_t, void, const CFStringRef, const CFStringRef))(**(void **)(a1 + 88)
                                                                                                 + 16))(*(void *)(a1 + 88), a2, a3, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 88) + 48);

  return v4();
}

void sub_100444A58(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  long long v64 = &off_101A73D60;
  signed int v12 = sub_100046FE8((void *)(a3 + 24), (void **)(a3 + 72)) << 24;
  BOOL v13 = v12 < 0x1000000;
  BOOL v14 = v12 > 0xFFFFFF;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  CFArrayRef v16 = ServiceMap;
  if (v17 < 0)
  {
    CFTypeID v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = 5381;
    do
    {
      uint64_t v17 = v19;
      unsigned int v20 = *v18++;
      uint64_t v19 = (33 * v19) ^ v20;
    }
    while (v20);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long buf = v17;
  CFTypeID v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)&buf);
  uint64_t v49 = a5;
  if (v21)
  {
    uint64_t v22 = v21[3];
    CFTypeID v23 = (std::__shared_weak_count *)v21[4];
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v16);
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v23);
      char v24 = 0;
      if (!v22) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  std::mutex::unlock(v16);
  CFTypeID v23 = 0;
  char v24 = 1;
  if (!v22)
  {
LABEL_7:
    sub_100433878();
    CFArrayRef v25 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Missing localization interface", (uint8_t *)&buf, 2u);
    }
    *a6 = 0;
    a6[1] = 0;
    if (v24) {
      goto LABEL_99;
    }
LABEL_98:
    sub_10004D2C8(v23);
    goto LABEL_99;
  }
LABEL_13:
  uint64_t v63 = 0;
  uint64_t v26 = kCBMessageLocalizationTable;
  long long v48 = v23;
  (*(void (**)(const void **__return_ptr, uint64_t, void, const __CFString *, void))(*(void *)v22 + 40))(&v63, v22, kCBMessageLocalizationTable, @"PLAN_IS_ENABLED", 0);
  uint64_t v62 = 0;
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, const __CFString *, void))(*(void *)v22 + 40))(&v62, v22, v26, @"CANCEL", 0);
  CFStringRef StringWithValidatedFormat = 0;
  (*(void (**)(CFStringRef *__return_ptr, uint64_t, uint64_t, const __CFString *, void))(*(void *)v22 + 40))(&v60, v22, v26, @"TURN_OFF_%@", 0);
  CFStringRef v27 = v60;
  CFNumberRef v28 = (long long *)(a3 + 48 * v14);
  CFArrayRef v29 = (void **)v28 + 3;
  if (*((char *)v28 + 47) < 0)
  {
    sub_10004FC84(__dst, *v29, *((void *)v28 + 4));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)v29;
    uint64_t v58 = *((void *)v28 + 5);
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_10004FC84(&__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    long long __p = *(_OWORD *)__dst;
    uint64_t v67 = v58;
  }
  CFStringRef v65 = 0;
  if (SHIBYTE(v67) < 0)
  {
    sub_10004FC84(&buf, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    long long buf = __p;
    uint64_t v79 = v67;
  }
  CFStringRef v68 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v30 = v65;
    CFStringRef v65 = v68;
    CFStringRef v69 = v30;
    sub_1000558F4((const void **)&v69);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)buf);
  }
  CFStringRef v59 = v65;
  CFStringRef v65 = 0;
  sub_1000558F4((const void **)&v65);
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)__p);
  }
  CFStringRef StringWithValidatedFormat = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", v27, 0, v59);
  sub_1000558F4((const void **)&v59);
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst[0]);
  }
  sub_1000558F4((const void **)&v60);
  CFStringRef v60 = 0;
  (*(void (**)(const __CFString **__return_ptr, uint64_t, uint64_t, const __CFString *, void))(*(void *)v22 + 40))(&v59, v22, v26, @"TURN_OFF_%@", 0);
  CFStringRef v31 = v59;
  CFBooleanRef v32 = (long long *)(a3 + 48 * v13);
  CFDictionaryRef v33 = (void **)v32 + 3;
  if (*((char *)v32 + 47) < 0)
  {
    sub_10004FC84(v54, *v33, *((void *)v32 + 4));
  }
  else
  {
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v33;
    uint64_t v55 = *((void *)v32 + 5);
  }
  if (SHIBYTE(v55) < 0)
  {
    sub_10004FC84(&__p, v54[0], (unint64_t)v54[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v54;
    uint64_t v67 = v55;
  }
  CFStringRef v65 = 0;
  if (SHIBYTE(v67) < 0)
  {
    sub_10004FC84(&buf, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    long long buf = __p;
    uint64_t v79 = v67;
  }
  CFStringRef v68 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v34 = v65;
    CFStringRef v65 = v68;
    CFStringRef v69 = v34;
    sub_1000558F4((const void **)&v69);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)buf);
  }
  CFStringRef v56 = v65;
  CFStringRef v65 = 0;
  sub_1000558F4((const void **)&v65);
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)__p);
  }
  CFStringRef v60 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", v31, 0, v56);
  sub_1000558F4((const void **)&v56);
  CFTypeID v23 = v48;
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
  sub_1000558F4((const void **)&v59);
  CFStringRef v59 = 0;
  uint64_t v35 = *((unsigned __int8 *)a4 + 47);
  if ((v35 & 0x80u) != 0) {
    uint64_t v35 = *((void *)a4 + 4);
  }
  if (v35)
  {
    (*(void (**)(const __CFString **__return_ptr, uint64_t, uint64_t, const __CFString *, void))(*(void *)v22 + 40))(&v56, v22, v26, @"CARRIER_IS_ENABLE_DETAIL_%@", 0);
    CFStringRef v36 = v56;
    if (*((char *)a4 + 47) < 0)
    {
      sub_10004FC84(v51, *((void **)a4 + 3), *((void *)a4 + 4));
    }
    else
    {
      *(_OWORD *)unint64_t v51 = *(long long *)((char *)a4 + 24);
      uint64_t v52 = *((void *)a4 + 5);
    }
    if (SHIBYTE(v52) < 0)
    {
      sub_10004FC84(&__p, v51[0], (unint64_t)v51[1]);
    }
    else
    {
      long long __p = *(_OWORD *)v51;
      uint64_t v67 = v52;
    }
    CFStringRef v65 = 0;
    if (SHIBYTE(v67) < 0)
    {
      sub_10004FC84(&buf, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long buf = __p;
      uint64_t v79 = v67;
    }
    CFStringRef v68 = 0;
    if (ctu::cf::convert_copy())
    {
      CFStringRef v38 = v65;
      CFStringRef v65 = v68;
      CFStringRef v69 = v38;
      sub_1000558F4((const void **)&v69);
    }
    if (SHIBYTE(v79) < 0) {
      operator delete((void *)buf);
    }
    CFStringRef v53 = v65;
    CFStringRef v65 = 0;
    sub_1000558F4((const void **)&v65);
    if (SHIBYTE(v67) < 0) {
      operator delete((void *)__p);
    }
    CFStringRef v39 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", v36, 0, v53);
    CFStringRef v40 = v59;
    CFStringRef v59 = v39;
    *(void *)&long long buf = v40;
    sub_1000558F4((const void **)&buf);
    sub_1000558F4((const void **)&v53);
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    p_p = (const void **)&v56;
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const __CFString *, void))(*(void *)v22 + 40))(&__p, v22, v26, @"CARRIER_IS_ENABLE_DETAIL_DEFAULT", 0);
    *(void *)&long long buf = v59;
    CFStringRef v59 = (const __CFString *)__p;
    *(void *)&long long __p = 0;
    sub_1000558F4((const void **)&buf);
    p_p = (const void **)&__p;
  }
  sub_1000558F4(p_p);
  uint64_t v41 = *a2;
  dispatch_object_t object = v41;
  if (v41) {
    dispatch_retain(v41);
  }
  if (*((char *)v28 + 23) < 0)
  {
    sub_10004FC84(&v70, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v70 = *v28;
    uint64_t v71 = *((void *)v28 + 2);
  }
  if (*((char *)v32 + 23) < 0)
  {
    sub_10004FC84(&v72, *(void **)v32, *((void *)v32 + 1));
  }
  else
  {
    long long v72 = *v32;
    uint64_t v73 = *((void *)v32 + 2);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v74, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v74 = *a4;
    uint64_t v75 = *((void *)a4 + 2);
  }
  sub_100449ABC((uint64_t)v76, v49);
  uint64_t v80 = 0;
  int v42 = (char *)operator new(0x70uLL);
  CFIndex v43 = v42;
  *(void *)int v42 = off_1019CCB38;
  *(_OWORD *)(v42 + 8) = v70;
  int v44 = v77;
  *((void *)v42 + 3) = v71;
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  *((_OWORD *)v42 + 2) = v72;
  *((void *)v42 + 6) = v73;
  long long v72 = 0uLL;
  uint64_t v73 = 0;
  *(_OWORD *)(v42 + 56) = v74;
  *((void *)v42 + 9) = v75;
  long long v74 = 0uLL;
  uint64_t v75 = 0;
  if (!v44)
  {
    uint64_t v45 = v42 + 104;
    goto LABEL_84;
  }
  if (v44 != v76)
  {
    uint64_t v45 = &v77;
    *((void *)v42 + 13) = v44;
LABEL_84:
    *uint64_t v45 = 0;
    goto LABEL_86;
  }
  *((void *)v42 + 13) = v42 + 80;
  (*(void (**)(void *))(v76[0] + 24))(v76);
LABEL_86:
  uint64_t v80 = v43;
  sub_100F62A64(&v63, (const void **)&v59, (const void **)&StringWithValidatedFormat, (const void **)&v60, &v62, &object, (uint64_t)&buf, &__p);
  long long v46 = __p;
  sub_1000DA3EC(&buf);
  sub_1000D83A0(v76);
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
  if (object) {
    dispatch_release(object);
  }
  if (!(void)v46)
  {
    sub_100433878();
    uint64_t v47 = qword_101B0CE20;
    if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "failed to create UserAlert", (uint8_t *)&buf, 2u);
    }
  }
  *(_OWORD *)a6 = v46;
  sub_1000558F4((const void **)&v59);
  sub_1000558F4((const void **)&v60);
  sub_1000558F4((const void **)&StringWithValidatedFormat);
  sub_1000558F4(&v62);
  sub_1000558F4(&v63);
  if ((v24 & 1) == 0) {
    goto LABEL_98;
  }
LABEL_99:
  UserAlertGenerationInterface::~UserAlertGenerationInterface((UserAlertGenerationInterface *)&v64);
}

void sub_100445454(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004456F4(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100445750(uint64_t a1@<X0>, NSObject **a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v4 || (v7 = *(void *)(a1 + 56), (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v11 = v7;
  signed int v12 = v8;
  uint64_t v9 = *a2;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_10050CFD8(&v11, (id *)&object, &v13);
  *a3 = v13;
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
}

void sub_1004457E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044580C(uint64_t a1, dispatch_object_t *a2, uint64_t a3, uint64_t a4)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v5 = *(void *)(a4 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1013532AC(&v6);
}

void sub_1004458C0(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004458E4(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = *a2;
  BOOL v14 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a5;
    uint64_t v11 = *(void *)(a5 + 16);
  }
  sub_101213024();
}

void sub_1004459BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15)
  {
    sub_10004D2C8(v15);
    if (!v14) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_4;
  }
  dispatch_release(v14);
  goto LABEL_4;
}

void sub_100445A08(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeID v10 = *a2;
  CFTypeID v18 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  uint64_t v16 = v11;
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a5;
    uint64_t v15 = *(void *)(a5 + 16);
  }
  uint64_t v13 = *(void *)(a7 + 8);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100159E00();
}

void sub_100445B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v17)
  {
    sub_10004D2C8(v17);
    if (!v16) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_4;
  }
  dispatch_release(v16);
  goto LABEL_4;
}

void sub_100445B74(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = *a2;
  BOOL v14 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a5;
    uint64_t v11 = *(void *)(a5 + 16);
  }
  sub_100EC4558();
}

void sub_100445C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15)
  {
    sub_10004D2C8(v15);
    if (!v14) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_4;
  }
  dispatch_release(v14);
  goto LABEL_4;
}

const void **sub_100445C98@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, const void ***a8@<X8>)
{
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  switch(a2)
  {
    case 2:
      uint64_t result = (const void **)operator new(0x38uLL);
      result[6] = (const void *)3600;
      uint64_t v17 = (long long *)"x";
      break;
    case 4:
      uint64_t result = (const void **)operator new(8uLL);
      *uint64_t result = (const void *)30;
      CFTypeID v18 = result + 1;
      goto LABEL_9;
    case 1:
      uint64_t result = (const void **)operator new(0x30uLL);
      *(_OWORD *)uint64_t result = xmmword_1014A4918;
      *((_OWORD *)result + 1) = unk_1014A4928;
      *((_OWORD *)result + 2) = xmmword_1014A4938;
      CFTypeID v18 = result + 6;
      goto LABEL_9;
    default:
      uint64_t result = (const void **)operator new(0x38uLL);
      result[6] = (const void *)1200;
      uint64_t v17 = &xmmword_1014A4948;
      break;
  }
  long long v19 = v17[1];
  *(_OWORD *)uint64_t result = *v17;
  *((_OWORD *)result + 1) = v19;
  *((_OWORD *)result + 2) = v17[2];
  CFTypeID v18 = result + 7;
LABEL_9:
  a8[2] = v18;
  *a8 = result;
  a8[1] = v18;
  uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a3 + 8);
  }
  if (v20)
  {
    uint64_t v21 = *(unsigned __int8 *)(a4 + 23);
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a4 + 8);
    }
    if (v21)
    {
      values = @"CellularPlanProvisioningSettings";
      CFArrayRef v22 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFDictionaryRef theDict = 0;
      CFArrayRef v55 = v22;
      CFArrayRef v53 = v22;
      if (v22) {
        CFRetain(v22);
      }
      sub_100433ECC(a1, a3, a4, a5, a6, a7, &v53, (CFDictionaryRef *)buf);
      sub_10004EFE4(&theDict, (CFTypeRef *)buf);
      sub_10005717C((const void **)buf);
      sub_100044D00((const void **)&v53);
      if (theDict) {
        CFTypeID v23 = sub_100080778;
      }
      else {
        CFTypeID v23 = 0;
      }
      if (!v23)
      {
        sub_100433878();
        CFArrayRef v29 = qword_101B0CE20;
        if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          CFStringRef v30 = "Failed to side lookup";
          goto LABEL_70;
        }
        goto LABEL_30;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularPlanProvisioningSettings");
      CFDictionaryRef v25 = Value;
      if (!Value || (CFTypeID v26 = CFGetTypeID(Value), v26 != CFDictionaryGetTypeID()))
      {
        sub_100433878();
        CFArrayRef v29 = qword_101B0CE20;
        if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          CFStringRef v30 = "Failed to get dictionary";
LABEL_70:
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, v30, buf, 2u);
        }
LABEL_30:
        sub_100057D78((const void **)&theDict);
        return sub_100044D00((const void **)&v55);
      }
      if (a2 == 2)
      {
        if (!CFDictionaryContainsKey(v25, @"DelayMonitorModeBackoffTimes"))
        {
          sub_100433878();
          CFArrayRef v29 = qword_101B0CE20;
          if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            CFStringRef v30 = "Delay backoff times key does not exist";
            goto LABEL_70;
          }
          goto LABEL_30;
        }
        CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue(v25, @"DelayMonitorModeBackoffTimes");
        CFArrayRef v28 = v27;
        if (!v27) {
          goto LABEL_65;
        }
        goto LABEL_38;
      }
      if (a2 == 4)
      {
        if (!CFDictionaryContainsKey(v25, @"RetryTransferMonitorModeBackoffTimes"))
        {
          sub_100433878();
          CFArrayRef v29 = qword_101B0CE20;
          if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_30;
          }
          *(_WORD *)long long buf = 0;
          CFStringRef v30 = "Retry transfer backoff times key does not exist";
          goto LABEL_70;
        }
        CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue(v25, @"RetryTransferMonitorModeBackoffTimes");
        CFArrayRef v28 = v27;
        if (v27)
        {
LABEL_38:
          CFTypeID v31 = CFGetTypeID(v27);
          if (v31 == CFArrayGetTypeID())
          {
            a8[1] = *a8;
            CFIndex Count = CFArrayGetCount(v28);
            if (Count >= 1)
            {
              for (CFIndex i = 0; i != Count; ++i)
              {
                CFStringRef ValueAtIndex = (int *)CFArrayGetValueAtIndex(v28, i);
                CFStringRef v36 = ValueAtIndex;
                if (ValueAtIndex)
                {
                  CFTypeID v37 = CFGetTypeID(ValueAtIndex);
                  if (v37 == CFNumberGetTypeID()) {
                    CFStringRef v38 = v36;
                  }
                  else {
                    CFStringRef v38 = 0;
                  }
                }
                else
                {
                  CFStringRef v38 = 0;
                }
                *(_DWORD *)long long buf = 0;
                ctu::cf::assign((ctu::cf *)buf, v38, v35);
                uint64_t v39 = *(int *)buf;
                uint64_t v41 = a8[1];
                unint64_t v40 = (unint64_t)a8[2];
                if ((unint64_t)v41 >= v40)
                {
                  CFIndex v43 = *a8;
                  uint64_t v44 = (const void **)v41 - *a8;
                  unint64_t v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 61) {
                    sub_10006A748();
                  }
                  uint64_t v46 = v40 - (void)v43;
                  if (v46 >> 2 > v45) {
                    unint64_t v45 = v46 >> 2;
                  }
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v47 = v45;
                  }
                  if (v47)
                  {
                    long long v48 = (char *)sub_10004EF74((uint64_t)(a8 + 2), v47);
                    CFIndex v43 = *a8;
                    uint64_t v41 = a8[1];
                  }
                  else
                  {
                    long long v48 = 0;
                  }
                  uint64_t v49 = &v48[8 * v44];
                  *(void *)uint64_t v49 = v39;
                  int v42 = (const void **)(v49 + 8);
                  while (v41 != v43)
                  {
                    uint64_t v50 = *--v41;
                    *((void *)v49 - 1) = v50;
                    v49 -= 8;
                  }
                  *a8 = (const void **)v49;
                  a8[1] = v42;
                  a8[2] = (const void **)&v48[8 * v47];
                  if (v43) {
                    operator delete(v43);
                  }
                }
                else
                {
                  *uint64_t v41 = *(int *)buf;
                  int v42 = (const void **)(v41 + 1);
                }
                a8[1] = v42;
              }
            }
            sub_100433878();
            unint64_t v51 = qword_101B0CE20;
            if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v52 = a8[1] - *a8;
              *(_DWORD *)long long buf = 134217984;
              uint64_t v57 = v52;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#I MonitorModeBackoffTimes [%lu]", buf, 0xCu);
            }
            goto LABEL_30;
          }
        }
      }
      else
      {
        if (!CFDictionaryContainsKey(v25, @"AttachMonitorModeBackoffTimes"))
        {
          sub_100433878();
          CFArrayRef v29 = qword_101B0CE20;
          if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_30;
          }
          *(_WORD *)long long buf = 0;
          CFStringRef v30 = "Attach backoff times key does not exist";
          goto LABEL_70;
        }
        CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue(v25, @"AttachMonitorModeBackoffTimes");
        CFArrayRef v28 = v27;
        if (v27) {
          goto LABEL_38;
        }
      }
LABEL_65:
      sub_100433878();
      CFArrayRef v29 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        CFStringRef v30 = "Fail to get backoff times";
        goto LABEL_70;
      }
      goto LABEL_30;
    }
  }
  return result;
}

void sub_100446288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  long long v6 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  uint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10044631C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFDictionaryRef theDict = 0;
  sub_10043C3DC(a1, a2, a3, a4, a5, a6, &theDict);
  if (theDict) {
    uint64_t v7 = sub_100080778;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!v7)
  {
    sub_100433878();
    BOOL v14 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "Failed loading PhoneAccountTransfer CB";
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
    goto LABEL_26;
  }
  if (!CFDictionaryContainsKey(theDict, @"PhoneAccountTransfer"))
  {
    sub_100433878();
    BOOL v14 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "Missing PhoneAccountTransfer in CB";
    goto LABEL_14;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PhoneAccountTransfer");
  if (!CFDictionaryContainsKey(Value, @"SupportsTransferRecoveryOnSMDP"))
  {
    sub_100433878();
    long long v19 = qword_101B0CE20;
    BOOL v16 = 0;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v20 = a6;
    }
    else {
      uint64_t v20 = *(void *)a6;
    }
    *(_DWORD *)long long buf = 136315138;
    v24[0] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I SupportsTransferRecoveryOnSMDP not present in CB entitlements for ICCID: [%s]", buf, 0xCu);
LABEL_26:
    BOOL v16 = 0;
    goto LABEL_27;
  }
  uint64_t v9 = (BOOL *)CFDictionaryGetValue(Value, @"SupportsTransferRecoveryOnSMDP");
  CFTypeID v10 = v9;
  buf[0] = 0;
  if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)buf, v10, v12);
    int v13 = buf[0];
  }
  else
  {
    int v13 = 0;
  }
  BOOL v16 = v13 != 0;
  sub_100433878();
  uint64_t v17 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v18 = a6;
    }
    else {
      uint64_t v18 = *(void *)a6;
    }
    *(_DWORD *)long long buf = 67109378;
    LODWORD(v24[0]) = v13;
    WORD2(v24[0]) = 2080;
    *(void *)((char *)v24 + 6) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I SupportsTransferRecoveryOnSMDP is set to %d for ICCID: [%s]", buf, 0x12u);
  }
LABEL_27:
  sub_100057D78((const void **)&theDict);
  return v16;
}

void sub_10044658C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_1004465C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFDictionaryRef theDict = 0;
  sub_10043C3DC(a1, a2, a3, a4, a5, a6, &theDict);
  if (theDict) {
    uint64_t v7 = sub_100080778;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!v7)
  {
    sub_100433878();
    BOOL v14 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "Failed loading PhoneAccountTransfer CB";
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
    goto LABEL_26;
  }
  if (!CFDictionaryContainsKey(theDict, @"PhoneAccountTransfer"))
  {
    sub_100433878();
    BOOL v14 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "Missing PhoneAccountTransfer in CB";
    goto LABEL_14;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PhoneAccountTransfer");
  if (!CFDictionaryContainsKey(Value, @"RequiresDeleteBeforeTransfer"))
  {
    sub_100433878();
    long long v19 = qword_101B0CE20;
    BOOL v16 = 0;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v20 = a6;
    }
    else {
      uint64_t v20 = *(void *)a6;
    }
    *(_DWORD *)long long buf = 136315138;
    v24[0] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I RequiresDeleteBeforeTransfer not present in CB entitlements for ICCID: [%s]", buf, 0xCu);
LABEL_26:
    BOOL v16 = 0;
    goto LABEL_27;
  }
  uint64_t v9 = (BOOL *)CFDictionaryGetValue(Value, @"RequiresDeleteBeforeTransfer");
  CFTypeID v10 = v9;
  buf[0] = 0;
  if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)buf, v10, v12);
    int v13 = buf[0];
  }
  else
  {
    int v13 = 0;
  }
  BOOL v16 = v13 != 0;
  sub_100433878();
  uint64_t v17 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v18 = a6;
    }
    else {
      uint64_t v18 = *(void *)a6;
    }
    *(_DWORD *)long long buf = 67109378;
    LODWORD(v24[0]) = v13;
    WORD2(v24[0]) = 2080;
    *(void *)((char *)v24 + 6) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I kRequiresDeleteBeforeTransfer is set to %d for ICCID: [%s]", buf, 0x12u);
  }
LABEL_27:
  sub_100057D78((const void **)&theDict);
  return v16;
}

void sub_100446830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100446864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFDictionaryRef theDict = 0;
  sub_10043C3DC(a1, a2, a3, a4, a5, a6, &theDict);
  if (theDict) {
    uint64_t v7 = sub_100080778;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!v7)
  {
    sub_100433878();
    BOOL v14 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "Failed loading PhoneAccountTransfer CB";
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
    goto LABEL_26;
  }
  if (!CFDictionaryContainsKey(theDict, @"PhoneAccountTransfer"))
  {
    sub_100433878();
    BOOL v14 = qword_101B0CE20;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "Missing PhoneAccountTransfer in CB";
    goto LABEL_14;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PhoneAccountTransfer");
  if (!CFDictionaryContainsKey(Value, @"RequiresDeleteAfterTransfer"))
  {
    sub_100433878();
    long long v19 = qword_101B0CE20;
    BOOL v16 = 0;
    if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v20 = a6;
    }
    else {
      uint64_t v20 = *(void *)a6;
    }
    *(_DWORD *)long long buf = 136315138;
    v24[0] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I RequiresDeleteAfterTransfer not present in CB entitlements for ICCID: [%s]", buf, 0xCu);
LABEL_26:
    BOOL v16 = 0;
    goto LABEL_27;
  }
  uint64_t v9 = (BOOL *)CFDictionaryGetValue(Value, @"RequiresDeleteAfterTransfer");
  CFTypeID v10 = v9;
  buf[0] = 0;
  if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)buf, v10, v12);
    int v13 = buf[0];
  }
  else
  {
    int v13 = 0;
  }
  BOOL v16 = v13 != 0;
  sub_100433878();
  uint64_t v17 = qword_101B0CE20;
  if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v18 = a6;
    }
    else {
      uint64_t v18 = *(void *)a6;
    }
    *(_DWORD *)long long buf = 67109378;
    LODWORD(v24[0]) = v13;
    WORD2(v24[0]) = 2080;
    *(void *)((char *)v24 + 6) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I kRequiresDeleteAfterTransfer is set to %d for ICCID: [%s]", buf, 0x12u);
  }
LABEL_27:
  sub_100057D78((const void **)&theDict);
  return v16;
}

void sub_100446AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_100446B08@<X0>(const void **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)(a7 + 16) = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)a7 = a7 + 8;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v14 = (uint64_t)result;
    values = @"SupportedSIMs";
    CFArrayRef v15 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
    CFDictionaryRef v36 = 0;
    CFArrayRef v37 = v15;
    CFArrayRef v35 = v15;
    if (v15) {
      CFRetain(v15);
    }
    sub_100433ECC(v14, a2, a3, a4, a5, a6, &v35, (CFDictionaryRef *)v26);
    sub_10004EFE4(&v36, (CFTypeRef *)v26);
    sub_10005717C((const void **)v26);
    sub_100044D00((const void **)&v35);
    if (v36) {
      BOOL v16 = sub_100080778;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v36, @"SupportedSIMs");
      CFArrayRef v18 = Value;
      if (Value)
      {
        CFTypeID v19 = CFGetTypeID(Value);
        if (v19 == CFArrayGetTypeID())
        {
          CFIndex Count = CFArrayGetCount(v18);
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              memset(&v34, 0, sizeof(v34));
              CFArrayGetValueAtIndex(v18, i);
              memset(v26, 0, sizeof(v26));
              v27[0] = 0;
              ctu::cf::assign();
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
              v34.__r_.__value_.__r.__words[2] = (std::string::size_type)v27[0];
              uint64_t v33 = 0;
              long long v31 = 0u;
              *(_OWORD *)long long __p = 0u;
              *(_OWORD *)CFArrayRef v29 = 0u;
              *(_OWORD *)CFStringRef v30 = 0u;
              *(_OWORD *)CFArrayRef v27 = 0u;
              long long v28 = 0u;
              *(_OWORD *)CFTypeID v26 = 0u;
              getCarrierInformation(&v34, (uint64_t)v26);
              sub_100433878();
              CFArrayRef v22 = qword_101B0CE20;
              if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
              {
                if (v28 >= 0) {
                  CFTypeID v23 = &v27[1];
                }
                else {
                  CFTypeID v23 = (void **)v27[1];
                }
                *(_DWORD *)long long buf = 136315138;
                uint64_t v39 = v23;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Adding MCC [%s]", buf, 0xCu);
              }
              sub_1000F29CC((uint64_t **)a7, &v27[1], (uint64_t)&v27[1]);
              if (SHIBYTE(v33) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v31) < 0) {
                operator delete(v30[1]);
              }
              if (SHIBYTE(v30[0]) < 0) {
                operator delete(v29[0]);
              }
              if (SHIBYTE(v28) < 0) {
                operator delete(v27[1]);
              }
              if (SHIBYTE(v27[0]) < 0) {
                operator delete(*(void **)v26);
              }
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
            }
          }
          goto LABEL_36;
        }
      }
      sub_100433878();
      char v24 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CFTypeID v26 = 0;
        CFDictionaryRef v25 = "Failed to get <SupportedSIMs> array";
LABEL_39:
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v25, v26, 2u);
      }
    }
    else
    {
      sub_100433878();
      char v24 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CFTypeID v26 = 0;
        CFDictionaryRef v25 = "Failed to side lookup";
        goto LABEL_39;
      }
    }
LABEL_36:
    sub_100057D78((const void **)&v36);
    return sub_100044D00((const void **)&v37);
  }
  return result;
}

void sub_100446E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_100057D78((const void **)(v36 - 128));
  sub_100044D00((const void **)(v36 - 120));
  sub_10005CD2C(v35, *(char **)(v35 + 8));
  _Unwind_Resume(a1);
}

const void **sub_100446F30@<X0>(const void **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char **a7@<X8>)
{
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    if (v10)
    {
      uint64_t v15 = (uint64_t)result;
      values = @"CellularPlanProvisioningSettings";
      CFArrayRef v16 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFDictionaryRef theDict = 0;
      CFArrayRef v49 = v16;
      CFArrayRef v47 = v16;
      if (v16) {
        CFRetain(v16);
      }
      sub_100433ECC(v15, a2, a3, a4, a5, a6, &v47, (CFDictionaryRef *)buf);
      sub_10004EFE4(&theDict, (CFTypeRef *)buf);
      sub_10005717C((const void **)buf);
      sub_100044D00((const void **)&v47);
      if (theDict) {
        uint64_t v17 = sub_100080778;
      }
      else {
        uint64_t v17 = 0;
      }
      if (v17)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CellularPlanProvisioningSettings");
        CFDictionaryRef v19 = Value;
        if (Value)
        {
          CFTypeID v20 = CFGetTypeID(Value);
          if (v20 == CFDictionaryGetTypeID())
          {
            CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v19, @"PlanAutoInstallBackoffTimes");
            CFArrayRef v22 = v21;
            if (v21)
            {
              CFTypeID v23 = CFGetTypeID(v21);
              if (v23 == CFArrayGetTypeID())
              {
                CFIndex Count = CFArrayGetCount(v22);
                if (Count >= 1)
                {
                  for (CFIndex i = 0; i != Count; ++i)
                  {
                    CFStringRef ValueAtIndex = (int *)CFArrayGetValueAtIndex(v22, i);
                    long long v28 = ValueAtIndex;
                    if (ValueAtIndex)
                    {
                      CFTypeID v29 = CFGetTypeID(ValueAtIndex);
                      if (v29 == CFNumberGetTypeID()) {
                        CFStringRef v30 = v28;
                      }
                      else {
                        CFStringRef v30 = 0;
                      }
                    }
                    else
                    {
                      CFStringRef v30 = 0;
                    }
                    *(_DWORD *)long long buf = 0;
                    ctu::cf::assign((ctu::cf *)buf, v30, v27);
                    uint64_t v31 = *(int *)buf;
                    uint64_t v33 = a7[1];
                    unint64_t v32 = (unint64_t)a7[2];
                    if ((unint64_t)v33 >= v32)
                    {
                      uint64_t v35 = *a7;
                      uint64_t v36 = (v33 - *a7) >> 3;
                      unint64_t v37 = v36 + 1;
                      if ((unint64_t)(v36 + 1) >> 61) {
                        sub_10006A748();
                      }
                      uint64_t v38 = v32 - (void)v35;
                      if (v38 >> 2 > v37) {
                        unint64_t v37 = v38 >> 2;
                      }
                      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v39 = v37;
                      }
                      if (v39)
                      {
                        unint64_t v40 = (char *)sub_10004EF74((uint64_t)(a7 + 2), v39);
                        uint64_t v35 = *a7;
                        uint64_t v33 = a7[1];
                      }
                      else
                      {
                        unint64_t v40 = 0;
                      }
                      uint64_t v41 = &v40[8 * v36];
                      *(void *)uint64_t v41 = v31;
                      std::string v34 = v41 + 8;
                      while (v33 != v35)
                      {
                        uint64_t v42 = *((void *)v33 - 1);
                        v33 -= 8;
                        *((void *)v41 - 1) = v42;
                        v41 -= 8;
                      }
                      *a7 = v41;
                      a7[1] = v34;
                      a7[2] = &v40[8 * v39];
                      if (v35) {
                        operator delete(v35);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v33 = *(int *)buf;
                      std::string v34 = v33 + 8;
                    }
                    a7[1] = v34;
                  }
                }
                sub_100433878();
                CFIndex v43 = qword_101B0CE20;
                if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v44 = (a7[1] - *a7) >> 3;
                  *(_DWORD *)long long buf = 134217984;
                  uint64_t v51 = v44;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I PlanAutoInstallBackoffTimes [%lu]", buf, 0xCu);
                }
                goto LABEL_50;
              }
            }
            sub_100433878();
            unint64_t v45 = qword_101B0CE20;
            if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              uint64_t v46 = "Fail to get backoff times";
              goto LABEL_49;
            }
LABEL_50:
            sub_100057D78((const void **)&theDict);
            return sub_100044D00((const void **)&v49);
          }
        }
        sub_100433878();
        unint64_t v45 = qword_101B0CE20;
        if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_50;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v46 = "Failed to get dictionary";
      }
      else
      {
        sub_100433878();
        unint64_t v45 = qword_101B0CE20;
        if (!os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_50;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v46 = "Failed to side lookup";
      }
LABEL_49:
      _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, v46, buf, 2u);
      goto LABEL_50;
    }
  }
  return result;
}

void sub_100447328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  long long v6 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100044D00((const void **)va1);
  uint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void *sub_1004473B0(void *a1)
{
  *a1 = &off_1019CBA78;
  a1[1] = off_1019CBFF0;
  a1[2] = off_1019CC028;
  a1[3] = off_1019CC058;
  a1[4] = off_1019CC140;
  a1[5] = off_1019CC1A8;
  a1[6] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_1004474D4(void *a1)
{
  *a1 = &off_1019CBA78;
  a1[1] = off_1019CBFF0;
  a1[2] = off_1019CC028;
  a1[3] = off_1019CC058;
  a1[4] = off_1019CC140;
  a1[5] = off_1019CC1A8;
  a1[6] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void sub_100447618(void *a1)
{
  *(a1 - 1) = &off_1019CBA78;
  *a1 = off_1019CBFF0;
  a1[1] = off_1019CC028;
  a1[2] = off_1019CC058;
  a1[3] = off_1019CC140;
  a1[4] = off_1019CC1A8;
  a1[5] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100447738(void *a1)
{
  *(a1 - 1) = &off_1019CBA78;
  *a1 = off_1019CBFF0;
  a1[1] = off_1019CC028;
  a1[2] = off_1019CC058;
  a1[3] = off_1019CC140;
  a1[4] = off_1019CC1A8;
  a1[5] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void sub_10044787C(void *a1)
{
  *(a1 - 2) = &off_1019CBA78;
  *(a1 - 1) = off_1019CBFF0;
  *a1 = off_1019CC028;
  a1[1] = off_1019CC058;
  a1[2] = off_1019CC140;
  a1[3] = off_1019CC1A8;
  a1[4] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_10044799C(void *a1)
{
  *(a1 - 2) = &off_1019CBA78;
  *(a1 - 1) = off_1019CBFF0;
  *a1 = off_1019CC028;
  a1[1] = off_1019CC058;
  a1[2] = off_1019CC140;
  a1[3] = off_1019CC1A8;
  a1[4] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void sub_100447AE0(void *a1)
{
  *(a1 - 3) = &off_1019CBA78;
  *(a1 - 2) = off_1019CBFF0;
  *(a1 - 1) = off_1019CC028;
  *a1 = off_1019CC058;
  a1[1] = off_1019CC140;
  a1[2] = off_1019CC1A8;
  a1[3] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100447C00(void *a1)
{
  *(a1 - 3) = &off_1019CBA78;
  *(a1 - 2) = off_1019CBFF0;
  *(a1 - 1) = off_1019CC028;
  *a1 = off_1019CC058;
  a1[1] = off_1019CC140;
  a1[2] = off_1019CC1A8;
  a1[3] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void sub_100447D44(void *a1)
{
  *(a1 - 4) = &off_1019CBA78;
  *(a1 - 3) = off_1019CBFF0;
  *(a1 - 2) = off_1019CC028;
  *(a1 - 1) = off_1019CC058;
  *a1 = off_1019CC140;
  a1[1] = off_1019CC1A8;
  a1[2] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100447E64(void *a1)
{
  *(a1 - 4) = &off_1019CBA78;
  *(a1 - 3) = off_1019CBFF0;
  *(a1 - 2) = off_1019CC028;
  *(a1 - 1) = off_1019CC058;
  *a1 = off_1019CC140;
  a1[1] = off_1019CC1A8;
  a1[2] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void sub_100447FA8(void *a1)
{
  *(a1 - 5) = &off_1019CBA78;
  *(a1 - 4) = off_1019CBFF0;
  *(a1 - 3) = off_1019CC028;
  *(a1 - 2) = off_1019CC058;
  *(a1 - 1) = off_1019CC140;
  *a1 = off_1019CC1A8;
  a1[1] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1004480C8(void *a1)
{
  *(a1 - 5) = &off_1019CBA78;
  *(a1 - 4) = off_1019CBFF0;
  *(a1 - 3) = off_1019CC028;
  *(a1 - 2) = off_1019CC058;
  *(a1 - 1) = off_1019CC140;
  *a1 = off_1019CC1A8;
  a1[1] = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void sub_10044820C(void *a1)
{
  *(a1 - 6) = &off_1019CBA78;
  *(a1 - 5) = off_1019CBFF0;
  *(a1 - 4) = off_1019CC028;
  *(a1 - 3) = off_1019CC058;
  *(a1 - 2) = off_1019CC140;
  *(a1 - 1) = off_1019CC1A8;
  *a1 = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_10044832C(void *a1)
{
  *(a1 - 6) = &off_1019CBA78;
  *(a1 - 5) = off_1019CBFF0;
  *(a1 - 4) = off_1019CC028;
  *(a1 - 3) = off_1019CC058;
  *(a1 - 2) = off_1019CC140;
  *(a1 - 1) = off_1019CC1A8;
  *a1 = off_1019CC1E8;
  CFStringRef v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void *sub_100448470(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    sub_10006A7CC();
  }
  return operator new(120 * a1);
}

char **sub_1004484B8(char **a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - v5) >> 3);
    if (v7 >= 0x222222222222223) {
      sub_10006A748();
    }
    uint64_t v8 = (char *)sub_100448470(v7);
    uint64_t v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[120 * v10];
    do
    {
      sub_1003DCECC(&v8[v9], (long long *)(v5 + v9));
      v9 += 120;
    }
    while (v5 + v9 != v6);
    a1[1] = &v8[v9];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_100448664(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_10044859C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1004485E0(void ***a1)
{
  char v1 = *a1;
  CFStringRef v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        sub_1003991D0(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_100448664(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10005CCE8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1004486C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004486E0(__CFDictionary *a1, void *cf, uint64_t a3)
{
  key = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = a3;
  if (a3)
  {
    CFRetain((CFTypeRef)a3);
    if (key)
    {
      CFDictionaryAddValue(a1, key, (const void *)a3);
      a3 = 1;
    }
    else
    {
      a3 = 0;
    }
  }
  sub_10010F494((const void **)&v6);
  sub_10010F494((const void **)&key);
  return a3;
}

void sub_100448760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_100448784(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004487A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC388;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004487F8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448820(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448840(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448894(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1004488BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004488DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC428;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448930(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448958(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448978(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC478;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004489CC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1004489F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448A14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448A68(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448A90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448AB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC518;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448B04(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448B2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCBB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448B4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCBB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448BA0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448BC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448BE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC568;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448C3C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448C64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448C84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448CD8(uint64_t a1)
{
  return sub_100F012E8(a1 + 24);
}

void sub_100448CE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448D04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC608;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448D58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 80))();
}

void sub_100448D80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448DA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448DF4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448E1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448E3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448E90(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100448EB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100448ED8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100448F2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void sub_100448F54(uint64_t *a1, NSObject *a2, uint64_t *a3, void *a4, char *a5)
{
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x120uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC748;
  uint64_t v11 = (uint64_t)&v10[1];
  dispatch_object_t object = a2;
  if (a2) {
    dispatch_retain(a2);
  }
  uint64_t v12 = *a3;
  int v13 = (std::__shared_weak_count *)a3[1];
  v15[0] = v12;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1005D0FD4(v11, &object, v15, a4, *a5);
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  *a1 = v11;
  a1[1] = (uint64_t)v10;
  shared_weak_owners = (std::__shared_weak_count *)v10[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__shared_owners_ = v11;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__shared_owners_ = v11;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
  }

  sub_10004D2C8(v10);
}

void sub_1004490AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_1004490DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004490FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC748;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100449150(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100449178(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100449198(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004491EC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100449214(void *a1)
{
  CFStringRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100449298(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004492B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10044930C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void sub_100449334(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100449354(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004493A8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1004493D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004493F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100449444(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 72))();
}

void sub_10044946C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10044948C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004494E0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100449508(uint64_t a1, uint64_t **a2)
{
  long long __p = 0uLL;
  uint64_t v4 = 0;
  ctu::cf::assign();
  sub_1000D8C94(a2, &__p);
  if (SHIBYTE(v4) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100449560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100449580(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = 0;
    sub_100062740(&v5, a2);
    uint64_t v3 = *a1;
    *a1 = v5;
    uint64_t v5 = v3;
    sub_100044D00(&v5);
  }
  return a1;
}

void sub_1004495DC()
{
}

uint64_t sub_1004495F0()
{
  return 0;
}

void *sub_1004495F8(uint64_t a1, void *a2)
{
  *a2 = off_1019CC928;
  uint64_t result = *(void **)(a1 + 8);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

void sub_100449644(uint64_t a1)
{
  CFStringRef v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

uint64_t sub_10044967C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100449690(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019CC988)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1004496D0()
{
  return &off_1019CC988;
}

void sub_1004496DC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      if (*(unsigned char *)a2) {
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 1);
      }
      else {
        *(unsigned char *)(a1 + 8) = 0;
      }
    }
    else if (*(unsigned char *)a2)
    {
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 1);
      *(unsigned char *)(a1 + 8) = 1;
    }
    sub_1003DC1E4(a1 + 32, a2 + 24);
    int v5 = *(_DWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 60);
    *(_DWORD *)(a1 + 64) = v5;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
    if (*(unsigned char *)a2)
    {
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 1);
      *(unsigned char *)(a1 + 8) = 1;
    }
    sub_100311E70(a1 + 32, a2 + 24);
    int v4 = *(_DWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 60);
    *(_DWORD *)(a1 + 64) = v4;
    *(unsigned char *)a1 = 1;
  }
}

void sub_1004497A0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 8)) {
    *(unsigned char *)(v1 + 8) = 0;
  }
  _Unwind_Resume(a1);
}

void sub_1004497B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004497D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100449824(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10044984C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10044986C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CC9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004498C0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1004498E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100449908(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCA48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10044995C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100449984(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004499A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCA98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004499F8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100449A20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100449A40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100449A94(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100449ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100449B54(uint64_t a1)
{
  *(void *)a1 = off_1019CCB38;
  sub_1000D83A0((void *)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100449BC8(uint64_t a1)
{
  *(void *)a1 = off_1019CCB38;
  sub_1000D83A0((void *)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

char *sub_100449C5C(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  CFStringRef v2 = (char *)operator new(0x70uLL);
  *(void *)CFStringRef v2 = off_1019CCB38;
  sub_10044A1FC(v2 + 8, v1);
  return v2;
}

void sub_100449CB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_100449CC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CCB38;
  return sub_10044A1FC((char *)(a2 + 8), (long long *)(a1 + 8));
}

void sub_100449CF0(uint64_t a1)
{
}

void sub_100449CF8(void *a1)
{
  sub_10044A30C((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100449D34(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = a1 + 8;
  switch(*a2)
  {
    case 0:
    case 3:
      goto LABEL_6;
    case 1:
      if (*(char *)(a1 + 55) < 0)
      {
        sub_10004FC84(buf, *(void **)(a1 + 32), *(void *)(a1 + 40));
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 48);
      }
      if (*(char *)(a1 + 79) < 0)
      {
        sub_10004FC84(&v15, *(void **)(a1 + 56), *(void *)(a1 + 64));
      }
      else
      {
        long long v15 = *(_OWORD *)(a1 + 56);
        v16[0] = *(void *)(a1 + 72);
      }
      sub_1000EA30C((uint64_t)v11, (void **)buf, 2);
      uint64_t v7 = *(void *)(a1 + 104);
      if (!v7) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 48))(v7, v11);
      sub_10005CD2C((uint64_t)v11, v12);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v16[i]) < 0) {
          operator delete((void *)v16[i - 2]);
        }
      }
      break;
    case 2:
      if (*(char *)(a1 + 31) < 0)
      {
        sub_10004FC84(buf, *(void **)(a1 + 8), *(void *)(a1 + 16));
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)v3;
        uint64_t v14 = *(void *)(a1 + 24);
      }
      if (*(char *)(a1 + 79) < 0)
      {
        sub_10004FC84(&v15, *(void **)(a1 + 56), *(void *)(a1 + 64));
      }
      else
      {
        long long v15 = *(_OWORD *)(a1 + 56);
        v16[0] = *(void *)(a1 + 72);
      }
      sub_1000EA30C((uint64_t)v11, (void **)buf, 2);
      uint64_t v9 = *(void *)(a1 + 104);
      if (!v9) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v11);
      sub_10005CD2C((uint64_t)v11, v12);
      for (uint64_t j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v16[j]) < 0) {
          operator delete((void *)v16[j - 2]);
        }
      }
      break;
    case 4:
      sub_100433878();
      int v4 = qword_101B0CE20;
      if (os_log_type_enabled((os_log_t)qword_101B0CE20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error response - leave enabled plans", buf, 2u);
      }
LABEL_6:
      if (*(char *)(a1 + 31) < 0)
      {
        sub_10004FC84(buf, *(void **)(a1 + 8), *(void *)(a1 + 16));
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)v3;
        uint64_t v14 = *(void *)(v3 + 16);
      }
      if (*(char *)(a1 + 55) < 0)
      {
        sub_10004FC84(&v15, *(void **)(a1 + 32), *(void *)(a1 + 40));
      }
      else
      {
        long long v15 = *(_OWORD *)(a1 + 32);
        v16[0] = *(void *)(a1 + 48);
      }
      sub_1000EA30C((uint64_t)v11, (void **)buf, 2);
      uint64_t v5 = *(void *)(a1 + 104);
      if (!v5) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 48))(v5, v11);
      sub_10005CD2C((uint64_t)v11, v12);
      for (uint64_t k = 0; k != -6; k -= 3)
      {
        if (SHIBYTE(v16[k]) < 0) {
          operator delete((void *)v16[k - 2]);
        }
      }
      break;
    default:
      return;
  }
}

void sub_10044A09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044A1B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10044A1F0()
{
}

char *sub_10044A1FC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  sub_100449ABC((uint64_t)(__dst + 72), (uint64_t)a2 + 72);
  return __dst;
}

void sub_10044A2C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044A30C(uint64_t a1)
{
  sub_1000D83A0((void *)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    CFStringRef v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_10044A37C(id a1)
{
  sub_100058DB0(__p, "/tmp/ct.shutdown");
  memset(&v6, 0, sizeof(v6));
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  int v2 = stat((const char *)v1, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v2)
  {
    byte_101B13DA0 = 1;
    sub_100058DB0(&v6, "/tmp/ct.shutdown");
    int v3 = sub_10010176C((const char *)&v6, 513, 1, 420);
    if (SHIBYTE(v6.st_gid) < 0) {
      operator delete(*(void **)&v6.st_dev);
    }
    if (v3 >= 1) {
      sub_100101968(v3);
    }
  }
  else
  {
    byte_101B13DA0 = 0;
  }
}

void sub_10044A45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044A48C()
{
  sub_100058DB0(&__p, "/tmp/ct.shutdown");
  sub_100102494(&__p, v0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_10044A4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LASDQueryInterface::create(Registry **a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  long long v4 = (std::__shared_weak_count *)operator new(0x68uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCC80;
  char v5 = v4 + 1;
  sub_1003F4D80(&v4[1].__vftable, a1);
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_6;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
  }
  sub_10004D2C8(v4);
LABEL_6:
  uint64_t v7 = 0;
  size_t v8 = 0;
  Registry::getServiceManager(&v7, *a1);
  if (v7)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    operator new();
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_10044A670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a11) {
    sub_10004D2C8(a11);
  }
  sub_10004D2C8(v12);
  _Unwind_Resume(a1);
}

void sub_10044A6EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10044A70C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019CCC80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10044A760(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10044A788(ServiceManager::Service *this)
{
  *(void *)this = off_1019CCCD0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_10044A7E4(ServiceManager::Service *this)
{
  *(void *)this = off_1019CCCD0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_10044A854@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "LASDQueryService");
}

unsigned char *sub_10044A864@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v2 = operator new(1uLL);
  *a1 = v2;
  *int v2 = 1;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10044A8A4(uint64_t a1, dispatch_object_t *a2)
{
  int v2 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v2);
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

uint64_t sub_10044A900()
{
  return 0;
}

uint64_t sub_10044A908()
{
  return 1;
}

uint64_t sub_10044A910()
{
  return 0;
}

void sub_10044A91C(uint64_t a1)
{
}

void sub_10044A924(uint64_t a1, int a2, ServiceStage *a3)
{
}

void sub_10044A930(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10044A968(int a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10044A9A8(int a1, PB::Reader *this)
{
  while (1)
  {
    unint64_t v3 = *((void *)this + 1);
    unint64_t v4 = *((void *)this + 2);
    int v5 = *((unsigned __int8 *)this + 24);
    if (v3 >= v4 || v5 != 0) {
      return v5 == 0;
    }
    uint64_t v7 = *(void *)this;
    char v8 = 0;
    unsigned int v9 = 0;
    BOOL v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      unint64_t v13 = 0;
      if (v3 > v4) {
        unint64_t v4 = *((void *)this + 1);
      }
      while (v4 != v3)
      {
        unint64_t v11 = v3 + 1;
        char v12 = *(unsigned char *)(v7 + v3);
        *((void *)this + 1) = v11;
        v13 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          goto LABEL_22;
        }
        v8 += 7;
        unint64_t v3 = v11;
        BOOL v10 = v9++ > 8;
        if (v10)
        {
LABEL_21:
          unsigned __int8 v16 = 0;
          unint64_t v13 = 0;
          goto LABEL_23;
        }
      }
      int v5 = 1;
      *((unsigned char *)this + 24) = 1;
      return v5 == 0;
    }
    unint64_t v13 = 0;
    while (1)
    {
      unint64_t v14 = v3 + 1;
      *((void *)this + 1) = v3 + 1;
      char v15 = *(unsigned char *)(v7 + v3);
      v13 |= (unint64_t)(v15 & 0x7F) << v8;
      if ((v15 & 0x80) == 0) {
        break;
      }
      v8 += 7;
      unint64_t v3 = v14;
      BOOL v10 = v9++ > 8;
      if (v10) {
        goto LABEL_21;
      }
    }
LABEL_22:
    unsigned __int8 v16 = v13 & 7;
    if ((v13 & 7) == 4)
    {
      int v5 = 0;
      return v5 == 0;
    }
LABEL_23:
    if ((PB::Reader::skip(this, v13 >> 3, v16, 0) & 1) == 0) {
      return 0;
    }
  }
}

uint64_t sub_10044AACC(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_10004FC84((unsigned char *)v3, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(v3 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

int8x8_t sub_10044AB4C(uint64_t a1)
{
  v6.time_t tv_sec = 0;
  *(void *)&v6.tv_usec = 0;
  gettimeofday(&v6, 0);
  memset(&v5, 0, sizeof(v5));
  time_t tv_sec = v6.tv_sec;
  localtime_r(&tv_sec, &v5);
  *(unsigned char *)(a1 + 64) = 1;
  *(_WORD *)a1 = LOWORD(v5.tm_year) + 1900;
  *(unsigned char *)(a1 + 2) = LOBYTE(v5.tm_mon) + 1;
  v2.i64[1] = *(void *)&v5.tm_hour;
  *(int16x4_t *)v2.i8 = vrev64_s16(vmovn_s32(*(int32x4_t *)&v5.tm_sec));
  int8x8_t result = vmovn_s16(v2);
  *(_DWORD *)(a1 + 3) = result.i32[0];
  *(_DWORD *)(a1 + 8) = v6.tv_usec / 1000;
  return result;
}

uint64_t sub_10044ABFC(uint64_t a1, char *a2)
{
  int16x8_t v2 = a2;
  if (a2[23] < 0) {
    int16x8_t v2 = *(const char **)a2;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  int v5 = 0;
  uint64_t result = sscanf(v2, "%04u-%02u-%02u-%02u-%02u-%02u-%03u", (char *)&v8 + 4, &v8, (char *)&v7 + 4, &v7, (char *)&v6 + 4, &v6, &v5);
  if (result == 7)
  {
    *(unsigned char *)(a1 + 64) = 1;
    *(_WORD *)a1 = WORD2(v8);
    *(unsigned char *)(a1 + 2) = v8;
    *(unsigned char *)(a1 + 3) = BYTE4(v7);
    *(unsigned char *)(a1 + 4) = v7;
    *(unsigned char *)(a1 + 5) = BYTE4(v6);
    *(unsigned char *)(a1 + 6) = v6;
    *(_DWORD *)(a1 + 8) = v5;
  }
  return result;
}

void *sub_10044ACC4@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v5 = 0u;
  snprintf(__str, 0x40uLL, "%s%04u-%02u-%02u-%02u-%02u-%02u-%03u", "log-bb-", *a1, *((unsigned __int8 *)a1 + 2), *((unsigned __int8 *)a1 + 3), *((unsigned __int8 *)a1 + 4), *((unsigned __int8 *)a1 + 5), *((unsigned __int8 *)a1 + 6), *((_DWORD *)a1 + 2));
  return sub_100058DB0(a2, __str);
}

void *sub_10044AD78@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v5 = 0u;
  snprintf(__str, 0x40uLL, "%04u-%02u-%02u-%02u-%02u-%02u-%03u", *a1, *((unsigned __int8 *)a1 + 2), *((unsigned __int8 *)a1 + 3), *((unsigned __int8 *)a1 + 4), *((unsigned __int8 *)a1 + 5), *((unsigned __int8 *)a1 + 6), *((_DWORD *)a1 + 2));
  return sub_100058DB0(a2, __str);
}

void sub_10044AE24(uint64_t a1)
{
  sub_10044ACC4((unsigned __int16 *)a1, &__p);
  std::operator+<char>();
  int16x8_t v2 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)int16x8_t v2 = v5;
  *(void *)(a1 + 32) = v6;
  HIBYTE(v6) = 0;
  LOBYTE(v5) = 0;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_10044AEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044AEC4()
{
}

BOOL sub_10044AED8(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4 = sub_100365D74();
  std::operator+<char>();
  BOOL v5 = sub_100226284(v4, &__p, a3);
  if (v8 < 0) {
    operator delete(__p);
  }
  return v5;
}

void sub_10044AF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044AF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)sub_100365D74();
  std::operator+<char>();
  sub_1002266A4(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10044AFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10044AFF8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = sub_100365D74();
  std::operator+<char>();
  BOOL v5 = sub_1004421D8(v4, &__p, a3);
  if (v8 < 0) {
    operator delete(__p);
  }
  return v5;
}

void sub_10044B070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044B08C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = (uint64_t **)sub_100365D74();
  std::operator+<char>();
  sub_10044B194(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10044B0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044B118()
{
  id v0 = (uint64_t **)sub_100365D74();
  std::operator+<char>();
  sub_1003660FC(v0, &__p);
  if (v2 < 0) {
    operator delete(__p);
  }
}

void sub_10044B178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044B194(uint64_t **a1, std::string *a2, _DWORD *a3)
{
  *(_OWORD *)std::string __str = 0u;
  long long v9 = 0u;
  snprintf(__str, 0x20uLL, "0x%x", *a3);
  sub_100058DB0(&__p, __str);
  uint64_t v5 = sub_10036627C(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_10044B244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044B268()
{
}

void sub_10044B368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v16) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044B3B4(uint64_t a1, dispatch_object_t *a2, void *a3, void **a4, void *a5)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v28, kCtLoggingSystemName, "lazuli.mgr");
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  BOOL v10 = *a2;
  *(void *)(a1 + 24) = *a2;
  if (v10) {
    dispatch_retain(v10);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v26, &v28);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v26);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v26);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v28);
  v27[0] = off_101999E18;
  v27[1] = sub_10044BA04;
  v27[3] = v27;
  *(void *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v11) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  sub_10008863C(v27);
  *(void *)a1 = off_1019CCE10;
  *(void *)(a1 + 56) = *a3;
  uint64_t v12 = a3[1];
  *(void *)(a1 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, "LazuliManager");
  CFTypeID v23 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  ctu::RestModule::RestModule();
  if (v23) {
    dispatch_release(v23);
  }
  if (v25 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 88) = *a5;
  uint64_t v13 = a5[1];
  *(void *)(a1 + 96) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *a4;
  *(void *)(a1 + 104) = **a4;
  uint64_t v15 = v14[1];
  *(void *)(a1 + 112) = v15;
  if (v15)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    unint64_t v14 = *a4;
  }
  *(void *)(a1 + 120) = v14[2];
  uint64_t v16 = v14[3];
  *(void *)(a1 + 128) = v16;
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    unint64_t v14 = *a4;
  }
  *(void *)(a1 + 136) = v14[4];
  uint64_t v17 = v14[5];
  *(void *)(a1 + 144) = v17;
  if (v17)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    unint64_t v14 = *a4;
  }
  *(void *)(a1 + 152) = v14[6];
  uint64_t v18 = v14[7];
  *(void *)(a1 + 160) = v18;
  if (v18)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    unint64_t v14 = *a4;
  }
  *(void *)(a1 + 168) = v14[8];
  uint64_t v19 = v14[9];
  *(void *)(a1 + 176) = v19;
  if (v19)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    unint64_t v14 = *a4;
  }
  *(void *)(a1 + 184) = v14[10];
  uint64_t v20 = v14[11];
  *(void *)(a1 + 192) = v20;
  if (v20)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    unint64_t v14 = *a4;
  }
  *(void *)(a1 + 200) = v14[12];
  uint64_t v21 = v14[13];
  *(void *)(a1 + 208) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 280) = a1 + 288;
  if (!*(void *)(a1 + 104)) {
    __TUAssertTrigger();
  }
  if (!*(void *)(a1 + 120)) {
    __TUAssertTrigger();
  }
  if (!*(void *)(a1 + 136)) {
    __TUAssertTrigger();
  }
  if (!*(void *)(a1 + 152)) {
    __TUAssertTrigger();
  }
  if (!*(void *)(a1 + 168)) {
    __TUAssertTrigger();
  }
  if (!*(void *)(a1 + 184)) {
    __TUAssertTrigger();
  }
  if (!*(void *)(a1 + 200)) {
    __TUAssertTrigger();
  }
  return a1;
}

void sub_10044B83C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

const char *sub_10044BA04(int a1)
{
  uint64_t v1 = "lazuli.mgr.?";
  if (a1 == 2) {
    uint64_t v1 = "lazuli.mgr.2";
  }
  if (a1 == 1) {
    return "lazuli.mgr.1";
  }
  else {
    return v1;
  }
}

void sub_10044BA30(void *a1, uint64_t a2, NSObject **a3)
{
  uint64_t v6 = a1[15];
  long long v7 = *a3;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v6 + 16))(v6, a2, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v8 = a1[17];
  long long v9 = *a3;
  dispatch_group_t object = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(object);
  }
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v8 + 16))(v8, a2, &object);
  if (object)
  {
    dispatch_group_leave(object);
    if (object) {
      dispatch_release(object);
    }
  }
  uint64_t v10 = a1[19];
  unint64_t v11 = *a3;
  dispatch_group_t v21 = v11;
  if (v11)
  {
    dispatch_retain(v11);
    dispatch_group_enter(v21);
  }
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v10 + 16))(v10, a2, &v21);
  if (v21)
  {
    dispatch_group_leave(v21);
    if (v21) {
      dispatch_release(v21);
    }
  }
  uint64_t v12 = a1[21];
  uint64_t v13 = *a3;
  dispatch_group_t v20 = v13;
  if (v13)
  {
    dispatch_retain(v13);
    dispatch_group_enter(v13);
  }
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v12 + 16))(v12, a2, &v20);
  if (v20)
  {
    dispatch_group_leave(v20);
    if (v20) {
      dispatch_release(v20);
    }
  }
  uint64_t v14 = a1[23];
  uint64_t v15 = *a3;
  dispatch_group_t v19 = v15;
  if (v15)
  {
    dispatch_retain(v15);
    dispatch_group_enter(v15);
  }
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v14 + 16))(v14, a2, &v19);
  if (v19)
  {
    dispatch_group_leave(v19);
    if (v19) {
      dispatch_release(v19);
    }
  }
  uint64_t v16 = a1[13];
  uint64_t v17 = *a3;
  dispatch_group_t v18 = v17;
  if (v17)
  {
    dispatch_retain(v17);
    dispatch_group_enter(v17);
  }
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v16 + 16))(v16, a2, &v18);
  if (v18)
  {
    dispatch_group_leave(v18);
    if (v18) {
      dispatch_release(v18);
    }
  }
}

void sub_10044BCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group, dispatch_group_t a10, dispatch_group_t a11, dispatch_group_t a12, dispatch_group_t a13, dispatch_group_t a14)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044BD90(void **a1)
{
  ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 9));
  (*(void (**)(void *))(*a1[13] + 24))(a1[13]);
  (*(void (**)(void *))(*a1[15] + 24))(a1[15]);
  (*(void (**)(void *))(*a1[17] + 24))(a1[17]);
  (*(void (**)(void *))(*a1[19] + 24))(a1[19]);
  (*(void (**)(void *))(*a1[21] + 24))(a1[21]);
  char v2 = *(uint64_t (**)(void))(*a1[23] + 24);

  return v2();
}

void sub_10044BEB4(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping...", buf, 2u);
  }
  (***(void (****)(void))(a1 + 104))(*(void *)(a1 + 104));
  (***(void (****)(void))(a1 + 120))(*(void *)(a1 + 120));
  (***(void (****)(void))(a1 + 136))(*(void *)(a1 + 136));
  (***(void (****)(void))(a1 + 152))(*(void *)(a1 + 152));
  (***(void (****)(void))(a1 + 168))(*(void *)(a1 + 168));
  (***(void (****)(void))(a1 + 184))(*(void *)(a1 + 184));
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 192);
  uint64_t v30 = *(void *)(a1 + 184);
  uint64_t v31 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 64))(v3, &v30);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  if ((ctu::RestModule::isConnected((ctu::RestModule *)(a1 + 72)) & 1) == 0)
  {
    Registry::createRestModuleOneTimeUseConnection(&v28, *(Registry **)(a1 + 56));
    ctu::RestModule::connect();
    if (v29) {
      sub_10004D2C8(v29);
    }
  }
  sub_100058DB0(__p, "/cc/events/dump_state");
  uint64_t v5 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v5 = off_1019CD140;
  *((void *)v5 + 1) = a1;
  *((void *)v5 + 2) = sub_10044C638;
  *((void *)v5 + 3) = 0;
  unint64_t v37 = v5;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/lazuli_registration_state_changed");
  uint64_t v6 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v6 = off_1019CD1C0;
  *((void *)v6 + 1) = a1;
  *((void *)v6 + 2) = sub_10044C65C;
  *((void *)v6 + 3) = 0;
  unint64_t v37 = v6;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/lazuli_provisioning_initializer");
  long long v7 = (uint8_t *)operator new(0x28uLL);
  *(void *)long long v7 = off_1019CD240;
  *((void *)v7 + 1) = a1 + 224;
  *((void *)v7 + 2) = a1;
  *((void *)v7 + 3) = sub_10044C940;
  *((void *)v7 + 4) = 0;
  unint64_t v37 = v7;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  sub_10035B5E0(a1 + 256);
  sub_100058DB0(__p, "/cc/events/lazuli_provisioning_halted");
  uint64_t v8 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v8 = off_1019CD2C0;
  *((void *)v8 + 1) = a1;
  *((void *)v8 + 2) = sub_10044CBC4;
  *((void *)v8 + 3) = 0;
  unint64_t v37 = v8;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/lazuli_analytics_information");
  *(void *)long long buf = off_1019CD340;
  uint64_t v35 = a1 + 280;
  unint64_t v37 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  uint64_t v10 = ServiceMap;
  if (v11 < 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v11;
  uint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v15)
  {
    uint64_t v17 = v15[3];
    uint64_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      if (!v17) {
        goto LABEL_46;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  uint64_t v16 = 0;
  char v18 = 1;
  if (!v17) {
    goto LABEL_46;
  }
LABEL_29:
  dispatch_group_t v19 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v19 || (uint64_t v20 = *(void *)(a1 + 8), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    sub_100088B9C();
  }
  CFArrayRef v22 = v21;
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v21);
  CFTypeID v23 = *(void **)(a1 + 24);
  if (v23) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 24));
  }
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 0x40000000;
  v27[2] = sub_10044CD88;
  v27[3] = &unk_1019CCFA8;
  void v27[4] = a1;
  if (v23)
  {
    char v24 = _Block_copy(v27);
    char v25 = v24;
    __p[0] = v23;
    *(void *)long long buf = _NSConcreteStackBlock;
    uint64_t v35 = 1174405120;
    uint64_t v36 = sub_100455CA0;
    unint64_t v37 = (uint8_t *)&unk_1019CD3B0;
    uint64_t v38 = v20;
    unint64_t v39 = v22;
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (v24) {
      CFTypeID v26 = _Block_copy(v24);
    }
    else {
      CFTypeID v26 = 0;
    }
    aBlocuint64_t k = v26;
    (*(void (**)(uint64_t, const char *, uint64_t, void **, uint8_t *))(*(void *)v17 + 40))(v17, "RCSMessageProvisionRegistration", 1, __p, buf);
    if (__p[0]) {
      dispatch_release((dispatch_object_t)__p[0]);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v39) {
      std::__shared_weak_count::__release_weak(v39);
    }
    if (v25) {
      _Block_release(v25);
    }
  }
  std::__shared_weak_count::__release_weak(v22);
LABEL_46:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
}

void sub_10044C548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, dispatch_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *aBlock)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044C638(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void sub_10044C65C(uint64_t a1, unsigned int *a2)
{
  memset(v27, 0, sizeof(v27));
  memset(v26, 0, sizeof(v26));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 120))(&v19);
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *a2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = Lazuli::asString();
    *(_DWORD *)long long buf = 136315138;
    uint64_t v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Registration state change (publishing system configuration): %s", buf, 0xCu);
  }
  uint64_t v6 = *(void (****)(void, uint64_t, uint64_t *))(a1 + 88);
  uint64_t v7 = *a2;
  uint64_t v8 = v19;
  int v9 = DWORD2(v19);
  sub_100453DF4((uint64_t)v10, v20);
  v10[5] = v24;
  v10[6] = v25;
  uint64_t v11 = v26[0];
  sub_100453E60(v12, (uint64_t)&v26[1]);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)&v26[29];
  *(void *)&v13[13] = *(void *)((char *)&v26[30] + 5);
  sub_100453FCC(v14, v27);
  long long v15 = *(long long *)((char *)&v27[3] + 8);
  long long v16 = *(long long *)((char *)&v27[4] + 8);
  char v17 = BYTE8(v27[5]);
  char v18 = 1;
  (**v6)(v6, v7, &v8);
  sub_100454088((uint64_t)&v8);
  sub_10039BE98((uint64_t)v27);
  sub_10039BEEC((uint64_t)&v26[1]);
  if (BYTE8(v23) && (_BYTE)v23 && SHIBYTE(v22) < 0) {
    operator delete(*((void **)&v21 + 1));
  }
}

void sub_10044C8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_10044D2E4((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_10044C940(uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)(a1 + 224);
  uint64_t v3 = (void *)(a1 + 232);
  if (v2 != (void *)(a1 + 232))
  {
    uint64_t v5 = (void *)(a2 + 8);
    do
    {
      uint64_t v6 = *v5;
      if (*v5)
      {
        int v7 = *((_DWORD *)v2 + 8);
        uint64_t v8 = v5;
        do
        {
          int v9 = *(_DWORD *)(v6 + 32);
          BOOL v10 = v9 < v7;
          if (v9 >= v7) {
            uint64_t v11 = (uint64_t *)v6;
          }
          else {
            uint64_t v11 = (uint64_t *)(v6 + 8);
          }
          if (!v10) {
            uint64_t v8 = (void *)v6;
          }
          uint64_t v6 = *v11;
        }
        while (*v11);
        if (v8 != v5
          && v7 >= *((_DWORD *)v8 + 8)
          && *((unsigned char *)v2 + 209)
          && *((unsigned char *)v2 + 208)
          && (!*((unsigned char *)v8 + 209) || !*((unsigned char *)v8 + 208)))
        {
          uint64_t v12 = *(NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Switch ON (publishing system configuration)", (uint8_t *)buf, 2u);
          }
          memset(v28, 0, 96);
          long long v26 = 0u;
          long long v27 = 0u;
          memset(v25, 0, sizeof(v25));
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v20 = 0u;
          memset(buf, 0, sizeof(buf));
          (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)a1 + 120))(buf, a1, *((unsigned int *)v2 + 8));
          if (BYTE4(v27)) {
            DWORD2(v26) = 0;
          }
          uint64_t v13 = *(void (****)(void, uint64_t, unsigned char *))(a1 + 88);
          uint64_t v14 = *((unsigned int *)v2 + 8);
          sub_100453D1C((uint64_t)v18, (uint64_t *)buf);
          (**v13)(v13, v14, v18);
          sub_100454088((uint64_t)v18);
          sub_10039BE98((uint64_t)v28);
          sub_10039BEEC((uint64_t)&v25[8]);
          if (BYTE8(v22) && (_BYTE)v22 && SHIBYTE(v21) < 0) {
            operator delete(*((void **)&v20 + 1));
          }
        }
      }
      long long v15 = (void *)v2[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (void *)v2[2];
          BOOL v17 = *v16 == (void)v2;
          char v2 = v16;
        }
        while (!v17);
      }
      char v2 = v16;
    }
    while (v16 != v3);
  }
}

void sub_10044CBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_100454088((uint64_t)&a10);
  sub_10044D2E4((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_10044CBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Provisioning halted (publishing system configuration)", (uint8_t *)buf, 2u);
  }
  memset(v16, 0, sizeof(v16));
  long long v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  memset(buf, 0, sizeof(buf));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 120))(buf, a1, a2);
  if (BYTE4(v15)) {
    DWORD2(v14) = 2;
  }
  uint64_t v5 = *(void (****)(void, uint64_t, unsigned char *))(a1 + 88);
  sub_100453D1C((uint64_t)v6, (uint64_t *)buf);
  (**v5)(v5, a2, v6);
  sub_100454088((uint64_t)v6);
  sub_10039BE98((uint64_t)v16);
  sub_10039BEEC((uint64_t)&v13[8]);
  if (BYTE8(v10) && (_BYTE)v10 && SHIBYTE(v9) < 0) {
    operator delete(*((void **)&v8 + 1));
  }
}

void sub_10044CD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_100454088((uint64_t)&a10);
  sub_10044D2E4((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_10044CD88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = *(unsigned int **)(v1 + 256);
  char v2 = *(unsigned int **)(v1 + 264);
  if (v3 != v2)
  {
    uint64_t v4 = (uint64_t *)(v1 + 288);
    do
    {
      if (v3[2] == 5)
      {
        uint64_t v5 = *v3;
        uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 48) + 16))(*(void *)(v1 + 48), v5);
        if (sub_1005637DC((void *)(v1 + 200), v5))
        {
          long long v16 = 0;
          uint64_t v17 = 0;
          uint64_t v7 = *v4;
          if (*v4)
          {
            uint64_t v8 = v1 + 288;
            do
            {
              int v9 = *(_DWORD *)(v7 + 32);
              BOOL v10 = v9 < (int)v5;
              if (v9 >= (int)v5) {
                long long v11 = (uint64_t *)v7;
              }
              else {
                long long v11 = (uint64_t *)(v7 + 8);
              }
              if (!v10) {
                uint64_t v8 = v7;
              }
              uint64_t v7 = *v11;
            }
            while (*v11);
            if ((uint64_t *)v8 != v4 && (int)v5 >= *(_DWORD *)(v8 + 32))
            {
              sub_100454C2C(&v16, (void **)(v8 + 40));
              LOBYTE(v17) = 1;
            }
          }
          (*(void (**)(void, uint64_t))(**(void **)(v1 + 120) + 72))(*(void *)(v1 + 120), v5);
          uint64_t v12 = *(void *)(v1 + 136);
          PersonalityIdFromSlotId();
          (*(void (**)(uint64_t, void **))(*(void *)v12 + 64))(v12, &__p);
          if (v15 < 0) {
            operator delete(__p);
          }
          operator new();
        }
        uint64_t v13 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Not submitting metric because feature is not enabled", (uint8_t *)&__p, 2u);
        }
      }
      v3 += 42;
    }
    while (v3 != v2);
  }
}

void sub_10044CFF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_10044D054(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", v4, 2u);
  }
  (*(void (**)(void))(**(void **)(a1 + 104) + 8))(*(void *)(a1 + 104));
  (*(void (**)(void))(**(void **)(a1 + 120) + 8))(*(void *)(a1 + 120));
  (*(void (**)(void))(**(void **)(a1 + 136) + 8))(*(void *)(a1 + 136));
  (*(void (**)(void))(**(void **)(a1 + 152) + 8))(*(void *)(a1 + 152));
  (*(void (**)(void))(**(void **)(a1 + 168) + 8))(*(void *)(a1 + 168));
  return (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 8))(*(void *)(a1 + 184));
}

void sub_10044D1A8(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 104) + 32))(*(void *)(a1 + 104));
  (*(void (**)(void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120));
  (*(void (**)(void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136));
  (*(void (**)(void))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168));
  (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
  if ((ctu::RestModule::isConnected((ctu::RestModule *)(a1 + 72)) & 1) == 0)
  {
    Registry::createRestModuleOneTimeUseConnection(&v2, *(Registry **)(a1 + 56));
    ctu::RestModule::connect();
    if (v3) {
      sub_10004D2C8(v3);
    }
  }
}

void sub_10044D2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044D2E4(uint64_t a1)
{
  return a1;
}

void sub_10044D320(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_100563588((void *)(a1 + 200), a2, a3);
  if (*(unsigned char *)(a3 + 372))
  {
    int v6 = *(_DWORD *)(a3 + 364);
    unsigned int v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 72))(*(void *)(a1 + 120), a2);
    uint64_t v8 = *(void *)(a1 + 136);
    PersonalityIdFromSlotId();
    int v9 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v8 + 64))(v8, __p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    BOOL v10 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      long long v11 = (void *)Lazuli::asString();
      if (v7 - 1 > 2) {
        uint64_t v12 = "kUnknown";
      }
      else {
        uint64_t v12 = off_1019CDBB8[v7 - 1];
      }
      uint64_t v13 = (void *)Lazuli::asString();
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = v11;
      WORD2(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 6) = (void *)v12;
      HIWORD(__p[2]) = 2080;
      __p[3] = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Evaluating reg state with: [switch: %s, prov: %s, reg: %s]", (uint8_t *)__p, 0x20u);
    }
    int v14 = -1;
    if (v6 != -1 && v6 != 2)
    {
      if (v9 == 1)
      {
        int v14 = 1;
      }
      else if (v7 >= 3)
      {
        if (v9 == -1) {
          int v14 = 2;
        }
        else {
          int v14 = v9;
        }
      }
      else
      {
        int v14 = dword_1014A6178[v7];
      }
    }
    *(_DWORD *)(a3 + 360) = v14;
    *(_DWORD *)(a3 + 368) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 64))(*(void *)(a1 + 120), a2);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  long long v16 = ServiceMap;
  if (v17 < 0)
  {
    char v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = 5381;
    do
    {
      uint64_t v17 = v19;
      unsigned int v20 = *v18++;
      uint64_t v19 = (33 * v19) ^ v20;
    }
    while (v20);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v17;
  long long v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)__p);
  if (!v21)
  {
    uint64_t v23 = 0;
LABEL_27:
    std::mutex::unlock(v16);
    long long v22 = 0;
    char v24 = 1;
    if (!v23) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v23 = v21[3];
  long long v22 = (std::__shared_weak_count *)v21[4];
  if (!v22) {
    goto LABEL_27;
  }
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v16);
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v22);
  char v24 = 0;
  if (v23) {
LABEL_28:
  }
    *(unsigned char *)(a3 + 454) = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 80))(v23) ^ 1;
LABEL_29:
  if ((v24 & 1) == 0) {
    sub_10004D2C8(v22);
  }
  long long v25 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  long long v26 = v25;
  long long v27 = "24MobileStoreDemoInterface";
  if (((unint64_t)"24MobileStoreDemoInterface" & 0x8000000000000000) != 0)
  {
    uint64_t v28 = (unsigned __int8 *)((unint64_t)"24MobileStoreDemoInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v29 = 5381;
    do
    {
      long long v27 = (const char *)v29;
      unsigned int v30 = *v28++;
      uint64_t v29 = (33 * v29) ^ v30;
    }
    while (v30);
  }
  std::mutex::lock(v25);
  __p[0] = (void *)v27;
  uint64_t v31 = sub_10004D37C(&v26[1].__m_.__sig, (unint64_t *)__p);
  if (!v31)
  {
    uint64_t v33 = 0;
LABEL_39:
    std::mutex::unlock(v26);
    unint64_t v32 = 0;
    char v34 = 1;
    if (!v33) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  uint64_t v33 = v31[3];
  unint64_t v32 = (std::__shared_weak_count *)v31[4];
  if (!v32) {
    goto LABEL_39;
  }
  atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v26);
  atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v32);
  char v34 = 0;
  if (v33) {
LABEL_40:
  }
    *(unsigned char *)(a3 + 455) = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 16))(v33);
LABEL_41:
  if ((v34 & 1) == 0) {
    sub_10004D2C8(v32);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v35 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  uint64_t v36 = v35;
  if ((v37 & 0x8000000000000000) != 0)
  {
    uint64_t v38 = (unsigned __int8 *)(v37 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v39 = 5381;
    do
    {
      unint64_t v37 = v39;
      unsigned int v40 = *v38++;
      uint64_t v39 = (33 * v39) ^ v40;
    }
    while (v40);
  }
  std::mutex::lock(v35);
  unint64_t v54 = v37;
  uint64_t v41 = sub_10004D37C(&v36[1].__m_.__sig, &v54);
  if (v41)
  {
    CFIndex v43 = (void *)v41[3];
    uint64_t v42 = (std::__shared_weak_count *)v41[4];
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    CFIndex v43 = 0;
    uint64_t v42 = 0;
  }
  std::mutex::unlock(v36);
  __p[0] = v43;
  __p[1] = v42;
  if (v42)
  {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v42);
    CFIndex v43 = __p[0];
  }
  if (v43)
  {
    *(void *)(a3 + 456) = sub_100563070((uint64_t)__p);
    *(unsigned char *)(a3 + 464) = v44;
    *(unsigned char *)(a3 + 472) = sub_100563154((uint64_t)__p);
  }
  if (__p[1]) {
    sub_10004D2C8((std::__shared_weak_count *)__p[1]);
  }
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  memset(v60, 0, sizeof(v60));
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  *(_OWORD *)uint64_t v57 = 0u;
  memset(__p, 0, sizeof(__p));
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 120) + 96))(__p);
  if (BYTE8(v59))
  {
    int v45 = *(unsigned __int8 *)(a3 + 88);
    long long v46 = v56;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)&__p[2];
    *(_OWORD *)(a3 + 32) = v46;
    *(unsigned char *)(a3 + 48) = v57[0];
    CFArrayRef v47 = (std::string *)(a3 + 56);
    if (v45)
    {
      sub_100179AF8(v47, (const std::string *)&v57[1]);
    }
    else
    {
      sub_1000593FC((uint64_t)v47, (long long *)&v57[1]);
      *(unsigned char *)(a3 + 88) = 1;
    }
  }
  if (v60[1].__r_.__value_.__s.__data_[8])
  {
    long long v48 = (_OWORD *)(a3 + 96);
    if (*(unsigned char *)(a3 + 128))
    {
      *long long v48 = *(_OWORD *)&v60[0].__r_.__value_.__l.__data_;
      *(_OWORD *)(a3 + 105) = *(_OWORD *)((char *)&v60[0].__r_.__value_.__r.__words[1] + 1);
    }
    else
    {
      long long v49 = *(_OWORD *)&v60[0].__r_.__value_.__r.__words[2];
      *long long v48 = *(_OWORD *)&v60[0].__r_.__value_.__l.__data_;
      *(_OWORD *)(a3 + 112) = v49;
      *(unsigned char *)(a3 + 128) = 1;
    }
  }
  if (v60[10].__r_.__value_.__s.__data_[16])
  {
    uint64_t v50 = (std::string *)(a3 + 136);
    if (*(unsigned char *)(a3 + 352))
    {
      sub_100179AF8(v50, (const std::string *)&v60[1].__r_.__value_.__r.__words[2]);
      sub_100179AF8((std::string *)(a3 + 168), &v60[3]);
      sub_100179AF8((std::string *)(a3 + 200), (const std::string *)&v60[4].__r_.__value_.__r.__words[1]);
      sub_100179AF8((std::string *)(a3 + 232), (const std::string *)&v60[5].__r_.__value_.__r.__words[2]);
      sub_100179AF8((std::string *)(a3 + 264), &v60[7]);
      *(unsigned char *)(a3 + 344) = v60[10].__r_.__value_.__s.__data_[8];
      long long v51 = *(_OWORD *)&v60[9].__r_.__value_.__l.__data_;
      *(_OWORD *)(a3 + 296) = *(_OWORD *)&v60[8].__r_.__value_.__r.__words[1];
      *(_OWORD *)(a3 + 312) = v51;
      *(_OWORD *)(a3 + 328) = *(_OWORD *)&v60[9].__r_.__value_.__r.__words[2];
    }
    else
    {
      sub_100453EB8((uint64_t)v50, (uint64_t)&v60[1].__r_.__value_.__r.__words[2]);
      *(unsigned char *)(a3 + 352) = 1;
    }
  }
  if (BYTE8(v62))
  {
    uint64_t v52 = (std::string *)(a3 + 384);
    if (*(unsigned char *)(a3 + 432))
    {
      std::string::operator=((std::string *)(a3 + 384), &v60[11]);
      if (v52 != &v60[11]) {
        sub_10005CA3C(a3 + 408, (std::string *)v61, *((long long **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3));
      }
    }
    else
    {
      if (SHIBYTE(v60[11].__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84((unsigned char *)(a3 + 384), v60[11].__r_.__value_.__l.__data_, v60[11].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)&v60[11].__r_.__value_.__l.__data_;
        *(void *)(a3 + 400) = *((void *)&v60[11].__r_.__value_.__l + 2);
      }
      *(void *)(a3 + 408) = 0;
      *(void *)(a3 + 416) = 0;
      *(void *)(a3 + 424) = 0;
      sub_1000302C0((char *)(a3 + 408), (long long *)v61, *((long long **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3));
      *(unsigned char *)(a3 + 432) = 1;
    }
  }
  if (LOBYTE(__p[1]))
  {
    if (*(unsigned char *)(a3 + 8))
    {
      *(_DWORD *)a3 = __p[0];
      *(unsigned char *)(a3 + 4) = BYTE4(__p[0]);
    }
    else
    {
      *(void **)a3 = __p[0];
      *(unsigned char *)(a3 + 8) = 1;
    }
  }
  if (BYTE4(v63))
  {
    int v53 = v63;
    if (!*(unsigned char *)(a3 + 380)) {
      *(unsigned char *)(a3 + 380) = 1;
    }
    *(_DWORD *)(a3 + 376) = v53;
  }
  sub_10039BE98((uint64_t)&v60[11]);
  sub_10039BEEC((uint64_t)&v60[1].__r_.__value_.__r.__words[2]);
  if (BYTE8(v59) && (_BYTE)v59 && SHIBYTE(v58) < 0) {
    operator delete(v57[1]);
  }
}

void sub_10044DAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 407) < 0) {
    operator delete(*v17);
  }
  sub_10044DB94((uint64_t)&__p);
  sub_10044D2E4(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_10044DB94(uint64_t a1)
{
  return a1;
}

BOOL sub_10044DBD0(uint64_t a1)
{
  long long v16 = 0u;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 96))(v9);
  int v1 = BYTE8(v16);
  int v2 = BYTE9(v16);
  int v3 = BYTE12(v16);
  int v4 = BYTE13(v16);
  sub_10039BE98((uint64_t)&v15[14] + 8);
  sub_10039BEEC((uint64_t)v15 + 8);
  if (BYTE8(v12) && (_BYTE)v12 && SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  if (v4) {
    BOOL v5 = v1 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  return !v5 && v3 == 0 && v2 != 0;
}

void sub_10044DCC0(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a1 + 8;
  int v9 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v11 = *((void *)a3 + 2);
  }
  uint64_t v12 = a1;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 0x40000000;
  void v13[2] = sub_100455DCC;
  _OWORD v13[3] = &unk_1019CD3E0;
  void v13[4] = v6;
  void v13[5] = &v9;
  long long v14 = v13;
  uint64_t v8 = a1 + 24;
  unsigned int v7 = *(NSObject **)(a1 + 24);
  if (*(void *)(v8 + 8))
  {
    bzero(a4, 0x300uLL);
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v16 = 0x40000000;
    uint64_t v17 = sub_100458C4C;
    char v18 = &unk_1019CD4F8;
    uint64_t v19 = a4;
    unsigned int v20 = &v14;
    dispatch_async_and_wait(v7, &block);
  }
  else
  {
    bzero(a4, 0x300uLL);
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v16 = 0x40000000;
    uint64_t v17 = sub_100456578;
    char v18 = &unk_1019CD448;
    uint64_t v19 = a4;
    unsigned int v20 = &v14;
    dispatch_sync(v7, &block);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10044DE58(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  int v5 = a2;
  uint64_t v6 = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_100458CD8;
  void v7[3] = &unk_1019CD518;
  void v7[4] = a1 + 8;
  void v7[5] = &v5;
  uint64_t v8 = v7;
  uint64_t v4 = a1 + 24;
  int v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0u;
    a3[1] = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_100458EF8;
    uint64_t v12 = &unk_1019CD558;
    long long v13 = a3;
    long long v14 = &v8;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_100458E94;
    uint64_t v12 = &unk_1019CD538;
    long long v13 = a3;
    long long v14 = &v8;
    dispatch_sync(v3, &block);
  }
}

uint64_t sub_10044DF80(uint64_t a1, int a2, long long **a3)
{
  uint64_t v4 = a1 + 8;
  int v8 = a2;
  uint64_t v9 = a1;
  memset(v10, 0, sizeof(v10));
  sub_1004540CC((char *)v10, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  uint64_t v11[2] = sub_100458F5C;
  void v11[3] = &unk_1019CD578;
  _OWORD v11[4] = v4;
  void v11[5] = &v8;
  uint64_t v12 = v11;
  int v5 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v14 = 0x40000000;
    char v15 = sub_100459154;
    uint64_t v16 = &unk_1019CD5B8;
    uint64_t v17 = &v19;
    char v18 = &v12;
    uint64_t v19 = 0;
    dispatch_async_and_wait(v5, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v14 = 0x40000000;
    char v15 = sub_100459110;
    uint64_t v16 = &unk_1019CD598;
    uint64_t v17 = &v19;
    char v18 = &v12;
    uint64_t v19 = 0;
    dispatch_sync(v5, &block);
  }
  uint64_t v6 = v19;
  blocuint64_t k = (void **)v10;
  sub_100047F64(&block);
  return v6;
}

uint64_t sub_10044E0FC(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  int v11 = a2;
  uint64_t v12 = a1;
  sub_1001789C8((char *)&v13, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  long long v22 = *a5;
  char v23 = *((unsigned char *)a5 + 16);
  sub_1000593FC((uint64_t)&v24, (long long *)((char *)a5 + 24));
  sub_1000593FC((uint64_t)&__p, (long long *)((char *)a5 + 56));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 0x40000000;
  v30[2] = sub_100459198;
  v30[3] = &unk_1019CD5D8;
  v30[4] = a1 + 8;
  v30[5] = &v11;
  uint64_t v31 = v30;
  int v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v33 = 0x40000000;
    char v34 = sub_100459154;
    uint64_t v35 = &unk_1019CD5B8;
    uint64_t v36 = &v38;
    unint64_t v37 = &v31;
    uint64_t v38 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v33 = 0x40000000;
    char v34 = sub_100459110;
    uint64_t v35 = &unk_1019CD598;
    uint64_t v36 = &v38;
    unint64_t v37 = &v31;
    uint64_t v38 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v38;
  if (v29 && v28 < 0) {
    operator delete(__p);
  }
  if (v26 && v25 < 0) {
    operator delete(v24);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17[24])
  {
    blocuint64_t k = (void **)v17;
    sub_100047F64(&block);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v9;
}

void sub_10044E348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  sub_10016FEBC(v40);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E394(uint64_t a1, int a2, long long *a3, long long *a4, int *a5)
{
  int v11 = a2;
  sub_1001789C8((char *)&v12, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v19, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v19 = *a4;
    uint64_t v20 = *((void *)a4 + 2);
  }
  int v21 = *a5;
  if (*((char *)a5 + 31) < 0)
  {
    sub_10004FC84(&__p, *((void **)a5 + 1), *((void *)a5 + 2));
  }
  else
  {
    long long __p = *(_OWORD *)(a5 + 2);
    uint64_t v23 = *((void *)a5 + 3);
  }
  uint64_t v24 = a1;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 0x40000000;
  v25[2] = sub_100459700;
  v25[3] = &unk_1019CD5F8;
  v25[4] = a1 + 8;
  v25[5] = &v11;
  char v26 = v25;
  int v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v28 = 0x40000000;
    char v29 = sub_100459154;
    unsigned int v30 = &unk_1019CD5B8;
    uint64_t v31 = &v33;
    unint64_t v32 = &v26;
    uint64_t v33 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v28 = 0x40000000;
    char v29 = sub_100459110;
    unsigned int v30 = &unk_1019CD598;
    uint64_t v31 = &v33;
    unint64_t v32 = &v26;
    uint64_t v33 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v33;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16[24])
  {
    blocuint64_t k = (void **)v16;
    sub_100047F64(&block);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  return v9;
}

void sub_10044E5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_10016FEBC(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E5F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = a2;
  v8[0] = a1;
  v8[1] = &v9;
  _OWORD v8[2] = a3;
  void v8[3] = a4;
  void v8[4] = a5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = sub_100459904;
  void v10[3] = &unk_1019CD618;
  void v10[4] = a1 + 8;
  v10[5] = v8;
  int v11 = v10;
  uint64_t v6 = a1 + 24;
  int v5 = *(NSObject **)(a1 + 24);
  if (*(void *)(v6 + 8))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v13 = 0x40000000;
    char v14 = sub_100459154;
    char v15 = &unk_1019CD5B8;
    char v16 = &v18;
    uint64_t v17 = &v11;
    uint64_t v18 = 0;
    dispatch_async_and_wait(v5, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v13 = 0x40000000;
    char v14 = sub_100459110;
    char v15 = &unk_1019CD598;
    char v16 = &v18;
    uint64_t v17 = &v11;
    uint64_t v18 = 0;
    dispatch_sync(v5, &block);
  }
  return v18;
}

uint64_t sub_10044E734(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  sub_1001789C8((char *)&v13, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  long long v22 = *a5;
  sub_1000593FC((uint64_t)&__p, a5 + 1);
  sub_1001FD3D8((uint64_t)v26, (uint64_t)(a5 + 3));
  sub_100454248((uint64_t)v27, (uint64_t)(a5 + 5));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 0x40000000;
  _OWORD v28[2] = sub_100459B1C;
  v28[3] = &unk_1019CD638;
  v28[4] = a1 + 8;
  v28[5] = &v11;
  char v29 = v28;
  int v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459154;
    uint64_t v33 = &unk_1019CD5B8;
    char v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459110;
    uint64_t v33 = &unk_1019CD598;
    char v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v36;
  if (v27[24])
  {
    blocuint64_t k = (void **)v27;
    sub_100155410(&block);
  }
  if (v26[24])
  {
    blocuint64_t k = (void **)v26;
    sub_100155494(&block);
  }
  if (v25 && v24 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17[24])
  {
    blocuint64_t k = (void **)v17;
    sub_100047F64(&block);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v9;
}

void sub_10044E9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_10016FEBC(v44);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EA0C(uint64_t a1, int a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  sub_1001789C8((char *)&v13, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  sub_10044EC40(v22, a5);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000;
  void v23[2] = sub_100459D38;
  void v23[3] = &unk_1019CD658;
  v23[4] = a1 + 8;
  v23[5] = &v11;
  char v24 = v23;
  int v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    long long v27 = sub_100459154;
    uint64_t v28 = &unk_1019CD5B8;
    char v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    long long v27 = sub_100459110;
    uint64_t v28 = &unk_1019CD598;
    char v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v31;
  sub_100454840((uint64_t)v22);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17[24])
  {
    blocuint64_t k = (void **)v17;
    sub_100047F64(&block);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v9;
}

void sub_10044EC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_10016FEBC(v30);
  _Unwind_Resume(a1);
}

unsigned char *sub_10044EC40(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = sub_10045449C(a1, a2);
  sub_1001FD3D8((uint64_t)(v4 + 248), a2 + 248);
  sub_100454248((uint64_t)(a1 + 280), a2 + 280);
  return a1;
}

void sub_10044EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 272)) {
    sub_100155494(&a10);
  }
  if (*(unsigned char *)(v10 + 240))
  {
    a10 = (void **)(v10 + 216);
    sub_100155410(&a10);
  }
  if (*(char *)(v10 + 191) < 0) {
    operator delete(*(void **)(v10 + 168));
  }
  if (*(char *)(v10 + 167) < 0) {
    operator delete(*(void **)(v10 + 144));
  }
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*(void **)(v10 + 120));
  }
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*(void **)(v10 + 96));
  }
  sub_10045468C(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10044ED20(uint64_t a1, int a2, long long *a3, long long *a4)
{
  int v9 = a2;
  sub_1001789C8((char *)&v10, a3);
  uint64_t v17 = a1;
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v19 = *((void *)a4 + 2);
  }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 0x40000000;
  long long v20[2] = sub_100459F30;
  uint64_t v20[3] = &unk_1019CD678;
  v20[4] = a1 + 8;
  v20[5] = &v9;
  uint64_t v21 = v20;
  uint64_t v6 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    char v24 = sub_100459154;
    char v25 = &unk_1019CD5B8;
    uint64_t v26 = &v28;
    long long v27 = &v21;
    uint64_t v28 = 0;
    dispatch_async_and_wait(v6, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    char v24 = sub_100459110;
    char v25 = &unk_1019CD598;
    uint64_t v26 = &v28;
    long long v27 = &v21;
    uint64_t v28 = 0;
    dispatch_sync(v6, &block);
  }
  uint64_t v7 = v28;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14[24])
  {
    blocuint64_t k = (void **)v14;
    sub_100047F64(&block);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  return v7;
}

void sub_10044EF0C(_Unwind_Exception *a1)
{
  sub_10016FEBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EF20(uint64_t a1, int a2, long long *a3, int *a4, long long *a5)
{
  int v11 = a2;
  sub_1001789C8((char *)&v12, a3);
  int v19 = *a4;
  uint64_t v20 = a1;
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long __p = *a5;
    uint64_t v22 = *((void *)a5 + 2);
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000;
  void v23[2] = sub_10045A0FC;
  void v23[3] = &unk_1019CD698;
  v23[4] = a1 + 8;
  v23[5] = &v11;
  char v24 = v23;
  int v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    long long v27 = sub_100459154;
    uint64_t v28 = &unk_1019CD5B8;
    char v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    long long v27 = sub_100459110;
    uint64_t v28 = &unk_1019CD598;
    char v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v31;
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16[24])
  {
    blocuint64_t k = (void **)v16;
    sub_100047F64(&block);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  return v9;
}

void sub_10044F118(_Unwind_Exception *a1)
{
  sub_10016FEBC(v1);
  _Unwind_Resume(a1);
}

void sub_10044F12C(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a1 + 8;
  int v8 = a2;
  sub_1001789C8((char *)&v9, a3);
  uint64_t v16 = a1;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 0x40000000;
  void v17[2] = sub_10045A2E0;
  _OWORD v17[3] = &unk_1019CD6B8;
  v17[4] = v6;
  v17[5] = &v8;
  char v18 = v17;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    *(void *)(a4 + 208) = 0;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v20 = 0x40000000;
    uint64_t v21 = sub_10045A734;
    uint64_t v22 = &unk_1019CD6F8;
    uint64_t v23 = a4;
    char v24 = &v18;
    dispatch_async_and_wait(v7, &block);
  }
  else
  {
    *(void *)(a4 + 208) = 0;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v20 = 0x40000000;
    uint64_t v21 = sub_10045A4CC;
    uint64_t v22 = &unk_1019CD6D8;
    uint64_t v23 = a4;
    char v24 = &v18;
    dispatch_sync(v7, &block);
  }
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13[24])
  {
    blocuint64_t k = (void **)v13;
    sub_100047F64(&block);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
}

uint64_t sub_10044F304(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  sub_1001789C8((char *)&v13, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&v22, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v22 = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  if (*((char *)a5 + 47) < 0)
  {
    sub_10004FC84(&v24, *((void **)a5 + 3), *((void *)a5 + 4));
  }
  else
  {
    long long v24 = *(long long *)((char *)a5 + 24);
    uint64_t v25 = *((void *)a5 + 5);
  }
  if (*((char *)a5 + 71) < 0)
  {
    sub_10004FC84(&__p, *((void **)a5 + 6), *((void *)a5 + 7));
  }
  else
  {
    long long __p = a5[3];
    uint64_t v27 = *((void *)a5 + 8);
  }
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 0x40000000;
  _OWORD v28[2] = sub_10045A788;
  v28[3] = &unk_1019CD718;
  v28[4] = a1 + 8;
  v28[5] = &v11;
  char v29 = v28;
  int v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459154;
    uint64_t v33 = &unk_1019CD5B8;
    char v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459110;
    uint64_t v33 = &unk_1019CD598;
    char v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v36;
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17[24])
  {
    blocuint64_t k = (void **)v17;
    sub_100047F64(&block);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v9;
}

void sub_10044F5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_10016FEBC(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_10044F60C(uint64_t a1, int a2, long long *a3, long long *a4)
{
  int v9 = a2;
  sub_1001789C8((char *)&v10, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v18 = *((void *)a4 + 2);
  }
  uint64_t v19 = a1;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 0x40000000;
  long long v20[2] = sub_10045A958;
  uint64_t v20[3] = &unk_1019CD738;
  v20[4] = a1 + 8;
  v20[5] = &v9;
  uint64_t v21 = v20;
  uint64_t v6 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    long long v24 = sub_100459154;
    uint64_t v25 = &unk_1019CD5B8;
    uint64_t v26 = &v28;
    uint64_t v27 = &v21;
    uint64_t v28 = 0;
    dispatch_async_and_wait(v6, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    long long v24 = sub_100459110;
    uint64_t v25 = &unk_1019CD598;
    uint64_t v26 = &v28;
    uint64_t v27 = &v21;
    uint64_t v28 = 0;
    dispatch_sync(v6, &block);
  }
  uint64_t v7 = v28;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14[24])
  {
    blocuint64_t k = (void **)v14;
    sub_100047F64(&block);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  return v7;
}

void sub_10044F7F4(_Unwind_Exception *a1)
{
  sub_10016FEBC(v1);
  _Unwind_Resume(a1);
}

void sub_10044F808(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v6 = a1 + 8;
  int v9 = a2;
  sub_1001789C8((char *)&v10, a3);
  uint64_t v17 = a1;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 0x40000000;
  void v18[2] = sub_10045AB24;
  v18[3] = &unk_1019CD758;
  v18[4] = v6;
  void v18[5] = &v9;
  uint64_t v19 = v18;
  uint64_t v8 = a1 + 24;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  if (*(void *)(v8 + 8))
  {
    bzero(a4, 0x2C0uLL);
    a4[174] = -1;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v21 = 0x40000000;
    long long v22 = sub_10045B9BC;
    uint64_t v23 = &unk_1019CD798;
    long long v24 = a4;
    uint64_t v25 = &v19;
    dispatch_async_and_wait(v7, &block);
  }
  else
  {
    bzero(a4, 0x2C0uLL);
    a4[174] = -1;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v21 = 0x40000000;
    long long v22 = sub_10045AD10;
    uint64_t v23 = &unk_1019CD778;
    long long v24 = a4;
    uint64_t v25 = &v19;
    dispatch_sync(v7, &block);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
  if (v14[24])
  {
    blocuint64_t k = (void **)v14;
    sub_100047F64(&block);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
}

uint64_t sub_10044F9C8(uint64_t a1, int a2, uint64_t a3, long long *a4)
{
  int v9 = a2;
  sub_1004548F8((uint64_t)&v10, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v24 = *((void *)a4 + 2);
  }
  uint64_t v25 = a1;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 0x40000000;
  int v26[2] = sub_10045BA1C;
  v26[3] = &unk_1019CD7B8;
  v26[4] = a1 + 8;
  void v26[5] = &v9;
  uint64_t v27 = v26;
  uint64_t v6 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v29 = 0x40000000;
    uint64_t v30 = sub_100459154;
    uint64_t v31 = &unk_1019CD5B8;
    unint64_t v32 = &v34;
    uint64_t v33 = &v27;
    uint64_t v34 = 0;
    dispatch_async_and_wait(v6, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v29 = 0x40000000;
    uint64_t v30 = sub_100459110;
    uint64_t v31 = &unk_1019CD598;
    unint64_t v32 = &v34;
    uint64_t v33 = &v27;
    uint64_t v34 = 0;
    dispatch_sync(v6, &block);
  }
  uint64_t v7 = v34;
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
  if (v22 && v21 < 0) {
    operator delete(v20);
  }
  if (v19 && v18 < 0) {
    operator delete(v17);
  }
  blocuint64_t k = (void **)&v16;
  sub_100047F64(&block);
  if (v15 && v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  return v7;
}

void sub_10044FBD4(_Unwind_Exception *a1)
{
  sub_10044FBE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10044FBE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152) && *(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  int v3 = (void **)(a1 + 64);
  sub_100047F64(&v3);
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10044FC7C(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  sub_1001789C8((char *)&v13, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&v22, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v22 = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  if (*((char *)a5 + 47) < 0)
  {
    sub_10004FC84(&v24, *((void **)a5 + 3), *((void *)a5 + 4));
  }
  else
  {
    long long v24 = *(long long *)((char *)a5 + 24);
    uint64_t v25 = *((void *)a5 + 5);
  }
  if (*((char *)a5 + 71) < 0)
  {
    sub_10004FC84(&__p, *((void **)a5 + 6), *((void *)a5 + 7));
  }
  else
  {
    long long __p = a5[3];
    uint64_t v27 = *((void *)a5 + 8);
  }
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 0x40000000;
  _OWORD v28[2] = sub_10045BF28;
  v28[3] = &unk_1019CD7D8;
  v28[4] = a1 + 8;
  v28[5] = &v11;
  uint64_t v29 = v28;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459154;
    uint64_t v33 = &unk_1019CD5B8;
    uint64_t v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459110;
    uint64_t v33 = &unk_1019CD598;
    uint64_t v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v36;
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17[24])
  {
    blocuint64_t k = (void **)v17;
    sub_100047F64(&block);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v9;
}

void sub_10044FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_10016FEBC(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_10044FF84(uint64_t a1, int a2, long long *a3, long long *a4, int *a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  sub_1001789C8((char *)&v13, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  int v22 = *a5;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000;
  void v23[2] = sub_10045C0F8;
  void v23[3] = &unk_1019CD7F8;
  v23[4] = a1 + 8;
  v23[5] = &v11;
  long long v24 = v23;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459154;
    uint64_t v28 = &unk_1019CD5B8;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459110;
    uint64_t v28 = &unk_1019CD598;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v31;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17[24])
  {
    blocuint64_t k = (void **)v17;
    sub_100047F64(&block);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v9;
}

void sub_10045017C(_Unwind_Exception *a1)
{
  sub_10016FEBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100450190(uint64_t a1, int a2, long long *a3, long long *a4, int *a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  sub_1001789C8((char *)&v13, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  int v22 = *a5;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000;
  void v23[2] = sub_10045C2C8;
  void v23[3] = &unk_1019CD818;
  v23[4] = a1 + 8;
  v23[5] = &v11;
  long long v24 = v23;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459154;
    uint64_t v28 = &unk_1019CD5B8;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459110;
    uint64_t v28 = &unk_1019CD598;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v31;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17[24])
  {
    blocuint64_t k = (void **)v17;
    sub_100047F64(&block);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v9;
}

void sub_100450388(_Unwind_Exception *a1)
{
  sub_10016FEBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10045039C(uint64_t a1, int a2, uint64_t a3, long long *a4)
{
  uint64_t v10 = a1;
  int v11 = a2;
  sub_1001789C8((char *)&v12, (long long *)a3);
  if (*(char *)(a3 + 135) < 0)
  {
    sub_10004FC84(&v19, *(void **)(a3 + 112), *(void *)(a3 + 120));
  }
  else
  {
    long long v19 = *(_OWORD *)(a3 + 112);
    uint64_t v20 = *(void *)(a3 + 128);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v22 = *((void *)a4 + 2);
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000;
  void v23[2] = sub_10045C498;
  void v23[3] = &unk_1019CD838;
  v23[4] = a1 + 8;
  v23[5] = &v10;
  long long v24 = v23;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459154;
    uint64_t v28 = &unk_1019CD5B8;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_async_and_wait(v7, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459110;
    uint64_t v28 = &unk_1019CD598;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_sync(v7, &block);
  }
  uint64_t v8 = v31;
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16[24])
  {
    blocuint64_t k = (void **)v16;
    sub_100047F64(&block);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  return v8;
}

void sub_1004505CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_100450634(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_100450634(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80))
  {
    int v3 = (void **)(a1 + 56);
    sub_100047F64(&v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1004506B8(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  long long v22 = *a5;
  char v23 = *((unsigned char *)a5 + 16);
  sub_1000593FC((uint64_t)&v24, (long long *)((char *)a5 + 24));
  sub_1000593FC((uint64_t)&__p, (long long *)((char *)a5 + 56));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 0x40000000;
  v30[2] = sub_10045C67C;
  v30[3] = &unk_1019CD858;
  v30[4] = a1 + 8;
  v30[5] = &v12;
  uint64_t v31 = v30;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v33 = 0x40000000;
    uint64_t v34 = sub_100459154;
    uint64_t v35 = &unk_1019CD5B8;
    uint64_t v36 = &v38;
    unint64_t v37 = &v31;
    uint64_t v38 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v33 = 0x40000000;
    uint64_t v34 = sub_100459110;
    uint64_t v35 = &unk_1019CD598;
    uint64_t v36 = &v38;
    unint64_t v37 = &v31;
    uint64_t v38 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v38;
  if (v29 && v28 < 0) {
    operator delete(__p);
  }
  if (v26 && v25 < 0) {
    operator delete(v24);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_10045096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  sub_1001F78F8(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_1004509E8(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long __p = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  sub_1001FD3D8((uint64_t)v24, (uint64_t)a5 + 24);
  sub_100454248((uint64_t)v25, (uint64_t)a5 + 56);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 0x40000000;
  int v26[2] = sub_10045C890;
  v26[3] = &unk_1019CD878;
  v26[4] = a1 + 8;
  void v26[5] = &v12;
  uint64_t v27 = v26;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v29 = 0x40000000;
    uint64_t v30 = sub_100459154;
    uint64_t v31 = &unk_1019CD5B8;
    unint64_t v32 = &v34;
    uint64_t v33 = &v27;
    uint64_t v34 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v29 = 0x40000000;
    uint64_t v30 = sub_100459110;
    uint64_t v31 = &unk_1019CD598;
    unint64_t v32 = &v34;
    uint64_t v33 = &v27;
    uint64_t v34 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v34;
  if (v25[24])
  {
    blocuint64_t k = (void **)v25;
    sub_100155410(&block);
  }
  if (v24[24])
  {
    blocuint64_t k = (void **)v24;
    sub_100155494(&block);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_100450CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_1001F78F8(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_100450D58(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  long long v22 = *a5;
  sub_1000593FC((uint64_t)&__p, a5 + 1);
  sub_1001FD3D8((uint64_t)v26, (uint64_t)(a5 + 3));
  sub_100454248((uint64_t)v27, (uint64_t)(a5 + 5));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 0x40000000;
  _OWORD v28[2] = sub_10045CA88;
  v28[3] = &unk_1019CD898;
  v28[4] = a1 + 8;
  v28[5] = &v12;
  uint64_t v29 = v28;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459154;
    uint64_t v33 = &unk_1019CD5B8;
    uint64_t v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v31 = 0x40000000;
    unint64_t v32 = sub_100459110;
    uint64_t v33 = &unk_1019CD598;
    uint64_t v34 = &v36;
    uint64_t v35 = &v29;
    uint64_t v36 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v36;
  if (v27[24])
  {
    blocuint64_t k = (void **)v27;
    sub_100155410(&block);
  }
  if (v26[24])
  {
    blocuint64_t k = (void **)v26;
    sub_100155494(&block);
  }
  if (v25 && v24 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_100451030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_1001F78F8(v44);
  _Unwind_Resume(a1);
}

uint64_t sub_1004510C8(uint64_t a1, int a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  sub_10044EC40(v22, a5);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000;
  void v23[2] = sub_10045CCA4;
  void v23[3] = &unk_1019CD8B8;
  v23[4] = a1 + 8;
  v23[5] = &v12;
  char v24 = v23;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459154;
    char v28 = &unk_1019CD5B8;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v26 = 0x40000000;
    uint64_t v27 = sub_100459110;
    char v28 = &unk_1019CD598;
    uint64_t v29 = &v31;
    uint64_t v30 = &v24;
    uint64_t v31 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v31;
  sub_100454840((uint64_t)v22);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_100451338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_1001F78F8(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_100451394(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5, int *a6)
{
  uint64_t v14 = a1;
  int v15 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v16, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v18 = *(long long *)((char *)a3 + 24);
    uint64_t v19 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v20, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v20 = a3[3];
    uint64_t v21 = *((void *)a3 + 8);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&v22, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v22 = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  sub_1001789C8((char *)&v24, a4);
  int v31 = *a6;
  if (*((char *)a6 + 31) < 0)
  {
    sub_10004FC84(&__p, *((void **)a6 + 1), *((void *)a6 + 2));
  }
  else
  {
    long long __p = *(_OWORD *)(a6 + 2);
    uint64_t v33 = *((void *)a6 + 3);
  }
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 0x40000000;
  _OWORD v34[2] = sub_10045CE9C;
  v34[3] = &unk_1019CD8D8;
  v34[4] = a1 + 8;
  v34[5] = &v14;
  uint64_t v35 = v34;
  int v11 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v37 = 0x40000000;
    uint64_t v38 = sub_100459154;
    uint64_t v39 = &unk_1019CD5B8;
    uint64_t v40 = &v42;
    uint64_t v41 = &v35;
    uint64_t v42 = 0;
    dispatch_async_and_wait(v11, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v37 = 0x40000000;
    uint64_t v38 = sub_100459110;
    uint64_t v39 = &unk_1019CD598;
    uint64_t v40 = &v42;
    uint64_t v41 = &v35;
    uint64_t v42 = 0;
    dispatch_sync(v11, &block);
  }
  uint64_t v12 = v42;
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28[24])
  {
    blocuint64_t k = (void **)v28;
    sub_100047F64(&block);
  }
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  return v12;
}

void sub_10045169C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_10016FEBC(v32);
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_1001F78F8(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_100451708(uint64_t a1, int a2, uint64_t a3, long long *a4)
{
  uint64_t v9 = a1;
  int v10 = a2;
  sub_1002B2188((uint64_t)v11, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v13 = *((void *)a4 + 2);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000;
  v14[2] = sub_10045D0A0;
  _OWORD v14[3] = &unk_1019CD8F8;
  void v14[4] = a1 + 8;
  v14[5] = &v9;
  int v15 = v14;
  uint64_t v6 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v17 = 0x40000000;
    long long v18 = sub_100459154;
    uint64_t v19 = &unk_1019CD5B8;
    long long v20 = &v22;
    uint64_t v21 = &v15;
    uint64_t v22 = 0;
    dispatch_async_and_wait(v6, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v17 = 0x40000000;
    long long v18 = sub_100459110;
    uint64_t v19 = &unk_1019CD598;
    long long v20 = &v22;
    uint64_t v21 = &v15;
    uint64_t v22 = 0;
    dispatch_sync(v6, &block);
  }
  uint64_t v7 = v22;
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  sub_1002B26E8((uint64_t)v11);
  return v7;
}

void sub_1004518B0(_Unwind_Exception *a1)
{
  sub_1002B26E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004518C4(uint64_t a1, int a2, long long *a3, long long **a4, long long *a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  memset(v20, 0, sizeof(v20));
  sub_1000302C0((char *)v20, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  memset(v21, 0, sizeof(v21));
  sub_1002B2788(v21, a4[3], a4[4], ((char *)a4[4] - (char *)a4[3]) >> 5);
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long __p = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 0x40000000;
  void v24[2] = sub_10045D234;
  void v24[3] = &unk_1019CD918;
  v24[4] = a1 + 8;
  v24[5] = &v12;
  char v25 = v24;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v27 = 0x40000000;
    char v28 = sub_100459154;
    uint64_t v29 = &unk_1019CD5B8;
    char v30 = &v32;
    uint64_t v31 = &v25;
    uint64_t v32 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v27 = 0x40000000;
    char v28 = sub_100459110;
    uint64_t v29 = &unk_1019CD598;
    char v30 = &v32;
    uint64_t v31 = &v25;
    uint64_t v32 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v32;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  blocuint64_t k = (void **)v21;
  sub_1000D82FC(&block);
  blocuint64_t k = (void **)v20;
  sub_100047F64(&block);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_100451B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1002B0A2C(v22);
  sub_1001F78F8(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100451BF4(uint64_t a1, int a2, long long *a3, long long **a4, long long *a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  memset(v20, 0, sizeof(v20));
  sub_1000302C0((char *)v20, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  memset(v21, 0, sizeof(v21));
  sub_1002B2788(v21, a4[3], a4[4], ((char *)a4[4] - (char *)a4[3]) >> 5);
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long __p = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 0x40000000;
  void v24[2] = sub_10045D41C;
  void v24[3] = &unk_1019CD938;
  v24[4] = a1 + 8;
  v24[5] = &v12;
  char v25 = v24;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v27 = 0x40000000;
    char v28 = sub_100459154;
    uint64_t v29 = &unk_1019CD5B8;
    char v30 = &v32;
    uint64_t v31 = &v25;
    uint64_t v32 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v27 = 0x40000000;
    char v28 = sub_100459110;
    uint64_t v29 = &unk_1019CD598;
    char v30 = &v32;
    uint64_t v31 = &v25;
    uint64_t v32 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v32;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  blocuint64_t k = (void **)v21;
  sub_1000D82FC(&block);
  blocuint64_t k = (void **)v20;
  sub_100047F64(&block);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_100451EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1002B0A2C(v22);
  sub_1001F78F8(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100451F24(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long __p = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 0x40000000;
  void v24[2] = sub_10045D604;
  void v24[3] = &unk_1019CD958;
  v24[4] = a1 + 8;
  v24[5] = &v12;
  char v25 = v24;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v27 = 0x40000000;
    char v28 = sub_100459154;
    uint64_t v29 = &unk_1019CD5B8;
    char v30 = &v32;
    uint64_t v31 = &v25;
    uint64_t v32 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v27 = 0x40000000;
    char v28 = sub_100459110;
    uint64_t v29 = &unk_1019CD598;
    char v30 = &v32;
    uint64_t v31 = &v25;
    uint64_t v32 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v32;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_1004521B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_1001F78F8(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_100452214(uint64_t a1, int a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t v12 = a1;
  int v13 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    uint64_t v17 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v18 = a3[3];
    uint64_t v19 = *((void *)a3 + 8);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v20, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_10005C928(&v22, *((const void **)a4 + 3), *((void *)a4 + 4), *((void *)a4 + 4) - *((void *)a4 + 3));
  if (*((char *)a4 + 71) < 0)
  {
    sub_10004FC84(&v25, *((void **)a4 + 6), *((void *)a4 + 7));
  }
  else
  {
    long long v25 = a4[3];
    uint64_t v26 = *((void *)a4 + 8);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long __p = *a5;
    uint64_t v28 = *((void *)a5 + 2);
  }
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 0x40000000;
  void v29[2] = sub_10045D80C;
  void v29[3] = &unk_1019CD978;
  v29[4] = a1 + 8;
  v29[5] = &v12;
  char v30 = v29;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v32 = 0x40000000;
    uint64_t v33 = sub_100459154;
    uint64_t v34 = &unk_1019CD5B8;
    uint64_t v35 = &v37;
    uint64_t v36 = &v30;
    uint64_t v37 = 0;
    dispatch_async_and_wait(v9, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v32 = 0x40000000;
    uint64_t v33 = sub_100459110;
    uint64_t v34 = &unk_1019CD598;
    uint64_t v35 = &v37;
    uint64_t v36 = &v30;
    uint64_t v37 = 0;
    dispatch_sync(v9, &block);
  }
  uint64_t v10 = v37;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return v10;
}

void sub_10045251C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34)
{
  sub_1004525A0(v35);
  sub_1001F78F8(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_1004525A0(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1004525F4(uint64_t a1, int a2, long long *a3, long long *a4)
{
  uint64_t v10 = a1;
  int v11 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v12, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    uint64_t v13 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v14, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v14 = *(long long *)((char *)a3 + 24);
    uint64_t v15 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v16 = a3[3];
    uint64_t v17 = *((void *)a3 + 8);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v19 = *((void *)a4 + 2);
  }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 0x40000000;
  long long v20[2] = sub_10045D9AC;
  void v20[3] = &unk_1019CD998;
  v20[4] = a1 + 8;
  v20[5] = &v10;
  uint64_t v21 = v20;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    uint64_t v24 = sub_100459154;
    long long v25 = &unk_1019CD5B8;
    uint64_t v26 = &v28;
    uint64_t v27 = &v21;
    uint64_t v28 = 0;
    dispatch_async_and_wait(v7, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    uint64_t v24 = sub_100459110;
    long long v25 = &unk_1019CD598;
    uint64_t v26 = &v28;
    uint64_t v27 = &v21;
    uint64_t v28 = 0;
    dispatch_sync(v7, &block);
  }
  uint64_t v8 = v28;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
  return v8;
}

void sub_100452848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1001F78F8(v22);
  _Unwind_Resume(a1);
}

void sub_10045288C(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a1 + 8;
  uint64_t v8 = a1;
  int v9 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v11 = *((void *)a3 + 2);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 0x40000000;
  void v12[2] = sub_10045DB80;
  _OWORD v12[3] = &unk_1019CD9B8;
  void v12[4] = v6;
  v12[5] = &v8;
  uint64_t v13 = v12;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v15 = 0x40000000;
    long long v16 = sub_10045DEA8;
    uint64_t v17 = &unk_1019CD9F8;
    uint64_t v18 = a4;
    uint64_t v19 = &v13;
    dispatch_async_and_wait(v7, &block);
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v15 = 0x40000000;
    long long v16 = sub_10045DD7C;
    uint64_t v17 = &unk_1019CD9D8;
    uint64_t v18 = a4;
    uint64_t v19 = &v13;
    dispatch_sync(v7, &block);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
}

uint64_t sub_100452A14(uint64_t a1, int a2, long long *a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a1;
  int v9 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v11 = *((void *)a3 + 2);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 0x40000000;
  void v12[2] = sub_10045DF18;
  _OWORD v12[3] = &unk_1019CDA18;
  void v12[4] = v4;
  v12[5] = &v8;
  uint64_t v13 = v12;
  int v5 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v15 = 0x40000000;
    long long v16 = sub_100459154;
    uint64_t v17 = &unk_1019CD5B8;
    uint64_t v18 = &v20;
    uint64_t v19 = &v13;
    uint64_t v20 = 0;
    dispatch_async_and_wait(v5, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v15 = 0x40000000;
    long long v16 = sub_100459110;
    uint64_t v17 = &unk_1019CD598;
    uint64_t v18 = &v20;
    uint64_t v19 = &v13;
    uint64_t v20 = 0;
    dispatch_sync(v5, &block);
  }
  uint64_t v6 = v20;
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  return v6;
}

void sub_100452B90(uint64_t a1, int a2, long long *a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v6 = a1;
  int v7 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v9 = *((void *)a3 + 2);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10045E1F8;
  block[3] = &unk_1019CDA38;
  block[4] = v4;
  void block[5] = &v6;
  int v5 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32)) {
    dispatch_async_and_wait(v5, block);
  }
  else {
    dispatch_sync(v5, block);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100452C64(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1;
  int v6 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_10045E2B0;
  void v7[3] = &unk_1019CDA58;
  void v7[4] = a1 + 8;
  void v7[5] = &v5;
  uint64_t v8 = v7;
  uint64_t v4 = a1 + 24;
  int v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0u;
    a3[1] = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_10045E34C;
    long long v12 = &unk_1019CDA98;
    uint64_t v13 = a3;
    long long v14 = &v8;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_10045E2E4;
    long long v12 = &unk_1019CDA78;
    uint64_t v13 = a3;
    long long v14 = &v8;
    dispatch_sync(v3, &block);
  }
}

uint64_t sub_100452D90(void **a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1[15] + 40))(a1[15]);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1[23] + 40))(a1[23], a2, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1[21] + 40))(a1[21], a2, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1[13] + 40))(a1[13], a2, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1[17] + 40))(a1[17], a2, a3);
  int v6 = *(uint64_t (**)(void))(*a1[19] + 40);

  return v6();
}

uint64_t sub_100452EE4(uint64_t a1, int a2)
{
  int v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_10045E3B4;
  void v7[3] = &unk_1019CDAB8;
  void v7[4] = a1 + 8;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  int v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    unsigned int v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_10045E424;
    long long v12 = &unk_1019CDAF8;
    uint64_t v13 = &v15;
    long long v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    unsigned int v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_10045E3E8;
    long long v12 = &unk_1019CDAD8;
    uint64_t v13 = &v15;
    long long v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15;
}

void sub_100453018(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  void v5[2] = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10045E460;
  block[3] = &unk_1019CDB18;
  block[4] = a1 + 8;
  void block[5] = v5;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void sub_1004530AC(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  void v5[2] = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10045E498;
  block[3] = &unk_1019CDB38;
  block[4] = a1 + 8;
  void block[5] = v5;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void sub_100453140(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  __p[3] = a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1004532A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)int v7 = *(_OWORD *)a3;
    _DWORD v7[2] = *(void **)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a4;
    __p[2] = *(void **)(a4 + 16);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100453474(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 39) < 0) {
    operator delete(*v17);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_1004534B8(uint64_t a1, int a2, uint64_t *a3, long long *a4, long long *a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  memset(v13, 0, sizeof(v13));
  sub_100454A40(v13, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4));
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v14 = *a4;
    uint64_t v15 = *((void *)a4 + 2);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long __p = *a5;
    uint64_t v17 = *((void *)a5 + 2);
  }
  sub_1001FD3D8((uint64_t)v18, (uint64_t)a5 + 24);
  sub_100454248((uint64_t)v19, (uint64_t)a5 + 56);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 0x40000000;
  long long v20[2] = sub_10045E724;
  void v20[3] = &unk_1019CDB58;
  v20[4] = a1 + 8;
  v20[5] = &v11;
  uint64_t v21 = v20;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    uint64_t v24 = sub_100459154;
    long long v25 = &unk_1019CD5B8;
    uint64_t v26 = &v28;
    uint64_t v27 = &v21;
    uint64_t v28 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    uint64_t v24 = sub_100459110;
    long long v25 = &unk_1019CD598;
    uint64_t v26 = &v28;
    uint64_t v27 = &v21;
    uint64_t v28 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v28;
  if (v19[24])
  {
    blocuint64_t k = (void **)v19;
    sub_100155410(&block);
  }
  if (v18[24])
  {
    blocuint64_t k = (void **)v18;
    sub_100155494(&block);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  blocuint64_t k = (void **)v13;
  sub_100454BA8(&block);
  return v9;
}

void sub_100453714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  *(void *)(v31 - 104) = v30;
  sub_100454BA8((void ***)(v31 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_100453778(uint64_t a1, int a2, uint64_t *a3, long long *a4, long long *a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  memset(v13, 0, sizeof(v13));
  sub_100454A40(v13, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4));
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v14 = *a4;
    uint64_t v15 = *((void *)a4 + 2);
  }
  long long v16 = *a5;
  sub_1000593FC((uint64_t)&__p, a5 + 1);
  sub_1001FD3D8((uint64_t)v20, (uint64_t)(a5 + 3));
  sub_100454248((uint64_t)v21, (uint64_t)(a5 + 5));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000;
  void v22[2] = sub_10045E76C;
  void v22[3] = &unk_1019CDB78;
  v22[4] = a1 + 8;
  v22[5] = &v11;
  uint64_t v23 = v22;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v25 = 0x40000000;
    uint64_t v26 = sub_100459154;
    uint64_t v27 = &unk_1019CD5B8;
    uint64_t v28 = &v30;
    uint64_t v29 = &v23;
    uint64_t v30 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v25 = 0x40000000;
    uint64_t v26 = sub_100459110;
    uint64_t v27 = &unk_1019CD598;
    uint64_t v28 = &v30;
    uint64_t v29 = &v23;
    uint64_t v30 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v30;
  if (v21[24])
  {
    blocuint64_t k = (void **)v21;
    sub_100155410(&block);
  }
  if (v20[24])
  {
    blocuint64_t k = (void **)v20;
    sub_100155494(&block);
  }
  if (v19 && v18 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  blocuint64_t k = (void **)v13;
  sub_100454BA8(&block);
  return v9;
}

void sub_1004539CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  *(void *)(v33 - 120) = v32;
  sub_100454BA8((void ***)(v33 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_100453A38(uint64_t a1, int a2, uint64_t *a3, long long *a4, uint64_t a5)
{
  uint64_t v11 = a1;
  int v12 = a2;
  memset(v13, 0, sizeof(v13));
  sub_100454A40(v13, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4));
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v15 = *((void *)a4 + 2);
  }
  sub_10044EC40(v16, a5);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 0x40000000;
  void v17[2] = sub_10045E7B4;
  _OWORD v17[3] = &unk_1019CDB98;
  v17[4] = a1 + 8;
  v17[5] = &v11;
  char v18 = v17;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v20 = 0x40000000;
    uint64_t v21 = sub_100459154;
    uint64_t v22 = &unk_1019CD5B8;
    uint64_t v23 = &v25;
    uint64_t v24 = &v18;
    uint64_t v25 = 0;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v20 = 0x40000000;
    uint64_t v21 = sub_100459110;
    uint64_t v22 = &unk_1019CD598;
    uint64_t v23 = &v25;
    uint64_t v24 = &v18;
    uint64_t v25 = 0;
    dispatch_sync(v8, &block);
  }
  uint64_t v9 = v25;
  sub_100454840((uint64_t)v16);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  blocuint64_t k = (void **)v13;
  sub_100454BA8(&block);
  return v9;
}

void sub_100453C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v21 - 104) = v20;
  sub_100454BA8((void ***)(v21 - 104));
  _Unwind_Resume(a1);
}

void sub_100453C58(uint64_t a1)
{
  sub_100454C70(a1);

  operator delete();
}

void sub_100453C90(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100453C90(a1, *a2);
    sub_100453C90(a1, a2[1]);
    sub_100453CEC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100453CEC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

uint64_t sub_100453D1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  sub_100453DF4(a1 + 16, (long long *)a2 + 1);
  long long v5 = *((_OWORD *)a2 + 6);
  long long v6 = *((_OWORD *)a2 + 7);
  *(void *)(a1 + 128) = a2[16];
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 112) = v6;
  sub_100453E60((unsigned char *)(a1 + 136), (uint64_t)(a2 + 17));
  long long v7 = *(_OWORD *)(a2 + 45);
  *(void *)(a1 + 373) = *(uint64_t *)((char *)a2 + 373);
  *(_OWORD *)(a1 + 360) = v7;
  sub_100453FCC((unsigned char *)(a1 + 384), (long long *)a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 55);
  long long v9 = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 472) = *((unsigned char *)a2 + 472);
  *(_OWORD *)(a1 + 440) = v8;
  *(_OWORD *)(a1 + 456) = v9;
  *(unsigned char *)(a1 + 480) = 1;
  return a1;
}

void sub_100453DD0(_Unwind_Exception *a1)
{
  sub_10039BEEC(v2);
  sub_10039BF90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100453DF4(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    long long v3 = *a2;
    long long v4 = a2[1];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)a1 = v3;
    *(_OWORD *)(a1 + 16) = v4;
    sub_1000593FC(a1 + 40, (long long *)((char *)a2 + 40));
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_100453E4C(_Unwind_Exception *a1)
{
  sub_10039BF90(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_100453E60(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[216] = 0;
  if (*(unsigned char *)(a2 + 216))
  {
    sub_100453EB8((uint64_t)a1, a2);
    a1[216] = 1;
  }
  return a1;
}

void sub_100453EA4(_Unwind_Exception *a1)
{
  sub_10039BEEC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100453EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000593FC(a1, (long long *)a2);
  sub_1000593FC(v4 + 32, (long long *)(a2 + 32));
  sub_1000593FC(a1 + 64, (long long *)(a2 + 64));
  sub_1000593FC(a1 + 96, (long long *)(a2 + 96));
  sub_1000593FC(a1 + 128, (long long *)(a2 + 128));
  long long v5 = *(_OWORD *)(a2 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  long long v7 = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v6;
  *(_OWORD *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 160) = v5;
  return a1;
}

void sub_100453F48(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 120) && *(char *)(v1 + 119) < 0) {
    operator delete(*v4);
  }
  if (*(unsigned char *)(v1 + 88) && *(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(unsigned char *)(v1 + 56) && *(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100453FCC(unsigned char *__dst, long long *a2)
{
  *long long __dst = 0;
  __dst[48] = 0;
  if (*((unsigned char *)a2 + 48))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)long long __dst = v4;
    }
    *((void *)__dst + 3) = 0;
    *((void *)__dst + 4) = 0;
    *((void *)__dst + 5) = 0;
    sub_1000302C0(__dst + 24, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
    __dst[48] = 1;
  }
  return __dst;
}

void sub_10045405C(_Unwind_Exception *a1)
{
  sub_10039BE98(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100454088(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 480))
  {
    sub_10039BE98(a1 + 384);
    sub_10039BEEC(a1 + 136);
    sub_10039BF90(a1 + 16);
  }
  return a1;
}

char *sub_1004540CC(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_100157704(result, a4);
    uint64_t result = sub_100454154((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_100454134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100047F64(&a9);
  _Unwind_Resume(a1);
}

char *sub_100454154(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  long long v4 = __dst;
  uint64_t v11 = __dst;
  int v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  xpc_object_t v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10004FC84(v4, *(void **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)long long v4 = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      int v12 = v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  sub_100454210((uint64_t)v9);
  return v4;
}

void sub_1004541FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100454210(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000D8AD4(a1);
  }
  return a1;
}

uint64_t sub_100454248(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_1004542A0((void *)a1, a2);
  return a1;
}

void sub_100454280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    sub_100155410((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1004542A0(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    uint64_t result = sub_1004542F8(result, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *sub_1004542F8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10019F5D0(result, a4);
    uint64_t result = (void *)sub_100454380((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100454360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100155410(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100454380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100454404((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1004543E0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      sub_1000FECD4(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100454404(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  long long v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)long long v5 = v6;
  }
  return __dst;
}

void sub_100454480(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10045449C(unsigned char *a1, uint64_t a2)
{
  long long v4 = sub_10045453C(a1, a2);
  sub_1004546E8((uint64_t)(v4 + 88), a2 + 88);
  sub_100454248((uint64_t)(a1 + 216), a2 + 216);
  return a1;
}

void sub_1004544E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*(void **)(v1 + 168));
  }
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*(void **)(v1 + 144));
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*(void **)(v1 + 120));
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  sub_10045468C(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_10045453C(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    sub_100454594((uint64_t)a1, a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_100454580(_Unwind_Exception *a1)
{
  sub_10045468C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100454594(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  long long v6 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84(v6, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)long long v6 = v7;
  }
  return a1;
}

void sub_100454658(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045468C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

uint64_t sub_1004546E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  long long v7 = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10004FC84(v7, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)long long v7 = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  return a1;
}

void sub_1004547F4(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100454840(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 304))
  {
    long long v3 = (void **)(a1 + 280);
    sub_100155410(&v3);
  }
  if (*(unsigned char *)(a1 + 272))
  {
    long long v3 = (void **)(a1 + 248);
    sub_100155494(&v3);
  }
  if (*(unsigned char *)(a1 + 240))
  {
    long long v3 = (void **)(a1 + 216);
    sub_100155410(&v3);
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  return sub_10045468C(a1);
}

uint64_t sub_1004548F8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_1000593FC(a1 + 32, (long long *)(a2 + 32));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_1004540CC((char *)(a1 + 64), *(long long **)(a2 + 64), *(long long **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  sub_1000593FC(a1 + 88, (long long *)(a2 + 88));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  sub_1000593FC(a1 + 128, (long long *)(a2 + 128));
  return a1;
}

void sub_1004549D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v3[112] && v3[111] < 0) {
    operator delete(*v5);
  }
  sub_100047F64((void ***)va);
  if (v3[56] && v3[55] < 0) {
    operator delete(*v4);
  }
  if (v3[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void *sub_100454A40(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v4 = result;
    if (a4 >= 0x24924924924924ALL) {
      sub_10006A748();
    }
    uint64_t result = sub_1001A9B30((uint64_t)(result + 2), a4);
    long long v7 = result;
    *long long v4 = result;
    v4[1] = result;
    _DWORD v4[2] = &result[14 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_1001789C8((char *)&v7[v9 / 8], (long long *)(a2 + v9));
        v9 += 112;
      }
      while (a2 + v9 != a3);
      long long v7 = (void *)((char *)v7 + v9);
    }
    v4[1] = v7;
  }
  return result;
}

void sub_100454B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100454B38(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = (void **)(a1 + 56);
    sub_100047F64(&v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_100454BA8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_100454B38(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_100454C2C(void **a1, void **a2)
{
  long long v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

uint64_t sub_100454C70(uint64_t a1)
{
  *(void *)a1 = off_1019CCE10;
  sub_100453C90(a1 + 280, *(void **)(a1 + 288));
  long long v14 = (void **)(a1 + 256);
  sub_10008A88C(&v14);
  sub_1001F7124(a1 + 224, *(void **)(a1 + 232));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2) {
    sub_10004D2C8(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 192);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 176);
  if (v4) {
    sub_10004D2C8(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 160);
  if (v5) {
    sub_10004D2C8(v5);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 144);
  if (v6) {
    sub_10004D2C8(v6);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 112);
  if (v8) {
    sub_10004D2C8(v8);
  }
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 96);
  if (v9) {
    sub_10004D2C8(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (v10) {
    sub_10004D2C8(v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 64);
  if (v11) {
    sub_10004D2C8(v11);
  }
  LazuliManagerInterface::~LazuliManagerInterface((LazuliManagerInterface *)a1);
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_100454DA4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100454E70(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100454F48);
  __cxa_rethrow();
}

void sub_100454E98(_Unwind_Exception *a1)
{
}

void sub_100454EB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100454EE8(uint64_t a1)
{
}

uint64_t sub_100454F04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100454F48(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

void sub_100454F78()
{
}

uint64_t sub_100454F8C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void sub_100454F9C()
{
}

__n128 sub_100454FB0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019CD140;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100455004(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CD140;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10045503C(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  long long v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100455084(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004550C4()
{
}

void sub_1004550D4()
{
}

__n128 sub_1004550E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019CD1C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10045513C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CD1C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100455174(void *a1, void **a2)
{
  uint64_t v7 = 0;
  sub_1000271F8((int *)&v7, a2);
  long long v3 = (uint64_t (*)(void *, uint64_t *))a1[2];
  uint64_t v4 = a1[3];
  long long v5 = (void *)(a1[1] + (v4 >> 1));
  if (v4) {
    long long v3 = *(uint64_t (**)(void *, uint64_t *))(*v5 + v3);
  }
  return v3(v5, &v7);
}

uint64_t sub_1004551F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100455234()
{
}

void sub_100455244()
{
}

__n128 sub_100455258(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019CD240;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1004552AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CD240;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1004552E4(void *a1, xpc_object_t *a2)
{
  long long v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  long long v5 = (void *)v3[1];
  unint64_t v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *long long v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    unint64_t v9 = &v10;
  }
  sub_1001FFE94((uint64_t)v3, a2);
  long long v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    long long v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1001F7124((uint64_t)&v9, v10);
}

void sub_1004553A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1004553BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004553FC()
{
}

void sub_10045540C()
{
}

__n128 sub_100455420(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019CD2C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100455474(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019CD2C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1004554AC(void *a1, xpc_object_t *a2)
{
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v13 = 0;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (int *)a2, v5);
    uint64_t v8 = v13;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    uint64_t v8 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v5);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (uint64_t (*)(void *, uint64_t))a1[2];
  uint64_t v10 = a1[3];
  uint64_t v11 = (void *)(a1[1] + (v10 >> 1));
  if (v10) {
    unint64_t v9 = *(uint64_t (**)(void *, uint64_t))(*v11 + v9);
  }
  return v9(v11, v8);
}

uint64_t sub_100455590(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004555D0()
{
}

void sub_1004555E0()
{
}

void *sub_1004555F4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1019CD340;
  result[1] = v3;
  return result;
}

uint64_t sub_10045563C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019CD340;
  a2[1] = v2;
  return result;
}

void sub_100455668(uint64_t a1, xpc_object_t *a2)
{
}

uint64_t sub_100455670(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004556B0()
{
}

void sub_1004556BC(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_100453C90(a1, *(void **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v11, object, 0);
    xpc_release(object[0]);
    xpc_object_t v7 = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      xpc_object_t v7 = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(object, &v7, count);
    xpc_release(v7);
    for (uint64_t i = v12; i != object[1] || v11 != object[0]; uint64_t i = ++v12)
    {
      xpc_object_t v8 = i;
      xpc_object_t v9 = 0;
      xpc_object_t v7 = &v11;
      sub_10003FBDC((uint64_t)&v7, &v9);
      if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v7 = 0;
        xpc_object_t v8 = 0;
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v6 = v9;
        if (v9) {
          xpc_retain(v9);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_100455964((int *)&v7, &v6);
        xpc_release(v6);
        sub_100455B18((uint64_t **)a1, (int *)&v7, (uint64_t)&v7);
        xpc_release(v8);
      }
      xpc_release(v9);
    }
    xpc_release(v11);
    xpc_release(v11);
  }
  xpc_release(v3);
}

void sub_1004558BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object, xpc_object_t a11, xpc_object_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15)
{
  xpc_release(object);
  xpc_release(a15);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void sub_100455964(int *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v9 = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v9 = v3;
  }
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = &v9;
    xpc_object_t v7 = "first";
    sub_100048BAC((uint64_t)&v6, &object);
    xpc_type_t type = xpc_get_type(object);
    if (type == (xpc_type_t)&_xpc_type_string)
    {
      int v10 = *a1;
      ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v10, (int *)&object, v5);
      *a1 = v10;
    }
    else if (type == (xpc_type_t)&_xpc_type_BOOL {
           || type == (xpc_type_t)&_xpc_type_int64
    }
           || type == (xpc_type_t)&_xpc_type_uint64)
    {
      *a1 = xpc::dyn_cast_or_default((xpc *)&object, 0, (uint64_t)v5);
    }
    xpc_release(object);
    xpc_object_t v6 = &v9;
    xpc_object_t v7 = "second";
    sub_100048BAC((uint64_t)&v6, &object);
    sub_10014EF04((void **)a1 + 1, &object);
    xpc_release(object);
    xpc_object_t v3 = v9;
  }
  xpc_release(v3);
}

void sub_100455AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
}

uint64_t *sub_100455B18(uint64_t **a1, int *a2, uint64_t a3)
{
  xpc_object_t v6 = a1 + 1;
  long long v5 = a1[1];
  xpc_object_t v7 = a1 + 1;
  xpc_object_t v8 = a1 + 1;
  if (v5)
  {
    int v9 = *a2;
    while (1)
    {
      while (1)
      {
        xpc_object_t v8 = (uint64_t **)v5;
        int v10 = *((_DWORD *)v5 + 8);
        if (v9 >= v10) {
          break;
        }
        long long v5 = *v8;
        xpc_object_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        xpc_object_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    void v13[2] = 1;
    xpc_object_t v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    sub_100455C04((uint64_t)(v11 + 4), a3);
    sub_100046C38(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_100455C48((uint64_t)v13, 0);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t sub_100455C04(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = xpc_null_create();
  return a1;
}

void sub_100455C48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100453CEC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100455CA0(void *a1, uint64_t a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      xpc_object_t v6 = v5;
      if (a1[4]) {
        sub_10041DE0C(a1 + 6, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_100455D18(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void *sub_100455D2C(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = (void *)a2[6];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void sub_100455D78(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_100455DCC(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(unsigned int **)(a1 + 40);
  uint64_t v4 = *((void *)v3 + 4);
  long long v5 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), *v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v6 = (const char *)(v3 + 2);
    if (*((char *)v3 + 31) < 0) {
      xpc_object_t v6 = *(const char **)v6;
    }
    int v9 = 136446210;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [retrieve-message] start: %{public}s", (uint8_t *)&v9, 0xCu);
  }
  bzero(a2, 0x300uLL);
  (*(void (**)(void, void, unsigned int *))(**(void **)(v4 + 152) + 88))(*(void *)(v4 + 152), *v3, v3 + 2);
  xpc_object_t v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), *v3);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[760]) {
      xpc_object_t v8 = "OK";
    }
    else {
      xpc_object_t v8 = "EMPTY";
    }
    int v9 = 136315138;
    int v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I [retrieve-message] status: %s", (uint8_t *)&v9, 0xCu);
  }
}

void sub_100455F84(_Unwind_Exception *a1)
{
  sub_100455FA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100455FA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 760))
  {
    sub_100456034(a1 + 152);
    if (*(char *)(a1 + 143) < 0) {
      operator delete(*(void **)(a1 + 120));
    }
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*(void **)(a1 + 96));
    }
    if (*(unsigned char *)(a1 + 88))
    {
      uint64_t v3 = (void **)(a1 + 64);
      sub_100047F64(&v3);
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

uint64_t sub_100456034(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 600);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1019CD400[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 600) = -1;
  return a1;
}

void sub_100456090(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t v3 = (void **)(a2 + 56);
    sub_100155410(&v3);
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v3 = (void **)(a2 + 24);
    sub_100155494(&v3);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t sub_1004560F8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 368))
  {
    char v4 = (void **)(a2 + 344);
    sub_100155410(&v4);
  }
  if (*(char *)(a2 + 343) < 0) {
    operator delete(*(void **)(a2 + 320));
  }
  return sub_1002B26E8(a2);
}

void sub_100456150(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 104))
  {
    uint64_t v3 = (void **)(a2 + 80);
    sub_100155410(&v3);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v3 = (void **)(a2 + 48);
    sub_100155494(&v3);
  }
  if (*(unsigned char *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
  }
}

uint64_t sub_1004561C0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 360))
  {
    char v4 = (void **)(a2 + 336);
    sub_100155410(&v4);
  }
  return sub_1002B26E8(a2);
}

uint64_t sub_100456208(uint64_t a1, uint64_t a2)
{
  return sub_100454840(a2);
}

uint64_t sub_100456210(uint64_t a1, uint64_t a2)
{
  return sub_100456290(a2);
}

uint64_t sub_100456218(uint64_t a1, uint64_t a2)
{
  return sub_100456338(a2);
}

void sub_100456220(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 104))
  {
    uint64_t v3 = (void **)(a2 + 80);
    sub_100155494(&v3);
  }
  uint64_t v3 = (void **)(a2 + 56);
  sub_10045647C(&v3);
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
  }
}

uint64_t sub_100456288(uint64_t a1, uint64_t a2)
{
  return sub_1002B26E8(a2);
}

uint64_t sub_100456290(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 592))
  {
    uint64_t v3 = (void **)(a1 + 568);
    sub_100155410(&v3);
  }
  if (*(unsigned char *)(a1 + 560))
  {
    uint64_t v3 = (void **)(a1 + 536);
    sub_100155410(&v3);
  }
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  sub_10045468C(a1 + 320);
  return sub_1002B26E8(a1);
}

uint64_t sub_100456338(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v3 = (void **)(a1 + 328);
    sub_100155494(&v3);
  }
  if (*(unsigned char *)(a1 + 320))
  {
    uint64_t v3 = (void **)(a1 + 296);
    sub_100155494(&v3);
  }
  if (*(unsigned char *)(a1 + 288) && *(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  if (*(unsigned char *)(a1 + 256) && *(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  sub_1004563E8(a1 + 48);
  if (*(unsigned char *)(a1 + 40) && *(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_1004563E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(unsigned char *)(a1 + 168) && *(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}